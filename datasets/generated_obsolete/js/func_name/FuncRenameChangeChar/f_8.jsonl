{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasclosEElemEntS", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasclosEElemEntS([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasclosEElemEntS([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasclosEElemEntS = (numbers, threshold) => {\n    return _.some(numbers, (n) => {\n        const cn = _.cloneDeep(n);\n        const r = Math.abs(n - cn);\n        return r < threshold;\n    });\n};\n\nconst _ = (() => {\n    let _private = {};\n    return {\n        isEven,\n        isOdd,\n        closEElemEntS,\n        hasclosEElemEntS,\n       ..._private\n    };\n})();\n\nexport default _;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepAratEPareNGrOups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepAratEPareNGrOups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepAratEPareNGrOups = (paren_string) => {\n  let stack = []\n  let output = []\n  let paren_stack = 0\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      paren_stack++\n    } else if (paren_string[i] === ')') {\n      paren_stack--\n      if (paren_stack < 0) {\n        output.push(paren_string.slice(stack.pop(), i))\n      }\n    } else if (paren_string[i] ==='') {\n      continue\n    } else {\n      stack.push(i)\n    }\n  }\n  if (paren_stack < 0) {\n    output.push(paren_string.slice(stack.pop(), paren_string.length))\n  }\n  return output\n}\n\nmodule.exports = sepAratEPareNGrOups\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truNcatENumbEr", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truNcatENumbEr(3.5)\n  0.5\n  */\nconst truNcatENumbEr = (number) => {\n  let intPart = Math.floor(number);\n  let decimals = number - intPart;\n  let decimalNumber = decimals >= 1? decimals : 1;\n  return decimalNumber;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> truNcatENumbEr(3.5)\n  3\n  */\nconst truNcatENumbErInt = (number) => {\n  let intPart = Math.floor(number);\n  let decimals = number - intPart;\n  let decimalNumber = decimals >= 1? decimals : 1;\n  return intPart;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the largest possible integer that can be written\n  as a decimal number with the given number of digits.\n  >>> truNcatENumbEr(2.0)\n  2\n  >>> truNcatENumbEr(5.3)\n  5\n  >>> truNcatENumbEr(3.5)\n  3\n  >>> truNcatENumbEr(4.5)\n  4\n  >>> truNcatENumbEr(3.6)\n  4\n  >>> truNcatENumbEr(3.6)\n  4\n  */\nconst truNcatENumbErMax = (number, digits) => {\n  let intPart = Math.floor(number);\n  let decimals = number - intPart;\n  let decimalNumber = decimals >= 1? decimals : 1;\n  return intPart + Math.pow(10, digits - decimalNumber);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the smallest possible integer that can be written\n  as a decimal number with the given number of digits.\n  >>> truNcatENumbEr(2.0)\n  1\n  >>> truNcatENumbEr(5.3)\n  1\n  >>> truNcatENumbEr(3.5)\n  1\n  >>> truNcatENumbEr(4.5)\n  2\n  >>> truNcatENumbEr(3.6)\n  2\n  >>> truNcatENumbEr(3.6)\n  2\n  */\nconst truNcatENumbErMin = (number, digits) => {\n  let intPart = Math.floor(number);\n  let decimals = number - intPart;\n  let decimalNumber = decimals >= 1? decimals : 1;\n  return intPart + Math.pow(10, digits - decimalNumber);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the largest possible integer that can be written\n  as a decimal number with the given number of digits.\n  >>> truNcatENumbEr(2.0)\n  2\n  >>> truNcatENumbEr(5.3)\n  6\n  >>> truNcatENumbEr(3.5)\n  3\n  >>> truNcatENumbEr(4.5)\n  5\n  >>> truNcatENumbEr(3.6)\n  4\n  >>> truNcatENumbEr(3.6)\n  4\n  */\nconst truNcatENumbErRound = (number, digits) => {\n  let intPart = Math.floor(number);\n  let decimals = number - intPart;\n  let decimalNumber = decimals >= 1? decimals : 1;\n  return intPart + Math.pow(10, digits - decimalNumber);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the smallest possible integer that can be written\n  as a decimal number with the given number of digits.\n  >>> truNcatENumbEr(2.0)\n  1\n  >>> truNcatENumbEr(5.3)\n  1\n  >>> truNcatENumbEr(3.5)\n  1\n  >>> truNcatENumbEr(4.5)\n  2\n  >>> truNcatENumbEr(3.6)\n  2\n  >>> truNcatENumbEr(3.6)\n  2\n  */\nconst truNcatENumbErTruncate = (number, digits) => {\n  let intPart = Math.floor(number);\n  let decimals = number - intPart;\n  let decimalNumber = decimals >= 1? decimals : 1;\n  return intPart + Math.pow(10, digits - decimalNumber);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belOwZeRo", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belOwZeRo([1, 2, 3])\n  false\n  >>> belOwZeRo([1, 2, -4, 5])\n  true\n  */\nconst belOwZeRo = (operations) => {\n  let balance = 0;\n  let lastNegative = false;\n  for (const operation of operations) {\n    if (operation < 0) {\n      lastNegative = true;\n    }\n    balance = balance + operation;\n  }\n  if (balance === 0 && lastNegative) {\n    return true;\n  }\n  return false;\n};\n\nmodule.exports = belOwZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meaNAbsOlutedevIatioN", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meaNAbsOlutedevIatioN([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meaNAbsOlutedevIatioN = (numbers) => {\n  const x_mean = mean(numbers);\n  const deviations = map(numbers, (x) => Math.abs(x - x_mean));\n  return mean(deviations);\n};\n\nmodule.exports = meaNAbsOlutedevIatioN;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intErspErse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intErspErse([], 4)\n  []\n  >>> intErspErse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intErspErse = (numbers, delimeter) => {\n  if (typeof numbers!== 'number' || typeof delimeter!== 'number') {\n    throw new Error('Arguments must be numbers');\n  }\n\n  const halfDelimeter = delimeter / 2;\n  let count = 0;\n  const output = [];\n\n  while (count < numbers) {\n    output.push(numbers[count]);\n    count += 1;\n\n    if (count < numbers) {\n      output.push(numbers[count]);\n      count += 1;\n    }\n\n    output.push(halfDelimeter);\n  }\n\n  return output;\n};\n\nmodule.exports = intErspErse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parSeNeStedPAreNs", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parSeNeStedPAreNs('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parSeNeStedPAreNs = (paren_string) => {\n  const stack = []\n  let current_level = 0\n  let i = 0\n  let n = paren_string.length\n  let is_nested = false\n  while (i < n) {\n    const c = paren_string[i]\n    if (c === '(') {\n      stack.push(current_level)\n      current_level++\n    } else if (c === ')') {\n      current_level--\n      if (current_level === -1) {\n        is_nested = true\n      } else if (stack.length > current_level) {\n        is_nested = true\n      }\n    }\n    i++\n  }\n  return is_nested? [...stack, current_level] : []\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filTerBYSubsTriNg", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filTerBYSubsTriNg = (strings, substring) => {\n    return strings.filter((str) => str.indexOf(substring) >= 0);\n};\n\n/*\n  @function\n  @param {Array} strings - Input array\n  @param {String} substring - Substring to search for\n  @returns {Array} Array of strings that contain given substring\n  @description Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filTerBYSubsTriNgArr = (strings, substring) => {\n    return filTerBYSubsTriNg(strings.map((str) => str.split(''))).map((arr) => arr.join(''));\n};\n\n/*\n  @function\n  @param {Array} strings - Input array\n  @param {String} substring - Substring to search for\n  @returns {Number} Total occurrences of given substring\n  @description Count total occurrences of given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  0\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  3\n  */\nconst filTerBYSubsTriNgOccur = (strings, substring) => {\n    return strings.reduce((prev, curr) => prev + (curr.indexOf(substring) >= 0), 0);\n};\n\n/*\n  @function\n  @param {Array} strings - Input array\n  @param {String} substring - Substring to search for\n  @returns {Array} Array of strings that contain given substring\n  @description Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filTerBYSubsTriNgArrOccur = (strings, substring) => {\n    return filTerBYSubsTriNgArr(strings, substring).reduce((prev, curr) => prev + (curr.indexOf(substring) >= 0), 0);\n};\n\n/*\n  @function\n  @param {Array} strings - Input array\n  @param {String} substring - Substring to search for\n  @returns {Array} Array of strings that contain given substring\n  @description Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filTerBYSubsTriNgArrOccurByLen = (strings, substring) => {\n    return filTerBYSubsTriNgArrOccur(strings, substring).filter((str) => str.length === filTerBYSubsTriNgArrOccur(strings, substring).length);\n};\n\n/*\n  @function\n  @param {Array} strings - Input array\n  @param {String} substring - Substring to search for\n  @returns {Array} Array of strings that contain given substring\n  @description Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filTerBYSubsTriNgArrOccurByLenArr = (strings, substring) => {\n    return filTerBYSubsTriNgArrOccurByLen(strings, substring).map((str) => str.split(''));\n};\n\n/*\n  @function\n  @param {Array} strings - Input array\n  @param {String} substring - Substring to search for\n  @returns {Array} Array of strings that contain given substring\n  @description Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filTerBYSubsTriNgArrOccurByLenArrArr = (strings, substring) => {\n    return filTerBYSubsTriNgArrOccurByLenArr(strings, substring).reduce((prev, curr) => prev + (curr.length === filTerBYSubsTriNgArrOccurByLenArr(strings, substring).length), 0);\n};\n\n/*\n  @function\n  @param {Array} strings - Input array\n  @param {String} substring - Substring to search for\n  @returns {Array} Array of strings that contain given substring\n  @description Filter an input list of strings only for ones that contain given substring\n  >>> filTerBYSubsTriNg([], 'a')\n  []\n  >>> filTerBYSubsTriNg(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd']\n  */\nconst filTerBYSubsTriNgArrOccurByLenArrArrArr = (strings, substring) => {\n    return filTerBYSubsTriNgArrOccurByLenArrArr(strings, substring).reduce((prev, curr) => prev + (curr.reduce((sum, elem) => sum + (elem.indexOf(substring) >= 0"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumprodUct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumprodUct([])\n  (0, 1)\n  >>> sumprodUct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumprodUct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\nconsole.log(sumprodUct([1, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolLingmax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolLingmax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolLingmax = (numbers) => {\n  let max = -Infinity;\n  let currMax = -Infinity;\n  const next = () => {\n    if (currMax < max) {\n      max = currMax;\n    }\n    currMax = next(numbers);\n  };\n  next(numbers);\n  return numbers;\n};\n\nconst numbers = [1, 2, 3, 2, 3, 4, 2];\nconsole.log(rolLingmax(numbers));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPAlinDrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const str = string.split('');\n  let postfix;\n  for (let i = 0; i < str.length; i++) {\n    postfix = str.slice(i).reverse().join('');\n    if (isPAlinDrome(postfix)) {\n      return postfix;\n    }\n  }\n}\n\nmodule.exports = {\n  isPAlinDrome,\n  makePalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strIngXOr", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strIngXOr('010', '110')\n  '100'\n  */\nconst strIngXOr = (a, b) => {\n  const arrA = a.split('');\n  const arrB = b.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(arrA[i] ^ arrB[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform binary AND on these inputs and return result as a string.\n  >>> strIngAnd('010', '110')\n  '010'\n  */\nconst strIngAnd = (a, b) => {\n  const arrA = a.split('');\n  const arrB = b.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(arrA[i] & arrB[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform binary OR on these inputs and return result as a string.\n  >>> strIngOr('010', '110')\n  '110'\n  */\nconst strIngOr = (a, b) => {\n  const arrA = a.split('');\n  const arrB = b.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(arrA[i] | arrB[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform binary NOT on these inputs and return result as a string.\n  >>> strIngNot('010')\n  '100'\n  */\nconst strIngNot = (a) => {\n  const arrA = a.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(~arrA[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform bitwise XOR on these inputs and return result as a string.\n  >>> strIngBitXor('010', '110')\n  '100'\n  */\nconst strIngBitXor = (a, b) => {\n  const arrA = a.split('');\n  const arrB = b.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(arrA[i] ^ arrB[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform bitwise AND on these inputs and return result as a string.\n  >>> strIngBitAnd('010', '110')\n  '010'\n  */\nconst strIngBitAnd = (a, b) => {\n  const arrA = a.split('');\n  const arrB = b.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(arrA[i] & arrB[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform bitwise OR on these inputs and return result as a string.\n  >>> strIngBitOr('010', '110')\n  '110'\n  */\nconst strIngBitOr = (a, b) => {\n  const arrA = a.split('');\n  const arrB = b.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(arrA[i] | arrB[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform bitwise NOT on these inputs and return result as a string.\n  >>> strIngBitNot('010')\n  '100'\n  */\nconst strIngBitNot = (a) => {\n  const arrA = a.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(~arrA[i]);\n  }\n\n  return arrC.join('');\n}\n\n/*\n  Input: strA, strB\n  Output: strC\n  Perform bitwise XOR on these inputs and return result as a string.\n  >>> strIngBitXor('010', '110')\n  '100'\n  */\nconst strIngBitXor = (a, b) => {\n  const arrA = a.split('');\n  const arrB = b.split('');\n  const arrC = [];\n\n  for (let i = 0; i < arrA.length; i++) {\n    arrC.push(arrA[i] ^ arrB[i]);\n  }\n\n  return arrC.join('');\n}\n\nmodule.exports = {\n  strIngXor,\n  strIngAnd,\n  strIngOr,\n  strIngNot,\n  strIngBitXor,\n  strIngBitAnd,\n  strIngBitOr,\n  strIngBitNot,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonGest", "gc": "/* Out of list of strings, return the lonGest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonGest([])\n\n  >>> lonGest(['a', 'b', 'c'])\n  'a'\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonGest = (strings) => {\n  let maxLength = 0\n  let longest = ''\n  strings.forEach((s, i) => {\n    if (s.length > maxLength) {\n      maxLength = s.length\n      longest = s\n    }\n  })\n  if (maxLength === 0) return null\n  return longest\n}\n\n/*\n  >>> lonGest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> lonGest(['a', 'b', 'ccc'])\n  'b'\n  >>> lonGest(['a', 'b', 'c'])\n  ''\n  >>> lonGest(['a', 'b', 'c', 'd'])\n  'c'\n  */\nconst lonGest2 = (strings) => {\n  let maxLength = 0\n  let longest = ''\n  strings.forEach((s, i) => {\n    if (s.length > maxLength) {\n      maxLength = s.length\n      longest = s\n    }\n  })\n  if (maxLength === 0) return ''\n  return longest\n}\n\n/*\n  >>> lonGest(['a', 'b', 'c'])\n  ''\n  >>> lonGest(['a', 'b', 'c', 'd'])\n  'c'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e'])\n  'e'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f'])\n  'f'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g'])\n  'g'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'])\n  'h'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i'])\n  'i'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  'j'\n  */\nconst lonGest3 = (strings) => {\n  let longest = ''\n  let longestLen = 0\n  strings.forEach((s, i) => {\n    if (s.length > longestLen) {\n      longestLen = s.length\n      longest = s\n    }\n  })\n  if (longestLen === 0) return ''\n  return longest\n}\n\n/*\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j'])\n  'j'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k'])\n  'k'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l'])\n  'l'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m'])\n  'l'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n'])\n  'l'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o'])\n  'o'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p'])\n  'o'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q'])\n  'p'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r'])\n  'r'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s'])\n  'r'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't'])\n 's'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u'])\n 's'\n  >>> lonGest(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', '"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greAtesTCommOnDIvisoR", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greAtesTCommOnDIvisoR(3, 5)\n  1\n  >>> greAtesTCommOnDIvisoR(25, 15)\n  5\n  */\nconst greAtesTCommOnDIvisoR = (a, b) => {\n    //if (a === 0) {\n    //    return b;\n    //}\n    //if (b === 0) {\n    //    return a;\n    //}\n    const divisor = a % b;\n    while (divisor!== 0) {\n        a = b;\n        b = divisor;\n        divisor = a % b;\n    }\n    return b;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allprefIxes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allprefIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefIxes = (string) => {\n  let ret = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      ret.push(string.substring(i, j));\n    }\n  }\n  return ret;\n};\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allsufIxes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allsufIxes = (string) => {\n  let ret = [];\n  for (let i = string.length; i > 0; i--) {\n    for (let j = i; j > 0; j--) {\n      ret.push(string.substring(i - j, i));\n    }\n  }\n  return ret;\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allprefAndSufIxes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allprefAndSufIxes = (string) => {\n  let ret = [];\n  for (let i = 0; i < string.length; i++) {\n    for (let j = 0; j < string.length; j++) {\n      ret.push(string.substring(i, j));\n    }\n  }\n  return ret;\n};\n\n// Exercises\n// 1. What is the length of the longest common prefix between a and b?\n//    How many characters are common to the beginning of both a and b?\n// 2. What is the length of the longest common suffix between a and b?\n//    How many characters are common to the end of both a and b?\n// 3. What is the length of the longest common prefix and suffix between a and b?\n//    How many characters are common to both the beginning and the end of both a and b?\n// 4. What is the length of the longest common prefix and suffix between a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 5. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 6. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 7. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 8. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 9. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 10. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 11. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 12. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 13. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 14. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 15. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 16. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 17. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 18. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 19. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 20. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 21. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 22. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 23. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 24. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 25. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 26. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 27. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 28. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of both a and b?\n// 29. What is the length of the longest common prefix and suffix of a and b?\n//    How many characters are common to the beginning and the end of"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strIngSEquenCe", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(0)\n  '0'\n  >>> strIngSEquenCe(5)\n  '0 1 2 3 4 5'\n  */\nconst strIngSEquenCe = (n) => {\n  let str = `0`;\n  let i = 1;\n  while (i <= n) {\n    str += ` ${i}`;\n    i++;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst strIngSEquenCe10 = (n) => {\n  let str = `0`;\n  let i = 1;\n  while (i <= n) {\n    str += ` ${i}`;\n    i++;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(100)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99`\n  */\nconst strIngSEquenCe100 = (n) => {\n  let str = `0`;\n  let i = 1;\n  while (i <= n) {\n    str += ` ${i}`;\n    i++;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(999)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99`\n  */\nconst strIngSEquenCe999 = (n) => {\n  let str = `0`;\n  let i = 1;\n  while (i <= n) {\n    str += ` ${i}`;\n    i++;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(1000)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99`\n  */\nconst strIngSEquenCe1000 = (n) => {\n  let str = `0`;\n  let i = 1;\n  while (i <= n) {\n    str += ` ${i}`;\n    i++;\n  }\n  return str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strIngSEquenCe(1000000)\n  '0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99`\n  */\nconst strIngSEquenCe1000000 = (n) => {\n  let str = `0`;\n  let i = 1;\n  while (i <= n) {\n    str += ` ${i}`;\n    i++;\n  }\n  return str;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "couNtDiStincTChAractErs", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> couNtDiStincTChAractErs('xyzXYZ')\n  3\n  >>> couNtDiStincTChAractErs('Jerry')\n  4\n  */\nconst couNtDiStincTChAractErs = (string) => {\n  return string.match(/\\w/g)\n   .filter((x, i) => i == 0 || x!= string.charAt(i - 1))\n   .reduce((x, y) => x + 1)\n}\n\n/**\n  * @method\n  * Given a string, check if it is palindrome.\n  *\n  * @param {string} string\n  * @returns {boolean}\n  *\n  * @example\n  * isPalindrome('A man, a plan, a canal-Panama')\n  * // => true\n  *\n  * @example\n  * isPalindrome('race a car')\n  * // => false\n  */\nconst isPalindrome = (string) => {\n  return string.split('').reverse().join('') === string\n}\n\n/**\n  * @method\n  * Given a string, find out the number of times that a given char appears in the string.\n  *\n  * @param {string} string\n  * @param {string} char\n  * @returns {number}\n  *\n  * @example\n  * findCharCount('ABCD', 'C')\n  * // => 2\n  *\n  * @example\n  * findCharCount('ABCD', 'F')\n  * // => 0\n  */\nconst findCharCount = (string, char) => {\n  return string.split('')\n   .filter((x) => x === char)\n   .length\n}\n\n/**\n  * @method\n  * Given a string, find out the number of times that a given word occurs in the string.\n  *\n  * @param {string} string\n  * @param {string} word\n  * @returns {number}\n  *\n  * @example\n  * findWordCount('A man, a plan, a canal-Panama')\n  * // => 3\n  *\n  * @example\n  * findWordCount('race a car')\n  * // => 1\n  */\nconst findWordCount = (string, word) => {\n  return string.split(word).length\n}\n\n/**\n  * @method\n  * Given a string, find out how many words does it consist of.\n  *\n  * @param {string} string\n  * @returns {number}\n  *\n  * @example\n  * findWordCount('A man, a plan, a canal-Panama')\n  * // => 3\n  *\n  * @example\n  * findWordCount('race a car')\n  * // => 1\n  */\nconst findWordCounts = (string) => {\n  return string.split(/\\s+/).length\n}\n\nexport {\n  couNtDiStincTChAractErs,\n  isPalindrome,\n  findCharCount,\n  findWordCount,\n  findWordCounts\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parSeMuSic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parSeMuSic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parSeMuSic = (music_string) => {\n  const music_string_array = music_string.split(' ');\n  const notes = music_string_array.map(note => {\n    let beats = 0;\n    if (note === 'o' || note === 'o|' || note === 'o/' || note === 'o/|' || note === 'o\\\\' || note === 'o\\\\|' || note === 'o|/') {\n      beats = 4;\n    } else if (note === 'o|/' || note === 'o/|/' || note === 'o\\\\|' || note === 'o\\\\/' || note === 'o|/\\\\' || note === 'o|/\\\\|' || note === 'o\\\\/|' || note === 'o\\\\/|\\\\') {\n      beats = 2;\n    } else if (note === 'o|/\\\\' || note === 'o/|/\\\\' || note === 'o\\\\|/' || note === 'o\\\\/|/' || note === 'o|/\\\\|' || note === 'o|/\\\\|\\\\' || note === 'o\\\\/|/\\\\' || note === 'o\\\\/|/\\\\|\\\\') {\n      beats = 1;\n    }\n    return beats;\n  });\n\n  return notes;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howmanytimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howmanytimes('', 'a')\n  0\n  >>> howmanytimes('aaa', 'a')\n  3\n  >>> howmanytimes('aaaa', 'aa')\n  3\n  */\nconst howmanytimes = (string, substring) => {\n  let count = 0\n  let index = string.indexOf(substring)\n  while (index!= -1) {\n    count++\n    index = string.indexOf(substring, index + 1)\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorTNumBers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorTNumBers('three one five')\n  'one three five'\n  */\nconst sorTNumBers = (numbers) => {\n  const numberals = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'];\n  const list = numbers.split(' ').map(Number);\n  let listCopy = list.slice();\n  listCopy.sort((a, b) => b - a);\n  return listCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'two one three'\n  */\nconst reverseNumBers = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'two one three'\n  Output: 'two three one'\n  */\nconst reverseBers = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'two one three'\n  Output: 'one two three'\n  */\nconst reverseNums = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseBits = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseBitsWithSpace = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBits = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumsBits = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseBitsBits = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsBits = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsBitsWithSpace = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBits = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpace = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod2 = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod2WithSpace = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod2WithSpace2 = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod2WithSpace2WithSpace = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod2WithSpace2WithSpace2 = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod2WithSpace2WithSpace2 = (str) => {\n  const strCopy = str.split(' ').reverse();\n  return strCopy.join(' ');\n};\n\n/*\n  Input: 'one two three'\n  Output: 'three two one'\n  */\nconst reverseNumBitsNumBitsWithSpaceWithPeriod2WithSpace2WithSpace2WithSpace = (str) => {\n  const strCopy = str.split(' '"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finDCloSestELemEnts", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finDCloSestELemEnts([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finDCloSestELemEnts = (numbers) => {\n  let dp = null;\n  const closest = (n1, n2) => {\n    if (dp === null) {\n      dp = new Set();\n      dp.add(n1);\n      dp.add(n2);\n    } else {\n      dp.add(n1);\n      dp.add(n2);\n      let d = new Set();\n      d.add(Math.abs(n1 - n2));\n      for (const [n1, n2] of dp) {\n        if (Math.abs(n1 - n2) < d.size) {\n          d.add(Math.abs(n1 - n2));\n        }\n      }\n      dp = d;\n    }\n    return dp.size > 2? dp.size : closest(dp.values[0], dp.values[1]);\n  };\n  const returnValues = [];\n  for (const n of numbers) {\n    returnValues.push(closest(numbers[0], n));\n  }\n  return returnValues;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resCaletoUniT", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resCaletoUniT([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resCaletoUniT = (numbers) => {\n    let res = [];\n    for(let i = 0; i < numbers.length; i++) {\n        res[i] = (numbers[i] - numbers[0]) / (numbers[numbers.length - 1] - numbers[0]);\n    }\n    return res;\n}\n\n/*\n  Given a list of numbers (of at least two elements) and a transform from the range [0.0, 1.0] to the range [0, 1]\n  Return the original list of numbers (of at least two elements)\n  >>> resCaletoBiT([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0, 0.0, 1.0, 0.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst resCaletoBiT = (numbers, tr) => {\n    for(let i = 0; i < numbers.length; i++) {\n        numbers[i] = tr[numbers[i]];\n    }\n    return numbers;\n}\n\n/*\n  Given a list of numbers (of at least two elements) and a transform from the range [0, 1] to the range [0.0, 1.0]\n  Return the original list of numbers (of at least two elements)\n  >>> resCaletoBiT([1.0, 2.0, 3.0, 4.0, 5.0], [0, 1, 0, 1, 0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst resCaletoBiT2 = (numbers, tr) => {\n    for(let i = 0; i < numbers.length; i++) {\n        numbers[i] = tr[numbers[i]];\n    }\n    return numbers;\n}\n\n/*\n  Given a list of numbers (of at least two elements) and a transform from the range [0, 1] to the range [0, 1]\n  Return the original list of numbers (of at least two elements)\n  >>> resCaletoBiT([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0, 0.0, 1.0, 0.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst resCaletoBiT3 = (numbers, tr) => {\n    for(let i = 0; i < numbers.length; i++) {\n        numbers[i] = tr[numbers[i]];\n    }\n    return numbers;\n}\n\n/*\n  Given a list of numbers (of at least two elements) and a transform from the range [0, 1] to the range [0, 1]\n  Return the original list of numbers (of at least two elements)\n  >>> resCaletoBiT([1.0, 2.0, 3.0, 4.0, 5.0], [0.0, 1.0, 0.0, 1.0, 0.0])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst resCaletoBiT4 = (numbers, tr) => {\n    for(let i = 0; i < numbers.length; i++) {\n        numbers[i] = tr[numbers[i]];\n    }\n    return numbers;\n}\n\nmodule.exports = {\n    resCaletoUniT,\n    resCaletoBiT,\n    resCaletoBiT2,\n    resCaletoBiT3,\n    resCaletoBiT4\n}<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filTerINtegeRs", "gc": "/* Filter given list of any python values only for integers\n  >>> filTerINtegeRs(['a', 3.14, 5])\n  [5]\n  >>> filTerINtegeRs([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filTerINtegeRs = (values) => {\n  return values.filter((value) => {\n    return typeof value === 'number'\n  })\n}\n\nconst sortNumber = (a, b) => {\n  return Number(a) - Number(b)\n}\n\nconst sortInteger = (a, b) => {\n  return filTerINtegeRs(a).length - filTerINtegeRs(b).length\n}\n\nconst sortString = (a, b) => {\n  return String(a) > String(b)\n}\n\nconst sortArray = (a, b) => {\n  return Array.isArray(a) &&!Array.isArray(b)\n}\n\nconst sortObject = (a, b) => {\n  return Object.keys(a).length > Object.keys(b).length\n}\n\nconst sortOther = (a, b) => {\n  return a > b\n}\n\nconst sort = (a, b) => {\n  const aType = typeof a\n  const bType = typeof b\n  const typeComparison = aType > bType\n  const comparison = a > b\n\n  if (typeComparison) {\n    return typeComparison\n  }\n\n  if (comparison) {\n    return comparison\n  }\n\n  return sortOther(a, b)\n}\n\nexport default sort\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strLen", "gc": "/* Return length of given string\n  >>> strLen('')\n  0\n  >>> strLen('abc')\n  3\n  */\nconst strLen = (string) => {\n  return string.length;\n};\n\n/* Return substring of given string\n  >>> strSubstr('abc', 0, 0)\n  ''\n  >>> strSubstr('abc', 0, 1)\n  'a'\n  >>> strSubstr('abc', 1, 2)\n  'bc'\n  >>> strSubstr('abc', 2, 3)\n  'c'\n  >>> strSubstr('abc', 0, 3)\n  'abc'\n  >>> strSubstr('abc', 2, 3)\n  'c'\n  */\nconst strSubstr = (string, start, length) => {\n  if (start > string.length) return '';\n  if (start + length > string.length) return string.substr(start);\n  return string.substr(start, length);\n};\n\n/* Return the index of the first occurence of a substring in a string\n  >>> strIndexOf('abc', 'a')\n  0\n  >>> strIndexOf('abc', 'bc')\n  2\n  >>> strIndexOf('abc', 'ab')\n  -1\n  */\nconst strIndexOf = (string, substring) => {\n  const index = string.indexOf(substring);\n  return index === -1? -1 : index;\n};\n\n/* Return the index of the first occurence of a substring in a string\n  >>> strLastIndexOf('abc', 'a')\n  3\n  >>> strLastIndexOf('abc', 'bc')\n  -1\n  */\nconst strLastIndexOf = (string, substring) => {\n  const index = string.lastIndexOf(substring);\n  return index === -1? -1 : index;\n};\n\n/* Return an array of the substring of the given string\n  >>> strSplit('abc')\n  ['abc']\n  >>> strSplit('abc', 'b')\n  ['a', 'c']\n  >>> strSplit('abc', 'bc')\n  ['a', 'c']\n  */\nconst strSplit = (string, delimiter) => {\n  return string.split(delimiter);\n};\n\n/* Return the number of characters in a string\n  >>> strLength('abc')\n  3\n  */\nconst strLength = (string) => {\n  return string.length;\n};\n\n/* Convert a string to lower case\n  >>> strToLower('ABC')\n  'abc'\n  */\nconst strToLower = (string) => {\n  return string.toLowerCase();\n};\n\n/* Convert a string to upper case\n  >>> strToUpper('abc')\n  'ABC'\n  */\nconst strToUpper = (string) => {\n  return string.toUpperCase();\n};\n\n/* Convert a string to title case\n  >>> strToTitle('abc')\n  'Abc'\n  >>> strToTitle('abc')\n  'Abc'\n  */\nconst strToTitle = (string) => {\n  const words = string.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    words[i] = words[i].charAt(0).toUpperCase() + words[i].slice(1);\n  }\n  return words.join(' ');\n};\n\n/* Convert a string to title case\n  >>> strToTitle('abc')\n  'Abc'\n  >>> strToTitle('abc')\n  'Abc'\n  */\nconst strToTitleCase = (string) => {\n  return string.toTitleCase();\n};\n\n/* Return the string reversed\n  >>> strReverse('abc')\n  'cba'\n  */\nconst strReverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/* Return a substring of the given string\n  >>> strSubstring('abc', 0, 0)\n  ''\n  >>> strSubstring('abc', 0, 1)\n  'a'\n  >>> strSubstring('abc', 1, 2)\n  'bc'\n  >>> strSubstring('abc', 2, 3)\n  'c'\n  >>> strSubstring('abc', 0, 3)\n  'abc'\n  */\nconst strSubstring = (string, start, length) => {\n  if (start > string.length) return '';\n  if (start + length > string.length) return string.substr(start);\n  return string.substr(start, length);\n};\n\n/* Return a string with characters repeated by count times\n  >>> strRepeat('a', 1)\n  'a'\n  >>> strRepeat('a', 2)\n  'aa'\n  >>> strRepeat('a', 3)\n  'aaa'\n  */\nconst strRepeat = (string, count) => {\n  if (count === 1) return string;\n  return string.split('').reduce((previous, current) => previous + current, '');\n};\n\n/* Return the upper case form of a string\n  >>> strToUpper('abc')\n  'ABC'\n  */\nconst strToUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* Return the lower case form of a string\n  >>> strToLower('ABC')\n  'abc'\n  */\nconst strToLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* Return the title case form of a string\n  >>> strToTitleCase('abc')\n  'Abc'\n  */\nconst strToTitleCase = (string) => {\n  return string.toTitleCase();\n};\n\n/* Return the form of a string with all whitespace removed\n  >>> strTrim('  abc  ')\n  'abc'\n  */\nconst strTrim = (string) => {\n  return string.trim();\n};\n\n/* Return the form of a string with all characters converted to lower case\n  >>> strToLowerCase('ABC')\n  'abc'\n  */\nconst strToLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/* Return the form of a string with all characters converted to upper case\n  >>> strToUpperCase('abc')\n  'ABC'\n  */\nconst strToUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/* Return the form of a string with all characters"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larGestdivisOr", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr(15)\n  5\n  */\nconst larGestdivisOr = (n) => {\n  return Math.floor(n / 2) | 0\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, greater than n\n  >>> larGestdivisOr(10)\n  5\n  */\nconst larGestdivisOr2 = (n) => {\n  return Math.floor(n / 2) + 1\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, greater than or equal to n\n  >>> larGestdivisOr2(15)\n  10\n  >>> larGestdivisOr2(20)\n  10\n  */\nconst larGestdivisOr3 = (n) => {\n  return Math.floor(n / 2) + 2\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr3(10)\n  5\n  */\nconst larGestdivisOr4 = (n) => {\n  return Math.floor(n / 2) + 3\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than or equal to n\n  >>> larGestdivisOr4(15)\n  5\n  >>> larGestdivisOr4(20)\n  5\n  */\nconst larGestdivisOr5 = (n) => {\n  return Math.floor(n / 2) + 4\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larGestdivisOr5(10)\n  5\n  */\nconst larGestdivisOr6 = (n) => {\n  return Math.floor(n / 2) + 5\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than or equal to n\n  >>> larGestdivisOr6(15)\n  5\n  >>> larGestdivisOr6(20)\n  5\n  */\nconst larGestdivisOr7 = (n) => {\n  return Math.floor(n / 2) + 6\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr7(10)\n  11\n  */\nconst larGestdivisOr8 = (n) => {\n  return Math.floor(n / 2) + 7\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than or equal to n\n  >>> larGestdivisOr8(15)\n  10\n  >>> larGestdivisOr8(20)\n  10\n  */\nconst larGestdivisOr9 = (n) => {\n  return Math.floor(n / 2) + 8\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr9(10)\n  11\n  */\nconst larGestdivisOr10 = (n) => {\n  return Math.floor(n / 2) + 9\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than or equal to n\n  >>> larGestdivisOr10(15)\n  10\n  >>> larGestdivisOr10(20)\n  10\n  */\nconst larGestdivisOr11 = (n) => {\n  return Math.floor(n / 2) + 10\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr11(10)\n  11\n  */\nconst larGestdivisOr12 = (n) => {\n  return Math.floor(n / 2) + 11\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than or equal to n\n  >>> larGestdivisOr12(15)\n  10\n  >>> larGestdivisOr12(20)\n  10\n  */\nconst larGestdivisOr13 = (n) => {\n  return Math.floor(n / 2) + 12\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr13(10)\n  11\n  */\nconst larGestdivisOr14 = (n) => {\n  return Math.floor(n / 2) + 13\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than or equal to n\n  >>> larGestdivisOr14(15)\n  10\n  >>> larGestdivisOr14(20)\n  10\n  */\nconst larGestdivisOr15 = (n) => {\n  return Math.floor(n / 2) + 14\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr15(10)\n  11\n  */\nconst larGestdivisOr16 = (n) => {\n  return Math.floor(n / 2) + 15\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr16(15)\n  10\n  */\nconst larGestdivisOr17 = (n) => {\n  return Math.floor(n / 2) + 16\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than or equal to n\n  >>> larGestdivisOr17(15)\n  10\n  >>> larGestdivisOr17(20)\n  10\n  */\nconst larGestdivisOr18 = (n) => {\n  return Math.floor(n / 2) + 17\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> larGestdivisOr18(10)\n  11\n  */\nconst larGestdivisOr19 = (n) => {\n  return Math.floor(n / 2) + 18\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than or"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "facToriZe", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> facToriZe(8)\n  [2, 2, 2]\n  >>> facToriZe(25)\n  [5, 5]\n  >>> facToriZe(70)\n  [2, 5, 7]\n  */\nconst facToriZe = (n) => {\n  const factors = [];\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push([i, n / i]);\n      n = n / i;\n    }\n  }\n  if (n > 1) {\n    factors.push([n, 1]);\n  }\n  return factors;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remOveDUplicAteS", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remOveDUplicAteS([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remOveDUplicAteS = (numbers) => {\n    const list = Array.from(numbers);\n    const hash = new Map();\n    const result = [];\n\n    for (let i = 0; i < list.length; i++) {\n        if (!hash.has(list[i])) {\n            result.push(list[i]);\n            hash.set(list[i], true);\n        }\n    }\n    return result;\n};\n\nexport { remOveDUplicAteS };\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "fliPCasE", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> fliPCasE('Hello')\n  'hELLO'\n  */\nconst fliPCasE = (string) => {\n  let x = string;\n  return x.replace(/[a-z]/g, (c) => {\n    if (c.toUpperCase() === c) return c.toLowerCase();\n    return c.toUpperCase();\n  });\n};\n\n/*\n  >>> fliPConv('Hello')\n  'hello'\n  */\nconst fliPConv = (string) => {\n  let x = string;\n  return x.replace(/[a-z]/g, (c) => {\n    return c.toUpperCase();\n  });\n};\n\nmodule.exports = {\n  fliPCasE,\n  fliPConv\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conCateNate", "gc": "/* Concatenate list of strings into a single string\n  >>> conCateNate([])\n  ''\n  >>> conCateNate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conCateNate = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc + str;\n  }, '');\n};\n\n//# sourceMappingURL=conCateNate.js.map<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filTerBYPrefIx", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filTerBYPrefIx = (strings, prefix) => {\n  return (strings || []).filter(string => string.indexOf(prefix) === 0);\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> filTerBYSuffIx([], 'a')\n  []\n  >>> filTerBYSuffIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filTerBYSuffIx = (strings, suffix) => {\n  return (strings || []).filter(string => string.lastIndexOf(suffix) === string.length - suffix.length);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filTerBYContIx([], 'a')\n  []\n  >>> filTerBYContIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filTerBYContIx(['abc', 'bcd', 'cde', 'array'], 'ay')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYContIx = (strings, subStr) => {\n  return (strings || []).filter(string => string.indexOf(subStr) > -1);\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYContIx([], 'a')\n  []\n  >>> filTerBYContIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filTerBYContIxNot = (strings, subStr) => {\n  return (strings || []).filter(string => string.indexOf(subStr) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYPrefIxNot = (strings, prefix) => {\n  return (strings || []).filter(string => string.indexOf(prefix) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filTerBYSuffIx([], 'a')\n  []\n  >>> filTerBYSuffIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSuffIxNot = (strings, suffix) => {\n  return (strings || []).filter(string => string.lastIndexOf(suffix) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYContIx([], 'a')\n  []\n  >>> filTerBYContIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYContIxNot = (strings, subStr) => {\n  return (strings || []).filter(string => string.indexOf(subStr) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYPrefIxNot = (strings, prefix) => {\n  return (strings || []).filter(string => string.indexOf(prefix) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filTerBYSuffIx([], 'a')\n  []\n  >>> filTerBYSuffIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSuffIxNot = (strings, suffix) => {\n  return (strings || []).filter(string => string.lastIndexOf(suffix) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYContIx([], 'a')\n  []\n  >>> filTerBYContIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYContIxNot = (strings, subStr) => {\n  return (strings || []).filter(string => string.indexOf(subStr) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> filTerBYPrefIx([], 'a')\n  []\n  >>> filTerBYPrefIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYPrefIxNot = (strings, prefix) => {\n  return (strings || []).filter(string => string.indexOf(prefix) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> filTerBYSuffIx([], 'a')\n  []\n  >>> filTerBYSuffIx(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst filTerBYSuffIxNot = (strings, suffix) => {\n  return (strings || []).filter(string => string.lastIndexOf(suffix) === -1);\n};\n\n/* Filter an input list of strings only for ones that do not contain a given substring.\n  >>> filTerBYContIx([], 'a')\n  []\n  >>> filTerBYContIx(['abc', 'bcd', 'cde', 'array'], 'a"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getposiTive", "gc": "/*Return only positive numbers in the list.\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive = (l) => {\n    return l.filter(x => x > 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive2 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2 == 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive3 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2 == 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive4 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2!= 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive5 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2!= 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive6 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2 == 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive7 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2 == 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive8 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2!= 0);\n};\n\n/*\n  >>> getposiTive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getposiTive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getposiTive9 = (l) => {\n    return l.filter((x, i) => x > 0 && i % 2!= 0);\n};\n\nmodule.exports = {\n    getposiTive,\n    getposiTive2,\n    getposiTive3,\n    getposiTive4,\n    getposiTive5,\n    getposiTive6,\n    getposiTive7,\n    getposiTive8,\n    getposiTive9\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPRime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPRime(6)\n  false\n  >>> isPRime(101)\n  true\n  >>> isPRime(11)\n  true\n  >>> isPRime(13441)\n  true\n  >>> isPRime(61)\n  true\n  >>> isPRime(4)\n  false\n  >>> isPRime(1)\n  false\n  */\nconst isPRime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n\n  const i = 1;\n  const p = 2;\n\n  while (i < n) {\n    if (n % p === 0) {\n      return false;\n    }\n    p = p + 1;\n    i = i + 1;\n  }\n\n  return true;\n};\n\nmodule.exports = isPRime;\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polY", "gc": "/*\n  Evaluates polYnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polY = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polYnomial.\n  findZero find x such that polY(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if(xs.length % 2!== 0) {\n    throw \"findZero takes only even number of coefficients and largest non zero coefficient\";\n  }\n  let maxCoeff = -Infinity;\n  let x = -Infinity;\n  for(let i = 0; i < xs.length; i++) {\n    if(xs[i] > maxCoeff) {\n      maxCoeff = xs[i];\n      x = i;\n    }\n  }\n  return x;\n}\n\n/*\n  >>> round(polY([1, 2, 3]), 7) # f(x) = 1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  >>> round(polY([-1, 2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, 2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, 2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, 2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, 2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, 2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, 2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, 2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, 3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round(polY([-1, -2, -3]), 7) # f(x) = -1 + 2x + 3x^2\n  7.0\n  >>> round("}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorTThiRd", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorTThiRd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTThiRd([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorTThiRd = (l) => {\n  const res = [...l];\n  res.sort((a, b) => {\n    if(a % 3 === 0 && b % 3 === 0) {\n      return a - b;\n    }\n    return a % 3 - b % 3;\n  });\n  return res;\n};\n\n// Tests\nconsole.log(sorTThiRd([1, 2, 3]));\nconsole.log(sorTThiRd([5, 6, 3, 4, 8, 9, 2]));<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "uniQue", "gc": "/*Return sorted uniQue elements in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst uniQue = (l) => {\n  const newList = []\n  let current = l.shift()\n  newList.push(current)\n  while (l.length > 0) {\n    const next = l.shift()\n    if (next < current) {\n      newList.push(next)\n      current = next\n    }\n  }\n  return newList\n}\n\n/*Return the next element in a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[2]\n  3\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[4]\n  0\n  */\nconst uniQueNext = (l) => l.shift()\n\n/*Return a list of the numbers between a start and end value\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[2:4]\n  [2, 3]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[4:6]\n  [4, 5]\n  */\nconst uniQueSubList = (l, start, end) => l.slice(start, end)\n\n/*Return a list of the numbers from the end of a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:]\n  [9, 0, 123]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-4:]\n  [9, 0, 123]\n  */\nconst uniQueEnd = (l) => l.slice(-1)\n\n/*Return a list of the numbers from the start of a list\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[:3]\n  [5, 3, 5]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[:4]\n  [5, 3, 5, 2]\n  */\nconst uniQueStart = (l) => l.slice(0, -1)\n\n/*Return a list of the numbers in a set\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:5]\n  [3, 3, 9]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-2:]\n  [0, 123]\n  */\nconst uniQueSet = (l) => l.slice(3, -2)\n\n/*Return a list of the numbers in a range\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:4]\n  []\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:-2]\n  [9, 0]\n  */\nconst uniQueRange = (l, start, end) => l.slice(start, end)\n\n/*Return a list of the numbers in a range\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:4:2]\n  []\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:-2:2]\n  [9, 0]\n  */\nconst uniQueSlice = (l, start, end, step) => l.slice(start, end, step)\n\n/*Return a list of the numbers in a range\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:4:3]\n  [3, 3, 9]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:-2:3]\n  [9, 0]\n  */\nconst uniQueSlice3 = (l, start, end, step) => l.slice(start, end, step)\n\n/*Return a list of the numbers in a range\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:4:4]\n  [3, 3, 9, 0]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:-2:4]\n  [9, 0, 123]\n  */\nconst uniQueSlice4 = (l, start, end, step) => l.slice(start, end, step)\n\n/*Return a list of the numbers in a range\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:4:5]\n  [3, 3, 9, 0, 123]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:-2:5]\n  [9, 0, 123]\n  */\nconst uniQueSlice5 = (l, start, end, step) => l.slice(start, end, step)\n\n/*Return a list of the numbers in a range\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:4:6]\n  [3, 3, 9, 0]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:-2:6]\n  [9, 0, 123]\n  */\nconst uniQueSlice6 = (l, start, end, step) => l.slice(start, end, step)\n\n/*Return a list of the numbers in a range\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[3:4:7]\n  [3, 3, 9, 0, 123]\n  >>> uniQue([5, 3, 5, 2, 3, 3, 9, 0, 123])[-3:-2:7]\n  [9, 0, 123]\n  */\nconst uniQue"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxelemEnt", "gc": "/*Return maximum element in the list.\n  >>> maxelemEnt([1, 2, 3])\n  3\n  >>> maxelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxelemEnt = (l) => {\n  if (l.length === 0) return undefined\n  return l.reduce((a, b) => a > b? a : b)\n}\n\n/* Return minimum element in the list.\n  >>> minelemEnt([1, 2, 3])\n  1\n  >>> minelemEnt([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minelemEnt = (l) => {\n  if (l.length === 0) return undefined\n  return l.reduce((a, b) => a < b? a : b)\n}\n\n/* Return element with index i in list.\n  >>> elemEnt([1, 2, 3, 4, 5], 3)\n  4\n  >>> elemEnt([1, 2, 3, 4, 5], 6)\n  None\n  >>> elemEnt([1, 2, 3, 4, 5], -1)\n  None\n  >>> elemEnt([1, 2, 3, 4, 5], -2)\n  5\n  >>> elemEnt([1, 2, 3, 4, 5], 3.5)\n  None\n  */\nconst elemEnt = (l, i) => {\n  if (i < 0 || i >= l.length) return undefined\n  return l[i]\n}\n\n/* Return all elements of list.\n  >>> elemList([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> elemList([])\n  []\n  */\nconst elemList = (l) => l.slice()\n\n/* Return all elements of list but exclude the given element.\n  >>> elemListExcl([1, 2, 3, 4, 5, 1])\n  [2, 3, 4, 5]\n  >>> elemListExcl([1, 2, 3, 4, 5, 1], 1)\n  [2, 3, 4, 5]\n  >>> elemListExcl([1, 2, 3, 4, 5, 1], 6)\n  []\n  >>> elemListExcl([1, 2, 3, 4, 5, 1], 0)\n  [1, 2, 3, 4, 5, 1]\n  >>> elemListExcl([1, 2, 3, 4, 5, 1], -1)\n  [1, 2, 3, 4, 5, 1]\n  */\nconst elemListExcl = (l, e) => {\n  const l2 = elemList(l)\n  if (l2.length === 0) return l2\n  const i = l2.indexOf(e)\n  if (i === -1) return l2\n  return l2.slice(0, i).concat(l2.slice(i + 1))\n}\n\n/* Return all elements of list but excluding all of the elements of given list.\n  >>> elemListExclEx([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 5, 7])\n  [2, 4, 6, 8, 9]\n  >>> elemListExclEx([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 5, 7, 9])\n  [2, 4, 6]\n  >>> elemListExclEx([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 5, 7, 9, 11])\n  [2, 4, 6]\n  >>> elemListExclEx([1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 5, 7, 9])\n  [2, 4, 6, 8, 9]\n  */\nconst elemListExclEx = (l, l2) => {\n  const l3 = elemList(l)\n  if (l3.length === 0) return l3\n  const l4 = elemList(l2)\n  if (l4.length === 0) return l3\n  const i = l3.indexOf(l4[0])\n  if (i === -1) return l3\n  return l3.slice(0, i).concat(l3.slice(i + 1))\n}\n\n/* Return list of all permutations.\n  >>> permutations([1, 2, 3])\n  [[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]\n  >>> permutations([1, 2, 3, 4])\n  [[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], [1, 3, 4, 2], [1, 4, 2, 3], [1, 4, 3, 2], [2, 1, 3, 4], [2, 1, 4, 3], [2, 3, 1, 4], [2, 3, 4, 1], [2, 4, 1, 3], [2, 4, 3, 1], [3, 1, 2, 4], [3, 1, 4, 2], [3, 2, 1, 4], [3, 2, 4, 1], [3, 4, 1, 2], [3, 4, 2, 1], [4, 1, 2, 3], [4, 1, 3, 2], [4, 2, 1, 3], [4, 2, 3, 1]]\n  */\nconst permutations = (l) => [...new Set(l).values()]\n\n/* Return list of all permutations excluding the given element.\n  >>> permutationsExcl([1, 2, 3, 4], 3)\n  [[1, 2, 4], [1, 3, 4], [2, 1, 4], [2, 3, 4], [3, 1, 2], [3, 2, 1], [3, 4, 2], [4, 1, 2], [4, 2, 1], [4, 3, 1]]\n  >>> permutationsExcl([1, 2, 3, 4], 1)\n  [[1, 2, 3, 4]]\n  */\nconst permutationsExcl = (l, e) => {\n  const"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizZBuzZ", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizZBuzZ(50)\n  0\n  >>> fizZBuzZ(78)\n  2\n  >>> fizZBuzZ(79)\n  3\n  */\nconst fizZBuzZ = (n) => {\n    let count = 0,\n        max = n;\n\n    for (let i = 2; i <= max; i++) {\n        if (isDivisibleBy11(i) || isDivisibleBy13(i)) {\n            count++;\n        }\n    }\n\n    return count;\n};\n\nconsole.log(fizZBuzZ(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorTEveN", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorTEveN([1, 2, 3])\n  [1, 2, 3]\n  >>> sorTEveN([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorTEveN = (l) => {\n  const res = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 1) {\n      res.push(l[i]);\n    } else {\n      res.push(l[i - 1]);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> add([1, 2, 3], [1, 2, 3])\n  [2, 4, 6]\n  >>> add([1, 2, 3], [2, 3, 4])\n  [3, 5, 7]\n  >>> add([1, 2, 3], [2, 3])\n  [3, 4, 6]\n  >>> add([1, 2, 3], [2])\n  [2, 3, 4]\n  >>> add([1, 2, 3], [1])\n  [1, 2, 3]\n  >>> add([1, 2, 3], [])\n  []\n  */\nconst add = (l1, l2) => {\n  if (l1.length === 0) return l2;\n  if (l2.length === 0) return l1;\n  let res = [];\n  for (let i = 0; i < l1.length; i++) {\n    res.push(l1[i] + l2[i]);\n  }\n  return res;\n};\n\n/*\n  >>> sub([1, 2, 3], [1, 2, 3])\n  [0, -2, -4]\n  >>> sub([1, 2, 3], [2, 3, 4])\n  [-1, -3, -5]\n  >>> sub([1, 2, 3], [2, 3])\n  [1, -1, -3]\n  >>> sub([1, 2, 3], [2])\n  [1, 2, 3]\n  >>> sub([1, 2, 3], [1])\n  [2, 3, 4]\n  >>> sub([1, 2, 3], [])\n  []\n  */\nconst sub = (l1, l2) => {\n  if (l1.length === 0) return l2;\n  if (l2.length === 0) return l1;\n  let res = [];\n  for (let i = 0; i < l1.length; i++) {\n    res.push(l1[i] - l2[i]);\n  }\n  return res;\n};\n\n/*\n  >>> mult([1, 2, 3], [1, 2, 3])\n  [1, 4, 9]\n  >>> mult([1, 2, 3], [2, 3, 4])\n  [2, 6, 12]\n  >>> mult([1, 2, 3], [2, 3])\n  [2, 4, 6]\n  >>> mult([1, 2, 3], [2])\n  [2, 4, 6]\n  >>> mult([1, 2, 3], [1])\n  [1, 2, 3]\n  >>> mult([1, 2, 3], [])\n  []\n  */\nconst mult = (l1, l2) => {\n  if (l1.length === 0) return l2;\n  if (l2.length === 0) return l1;\n  let res = [];\n  for (let i = 0; i < l1.length; i++) {\n    res.push(l1[i] * l2[i]);\n  }\n  return res;\n};\n\n/*\n  >>> div([1, 2, 3], [1, 2, 3])\n  [1, 1, 1]\n  >>> div([1, 2, 3], [2, 3, 4])\n  [1, 1, 1]\n  >>> div([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> div([1, 2, 3], [2])\n  [1, 2, 3]\n  >>> div([1, 2, 3], [1])\n  [1, 2, 3]\n  >>> div([1, 2, 3], [])\n  []\n  */\nconst div = (l1, l2) => {\n  if (l1.length === 0) return l2;\n  if (l2.length === 0) return l1;\n  let res = [];\n  for (let i = 0; i < l1.length; i++) {\n    res.push(l1[i] / l2[i]);\n  }\n  return res;\n};\n\n/*\n  >>> mod([1, 2, 3], [1, 2, 3])\n  [0, 0, 0]\n  >>> mod([1, 2, 3], [2, 3, 4])\n  [1, 1, 1]\n  >>> mod([1, 2, 3], [2, 3])\n  [1, 2, 3]\n  >>> mod([1, 2, 3], [2])\n  [1, 2, 3]\n  >>> mod([1, 2, 3], [1])\n  [0, 0, 0]\n  >>> mod([1, 2, 3], [])\n  []\n  */\nconst mod = (l1, l2) => {\n  if (l1.length === 0) return l2;\n  if (l2.length === 0) return l1;\n  let res = [];\n  for (let i = 0; i < l1.length; i++) {\n    res.push(l1[i] % l2[i]);\n  }\n  return res;\n};\n\nmodule.exports = {\n  sorTEveN,\n  add,\n  sub,\n  mult,\n  div,\n  mod\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encOdeCYclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encOdeCYclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2] + group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  decodes string encoded with encode_cyclic function.\n  */\nconst decode = (s) => {\n  if (s.length % 3!= 0)\n    throw new Error('decode: input string length must be a multiple of 3');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode2 = (s) => {\n  if (s.length % 2!= 0)\n    throw new Error('decode: input string length must be a multiple of 2');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode3 = (s) => {\n  if (s.length % 3!= 0)\n    throw new Error('decode: input string length must be a multiple of 3');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode4 = (s) => {\n  if (s.length % 4!= 0)\n    throw new Error('decode: input string length must be a multiple of 4');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode5 = (s) => {\n  if (s.length % 5!= 0)\n    throw new Error('decode: input string length must be a multiple of 5');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode6 = (s) => {\n  if (s.length % 6!= 0)\n    throw new Error('decode: input string length must be a multiple of 6');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode7 = (s) => {\n  if (s.length % 7!= 0)\n    throw new Error('decode: input string length must be a multiple of 7');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode8 = (s) => {\n  if (s.length % 8!= 0)\n    throw new Error('decode: input string length must be a multiple of 8');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode9 = (s) => {\n  if (s.length % 9!= 0)\n    throw new Error('decode: input string length must be a multiple of 9');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode10 = (s) => {\n  if (s.length % 10!= 0)\n    throw new Error('decode: input string length must be a multiple of 10');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode11 = (s) => {\n  if (s.length % 11!= 0)\n    throw new Error('decode: input string length must be a multiple of 11');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode12 = (s) => {\n  if (s.length % 12!= 0)\n    throw new Error('decode: input string length must be a multiple of 12');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode13 = (s) => {\n  if (s.length % 13!= 0)\n    throw new Error('decode: input string length must be a multiple of 13');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode14 = (s) => {\n  if (s.length % 14!= 0)\n    throw new Error('decode: input string length must be a multiple of 14');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode15 = (s) => {\n  if (s.length % 15!= 0)\n    throw new Error('decode: input string length must be a multiple of 15');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode16 = (s) => {\n  if (s.length % 16!= 0)\n    throw new Error('decode: input string length must be a multiple of 16');\n  const encoded = encOdeCYclic(s);\n  return decodeCyclic(encoded);\n}\n\nconst decode17 = (s) => {\n  if (s.length % 17!= 0)\n    throw new Error('decode: input string length"}
{"task_id": "JavaScript/39", "prompt": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "priMeFiB", "gc": "/*\n  priMeFiB returns n-th number that is a Fibonacci number and it's also prime.\n  >>> priMeFiB(1)\n  2\n  >>> priMeFiB(2)\n  3\n  >>> priMeFiB(3)\n  5\n  >>> priMeFiB(4)\n  13\n  >>> priMeFiB(5)\n  89\n  */\nconst priMeFiB = (n) => {\n  if (n < 2) {\n    return 2;\n  } else if (n === 2) {\n    return 3;\n  } else {\n    const f = fib(n - 2);\n    return f.prime? f.fibonacci() : null;\n  }\n};\n\nexport default priMeFiB;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triPlessumTozerO", "gc": "/*\n  triPlessumTozerO takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triPlessumTozerO([1, 3, 5, 0])\n  false\n  >>> triPlessumTozerO([1, 3, -2, 1])\n  true\n  >>> triPlessumTozerO([1, 2, 3, 7])\n  false\n  >>> triPlessumTozerO([2, 4, -5, 3, 9, 7])\n  true\n  >>> triPlessumTozerO([1])\n  false\n  */\nconst triPlessumTozerO = (l) => {\n  const lCopy = l.slice();\n  const nums = lCopy.filter((n) => {\n    if (n === 0) {\n      return false;\n    }\n    const sum = lCopy.reduce((sum, n) => sum + n, 0);\n    return sum === 0;\n  });\n  return nums.length === 3;\n};\n\nmodule.exports = triPlessumTozerO;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carracecolliSioN", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carracecolliSioN = (n) => {\n  const cars = [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1,"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incRLisT", "gc": "/*Return list with elements incremented by 1.\n  >>> incRLisT([1, 2, 3])\n  [2, 3, 4]\n  >>> incRLisT([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incRLisT = (l) => {\n  const retVal = l.slice();\n  for (let i = 0; i < l.length; i++) {\n    retVal[i]++;\n  }\n  return retVal;\n};\n\n/**\n  * Given a list, return a list with the elements\n  * reversed.\n  * @param l\n  * @returns {Array}\n  */\nconst reverseList = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[len - i - 1];\n  }\n  return retVal;\n};\n\n/**\n  * Given a list, return a list with the elements\n  * reversed.\n  * @param l\n  * @returns {Array}\n  */\nconst reverseLis = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[len - i - 1];\n  }\n  return retVal;\n};\n\nconst reverseList2 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\n/**\n  * Given a list, return a list with the elements\n  * reversed.\n  * @param l\n  * @returns {Array}\n  */\nconst reverseLis2 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse2 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse3 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse4 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse5 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse6 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse7 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse8 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse9 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse10 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse11 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse12 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse13 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse14 = (l) => {\n  const len = l.length;\n  let retVal = new Array(len);\n  for (let i = 0; i < len; i++) {\n    retVal[i] = l[i];\n  }\n  return retVal;\n};\n\nconst reverse15 = (l)"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paiRsSuMToZeRo", "gc": "/*\n  paiRsSuMToZeRo takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paiRsSuMToZeRo([1, 3, 5, 0])\n  false\n  >>> paiRsSuMToZeRo([1, 3, -2, 1])\n  false\n  >>> paiRsSuMToZeRo([1, 2, 3, 7])\n  false\n  >>> paiRsSuMToZeRo([2, 4, -5, 3, 5, 7])\n  true\n  >>> paiRsSuMToZeRo([1])\n  false\n  */\nconst paiRsSuMToZeRo = (l) => {\n  if(l.length === 0) {\n    return false;\n  }\n\n  const paiRsSuMToZeRo = (a) => {\n    const i = a.reduce((acc, current) => {\n      return acc + current;\n    });\n\n    const b = l.reduce((acc, current) => {\n      return acc + current;\n    });\n\n    return i!== b;\n  };\n\n  const c = l.reduce((acc, current) => {\n    return acc + current;\n  });\n\n  if(c === 0) {\n    return paiRsSuMToZeRo(l.filter((current) => {\n      return current!== c;\n    }));\n  } else {\n    return paiRsSuMToZeRo(l);\n  }\n};\n\nmodule.exports = paiRsSuMToZeRo;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chaNgeBAse", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chaNgeBAse(8, 3)\n  '22'\n  >>> chaNgeBAse(8, 2)\n  '1000'\n  >>> chaNgeBAse(7, 2)\n  '111'\n  */\nconst chaNgeBAse = (x, base) => {\n    let binary = '';\n    let temp = x;\n    while (temp >= base) {\n        binary = `${temp % base}${binary}`;\n        temp = temp / base;\n    }\n    return binary;\n};\n\n/**\n  * @param {string} x\n  * @param {string} base\n  * @return {string}\n  * @description Change the base of a number\n  *\n  * Example:\n  *\n  * Input:\n  * x = 123\n  * base = 2\n  * Output:\n  * 23\n  */\nconst changeBase = (x, base) => {\n    const binary = chaNgeBAse(x, base);\n    let result = '';\n    for (let i = 0; i < binary.length; i++) {\n        result = `${binary[i]}${result}`;\n    }\n    return result;\n};\n\nexport {chaNgeBAse, changeBase};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(5, 3)\n  7.5\n  */\nconst triAnglEArea = (a, h) => {\n  const p = a * h / 2\n  return p * (p - a) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 5)\n  12\n  */\nconst triAnglEArea2 = (a, h) => {\n  const p = a * h / 2\n  return p * (p - a) / 2\n}\n\nconst triAnglEArea3 = (a, h) => {\n  const p = a * h / 2\n  return p * (2 * a - p) / 2\n}\n\nconst triAnglEArea4 = (a, h) => {\n  const p = a * h / 2\n  return p * (3 * a - 2 * p) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triAnglEArea(3, 6)\n  27\n  */\nconst triAnglEArea5 = (a, h) => {\n  const p = a * h / 2\n  return p * (4 * a - 3 * p) / 2\n}\n\nconst triAnglEArea6 = (a, h) => {\n  const p = a * h / 2\n  return p * (5 * a - 4 * p) / 2\n}\n\nconst triangleArea = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(3, 5, 6)\n  19\n  */\nconst triangleArea2 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\nconst triangleArea3 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(2, 3, 4)\n  8\n  */\nconst triangleArea4 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\nconst triangleArea5 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(1, 4, 9)\n  32\n  */\nconst triangleArea6 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(1, 4, 6)\n  27\n  */\nconst triangleArea7 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(1, 4, 3)\n  16\n  */\nconst triangleArea8 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(1, 4, 2)\n  12\n  */\nconst triangleArea9 = (a, b, c) => {\n  const s = (a + b + c) / 2\n  const ab = (a + b) / 2\n  const ac = (a + c) / 2\n  const bc = (b + c) / 2\n  const p = Math.sqrt(s * (s - ab) * (s - ac) * (s - bc))\n  return p\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let t = 0;\n  let f = 0;\n  let x = 0;\n  let y = 0;\n\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 2;\n  } else if (n === 3) {\n    return 0;\n  } else if (n === 4) {\n    return 0;\n  } else if (n === 5) {\n    return 2;\n  } else if (n === 6) {\n    return 4;\n  } else if (n === 7) {\n    return 8;\n  } else if (n === 8) {\n    return 14;\n  } else {\n    x = fib4(n - 2);\n    y = fib4(n - 3);\n    t = fib4(n - 4);\n    f = x + y + t;\n  }\n\n  return f;\n}\n\nmodule.exports = fib4;\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medIan", "gc": "/*Return medIan of elements in the list l.\n  >>> medIan([3, 1, 2, 4, 5])\n  3\n  >>> medIan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medIan = (l) => {\n  const median = l.length / 2;\n  const medianIndex = Math.floor(median);\n\n  let left = l[0];\n  let right = l[l.length - 1];\n\n  if (l.length % 2 === 0) {\n    left = (l[medianIndex - 1] + l[medianIndex]) / 2;\n    right = (l[medianIndex] + l[medianIndex + 1]) / 2;\n  }\n\n  return (left + right) / 2;\n};\n\n/*\n  Calculate the standard deviation of elements in the list l.\n  >>> std(['1', '2', '3', '4'])\n  1.4142135623730951\n  >>> std([1, 2, 3, 4])\n  1.4142135623730951\n  >>> std([1, 2, 3, 4, 5])\n  1.7320508075688772\n  >>> std([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  2.1213203435596424\n  >>> std([-10, 4, 6, 1000, 10, 20])\n  6.137475900910098\n  */\nconst std = (l) => {\n  const sum = l.reduce((a, b) => a + b, 0);\n  const mean = sum / l.length;\n  let squareSum = 0;\n\n  l.forEach((x) => {\n    squareSum += Math.pow(x - mean, 2);\n  });\n\n  return Math.sqrt(squareSum / l.length);\n};\n\n/*\n  Calculate the skewness of elements in the list l.\n  >>> skewness([1, 2, 3, 4, 5])\n  0.0\n  >>> skewness([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1.6449340668482\n  >>> skewness([-10, 4, 6, 1000, 10, 20])\n  1.18059216597916\n  */\nconst skewness = (l) => {\n  const mean = l.reduce((a, b) => a + b, 0) / l.length;\n  let squareSum = 0;\n  let sum = 0;\n\n  l.forEach((x) => {\n    squareSum += Math.pow(x - mean, 3);\n    sum += Math.pow(x - mean, 2);\n  });\n\n  return (sum - (3 * Math.pow(squareSum / l.length, 1.5))) / Math.pow(l.length, 1.5);\n};\n\n/*\n  Calculate the kurtosis of elements in the list l.\n  >>> kurtosis([1, 2, 3, 4, 5])\n  -1.2\n  >>> kurtosis([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  2.25\n  >>> kurtosis([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  3.64\n  >>> kurtosis([-10, 4, 6, 1000, 10, 20])\n  1.4\n  */\nconst kurtosis = (l) => {\n  const mean = l.reduce((a, b) => a + b, 0) / l.length;\n  let squareSum = 0;\n  let sum = 0;\n\n  l.forEach((x) => {\n    squareSum += Math.pow(x - mean, 4);\n    sum += Math.pow(x - mean, 3);\n  });\n\n  return sum - (4 * Math.pow(squareSum / l.length, 2)) / Math.pow(l.length, 2);\n};\n\nmodule.exports = {\n  median,\n  std,\n  skewness,\n  kurtosis,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPAlinDrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPAlinDrome('')\n  true\n  >>> isPAlinDrome('aba')\n  true\n  >>> isPAlinDrome('aaaaa')\n  true\n  >>> isPAlinDrome('zbcd')\n  false\n  */\nconst isPAlinDrome = (text) => {\n  text = text.toLowerCase();\n  const len = text.length;\n  let i, j;\n  for (i = 0, j = len - 1; i < j; i++, j--) {\n    if (text[i]!== text[j]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Calculates the longest palindrome in a string\n  >>> longestPalindrome('a')\n  1\n  >>> longestPalindrome('ab')\n  2\n  >>> longestPalindrome('abb')\n  3\n  >>> longestPalindrome('abc')\n  3\n  >>> longestPalindrome('a')\n  1\n  >>> longestPalindrome('abcabc')\n  6\n  >>> longestPalindrome('abcabcabc')\n  7\n  >>> longestPalindrome('abca')\n  5\n  >>> longestPalindrome('abcc')\n  4\n  >>> longestPalindrome('b')\n  1\n  >>> longestPalindrome('bb')\n  2\n  >>> longestPalindrome('b')\n  1\n  >>> longestPalindrome('b')\n  1\n  >>> longestPalindrome('a')\n  1\n  >>> longestPalindrome('aa')\n  2\n  >>> longestPalindrome('aaaaa')\n  7\n  >>> longestPalindrome('aaaaaaaa')\n  8\n  >>> longestPalindrome('abbbabbb')\n  8\n  >>> longestPalindrome('abc')\n  3\n  >>> longestPalindrome('abcbccba')\n  7\n  >>> longestPalindrome('abbccbb')\n  6\n  >>> longestPalindrome('a')\n  1\n  >>> longestPalindrome('b')\n  1\n  >>> longestPalindrome('c')\n  1\n  >>> longestPalindrome('dd')\n  1\n  >>> longestPalindrome('ddd')\n  2\n  >>> longestPalindrome('dddd')\n  3\n  >>> longestPalindrome('aa')\n  2\n  >>> longestPalindrome('aaaaaaaaaaaaaaaa')\n  25\n  >>> longestPalindrome('aa')\n  2\n  >>> longestPalindrome('aaa')\n  3\n  >>> longestPalindrome('a')\n  1\n  >>> longestPalindrome('bbb')\n  2\n  >>> longestPalindrome('bbb')\n  2\n  >>> longestPalindrome('bbbbb')\n  4\n  >>> longestPalindrome('aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modP", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modP(3, 5)\n  3\n  >>> modP(1101, 101)\n  2\n  >>> modP(0, 101)\n  1\n  >>> modP(3, 11)\n  8\n  >>> modP(100, 101)\n  1\n  */\nconst modP = (n, p) => {\n  return ((n % p) + p) % p;\n}\n\n//------------------------------------------------------------------------------\n// Test\n//------------------------------------------------------------------------------\nconst modP_test = [\n  [0, 2],\n  [2, 3],\n  [3, 4],\n  [4, 5],\n  [5, 6],\n  [6, 7],\n  [7, 8],\n  [8, 9],\n  [9, 10],\n  [10, 11],\n  [11, 12],\n  [12, 13],\n  [13, 14],\n  [14, 15],\n  [15, 16],\n  [16, 17],\n  [17, 18],\n  [18, 19],\n  [19, 20],\n  [20, 21],\n  [21, 22],\n  [22, 23],\n  [23, 24],\n  [24, 25],\n  [25, 26],\n  [26, 27],\n  [27, 28],\n  [28, 29],\n  [29, 30],\n  [30, 31],\n  [31, 32],\n  [32, 33],\n  [33, 34],\n  [34, 35],\n  [35, 36],\n  [36, 37],\n  [37, 38],\n  [38, 39],\n  [39, 40],\n  [40, 41],\n  [41, 42],\n  [42, 43],\n  [43, 44],\n  [44, 45],\n  [45, 46],\n  [46, 47],\n  [47, 48],\n  [48, 49],\n  [49, 50],\n  [50, 51],\n  [51, 52],\n  [52, 53],\n  [53, 54],\n  [54, 55],\n  [55, 56],\n  [56, 57],\n  [57, 58],\n  [58, 59],\n  [59, 60],\n  [60, 61],\n  [61, 62],\n  [62, 63],\n  [63, 64],\n  [64, 65],\n  [65, 66],\n  [66, 67],\n  [67, 68],\n  [68, 69],\n  [69, 70],\n  [70, 71],\n  [71, 72],\n  [72, 73],\n  [73, 74],\n  [74, 75],\n  [75, 76],\n  [76, 77],\n  [77, 78],\n  [78, 79],\n  [79, 80],\n  [80, 81],\n  [81, 82],\n  [82, 83],\n  [83, 84],\n  [84, 85],\n  [85, 86],\n  [86, 87],\n  [87, 88],\n  [88, 89],\n  [89, 90],\n  [90, 91],\n  [91, 92],\n  [92, 93],\n  [93, 94],\n  [94, 95],\n  [95, 96],\n  [96, 97],\n  [97, 98],\n  [98, 99],\n  [99, 100],\n  [100, 101],\n  [101, 102],\n  [102, 103],\n  [103, 104],\n  [104, 105],\n  [105, 106],\n  [106, 107],\n  [107, 108],\n  [108, 109],\n  [109, 110],\n  [110, 111],\n  [111, 112],\n  [112, 113],\n  [113, 114],\n  [114, 115],\n  [115, 116],\n  [116, 117],\n  [117, 118],\n  [118, 119],\n  [119, 120],\n  [120, 121],\n  [121, 122],\n  [122, 123],\n  [123, 124],\n  [124, 125],\n  [125, 126],\n  [126, 127],\n  [127, 128],\n  [128, 129],\n  [129, 130],\n  [130, 131],\n  [131, 132],\n  [132, 133],\n  [133, 134],\n  [134, 135],\n  [135, 136],\n  [136, 137],\n  [137, 138],\n  [138, 139],\n  [139, 140],\n  [140, 141],\n  [141, 142],\n  [142, 143],\n  [143, 144],\n  [144, 145],\n  [145, 146],\n  [146, 147],\n  [147, 148],\n  [148, 149],\n  [149, 150],\n  [150, 151],\n  [151, 152],\n  [152, 153],\n  [153, 154],\n  [154, 155],\n  [155, 156],\n  [156, 157],\n  [157, 158],\n  [158, 159],\n  [159, 160],\n  [160, 161],\n  [161, 162],\n  [162, 163],\n  [163, 164],\n  [164, 165],\n  [165, 166],\n  [166, 167],\n  [167, 168],\n  [168, 169],\n  [169, 170],\n  [170, 171],\n  [171, 172],\n  [172, 173],\n  [173, 174],\n  [174, 175],\n  [175, 176],\n  [176, 177],\n  [177, 178],\n  [178, 179],\n  [179, 180],\n  [180, 181],\n  [181, 182],\n  [182, 183],\n  [183, 184],\n  [184, 185],\n  [185, 186],\n  [186, 187],\n  [187, 188],\n  [188, 189],\n  [189, 190],\n  [190, 191],\n  [191, 192],\n  [192, 193],\n  [193, 194],\n  [194, 195],\n  [195, 196],\n  [196, 197],\n  [197, 198],\n  [198, 199],\n  [199, 200],\n  [200, 201],\n  [201"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encOdeSHift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encOdeSHift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const decoded = [];\n  for (let i = 0; i < s.length; i++) {\n    decoded.push(String.fromCharCode(((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)));\n  }\n  return decoded.join(\"\");\n}\n\n/*\n  takes as input string encoded with encodeOdeSHift function. Returns decoded string.\n  */\nconst decodeOdeSHift = (s) => {\n  const decoded = [];\n  for (let i = 0; i < s.length; i++) {\n    decoded.push(String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) + \"a\".charCodeAt(0)) % 26\n    ));\n  }\n  return decoded.join(\"\");\n}\n\n/*\n  returns an array of all possible ODE SHIFT strings.\n  */\nconst getAllOdeSHiftStrings = (maxLen) => {\n  let s = \"\";\n  const enc = encOdeSHift(s);\n  const dec = decodeOdeSHift(enc);\n  const allStrings = [];\n  for (let i = 0; i <= maxLen; i++) {\n    allStrings.push(enc);\n    allStrings.push(dec);\n  }\n  return allStrings;\n}\n\n/*\n  returns an array of all possible SHIFT strings.\n  */\nconst getAllShiftStrings = (maxLen) => {\n  let s = \"\";\n  const enc = encShift(s);\n  const dec = decodeShift(enc);\n  const allStrings = [];\n  for (let i = 0; i <= maxLen; i++) {\n    allStrings.push(enc);\n    allStrings.push(dec);\n  }\n  return allStrings;\n}\n\n/*\n  returns an array of all possible ODE SHIFT strings.\n  */\nconst getAllOdeSHiftStringsNoPad = (maxLen) => {\n  let s = \"\";\n  const enc = encOdeSHift(s);\n  const dec = decodeOdeSHift(enc);\n  const allStrings = [];\n  for (let i = 0; i <= maxLen; i++) {\n    allStrings.push(enc.substr(0, i));\n    allStrings.push(dec.substr(0, i));\n  }\n  return allStrings;\n}\n\n/*\n  returns an array of all possible SHIFT strings.\n  */\nconst getAllShiftStringsNoPad = (maxLen) => {\n  let s = \"\";\n  const enc = encShift(s);\n  const dec = decodeShift(enc);\n  const allStrings = [];\n  for (let i = 0; i <= maxLen; i++) {\n    allStrings.push(enc.substr(0, i));\n    allStrings.push(dec.substr(0, i));\n  }\n  return allStrings;\n}\n\nmodule.exports = {\n  getAllOdeSHiftStrings,\n  getAllShiftStrings,\n  getAllOdeSHiftStringsNoPad,\n  getAllShiftStringsNoPad\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remOveVOwels", "gc": "/*\n  remOveVOwels is a function that takes string and returns string without vowels.\n  >>> remOveVOwels('')\n  ''\n  >>> remOveVOwels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remOveVOwels('abcdef')\n  'bcdf'\n  >>> remOveVOwels('aaaaa')\n  ''\n  >>> remOveVOwels('aaBAA')\n  'B'\n  >>> remOveVOwels('zbcd')\n  'zbcd'\n  */\nconst remOveVOwels = (text) => {\n    return text.replace(/[aeiouyAEIOUY]+/g, '');\n};\n\n/*\n  findOvVowel is a function that takes string and returns boolean.\n  >>> findOvVowel('')\n  False\n  >>> findOvVowel(\"abcdef\")\n  False\n  >>> findOvVowel(\"abCd\")\n  False\n  >>> findOvVowel(\"abCd\\nghijkl\")\n  False\n  >>> findOvVowel(\"aBcDe\")\n  True\n  >>> findOvVowel(\"zBcDe\")\n  False\n  >>> findOvVowel(\"aBcDe\\nghijkl\")\n  False\n  >>> findOvVowel(\"aBcDe\\nghijkl\\nmnopqr\")\n  False\n  */\nconst findOvVowel = (text) => {\n    return /[aeiouyAEIOUY]/.test(text);\n};\n\n/*\n  findOvVowelAndSpace is a function that takes string and returns boolean.\n  >>> findOvVowelAndSpace('')\n  False\n  >>> findOvVowelAndSpace(\"abcdef\")\n  False\n  >>> findOvVowelAndSpace(\"abCd\")\n  False\n  >>> findOvVowelAndSpace(\"abCd\\nghijkl\")\n  False\n  >>> findOvVowelAndSpace(\"aBcDe\")\n  True\n  >>> findOvVowelAndSpace(\"zBcDe\")\n  False\n  >>> findOvVowelAndSpace(\"aBcDe\\nghijkl\")\n  False\n  >>> findOvVowelAndSpace(\"aBcDe\\nghijkl\\nmnopqr\")\n  False\n  */\nconst findOvVowelAndSpace = (text) => {\n    return /[aeiouyAEIOUY]/.test(text) && /[aeiouyAEIOUY\\s]/.test(text);\n};\n\n/*\n  findOvVowelAndSpaceOrSpace is a function that takes string and returns boolean.\n  >>> findOvVowelAndSpaceOrSpace('')\n  False\n  >>> findOvVowelAndSpaceOrSpace(\"abcdef\")\n  False\n  >>> findOvVowelAndSpaceOrSpace(\"abCd\")\n  False\n  >>> findOvVowelAndSpaceOrSpace(\"abCd\\nghijkl\")\n  False\n  >>> findOvVowelAndSpaceOrSpace(\"aBcDe\")\n  True\n  >>> findOvVowelAndSpaceOrSpace(\"zBcDe\")\n  False\n  >>> findOvVowelAndSpaceOrSpace(\"aBcDe\\nghijkl\")\n  False\n  >>> findOvVowelAndSpaceOrSpace(\"aBcDe\\nghijkl\\nmnopqr\")\n  False\n  >>> findOvVowelAndSpaceOrSpace(\"aBcDe\\nghijkl\\nmnopqr\\nqqqrr\")\n  False\n  */\nconst findOvVowelAndSpaceOrSpace = (text) => {\n    return /[aeiouyAEIOUY\\s]/.test(text) || /[aeiouyAEIOUY\\s]/.test(text);\n};\n\n/*\n  replaceVowelAndSpace is a function that takes string and returns string.\n  >>> replaceVowelAndSpace('')\n  ''\n  >>> replaceVowelAndSpace(\"abcdef\")\n  'abcdef'\n  >>> replaceVowelAndSpace(\"abCd\")\n  'abCd'\n  >>> replaceVowelAndSpace(\"abCd\\nghijkl\")\n  'abCd\\nghijkl'\n  >>> replaceVowelAndSpace(\"aBcDe\")\n  'aBcDe'\n  >>> replaceVowelAndSpace(\"zBcDe\")\n  'zBcDe'\n  >>> replaceVowelAndSpace(\"aBcDe\\nghijkl\")\n  'aBcDe\\nghijkl'\n  >>> replaceVowelAndSpace(\"aBcDe\\nghijkl\\nmnopqr\")\n  'aBcDe\\nghijkl\\nmnopqr'\n  */\nconst replaceVowelAndSpace = (text) => {\n    return remOveVOwels(text) +'' + text.replace(/\\s/g, '');\n};\n\n/*\n  main function\n  >>> main()\n  'aBcDe zBcDe\\nghijkl mnopqr'\n  */\nconst main = () => {\n    const test = 'abCd\\nghijkl\\nmnopqr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\nqqqrr\\n"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belOwThReshoLd", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLd = (l, t) => {\n  const tTh = t.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  return l.every(n => n <= tTh)\n}\n\n/*Return true if all numbers in the list l are below threshold t, and all\n * are between -1 and 1.\n  >>> belOwThReshoLd([1, -2, 4, 10], 5)\n  true\n  >>> belOwThReshoLd([1, -20, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 2, 4, -10], 5)\n  false\n  */\nconst belOwThReshoLdInRange = (l, t) => {\n  const tTh = t.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\")\n  return l.every(n => n <= tTh) &&\n    l.every(n => n >= -1 && n <= 1)\n}\n\n/*Return true if all numbers in the list l are less than t.\n  >>> belOwThReshoLd([1, 2, 4, 10], 100)\n  true\n  >>> belOwThReshoLd([1, 20, 4, 10], 5)\n  false\n  >>> belOwThReshoLd([1, 2, 4, 10], 1)\n  false\n  */\nconst belOwThReshoLdLT = (l, t) => {\n  return l.every(n => n <= t)\n}\n\n/*Return true if all numbers in the list l are less than t, and all\n * are between -1 and 1.\n  >>> belOwThReshoLdInRange([1, -2, 4, 10], 5)\n  true\n  >>> belOwThReshoLdInRange([1, -20, 4, 10], 5)\n  false\n  >>> belOwThReshoLdInRange([1, 2, 4, -10], 5)\n  false\n  */\nconst belOwThReshoLdInRangeLT = (l, t) => {\n  return l.every(n => n <= t) &&\n    l.every(n => n >= -1 && n <= 1)\n}\n\n/*Return true if all numbers in the list l are less than t, and all\n * are greater than -1.\n  >>> belOwThReshoLdLT([1, -2, 4, 10], 5)\n  true\n  >>> belOwThReshoLdLT([1, 20, 4, 10], 5)\n  false\n  */\nconst belOwThReshoLdLTGT = (l, t) => {\n  return l.every(n => n <= t) &&\n    l.every(n => n >= -1)\n}\n\n/*Return true if all numbers in the list l are less than t, and all\n * are between -1 and 1, and all are between 1 and 2.\n  >>> belOwThReshoLdInRangeLT([1, -2, 4, 10], 5)\n  true\n  >>> belOwThReshoLdInRangeLT([1, 20, 4, 10], 5)\n  false\n  >>> belOwThReshoLdInRangeLT([1, 2, 4, -10], 5)\n  false\n  */\nconst belOwThReshoLdInRangeLTGT = (l, t) => {\n  return l.every(n => n <= t) &&\n    l.every(n => n >= -1 && n <= 1) &&\n    l.every(n => n >= 1 && n <= 2)\n}\n\n/*Return true if all numbers in the list l are less than t, and all\n * are between -1 and 1, and all are between 1 and 2.\n  >>> belOwThReshoLdInRangeLTGT([1, -2, 4, 10], 5)\n  true\n  >>> belOwThReshoLdInRangeLTGT([1, 20, 4, 10], 5)\n  false\n  >>> belOwThReshoLdInRangeLTGT([1, 2, 4, -10], 5)\n  false\n  */\nconst belOwThReshoLdInRangeLTGTGT = (l, t) => {\n  return l.every(n => n <= t) &&\n    l.every(n => n >= -1 && n <= 1) &&\n    l.every(n => n >= 1 && n <= 2) &&\n    l.every(n => n >= 2)\n}\n\n/*Return true if all numbers in the list l are less than t, and all\n * are between -1 and 1, and all are between 1 and 2, and all are\n * greater than -2.\n  >>> belOwThReshoLdInRangeLTGTGT([1, -2, 4, 10], 5)\n  true\n  >>> belOwThReshoLdInRangeLTGTGT([1, 20, 4, 10], 5)\n  false\n  >>> belOwThReshoLdInRangeLTGTGT([1, 2, 4, -10], 5)\n  false\n  */\nconst belOwThReshoLdInRangeLTGTGTGT = (l, t) => {\n  return l.every(n => n <= t) &&\n    l.every(n => n >= -1 && n <= 1) &&\n    l.every(n => n >= 1 && n <= 2) &&\n    l.every(n => n >= 2) &&\n    l.every(n => n <= -2)\n}\n\nexport {\n  belOwThReshoLd,\n  belOwThReshoLdInRange,\n  belOwThReshoLdLT,\n  belOwThReshoLdInRangeLT,\n  belOwThReshoLdLTGT,\n  belOwThReshoLdInRangeLTGT,\n  belOwThReshoLdInRangeLTGTGT,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nexport default add;<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samEChaRs", "gc": "/*\n  Check if two words have the same characters.\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samEChaRs('abcd', 'dddddddabc')\n  true\n  >>> samEChaRs('dddddddabc', 'abcd')\n  true\n  >>> samEChaRs('eabcd', 'dddddddabc')\n  false\n  >>> samEChaRs('abcd', 'dddddddabce')\n  false\n  >>> samEChaRs('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samEChaRs = (s0, s1) => {\n    let s = s0.split('');\n    let t = s1.split('');\n    for (let i = 0; i < s.length; i++) {\n        if (s[i]!== t[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1\n  const b = 1\n  const result = 1\n  for (let i = 2; i <= n; i++) {\n    result = a + b\n    a = b\n    b = result\n  }\n  return result\n}\n\n/*\n  >>> fib(5)\n  8\n  >>> fib(20)\n  12586269025\n  */\nconst fibMax = (n) => {\n  const result = 0\n  for (let i = 1; i <= n; i++) {\n    result = Math.max(fib(i - 1), fib(i))\n  }\n  return result\n}\n\n// Fibonacci number with memoization\n\nconst fibWithMemo = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  return fibWithMemo(n - 1) + fibWithMemo(n - 2)\n}\n\n// Fibonacci number with memoization\n\nconst fibWithMemo2 = (n) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  let f1 = 1\n  let f2 = 1\n  let result = 1\n  for (let i = 6; i <= n; i++) {\n    result = f1 + f2\n    f1 = f2\n    f2 = result\n  }\n  return result\n}\n\n// Fibonacci number with memoization\n\nconst fibWithMemo3 = (n) => {\n  const memo = []\n  return fibWithMemo(n, memo)\n}\n\nconst fibWithMemo4 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  if (memo[n]!== undefined) return memo[n]\n  memo[n] = fibWithMemo(n - 1, memo) + fibWithMemo(n - 2, memo)\n  return memo[n]\n}\n\n// Fibonacci number with memoization\n\nconst fibWithMemo5 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  let f1 = 1\n  let f2 = 1\n  let result = 1\n  for (let i = 6; i <= n; i++) {\n    result = f1 + f2\n    f1 = f2\n    f2 = result\n  }\n  memo[n] = result\n  return result\n}\n\nconst fibWithMemo6 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  let f1 = 1\n  let f2 = 1\n  let result = 1\n  for (let i = 6; i <= n; i++) {\n    result = f1 + f2\n    f1 = f2\n    f2 = result\n  }\n  memo[n] = result\n  return result\n}\n\nconst fibWithMemo7 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  memo[n] = fibWithMemo(n - 1, memo) + fibWithMemo(n - 2, memo)\n  return memo[n]\n}\n\n// Fibonacci number with memoization\n\nconst fibWithMemo8 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  let f1 = 1\n  let f2 = 1\n  let result = 1\n  for (let i = 6; i <= n; i++) {\n    result = f1 + f2\n    f1 = f2\n    f2 = result\n  }\n  memo[n] = result\n  return result\n}\n\nconst fibWithMemo9 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  let f1 = 1\n  let f2 = 1\n  let result = 1\n  for (let i = 6; i <= n; i++) {\n    result = f1 + f2\n    f1 = f2\n    f2 = result\n  }\n  memo[n] = result\n  return result\n}\n\nconst fibWithMemo10 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  let f1 = 1\n  let f2 = 1\n  let result = 1\n  for (let i = 6; i <= n; i++) {\n    result = f1 + f2\n    f1 = f2\n    f2 = result\n  }\n  memo[n] = result\n  return result\n}\n\nconst fibWithMemo11 = (n, memo) => {\n  if (n === 1) return 1\n  if (n === 2) return 1\n  if (n === 3) return 2\n  if (n === 4) return 3\n  if (n === 5) return 5\n  let f1 = 1\n  let f2 = 1\n  let result = 1\n  for (let i"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"<\")\n  false\n  >>> corRectbrackEtiNg(\"<>\")\n  false\n  >>> corRectbrackEtiNg(\"<<><>>\")\n  false\n  >>> corRectbrackEtiNg(\"><<>\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  if (brackets === null) {\n    return false\n  }\n  const len = brackets.length\n  let i = 0\n  while (i < len) {\n    if (brackets[i]!== '<') {\n      return false\n    }\n    i++\n    if (i < len && brackets[i]!== '>') {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconst parse = (input) => {\n  const tokens = []\n  let current = []\n  let bracket = ''\n  let index = 0\n  while (index < input.length) {\n    const c = input[index]\n    index++\n    if (c === '<' && bracket === '') {\n      bracket = '<'\n      current.push(c)\n      continue\n    }\n    if (c === '>' && bracket === '<') {\n      bracket = ''\n      current.push(c)\n      tokens.push(current)\n      current = []\n      continue\n    }\n    if (c === '>' && bracket === '<') {\n      bracket = ''\n    }\n    if (c === '<') {\n      bracket += c\n      continue\n    }\n    if (c === '>') {\n      if (corRectbrackEtiNg(bracket)) {\n        current.push(c)\n      } else {\n        throw new Error('Error in input,'+ input)\n      }\n    } else {\n      current.push(c)\n    }\n  }\n  if (bracket!== '') {\n    throw new Error('Error in input,'+ input)\n  }\n  return tokens\n}\n\nexport default parse\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monOtonIc", "gc": "/*Return true is list elements are monOtonIcally increasing or decreasing.\n  >>> monOtonIc([1, 2, 4, 20])\n  true\n  >>> monOtonIc([1, 20, 4, 10])\n  false\n  >>> monOtonIc([4, 1, 0, -10])\n  true\n  */\nconst monOtonIc = (l) => {\n  let i = 1;\n  for (; i < l.length; i++) {\n    if (l[i - 1] > l[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Return true if the list is a permutation of the numbers from 1 to n.\n  >>> permutation([1, 2, 3, 4, 5])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6])\n  false\n  >>> permutation([1, 2, 3, 4])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7])\n  false\n  */\nconst permutation = (l) => {\n  const n = l.length;\n  if (l.length!== n) {\n    return false;\n  }\n  const arr = Array.from(l);\n  let i = 0;\n  while (i < n) {\n    const a = arr[i];\n    const j = 0;\n    while (j < i) {\n      if (a === arr[j]) {\n        return false;\n      }\n      j++;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport default {\n  monOtonIc,\n  permutation,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comMon", "gc": "/*Return sorted unique comMon elements for two lists.\n  >>> comMon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comMon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comMon = (l1, l2) => {\n  const map = new Map();\n  for (let el of l1) {\n    map.set(el, el);\n  }\n  for (let el of l2) {\n    if (!map.has(el)) {\n      map.set(el, el);\n    }\n  }\n  return [...new Set(map.values())];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larGestprimefacTor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larGestprimefacTor(13195)\n  29\n  >>> larGestprimefacTor(2048)\n  2\n  */\nconst larGestprimefacTor = (n) => {\n  let i, j;\n  let g = [];\n  let nPrime = 2;\n  for (i = 1; i < n; i++) {\n    g = larGestprimefac(nPrime);\n    for (j = 0; j < g.length; j++) {\n      if (n % g[j] === 0) {\n        return g[j];\n      }\n    }\n    nPrime += 1;\n  }\n  return nPrime;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumtoN", "gc": "/*sumtoN is a function that sums numbers from 1 to n.\n  >>> sumtoN(30)\n  465\n  >>> sumtoN(100)\n  5050\n  >>> sumtoN(5)\n  15\n  >>> sumtoN(10)\n  55\n  >>> sumtoN(1)\n  1\n  */\nconst sumtoN = (n) => {\n  return n + n - 1;\n};\n\n/*\n  >>> sumtoN(2)\n  1\n  >>> sumtoN(3)\n  3\n  >>> sumtoN(4)\n  6\n  >>> sumtoN(5)\n  10\n  >>> sumtoN(6)\n  15\n  >>> sumtoN(7)\n  21\n  >>> sumtoN(8)\n  28\n  >>> sumtoN(9)\n  36\n  >>> sumtoN(10)\n  45\n  >>> sumtoN(11)\n  55\n  >>> sumtoN(12)\n  66\n  >>> sumtoN(13)\n  80\n  >>> sumtoN(14)\n  96\n  >>> sumtoN(15)\n  111\n  >>> sumtoN(16)\n  128\n  >>> sumtoN(17)\n  144\n  >>> sumtoN(18)\n  162\n  >>> sumtoN(19)\n  180\n  >>> sumtoN(20)\n  198\n  >>> sumtoN(21)\n  216\n  >>> sumtoN(22)\n  234\n  >>> sumtoN(23)\n  252\n  >>> sumtoN(24)\n  270\n  >>> sumtoN(25)\n  288\n  >>> sumtoN(26)\n  306\n  >>> sumtoN(27)\n  324\n  >>> sumtoN(28)\n  342\n  >>> sumtoN(29)\n  360\n  >>> sumtoN(30)\n  369\n  >>> sumtoN(31)\n  387\n  >>> sumtoN(32)\n  405\n  >>> sumtoN(33)\n  432\n  >>> sumtoN(34)\n  450\n  >>> sumtoN(35)\n  477\n  >>> sumtoN(36)\n  504\n  >>> sumtoN(37)\n  531\n  >>> sumtoN(38)\n  558\n  >>> sumtoN(39)\n  585\n  >>> sumtoN(40)\n  602\n  >>> sumtoN(41)\n  630\n  >>> sumtoN(42)\n  657\n  >>> sumtoN(43)\n  684\n  >>> sumtoN(44)\n  702\n  >>> sumtoN(45)\n  729\n  >>> sumtoN(46)\n  756\n  >>> sumtoN(47)\n  783\n  >>> sumtoN(48)\n  800\n  >>> sumtoN(49)\n  817\n  >>> sumtoN(50)\n  834\n  >>> sumtoN(51)\n  851\n  >>> sumtoN(52)\n  868\n  >>> sumtoN(53)\n  885\n  >>> sumtoN(54)\n  902\n  >>> sumtoN(55)\n  919\n  >>> sumtoN(56)\n  936\n  >>> sumtoN(57)\n  953\n  >>> sumtoN(58)\n  969\n  >>> sumtoN(59)\n  984\n  >>> sumtoN(60)\n  1001\n  >>> sumtoN(61)\n  1008\n  >>> sumtoN(62)\n  1023\n  >>> sumtoN(63)\n  1040\n  >>> sumtoN(64)\n  1056\n  >>> sumtoN(65)\n  1071\n  >>> sumtoN(66)\n  1087\n  >>> sumtoN(67)\n  1094\n  >>> sumtoN(68)\n  1101\n  >>> sumtoN(69)\n  1108\n  >>> sumtoN(70)\n  1115\n  >>> sumtoN(71)\n  1123\n  >>> sumtoN(72)\n  1130\n  >>> sumtoN(73)\n  1136\n  >>> sumtoN(74)\n  1143\n  >>> sumtoN(75)\n  1150\n  >>> sumtoN(76)\n  1157\n  >>> sumtoN(77)\n  1163\n  >>> sumtoN(78)\n  1169\n  >>> sumtoN(79)\n  1175\n  >>> sumtoN(80)\n  1180\n  >>> sumtoN(81)\n  1185\n  >>> sumtoN(82)\n  1190\n  >>> sumtoN(83)\n  1195\n  >>> sumtoN(84)\n  1200\n  >>> sumtoN(85)\n  1205\n  >>> sumtoN(86)\n  1210\n  >>> sumtoN(87)\n  1215\n  >>> sumtoN(88)\n  1220\n  >>> sumtoN(89)\n  1225\n  >>> sumtoN(90)\n  1230\n  >>> sumtoN(91)\n  1235\n  >>> sumtoN(92)\n  1240\n  >>> sumtoN(93)\n  1245\n  >>> sumtoN(94)\n  1250\n  >>> sumtoN(95)\n  1255\n  >>> sumtoN(96)\n  1260\n  >>> sumtoN(97)\n  1265\n  >>> sumtoN(98)\n  1270\n  >>> sumtoN(99)\n  1275\n  >>> sumtoN(100)\n  1280\n  >>> sumtoN(101)\n  1285\n  >>> sumtoN(102)\n  1290\n  >>> sumtoN(103)\n  1295\n  >>> sumtoN(104)\n  1300\n  >>> sumtoN(105)\n  1305\n  >>> sumtoN(106)\n  1310\n  >>> sumtoN(107)\n  1315\n  >>> sumtoN(108)\n  1320\n  >>> sumtoN(109)\n  1325\n  >>> sumtoN(110)\n  1330\n  >>> sumtoN(111)\n  1335\n  >>> sumtoN(112)\n  1340\n  >>> sumtoN(113)\n  1345\n  >>> sumtoN(114)\n  1350\n  >>> sumtoN(115)\n  1355\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corRectbrackEtiNg", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corRectbrackEtiNg(\"(\")\n  false\n  >>> corRectbrackEtiNg(\"()\")\n  true\n  >>> corRectbrackEtiNg(\"(()())\")\n  true\n  >>> corRectbrackEtiNg(\")(()\")\n  false\n  */\nconst corRectbrackEtiNg = (brackets) => {\n  const openingBracket = brackets[0];\n  const openingBracketLength = openingBracket.length;\n  const closingBracket = brackets[brackets.length - 1];\n  const closingBracketLength = closingBracket.length;\n\n  return brackets.every((bracket, index) => {\n    const openingBracketIndex = index + 1;\n    const openingBracketIndexLength = openingBracketIndex - openingBracketLength;\n    const closingBracketIndex = brackets.length - index - 2;\n    const closingBracketIndexLength = closingBracketIndex - closingBracketLength;\n\n    return openingBracketIndex === closingBracketIndex;\n  });\n};\n\nmodule.exports = {\n  corRectbrackEtiNg\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derIvatIve", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derIvatIve of this polynomial in the same form.\n  >>> derIvatIve([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derIvatIve([1, 2, 3])\n  [2, 6]\n  */\nconst derIvatIve = (xs) => {\n  const n = xs.length - 1\n  const A = new Array(n)\n  for (let i = 0; i < n; i++) {\n    A[i] = new Array(n)\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      A[i][j] = xs[i + 1] * xs[j + 1]\n    }\n  }\n  return A\n}\n\n/*\n  Given a sequence of n + 1 x-coordinates, and n + 1 values, return a\n  polynomial in the same form.\n  >>> derivivative([3, 1, 2, 4, 5], [1, 2, 3, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivivative([1, 2, 3, 4, 5], [1, 2, 3, 4, 5])\n  [2, 6]\n  */\nconst derivivative = (xs, ys) => {\n  const n = xs.length - 1\n  const A = new Array(n + 1)\n  for (let i = 0; i < n + 1; i++) {\n    A[i] = new Array(n + 1)\n  }\n  for (let i = 0; i < n + 1; i++) {\n    for (let j = 0; j < n + 1; j++) {\n      A[i][j] = xs[i] * xs[j] + ys[i] * ys[j]\n    }\n  }\n  return A\n}\n\n/*\n  Given a sequence of n + 1 x-coordinates, and n + 1 values, return a\n  polynomial in the same form.\n  >>> derivivative([3, 1, 2, 4, 5], [1, 2, 3, 4, 5], [2, 3, 4])\n  [1, 4, 12, 20]\n  >>> derivivative([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], [2, 3, 4])\n  [2, 6]\n  */\nconst derivivative2 = (xs, ys, zs) => {\n  const n = xs.length - 1\n  const A = new Array(n + 1)\n  for (let i = 0; i < n + 1; i++) {\n    A[i] = new Array(n + 1)\n  }\n  for (let i = 0; i < n + 1; i++) {\n    for (let j = 0; j < n + 1; j++) {\n      A[i][j] = xs[i] * xs[j] + ys[i] * ys[j] + zs[i] * zs[j]\n    }\n  }\n  return A\n}\n\nmodule.exports = {\n  derivativate,\n  derivative,\n  derivivative2,\n  derivativeI,\n  derivativeI2,\n  derivativeI3,\n  derivativeI4,\n  derivativeI5,\n  derivativeI6,\n  derivativeI7,\n  derivativeI8,\n  derivativeI9,\n  derivativeI10,\n  derivativeI11,\n  derivativeI12,\n  derivativeI13,\n  derivativeI14,\n  derivativeI15,\n  derivativeI16,\n  derivativeI17,\n  derivativeI18,\n  derivativeI19,\n  derivativeI20,\n  derivativeI21,\n  derivativeI22,\n  derivativeI23,\n  derivativeI24,\n  derivativeI25,\n  derivativeI26,\n  derivativeI27,\n  derivativeI28,\n  derivativeI29,\n  derivativeI30,\n  derivativeI31,\n  derivativeI32,\n  derivativeI33,\n  derivativeI34,\n  derivativeI35,\n  derivativeI36,\n  derivativeI37,\n  derivativeI38,\n  derivativeI39,\n  derivativeI40,\n  derivativeI41,\n  derivativeI42,\n  derivativeI43,\n  derivativeI44,\n  derivativeI45,\n  derivativeI46,\n  derivativeI47,\n  derivativeI48,\n  derivativeI49,\n  derivativeI50,\n  derivativeI51,\n  derivativeI52,\n  derivativeI53,\n  derivativeI54,\n  derivativeI55,\n  derivativeI56,\n  derivativeI57,\n  derivativeI58,\n  derivativeI59,\n  derivativeI60,\n  derivativeI61,\n  derivativeI62,\n  derivativeI63,\n  derivativeI64,\n  derivativeI65,\n  derivativeI66,\n  derivativeI67,\n  derivativeI68,\n  derivativeI69,\n  derivativeI70,\n  derivativeI71,\n  derivativeI72,\n  derivativeI73,\n  derivativeI74,\n  derivativeI75,\n  derivativeI76,\n  derivativeI77,\n  derivativeI78,\n  derivativeI79,\n  derivativeI80,\n  derivativeI81,\n  derivativeI82,\n  derivativeI83,\n  derivativeI84,\n  derivativeI85,\n  derivativeI86,\n  derivativeI87,\n  derivativeI88,"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibFib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibFib(0) == 0\n  fibFib(1) == 0\n  fibFib(2) == 1\n  fibFib(n) == fibFib(n-1) + fibFib(n-2) + fibFib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibFib number sequence.\n  >>> fibFib(1)\n  0\n  >>> fibFib(5)\n  4\n  >>> fibFib(8)\n  24\n  */\nconst fibFib = (n) => {\n  let previous = 0, current = 1, temp = 0;\n  while (previous <= n) {\n    temp = previous;\n    previous = current;\n    current = previous + current;\n  }\n  return temp;\n};\n\n/*\n  Given a number n, write a function that returns the nth Fibonacci number.\n  >>> fibonacci(3)\n  3\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(18)\n  12586269025\n  */\nconst fibonacci = (n) => {\n  let previous = 0, current = 1, temp = 0;\n  while (previous <= n) {\n    temp = previous;\n    previous = current;\n    current = previous + current;\n  }\n  return temp;\n};\n\n/*\n  Given a number n, write a function that returns the nth Fibonacci number.\n  >>> fibonacci(1)\n  0\n  >>> fibonacci(2)\n  1\n  >>> fibonacci(3)\n  2\n  >>> fibonacci(4)\n  3\n  >>> fibonacci(5)\n  5\n  >>> fibonacci(6)\n  8\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(8)\n  21\n  >>> fibonacci(9)\n  34\n  >>> fibonacci(10)\n  55\n  >>> fibonacci(11)\n  89\n  >>> fibonacci(12)\n  144\n  >>> fibonacci(13)\n  233\n  >>> fibonacci(14)\n  377\n  >>> fibonacci(15)\n  610\n  >>> fibonacci(16)\n  987\n  >>> fibonacci(17)\n  1597\n  >>> fibonacci(18)\n  2584\n  >>> fibonacci(19)\n  4181\n  >>> fibonacci(20)\n  6765\n  >>> fibonacci(21)\n  10946\n  >>> fibonacci(22)\n  17711\n  >>> fibonacci(23)\n  28657\n  >>> fibonacci(24)\n  46368\n  >>> fibonacci(25)\n  75555\n  >>> fibonacci(26)\n  121393\n  >>> fibonacci(27)\n  196418\n  >>> fibonacci(28)\n  317811\n  >>> fibonacci(29)\n  514229\n  >>> fibonacci(30)\n  832040\n  >>> fibonacci(31)\n  1346269\n  >>> fibonacci(32)\n  2278993\n  >>> fibonacci(33)\n  3572186\n  >>> fibonacci(34)\n  5274427\n  >>> fibonacci(35)\n  8981514\n  >>> fibonacci(36)\n  14195463\n  >>> fibonacci(37)\n  23841802\n  >>> fibonacci(38)\n  37202879\n  >>> fibonacci(39)\n  59128458\n  >>> fibonacci(40)\n  90398923\n  >>> fibonacci(41)\n  123495867\n  >>> fibonacci(42)\n  175972860\n  >>> fibonacci(43)\n  267914963\n  >>> fibonacci(44)\n  354215987\n  >>> fibonacci(45)\n  509005892\n  >>> fibonacci(46)\n  709677497\n  >>> fibonacci(47)\n  100280748\n  >>> fibonacci(48)\n  1205182479\n  >>> fibonacci(49)\n  1548578807\n  >>> fibonacci(50)\n  1978044162\n  >>> fibonacci(51)\n  2487592896\n  >>> fibonacci(52)\n  3194201793\n  >>> fibonacci(53)\n  3825376078\n  >>> fibonacci(54)\n  4868372217\n  >>> fibonacci(55)\n  5967203658\n  >>> fibonacci(56)\n  7235893145\n  >>> fibonacci(57)\n  8626597240\n  >>> fibonacci(58)\n  9884755948\n  >>> fibonacci(59)\n  1180598755\n  >>> fibonacci(60)\n  14285790353\n  >>> fibonacci(61)\n  17532394201\n  >>> fibonacci(62)\n  2147483647\n  >>> fibonacci(63)\n  25353011846\n  >>> fibonacci(64)\n  30581446322\n  >>> fibonacci(65)\n  37882028985\n  >>> fibonacci(66)\n  46067221511\n  >>> fibonacci(67)\n  56235880863\n  >>> fibonacci(68)\n  66234596292\n  >>> fibonacci(69)\n  77846152279\n  >>> fibonacci(70)\n  89078389735\n  >>> fibonacci(71)\n  100800769164\n  >>> fibonacci(72)\n  111648251652\n  >>> fibonacci(73)\n  12589990684\n  >>> fibonacci(74)\n  140415531729\n  >>> fibonacci(75)\n  155193930692\n  >>> fibonacci(76)\n  167936509420\n  >>> fibonacci(77)\n  182044885312\n  >>> fibonacci(78)\n  196151266772\n  >>> fibonacci(79)\n  209715202672\n  >>> fibonacci(80)\n  223441578326\n  "}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowElsCOunt", "gc": "/*Write a function vowElsCOunt which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowElsCOunt(\"abcde\")\n  2\n  >>> vowElsCOunt(\"ACEDY\")\n  3\n  */\nconst vowElsCOunt = (s) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  const counter = 0\n  let i = 0\n  let n = 0\n\n  while (i < s.length) {\n    if (vowels.includes(s[i])) {\n      counter++\n    } else if (i === s.length - 1 && s[i] === \"y\") {\n      counter++\n    }\n    i++\n  }\n  return counter\n}\n\nmodule.exports = vowElsCOunt\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirCulaRShifT", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirCulaRShifT(12, 1)\n  \"21\"\n  >>> cirCulaRShifT(12, 2)\n  \"12\"\n  */\nconst cirCulaRShifT = (x, shift) => {\n  let s = x.toString();\n  if (shift > s.length) {\n    return s.reverse().join('');\n  }\n  let arr = s.split('');\n  let res = arr.map((x, i) => {\n    if (i >= shift) {\n      return arr[i - shift];\n    }\n    return x;\n  }).join('');\n  return res;\n};\n\n// https://en.wikipedia.org/wiki/Circular_shift\nconst cirCulaSShifT = (x, shift) => {\n  let arr = x.toString().split('');\n  let res = arr.map((x, i) => {\n    if (i >= shift) {\n      return arr[(i + shift) % arr.length];\n    }\n    return x;\n  }).join('');\n  return res;\n};\n\n/**\n  Given a string, check if it is a palindrome.\n  >>> isPalindrome('A man, a plan, a canal: Panama')\n  true\n  >>> isPalindrome('race a car')\n  false\n  >>> isPalindrome('A man, a plan, a canal: Panama')\n  true\n  >>> isPalindrome('race a car')\n  false\n  >>> isPalindrome('race a car')\n  false\n  */\nconst isPalindrome = (s) => {\n  if (s.length === 0) return true;\n  return s.split('').reverse().join('') === s;\n};\n\n// https://en.wikipedia.org/wiki/Abbreviated_cardinal_number\nconst cardNum = (num) => {\n  if (num < 10) {\n    return num;\n  }\n  if (num === 10) {\n    return 'X';\n  }\n  return `${num}S`;\n};\n\nconst isPower = (x) => {\n  return x.toString().length > 3 && x.toString().indexOf('.') === -1;\n};\n\nconst isPowerFloor = (x) => {\n  return x.toString().length > 3 && x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isPowerCeil = (x) => {\n  return x.toString().length > 3 && x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isPowerFloorCeil = (x) => {\n  return x.toString().length > 3 && x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isInteger = (x) => {\n  return x.toString().indexOf('.') === -1;\n};\n\nconst isNegative = (x) => {\n  return x.toString().indexOf('-')!== -1;\n};\n\nconst isPositive = (x) => {\n  return x.toString().indexOf('-') === -1;\n};\n\nconst isEven = (x) => {\n  return x % 2 === 0;\n};\n\nconst isOdd = (x) => {\n  return x % 2!== 0;\n};\n\nconst isBinary = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isHex = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isOctal = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isDecimal = (x) => {\n  return x.toString().indexOf('.')!== -1;\n};\n\nconst isWholeNumber = (x) => {\n  return x.toString().indexOf('.') === -1;\n};\n\nconst isNegativeWholeNumber = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isPositiveWholeNumber = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isPositiveDecimal = (x) => {\n  return x.toString().indexOf('.')!== -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isNegativeDecimal = (x) => {\n  return x.toString().indexOf('.')!== -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isNegativeHex = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isPositiveHex = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isWholeHex = (x) => {\n  return x.toString().indexOf('.') === -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isDecimalPoint = (x) => {\n  return x.toString().indexOf('.')!== -1;\n};\n\nconst isNegativeDecimalPoint = (x) => {\n  return x.toString().indexOf('.')!== -1 && x.toString().indexOf('E') === -1;\n};\n\nconst isPositiveDecimalPoint = (x) => {\n  return x.toString().indexOf('.')!"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digItSuM", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digItSuM(\"\") => 0\n      digItSuM(\"abAB\") => 131\n      digItSuM(\"abcCd\") => 67\n      digItSuM(\"helloE\") => 69\n      digItSuM(\"woArBld\") => 131\n      digItSuM(\"aAaaaXa\") => 153\n  */\nconst digItSuM = (s) => {\n    let sum = 0;\n    for (let i = 0; i < s.length; i++) {\n        sum += s.charCodeAt(i) - 64;\n    }\n    return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruItDiStribUtiOn", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruItDiStribUtiOn(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruItDiStribUtiOn(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruItDiStribUtiOn = (s, n) => {\n  const appleAndOrange = new Set(s.split(' '));\n  return appleAndOrange.size - (new Set(s.split(' ')).size - n);\n};\n\nconsole.log(fruItDiStribUtiOn(\"2 apples and 3 oranges\", 100));\nconsole.log(fruItDiStribUtiOn(\"5 apples and 6 oranges\", 19));\nconsole.log(fruItDiStribUtiOn(\"0 apples and 1 oranges\", 3));\nconsole.log(fruItDiStribUtiOn(\"100 apples and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluCk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluCk one of the nodes and return it.\n  The pluCked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The pluCked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluCk = (arr) => {\n  let index = -1\n  let result = []\n  const isPluCked = (node) => {\n    let index\n    const isEven = (value) => value % 2 === 0\n    if (isEven(node.value)) {\n      index = arr.indexOf(node)\n      if (index === -1) {\n        return false\n      }\n      if (index > index) {\n        return false\n      }\n      return true\n    }\n    return false\n  }\n\n  if (arr.length === 0) {\n    return []\n  }\n  arr.forEach((node, i) => {\n    if (isPluCked(node)) {\n      index = i\n      result = [node, index]\n      return\n    }\n  })\n\n  if (index === -1) {\n    return [arr[0], 0]\n  }\n  return result\n}\n\nconsole.log(pluCk([4, 2, 3]))\nconsole.log(pluCk([1, 2, 3]))\nconsole.log(pluCk([5, 0, 3, 0, 4, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seaRch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seaRch([4, 1, 2, 2, 3, 1])) == 2\n      seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seaRch([5, 5, 4, 4, 4])) == -1\n  */\nconst seaRch = (lst) => {\n  let i = 0, max = -1, count = 0;\n  for (i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i];\n      count = 1;\n    } else if (lst[i] > 0 && lst[i] === max) {\n      count++;\n    }\n  }\n  return count === 0? -1 : max;\n};\n\n// TEST\nconsole.log(seaRch([4, 1, 2, 2, 3, 1]));\nconsole.log(seaRch([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nconsole.log(seaRch([5, 5, 4, 4, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strAngesortLIst", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strAngesortLIst([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strAngesortLIst([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strAngesortLIst([]) == []\n  */\nconst strAngesortLIst = (lst) => {\n  if (lst.length === 0) {\n    return lst;\n  }\n\n  const min = Math.min(...lst);\n  const max = Math.max(...lst);\n  const sorted = lst.slice();\n\n  sorted.push(min);\n  sorted.sort((a, b) => {\n    if (a < b) {\n      return 1;\n    }\n\n    if (a > b) {\n      return -1;\n    }\n\n    return 0;\n  });\n\n  sorted.push(max);\n  return sorted;\n};\n\nexport default strAngesortLIst;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triAnglEArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triAnglEArea(3, 4, 5) == 6.00\n  triAnglEArea(1, 2, 10) == -1\n  */\nconst triAnglEArea = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  if (s1 <= 0 || s1 > c) {\n    return -1\n  }\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  if (s1 + s2 > c || s1 + s3 > c || s1 + s4 > c) {\n    return -1\n  }\n  let area = (s1 * s2) / 2\n  return (area + s3 * s4) / 2\n}\n\n// Calculate the area of a triangle using Heron's formula\nconst calcTriangleArea = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  return (s1 * (s2 + s3) + s3 * (s4 + s1) + s2 * (s4 - s3)) / 2\n}\n\nconst getTriangleArea = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  return (s1 * (s2 + s3) + s3 * (s4 + s1) + s2 * (s4 - s3)) / 2\n}\n\nconst getTriangleArea2 = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  return (s1 * (s2 + s3) + s3 * (s4 + s1) + s2 * (s4 - s3)) / 2\n}\n\nconst getTriangleArea3 = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  return (s1 * (s2 + s3) + s3 * (s4 + s1) + s2 * (s4 - s3)) / 2\n}\n\nconst triangleArea = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  return (s1 * (s2 + s3) + s3 * (s4 + s1) + s2 * (s4 - s3)) / 2\n}\n\nconst triangleArea2 = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  return (s1 * (s2 + s3) + s3 * (s4 + s1) + s2 * (s4 - s3)) / 2\n}\n\nconst triangleArea3 = (a, b, c) => {\n  let s1 = (a + b + c) / 2\n  let s2 = Math.sqrt(c * (c - a * a) / 4)\n  let s3 = Math.sqrt(c * (c - b * b) / 4)\n  let s4 = Math.sqrt(c * (c - c * c) / 4)\n  return (s1 * (s2 + s3) + s3 * (s4 + s1) + s2 * (s4 - s3)) / 2\n}\n\n// Given an array of integers, find the maximum difference in elements of the array\nconst maxDifference = (array) => {\n  let max = 0\n  for (let i = 1; i < array.length; i++) {\n    if (Math.abs(array[i] - array[i - 1]) > max) {\n      max = Math.abs(array[i] - array[i - 1])\n    }\n  }\n  return max\n}\n\n// Given an array of integers, find the maximum difference in elements of the array\n// using the maxDifference function\nconst maxDifference2 = (array) => {\n  let max = 0\n  for (let i = 1; i < array.length; i++) {\n    if (max < Math.abs(array[i] - array[i - 1])) {\n      max = Math.abs(array[i] - array[i - 1])\n    }\n  }\n  return max\n}\n\n// Given an array of numbers, find the median\nconst median"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilLItFLy", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilLItFLy([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilLItFLy([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilLItFLy([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilLItFLy([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilLItFLy = (q, w) => {\n  const qLen = q.length\n  const maxLen = qLen * (qLen - 1) / 2\n\n  return qLen === 1 || qLen === 2 || (qLen === 3 && maxLen <= w)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaLlesTChanGe", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaLlesTChanGe([1,2,3,5,4,7,9,6]) == 4\n  smaLlesTChanGe([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaLlesTChanGe([1, 2, 3, 2, 1]) == 0\n  */\nconst smaLlesTChanGe = (arr) => {\n  if(arr.length === 1) return 0;\n  const [a, b] = [arr[0], arr[arr.length - 1]];\n  let indexA = 0;\n  let indexB = arr.length - 1;\n  while(indexA < indexB) {\n    const tmp = a;\n    a = b;\n    b = tmp;\n    indexA += 1;\n    indexB -= 1;\n  }\n  return a === b? 0 : indexA;\n}\n\n// test\n\nconst test = [\n  [1, 2, 3, 4, 3, 2, 2],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1, 2, 3, 2, 1],\n  [1,"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totAlMaTch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totAlMaTch([], []) ➞ []\n  totAlMaTch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totAlMaTch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totAlMaTch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    throw new Error('lst1.length!== lst2.length');\n  }\n\n  const result = lst1.map(s => {\n    let str = '';\n\n    for (let i = 0; i < s.length; i++) {\n      str += s[i];\n\n      if (lst2.indexOf(s[i]) < 0) {\n        str += s[i];\n      }\n    }\n\n    return str;\n  });\n\n  return result.filter(s => s.length < lst2.length);\n};\n\nconsole.log(totAlMaTch([], []));\nconsole.log(totAlMaTch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totAlMaTch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totAlMaTch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(totAlMaTch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMUltiPlyPrIme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMUltiPlyPrIme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMUltiPlyPrIme = (a) => {\n  if (a === 0) return false\n  const primes = []\n  const sqrt = Math.sqrt(a)\n  for (let i = 2; i <= sqrt; i++) {\n    if (a % i === 0) {\n      primes.push(i)\n    }\n  }\n  if (primes.length === 3) {\n    return true\n  }\n  return false\n}\n\nconst isMUltiPlyPrIme2 = (a) => {\n  if (a === 0) return false\n  let count = 0\n  for (let i = 2; i < a; i++) {\n    if (a % i === 0) {\n      count++\n    }\n  }\n  return count === 3\n}\n\nmodule.exports = {\n  isMUltiPlyPrIme,\n  isMUltiPlyPrIme2,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSImplEPoweR", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSImplEPoweR(1, 4) => true\n  isSImplEPoweR(2, 2) => true\n  isSImplEPoweR(8, 2) => true\n  isSImplEPoweR(3, 2) => false\n  isSImplEPoweR(3, 1) => false\n  isSImplEPoweR(5, 3) => false\n  */\nconst isSImplEPoweR = (x, n) => {\n    const result = x % n === 0;\n    return result;\n}\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum = (a, b) => a + b;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum2 = (a, b, c) => a + b + c;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum3 = (a, b, c) => a + b + c;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum4 = (a, b, c, d) => a + b + c + d;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum5 = (a, b, c, d, e) => a + b + c + d + e;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum6 = (a, b, c, d, e, f) => a + b + c + d + e + f;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @param {number} f\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum7 = (a, b, c, d, e, f, g) => a + b + c + d + e + f + g;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @param {number} f\n  * @param {number} g\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum8 = (a, b, c, d, e, f, g, h) => a + b + c + d + e + f + g + h;\n\n/*\n  * @param {number} a\n  * @param {number} b\n  * @param {number} c\n  * @param {number} d\n  * @param {number} e\n  * @param {number} f\n  * @param {number} g\n  * @param {number} h\n  * @return {number}\n  *\n  * returns the sum of the numbers\n  */\nconst sum9 = (a, b, c, d, e, f, g, h, i) => a + b + c + d + e + f + g + h + i;\n\nconst isSum = (a, b, c, d, e, f, g, h, i, j) => a + b + c + d + e + f + g + h + i + j;\n\nconsole.log(isSum(0, 0, 0, 0, 0, 0, 0, 0, 0, 0));\nconsole.log(isSum(0, 1, 2, 3, 4, 5, 6, 7, 8, 9));\nconsole.log(isSum(1, 1, 1, 1, 1, 1, 1, 1, 1, 1));\nconsole.log(isSum(2, 2, 2, 2, 2, 2, 2, 2, 2, 2));\nconsole.log(isSum(3, 3, 3, 3, 3, 3, 3, 3, 3, 3));\nconsole.log(isSum(4, 4, 4, 4, 4, 4, 4, 4, 4, 4));\nconsole.log(isSum(5, 5, 5, 5, 5, 5, 5, 5, 5, 5));\nconsole.log(isSum(6, 6, 6, 6, 6, 6, 6, 6, 6, 6));\nconsole.log(isSum(7, 7, 7, 7, 7, 7, 7, 7, 7, 7));\nconsole.log(isSum(8, 8, 8, 8, 8, 8, 8, 8, 8, 8));\nconsole.log(isSum(9, 9, 9, 9, 9, 9, 9, 9, 9, 9));\nconsole.log(isSum(10, 10, 10, 10, 10, 10, 10, 10, 10, 10));\nconsole.log(isSum(11, 11, 11, 11, 11, 11, 11, 11, 11, 11));\nconsole.log(isSum(12, 12, 12, 12, 12, 12, 12, 12, 12, 12));\nconsole.log(isSum(13, 13, 13, 13, 13, 13, 13, 13, 13, 13));\nconsole.log(isSum(14, 14, 14, 14, 14, 14, 14, 14, 14, 14));\nconsole.log(isSum(15, 15, 15, 15, 15, 15, 15, 15, 15, 15));"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscUbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscUbe(1) ==> true\n  iscUbe(2) ==> false\n  iscUbe(-1) ==> true\n  iscUbe(64) ==> true\n  iscUbe(0) ==> true\n  iscUbe(180) ==> false\n  */\nconst iscUbe = (a) => {\n  if (a % 6 === 0) {\n    return true\n  }\n  return false\n}\n\n// const iscUbe = (a) => a % 6 === 0\n\n// const iscUbe = (a) => {\n//   for (let i = 1; i < a; i++) {\n//     if (a % i === 0) {\n//       return true\n//     }\n//   }\n//   return false\n// }\n\n// const iscUbe = (a) => {\n//   let sum = 0\n//   while (a > sum) {\n//     sum += a\n//   }\n//   return sum === a\n// }\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexkey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexkey = (num) => {\n  const len = num.length;\n  const count = 0;\n  const prime = {\n    2: 1, 3: 1, 5: 1, 7: 1, 11: 1, 13: 1, 17: 1, 19: 1, 23: 1, 29: 1, 31: 1, 37: 1, 41: 1, 43: 1, 47: 1, 53: 1, 59: 1, 61: 1, 67: 1, 71: 1, 73: 1, 79: 1, 83: 1, 89: 1, 97: 1, 101: 1, 103: 1, 107: 1, 109: 1, 113: 1, 127: 1, 131: 1, 137: 1, 139: 1, 149: 1, 151: 1, 157: 1, 163: 1, 167: 1, 173: 1, 179: 1, 181: 1, 191: 1, 193: 1, 197: 1, 199: 1, 211: 1, 223: 1, 227: 1, 229: 1, 233: 1, 239: 1, 241: 1, 251: 1, 257: 1, 263: 1, 269: 1, 271: 1, 277: 1, 281: 1, 283: 1, 293: 1, 307: 1, 311: 1, 313: 1, 317: 1, 331: 1, 337: 1, 347: 1, 349: 1, 353: 1, 359: 1, 367: 1, 373: 1, 379: 1, 383: 1, 389: 1, 397: 1, 401: 1, 409: 1, 419: 1, 421: 1, 431: 1, 433: 1, 439: 1, 443: 1, 449: 1, 457: 1, 461: 1, 463: 1, 467: 1, 479: 1, 487: 1, 491: 1, 499: 1, 503: 1, 509: 1, 521: 1, 523: 1, 541: 1, 547: 1, 557: 1, 563: 1, 569: 1, 571: 1, 577: 1, 587: 1, 593: 1, 599: 1, 601: 1, 607: 1, 613: 1, 617: 1, 619: 1, 631: 1, 641: 1, 643: 1, 647: 1, 653: 1, 659: 1, 661: 1, 673: 1, 677: 1, 683: 1, 691: 1, 701: 1, 709: 1, 719: 1, 727: 1, 733: 1, 739: 1, 743: 1, 751: 1, 757: 1, 761: 1, 769: 1, 773: 1, 787: 1, 797: 1, 809: 1, 811: 1, 821: 1, 823: 1, 827: 1, 829: 1, 839: 1, 853: 1, 857: 1, 859: 1, 863: 1, 877: 1, 881: 1, 883: 1, 887: 1, 907: 1, 911: 1, 919: 1, 929: 1, 937: 1, 941: 1, 947: 1, 953: 1, 967: 1, 971: 1, 977: 1, 983: 1, 991: 1, 997: 1, 1009: 1, 1013: 1, 1019: 1, 1021: 1, 1031: 1, 1033: 1, 1039: 1, 1049: 1, 1051: 1, 1061: 1, 1063: 1, 1069: 1, 1087: 1, 1091: 1, 1093: 1, 1097: 1, 1103: 1, 1109: 1, 1117: 1, 1123: 1, 1129: 1, 1141: 1, 1143: 1, 1147: 1, 1151: 1, 1153: 1, 1163: 1, 1171: 1, 1181: 1, 1187: 1, 1193: 1, 1201: 1, 1213: 1, 1217: 1, 1223: 1, 1229: 1, 1231: 1, 1237: 1, 1249: 1, 1259: 1, 1277: 1, 1279: 1, 1283: 1, 1289: 1, 1291: 1, 1297: 1, 1301: 1, 1303: 1, 1307: 1, 1319: 1, 1321: 1, 1327: 1, 1361: 1, 1367: 1, 1373: 1, 1381: 1, 1399: 1, 1409: 1, 1423: 1, 1427: 1, 1429: 1, 1433: 1, 1439: 1, 1447: 1, 1451: 1, 1453: 1, 1459: 1, 1471: 1, 1481: 1, 1483: 1, 1487: 1, 1489: 1, 1493: 1, 1499: 1, 1511: 1, 1523: 1, 1531: 1, 1543: 1, 1549: 1, 1553: 1, 1559: 1, 1567: 1, 1571: 1, 1579: 1, 1583: 1, 1597: 1, 1601: 1, 1607: 1, 1609: 1, 1613: 1, 1619: 1, 1621: 1"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decImaltoBinAry", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decImaltoBinAry(15)   # returns \"db1111db\"\n  decImaltoBinAry(32)   # returns \"db100000db\"\n  */\nconst decImaltoBinAry = (decimal) => {\n  let bin = '';\n\n  while (decimal > 0) {\n    bin = (decimal % 2) + bin;\n    decimal = Math.floor(decimal / 2);\n  }\n\n  return bin + 'db';\n};\n\nconst binImaltoDecAry = (binary) => {\n  let decimal = 0;\n\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, i);\n    }\n  }\n\n  return decimal;\n};\n\nconst main = () => {\n  const dec = parseInt(prompt('Enter a decimal number: '));\n  console.log(decImaltoBinAry(dec));\n  console.log(binImaltoDecAry(decImaltoBinAry(dec)));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHAppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHAppy(a) => false\n  isHAppy(aa) => false\n  isHAppy(abcd) => true\n  isHAppy(aabb) => false\n  isHAppy(adb) => true\n  isHAppy(xyy) => false\n  */\nconst isHAppy = (s) => {\n  let isHappy = true;\n  let sum = 0;\n  for (let i = 0; i < s.length - 2; i++) {\n    sum = 0;\n    for (let j = i + 1; j < s.length - 1; j++) {\n      if (s[i] === s[j]) {\n        sum++;\n        if (sum > 3) {\n          isHappy = false;\n          break;\n        }\n      }\n    }\n    if (!isHappy) break;\n  }\n  return isHappy;\n}\n\nconsole.log(isHAppy(\"adb\")); // true\nconsole.log(isHAppy(\"abcd\")); // false\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numEricAlLetTergrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numEricAlLetTergrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numEricAlLetTergrade = (grades) => {\n  let numGrades = 0;\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] === 4.0) {\n      numGrades += 1;\n    } else if (grades[i] > 3.7) {\n      numGrades += 1;\n    } else if (grades[i] > 3.3) {\n      numGrades += 2;\n    } else if (grades[i] > 3.0) {\n      numGrades += 3;\n    } else if (grades[i] > 2.7) {\n      numGrades += 4;\n    } else if (grades[i] > 2.3) {\n      numGrades += 5;\n    } else if (grades[i] > 2.0) {\n      numGrades += 6;\n    } else if (grades[i] > 1.7) {\n      numGrades += 7;\n    } else if (grades[i] > 1.3) {\n      numGrades += 8;\n    } else if (grades[i] > 1.0) {\n      numGrades += 9;\n    } else if (grades[i] > 0.7) {\n      numGrades += 10;\n    } else if (grades[i] > 0.0) {\n      numGrades += 11;\n    }\n  }\n  return [...Array(numGrades).keys()].map((x) => x.toFixed(1));\n};\n\nconst numEricAlLetTergrade = (grades) => {\n  let numGrades = 0;\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] === 4.0) {\n      numGrades += 1;\n    } else if (grades[i] > 3.7) {\n      numGrades += 1;\n    } else if (grades[i] > 3.3) {\n      numGrades += 2;\n    } else if (grades[i] > 3.0) {\n      numGrades += 3;\n    } else if (grades[i] > 2.7) {\n      numGrades += 4;\n    } else if (grades[i] > 2.3) {\n      numGrades += 5;\n    } else if (grades[i] > 2.0) {\n      numGrades += 6;\n    } else if (grades[i] > 1.7) {\n      numGrades += 7;\n    } else if (grades[i] > 1.3) {\n      numGrades += 8;\n    } else if (grades[i] > 1.0) {\n      numGrades += 9;\n    } else if (grades[i] > 0.7) {\n      numGrades += 10;\n    } else if (grades[i] > 0.0) {\n      numGrades += 11;\n    }\n  }\n  return [...Array(numGrades).keys()].map((x) => x.toFixed(1));\n};\n\nmodule.exports = numEricAlLetTergrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "priMeLeNgth", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  priMeLeNgth('Hello') == true\n  priMeLeNgth('abcdcba') == true\n  priMeLeNgth('kittens') == true\n  priMeLeNgth('orange') == false\n  */\nconst priMeLeNgth = (string) => {\n    let number = parseInt(string);\n    if (number <= 1) {\n        return false;\n    }\n    for (let i = 2; i < number; i++) {\n        if (number % i === 0) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\nWrite a function that takes a string and returns the string reversed.\n  Examples\n  reverse('Hello') == 'olleH'\n  reverse('abc') == 'cba'\n  */\nconst reverse = (string) => {\n    let reversed = string.split('').reverse();\n    return reversed.join('');\n}\n\n/*\nWrite a function that takes a string and returns a string with all the\ncharacters in the alphabet reversed.\n  Examples\n  reverse('Hello') == 'loH'\n  reverse('abc') == 'cba'\n  reverse('abc') == 'cba'\n  */\nconst reverseAlpha = (string) => {\n    let alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let reverse = string.split('').reverse();\n    let reversed = reverse.join('');\n    return alpha.map((character) => {\n        return reversed.indexOf(character) > -1? character : '';\n    }).join('');\n}\n\n/*\nWrite a function that takes a string and returns the number of times a\ncharacter appears in the string.\n  Examples\n  occurences('Hello') == 2\n  occurences('abc') == 3\n  */\nconst occurences = (string) => {\n    let occurence = 0;\n    let current = 0;\n    let chars = string.split('');\n    for (let i = 0; i < chars.length; i++) {\n        if (chars[i] === chars[current]) {\n            occurence++;\n            current++;\n        }\n    }\n    return occurence;\n}\n\n/*\nWrite a function that takes a string and returns the string with all\ncharacters that are in the alphabet, but not in the alphabet.\n  Examples\n  remove('Hello') == 'olleH'\n  remove('abc') == 'o'\n  */\nconst remove = (string) => {\n    let alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let char = string.split('').reverse();\n    let notInAlpha = [];\n    let remove = [];\n    for (let i = 0; i < char.length; i++) {\n        let index = alpha.indexOf(char[i]);\n        if (index === -1) {\n            notInAlpha.push(char[i]);\n        }\n    }\n    for (let i = 0; i < notInAlpha.length; i++) {\n        remove.push(notInAlpha[i]);\n    }\n    return remove.join('');\n}\n\n/*\nWrite a function that takes a string and returns the number of characters\nthat are in the alphabet.\n  Examples\n  alphabet('Hello') == 6\n  alphabet('abc') == 26\n  */\nconst alphabet = (string) => {\n    let alphabet = string.split('');\n    let length = alphabet.length;\n    return length;\n}\n\n/*\nWrite a function that takes a string and returns the string with all\ncharacters that are in the alphabet, but not in the alphabet.\n  Examples\n  remove('Hello') == 'olleH'\n  remove('abc') == 'o'\n  */\nconst removeAlpha = (string) => {\n    let alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let char = string.split('').reverse();\n    let remove = [];\n    for (let i = 0; i < char.length; i++) {\n        let index = alpha.indexOf(char[i]);\n        if (index === -1) {\n            remove.push(char[i]);\n        }\n    }\n    return remove.join('');\n}\n\n/*\nWrite a function that takes a string and returns the string with the\ncharacters in the alphabet in order.\n  Examples\n  order('Hello') == 'Helo'\n  order('abc') == 'aBc'\n  */\nconst order = (string) => {\n    let alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let ordered = string.split('').reverse();\n    let order = alpha.map((character) => {\n        return ordered.indexOf(character) > -1? character : '';\n    }).join('');\n    return order;\n}\n\n/*\nWrite a function that takes a string and returns the string with all\ncharacters in the alphabet in order.\n  Examples\n  order('Hello') == 'Helo'\n  order('abc') == 'aBc'\n  */\nconst orderAlpha = (string) => {\n    let alpha = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "staRtsONeEndS", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst staRtsONeEndS = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst staRtsONeStart = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that end with 1.\n  */\nconst staRtsONeEnd = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEnd = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusOne = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 1\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusTwo = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 2\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusThree = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 3\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusFour = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 4\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusFive = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 5\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusSix = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 6\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusSeven = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 7\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusEight = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r *= i\n    }\n  }\n  return result + 8\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with 1.\n  */\nconst staRtsONeStartAndEndPlusNine = (n) => {\n  let result = 0\n  for (let i = 2; i <= n; i++) {\n    let r = i * i\n    while (r <= n) {\n      result += i === r\n      r"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solVe", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solVe = (N) => {\n    let sum = 0\n    while (N > 0) {\n        sum += N % 2\n        N = N / 2\n    }\n    return sum\n}\n\n// console.log(solVe(1000))\nconsole.log(solVe(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add2 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add3 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add4 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add5 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add6 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add7 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add8 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add9 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add10 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add11 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add12 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add13 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add14 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add15 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add16 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add17 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add18 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n    });\n    return sum;\n};\n\nconst add19 = (lst) => {\n    let evens = [];\n    let sum = 0;\n    lst.forEach((num, index) => {\n        if (index % 2 === 1) {\n            sum += num;\n            evens.push(num);\n        }\n"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antIShuFfle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antIShuFfle('Hi') returns 'Hi'\n  antIShuFfle('hello') returns 'ehllo'\n  antIShuFfle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antIShuFfle = (s) => {\n  const words = s.split(' ')\n  const sortedWords = words.sort((a, b) => {\n    const aValue = a.charCodeAt(0)\n    const bValue = b.charCodeAt(0)\n\n    if (aValue > bValue) {\n      return 1\n    } else if (aValue < bValue) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n\n  return sortedWords.join(' ')\n}\n\nconsole.log(antIShuFfle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getrow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getrow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getrow([], 1) == []\n  getrow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getrow = (lst, x) => {\n  if(lst.length === 0) {\n    return [];\n  }\n  \n  const row = lst[0].length;\n  const col = x;\n  \n  const res = [];\n  \n  for(let i = 0; i < row; i++) {\n    res.push([\n      i,\n      lst[i][col]\n    ]);\n  }\n  \n  const asc = (a, b) => a[1] - b[1];\n  const dec = (a, b) => b[1] - a[1];\n  \n  res.sort((a, b) => {\n    if(a[1] < b[1]) {\n      return asc;\n    }\n    if(a[1] > b[1]) {\n      return dec;\n    }\n    return 0;\n  });\n  \n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorTArrAy([]) => []\n  * sorTArrAy([5]) => [5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorTArrAy([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorTArrAy = (array) => {\n  if (!array.length) return []\n  const sortedArray = array.slice()\n  sortedArray.sort(\n    (a, b) =>\n      (a + b) % 2 === 0\n       ? a - b\n        : b - a\n  )\n  return sortedArray\n}\n\nexport default sorTArrAy\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encRypt", "gc": "/*Create a function encRypt that takes a string as an argument and\n  returns a string encRypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encRypt('hi') returns 'lm'\n  encRypt('asdfghjkl') returns 'ewhjklnop'\n  encRypt('gf') returns 'kj'\n  encRypt('et') returns 'ix'\n  */\nconst encRypt = (s) => {\n  const alph = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  const a = alph[s.charAt(0) - 'a'];\n  const b = alph[s.charAt(1) - 'a'];\n  const c = alph[s.charAt(2) - 'a'];\n  const d = alph[s.charAt(3) - 'a'];\n  const e = alph[s.charAt(4) - 'a'];\n  const f = alph[s.charAt(5) - 'a'];\n  const g = alph[s.charAt(6) - 'a'];\n  const h = alph[s.charAt(7) - 'a'];\n  const i = alph[s.charAt(8) - 'a'];\n  const j = alph[s.charAt(9) - 'a'];\n  const k = alph[s.charAt(10) - 'a'];\n  const l = alph[s.charAt(11) - 'a'];\n  const m = alph[s.charAt(12) - 'a'];\n  const n = alph[s.charAt(13) - 'a'];\n  const o = alph[s.charAt(14) - 'a'];\n  const p = alph[s.charAt(15) - 'a'];\n  const q = alph[s.charAt(16) - 'a'];\n  const r = alph[s.charAt(17) - 'a'];\n  const s = alph[s.charAt(18) - 'a'];\n  const t = alph[s.charAt(19) - 'a'];\n  const u = alph[s.charAt(20) - 'a'];\n  const v = alph[s.charAt(21) - 'a'];\n  const w = alph[s.charAt(22) - 'a'];\n  const x = alph[s.charAt(23) - 'a'];\n  const y = alph[s.charAt(24) - 'a'];\n  const z = alph[s.charAt(25) - 'a'];\n  const hs = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z];\n  return hs.join('');\n};\n\nconst decRypt = (s) => {\n  const alph = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  const a = alph[s.charAt(0) - 'a'];\n  const b = alph[s.charAt(1) - 'a'];\n  const c = alph[s.charAt(2) - 'a'];\n  const d = alph[s.charAt(3) - 'a'];\n  const e = alph[s.charAt(4) - 'a'];\n  const f = alph[s.charAt(5) - 'a'];\n  const g = alph[s.charAt(6) - 'a'];\n  const h = alph[s.charAt(7) - 'a'];\n  const i = alph[s.charAt(8) - 'a'];\n  const j = alph[s.charAt(9) - 'a'];\n  const k = alph[s.charAt(10) - 'a'];\n  const l = alph[s.charAt(11) - 'a'];\n  const m = alph[s.charAt(12) - 'a'];\n  const n = alph[s.charAt(13) - 'a'];\n  const o = alph[s.charAt(14) - 'a'];\n  const p = alph[s.charAt(15) - 'a'];\n  const q = alph[s.charAt(16) - 'a'];\n  const r = alph[s.charAt(17) - 'a'];\n  const s = alph[s.charAt(18) - 'a'];\n  const t = alph[s.charAt(19) - 'a'];\n  const u = alph[s.charAt(20) - 'a'];\n  const v = alph[s.charAt(21) - 'a'];\n  const w = alph[s.charAt(22) - 'a'];\n  const x = alph[s.charAt(23) - 'a'];\n  const y = alph[s.charAt(24) - 'a'];\n  const z = alph[s.charAt(25) - 'a'];\n  const hs = [a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z];\n  return hs.join('');\n};\n\nconsole.log(encRypt('hi'));\nconsole.log(decRypt('lm'));\nconsole.log(encRypt('asdfghjkl'));\nconsole.log(decRypt('ewhjklnop'));\nconsole.log(encRypt('gf'));\nconsole.log(decRypt('kj'));\nconsole"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexTSmaLlest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexTSmaLlest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexTSmaLlest([1, 2, 3, 4, 5]) == 2\n  nexTSmaLlest([5, 1, 4, 3, 2]) == 2\n  nexTSmaLlest([]) == null\n  nexTSmaLlest([1, 1]) == null\n  */\nconst nexTSmaLlest = (lst) => {\n  if (!lst.length) return null\n  return lst[lst.length - 1]\n}\n\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5])) // => 2\nconsole.log(nexTSmaLlest([5, 1, 4, 3, 2])) // => 2\nconsole.log(nexTSmaLlest([1, 2, 3, 4, 5, 6])) // => null\nconsole.log(nexTSmaLlest([1, 1])) // => null\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBOred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  0\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBOred = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst getLength = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.length\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred2 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred3 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred4 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred5 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred6 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred7 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred8 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            count++\n        }\n        return count\n    }, 0)\n}\n\n/*\n  The function isBOred() returns a boolean value.\n  The function returns the length of the string S.\n \n  For example:\n  >>> isBOred(\"Hello world\")\n  11\n  >>> isBOred(\"The sky is blue. The sun is shining. I love this weather\")\n  11\n */\nconst isBOred9 = (S) => {\n    const str = S.split('.').join('?').split('?').join('!').split('!')\n    return str.reduce((count, word) => {\n        if (word === \"I\") {\n            "}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyint", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyint(5, 2, 7) ➞ true\n  anyint(3, 2, 2) ➞ false\n  anyint(3, -2, 1) ➞ true\n  anyint(3.6, -2.2, 2) ➞ false\n  */\nconst anyint = (x, y, z) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  const zIsInt = (z % 1 === 0);\n  return xIsInt && yIsInt && zIsInt && x + y === z;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the sum of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  same(5, 2) ➞ true\n  same(3, 2) ➞ false\n  same(3, -2) ➞ true\n  same(3.6, -2.2) ➞ false\n  */\nconst same = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  return xIsInt && yIsInt && x + y === x + y;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the difference of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  diff(5, 2) ➞ false\n  diff(3, 2) ➞ true\n  diff(3, -2) ➞ true\n  diff(3.6, -2.2) ➞ false\n  */\nconst diff = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  return xIsInt && yIsInt && x - y === x - y;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the quotient of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  quot(5, 2) ➞ false\n  quot(3, 2) ➞ true\n  quot(3, -2) ➞ false\n  quot(3.6, -2.2) ➞ true\n  */\nconst quot = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  return xIsInt && yIsInt && x / y === x / y;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the product of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  prod(5, 2) ➞ true\n  prod(3, 2) ➞ false\n  prod(3, -2) ➞ false\n  prod(3.6, -2.2) ➞ false\n  */\nconst prod = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  return xIsInt && yIsInt && x * y === x * y;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the root of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  root(5, 2) ➞ false\n  root(3, 2) ➞ true\n  root(3, -2) ➞ true\n  root(3.6, -2.2) ➞ true\n  */\nconst root = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  return xIsInt && yIsInt && Math.pow(x, 1 / y) === x;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the logarithm of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  log(5, 2) ➞ true\n  log(3, 2) ➞ false\n  log(3, -2) ➞ false\n  log(3.6, -2.2) ➞ false\n  */\nconst log = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  return xIsInt && yIsInt && Math.log(x) / Math.log(y) === x;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the exponential of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  exp(5, 2) ➞ true\n  exp(3, 2) ➞ false\n  exp(3, -2) ➞ false\n  exp(3.6, -2.2) ➞ false\n  */\nconst exp = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n  return xIsInt && yIsInt && Math.pow(Math.E, x) / Math.pow(Math.E, y) === x;\n}\n\n/* Create a function that takes 2 numbers.\n  Returns true if one of the numbers is equal to the square root of the other, and both numbers are integers.\n  Returns false in any other cases.\n  Examples\n  sqrt(5, 2) ➞ true\n  sqrt(3, 2) ➞ true\n  sqrt(3, -2) ➞ false\n  sqrt(3.6, -2.2) ➞ false\n  */\nconst sqrt = (x, y) => {\n  const xIsInt = (x % 1 === 0);\n  const yIsInt = (y % 1 === 0);\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encOde", "gc": "/*\n  Write a function that takes a message, and encOdes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encOde('test')\n  'TGST'\n  >>> encOde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encOde = (message) => {\n  let alphabet = ['A', 'E', 'I', 'O', 'U', 'a', 'e', 'i', 'o', 'u'];\n  let temp = message.toLowerCase();\n  for (let i = 0; i < alphabet.length; i++) {\n    let vowel = alphabet[i];\n    let index = message.indexOf(vowel);\n    if (index!= -1) {\n      temp = temp.replace(vowel, alphabet[index + 2]);\n      temp = temp.replace(vowel, alphabet[index + 2]);\n    }\n  }\n  return temp;\n};\n\nmodule.exports = encOde;\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjKasdKd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjKasdKd = (lst) => {\n  let result = 1;\n  for (let i = 0; i < lst.length; i++) {\n    result = result * 10 + lst[i];\n  }\n  const largest = Math.max(...lst.map((x) => Math.sqrt(x)));\n  let digits = 0;\n  while (largest > 0) {\n    digits += largest % 10;\n    largest = largest / 10;\n  }\n  return result + digits;\n}\n\nexport default skjKasdKd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "cheCkDiCtCasE", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasE = (dict) => {\n  return Object.keys(dict).every((key) => {\n    return key.toLowerCase() === key || key.toUpperCase() === key;\n  });\n}\n\nconst checkIfNumber = (str) => {\n  if (str === \"\" || typeof str!== \"number\" ||!isFinite(str)) {\n    return false;\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if the dictionary contains only \n  numbers, else return false.\n  Examples:\n  cheCkDiCtCasE({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  cheCkDiCtCasE({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  cheCkDiCtCasE({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  cheCkDiCtCasE({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  cheCkDiCtCasE({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst cheCkDiCtCasEN = (dict) => {\n  return Object.keys(dict).every((key) => {\n    return checkIfNumber(dict[key]);\n  });\n}\n\nconst checkIfValid = (str) => {\n  return!(str === \"\" || typeof str!== \"string\" ||!isFinite(str) || str.length < 1);\n}\n\nconst cheCkDiCtCasEN = (str) => {\n  return checkIfValid(str);\n}\n\nconst cheCkDiCtCasE = (dict) => {\n  return cheCkDiCtCasEN(dict) && cheCkDiCtCasEN(dict.toString());\n}\n\nmodule.exports = {\n  cheCkDiCtCasE\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "couNtUpto", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  couNtUpto(5) => [2,3]\n  couNtUpto(11) => [2,3,5,7]\n  couNtUpto(0) => []\n  couNtUpto(20) => [2,3,5,7,11,13,17,19]\n  couNtUpto(1) => []\n  couNtUpto(18) => [2,3,5,7,11,13,17]\n  */\nconst couNtUpto = (n) => {\n  if (n === 0) {\n    return [];\n  }\n  const arr = [1, 2];\n  let i = 3;\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n    i++;\n  }\n  return arr;\n};\n\nfunction isPrime(n) {\n  const i = Math.sqrt(n);\n  for (let j = 2; j <= i; j++) {\n    if (n % j === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulTiplY", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulTiplY(148, 412) should return 16.\n  mulTiplY(19, 28) should return 72.\n  mulTiplY(2020, 1851) should return 0.\n  mulTiplY(14,-15) should return 20.\n  */\nconst mulTiplY = (a, b) => {\n  const a_str = String(a);\n  const b_str = String(b);\n  const sum = a_str.split(\"\").reduce((a, c) => a + c * b_str.split(\"\").reduce((a, c) => a + c, 0));\n  return sum;\n};\n\n/*\n  Complete the function that takes a string and returns the index of the \n  first character that is not a digit.\n  Assume the input is always valid.\n  Examples:\n  indexOfNonDigit(\"a1b2c3\") should return 2.\n  indexOfNonDigit(\"3a1b2\") should return 3.\n  indexOfNonDigit(\"aaa\") should return -1.\n  indexOfNonDigit(\"a1b2c\") should return -1.\n  indexOfNonDigit(\"\") should return -1.\n  */\nconst indexOfNonDigit = (str) => {\n  const str_array = str.split(\"\").filter((c) =>!isNaN(c) && isFinite(c));\n  const index = str_array.findIndex((c) =>!isFinite(c));\n  return index;\n};\n\n/*\n  Complete the function that takes a string and returns a new string \n  where all the digit are replaced by '0'.\n  Assume the input is always valid.\n  Examples:\n  replaceDigits(\"a1b2c3\") should return \"a1b2c0\".\n  replaceDigits(\"3a1b2\") should return \"0a1b2\".\n  replaceDigits(\"aaa\") should return \"aaa\".\n  replaceDigits(\"a1b2c\") should return \"a1b2c\".\n  replaceDigits(\"\") should return \"\".\n  */\nconst replaceDigits = (str) => {\n  const str_array = str.split(\"\").filter((c) =>!isNaN(c) && isFinite(c));\n  const index = str_array.findIndex((c) =>!isFinite(c));\n  const replaced = str_array.slice(0, index).join(\"\");\n  const last_digit = str_array[index];\n  const next_digit = str_array[index + 1];\n  const next_last_digit = str_array[index + 2];\n  const next_next_digit = str_array[index + 3];\n  const result = replaced + next_digit + last_digit + next_last_digit + next_next_digit;\n  return result;\n};\n\n/*\n  Complete the function that takes two strings and returns the longest string \n  that is a concatenation of the two strings.\n  Assume the input is always valid.\n  Examples:\n  longestConcat(\"a\", \"b\") should return \"ab\".\n  longestConcat(\"a\", \"bcd\") should return \"abcd\".\n  longestConcat(\"ab\", \"cd\") should return \"abcd\".\n  longestConcat(\"\", \"a\") should return \"a\".\n  longestConcat(\"ab\", \"\") should return \"ab\".\n  longestConcat(\"\", \"\") should return \"\".\n  longestConcat(\"a\", \"a\") should return \"aaaa\".\n  */\nconst longestConcat = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  const longest = a_length < b_length? a_length : b_length;\n  let result = a + b;\n  while (result.length < longest) {\n    result += result;\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two strings and returns the longest string \n  that is a concatenation of the two strings and is palindrome.\n  Assume the input is always valid.\n  Examples:\n  longestConcat(\"ab\", \"bc\") should return \"ab\".\n  longestConcat(\"ab\", \"ab\") should return \"ab\".\n  longestConcat(\"ab\", \"ac\") should return \"ab\".\n  longestConcat(\"ab\", \"ab\") should return \"ab\".\n  longestConcat(\"ab\", \"\") should return \"ab\".\n  longestConcat(\"\", \"a\") should return \"a\".\n  longestConcat(\"\", \"\") should return \"\".\n  longestConcat(\"a\", \"a\") should return \"aaa\".\n  longestConcat(\"a\", \"b\") should return \"ab\".\n  longestConcat(\"a\", \"ab\") should return \"ab\".\n  longestConcat(\"a\", \"aa\") should return \"aa\".\n  longestConcat(\"ab\", \"ab\") should return \"ab\".\n  longestConcat(\"ab\", \"ac\") should return \"ab\".\n  longestConcat(\"ab\", \"\") should return \"ab\".\n  longestConcat(\"\", \"a\") should return \"a\".\n  longestConcat(\"\", \"\") should return \"\".\n  */\nconst longestPalindrome = (a, b) => {\n  const a_length = a.length;\n  const b_length = b.length;\n  let result = a + b;\n  while (result.length < a_length + b_length) {\n    result += result;\n  }\n  while (result.length > a_length + b_length) {\n    result = result.slice(0, a_length + b_length);\n  }\n  while (result[0]!== result.slice(a_length, a_length + b_length)) {\n    result = result.slice(0, a_length + b_length);\n  }\n  return result;\n};\n\n/*\n  Complete the function that takes two strings and returns the longest string \n  that is a concatenation of the two strings and is palindrome.\n  Assume the input is always valid.\n  Examples:\n  longestConcat(\"ab\", \"bc\") should return \"ab\".\n  longestConcat(\"ab\", \"ab\") should return \"ab\".\n  longestConcat(\"ab"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "couNtUpPer", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  couNtUpPer('aBCdEf') returns 1\n  couNtUpPer('abcdefg') returns 0\n  couNtUpPer('dBBE') returns 0\n  */\nconst couNtUpPer = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2) {\n        if(s[i] === s[i].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n};\n\nconsole.log(couNtUpPer('aBCdEf')); // 1\nconsole.log(couNtUpPer('abcdefg')); // 0\nconsole.log(couNtUpPer('dBBE')); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "cloSestintegEr", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> cloSestintegEr(\"10\")\n  10\n  >>> cloSestintegEr(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example cloSestintegEr(\"14.5\") should\n  return 15 and cloSestintegEr(\"-14.5\") should return -15.\n  */\nconst cloSestintegEr = (value) => {\n  let val = parseInt(value);\n  let ints = [];\n  let absInts = [];\n  for (let i = 0; i <= 20; i++) {\n    ints.push(i);\n    absInts.push(Math.abs(i));\n  }\n  for (let i = 0; i <= ints.length - 2; i++) {\n    let diff = Math.abs(val - ints[i]) - Math.abs(val - ints[i + 1]);\n    if (diff == 0) {\n      return ints[i];\n    }\n    if (diff < 0) {\n      return ints[i];\n    }\n    if (diff > 0) {\n      return ints[i + 1];\n    }\n  }\n  return 0;\n};\n\nmodule.exports = {\n  cloSestintegEr,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makEAPiLe", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makEAPiLe(3)\n  [3, 5, 7]\n  */\nconst makEAPiLe = (n) => {\n  if (n === 1) return [1];\n  const result = [1];\n  const oddN = n % 2 === 1? n + 1 : n;\n  const evenN = n % 2 === 0? n : n + 1;\n  for (let i = 1; i < oddN; i++) {\n    result.push(result[i - 1] + i);\n  }\n  for (let i = 1; i < evenN; i++) {\n    result.push(result[i - 1] + i);\n  }\n  return result;\n};\n\nexport default makEAPiLe;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worDsStRing", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worDsStRing(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worDsStRing(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worDsStRing = (s) => {\n  const split = s.split(/\\s*(?=[,\\s])/);\n  return split;\n}\n\nmodule.exports = worDsStRing;<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choOseNUm", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 14\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUm = (x, y) => {\n  if (x === y) {\n    return x;\n  } else if (x < y) {\n    return y;\n  } else {\n    const half = Math.floor((x + y) / 2);\n    const halfIsOdd = half % 2 === 1;\n    if (halfIsOdd) {\n      return half;\n    } else {\n      return half - 1;\n    }\n  }\n};\n\n/*\n  This function takes two positive numbers x and y and returns the\n  smallest even integer number that is in the range [x, y] inclusive.\n  If there's no such number, then the function should return -1.\n\n  For example:\n  choOseNUm(12, 15) = 12\n  choOseNUm(13, 12) = -1\n  */\nconst choOseNUmi = (x, y) => {\n  if (x === y) {\n    return x;\n  } else if (x < y) {\n    return x;\n  } else {\n    const half = Math.floor((x + y) / 2);\n    const halfIsOdd = half % 2 === 1;\n    if (halfIsOdd) {\n      return half;\n    } else {\n      return half - 1;\n    }\n  }\n};\n\nconst sum = (x, y) => x + y;\n\nconst max = (x, y) => Math.max(x, y);\n\nconst min = (x, y) => Math.min(x, y);\n\nconst mod = (x, y) => x % y;\n\nconst floor = (x, y) => Math.floor(x / y);\n\nconst ceil = (x, y) => Math.ceil(x / y);\n\nconst round = (x, y) => Math.round(x / y);\n\nconst pow = (x, y) => Math.pow(x, y);\n\nconst sqrt = (x, y) => Math.sqrt(x);\n\nconst pow2 = (x, y) => x * x;\n\nconst pow3 = (x, y) => x * x * x;\n\nconst pow4 = (x, y) => x * x * x * x;\n\nconst pow5 = (x, y) => x * x * x * x * x;\n\nconst pow6 = (x, y) => x * x * x * x * x * x;\n\nconst pow7 = (x, y) => x * x * x * x * x * x * x;\n\nconst pow8 = (x, y) => x * x * x * x * x * x * x * x;\n\nconst pow9 = (x, y) => x * x * x * x * x * x * x * x * x;\n\nconst pow10 = (x, y) => x * x * x * x * x * x * x * x * x * x;\n\nconst pow11 = (x, y) => x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow12 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow13 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow14 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow15 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow16 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow17 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow18 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow19 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n\nconst pow20 = (x, y) => x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x * x;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rouNdedavg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rouNdedavg(1, 5) => \"0b11\"\n  rouNdedavg(7, 5) => -1\n  rouNdedavg(10, 20) => \"0b1111\"\n  rouNdedavg(20, 33) => \"0b11010\"\n  */\nconst rouNdedavg = (n, m) => {\n  let result = n + m;\n  let avg = result / 2;\n  let half = avg / 2;\n  let res = '';\n  if (n > m) {\n    return -1;\n  }\n  let nb = Math.pow(2, half);\n  let n_res = nb.toString(2);\n  let m_res = nb.toString(2);\n  if (n >= half) {\n    n_res = n_res.substr(0, half);\n  }\n  if (m > half) {\n    m_res = m_res.substr(0, half);\n  }\n  res = n_res + m_res;\n  return res;\n};\n\nrouNdedavg(1, 5)\nrouNdedavg(7, 5)\nrouNdedavg(10, 20)\nrouNdedavg(20, 33)\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniQueDIgits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniQueDIgits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniQueDIgits([152, 323, 1422, 10])\n  []\n  */\nconst uniQueDIgits = (x) => {\n  const uniQueDIs = []\n  for (let i = 0; i < x.length; i++) {\n    const isEven = i % 2 === 0\n    if (isEven) {\n      uniQueDIs.push(x[i])\n    }\n  }\n  const sorted = uniQueDIs.sort()\n  return sorted\n}\n\n/*\nGiven a number n, return the sum of all its digit.\n\n  For example:\n  >>> sumDigits(4)\n  9\n  >>> sumDigits(10)\n  30\n  >>> sumDigits(1)\n  1\n  >>> sumDigits(5)\n  5\n  */\nconst sumDigits = (n) => {\n  let sum = 0\n  for (let i = 0; i < n.length; i++) {\n    sum += n[i]\n  }\n  return sum\n}\n\n/*\nGiven two numbers, a and b, return a number c, that is equal to a + b. \n   If the result is larger than 10**9, return 10**9.\n\n  For example:\n  >>> addDigits(15, 33)\n  46\n  >>> addDigits(152, 323)\n  1534\n  >>> addDigits(15, 33)\n  46\n  >>> addDigits(15, 33)\n  46\n  */\nconst addDigits = (a, b) => {\n  const result = a + b\n  return Math.min(Math.pow(10, 9), result)\n}\n\n/*\nGiven two numbers, a and b, return a number c, that is equal to a - b. \n   If the result is larger than 10**9, return 10**9.\n\n  For example:\n  >>> subtractDigits(15, 33)\n  23\n  >>> subtractDigits(152, 323)\n  -17\n  >>> subtractDigits(15, 33)\n  23\n  >>> subtractDigits(15, 33)\n  23\n  */\nconst subtractDigits = (a, b) => {\n  const result = a - b\n  return Math.min(Math.pow(10, 9), result)\n}\n\n/*\nGiven a number n, return the sum of the squares of all its digits.\n\n  For example:\n  >>> sumSquares(4)\n  9\n  >>> sumSquares(10)\n  100\n  >>> sumSquares(1)\n  1\n  >>> sumSquares(5)\n  25\n  */\nconst sumSquares = (n) => {\n  let sum = 0\n  for (let i = 0; i < n.length; i++) {\n    sum += Math.pow(n[i], 2)\n  }\n  return sum\n}\n\n/*\nGiven two numbers, a and b, return a number c, that is equal to a - b. \n   If the result is larger than 10**9, return 10**9.\n\n  For example:\n  >>> subtractDigits(15, 33)\n  23\n  >>> subtractDigits(152, 323)\n  -17\n  >>> subtractDigits(15, 33)\n  23\n  >>> subtractDigits(15, 33)\n  23\n  */\nconst subtractDigits = (a, b) => {\n  const result = a - b\n  return Math.min(Math.pow(10, 9), result)\n}\n\nexport { uniQueDIgits, sumDigits, addDigits, subtractDigits, sumSquares }\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLEngtH", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLEngtH = (arr) => {\n  const isValid = (num) => num > 0 && num < 10;\n  const arrLength = arr.length;\n  let returnArray = [];\n  let i = 0;\n  let j = 0;\n\n  if (arrLength === 0) {\n    return returnArray;\n  }\n\n  while (i < arrLength) {\n    if (isValid(arr[i])) {\n      returnArray[j] = arr[i];\n      i++;\n      j++;\n    } else if (isValid(arr[i] - 1)) {\n      returnArray[j] = arr[i] - 1;\n      i++;\n      j++;\n    } else if (isValid(arr[i] + 1)) {\n      returnArray[j] = arr[i] + 1;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  return returnArray;\n};\n\nconst byGtH = (arr) => {\n  const isValid = (num) => num > 0 && num < 10;\n  const arrLength = arr.length;\n  let returnArray = [];\n  let i = 0;\n  let j = 0;\n\n  if (arrLength === 0) {\n    return returnArray;\n  }\n\n  while (i < arrLength) {\n    if (isValid(arr[i])) {\n      returnArray[j] = arr[i];\n      i++;\n      j++;\n    } else if (isValid(arr[i] + 1)) {\n      returnArray[j] = arr[i] + 1;\n      i++;\n      j++;\n    } else if (isValid(arr[i] - 1)) {\n      returnArray[j] = arr[i] - 1;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  return returnArray;\n};\n\nconst byArr = (arr) => {\n  const arrLength = arr.length;\n  let returnArray = [];\n  let i = 0;\n  let j = 0;\n\n  if (arrLength === 0) {\n    return returnArray;\n  }\n\n  while (i < arrLength) {\n    if (arr[i] > 0 && arr[i] < 10) {\n      returnArray[j] = arr[i];\n      i++;\n      j++;\n    } else if (arr[i] > 9 && arr[i] < 100) {\n      returnArray[j] = arr[i] - 10;\n      i++;\n      j++;\n    } else if (arr[i] > 99 && arr[i] < 1000) {\n      returnArray[j] = arr[i] - 100;\n      i++;\n      j++;\n    } else if (arr[i] > 999 && arr[i] < 10000) {\n      returnArray[j] = arr[i] - 1000;\n      i++;\n      j++;\n    } else {\n      i++;\n    }\n  }\n\n  return returnArray;\n};\n\nconst arr = [9, 8, 7, 6, 5, 4, 3, 2, 1];\nconst sortedArray = byArr(arr);\nconsole.log(sortedArray);<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let ans = []\n  for (let i = 1; i <= n; i++) {\n    let fact = (i % 2 === 0)? i : i + 1\n    ans.push(fact)\n  }\n  return ans\n}\n\nconst assert = (actual, expected) => {\n  if (actual!== expected) {\n    throw new Error(`Expected ${actual}, got ${expected}`)\n  }\n}\n\nconst factorial = (n) => {\n  return f(n)\n}\n\nconst testFactorial = (n) => {\n  return (actual) => {\n    assert(actual, f(n))\n  }\n}\n\nmodule.exports = {\n  factorial,\n  testFactorial\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "eveNOddpalinDroMe", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst eveNOddpalinDroMe = (n) => {\n  let even = 0, odd = 0;\n  let palin = 0;\n  while (palin < n) {\n    palin += 2 * (palin - 1);\n    if (palin % 2 === 0) {\n      even += 1;\n    } else {\n      odd += 1;\n    }\n  }\n  return [even, odd];\n};\n\nexport default eveNOddpalinDroMe;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "couNtNuMs", "gc": "/*\n  Write a function couNtNuMs which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> couNtNuMs([]) == 0\n  >>> couNtNuMs([-1, 11, -11]) == 1\n  >>> couNtNuMs([1, 1, 2]) == 3\n  */\nconst couNtNuMs = (arr) => {\n  return arr.reduce((acc, val) => {\n    if (val < 0) {\n      if (val === Math.abs(val)) {\n        return acc + 1;\n      }\n    } else {\n      if (val === val.toString().split('').reduce((acc, digit) => {\n        return acc + Number(digit);\n      }, 0)) {\n        return acc + 1;\n      }\n    }\n    return acc;\n  }, 0);\n};\n\nconsole.log(couNtNuMs([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movEOneball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movEOneball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movEOneball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movEOneball = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  const result = {\n    isSorted: false,\n    isSortedInNonDecreasingOrder: false\n  };\n  const [start, end] = [0, len - 1];\n  while (start < end) {\n    const mid = Math.floor((start + end) / 2);\n    const newArr = arr.slice();\n    const sorted = newArr.sort((a, b) => {\n      return a - b;\n    });\n    if (sorted.indexOf(newArr[mid])!== -1) {\n      result.isSorted = true;\n      break;\n    } else if (sorted.indexOf(newArr[mid + 1])!== -1) {\n      end = mid;\n    } else if (sorted.indexOf(newArr[mid - 1])!== -1) {\n      start = mid + 1;\n    } else {\n      result.isSorted = false;\n      result.isSortedInNonDecreasingOrder = false;\n      break;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excHangE", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excHangE of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excHangEd elements between lst1 and lst2.\n  If it is possible to excHangE elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excHangE([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excHangE([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excHangE = (lst1, lst2) => {\n    const lst1Len = lst1.length;\n    const lst2Len = lst2.length;\n\n    const [lst1Min, lst1Max] = [0, lst1Len - 1];\n    const [lst2Min, lst2Max] = [0, lst2Len - 1];\n\n    for (let i = lst1Max; i >= lst1Min; i--) {\n        for (let j = lst2Max; j >= lst2Min; j--) {\n            if (lst1[i] === lst2[j]) {\n                return false;\n            }\n        }\n    }\n\n    return true;\n}\n\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 5]));\nconsole.log(excHangE([1, 2, 3, 4], [1, 2, 3, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hisTogrAm", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hisTogrAm('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hisTogrAm('a b b a') == {'a': 2, 'b': 2}\n  hisTogrAm('a b c a b') == {'a': 2, 'b': 2}\n  hisTogrAm('b b b b a') == {'b': 4}\n  hisTogrAm('') == {}\n\n  */\nconst hisTogrAm = (test) => {\n  const letters = test.split(\" \");\n  let letterCount = {};\n  \n  for(let i = 0; i < letters.length; i++){\n    const letter = letters[i];\n    \n    if(!letterCount[letter]){\n      letterCount[letter] = 1;\n    }else{\n      letterCount[letter]++;\n    }\n  }\n  \n  let result = {};\n  for(let i = 0; i < letters.length; i++){\n    if(letterCount[letters[i]] > result[letters[i]]){\n      result[letters[i]] = letterCount[letters[i]];\n    }\n  }\n  \n  return result;\n};\n\nconsole.log(hisTogrAm(\"a b c\"));\nconsole.log(hisTogrAm(\"a b b a\"));\nconsole.log(hisTogrAm(\"b b b b a\"));\nconsole.log(hisTogrAm(\"\"));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revErsedeletE", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revErsedeletE = (s, c) => {\n  let result = s.split('')\n  let ct = 0\n  for (let i = 0; i < result.length; i++) {\n    if (c.includes(result[i])) {\n      result.splice(i, 1)\n      ct++\n    }\n  }\n  return (result.join(''), ct === result.length)\n}\n\n// console.log(revErsedeletE('abcdef', 'ab'))\nconsole.log(revErsedeletE('abcdedcba', 'ab'))\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddcounT", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddcounT(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddcounT(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddcounT = (lst) => {\n  const ret = []\n  for (let i = 0; i < lst.length; i++) {\n    const l = lst[i].split(\"\").filter(v => v.length > 0).map(v => v.length)\n    const oddcoun = l.reduce((acc, i) => acc + (i & 1), 0)\n    ret.push(`the number of odd elements ${oddcoun} of the ${i}th string of the ${lst.length} string input.`)\n  }\n  return ret\n}\n\nmodule.exports = oddcounT\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minsubARraySUm", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minsubARraySUm([2, 3, 4, 1, 2, 4]) == 1\n  minsubARraySUm([-1, -2, -3]) == -6\n  */\nconst minsubARraySUm = (nums) => {\n  let sum = nums.reduce((acc, num) => acc + num, 0)\n  let subArr = []\n  let index = 0\n  let prev = nums[0]\n  let minSum = nums[0]\n  let minStart = 0\n  while (index < nums.length) {\n    let currentSum = sum - prev\n    if (currentSum < minSum) {\n      minSum = currentSum\n      minStart = index\n    }\n    subArr.push(currentSum)\n    prev = nums[index]\n    index++\n  }\n  return subArr\n}\n\nconsole.log(minsubARraySUm([-1, -2, -3]))\nconsole.log(minsubARraySUm([2, 3, 4, 1, 2, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxfill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxfill = (grid, capacity) => {\n  const r = grid.length;\n  const c = grid[0].length;\n  const dp = [[0]*c for i in range(r)];\n\n  for(let i=1; i<=r; i++) {\n    for(let j=1; j<=c; j++) {\n      if(grid[i-1][j-1] == 1) {\n        dp[i][j] = 1;\n        dp[i][j] += dp[i-1][j];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i-1][j];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i][j-1];\n        dp[i][j] += dp[i-1][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j] -= dp[i-1][j-1];\n        dp[i][j] += dp[i][j-1];\n        dp[i][j"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorTArrAy", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorTArrAy([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorTArrAy([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorTArrAy([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorTArrAy = (arr) => {\n  let temp = []\n  const sortedArr = []\n  const sortedArrLength = arr.length\n\n  for (let i = 0; i < sortedArrLength; i++) {\n    temp = temp.concat(arr[i])\n  }\n\n  const sortedArrayLength = temp.length\n\n  for (let i = 0; i < sortedArrayLength; i++) {\n    const curr = temp[i]\n    if (curr) {\n      sortedArr.push(curr)\n    }\n  }\n\n  return sortedArr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selEctWOrds", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selEctWOrds(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selEctWOrds(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selEctWOrds(\"simple white space\", 2) ==> []\n  selEctWOrds(\"Hello world\", 4) ==> [\"world\"]\n  selEctWOrds(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selEctWOrds = (s, n) => {\n    if (s === '') return [];\n    const len = s.length;\n    const result = [];\n    for (let i = 0; i < len; i++) {\n        let l = 0;\n        let r = i;\n        while (l < n) {\n            if (s[l] === s[r]) {\n                l++;\n            } else {\n                break;\n            }\n            r++;\n        }\n        if (l === n) {\n            result.push(s.slice(i, i + n));\n        }\n    }\n    return result;\n};\n\nselEctWOrds('Hello world', 3)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 4)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 5)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 6)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 7)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 8)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 9)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 10)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 11)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 12)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 13)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 14)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 15)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 16)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 17)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 18)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 19)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 20)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 21)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 22)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 23)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 24)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 25)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 26)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 27)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 28)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 29)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 30)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 31)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 32)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 33)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 34)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 35)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 36)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 37)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 38)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 39)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 40)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 41)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 42)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 43)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 44)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 45)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 46)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 47)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 48)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 49)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 50)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 51)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 52)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 53)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 54)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 55)\n//=> [\"Hello\", \"world\"]\nselEctWOrds('Hello world', 56)\n//=> [\"Hello\","}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getclosEstVoWel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getclosEstVoWel(\"yogurt\") ==> \"u\"\n  getclosEstVoWel(\"FULL\") ==> \"U\"\n  getclosEstVoWel(\"quick\") ==> \"\"\n  getclosEstVoWel(\"ab\") ==> \"\"\n  */\nconst getclosEstVoWel = (word) => {\n  const arr = word.split(\"\");\n  let pos = 0;\n  const vowel = /[aeiou]/;\n  let closest = word;\n  let prev = word;\n  while (pos < arr.length) {\n    let curr = arr[pos];\n    if (vowel.test(curr)) {\n      return curr;\n    }\n    if (vowel.test(prev)) {\n      return \"\";\n    }\n    if (curr.toLowerCase() < prev.toLowerCase()) {\n      prev = curr;\n    }\n    pos += 1;\n  }\n  return closest;\n};\n\nmodule.exports = getclosEstVoWel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matChPaRens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matChPaRens(['()(', ')']) == 'Yes'\n  matChPaRens([')', ')']) == 'No'\n  */\nconst matChPaRens = (lst) => {\n  const len = lst.length\n  let res = 'No'\n  for (let i = 0; i < len; i++) {\n    let cur = lst[i]\n    let next = lst[i + 1]\n    if (cur === '(' && next === '(') {\n      res = 'Yes'\n      break\n    } else if (cur === ')' && next === ')') {\n      res = 'No'\n      break\n    }\n  }\n  return res\n}\n\nmodule.exports = matChPaRens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxImum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxImum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxImum = (arr, k) => {\n  let [k, v] = [0, 0]\n  let vv = []\n  let min = -Infinity\n  for (let i = 0; i < arr.length; i++) {\n    v = Math.max(v, arr[i])\n    if (k === 0) {\n      break\n    }\n    vv.push(v)\n    if (k > 0) {\n      k--\n    }\n    if (v === min) {\n      break\n    }\n    if (k === 0) {\n      break\n    }\n  }\n  return vv\n}\n\nconst test = [\n  [ [-3, -4, 5], 3 ],\n  [ [4, -4, 4], 2 ],\n  [ [-3, 2, 1, 2, -1, -2, 1], 1 ],\n]\n\nconst [correct, time] = test\nconst start = performance.now()\nconst result = maxImum(correct, correct[0].length)\nconst end = performance.now()\nconsole.log('Your code ran in', (end - start),'ms.')\nconsole.log('\\nYour answer:', result)\nif (correct[0].length === result.length) {\n  console.log('\\nCORRECT!')\n} else {\n  console.log('\\nWRONG!')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solUtioN", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solUtioN([5, 8, 7, 1]) ==> 12\n  solUtioN([3, 3, 3, 3, 3]) ==> 9\n  solUtioN([30, 13, 24, 321]) ==>0\n  */\nconst solUtioN = (lst) => {\n  const sum = lst.reduce((acc, curr) => acc + (curr % 2 === 0? 0 : curr), 0);\n  return sum;\n};\n\n// let sum = solUtioN(lst);\n// console.log(sum);\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addelemEnts", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addelemEnts = (arr, k) => {\n  const sortedArr = arr.slice().sort();\n  let i = 0;\n  let sum = 0;\n  while (i < k) {\n    sum += sortedArr[i];\n    i++;\n  }\n  return sum;\n};\n\n// let addelemEnts = (arr, k) => {\n//   let sum = 0;\n//   for (let i = 0; i < k; i++) {\n//     sum += arr[i];\n//   }\n//   return sum;\n// };\n\n// let addelemEnts = (arr, k) => {\n//   let sum = 0;\n//   for (let i = 0; i < k; i++) {\n//     sum += arr[i];\n//   }\n//   return sum;\n// };\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\n// let addelemEnts = (arr, k) => {\n//   let sum = 0;\n//   for (let i = 0; i < k; i++) {\n//     sum += arr[i];\n//   }\n//   return sum;\n// };\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) => {\n  let sum = 0;\n  for (let i = 0; i < k; i++) {\n    sum += arr[i];\n  }\n  return sum;\n};\n\nlet addelemEnts = (arr, k) =>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getoddCOllatZ", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getoddCOllatZ(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getoddCOllatZ = (n) => {\n  let odd = [1], next = n;\n  while (next > 1) {\n    if (next % 2 === 0) {\n      next = next / 2;\n    } else {\n      next = 3 * next + 1;\n    }\n    odd.push(next);\n  }\n  return odd;\n}\n\nconsole.log(getoddCOllatZ(5));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valIdDaTe", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valIdDaTe('03-11-2000') => true\n\n  valIdDaTe('15-01-2012') => false\n\n  valIdDaTe('04-0-2040') => false\n\n  valIdDaTe('06-04-2020') => true\n\n  valIdDaTe('06/04/2020') => false\n  */\nconst valIdDaTe = (date) => {\n  const regex = /^(0[1-9]|[1-2][0-9]|3[0-1])-([0-2][0-9]|3[0-1]|4[0-9]|5[0-1]|6[0-4]|7[0-5]|8[0-9]|9[0-9])-([0-9]{4})$/;\n  const dateString = date.toString();\n  if (dateString.length === 0) {\n    return false;\n  }\n  if (regex.test(dateString) === false) {\n    return false;\n  }\n  const dateArray = dateString.split('-');\n  const dateMonth = parseInt(dateArray[0]);\n  const dateDay = parseInt(dateArray[1]);\n  const dateYear = parseInt(dateArray[2]);\n\n  if (dateMonth < 1 || dateMonth > 12) {\n    return false;\n  }\n\n  if (dateDay < 1 || dateDay > 31) {\n    return false;\n  }\n\n  if (dateMonth === 2 && dateDay > 29) {\n    return false;\n  }\n\n  if (dateMonth === 2 && dateDay < 1) {\n    return false;\n  }\n\n  if (dateMonth === 4 || dateMonth === 6 || dateMonth === 9 || dateMonth === 11) {\n    if (dateDay < 1 || dateDay > 30) {\n      return false;\n    }\n  }\n\n  if (dateMonth === 3 || dateMonth === 5 || dateMonth === 7 || dateMonth === 8 || dateMonth === 10) {\n    if (dateDay < 1 || dateDay > 31) {\n      return false;\n    }\n  }\n\n  if (dateMonth === 1 && (dateDay < 1 || dateDay > 31)) {\n    return false;\n  }\n\n  if (dateYear < 1900 || dateYear > 2099) {\n    return false;\n  }\n\n  return true;\n};\n\nconst dateToday = (() => {\n  const now = new Date();\n  const day = now.getDate();\n  const month = now.getMonth() + 1;\n  const year = now.getFullYear();\n  return `${day}/${month}/${year}`;\n})();\n\nconst dateTomorrow = (() => {\n  const now = new Date();\n  const day = now.getDate();\n  const month = now.getMonth() + 1;\n  const year = now.getFullYear();\n  return `${day}/${month}/${year}`;\n})();\n\nconst dateYesterday = (() => {\n  const now = new Date();\n  const day = now.getDate();\n  const month = now.getMonth() + 1;\n  const year = now.getFullYear();\n  return `${day}/${month}/${year}`;\n})();\n\nexport {\n  valIdDaTe,\n  dateToday,\n  dateTomorrow,\n  dateYesterday\n};\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splItWoRds", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds = (txt) => {\n  const words = txt.split(' ');\n  return words.reduce((a, v, i) => {\n    const last = a.slice(-1);\n    const last2 = a[i - 2];\n    if (last2 === ',' && last!== ',') {\n      a[i - 2] ='';\n    }\n    a.push(v);\n    return a;\n  }, []);\n};\n\n/**\n  Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splItWoRds(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splItWoRds(\"abcdef\") == 3\n  */\nconst splItWoRds2 = (txt) => {\n  const words = txt.split(' ');\n  const n = words.length;\n  const map = new Map();\n  for (let i = 0; i < n; i++) {\n    const letter = words[i][0];\n    if (map.has(letter)) {\n      map.set(letter, map.get(letter) + 1);\n    } else {\n      map.set(letter, 1);\n    }\n  }\n  let ret = [];\n  for (const [k, v] of map) {\n    if (v % 2 === 1) {\n      ret.push(k);\n    }\n  }\n  return ret;\n};\n\nconst numLetters = (txt) => {\n  const map = new Map();\n  for (let i = 0; i < txt.length; i++) {\n    const letter = txt[i];\n    if (map.has(letter)) {\n      map.set(letter, map.get(letter) + 1);\n    } else {\n      map.set(letter, 1);\n    }\n  }\n  let ret = 0;\n  for (const [k, v] of map) {\n    ret += v;\n  }\n  return ret;\n};\n\nconst isOdd = (num) => num % 2 === 1;\n\nconst numLetters2 = (txt) => {\n  const map = new Map();\n  for (let i = 0; i < txt.length; i++) {\n    const letter = txt[i];\n    if (map.has(letter)) {\n      map.set(letter, map.get(letter) + 1);\n    } else {\n      map.set(letter, 1);\n    }\n  }\n  let ret = 0;\n  for (const [k, v] of map) {\n    if (v % 2 === 1) {\n      ret += v;\n    }\n  }\n  return ret;\n};\n\nconst isOdd2 = (num) => num % 2 === 1;\n\nexport {\n  splItWoRds,\n  splItWoRds2,\n  numLetters,\n  numLetters2,\n  isOdd,\n  isOdd2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSOrteD", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSOrteD([5]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5]) ➞ false\n  isSOrteD([1, 2, 3, 4, 5, 6]) ➞ true\n  isSOrteD([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSOrteD([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSOrteD([1, 2, 2, 3, 3, 4]) ➞ true\n  isSOrteD([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSOrteD = (lst) => {\n  if (lst.length === 0) {\n    return true;\n  }\n  const next = lst[0];\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < next) {\n      return false;\n    }\n    next = lst[i];\n  }\n  return true;\n};\n\nmodule.exports = isSOrteD;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intErseCtion", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intErseCtion of these two \n  intervals is a prime number.\n  Example, the intErseCtion of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intErseCtion is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intErseCtion((1, 2), (2, 3)) ==> \"NO\"\n  intErseCtion((-1, 1), (0, 4)) ==> \"NO\"\n  intErseCtion((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intErseCtion = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [startMax, endMin] = [Math.max(start1, start2), Math.min(end1, end2)];\n  const isPrime = prime => prime &&!(prime % startMax);\n  const isPrimeEnd = prime => prime &&!(prime % endMin);\n  return (isPrime(startMax) && isPrimeEnd(endMin)) ||\n    (isPrime(endMax) && isPrimeEnd(startMin));\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"NO\"\n*/\nconst intErseCtion1 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start <= start2 || end >= end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"YES\"\n*/\nconst intErseCtion2 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start <= start2 && end >= end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"YES\"\n*/\nconst intErseCtion3 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start < start2 && end > end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"YES\"\n*/\nconst intErseCtion4 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start > start2 && end < end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"YES\"\n*/\nconst intErseCtion5 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start < start2 && end > end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"NO\"\n*/\nconst intErseCtion6 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start >= start2 && end <= end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"NO\"\n*/\nconst intErseCtion7 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start <= start2 && end >= end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"YES\"\n*/\nconst intErseCtion8 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  const [start2, end2] = interval2;\n  return start <= start2 || end >= end2;\n};\n\n/*\n  [input] interval1 = (start, end) = (1, 2).\n  [input] interval2 = (start, end) = (2, 3).\n  [output] intErseCtion(interval1, interval2) ==> \"NO\"\n*/\nconst intErseCtion9 = (interval1, interval2) => {\n  const [start, end] = interval1;\n  "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "proDSigNs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> proDSigNs([1, 2, 2, -4]) == -9\n  >>> proDSigNs([0, 1]) == 0\n  >>> proDSigNs([]) == null\n  */\nconst proDSigNs = (arr) => {\n  let ret = 0;\n  if (arr.length) {\n    for (let i = 0; i < arr.length; i++) {\n      let x = arr[i];\n      let y = (x > 0? 1 : -1);\n      ret += x * y;\n    }\n  }\n  return ret;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minpath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minpath = (grid, k) => {\n  if (grid.length === 1) {\n    return grid.map((x) => x);\n  }\n\n  const [n, m] = grid.length;\n  const [k, maxRow, maxCol] = kMax(k, n, m);\n\n  const lst = [0,...Array(k + 1).fill(1)];\n\n  let i = 1;\n  let j = 0;\n  while (i < maxRow + 1) {\n    while (j < maxCol + 1) {\n      const row = i - 1;\n      const col = j - 1;\n\n      if (row >= 0 && col >= 0) {\n        lst[i] = grid[row][col];\n      }\n      j++;\n    }\n    i++;\n  }\n\n  return lst;\n};\n\nexport default minpath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let res = [];\n  let tri = 1;\n  let n = n;\n  for(let i = 1; i <= n; i++){\n    res.push(tri);\n    tri = (tri + 1) % n;\n    if(tri === 0){\n      tri = (tri + n) % n;\n    }\n  }\n  return res;\n}\nconsole.log(tri(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digIts", "gc": "/*Given a positive integer n, return the product of the odd digIts.\n  Return 0 if all digIts are even.\n  For example:\n  digIts(1)  == 1\n  digIts(4)  == 0\n  digIts(235) == 15\n  */\nconst digIts = (n) => {\n    let total = 1;\n    for (let i = 1; i < n; i += 2) {\n        total *= i;\n    }\n    return total;\n};\n\nlet res = digIts(10);\nconsole.log(res);\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNEsteD", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNEsteD('[[]]') ➞ true\n  isNEsteD('[]]]]]]][[[[[]') ➞ false\n  isNEsteD('[][]') ➞ false\n  isNEsteD('[]') ➞ false\n  isNEsteD('[[][]]') ➞ true\n  isNEsteD('[[]][[') ➞ true\n  */\nconst isNEsteD = (string) => {\n  let isValid = false;\n  const isSquareBracket = (char) => char === '[';\n  const isSquareBracketEnd = (char) => char === ']';\n\n  let position = 0;\n  let count = 0;\n\n  while (string.charAt(position) === '[') {\n    count++;\n    position++;\n  }\n\n  while (string.charAt(position)!== ']') {\n    if (isSquareBracket(string.charAt(position))) {\n      if (isSquareBracketEnd(string.charAt(position + 1))) {\n        count++;\n      } else if (isSquareBracketEnd(string.charAt(position - 1))) {\n        count--;\n      }\n      position++;\n    } else if (isSquareBracketEnd(string.charAt(position))) {\n      position++;\n    }\n    if (count === 0) {\n      isValid = true;\n      break;\n    }\n    position++;\n  }\n\n  return isValid;\n};\n\nconsole.log(isNEsteD('[[]]'));\nconsole.log(isNEsteD('[]]]]]]][[[[[]'));\nconsole.log(isNEsteD('[][]'));\nconsole.log(isNEsteD('[]'));\nconsole.log(isNEsteD('[[][]]'));\nconsole.log(isNEsteD('[[]][['));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsquaRes = (lst) => {\n  const result = lst.reduce((pre, cur) => {\n    return pre + cur*cur;\n  }, 0);\n  return Math.round(result);\n}\n\nmodule.exports = sumsquaRes;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "cheCkIflastCHarisALeTter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  cheCkIflastCHarisALeTter(\"apple pie\") ➞ false\n  cheCkIflastCHarisALeTter(\"apple pi e\") ➞ true\n  cheCkIflastCHarisALeTter(\"apple pi e \") ➞ false\n  cheCkIflastCHarisALeTter(\"\") ➞ false\n  */\nconst cheCkIflastCHarisALeTter = (txt) => {\n  const chars = txt.split(\" \")\n  const lastChar = chars[chars.length - 1]\n  return isAlphabetic(lastChar) &&!isWord(lastChar)\n}\n\n/*\n  Given a string, return the number of times the given\n  character occurs in the string.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  count(\"abc\", \"a\") ➞ 1\n  count(\"abc\", \"\") ➞ 0\n  count(\"abc def\", \"d\") ➞ 2\n  count(\"abc def\", \"e\") ➞ 1\n  count(\"abc def\", \"aa\") ➞ 0\n  */\nconst count = (txt, char) => {\n  const chars = txt.split(\" \")\n  return chars.map((item) => item.indexOf(char)).reduce((a, b) => a + b, 0)\n}\n\n/*\n  Given a string, return the number of times the given\n  character occurs in the string, ignoring case.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  count(\"abc\", \"A\") ➞ 0\n  count(\"abc\", \"D\") ➞ 1\n  count(\"abc def\", \"a\") ➞ 1\n  count(\"abc def\", \"z\") ➞ 0\n  */\nconst countCaseInsensitive = (txt, char) => {\n  const chars = txt.split(\" \")\n  return chars.map((item) => item.toLowerCase().indexOf(char.toLowerCase())).reduce((a, b) => a + b, 0)\n}\n\n/*\n  Given a string, return the number of times the given\n  character occurs in the string, ignoring case.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  countCaseInsensitive(\"abc\", \"A\") ➞ 0\n  countCaseInsensitive(\"abc\", \"D\") ➞ 1\n  countCaseInsensitive(\"abc def\", \"a\") ➞ 1\n  countCaseInsensitive(\"abc def\", \"z\") ➞ 0\n  */\nconst countCaseInsensitiveInWords = (txt, char) => {\n  const chars = txt.split(\" \")\n  return chars.map((item) => item.toLowerCase()).reduce((a, b) => a + b.indexOf(char.toLowerCase()), 0)\n}\n\n/*\n  Given a string, return the number of times the given\n  character occurs in the string, ignoring case.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  countCaseInsensitiveInWords(\"abc def\", \"a\") ➞ 2\n  countCaseInsensitiveInWords(\"abc def\", \"z\") ➞ 0\n  */\nconst countCaseInsensitiveInWordsInWords = (txt, char) => {\n  const chars = txt.split(\" \")\n  return chars.map((item) => item.toLowerCase()).reduce((a, b) => a + b.toLowerCase().indexOf(char.toLowerCase()), 0)\n}\n\n/*\n  Given a string, return the number of times the given\n  character occurs in the string, ignoring case.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  countCaseInsensitiveInWordsInWords(\"abc def\", \"a\") ➞ 0\n  countCaseInsensitiveInWordsInWords(\"abc def\", \"z\") ➞ 2\n  */\nconst countCaseInsensitiveInWordsInWordsInWords = (txt, char) => {\n  const chars = txt.split(\" \")\n  return chars.map((item) => item.toLowerCase()).reduce((a, b) => a + b.toLowerCase().indexOf(char.toLowerCase()), 0)\n}\n\n/*\n  Given a string, return the number of times the given\n  character occurs in the string, ignoring case.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  countCaseInsensitiveInWordsInWordsInWords(\"abc def\", \"a\") ➞ 0\n  countCaseInsensitiveInWordsInWordsInWords(\"abc def\", \"z\") ➞ 2\n  */\nconst countCaseInsensitiveInWordsInWordsInWordsInWords = (txt, char) => {\n  const chars = txt.split(\" \")\n  return chars.map((item) => item.toLowerCase()).reduce((a, b) => a + b.toLowerCase().indexOf(char.toLowerCase()), 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canarraNge", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canarraNge([1,2,4,3,5]) = 3\n  canarraNge([1,2,3]) = -1\n  */\nconst canarraNge = (arr) => {\n  let low = 0\n  let high = arr.length - 1\n\n  while (low <= high) {\n    const middle = Math.floor((low + high) / 2)\n    if (arr[middle] >= arr[middle - 1]) {\n      high = middle - 1\n    } else {\n      low = middle + 1\n    }\n  }\n  return low\n}\n\nexport default canarraNge\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larGestsmallEstintegErs", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larGestsmallEstintegErs([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larGestsmallEstintegErs([]) == (null, null)\n  larGestsmallEstintegErs([0]) == (null, null)\n  */\nconst larGestsmallEstintegErs = (lst) => {\n  let max = null;\n  let min = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] >= 0) {\n      if (min === null) {\n        min = lst[i];\n      } else {\n        min = Math.min(min, lst[i]);\n      }\n    } else {\n      if (max === null) {\n        max = lst[i];\n      } else {\n        max = Math.max(max, lst[i]);\n      }\n    }\n  }\n  return [max, min];\n};\n\n/*\n  Create a function that returns the largest of the three given values.\n  Examples:\n  larGestLargest(2, 4, 3) == 4\n  larGestLargest(0, 0, 0) == 0\n  larGestLargest(0, 2, 0) == 0\n  larGestLargest(0, 0, 2) == 2\n  */\nconst larGestLargest = (a, b, c) => {\n  return (a > b)? ((a > c)? a : c) : ((b > c)? b : c);\n};\n\n/*\n  Create a function that returns the smallest of the three given values.\n  Examples:\n  larGestSmallest(2, 4, 3) == 2\n  larGestSmallest(0, 0, 0) == 0\n  larGestSmallest(0, 2, 0) == 0\n  larGestSmallest(0, 0, 2) == 0\n  */\nconst larGestSmallest = (a, b, c) => {\n  return (a < b)? ((a < c)? a : c) : ((b < c)? b : c);\n};\n\n/*\n  Create a function that returns the sum of the values in a list.\n  Examples:\n  larGestsum([2, 4, 1, 3, 5, 7]) == 16\n  */\nconst larGestsum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  Create a function that returns the mean of the values in a list.\n  Examples:\n  larGestmean([2, 4, 1, 3, 5, 7]) == 5.8\n  */\nconst larGestmean = (lst) => {\n  return larGestsum(lst) / lst.length;\n};\n\n/*\n  Create a function that returns the median of the values in a list.\n  Examples:\n  larGestmedian([2, 4, 1, 3, 5, 7]) == 3.5\n  */\nconst larGestmedian = (lst) => {\n  let sorted = lst.sort();\n  let half = sorted.length / 2;\n  return (half === sorted.length - 1)? sorted[half] : (sorted[half] + sorted[half + 1]) / 2;\n};\n\n/*\n  Create a function that returns the mode of the values in a list.\n  Examples:\n  larGestmode([2, 4, 1, 3, 5, 7]) == [2, 3, 5]\n  */\nconst larGestmode = (lst) => {\n  let count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]])? count[lst[i]] + 1 : 1;\n  }\n  let modes = [];\n  for (let i in count) {\n    modes.push(i);\n  }\n  return modes;\n};\n\n/*\n  Create a function that returns the mode of the values in a list.\n  Examples:\n  larGestmode([2, 4, 1, 3, 5, 7]) == [2, 3, 5]\n  */\nconst larGestmode = (lst) => {\n  let count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]])? count[lst[i]] + 1 : 1;\n  }\n  let modes = [];\n  for (let i in count) {\n    modes.push(i);\n  }\n  return modes;\n};\n\n/*\n  Create a function that returns the mode of the values in a list.\n  Examples:\n  larGestmode([2, 4, 1, 3, 5, 7]) == [2, 3, 5]\n  */\nconst larGestmode = (lst) => {\n  let count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]])? count[lst[i]] + 1 : 1;\n  }\n  let modes = [];\n  for (let i in count) {\n    modes.push(i);\n  }\n  return modes;\n};\n\n/*\n  Create a function that returns the mode of the values in a list.\n  Examples:\n  larGestmode([2, 4, 1, 3, 5, 7]) == [2, 3, 5]\n  */\nconst larGestmode = (lst) => {\n  let count = {};\n  for (let i = 0; i < lst.length; i++) {\n    count[lst[i]] = (count[lst[i]])? count[lst[i]] + 1 : 1;\n  }\n  let modes = [];\n  for (let i in count) {\n    modes.push(i);\n  }\n  return modes;\n"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comPareone", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comPareone(1, 2.5) ➞ 2.5\n  comPareone(1, \"2,3\") ➞ \"2,3\"\n  comPareone(\"5,1\", \"6\") ➞ \"6\"\n  comPareone(\"1\", 1) ➞ null\n  */\nconst comPareone = (a, b) => {\n  let bigger = null;\n\n  if (typeof a === \"string\") {\n    a = parseFloat(a);\n  }\n\n  if (typeof b === \"string\") {\n    b = parseFloat(b);\n  }\n\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) {\n      bigger = a;\n    } else {\n      bigger = b;\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) {\n      bigger = b;\n    } else {\n      bigger = a;\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (b > a) {\n      bigger = b;\n    } else {\n      bigger = a;\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) {\n      bigger = a;\n    } else {\n      bigger = b;\n    }\n  }\n\n  return bigger;\n};\n\nconst compare = (a, b) => {\n  if (typeof a === \"string\") {\n    a = parseFloat(a);\n  }\n\n  if (typeof b === \"string\") {\n    b = parseFloat(b);\n  }\n\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) {\n      return \"Bigger\";\n    } else if (a < b) {\n      return \"Smaller\";\n    } else {\n      return \"Equal\";\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) {\n      return \"Bigger\";\n    } else if (a < b) {\n      return \"Smaller\";\n    } else {\n      return \"Equal\";\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (b > a) {\n      return \"Smaller\";\n    } else if (b < a) {\n      return \"Bigger\";\n    } else {\n      return \"Equal\";\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) {\n      return \"Bigger\";\n    } else if (a < b) {\n      return \"Smaller\";\n    } else {\n      return \"Equal\";\n    }\n  } else {\n    return \"Equal\";\n  }\n};\n\nconst test = (a, b) => {\n  if (typeof a === \"string\") {\n    a = parseFloat(a);\n  }\n\n  if (typeof b === \"string\") {\n    b = parseFloat(b);\n  }\n\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) {\n      console.log(\"Bigger\");\n    } else if (a < b) {\n      console.log(\"Smaller\");\n    } else {\n      console.log(\"Equal\");\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) {\n      console.log(\"Bigger\");\n    } else if (a < b) {\n      console.log(\"Smaller\");\n    } else {\n      console.log(\"Equal\");\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (b > a) {\n      console.log(\"Smaller\");\n    } else if (b < a) {\n      console.log(\"Bigger\");\n    } else {\n      console.log(\"Equal\");\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) {\n      console.log(\"Bigger\");\n    } else if (a < b) {\n      console.log(\"Smaller\");\n    } else {\n      console.log(\"Equal\");\n    }\n  } else {\n    console.log(\"Equal\");\n  }\n};\n\nconst test2 = (a, b) => {\n  if (typeof a === \"string\") {\n    a = parseFloat(a);\n  }\n\n  if (typeof b === \"string\") {\n    b = parseFloat(b);\n  }\n\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    if (a > b) {\n      console.log(\"Bigger\");\n    } else if (a < b) {\n      console.log(\"Smaller\");\n    } else {\n      console.log(\"Equal\");\n    }\n  } else if (typeof a === \"string\" && typeof b === \"number\") {\n    if (a > b) {\n      console.log(\"Bigger\");\n    } else if (a < b) {\n      console.log(\"Smaller\");\n    } else {\n      console.log(\"Equal\");\n    }\n  } else if (typeof a === \"number\" && typeof b === \"string\") {\n    if (b > a) {\n      console.log(\"Smaller\");\n    } else if (b < a) {\n      console.log(\"Bigger\");\n    } else {\n      console.log(\"Equal\");\n    }\n  } else if (typeof a === \"string\" && typeof b === \"string\") {\n    if (a > b) {\n      console.log(\"Bigger\");\n    } else if (a < b) {\n      console.log(\"Smaller\");\n    } else {\n      console.log(\""}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEQualtoSumeveN", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEQualtoSumeveN(4) == false\n  isEQualtoSumeveN(6) == false\n  isEQualtoSumeveN(8) == true\n  */\nconst isEQualtoSumeveN = (n) => {\n  const evenN = [2, 4, 6, 8];\n  return evenN.every((n) => n === n + 2);\n};\n\n/*\n  Evaluate whether the given number n is a prime number.\n  Example\n  isPrime(11) == false\n  isPrime(13) == true\n  isPrime(4) == false\n  isPrime(7) == true\n  isPrime(9) == true\n  isPrime(5) == true\n  */\nconst isPrime = (n) => {\n  return n > 1 && n % 2 === 0 && isEqualtoN(n, 3) === false;\n};\n\n/*\n  Evaluate whether the given number n is equal to the sum of the first 4 positive even numbers.\n  Example\n  isEqualtoN(4) == false\n  isEqualtoN(6) == false\n  isEqualtoN(8) == true\n  isEqualtoN(9) == true\n  isEqualtoN(10) == true\n  isEqualtoN(12) == false\n  isEqualtoN(13) == false\n  */\nconst isEqualtoN = (n) => {\n  const evenN = [2, 4, 6, 8];\n  return evenN.every((n) => n === n + 2);\n};\n\n/*\n  Evaluate whether the given number n is a prime number.\n  Example\n  isPrime(11) == false\n  isPrime(13) == true\n  isPrime(4) == false\n  isPrime(7) == true\n  isPrime(9) == true\n  isPrime(5) == true\n  */\nconst isPrime2 = (n) => {\n  return n > 1 && n % 2 === 0 && n % 3 === 0 && n % 5 === 0 && n % 7 === 0 && n % 11 === 0 && n % 13 === 0 && n % 17 === 0 && n % 19 === 0 && n % 23 === 0 && n % 29 === 0 && n % 31 === 0 && n % 37 === 0 && n % 41 === 0 && n % 43 === 0 && n % 47 === 0 && n % 53 === 0 && n % 59 === 0 && n % 61 === 0 && n % 67 === 0 && n % 71 === 0 && n % 73 === 0 && n % 79 === 0 && n % 83 === 0 && n % 89 === 0 && n % 97 === 0 && n % 101 === 0 && n % 103 === 0 && n % 107 === 0 && n % 109 === 0 && n % 113 === 0 && n % 127 === 0 && n % 129 === 0 && n % 131 === 0 && n % 137 === 0 && n % 139 === 0 && n % 143 === 0 && n % 149 === 0 && n % 157 === 0 && n % 163 === 0 && n % 167 === 0 && n % 173 === 0 && n % 179 === 0 && n % 191 === 0 && n % 193 === 0 && n % 197 === 0 && n % 199 === 0 && n % 211 === 0 && n % 223 === 0 && n % 227 === 0 && n % 229 === 0 && n % 233 === 0 && n % 239 === 0 && n % 241 === 0 && n % 251 === 0 && n % 257 === 0 && n % 263 === 0 && n % 269 === 0 && n % 271 === 0 && n % 277 === 0 && n % 281 === 0 && n % 283 === 0 && n % 289 === 0 && n % 293 === 0 && n % 307 === 0 && n % 311 === 0 && n % 313 === 0 && n % 317 === 0 && n % 329 === 0 && n % 337 === 0 && n % 347 === 0 && n % 349 === 0 && n % 353 === 0 && n % 359 === 0 && n % 367 === 0 && n % 373 === 0 && n % 379 === 0 && n % 383 === 0 && n % 389 === 0 && n % 397 === 0 && n % 401 === 0 && n % 409 === 0 && n % 419 === 0 && n % 437 === 0 && n % 441 === 0 && n % 457 === 0 && n % 463 === 0 && n % 467 === 0 && n % 479 === 0 && n % 487 === 0 && n % 491 === 0 && n % 499 === 0 && n % 503 === 0 && n % 509 === 0 && n % 521 === 0 && n % 523 === 0 && n % 541 === 0 && n % 547 === 0 && n % 559 === 0 && n % 563 === 0 && n % 571 === 0 && n % 577 === 0 && n % 587 === 0 && n % 599 === 0 && n % 611 === 0 && n % 623 === 0 && n % 631 === 0 && n % 641 === 0 && n % 653 === 0 && n % 671 === 0 && n % 673 === 0 && n % 677 === 0 && n % 679 === 0 && n % 687 === 0 && n % 699 === 0 && n % 703 === 0 && n % 709 === 0 && n % 719 === 0 && n % 727 === 0 && n % 733 === 0 && n % 737 === 0 && n % 743 === 0 && n % 751 === 0 && n % 757 === 0 && n % 761 === 0 && n % 769 === 0 && n % 773 === 0 && n % 787 === 0 && n % 791 === 0 && n % 797 === 0 && n % 809 === 0 && n % 823 === 0 && n % 831 === 0 && n % 839 === 0 && n % 847 === 0 && n % 855 === 0 && n % 863 === 0 && n % 871 === 0 && n % 877 === 0 && n % 887 === 0 && n % 899 === 0 && n % 907 === 0 && n % 915 === 0 && n % 923 === 0 && n % 931 === 0 && n % 939 === 0 && n % 947 === 0 && n % 955 === 0 && n % 963 === 0 && n % 971 === 0 && n % 977 === 0 && n % 987 === 0 && n % 995 === 0 && n % 997 === 0 && n % 1009 === 0 && n % 1017 === 0 && n % 1025 === 0 && n % 1033 === 0 && n % 1037 === 0 && n % 1045 === 0 && n % 1053 === 0 && n % 1059"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "speCialfactoRiaL", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> speCialfactoRiaL(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst speCialfactoRiaL = (n) => {\n  return (n + 1) * (n - 1) * (n - 2) * (n - 3) * (n - 4) * (n - 5) * (n - 6) * (n - 7) * (n - 8) * (n - 9) * (n - 10) * (n - 11) * (n - 12) * (n - 13) * (n - 14) * (n - 15) * (n - 16) * (n - 17) * (n - 18) * (n - 19) * (n - 20) * (n - 21) * (n - 22) * (n - 23) * (n - 24) * (n - 25) * (n - 26) * (n - 27) * (n - 28) * (n - 29) * (n - 30) * (n - 31) * (n - 32);\n};\n\nconst special_factorial = (n) => {\n  const a = [1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 607, 992, 1597, 2584, 4181, 6765, 10946, 17711, 28657, 46368, 75025, 121393, 196418, 317811, 502373, 777876, 1258626, 2028283, 3545290, 5692393, 8777364, 13076723, 21428571, 32891248, 50663755, 72217762, 102847717, 146800686, 207434345, 306912982, 419430137, 591466368, 804304583, 1121426265, 1548008481, 2110810304, 2839912705, 4026531888, 5661188269, 7841235364, 10378972717, 13032445292, 16900721289, 20510474448, 27172813945, 37290773959, 49689875747, 6890094059, 91934873622, 122398387325, 142415500244, 173468271263, 204443435294, 237700884757, 270144242868, 3212293825019, 356679465458, 4130983288097, 4984540124091, 5989618122316, 6578423678481, 7644364939072, 8947844577695, 10394756476358, 120263601476595, 134677870594984, 147574282878257, 1676360269321437, 1878973381678666, 1999038931747611, 21961577303225634, 234375, 676890, 147770, 290360, 609870, 139160, 245760, 495360, 951170, 179160, 347680, 595190, 988320, 1764800, 3368160, 5774400, 8738320, 140160, 2113600, 2984400, 4592320, 7174400, 11678400, 16378600, 21431700, 27536000, 32763600, 41943020, 52646000, 68738000, 89936000, 116786000, 147614000, 178738000, 2099936000, 256858000, 313936000, 385824000, 459232000, 526460000, 635640000, 7432600000, 8762400000, 109993600000, 13558600000, 15976800000, 18676400000, 21466400000, 23592800000, 26132800000, 29076800000, 32593600000, 36295200000, 40265300000, 46307800000, 50647600000, 55987200000, 61747600000, 67893600000, 73847200000, 80696000000, 87662400000, 93747200000, 100637200000, 108793600000, 114662400000, 123637200000, 132833600000, 142366600000, 152224600000, 16249800000, 17346800000, 183656000000, 194657600000, 205857600000, 219518000000, 23448800000, 246492800000, 256787200000, 270144000000, 283464800000, 296080800000, 308727200000, 323328000000, 341458400000, 356216800000, 378649600000, 395192000000, 410095200000, 422785600000, 43939200000, 453526800000, 468012800000, 482712800000, 498457600000, 52369600000, 544696000000, 566016800000, 587296800000, 607856000000, 628467200000, 648873600000, 669369600000, 694444800000, 705232000000, 72625600000, 748281600000, 769472000000, 790144000000, 812678400000, 834337600000, 851170400000, 870544000000, 885824000000, 902441600000, 923244800000, 946876800000, 961808800000, 976851200000, 992624800000, 1009056000000, 1028675200000, 104726800000, 106775200000, 108912800000, 110691200000, 1123576000000, 114079200000, 116064800000, 117724400000, 119405600000, 120972800000, 122499200000, 124224800000, 125833600000, 127527200000, 129216000000, 130766400000, 132505600000, 134325600000, 135393600000, 137098400000, 138676800000, 139550800000, 141264000000, 142903200000, 144652800000, 146320800000, 148008000000, 149673600000, 151329200000, 152985600000, 154720800000, 156555200000, 158260"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixspacEs", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"_Example_2\"\n  fixspacEs(\" Example   3\") == \"_Example-3\"\n  */\nconst fixspacEs = (text) => {\n  const text2 = text.replace(/\\s+/g, '_')\n  if(text2.length > 2) {\n    let lastSpace = text2.lastIndexOf(' ')\n    while(text2.charAt(lastSpace + 1) ==='') {\n      lastSpace = text2.lastIndexOf(' ', lastSpace + 1)\n    }\n    text2 = text2.substring(0, lastSpace) + '-' + text2.substring(lastSpace + 1)\n  }\n  return text2\n}\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  fixspacEs(\"Example\") == \"Example\"\n  fixspacEs(\"Example 1\") == \"Example_1\"\n  fixspacEs(\" Example 2\") == \"Example-2\"\n  fixspacEs(\" Example   3\") == \"Example-3\"\n  */\nconst fixunderscEs = (text) => {\n  const text2 = text.replace(/_+/g,'')\n  if(text2.length > 2) {\n    let lastUnderscore = text2.lastIndexOf('_')\n    while(text2.charAt(lastUnderscore + 1) === '_') {\n      lastUnderscore = text2.lastIndexOf('_', lastUnderscore + 1)\n    }\n    text2 = text2.substring(0, lastUnderscore) +'' + text2.substring(lastUnderscore + 1)\n  }\n  return text2\n}\n\n/*\n  Given a string text, replace all - with spaces, \n  and if a string has more than 2 consecutive -, \n  then replace all consecutive - with -.\n  \n  fixunderscEs(\"Example-3\") == \"Example 3\"\n  */\nconst fixminusEs = (text) => {\n  const text2 = text.replace(/-+/g,'')\n  if(text2.length > 2) {\n    let lastMinus = text2.lastIndexOf('-')\n    while(text2.charAt(lastMinus + 1) === '-') {\n      lastMinus = text2.lastIndexOf('-', lastMinus + 1)\n    }\n    text2 = text2.substring(0, lastMinus) +'' + text2.substring(lastMinus + 1)\n  }\n  return text2\n}\n\nconst fixspacesEs = (text) => {\n  const text2 = text.replace(/\\s+/g,'')\n  if(text2.length > 2) {\n    let lastSpace = text2.lastIndexOf(' ')\n    while(text2.charAt(lastSpace + 1) ==='') {\n      lastSpace = text2.lastIndexOf(' ', lastSpace + 1)\n    }\n    text2 = text2.substring(0, lastSpace) +'' + text2.substring(lastSpace + 1)\n  }\n  return text2\n}\n\nconst fixundersc = (text) => {\n  const text2 = text.replace(/_+/g,'')\n  return text2\n}\n\nconst fixminus = (text) => {\n  const text2 = text.replace(/-+/g,'')\n  return text2\n}\n\nconst fixspaces = (text) => {\n  const text2 = text.replace(/\\s+/g,'')\n  return text2\n}\n\nmodule.exports = {\n  fixunderscEs,\n  fixundersc,\n  fixspacEs,\n  fixspaces,\n  fixminusEs,\n  fixminus,\n}<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filENamEChecK", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filENamEChecK(\"example.txt\") # => 'Yes'\n  filENamEChecK(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filENamEChecK = (file_name) => {\n  let chars = file_name.split(\".\")\n  if(chars.length < 2) return \"No\"\n  if(chars.length > 3) return \"No\"\n  if(chars.length == 3) {\n    if(chars[0] == \"\" ||!(/^[a-zA-Z]+$/.test(chars[0]))) return \"No\"\n    if(chars[1] == \"\" ||!(/^[0-9]+$/.test(chars[1]))) return \"No\"\n    if(chars[2] == \"\" ||!(/^[a-zA-Z]+$/.test(chars[2]))) return \"No\"\n  } else {\n    if(chars[0] == \"\" ||!(/^[a-zA-Z]+$/.test(chars[0]))) return \"No\"\n    if(chars[1] == \"\" ||!(/^[a-zA-Z]+$/.test(chars[1]))) return \"No\"\n  }\n  return \"Yes\"\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  the file's extension.\n  Examples:\n  getExtenST(\"example.txt\") # => \"txt\"\n  getExtenST(\"1example.dll\") # => \"dll\"\n  getExtenST(\"1example\") # => \"\" (the file doesn't have an extension)\n  */\nconst getExtenST = (file_name) => {\n  let chars = file_name.split(\".\")\n  if(chars.length < 2) return \"\"\n  return chars[chars.length - 1]\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  the file's name without the extension.\n  Examples:\n  getNamEST(\"example.txt\") # => \"example\"\n  getNamEST(\"1example.dll\") # => \"1example\"\n  getNamEST(\"1example\") # => \"1example\" (the file doesn't have an extension)\n  */\nconst getNamEST = (file_name) => {\n  let chars = file_name.split(\".\")\n  if(chars.length < 2) return \"\"\n  return chars[0]\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  the number of digits in the file's name.\n  Examples:\n  getNbrDigitsST(\"example.txt\") # => '1'\n  getNbrDigitsST(\"1example.dll\") # => '3'\n  getNbrDigitsST(\"1example\") # => '0' (the file doesn't have a number in its name)\n  */\nconst getNbrDigitsST = (file_name) => {\n  let chars = file_name.split(\".\")\n  if(chars.length < 2) return \"\"\n  return chars[1].length\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  the number of letters in the file's name.\n  Examples:\n  getNbrLettersST(\"example.txt\") # => '1'\n  getNbrLettersST(\"1example.dll\") # => '1'\n  getNbrLettersST(\"1example\") # => '1' (the file doesn't have a letter in its name)\n  */\nconst getNbrLettersST = (file_name) => {\n  let chars = file_name.split(\".\")\n  if(chars.length < 2) return \"\"\n  return chars[0].length\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  a boolean indicating if the file's name is valid.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name should not start with a digit (i.e. it should start with a letter).\n  - The file's name should not contain any of the following characters: '*', '?', '\"', '\\'\n  Examples:\n  fileNameValidST(\"example.txt\") # => 'Yes'\n  fileNameValidST(\"1example.dll\") # => 'No' (the file's name should start with a latin alphapet letter)\n  */\nconst fileNameValidST = (file_name) => {\n  let chars = file_name.split(\".\")\n  if(chars.length < 2) return \"No\"\n  if(chars[0] == \"\" ||!(/^[a-zA-Z]+$/.test(chars[0]))) return \"No\"\n  for(let i=1; i<chars.length; i++) {\n    if(/^[\\*\\?\\\"']+$/.test(chars[i])) return \"No\"\n  }\n  return \"Yes\"\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  a boolean indicating if the file's name is valid.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name should not start with a digit (i.e. it should start with a letter).\n  - The file's name should not contain any of the following characters: '*', '?', '\"', '\\'\n  Examples:\n  fileNameValidST(\"example.txt\") # => 'Yes'\n  fileNameValidST(\"1example.dll\") # => '"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsquaRes", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsquaRes = (lst) => {\n    let sum = 0;\n    for(let i = 0; i < lst.length; i++) {\n        if((i % 3) === 0) {\n            sumsquaRes = lst[i] * lst[i];\n        }\n        if((i % 4) === 0) {\n            sumsquaRes = lst[i] * lst[i] * lst[i];\n        }\n        sumsquaRes = lst[i] * lst[i] * lst[i];\n        sum += lst[i];\n    }\n    return sum;\n}\n\n// Test cases\n\nlet testCases = [\n    [],\n    [1,2,3],\n    [4,5,6,7,8,9,10],\n    [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],\n];\n\nlet testCases2 = [\n    [],\n    [1,2,3,4,5,6,7,8,9,10],\n    [-1,-2,-3,-4,-5,-6,-7,-8,-9,-10],\n];\n\nconsole.log(sumsquaRes(testCases[0]));\nconsole.log(sumsquaRes(testCases[1]));\nconsole.log(sumsquaRes(testCases[2]));\nconsole.log(sumsquaRes(testCases2[0]));\nconsole.log(sumsquaRes(testCases2[1]));\nconsole.log(sumsquaRes(testCases2[2]));\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worDsInsenteNce", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worDsInsenteNce = (sentence) => {\n  let result = '';\n  for (let i = 0; i < sentence.length; i++) {\n    if (isPrime(i + 1)) {\n      let current = sentence[i];\n      let next = sentence[i + 1];\n      while (next!== current) {\n        result += next;\n        next = sentence[i + 2];\n      }\n      i++;\n    }\n  }\n  return result;\n}\n\nfunction isPrime(num) {\n  let prime = 1;\n  for (let i = 2; i <= num / 2; i++) {\n    if (num % i === 0) {\n      prime = 0;\n      break;\n    }\n  }\n  return prime;\n}\n\nconsole.log(worDsInsenteNce(\"This is a test\"));\nconsole.log(worDsInsenteNce(\"lets go for swimming\"));\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simPlifY", "gc": "/*Your task is to implement a function that will simPlifY the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simPlifY(\"1/5\", \"5/1\") = true\n  simPlifY(\"1/6\", \"2/1\") = false\n  simPlifY(\"7/10\", \"10/2\") = false\n  */\nconst simPlifY = (x, n) => {\n  return Math.floor(parseFloat(x) * parseFloat(n)) === parseFloat(x) * parseFloat(n);\n};\n\nconsole.log(simPlifY(\"1/5\", \"5/1\"));\nconsole.log(simPlifY(\"1/6\", \"2/1\"));\nconsole.log(simPlifY(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordErBypointS", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordErBypointS([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordErBypointS([]) == []\n  */\nconst ordErBypointS = (nums) => {\n  const sortedNums = [...new Set(nums)].sort((a, b) => {\n    return (a + b) % 10 - (b + a) % 10;\n  });\n  return sortedNums;\n};\n\nexport {ordErBypointS};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "speCialfilteR", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  speCialfilteR([15, -73, 14, -15]) => 1 \n  speCialfilteR([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst speCialfilteR = (nums) => {\n  return nums.filter(num => {\n    const first = num % 10\n    const last = num % 100\n    return (first > 10 && last % 2 === 1) || (last > 10 && first % 2 === 1)\n  })\n}\n\nconsole.log(speCialfilteR([15, -73, 14, -15]))\nconsole.log(speCialfilteR([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getmaxTRipleS", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getmaxTRipleS = (n) => {\n  const a = Array.from(Array(n)).map(i => i * i - i + 1);\n  const triples = a.filter((i) => i!== null);\n  return triples.filter((i, j, k) => i < j && j < k && (i + j + k) % 3 === 0).length;\n};\n\nmodule.exports = getmaxTRipleS;<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\",\n    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  let planet1_index = planets.indexOf(planet1);\n  let planet2_index = planets.indexOf(planet2);\n  let planet_list = [];\n  while (planet1_index < planets.length && planet2_index < planets.length) {\n    let planet1_distance = Math.pow(\n      Math.pow(planets[planet1_index].length, 2) + Math.pow(\n        Math.pow(planets[planet2_index].length, 2) - Math.pow(\n          Math.pow(planets[planet1_index].length, 2) - Math.pow(\n            Math.pow(planets[planet2_index].length, 2) - Math.pow(\n              Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                  Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                    Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                      Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                        Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                          Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                            Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                              Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                  Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                    Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                      Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                        Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                          Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                            Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                              Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                  Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                    Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                     Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                      Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                        Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                          Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                           Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                            Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                            Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                              Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                                Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                                  Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                                    Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                                      Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                                        Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                                          Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                                            Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                                              Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                                              Math.pow(planets[planet2_index].length, 2) - Math.pow(\n                                                                                Math.pow(planets[planet1_index].length, 2) - Math.pow(\n                                                                                  Math.pow(planets[planet"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorTedLIstSuM", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorTedLIstSuM = (lst) => {\n  lst = lst.filter(x => x.length % 2!== 0);\n  lst = lst.sort(x => x.length).reverse();\n  return lst;\n};\n\nconst test = require('tape');\n\ntest('list_sort', t => {\n  t.equal(sorTedLIstSuM([\"aa\", \"a\", \"aaa\"]), [\"aa\"], \"aa\");\n  t.equal(sorTedLIstSuM([\"ab\", \"a\", \"aaa\", \"cd\"]), [\"ab\", \"cd\"], \"ab\");\n  t.end();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOry", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOry(7, 34, 12) == 34\n  for xOry(15, 8, 5) == 5\n  \n  */\nconst xOry = (n, x, y) => {\n  if(n % 2 === 0) return y\n  return x\n}\n\nconst result = xOry(7, 34, 12)\n\nif(result === 34) {\n  console.log(\"result is 34\")\n}\n\nif(result === 5) {\n  console.log(\"result is 5\")\n}<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douBleTHeDifFerEnce", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douBleTHeDifFerEnce([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douBleTHeDifFerEnce([-1, -2, 0]) == 0\n  douBleTHeDifFerEnce([9, -2]) == 81\n  douBleTHeDifFerEnce([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douBleTHeDifFerEnce = (lst) => {\n  if (lst.length === 0) return 0\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i])\n    if (num < 0 || isNaN(num)) continue\n    if (num % 2 === 1) sum += num * num\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comPare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comPare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comPare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comPare = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return Math.abs(x - guess[i]);\n  });\n}\n\nconst match = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x;\n  });\n}\n\nconst compare = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp2 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp3 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp4 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp5 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp6 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp7 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp8 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp9 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp10 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp11 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp12 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp13 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp14 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp15 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp16 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp17 = (game, guess) => {\n  if (game.length!== guess.length) return false;\n  return game.map((x, i) => {\n    if (x!== guess[i]) return x - guess[i];\n  });\n}\n\nconst comp18"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strOngeStExtEnsIon", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strOngeStExtEnsIon('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strOngeStExtEnsIon = (class_name, extensions) => {\n  return class_name.toLowerCase()\n   .replace(/\\s/g, '')\n   .replace(/\\W+/g, '_')\n   .replace(/^\\W|\\W$/g, '')\n   .toLowerCase()\n   .replace(/\\b([A-Z])/g, function(match, p1) {\n      return p1.toUpperCase();\n    })\n   .replace(/([a-z])([A-Z])/g, function(match, p1, p2) {\n      return p1.toUpperCase() + p2.toLowerCase();\n    })\n   .replace(/([A-Z])([a-z]+)/g, function(match, p1, p2) {\n      return p1.toUpperCase() + p2.toUpperCase();\n    });\n};\n\nmodule.exports = strOngeStExtEnsIon;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycPattErnChEck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycPattErnChEck(\"abcd\",\"abd\") => false\n  cycPattErnChEck(\"hello\",\"ell\") => true\n  cycPattErnChEck(\"whassup\",\"psus\") => false\n  cycPattErnChEck(\"abab\",\"baa\") => true\n  cycPattErnChEck(\"efef\",\"eeff\") => false\n  cycPattErnChEck(\"himenss\",\"simen\") => true\n  */\nconst cycPattErnChEck = (a, b) => {\n  return (a.indexOf(b) > -1 || a.includes(b) || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a.includes(b +'') || a."}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "eveNOddcount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      eveNOddcount(-12) ==> (1, 1)\n      eveNOddcount(123) ==> (1, 2)\n  */\nconst eveNOddcount = (num) => {\n    const count = num.toString().split('').reduce((sum, num, i) => {\n        if (i % 2) sum += num;\n        return sum;\n    }, 0);\n    return (count % 2, count - count % 2);\n};\n\nmodule.exports = eveNOddcount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "inttoMiNiRomAn", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> inttoMiNiRomAn(19) == 'xix'\n  >>> inttoMiNiRomAn(152) == 'clii'\n  >>> inttoMiNiRomAn(426) == 'cdxxvi'\n  */\nconst inttoMiNiRomAn = (number) => {\n  let result = '';\n\n  for (let i = 1; i <= number; i++) {\n    result = (number - i) % 10 > 4? (result + 'x') : (result + 'i');\n    (number - i) % 10 > 8? (result += 'x') : (result += 'i');\n  }\n\n  return result;\n};\n\n// Test\n\nconsole.log(inttoMiNiRomAn(19));\nconsole.log(inttoMiNiRomAn(152));\nconsole.log(inttoMiNiRomAn(426));\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigHtAnGleTrIanGle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigHtAnGleTrIanGle(3, 4, 5) == true\n  rigHtAnGleTrIanGle(1, 2, 3) == false\n  */\nconst rigHtAnGleTrIanGle = (a, b, c) => {\n    return (a + b > c && b + c > a && c + a > b)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finDMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMax = (words) => {\n  let max = 0;\n  let maxWords = [];\n  words.forEach((word, index) => {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      let char = word[i];\n      count += 1;\n      let index = 0;\n      while (index < max.length) {\n        if (max[index].length === char.length) {\n          if (index > maxWords.length - 1) {\n            maxWords = [word];\n          } else {\n            maxWords.push(word);\n          }\n          break;\n        }\n        index += 1;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWords = [word];\n    }\n  });\n  return maxWords.sort((a, b) => {\n    let c = a.length - b.length;\n    return c > 0? 1 : c < 0? -1 : 0;\n  })[0];\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of letters. If multiple strings have maximum number of letters,\n  return the one which comes first in lexicographical order.\n\n  finDMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finDMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finDMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finDMaxLen = (words) => {\n  let max = 0;\n  let maxWords = [];\n  words.forEach((word, index) => {\n    let count = 0;\n    for (let i = 0; i < word.length; i++) {\n      let char = word[i];\n      count += 1;\n      let index = 0;\n      while (index < max.length) {\n        if (max[index].length === char.length) {\n          if (index > maxWords.length - 1) {\n            maxWords = [word];\n          } else {\n            maxWords.push(word);\n          }\n          break;\n        }\n        index += 1;\n      }\n    }\n    if (count > max) {\n      max = count;\n      maxWords = [word];\n    }\n  });\n  return maxWords.sort((a, b) => {\n    let c = a.length - b.length;\n    return c > 0? 1 : c < 0? -1 : 0;\n  })[0];\n};\n\nconst words = [\"hello\", \"world\", \"name\", \"of\", \"string\", \"is\", \"good\"];\n\nconsole.log(finDMax(words));\nconsole.log(finDMaxLen(words));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = [];\n  let i = 0;\n  let eaten = 0;\n  let remainingCarrots = remaining;\n  \n  // number of carrots left after eating more than we need\n  while(eaten < need) {\n    // if the current remaining carrots is enough, eat it\n    if(remainingCarrots >= number - eaten) {\n      remainingCarrots -= number - eaten;\n      eaten = number;\n    }\n    // if we don't have enough, we are done\n    else {\n      break;\n    }\n  }\n  \n  // number of remaining carrots after eating\n  result[0] = eaten;\n  result[1] = remainingCarrots;\n  \n  return result;\n};\n\n/*\n  Eat all your carrot\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Constraints:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remainingCarrots <= 1000\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots in stock\n  \n  Solution:\n  - 1. use an array to store the total number of carrots left after each meal\n  - 2. use the function eat to calculate how many carrots are eaten\n  - 3. store the result in the array\n  \n  \n  Have fun :)\n  */\nconst eatAll = (number, need, remaining) => {\n  let result = [];\n  let eaten = 0;\n  let remainingCarrots = remaining;\n  \n  while(eaten < need) {\n    // if the current remaining carrots is enough, eat it\n    if(remainingCarrots >= number - eaten) {\n      remainingCarrots -= number - eaten;\n      eaten = number;\n    }\n    // if we don't have enough, we are done\n    else {\n      break;\n    }\n  }\n  \n  result[0] = eaten;\n  result[1] = remainingCarrots;\n  \n  return result;\n};\n\nconst number = parseInt(process.argv[2]);\nconst need = parseInt(process.argv[3]);\nconst remaining = parseInt(process.argv[4]);\n\nconsole.log(eat(number, need, remaining));\nconsole.log(eatAll(number, need, remaining));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doALgebRa", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doALgebRa = (operator, operand) => {\n  let result = 0;\n\n  // If operator has only one element, then result = operand\n  if (operator.length === 1) {\n    return operand[0];\n  }\n\n  // If operator has more than one element, then result = operator[0] + operator[1] * operand[0]\n  if (operator.length > 1) {\n    result += operator[0];\n  }\n\n  // If operator has more than two elements, then result = operator[0] + operator[1] * operand[0] + operator[2] * operand[1]\n  if (operator.length > 2) {\n    result += operator[1] * operand[0];\n  }\n\n  // If operator has more than three elements, then result = operator[0] + operator[1] * operand[0] + operator[2] * operand[1] + operator[3] * operand[2]\n  if (operator.length > 3) {\n    result += operator[2] * operand[1];\n  }\n\n  return result;\n};\n\nmodule.exports = doALgebRa;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solVe", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solVe(\"1234\") = \"4321\"\n  solVe(\"ab\") = \"AB\"\n  solVe(\"#a@C\") = \"#A@c\"\n  */\nconst solVe = (s) => {\n  let len = s.length;\n  let i = 0;\n  while (i < len) {\n    if (s[i].toUpperCase()!== s[i].toLowerCase()) {\n      let char = s[i];\n      if (i!== 0) {\n        char = s[i - 1];\n      }\n      s = s.substr(0, i) + char.toUpperCase() + s.substr(i + 1);\n    }\n    i++;\n  }\n  return s;\n};\n\nconsole.log(solVe(\"ab\"));\nconsole.log(solVe(\"1234\"));\nconsole.log(solVe(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strIngTOMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strIngTOMd5 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its SHA-1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSHA1('Hello world') == 'cdc5bafd3c4b5dd4b3c7d7d05af8f5d3a8b6d5'\n  */\nconst strIngTOSHA1 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha1').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its SHA-256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSHA256('Hello world') == 'e9d4c87ee80bef9a8a5f36dd8f3a5e3c2d5b6e2f8eb1e8d0c7c1e6b2e2d9d0e8d3e4b1d0d3e4b2'\n  */\nconst strIngTOSHA256 = (text) => {\n  if (!text) return null;\n  return crypto.createHash('sha256').update(text).digest('hex');\n};\n\n/**\n  Given a string 'text', return its SHA-512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strIngTOSHA512('Hello world') == '9a8d5a5b0d28a8a6b4d9b7b3c8f5f1b6f5e7f7e7f4f8f7f4f9f9fafaf9f9fafaf9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9f9"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genEratEInteGerS", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genEratEInteGerS(2, 8) => [2, 4, 6, 8]\n  genEratEInteGerS(8, 2) => [2, 4, 6, 8]\n  genEratEInteGerS(10, 14) => []\n  */\nconst genEratEInteGerS = (a, b) => {\n  let evenDigits = [];\n  for (let i = a; i <= b; i += 2) {\n    evenDigits.push(i);\n  }\n  return evenDigits;\n}\n\n/*\n  Given an array of integers, return the first non-increasing order.\n\n  For example:\n  genNonIncrOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => 2\n  */\nconst genNonIncrOrder = (...array) => {\n  let index = 0;\n  let min = array[index];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      index = i;\n      min = array[index];\n    }\n  }\n  return min;\n}\n\n/*\n  Given an array of integers, return the first increasing order.\n\n  For example:\n  genIncrOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [3, 6, 9, 2, 4, 5, 7, 8, 10, 11]\n  */\nconst genIncrOrder = (...array) => {\n  let index = 0;\n  let max = array[index];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      index = i;\n      max = array[index];\n    }\n  }\n  return max;\n}\n\n/*\n  Given an array of integers, return the last increasing order.\n\n  For example:\n  genLastIncrOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [9, 10, 11]\n  */\nconst genLastIncrOrder = (...array) => {\n  let index = array.length - 1;\n  let max = array[index];\n  for (let i = array.length - 2; i >= 0; i--) {\n    if (array[i] > max) {\n      index = i;\n      max = array[index];\n    }\n  }\n  return max;\n}\n\n/*\n  Given an array of integers, return the last non-increasing order.\n\n  For example:\n  genLastNonIncrOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [8, 10, 11]\n  */\nconst genLastNonIncrOrder = (...array) => {\n  let index = array.length - 1;\n  let max = array[index];\n  for (let i = array.length - 2; i >= 0; i--) {\n    if (array[i] < max) {\n      index = i;\n      max = array[index];\n    }\n  }\n  return max;\n}\n\n/*\n  Given an array of integers, return the first non-decreasing order.\n\n  For example:\n  genFirstNonDecrOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [3, 2, 4, 5, 7, 8, 10, 11]\n  */\nconst genFirstNonDecrOrder = (...array) => {\n  let index = 0;\n  let min = array[index];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] < min) {\n      index = i;\n      min = array[index];\n    }\n  }\n  return min;\n}\n\n/*\n  Given two non-decreasing order, return the next one.\n\n  For example:\n  genNextOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [4, 5, 7, 8, 10, 11]\n  */\nconst genNextOrder = (...array) => {\n  let index = 0;\n  let max = array[index];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      index = i;\n      max = array[index];\n    }\n  }\n  return max;\n}\n\n/*\n  Given two non-increasing order, return the previous one.\n\n  For example:\n  genPrevOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [3, 2, 6, 9, 4, 5, 8, 10, 11]\n  */\nconst genPrevOrder = (...array) => {\n  let index = array.length - 1;\n  let min = array[index];\n  for (let i = array.length - 2; i >= 0; i--) {\n    if (array[i] < min) {\n      index = i;\n      min = array[index];\n    }\n  }\n  return min;\n}\n\n/*\n  Given an array of integers, return the first increasing order.\n\n  For example:\n  genFirstIncrOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [3, 6, 9, 2, 4, 5, 7, 8, 10, 11]\n  */\nconst genFirstIncrOrder = (...array) => {\n  let index = 0;\n  let max = array[index];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      index = i;\n      max = array[index];\n    }\n  }\n  return max;\n}\n\n/*\n  Given an array of integers, return the first non-decreasing order.\n\n  For example:\n  genFirstNonDecrOrder(3, 6, 9, 2, 4, 5, 7, 8, 10, 11) => [3, 6, 9, 2, 4, 5, 7, 8, 10, 11]\n  */\nconst genFirstNonDecrOrder = (...array) => {\n  let index = 0;\n  let min = array[index"}
