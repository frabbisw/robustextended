{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  let sorted = sorted_array(numbers);\n  let len = sorted.length;\n  let i = 0;\n  let j = 0;\n  let is_closer = false;\n  while (i < len && j < len) {\n    let a = sorted[i];\n    let b = sorted[j];\n    if (a - b < threshold) {\n      if (!is_closer) {\n        is_closer = true;\n      }\n    } else if (a - b > threshold) {\n      if (is_closer) {\n        return true;\n      }\n      i++;\n    } else {\n      j++;\n    }\n  }\n  return is_closer;\n};\n\nexport default has_close_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const paren_regex = /\\(/g;\n  const result = paren_string.match(paren_regex);\n  if(result === null) return [paren_string];\n  const result_array = [];\n  let last_index = 0;\n  let count = 0;\n  let result_string = \"\";\n  for(let index in result) {\n    if(result[index] === '(') {\n      if(last_index === index) {\n        last_index = result_array.length;\n        count++;\n      } else {\n        count++;\n      }\n    } else {\n      if(last_index === index) {\n        result_array.push(result_string);\n        result_string = \"\";\n        last_index = result_array.length;\n      } else {\n        if(count === 0) {\n          result_string += result[index];\n        } else {\n          result_string += paren_string.slice(last_index, index);\n        }\n        result_string += result[index];\n        last_index = index;\n        count--;\n      }\n    }\n  }\n  if(count > 0) {\n    result_array.push(result_string);\n  }\n  return result_array;\n};\n\n/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_2 = (paren_string) => {\n  const paren_regex = /\\(/g;\n  const result = paren_string.match(paren_regex);\n  if(result === null) return [paren_string];\n  const result_array = [];\n  let last_index = 0;\n  let count = 0;\n  let result_string = \"\";\n  for(let index in result) {\n    if(result[index] === '(') {\n      if(last_index === index) {\n        last_index = result_array.length;\n        count++;\n      } else {\n        count++;\n      }\n    } else {\n      if(last_index === index) {\n        result_array.push(result_string);\n        result_string = \"\";\n        last_index = result_array.length;\n      } else {\n        if(count === 0) {\n          result_string += result[index];\n        } else {\n          result_string += paren_string.slice(last_index, index);\n        }\n        result_string += result[index];\n        last_index = index;\n        count--;\n      }\n    }\n  }\n  if(count > 0) {\n    result_array.push(result_string);\n  }\n  return result_array;\n};\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_3 = (paren_string) => {\n  const paren_regex = /\\(/g;\n  const result = paren_string.match(paren_regex);\n  if(result === null) return [paren_string];\n  const result_array = [];\n  let last_index = 0;\n  let count = 0;\n  let result_string = \"\";\n  for(let index in result) {\n    if(result[index] === '(') {\n      if(last_index === index) {\n        last_index = result_array.length;\n        count++;\n      } else {\n        count++;\n      }\n    } else {\n      if(last_index === index) {\n        result_array.push(result_string);\n        result_string = \"\";\n        last_index = result_array.length;\n      } else {\n        if(count === 0) {\n          result_string += result[index];\n        } else {\n          result_string += paren_string.slice(last_index, index);\n        }\n        result_string += result[index];\n        last_index = index;\n        count--;\n      }\n    }\n  }\n  if(count > 0) {\n    result_array.push(result_string);\n  }\n  return result_array;\n};\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups_4 = (paren_string) => {\n  const paren_regex = /\\(/g;\n  const result = paren_string.match(paren_regex);\n  if(result === null) return [paren_string];\n  const result_array = [];\n  let last_index = 0;\n  let count = 0;\n  let result_string = \"\";\n  for(let index in result) {\n    if(result[index] === '(') {\n      if(last_index === index) {\n        last_index = result_array.length;\n        count++;\n      } else {\n        count++;\n      }\n    } else"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const parts = number.toString().split('.');\n  return parts[1] || 0;\n};\n\n/**\n  Returns the number of digits that match the specified number of decimals.\n\n  >>> digits_match(3.5, 1)\n  1\n  >>> digits_match(3.5, 2)\n  0\n  >>> digits_match(3.5, 3)\n  0\n  >>> digits_match(3.5, 4)\n  1\n  >>> digits_match(3.5, 5)\n  0\n  >>> digits_match(3.5, 6)\n  2\n  >>> digits_match(3.5, 7)\n  2\n  >>> digits_match(3.5, 8)\n  1\n  >>> digits_match(3.5, 9)\n  1\n  >>> digits_match(3.5, 10)\n  1\n  >>> digits_match(3.5, 11)\n  2\n  >>> digits_match(3.5, 12)\n  2\n  >>> digits_match(3.5, 13)\n  2\n  >>> digits_match(3.5, 14)\n  2\n  >>> digits_match(3.5, 15)\n  3\n  >>> digits_match(3.5, 16)\n  3\n  >>> digits_match(3.5, 17)\n  3\n  >>> digits_match(3.5, 18)\n  3\n  >>> digits_match(3.5, 19)\n  3\n  >>> digits_match(3.5, 20)\n  4\n  >>> digits_match(3.5, 21)\n  4\n  >>> digits_match(3.5, 22)\n  4\n  >>> digits_match(3.5, 23)\n  4\n  >>> digits_match(3.5, 24)\n  4\n  >>> digits_match(3.5, 25)\n  5\n  >>> digits_match(3.5, 26)\n  5\n  >>> digits_match(3.5, 27)\n  5\n  >>> digits_match(3.5, 28)\n  5\n  >>> digits_match(3.5, 29)\n  6\n  >>> digits_match(3.5, 30)\n  6\n  >>> digits_match(3.5, 31)\n  6\n  >>> digits_match(3.5, 32)\n  6\n  >>> digits_match(3.5, 33)\n  7\n  >>> digits_match(3.5, 34)\n  7\n  >>> digits_match(3.5, 35)\n  7\n  >>> digits_match(3.5, 36)\n  7\n  >>> digits_match(3.5, 37)\n  7\n  >>> digits_match(3.5, 38)\n  7\n  >>> digits_match(3.5, 39)\n  8\n  >>> digits_match(3.5, 40)\n  8\n  >>> digits_match(3.5, 41)\n  8\n  >>> digits_match(3.5, 42)\n  8\n  >>> digits_match(3.5, 43)\n  8\n  >>> digits_match(3.5, 44)\n  9\n  >>> digits_match(3.5, 45)\n  9\n  >>> digits_match(3.5, 46)\n  9\n  >>> digits_match(3.5, 47)\n  9\n  >>> digits_match(3.5, 48)\n  9\n  >>> digits_match(3.5, 49)\n  10\n  >>> digits_match(3.5, 50)\n  10\n  >>> digits_match(3.5, 51)\n  10\n  >>> digits_match(3.5, 52)\n  10\n  >>> digits_match(3.5, 53)\n  10\n  >>> digits_match(3.5, 54)\n  11\n  >>> digits_match(3.5, 55)\n  11\n  >>> digits_match(3.5, 56)\n  11\n  >>> digits_match(3.5, 57)\n  11\n  >>> digits_match(3.5, 58)\n  11\n  >>> digits_match(3.5, 59)\n  12\n  >>> digits_match(3.5, 60)\n  12\n  >>> digits_match(3.5, 61)\n  12\n  >>> digits_match(3.5, 62)\n  12\n  >>> digits_match(3.5, 63)\n  12\n  >>> digits_match(3.5, 64)\n  13\n  >>> digits_match(3.5, 65)\n  13\n  >>> digits_match(3.5, 66)\n  13\n  >>> digits_match(3.5, 67)\n  13\n  >>> digits_match(3.5, 68)\n  13\n  >>> digits_match(3.5, 69)\n  14\n  >>> digits_match(3.5, 70)\n  14\n  >>> digits_match(3.5, 71)\n  14\n  >>> digits_match(3.5, 72)\n  14\n  >>> digits_match(3.5, 73)\n  14\n  >>> digits_match(3.5, 74)\n  15\n  >>> digits_match(3.5, 75)\n  15\n  >>> digits_match(3.5, 76)\n  15\n  >>> digits_match(3.5, 77)\n  15\n  >>> digits_match(3.5, 78)\n  15\n  >>> digits_match(3.5, 79)\n  16\n  >>> digits_match(3.5, 80)\n  16\n  >>> digits_match(3.5, 81)\n  16\n  >>> digits_match(3.5, 82)\n  16\n  >>> digits_match(3.5, 83)\n  17\n  >>> digits_match(3.5, 84)\n  17\n  >>> digits_match(3.5, 85)\n  17\n  >>> digits_match(3.5, 86)\n  17\n  >>> digits_match(3.5, 87)\n  18\n  >>> digits_match(3.5, 88)\n"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  let is_below_zero = false;\n  for (let i = 0; i < operations.length; i++) {\n    if (operations[i] < 0) {\n      is_below_zero = true;\n      break;\n    }\n  }\n  return is_below_zero;\n};\n\n/*\n  You are given an array of numbers and two numbers.\n  Your task is to find the smallest number which is greater than or equal to both of them.\n  >>> find_smallest_number(1, 2, 3)\n  3\n  >>> find_smallest_number(1, 2, 3, 4)\n  3\n  >>> find_smallest_number(2, 3, 4, 5, 6)\n  4\n  >>> find_smallest_number(2, 3, 4, 5, 6, 7, 8)\n  7\n  >>> find_smallest_number(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n  7\n  >>> find_smallest_number(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20)\n  17\n  >>> find_smallest_number(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24)\n  23\n  >>> find_smallest_number(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30)\n  29\n  >>> find_smallest_number(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  let mean = average(numbers);\n  let deviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.abs(numbers[i] - mean);\n  }\n  return deviation / numbers.length;\n};\n\n/*\n  For a given list of input numbers, calculate the Standard Deviation of this\n  dataset.\n  Standard Deviation is the square root of the average of the squared deviations\n  around the mean of this dataset:\n  standard_deviation = sqrt(average(x^2) - mean(x^2))\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  1.4142135623730951\n  */\nconst standard_deviation = (numbers) => {\n  let mean = average(numbers);\n  let deviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.pow(numbers[i] - mean, 2);\n  }\n  return Math.sqrt(deviation / numbers.length - Math.pow(mean, 2));\n};\n\n/*\n  For a given list of input numbers, calculate the Variance of this dataset.\n  Variance is the average of the squares of deviations around the mean of this\n  dataset:\n  variance = average(x^2) - mean(x^2)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  let mean = average(numbers);\n  let deviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.pow(numbers[i] - mean, 2);\n  }\n  return deviation / numbers.length - Math.pow(mean, 2);\n};\n\n/*\n  For a given list of input numbers, calculate the Geometric Mean of this\n  dataset.\n  Geometric Mean is the average of the logarithms of the numbers in the list:\n  geometric_mean = exp(average(log(x)))\n  >>> geometric_mean([1.0, 2.0, 3.0, 4.0])\n  2.7182818284590451\n  */\nconst geometric_mean = (numbers) => {\n  let mean = average(numbers);\n  return Math.exp(mean);\n};\n\n/*\n  For a given list of input numbers, calculate the Harmonic Mean of this\n  dataset.\n  Harmonic Mean is the average of the reciprocals of the numbers in the list:\n  harmonic_mean = 1/average(1/x)\n  >>> harmonic_mean([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst harmonic_mean = (numbers) => {\n  let mean = average(numbers);\n  return 1 / mean;\n};\n\n/*\n  For a given list of input numbers, calculate the Sum of Squared Deviations\n  around the Mean of this dataset.\n  Sum of Squared Deviations is the sum of the squares of deviations around\n  the mean of this dataset:\n  sum_of_squared_deviations = sum(x^2) - mean(x^2)\n  >>> sum_of_squared_deviations([1.0, 2.0, 3.0, 4.0])\n  25.0\n  */\nconst sum_of_squared_deviations = (numbers) => {\n  let mean = average(numbers);\n  let deviation = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    deviation += Math.pow(numbers[i] - mean, 2);\n  }\n  return deviation / numbers.length - Math.pow(mean, 2);\n};\n\nmodule.exports = {\n  average,\n  geometric_mean,\n  harmonic_mean,\n  mean_absolute_deviation,\n  standard_deviation,\n  variance,\n  sum_of_squared_deviations\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (!Array.isArray(numbers) ||!numbers.length) {\n    return []\n  }\n  const result = []\n  let i = 0\n  let number = numbers[i]\n  let prev = number\n  while (i < numbers.length) {\n    number = numbers[i]\n    if (number!== prev) {\n      if (i > 0) {\n        result.push(delimeter)\n      }\n      result.push(number)\n      prev = number\n    }\n    i++\n  }\n  return result\n}\n\n/**\n  * Concatenate list of lists\n  *\n  * @param  {Array}    inputLists\n  * @param  {Number}   delimeter\n  * @return {Array}\n  */\nconst concat = (inputLists, delimeter) => {\n  if (!Array.isArray(inputLists) ||!inputLists.length) {\n    return []\n  }\n  const result = []\n  let i = 0\n  let list = inputLists[i]\n  while (i < inputLists.length) {\n    if (!Array.isArray(list)) {\n      list = []\n    }\n    list = list.concat(inputLists[i + 1])\n    i++\n    result.push(list)\n  }\n  return result\n}\n\n/**\n  * Return first element of the list\n  *\n  * @param  {Array}  list\n  * @return {Number}\n  */\nconst head = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return null\n  }\n  return list[0]\n}\n\n/**\n  * Return last element of the list\n  *\n  * @param  {Array}  list\n  * @return {Number}\n  */\nconst last = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return null\n  }\n  return list[list.length - 1]\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst tail = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(1)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst init = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(0, list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst last_init = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(list.length - list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst init_last = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(0, list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst init_last_init = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(0, list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst last_init_init = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst init_last_last_init = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(0, list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst last_init_last_init = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst last_init_last = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst last_init = (list) => {\n  if (!Array.isArray(list) ||!list.length) {\n    return []\n  }\n  return list.slice(list.length / 2)\n}\n\n/**\n  * Return every other element of the list\n  *\n  * @param  {Array}  list\n  * @return {Array}\n  */\nconst init_last_last = (list) => {\n  if (!Array.isArray(list)"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  const paren_depth = [];\n  let index = 0;\n  const current_level = 1;\n  while (index < paren_string.length) {\n    const current_char = paren_string[index];\n    if (current_char === ')') {\n      current_level--;\n    } else if (current_char === '(') {\n      current_level++;\n    }\n    paren_depth.push(current_level);\n    index++;\n  }\n  return paren_depth;\n};\n\n/**\n  * @param {string} str\n  * @return {Array}\n  * @description Takes a string and returns an array of strings with all repeated characters removed.\n  * E.g. 'abcd' -> ['ab','cd']\n  */\nconst remove_duplicate_chars = (str) => {\n  const unique_chars = {};\n  const new_str = [];\n  for (let i = 0; i < str.length; i++) {\n    if (!unique_chars[str[i]]) {\n      new_str.push(str[i]);\n      unique_chars[str[i]] = true;\n    }\n  }\n  return new_str;\n};\n\n/**\n  * @param {string} str\n  * @return {string}\n  * @description Takes a string and returns a string with spaces instead of underscores.\n  * E.g. 'abcd' -> 'ab cd'\n  */\nconst to_camel_case = (str) => {\n  let result = '';\n  const words = str.split(' ');\n  for (let i = 0; i < words.length; i++) {\n    if (i === 0) {\n      result = words[i];\n    } else {\n      result = words[i] + words[i - 1].charAt(0).toUpperCase() + words[i - 1].slice(1);\n    }\n  }\n  return result;\n};\n\nexport default {\n  parse_nested_parens,\n  remove_duplicate_chars,\n  to_camel_case\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(x => x.indexOf(substring) >= 0);\n};\n\nexport default filter_by_substring;\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  const sum = [0]\n  const product = [1]\n  for (let i = 0; i < numbers.length; i += 1) {\n    sum[i] = sum[i - 1] + numbers[i]\n    product[i] = product[i - 1] * numbers[i]\n  }\n  return { sum, product }\n}\n\nmodule.exports = sum_product\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n  }\n  return [...new Set([...new Set(numbers.slice(0, i + 1))].concat(max))];\n};\n\nconsole.log(rolling_max([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longest_prefix = findLongestPrefix(string);\n  const longest_palindrome = longest_prefix.slice(0, longest_prefix.length - 1);\n  const string_prefix = string.slice(0, longest_palindrome.length);\n\n  return string_prefix + longest_palindrome.split('').reverse().join('');\n}\n\n/* Find the longest prefix of the supplied string that is a palindrome. */\nconst findLongestPrefix = (string) => {\n  let longest_prefix = '';\n\n  let string_prefix = '';\n\n  for (let i = 0; i < string.length; i++) {\n    if (is_palindrome(string.slice(i, i + 1))) {\n      if (longest_prefix.length < i) {\n        longest_prefix = string.slice(0, i);\n      }\n    }\n  }\n\n  return longest_prefix;\n}\n\nmodule.exports = {\n  makePalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n    const len = a.length;\n    if (len!== b.length) throw new Error(\"The length of inputs a and b are different\");\n    const result = [];\n    for (let i = 0; i < len; i++) {\n        result.push(a[i] ^ b[i]);\n    }\n    return result.join(\"\");\n};\n\n/*\n  Given two strings, a and b, return their XOR value.\n  >>> string_xor(\"abcd\", \"abce\")\n  'nq'\n  >>> string_xor(\"abc\", \"a\")\n  'abc'\n  */\nconst string_xor2 = (a, b) => {\n    const len = a.length;\n    if (len!== b.length) throw new Error(\"The length of inputs a and b are different\");\n    const result = [];\n    for (let i = 0; i < len; i++) {\n        result.push(parseInt(a[i]) ^ parseInt(b[i]));\n    }\n    return result.join(\"\");\n};\n\nconst test = () => {\n    console.log(\"Testing the string_xor function\");\n    console.log(string_xor(\"abcd\", \"abce\"));\n    console.log(string_xor(\"abc\", \"a\"));\n};\n\nconst main = () => {\n    console.log(\"Starting the string_xor function\");\n    console.log(string_xor(\"abcd\", \"abce\"));\n    console.log(string_xor(\"abc\", \"a\"));\n};\n\ntest();\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const max = (a, b) => {\n    if (a.length < b.length) return b;\n    else return a;\n  }\n  return strings.reduce(max, '');\n}\n\n// test\n\nconst longest = (strings) => {\n  const max = (a, b) => {\n    if (a.length > b.length) return a;\n    else return b;\n  }\n  return strings.reduce(max, '');\n}\n\n// END\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n    const i = a;\n    const j = b;\n    if (a === 0) {\n        return b;\n    }\n    if (b === 0) {\n        return a;\n    }\n    while (true) {\n        const i_1 = i % j;\n        const j_1 = j % i;\n        if (i_1 === 0 && j_1 === 0) {\n            return Math.max(i, j);\n        }\n        i = i_1;\n        j = j_1;\n    }\n};\n\nexport {\n    greatest_common_divisor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = []\n\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i; j < string.length; j++) {\n      prefixes.push(string.substring(i, j + 1))\n    }\n  }\n\n  return prefixes\n}\n\n/* Return true iff string has a valid prefix */\nconst is_prefix = (string) => {\n  return all_prefixes(string).indexOf(string)!== -1\n}\n\n/* Return true iff string has a valid suffix */\nconst is_suffix = (string) => {\n  return all_suffixes(string).indexOf(string)!== -1\n}\n\n/* Return true iff string has a valid prefix and suffix */\nconst is_valid = (string) => {\n  return is_prefix(string) && is_suffix(string)\n}\n\n/* Return true iff string is valid */\nconst is_valid_string = (string) => {\n  return is_valid(string) && (string.length > 1 ||!is_prefix(string) ||!is_suffix(string))\n}\n\n/* Return true iff string is not valid */\nconst is_invalid_string = (string) => {\n  return!is_valid_string(string)\n}\n\n/* Return true iff string is valid prefix */\nconst is_valid_prefix = (string) => {\n  return is_valid_string(string) && is_prefix(string)\n}\n\n/* Return true iff string is valid suffix */\nconst is_valid_suffix = (string) => {\n  return is_valid_string(string) && is_suffix(string)\n}\n\n/* Return true iff string is valid prefix and suffix */\nconst is_valid_string_with_suffix = (string) => {\n  return is_valid_prefix(string) && is_valid_suffix(string)\n}\n\n/* Return true iff string is not valid prefix */\nconst is_invalid_prefix = (string) => {\n  return!is_valid_prefix(string) && is_prefix(string)\n}\n\n/* Return true iff string is not valid suffix */\nconst is_invalid_suffix = (string) => {\n  return!is_valid_suffix(string) && is_suffix(string)\n}\n\n/* Return true iff string is not valid prefix or suffix */\nconst is_invalid_string_with_suffix = (string) => {\n  return!is_valid_prefix(string) &&!is_valid_suffix(string) && is_prefix(string)\n}\n\n/* Return true iff string is not valid prefix, suffix, or prefix and suffix */\nconst is_invalid_string_with_suffix_or_prefix = (string) => {\n  return!is_valid_prefix(string) &&!is_valid_suffix(string) && is_prefix(string)\n}\n\n/* Return true iff string is a valid suffix */\nconst is_valid_suffix_with_prefix = (string) => {\n  return is_valid_suffix(string) && is_valid_prefix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix */\nconst is_valid_suffix_with_suffix = (string) => {\n  return is_valid_suffix(string) && is_valid_suffix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix */\nconst is_valid_suffix_with_suffix_with_prefix = (string) => {\n  return is_valid_suffix_with_suffix(string) && is_valid_prefix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix and suffix */\nconst is_valid_suffix_with_suffix_with_suffix = (string) => {\n  return is_valid_suffix_with_suffix(string) && is_valid_suffix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix and suffix */\nconst is_valid_suffix_with_suffix_with_suffix_with_prefix = (string) => {\n  return is_valid_suffix_with_suffix_with_suffix(string) && is_valid_prefix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix and suffix */\nconst is_valid_suffix_with_suffix_with_suffix_with_prefix_and_suffix = (string) => {\n  return is_valid_suffix_with_suffix_with_suffix(string) && is_valid_prefix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix and suffix */\nconst is_valid_suffix_with_suffix_with_suffix_with_prefix_and_suffix_and_prefix = (string) => {\n  return is_valid_suffix_with_suffix_with_suffix_with_prefix(string) && is_valid_prefix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix and suffix */\nconst is_valid_suffix_with_suffix_with_suffix_with_prefix_and_suffix_and_prefix_and_suffix = (string) => {\n  return is_valid_suffix_with_suffix_with_suffix_with_prefix_and_suffix(string) && is_valid_prefix(string)\n}\n\n/* Return true iff string is a valid suffix with suffix and suffix */\nconst is_valid_suffix_with_suffix_with_suffix_with_prefix_and_suffix_and_prefix_and_suffix = (string) => {\n  return is_valid_suffix_with_suffix_with_suffix_with_prefix_and_suffix(string) && is_valid_prefix(string)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i);\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"a\")\n  '0'\n  >>> string_sequence(5, \"a\")\n  '0 a 1 b 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1 bc 2 c 3 4 5'\n  */\nconst string_sequence = (n, str) => {\n    const l = new Array(n+1);\n    for(let i=0; i<=n; i++) {\n        l[i] = String(i)+str;\n    }\n    return l.join(\" \");\n}\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, \"abc\")\n  '0'\n  >>> string_sequence(5, \"abc\")\n  '0 abc 1"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const char_map = new Map();\n  string.split('').forEach((char) => {\n    const upper = char.toUpperCase();\n    const lower = char.toLowerCase();\n    const char_index = upper === lower? 1 : 2;\n    char_map.set(char, char_index);\n  });\n  return char_map.size;\n};\n\nexport default count_distinct_characters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n    const music_strings = music_string.split(' ');\n    return music_strings.map((music_str) => {\n        const note_length = music_str.indexOf('|');\n        return (note_length === -1? 0 : parseInt(music_str.slice(0, note_length), 10));\n    });\n}\n\n/*\n  Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  note last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_two = (music_string) => {\n    const music_strings = music_string.split(' ');\n    const note_lengths = music_strings.map((music_str) => {\n        const note_length = music_str.indexOf('|');\n        return (note_length === -1? 0 : parseInt(music_str.slice(0, note_length), 10));\n    });\n\n    const note_lengths_unique = note_lengths.filter((el, i, arr) => i === arr.indexOf(el));\n\n    return note_lengths_unique.map((el, i) => (note_lengths.indexOf(el) + 1));\n}\n\nmodule.exports = {\n    parse_music,\n    parse_music_two\n};<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n    let n = string.length;\n    let s = substring.length;\n    let result = 0;\n    for (let i = 0; i < n; i++) {\n        if (string.charAt(i) === substring.charAt(0)) {\n            result += 1;\n        }\n    }\n    for (let i = 0; i < n - s; i++) {\n        if (string.charAt(i) === substring.charAt(s - 1)) {\n            result += 1;\n        }\n    }\n    for (let i = 1; i < n - s + 1; i++) {\n        if (string.charAt(i) === substring.charAt(s - 1)) {\n            if (string.charAt(i - 1) === substring.charAt(0)) {\n                result += 1;\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(how_many_times('aaaa', 'aa'));\nconsole.log(how_many_times('aaaaaaaaaa', 'aaaa'));\nconsole.log(how_many_times('aaaaaaaaaa', 'aaaaaaaa'));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const numbers_split = numbers.split(' ')\n  const sorted_numbers = []\n  numbers_split.forEach(n => sorted_numbers.push(n))\n  const sorted_numbers_array = sorted_numbers.sort((a, b) => {\n    const a_num = parseInt(a, 10)\n    const b_num = parseInt(b, 10)\n    if (a_num > b_num) {\n      return 1\n    } else if (a_num < b_num) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted_numbers_array.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sort_numbers('nine eight seven')\n  'eight seven nine'\n  */\nconst sort_numbers_reverse = (numbers) => {\n  const numbers_split = numbers.split(' ')\n  const sorted_numbers = []\n  numbers_split.forEach(n => sorted_numbers.push(n))\n  const sorted_numbers_array = sorted_numbers.sort((a, b) => {\n    const a_num = parseInt(a, 10)\n    const b_num = parseInt(b, 10)\n    if (a_num > b_num) {\n      return -1\n    } else if (a_num < b_num) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted_numbers_array.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sort_numbers('zero nine eight')\n  'eight nine zero'\n  */\nconst sort_numbers_reverse_reverse = (numbers) => {\n  const numbers_split = numbers.split(' ')\n  const sorted_numbers = []\n  numbers_split.forEach(n => sorted_numbers.push(n))\n  const sorted_numbers_array = sorted_numbers.sort((a, b) => {\n    const a_num = parseInt(a, 10)\n    const b_num = parseInt(b, 10)\n    if (a_num > b_num) {\n      return -1\n    } else if (a_num < b_num) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted_numbers_array.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('one two three')\n  'one two three'\n  */\nconst sort_numbers_reverse_reverse_reverse = (numbers) => {\n  const numbers_split = numbers.split(' ')\n  const sorted_numbers = []\n  numbers_split.forEach(n => sorted_numbers.push(n))\n  const sorted_numbers_array = sorted_numbers.sort((a, b) => {\n    const a_num = parseInt(a, 10)\n    const b_num = parseInt(b, 10)\n    if (a_num > b_num) {\n      return 1\n    } else if (a_num < b_num) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  return sorted_numbers_array.join(' ')\n}\n\n/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sort_numbers('nine eight seven')\n  'eight seven nine'\n  */\nconst sort_numbers_reverse_reverse_reverse = (numbers) => {\n  const numbers_split = numbers.split(' ')\n  const sorted_numbers = []\n  numbers_split.forEach(n => sorted_numbers.push(n))\n  const sorted_numbers_array = sorted_numbers.sort((a, b) => {\n    const a_num = parseInt(a, 10)\n    const b_num = parseInt(b, 10)\n    if (a_num > b_num) {\n      return -1\n    } else if (a_num < b_num) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n  return sorted_numbers_array.join(' ')\n}\n\nexport default sort_numbers\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const [n1, n2] = numbers;\n  const [d1, d2] = [Math.abs(n1 - n2), Math.abs(n2 - n1)];\n  if (d1 < d2) {\n    return [n1, n2];\n  } else {\n    return [n2, n1];\n  }\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst find_closest_elements_2 = (numbers) => {\n  const [n1, n2] = numbers;\n  const [d1, d2] = [Math.abs(n1 - n2), Math.abs(n2 - n1)];\n  if (d1 < d2) {\n    return [n1, n2];\n  } else {\n    return [n2, n1];\n  }\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst find_closest_elements_3 = (numbers) => {\n  const [n1, n2] = numbers;\n  const [d1, d2] = [Math.abs(n1 - n2), Math.abs(n2 - n1)];\n  if (d1 < d2) {\n    return [n1, n2];\n  } else {\n    return [n2, n1];\n  }\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  */\nconst find_closest_elements_4 = (numbers) => {\n  const [n1, n2] = numbers;\n  const [d1, d2] = [Math.abs(n1 - n2), Math.abs(n2 - n1)];\n  if (d1 < d2) {\n    return [n1, n2];\n  } else {\n    return [n2, n1];\n  }\n};\n\nconst test_find_closest_elements = () => {\n  const numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2];\n  console.log('find_closest_elements(numbers) =', find_closest_elements(numbers));\n  console.log('find_closest_elements(numbers) =', find_closest_elements_2(numbers));\n  console.log('find_closest_elements(numbers) =', find_closest_elements_3(numbers));\n  console.log('find_closest_elements(numbers) =', find_closest_elements_4(numbers));\n};\n\ntest_find_closest_elements();\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const rescaled = [];\n  for (const number of numbers) {\n    rescaled.push(min + number / (max - min) * (1 - min));\n  }\n  return rescaled;\n};\n\n/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the largest number will become 1 and the smallest will become 0\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit_inverse = (numbers) => {\n  const min = Math.min(...numbers);\n  const max = Math.max(...numbers);\n  const rescaled = [];\n  for (const number of numbers) {\n    rescaled.push(max - number / (max - min) * (max - min));\n  }\n  return rescaled;\n};\n\nexport default {\n  rescale_to_unit,\n  rescale_to_unit_inverse\n};\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter((value) => {\n    return is_integer(value);\n  });\n};\n\n/**\n  * Returns true if the given value is a number\n  * @param {*} value The value to check\n  * @return {boolean} Returns true if the given value is a number\n  */\nconst is_number = (value) => {\n  return value && typeof value === 'number';\n};\n\n/**\n  * Returns true if the given value is a boolean\n  * @param {*} value The value to check\n  * @return {boolean} Returns true if the given value is a boolean\n  */\nconst is_boolean = (value) => {\n  return value && typeof value === 'boolean';\n};\n\n/**\n  * Returns true if the given value is a string\n  * @param {*} value The value to check\n  * @return {boolean} Returns true if the given value is a string\n  */\nconst is_string = (value) => {\n  return value && typeof value ==='string';\n};\n\n/**\n  * Returns true if the given value is a function\n  * @param {*} value The value to check\n  * @return {boolean} Returns true if the given value is a function\n  */\nconst is_function = (value) => {\n  return value && typeof value === 'function';\n};\n\n/**\n  * Returns true if the given value is an object\n  * @param {*} value The value to check\n  * @return {boolean} Returns true if the given value is an object\n  */\nconst is_object = (value) => {\n  return value && typeof value === 'object';\n};\n\n/**\n  * Returns true if the given value is an array\n  * @param {*} value The value to check\n  * @return {boolean} Returns true if the given value is an array\n  */\nconst is_array = (value) => {\n  return value && Array.isArray(value);\n};\n\n/**\n  * Returns true if the given value is a number\n  * @param {*} value The value to check\n  * @return {boolean} Returns true if the given value is a number\n  */\nconst is_integer = (value) => {\n  return value && is_number(value) && (value % 1 === 0);\n};\n\nmodule.exports = {\n  filter_integers,\n  is_boolean,\n  is_string,\n  is_function,\n  is_object,\n  is_array,\n  is_number,\n  is_integer\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/* Return substring of given string\n  >>> substr(0, 0, 'abc')\n  ''\n  >>> substr(0, 3, 'abc')\n  'abc'\n  >>> substr(0, 3, 'abcdef')\n  'abc'\n  >>> substr(3, 3, 'abcdef')\n  'def'\n  >>> substr(3, 2, 'abcdef')\n  'cde'\n  >>> substr(3, 0, 'abcdef')\n  'abcdef'\n  >>> substr(3, -1, 'abcdef')\n  'cdef'\n  >>> substr(-1, 3, 'abcdef')\n  'cdef'\n  >>> substr(-1, 3, 'abc')\n  ''\n  >>> substr(-1, 2, 'abc')\n  'ab'\n  >>> substr(-1, 0, 'abc')\n  ''\n  */\nconst substr = (start, length, string) => {\n  if (start < 0) {\n    return ''\n  }\n\n  if (length < 0) {\n    return string\n  }\n\n  if (start > strlen(string)) {\n    return ''\n  }\n\n  if (start + length > strlen(string)) {\n    return string.slice(start)\n  }\n\n  return string.slice(start, start + length)\n}\n\n/* Return a copy of given string\n  >>> copy('')\n  ''\n  >>> copy('abc')\n  'abc'\n  >>> copy('abcdef')\n  'abcdef'\n  */\nconst copy = (string) => {\n  return string\n}\n\n/* Replace occurrences of substring\n  >>> replace('abc', 'a', 'b')\n  'bc'\n  >>> replace('abc', 'a', 'b', 0)\n  'bc'\n  >>> replace('abc', 'a', 'b', 1)\n  'bc'\n  >>> replace('abc', 'a', 'b', 2)\n  'b'\n  >>> replace('abc', 'a', 'b', 3)\n  'b'\n  >>> replace('abc', 'a', 'b', 4)\n  'b'\n  >>> replace('abc', 'a', 'b', 5)\n  'b'\n  >>> replace('abc', 'a', 'b', -1)\n  'b'\n  >>> replace('abc', 'a', 'b', -2)\n  'b'\n  >>> replace('abc', 'a', 'b', -3)\n  'b'\n  >>> replace('abc', 'a', 'b', -4)\n  'b'\n  >>> replace('abc', 'a', 'b', -5)\n  'b'\n  */\nconst replace = (string, find, replace, count) => {\n  const start = string.indexOf(find)\n  const end = start + find.length\n  const newString = string.slice(0, start) + replace + string.slice(end)\n  return newString\n}\n\n/* Return a substring from the beginning of the string\n  >>> start_of('abcdefg')\n  'abcdef'\n  >>> start_of('abcdefg', 3)\n  'abc'\n  >>> start_of('abcdefg', -3)\n  'abcdef'\n  >>> start_of('abcdefg', 5)\n  'abcdef'\n  >>> start_of('abcdefg', -5)\n  'abcdef'\n  >>> start_of('abcdefg', 10)\n  'abcdefg'\n  >>> start_of('abcdefg', -10)\n  'abcdefg'\n  */\nconst start_of = (string, length) => {\n  return string.slice(0, length)\n}\n\n/* Return a substring from the end of the string\n  >>> end_of('abcdefg')\n  'g'\n  >>> end_of('abcdefg', 3)\n  'g'\n  >>> end_of('abcdefg', -3)\n  'f'\n  >>> end_of('abcdefg', 5)\n  'f'\n  >>> end_of('abcdefg', -5)\n  'f'\n  >>> end_of('abcdefg', 10)\n  'abcdefg'\n  >>> end_of('abcdefg', -10)\n  'abcdefg'\n  */\nconst end_of = (string, length) => {\n  return string.slice(length + 1)\n}\n\n/* Return a substring of the given string\n  >>> substring('abcdefg', 3)\n  'abc'\n  >>> substring('abcdefg', -3)\n  'def'\n  >>> substring('abcdefg', 5)\n  'abcde'\n  >>> substring('abcdefg', -5)\n  'abcdef'\n  >>> substring('abcdefg', 10)\n  'abcdefg'\n  >>> substring('abcdefg', -10)\n  'abcdefg'\n  */\nconst substring = (string, length) => {\n  if (length < 0) {\n    return string\n  }\n\n  if (length > strlen(string)) {\n    return ''\n  }\n\n  return string.slice(0, length)\n}\n\n/* Return a string which is the concatenation of the given strings\n  >>> concat('a', 'b', 'c')\n  'abc'\n  >>> concat('a', 'b')\n  'ab'\n  >>> concat('a')\n  'a'\n  */\nconst concat = (...strings) => {\n  return strings.join('')\n}\n\n/* Return a copy of the given string\n  >>> copy_of('abc')\n  'abc'\n  >>> copy_of('abcdef')\n  'abcdef'\n  */\nconst copy_of = (string) => {\n  return string\n}\n\n/* Return a string which is the string reversed\n  >>> reverse('abcdef')\n  'fedcba'\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('')\n}\n\n/* Return a string which is the string reversed\n  >>> reverse_of('abcdef')\n  'fedcba'\n  */\nconst reverse_of = (string) => {\n  return string.split('').reverse().join("}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  if(n === 0) {\n    return 0;\n  }\n\n  for(let i = 2; i <= n; i++) {\n    if(n % i === 0) {\n      return i;\n    }\n  }\n};\n\nconsole.log(largest_divisor(15));\n\n/*\n  For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_recursive(15)\n  5\n  */\nconst largest_divisor_recursive = (n) => {\n  if(n === 0) {\n    return 0;\n  }\n\n  return largest_divisor_recursive(n - largest_divisor(n)) + largest_divisor(n);\n};\n\nconsole.log(largest_divisor_recursive(15));<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  var factors = [1];\n\n  for (var i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      var t = n / i;\n      var j = 1;\n      while (j < factors.length && t % factors[j]!== 0) {\n        j++;\n      }\n      factors.push(j);\n    }\n  }\n\n  return factors;\n}\n\nmodule.exports = {\n  factorize\n}<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  if (!numbers) return []\n\n  const unique_numbers = []\n  let last_index = 0\n  for (let index = 0; index < numbers.length; index++) {\n    if (numbers[index]!== numbers[last_index]) {\n      unique_numbers.push(numbers[index])\n      last_index = index\n    }\n  }\n  return unique_numbers\n}\n\n/*\n  Given a string, return the string with the first letter capitalized.\n  >>> capitalize('hello')\n  'Hello'\n  >>> capitalize('world')\n  'World'\n  >>> capitalize('hello world')\n  'Hello World'\n  */\nconst capitalize = (string) => {\n  if (!string) return string\n\n  return string[0].toUpperCase() + string.slice(1)\n}\n\n/*\n  Given a string, return the string with the first letter lowercased.\n  >>> lowercase('Hello')\n  'hello'\n  >>> lowercase('World')\n  'world'\n  >>> lowercase('Hello World')\n  'hello world'\n  */\nconst lowercase = (string) => {\n  if (!string) return string\n\n  return string[0].toLowerCase() + string.slice(1)\n}\n\n/*\n  Given an array of strings, return an array of strings where each string is\n  capitalized.\n  >>> capitalize_array(['hello', 'world', 'hello world'])\n  ['Hello', 'World', 'Hello World']\n  */\nconst capitalize_array = (strings) => {\n  if (!strings) return strings\n\n  return strings.map(capitalize)\n}\n\n/*\n  Given an array of strings, return an array of strings where each string is\n  lowercased.\n  >>> lowercase_array(['Hello', 'World', 'Hello World'])\n  ['hello', 'world', 'hello world']\n  */\nconst lowercase_array = (strings) => {\n  if (!strings) return strings\n\n  return strings.map(lowercase)\n}\n\n/*\n  Given an array of strings, return an array of strings where each string is\n  capitalized and the first letter of each string is uppercased.\n  >>> capitalize_and_uppercase_array(['hello', 'world', 'hello world'])\n  ['Hello', 'World', 'Hello World']\n  */\nconst capitalize_and_uppercase_array = (strings) => {\n  if (!strings) return strings\n\n  return strings.map(capitalize_and_uppercase)\n}\n\n/*\n  Given an array of strings, return an array of strings where each string is\n  capitalized and the first letter of each string is lowercased.\n  >>> lowercase_and_capitalize_array(['hello', 'world', 'hello world'])\n  ['hello', 'world', 'hello world']\n  */\nconst lowercase_and_capitalize_array = (strings) => {\n  if (!strings) return strings\n\n  return strings.map(lowercase_and_capitalize)\n}\n\n/*\n  Given a string, return the number of times the string appears in the string.\n  >>> count_occurrences('hello world', 'hello')\n  2\n  >>> count_occurrences('hello world', 'world')\n  1\n  >>> count_occurrences('hello world', 'world hello')\n  3\n  */\nconst count_occurrences = (string, substring) => {\n  if (!string) return 0\n  if (!substring) return 1\n\n  return string.split(substring).length - 1\n}\n\n/*\n  Given a string, return the index of the first occurrence of the substring in\n  the string.\n  >>> index_of_first_occurrence('hello world', 'hello')\n  0\n  >>> index_of_first_occurrence('hello world', 'world')\n  1\n  >>> index_of_first_occurrence('hello world', 'world hello')\n  5\n  */\nconst index_of_first_occurrence = (string, substring) => {\n  if (!string) return -1\n  if (!substring) return 0\n\n  return string.indexOf(substring)\n}\n\n/*\n  Given a string, return the index of the last occurrence of the substring in\n  the string.\n  >>> index_of_last_occurrence('hello world', 'hello')\n  4\n  >>> index_of_last_occurrence('hello world', 'world')\n  7\n  >>> index_of_last_occurrence('hello world', 'world hello')\n  10\n  */\nconst index_of_last_occurrence = (string, substring) => {\n  if (!string) return -1\n  if (!substring) return 0\n\n  return string.lastIndexOf(substring)\n}\n\n/*\n  Given a string, return the number of times the substring occurs in the\n  string.\n  >>> occurrences_of_substring('hello world', 'hello')\n  2\n  >>> occurrences_of_substring('hello world', 'world')\n  1\n  >>> occurrences_of_substring('hello world', 'world hello')\n  3\n  */\nconst occurrences_of_substring = (string, substring) => {\n  if (!string) return 0\n  if (!substring) return 1\n\n  return string.split(substring).length\n}\n\nmodule.exports = {\n  capitalize,\n  capitalize_array,\n  capitalize_and_uppercase_array,\n  lowercase_array,\n  lowercase_and_capitalize_array,\n  remove_duplicates,\n  count_occurrences,\n  index_of_first_occurrence,\n  index_of_last_occurrence,\n  occurrences_of_substring\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  const result = string.toLowerCase()\n   .replace(/[a-z]/g, (letter) => {\n      return letter.toUpperCase()\n    })\n   .replace(/[A-Z]/g, (letter) => {\n      return letter.toLowerCase()\n    })\n   .replace(/\\s/g, '')\n  return result\n}\n\n/*\n  The following function takes a string, and returns a new string with each\n  lowercase letter in the string replaced by its uppercase counterpart.\n  >>> to_upper_case('Hello')\n  'HELLO'\n  */\nconst to_upper_case = (string) => {\n  const result = string.toUpperCase()\n   .replace(/[a-z]/g, (letter) => {\n      return letter.toUpperCase()\n    })\n   .replace(/[A-Z]/g, (letter) => {\n      return letter.toLowerCase()\n    })\n   .replace(/\\s/g, '')\n  return result\n}\n\n/*\n  The following function takes a string, and returns a new string with each\n  uppercase letter in the string replaced by its lowercase counterpart.\n  >>> to_lower_case('HELLO')\n  'hello'\n  */\nconst to_lower_case = (string) => {\n  const result = string.toLowerCase()\n   .replace(/[A-Z]/g, (letter) => {\n      return letter.toUpperCase()\n    })\n   .replace(/[a-z]/g, (letter) => {\n      return letter.toLowerCase()\n    })\n   .replace(/\\s/g, '')\n  return result\n}\n\n/*\n  The following function takes a string, and returns a new string with each\n  word in the string replaced by a space.\n  >>> to_space_case('Hello')\n  'Hello'\n  >>> to_space_case('HELLO')\n  'HELLO'\n  >>> to_space_case('hello')\n  'hello'\n  >>> to_space_case('hello ')\n  'hello '\n  >>> to_space_case('hello  ')\n  'hello  '\n  >>> to_space_case('hello world')\n  'hello world'\n  >>> to_space_case('Hello World')\n  'Hello World'\n  >>> to_space_case('Hello world')\n  'Hello world'\n  >>> to_space_case('Hello\\nWorld')\n  'Hello\\nWorld'\n  */\nconst to_space_case = (string) => {\n  const result = string.toUpperCase()\n   .replace(/\\s+/g,'')\n   .replace(/[A-Z]/g, (letter) => {\n      return letter.toUpperCase()\n    })\n   .replace(/[a-z]/g, (letter) => {\n      return letter.toLowerCase()\n    })\n   .replace(/[0-9]/g, (digit) => {\n      return digit.toUpperCase()\n    })\n   .replace(/\\s/g, '')\n  return result\n}\n\nmodule.exports = {\n  flip_case,\n  to_upper_case,\n  to_lower_case,\n  to_space_case\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  let i, len = strings.length, result = '';\n  for (i = 0; i < len; i++) {\n    result += strings[i];\n  }\n  return result;\n};\n\n/*\n  `toString` is a special method,\n  that returns `null` or `undefined` if given argument is `null` or `undefined`.\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(null)\n  >>> concatenate(undefined)\n  */\nconst toString = (val) => {\n  if (val === null || val === undefined) {\n    return val;\n  }\n  return val.toString();\n};\n\n/*\n  `toString` is a special method,\n  that returns `null` or `undefined` if given argument is `null` or `undefined`.\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(null)\n  >>> concatenate(undefined)\n  */\nconst toString2 = (val) => {\n  if (val === null || val === undefined) {\n    return val;\n  }\n  return val.toString();\n};\n\n/*\n  `valueOf` is a special method,\n  that returns `null` or `undefined` if given argument is `null` or `undefined`.\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(null)\n  >>> concatenate(undefined)\n  */\nconst valueOf = (val) => {\n  if (val === null || val === undefined) {\n    return val;\n  }\n  return val.valueOf();\n};\n\n/*\n  `valueOf` is a special method,\n  that returns `null` or `undefined` if given argument is `null` or `undefined`.\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  >>> concatenate(null)\n  >>> concatenate(undefined)\n  */\nconst valueOf2 = (val) => {\n  if (val === null || val === undefined) {\n    return val;\n  }\n  return val.valueOf();\n};\n\nmodule.exports = {\n  concatenate,\n  toString,\n  toString2,\n  valueOf,\n  valueOf2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  const output = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].startsWith(prefix)) {\n      output.push(strings[i])\n    }\n  }\n  return output\n}\n\n/**\n  * Filter an input list of strings only for ones that contain a given substring.\n  * @param {string} strings - The input list of strings.\n  * @param {string} substring - The string to search for.\n  * @returns {string[]} - The filtered list of strings.\n  * @example\n  * filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'cde')\n  * // ['abc', 'bcd', 'cde', 'array']\n  * filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'bcd')\n  * // ['abc', 'bcd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const output = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) >= 0) {\n      output.push(strings[i])\n    }\n  }\n  return output\n}\n\n/**\n  * Filter an input list of strings only for ones that don't contain a given substring.\n  * @param {string} strings - The input list of strings.\n  * @param {string} substring - The string to search for.\n  * @returns {string[]} - The filtered list of strings.\n  * @example\n  * filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'cde')\n  * // ['abc', 'bcd', 'cde', 'array']\n  * filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'bcd')\n  * // ['abc', 'bcd', 'array']\n  */\nconst filter_by_substring_not = (strings, substring) => {\n  const output = []\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(substring) < 0) {\n      output.push(strings[i])\n    }\n  }\n  return output\n}\n\n/**\n  * Trim a string, removing leading and trailing whitespace.\n  * @param {string} string - The string to trim.\n  * @returns {string} - The trimmed string.\n  * @example\n  * trim_string(' \\t\\r\\n \\t\\r\\n\\t\\r\\n')\n  * //'\\t\\r\\n \\t\\r\\n\\t\\r\\n'\n  */\nconst trim_string = (string) => {\n  return string.trim()\n}\n\n/**\n  * Trim an array of strings, removing leading and trailing whitespace.\n  * @param {string[]} strings - The array of strings to trim.\n  * @returns {string[]} - The trimmed array of strings.\n  * @example\n  * trim_array([' \\t\\r\\n \\t\\r\\n\\t\\r\\n'])\n  * // [' \\t\\r\\n \\t\\r\\n\\t\\r\\n']\n  */\nconst trim_array = (strings) => {\n  const output = []\n  for (let i = 0; i < strings.length; i++) {\n    output.push(strings[i].trim())\n  }\n  return output\n}\n\n/**\n  * Get the length of an array of strings.\n  * @param {string[]} strings - The array of strings.\n  * @returns {number} - The length of the array.\n  * @example\n  * get_array_length(['abc', 'def'])\n  * // 2\n  */\nconst get_array_length = (strings) => {\n  return strings.length\n}\n\nmodule.exports = {\n  filter_by_prefix,\n  filter_by_substring,\n  filter_by_substring_not,\n  filter_by_length,\n  filter_by_prefix_not,\n  filter_by_length_not,\n  filter_by_length_not_empty,\n  trim_string,\n  trim_array,\n  get_array_length,\n  get_random_string,\n  get_random_string_length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter((x) => x > 0);\n};\n\n/*\n  Returns the largest number in the list.\n  >>> get_largest([2, 3, 4])\n  4\n  >>> get_largest([2, 3, 4, 5])\n  5\n  >>> get_largest([2, 3, 4, 5, 6])\n  6\n  */\nconst get_largest = (l) => {\n  return l.reduce((x, y) => x > y? x : y);\n};\n\n/*\n  Returns the smallest number in the list.\n  >>> get_smallest([2, 3, 4, 5])\n  2\n  >>> get_smallest([2, 3, 4])\n  2\n  >>> get_smallest([2, 3, 4, 5, 6])\n  2\n  */\nconst get_smallest = (l) => {\n  return l.reduce((x, y) => x < y? x : y);\n};\n\n/*\n  Returns the sum of the numbers in the list.\n  >>> get_sum([2, 3, 4, 5])\n  9\n  >>> get_sum([2, 3, 4, 5, 6])\n  12\n  >>> get_sum([2, 3, 4, 5, 6, 7])\n  21\n  >>> get_sum([-2, -3, -4, -5])\n  -10\n  >>> get_sum([-2, -3, -4, -5, -6])\n  -15\n  >>> get_sum([-2, -3, -4, -5, -6, -7])\n  -24\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14])\n  -45\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  -66\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  -81\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  -102\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  -117\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  -132\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  -147\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  -162\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  -177\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  -192\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  -207\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  -222\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  -237\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  -252\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  -267\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  -282\n  >>> get_sum([-2, -3, -4, -5, -6, -7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  -307\n  >>> get_sum([-2, -3, -4, -5, -"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  return n > 1 && new RegExp(/^\\d+$/).test(n) &&!(n % 2) &&!(n % 3) &&!(n % 5) &&!(n % 7) &&!(n % 11) &&!(n % 13) &&!(n % 17) &&!(n % 19) &&!(n % 23) &&!(n % 29) &&!(n % 31) &&!(n % 37) &&!(n % 41) &&!(n % 43) &&!(n % 47) &&!(n % 53) &&!(n % 59) &&!(n % 61) &&!(n % 67) &&!(n % 71) &&!(n % 73) &&!(n % 79) &&!(n % 83) &&!(n % 89) &&!(n % 97);\n}\n\nmodule.exports = {\n  is_prime,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  if (len % 2 === 0) {\n    throw new Error('xs must have even number of coefficients');\n  }\n  const max = Math.max(xs);\n  let x = -1;\n  for (let i = len; i >= 2; i -= 2) {\n    if (xs[i - 1] === 0 && xs[i] === max) {\n      x = i;\n      break;\n    }\n  }\n  return x;\n}\n\n/*\n  Calculate the derivative of a polynomial.\n  >>> round(derivative([1, 2, 3]), 2) # 1 + 2x + 3x^2\n  2.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  2.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 3) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 4) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 5) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 6) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 7) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 8) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 9) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 10) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 11) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 12) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 13) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 14) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 15) # 1 + 2x + 3x^2\n  1.0\n  >>> round(derivative([1, 2]), 2) # 1 + 2x\n  1.0\n  >>> round(derivative([1]), 1) # 1\n  1.0\n  >>> round(derivative([1, 2, 3]), 16) # 1 + 2x + 3x^2\n  1.0\n  >>> round("}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const l2 = [...l];\n  const r = [];\n  for (let i = 0; i < l2.length; i++) {\n    if (i % 3 === 0) {\n      r.push(l2[i]);\n    }\n  }\n  r.sort((a, b) => a - b);\n  return r;\n};\n\nexport default sort_third;<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.reduce((r, n) => r.indexOf(n) === -1? r.concat(n) : r, [])\n}\n\n// Unique elements in an array\nconst uniqueArr = (arr) => {\n  return unique(arr.filter((a) =>!isNaN(a)))\n}\n\n// Unique elements in a set\nconst uniqueSet = (set) => {\n  return unique(set.values())\n}\n\n// Get the number of unique elements in a set\nconst countUniqueSet = (set) => {\n  return set.size\n}\n\n// Get the number of unique elements in an array\nconst countUniqueArr = (arr) => {\n  return arr.length\n}\n\n// Get the number of unique elements in a list\nconst countUnique = (l) => {\n  return l.length\n}\n\n// Find the maximum value in an array\nconst max = (a) => {\n  return a.reduce((r, n) => n > r? n : r)\n}\n\n// Find the maximum value in a set\nconst maxSet = (set) => {\n  return set.reduce((r, n) => n > r? n : r)\n}\n\n// Find the minimum value in an array\nconst min = (a) => {\n  return a.reduce((r, n) => n < r? n : r)\n}\n\n// Find the minimum value in a set\nconst minSet = (set) => {\n  return set.reduce((r, n) => n < r? n : r)\n}\n\n// Find the sum of all elements in an array\nconst sum = (a) => {\n  return a.reduce((r, n) => r + n)\n}\n\n// Find the sum of all elements in a set\nconst sumSet = (set) => {\n  return set.reduce((r, n) => r + n)\n}\n\n// Find the average value in an array\nconst avg = (a) => {\n  return sum(a) / a.length\n}\n\n// Find the average value in a set\nconst avgSet = (set) => {\n  return sumSet(set) / set.size\n}\n\n// Find the median value in an array\nconst median = (a) => {\n  const sorted = a.sort();\n  const mid = Math.floor(a.length / 2);\n  return sorted[mid]\n}\n\n// Find the median value in a set\nconst medianSet = (set) => {\n  return median(set.values())\n}\n\n// Find the mode in an array\nconst mode = (a) => {\n  return a.reduce((r, n) => {\n    if (n > r) {\n      r = n\n    }\n    return r\n  })\n}\n\n// Find the mode in a set\nconst modeSet = (set) => {\n  return set.reduce((r, n) => {\n    if (n > r) {\n      r = n\n    }\n    return r\n  })\n}\n\n// Find the mode in a list\nconst modeList = (l) => {\n  return l.reduce((r, n) => {\n    if (n > r) {\n      r = n\n    }\n    return r\n  })\n}\n\n// Find the mode in an array\nconst modeArr = (arr) => {\n  return arr.reduce((r, n) => {\n    if (n > r) {\n      r = n\n    }\n    return r\n  })\n}\n\n// Find the mode in a set\nconst modeSetArr = (set) => {\n  return set.reduce((r, n) => {\n    if (n > r) {\n      r = n\n    }\n    return r\n  })\n}\n\n// Find the mode in a list\nconst modeListArr = (l) => {\n  return l.reduce((r, n) => {\n    if (n > r) {\n      r = n\n    }\n    return r\n  })\n}\n\n// Find the mode in an array\nconst modeListArrArr = (l) => {\n  return l.reduce((r, n) => {\n    if (n > r) {\n      r = n\n    }\n    return r\n  })\n}\n\n// Calculate the variance of an array\nconst var = (a) => {\n  const sum = sum(a)\n  const avg = avg(a)\n  return sum / a.length - avg * avg\n}\n\n// Calculate the variance of a set\nconst varSet = (set) => {\n  const sum = sumSet(set)\n  const avg = avgSet(set)\n  return sum / set.size - avg * avg\n}\n\n// Calculate the variance of a list\nconst varList = (l) => {\n  const sum = sumList(l)\n  const avg = avgList(l)\n  return sum / l.length - avg * avg\n}\n\n// Calculate the variance of an array\nconst varArr = (arr) => {\n  const sum = sumArr(arr)\n  const avg = avgArr(arr)\n  return sum / arr.length - avg * avg\n}\n\n// Calculate the variance of a set\nconst varSetArr = (set) => {\n  const sum = sumSetArr(set)\n  const avg = avgSetArr(set)\n  return sum / set.size - avg * avg\n}\n\n// Calculate the variance of a list\nconst varListArr = (l) => {\n  const sum = sumListArr(l)\n  const avg = avgListArr(l)\n  return sum / l.length - avg * avg\n}\n\n// Calculate the variance of an array\nconst varListArrArr = (l) => {\n  const sum = sumListArrArr(l)\n  const avg = avgListArrArr(l)\n  return sum / l.length - avg * avg\n}\n\n// Find the range of an array\nconst range = (a) => {\n  const min = min(a)\n  const max = max(a)\n  return max - min\n}\n\n// Find the range of a set\nconst"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n  let min = l[0]\n  let index = 0\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > min) {\n      min = l[i]\n      index = i\n    }\n  }\n  return l[index]\n}\n\n/*Return minimum element in the list.\n  >>> min_element([1, 2, 3])\n  1\n  >>> min_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst min_element = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n  let min = l[0]\n  let index = 0\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i]\n      index = i\n    }\n  }\n  return l[index]\n}\n\n/*Return the average of the list elements.\n  >>> sum([1, 2, 3])\n  3\n  >>> sum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -6\n  >>> sum([])\n  0\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  16\n  */\nconst sum = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum / l.length\n}\n\n/*Return the product of the list elements.\n  >>> prod([1, 2, 3])\n  6\n  >>> prod([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -360\n  >>> prod([])\n  1\n  >>> prod([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  676500\n  */\nconst prod = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n  let prod = 1\n  for (let i = 0; i < l.length; i++) {\n    prod *= l[i]\n  }\n  return prod\n}\n\n/*Return the median of the list elements.\n  >>> median([1, 2, 3])\n  2\n  >>> median([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  3\n  >>> median([])\n  NaN\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  4.5\n  */\nconst median = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n  let arr = []\n  for (let i = 0; i < l.length; i++) {\n    arr.push(l[i])\n  }\n  let median = arr[Math.floor((l.length - 1) / 2)]\n  return median\n}\n\n/*Return the sum of the squares of the list elements.\n  >>> sum_of_squares([1, 2, 3])\n  15\n  >>> sum_of_squares([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -18\n  >>> sum_of_squares([])\n  0\n  >>> sum_of_squares([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  2825\n  */\nconst sum_of_squares = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i], 2)\n  }\n  return sum\n}\n\n/*Return the sum of the cubes of the list elements.\n  >>> sum_of_cubes([1, 2, 3])\n  9\n  >>> sum_of_cubes([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -36\n  >>> sum_of_cubes([])\n  0\n  >>> sum_of_cubes([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  5128\n  */\nconst sum_of_cubes = (l) => {\n  if (l.length === 0) {\n    throw new Error('list is empty')\n  }\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i], 3)\n  }\n  return sum\n}\n\nmodule.exports = {\n  min_element,\n  max_element,\n  sum,\n  prod,\n  median,\n  sum_of_squares,\n  sum_of_cubes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let fizz = 0, buzz = 0;\n  while (n >= 3) {\n    if (n % 3 === 0 && n % 5 === 0) {\n      fizz += 1;\n    }\n    if (n % 5 === 0) {\n      buzz += 1;\n    }\n    n -= 1;\n  }\n  return fizz + buzz;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz_solution = (n) => {\n  let fizz = 0, buzz = 0;\n  while (n >= 3) {\n    if (n % 3 === 0 && n % 5 === 0) {\n      fizz += 1;\n    }\n    if (n % 5 === 0) {\n      buzz += 1;\n    }\n    n -= 1;\n  }\n  return fizz + buzz;\n};\n\nmodule.exports = {\n  fizz_buzz: fizz_buzz,\n  fizz_buzz_solution: fizz_buzz_solution\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const sorted = l.slice();\n  let i = 0;\n  let j = sorted.length - 1;\n  while (i <= j) {\n    if (i % 2 === 0) {\n      if (sorted[i] > sorted[j]) {\n        sorted[i] = sorted[j--];\n        sorted[j] = sorted[i++];\n      } else {\n        j--;\n      }\n    } else {\n      if (sorted[i] < sorted[j]) {\n        sorted[i] = sorted[j--];\n        sorted[j] = sorted[i++];\n      } else {\n        j--;\n      }\n    }\n  }\n  return sorted;\n};\n\nmodule.exports = sort_even;\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  Encodes a string into base64.\n  */\nconst encodeBase64 = (s) => {\n  return window.btoa(encodeURIComponent(s));\n}\n\n/*\n  Decodes a base64 string into a string.\n  */\nconst decodeBase64 = (s) => {\n  return decodeURIComponent(atob(s));\n}\n\n/*\n  Encodes a string into base64url.\n  */\nconst encodeBase64Url = (s) => {\n  return window.btoa(encodeURIComponent(s));\n}\n\n/*\n  Decodes a base64url string into a string.\n  */\nconst decodeBase64Url = (s) => {\n  return decodeURIComponent(atob(s));\n}\n\n/*\n  Encodes a string into base64url, using url-safe encoding.\n  */\nconst encodeBase64UrlSafe = (s) => {\n  return window.btoa(encodeURIComponent(s));\n}\n\n/*\n  Decodes a base64url string into a string, using url-safe encoding.\n  */\nconst decodeBase64UrlSafe = (s) => {\n  return decodeURIComponent(atob(s));\n}\n\n/*\n  Encodes a string into hexadecimal.\n  */\nconst encodeHex = (s) => {\n  return window.btoa(s.replace(/[^0-9a-f]/gi, (ch) => {\n    return '%' + ('00' + ch.charCodeAt(0).toString(16)).slice(-2);\n  }));\n}\n\n/*\n  Decodes a hexadecimal string into a string.\n  */\nconst decodeHex = (s) => {\n  return window.atob(s.replace(/%[0-9A-F]{2}/gi, (ch) => {\n    return String.fromCharCode(parseInt(ch.slice(1), 16));\n  }));\n}\n\n/*\n  Returns a random string of length `length`.\n  */\nconst random = (length = 8) => {\n  var result = '';\n  for (let i = 0; i < length; i++) {\n    result += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return result;\n}\n\n/*\n  Returns a random string of length `length` with all characters in `chars`.\n  */\nconst randomWithCharacters = (length = 8, chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  var result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n}\n\n/*\n  Returns a random string of length `length` with all characters in `chars` that\n  are not in `exclude`.\n  */\nconst randomWithCharactersExcluding = (length = 8, chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', exclude = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  var result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  for (let i = 0; i < exclude.length; i++) {\n    result += exclude[Math.floor(Math.random() * exclude.length)];\n  }\n  return result;\n}\n\n/*\n  Returns a random string of length `length` with all characters in `chars` that\n  are not in `exclude`.\n  */\nconst randomWithCharactersExcludingAll = (length = 8, chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ', exclude = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ') => {\n  var result = '';\n  for (let i = 0; i < length; i++) {\n    result += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  let i = 1, prime = 2;\n  while (prime <= n) {\n    if (prime === n && n % 2 === 0) {\n      break;\n    } else if (prime * prime > n) {\n      break;\n    }\n    prime += prime;\n  }\n  return prime;\n};\n\nexport { prime_fib };\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n    return!(l.filter((x) => x < 0).length > 0);\n};\n\nexport default triples_sum_to_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n    return (cars => {\n        let car = cars[0];\n        for (let i = 1; i < n; i++) {\n            car = cars[i];\n            for (let j = i; j < n; j++) {\n                if (car.direction === 'left') {\n                    if (car.x < car.next.x) {\n                        car.next = car.next.next;\n                        if (car.next) car.next.prev = car;\n                        car.direction = 'right';\n                        car.x = car.next.x - car.width;\n                        car.next.prev = car;\n                        car.next.x = car.next.next.x + car.next.width;\n                        car.next.next = car;\n                        car.next.next.prev = car;\n                        cars[j].x = car.x;\n                        cars[j].next.x = car.x;\n                        return true;\n                    }\n                } else if (car.direction === 'right') {\n                    if (car.x > car.next.x) {\n                        car.next = car.next.prev;\n                        if (car.next) car.next.next = car;\n                        car.direction = 'left';\n                        car.x = car.next.x + car.width;\n                        car.next.next = car;\n                        car.next.next.prev = car;\n                        cars[j].x = car.x;\n                        cars[j].next.x = car.x;\n                        return true;\n                    }\n                }\n            }\n        }\n        return false;\n    });\n};\n\nconst cars = [\n    { direction: 'left', x: 0, next: { direction: 'right', x: 0, next: null } },\n    { direction: 'left', x: 0, next: { direction: 'right', x: 0, next: null } },\n    { direction: 'left', x: 0, next: { direction: 'right', x: 0, next: null } },\n    { direction: 'left', x: 0, next: { direction: 'right', x: 0, next: null } },\n    { direction: 'right', x: 100, next: { direction: 'left', x: 100, next: null } },\n    { direction: 'right', x: 100, next: { direction: 'left', x: 100, next: null } },\n    { direction: 'right', x: 100, next: { direction: 'left', x: 100, next: null } },\n    { direction: 'right', x: 100, next: { direction: 'left', x: 100, next: null } },\n];\n\nconsole.log(car_race_collision(cars.length));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n    let n = l.length;\n    let n_minus_1 = n - 1;\n    let i = 0;\n    let incr = (i) => {\n        return (i < n_minus_1)? l[i + 1] : l[0];\n    };\n    let x = incr(i);\n    while (x < n) {\n        l[i] = x;\n        x = incr(i);\n        i++;\n    }\n    return l;\n};\n\n/*\n  Returns list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list2 = (l) => {\n    let n = l.length;\n    let n_minus_1 = n - 1;\n    let i = 0;\n    let incr = (i) => {\n        return (i < n_minus_1)? l[i + 1] : l[0];\n    };\n    let x = incr(i);\n    while (x < n) {\n        l[i] = x;\n        x = incr(i);\n        i++;\n    }\n    return l;\n};\n\n/*\n  Returns list with elements decremented by 1.\n  >>> decr_list([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  >>> decr_list([1, 2, 3])\n  [1, 2, 3]\n  >>> decr_list([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decr_list = (l) => {\n    let n = l.length;\n    let n_minus_1 = n - 1;\n    let i = n - 1;\n    let decr = (i) => {\n        return (i < n_minus_1)? l[i + 1] : l[0];\n    };\n    let x = decr(i);\n    while (x > 0) {\n        l[i] = x;\n        x = decr(i);\n        i--;\n    }\n    return l;\n};\n\n/*\n  Returns list with elements decremented by 1.\n  >>> decr_list([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  >>> decr_list([1, 2, 3])\n  [1, 2, 3]\n  >>> decr_list([6, 4, 6, 3, 4, 4, 10, 1, 124])\n  [5, 3, 5, 2, 3, 3, 9, 0, 123]\n  */\nconst decr_list2 = (l) => {\n    let n = l.length;\n    let n_minus_1 = n - 1;\n    let i = n - 1;\n    let decr = (i) => {\n        return (i < n_minus_1)? l[i + 1] : l[0];\n    };\n    let x = decr(i);\n    while (x > 0) {\n        l[i] = x;\n        x = decr(i);\n        i--;\n    }\n    return l;\n};\n\n/*\n  Returns list with elements incremented by 1.\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_to_end = (l) => {\n    let n = l.length;\n    let n_minus_1 = n - 1;\n    let i = n - 1;\n    let incr = (i) => {\n        return (i < n_minus_1)? l[i + 1] : l[0];\n    };\n    let x = incr(i);\n    while (x < n) {\n        l[i] = x;\n        x = incr(i);\n        i--;\n    }\n    return l;\n};\n\n/*\n  Returns list with elements incremented by 1.\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list_to_end2 = (l) => {\n    let n = l.length;\n    let n_minus_1 = n - 1;\n    let i = n - 1;\n    let incr = (i) => {\n        return (i < n_minus_1)? l[i + 1] : l[0];\n    };\n    let x = incr(i);\n    while (x < n) {\n        l[i] = x;\n        x = incr(i);\n        i--;\n    }\n    return l;\n};\n\n/*\n  Returns list with elements decremented by 1.\n  >>> decr_list([6, 4, 6"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n    l.sort();\n    let prev_two_sum = -1;\n    let prev_two_sum_value = 0;\n    for (let i = 0; i < l.length; i++) {\n        let value = l[i];\n        let two_sum = value + prev_two_sum_value;\n        if (two_sum < 0) {\n            return false;\n        }\n        if (two_sum > 0) {\n            if (two_sum!= prev_two_sum) {\n                return true;\n            }\n            prev_two_sum = two_sum;\n            prev_two_sum_value = value;\n        }\n    }\n    return false;\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n\n/*\n  pairs_sum_to_zero_test takes a list of integers as an input.\n  it tests the function against itself.\n  >>> pairs_sum_to_zero_test([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero_test([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero_test([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero_test([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero_test([1])\n  false\n  */\nconst pairs_sum_to_zero_test = (l) => {\n    let result = pairs_sum_to_zero(l);\n    if (result === true) {\n        console.log(\"The function correctly returned true.\");\n    }\n    else {\n        console.log(\"The function correctly returned false.\");\n    }\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n\n/*\n  main takes no arguments.\n  it tests the function and prints the result to the console.\n  >>> main()\n  The function correctly returned true.\n  */\nconst main = () => {\n    pairs_sum_to_zero_test([1, 3, 5, 0]);\n};\n\n//----------------------------------------------------------------------------------------------------------------------\n\n/*\n  These are test functions that run the code.\n  They are only invoked from main().\n  */\nconst pairs_sum_to_zero_test_0 = () => { pairs_sum_to_zero_test([1, 3, 5, 0]); };\nconst pairs_sum_to_zero_test_1 = () => { pairs_sum_to_zero_test([1, 3, -2, 1]); };\nconst pairs_sum_to_zero_test_2 = () => { pairs_sum_to_zero_test([1, 2, 3, 7]); };\nconst pairs_sum_to_zero_test_3 = () => { pairs_sum_to_zero_test([2, 4, -5, 3, 5, 7]); };\nconst pairs_sum_to_zero_test_4 = () => { pairs_sum_to_zero_test([1]); };\n\n//----------------------------------------------------------------------------------------------------------------------\n\n// This is the actual program.\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  if (base <= 1) return ''\n  const number = x.toString(base)\n  return number.split('').map(() => {\n    return Number(Math.pow(base, x.toString(base).length - 1).toString()).toString()\n  }).join('')\n}\n\n/*\n  Convert a decimal number to its equivalent in binary.\n  >>> decimal_to_binary(9)\n  '1011'\n  >>> decimal_to_binary(10)\n  '1010'\n  >>> decimal_to_binary(7)\n  '111'\n  >>> decimal_to_binary(6)\n  '110'\n  >>> decimal_to_binary(4)\n  '101'\n  >>> decimal_to_binary(3)\n  '011'\n  >>> decimal_to_binary(2)\n  '010'\n  >>> decimal_to_binary(1)\n  '001'\n  >>> decimal_to_binary(0)\n  '000'\n  >>> decimal_to_binary(9.0)\n  '1011'\n  >>> decimal_to_binary(9.5)\n  '10101'\n  >>> decimal_to_binary(9.25)\n  '101001'\n  >>> decimal_to_binary(9.75)\n  '1010011'\n  >>> decimal_to_binary(9.125)\n  '1010101'\n  >>> decimal_to_binary(9.625)\n  '1010011'\n  >>> decimal_to_binary(9.375)\n  '1010011'\n  >>> decimal_to_binary(9.875)\n  '1010111'\n  >>> decimal_to_binary(9.875)\n  '1010111'\n  >>> decimal_to_binary(9.875)\n  '1010111'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.125)\n  '1010101'\n  >>> decimal_to_binary(10.625)\n  '1010101'\n  >>> decimal_to_binary(10.875)\n  '1010111'\n  >>> decimal_to_binary(10.875)\n  '1010111'\n  >>> decimal_to_binary(10.875)\n  '1010111'\n  >>> decimal_to_binary(10.5)\n  '1010111'\n  >>> decimal_to_binary(10.75)\n  '1010111'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary(10.25)\n  '1010101'\n  >>> decimal_to_binary(10.0)\n  '1010101'\n  >>> decimal_to_binary"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n    return a * (h / 2);\n};\n\nexport default triangle_area;\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const [f1, f2] = [0, 1]\n  if (n <= 2) {\n    return n\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(7))\n\n/*The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 1\n  fib5(3) -> 0\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5) + fib5(n-6) + fib5(n-7) + fib5(n-8) + fib5(n-9) + fib5(n-10) + fib5(n-11) + fib5(n-12) + fib5(n-13) + fib5(n-14) + fib5(n-15) + fib5(n-16) + fib5(n-17) + fib5(n-18) + fib5(n-19) + fib5(n-20) + fib5(n-21) + fib5(n-22) + fib5(n-23) + fib5(n-24) + fib5(n-25) + fib5(n-26) + fib5(n-27) + fib5(n-28) + fib5(n-29) + fib5(n-30) + fib5(n-31) + fib5(n-32) + fib5(n-33) + fib5(n-34) + fib5(n-35) + fib5(n-36) + fib5(n-37) + fib5(n-38) + fib5(n-39) + fib5(n-40) + fib5(n-41) + fib5(n-42) + fib5(n-43) + fib5(n-44) + fib5(n-45) + fib5(n-46) + fib5(n-47) + fib5(n-48) + fib5(n-49) + fib5(n-50) + fib5(n-51) + fib5(n-52) + fib5(n-53) + fib5(n-54) + fib5(n-55) + fib5(n-56) + fib5(n-57) + fib5(n-58) + fib5(n-59) + fib5(n-60) + fib5(n-61) + fib5(n-62) + fib5(n-63) + fib5(n-64) + fib5(n-65) + fib5(n-66) + fib5(n-67) + fib5(n-68) + fib5(n-69) + fib5(n-70) + fib5(n-71) + fib5(n-72) + fib5(n-73) + fib5(n-74) + fib5(n-75) + fib5(n-76) + fib5(n-77) + fib5(n-78) + fib5(n-79) + fib5(n-80) + fib5(n-81) + fib5(n-82) + fib5(n-83) + fib5(n-84) + fib5(n-85) + fib5(n-86) + fib5(n-87) + fib5(n-88) + fib5(n-89) + fib5(n-90) + fib5(n-91) + fib5(n-92) + fib5(n-93) + fib5(n-94) + fib5(n-95) + fib5(n-96) + fib5(n-97) + fib5(n-98) + fib5(n-99) + fib5(n-100) + fib5(n-101) + fib5(n-102) + fib5(n-103) + fib5(n-104) + fib5(n-105) + fib5(n-106) + fib5(n-107) + fib5(n-108) + fib5(n-109) + fib5(n-110) + fib5(n-111) + fib5(n-112) + fib5(n-113) + fib5(n-114) + fib5(n-115) + fib5(n-116) + fib5(n-117) + fib5(n-118) + fib5(n-119) + fib5(n-120) + fib5(n-121) + fib5(n-122) + fib5(n-123) + fib5(n-124) + fib5(n-125) + fib5(n-126) + fib5(n-127) + fib5(n-128) + fib5(n-129) + fib5(n-130) + fib5(n-131) + fib5(n-132) + fib5(n-133) + fib5(n-134) + fib5(n-135) + fib5(n-136) + fib5(n-137) + fib5(n-138) + fib5(n-139) + fib5(n-140) + fib5(n-141) + fib5(n-142) + fib5(n-143) + fib5(n-144) + fib5(n-145) + fib5(n-146) + fib5(n-147) + fib5(n-148) + fib5(n-149) + fib5(n-150"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    let count = l.length,\n        half = Math.floor(count / 2),\n        index = Math.floor((count % 2) == 0? half : half - 1),\n        value = l[index];\n    return value;\n}\n\n//Exercice 4:\n\n//What is the median of the numbers 1 to 20?\n\nconst median20 = (n) => {\n    let l = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n        median = median(l);\n    return median;\n}\n\n//What is the median of the numbers 1 to 100?\n\nconst median100 = (n) => {\n    let l = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100],\n        median = median(l);\n    return median;\n}\n\n//What is the median of the numbers 1 to 1000?\n\nconst median1000 = (n) => {\n    let l = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255],\n        median = median(l);\n    return median;\n}\n\n\n//Exercice 5:\n\n//What is the median of the numbers 1 to 10000000?\n\nconst median10000000 = (n) => {\n    let l = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    let tmp = text.split('').reverse().join('');\n    return text === tmp;\n};\n\n//--------------------------------------------------------------------------------------------------------------------\n/*\n  Checks if given number is a palindrome\n  >>> is_palindrome(0)\n  true\n  >>> is_palindrome(123)\n  true\n  >>> is_palindrome(-1)\n  true\n  >>> is_palindrome(1234)\n  true\n  >>> is_palindrome(1234)\n  true\n  >>> is_palindrome(-1)\n  true\n  >>> is_palindrome(1234)\n  false\n  >>> is_palindrome(0)\n  false\n  */\nconst is_palindrome = (num) => {\n    let tmp = String(num);\n    return tmp.charAt(0) === tmp.charAt(tmp.length - 1) && tmp.charAt(0) === tmp.charAt(tmp.length - 2);\n};\n\n//--------------------------------------------------------------------------------------------------------------------\n/*\n  Computes the longest palindrome in a string\n  >>> longest_palindrome('abbccd')\n  'babccd'\n  >>> longest_palindrome('abccd')\n  'abccd'\n  >>> longest_palindrome('a')\n  'a'\n  >>> longest_palindrome('aa')\n  'aa'\n  >>> longest_palindrome('abc')\n  'abc'\n  >>> longest_palindrome('abcd')\n  'abcd'\n  >>> longest_palindrome('abcde')\n  'abcd'\n  >>> longest_palindrome('abcdef')\n  'abcde'\n  >>> longest_palindrome('abcdefg')\n  'abcdef'\n  >>> longest_palindrome('abcd')\n  'abcd'\n  >>> longest_palindrome('ab')\n  'ab'\n  >>> longest_palindrome('a')\n  'a'\n  >>> longest_palindrome('b')\n  'b'\n  >>> longest_palindrome('bcccc')\n  'bcccc'\n  >>> longest_palindrome('abc')\n  'abc'\n  >>> longest_palindrome('ab')\n  'ab'\n  >>> longest_palindrome('abcd')\n  'abcd'\n  >>> longest_palindrome('abcd')\n  'abcd'\n  >>> longest_palindrome('abcd')\n  'abcd'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdef')\n  'abcdef'\n  >>> longest_palindrome('abcdefg')\n  'abcdefg'\n  >>> longest_palindrome('abcdefg')"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = n % p\n  if (m < 0) {\n    return p + m\n  }\n  return m\n}\n\n// Generates a random integer in [0, p)\nconst rand = (p) => {\n  return Math.floor(Math.random() * p)\n}\n\n/**\n * Takes two numbers and returns their product.\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst prod = (x, y) => {\n  return x * y\n}\n\n/**\n * Takes two numbers and returns their modulo.\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst mod = (x, y) => {\n  return x % y\n}\n\n/**\n * Takes two numbers and returns their difference.\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst diff = (x, y) => {\n  return x - y\n}\n\n/**\n * Takes two numbers and returns their sum.\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst sum = (x, y) => {\n  return x + y\n}\n\n/**\n * Takes two numbers and returns their minimum.\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst min = (x, y) => {\n  return Math.min(x, y)\n}\n\n/**\n * Takes two numbers and returns their maximum.\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst max = (x, y) => {\n  return Math.max(x, y)\n}\n\n/**\n * Takes two numbers and returns their difference.\n * @param {Number} x\n * @param {Number} y\n * @return {Number}\n */\nconst diff2 = (x, y) => {\n  return x - y\n}\n\n/**\n * Returns the product of the input array.\n * @param {Array} a\n * @return {Number}\n */\nconst product = (a) => {\n  return a.reduce((acc, x) => prod(acc, x), 1)\n}\n\n/**\n * Returns the modulo of the input array.\n * @param {Array} a\n * @return {Number}\n */\nconst modulo = (a) => {\n  return a.reduce((acc, x) => mod(acc, x), 0)\n}\n\n/**\n * Returns the sum of the input array.\n * @param {Array} a\n * @return {Number}\n */\nconst sum2 = (a) => {\n  return a.reduce((acc, x) => sum(acc, x), 0)\n}\n\n/**\n * Returns the difference of the input array.\n * @param {Array} a\n * @return {Number}\n */\nconst difference = (a) => {\n  return a.reduce((acc, x) => diff(acc, x), 0)\n}\n\n/**\n * Returns the difference of the input array.\n * @param {Array} a\n * @return {Number}\n */\nconst difference2 = (a) => {\n  return a.reduce((acc, x) => diff2(acc, x), 0)\n}\n\n/**\n * Returns the minimum of the input array.\n * @param {Array} a\n * @return {Number}\n */\nconst min2 = (a) => {\n  return a.reduce((acc, x) => min(acc, x), Infinity)\n}\n\n/**\n * Returns the maximum of the input array.\n * @param {Array} a\n * @return {Number}\n */\nconst max2 = (a) => {\n  return a.reduce((acc, x) => max(acc, x), -Infinity)\n}\n\nmodule.exports = {\n  modp,\n  rand,\n  prod,\n  mod,\n  diff,\n  sum,\n  min,\n  max,\n  diff2,\n  sum2,\n  min2,\n  max2,\n  modulo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let decoded = \"\";\n  for(let i = 0; i < s.length; i++) {\n    decoded += String.fromCharCode(\n      (parseInt(s.charAt(i), 36) - 5) % 26 + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode = (s) => {\n  let decoded = \"\";\n  for(let i = 0; i < s.length; i++) {\n    decoded += String.fromCharCode(\n      ((parseInt(s.charAt(i), 36) - 5) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift = (s) => {\n  let decoded = \"\";\n  for(let i = 0; i < s.length; i++) {\n    decoded += String.fromCharCode(\n      (parseInt(s.charAt(i), 36) - 5) % 26 + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse = (s) => {\n  let decoded = \"\";\n  for(let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      (parseInt(s.charAt(i), 36) - 5) % 26 + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_shift = (s) => {\n  let decoded = \"\";\n  for(let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      (parseInt(s.charAt(i), 36) - 5) % 26 + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_reverse_shift_reverse = (s) => {\n  let decoded = \"\";\n  for(let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(\n      (parseInt(s.charAt(i), 36) - 5) % 26 + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\n/*\n  returns the reverse of the input string.\n  */\nconst reverse = (s) => {\n  let decoded = \"\";\n  for(let i = 0; i < s.length; i++) {\n    decoded += String.fromCharCode(\n      ((parseInt(s.charAt(i), 36) - 5) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return decoded;\n}\n\nmodule.exports = {\n  encode: encode,\n  decode: decode,\n  decode_reverse: decode_reverse,\n  decode_reverse_shift: decode_reverse_shift,\n  decode_reverse_shift_reverse: decode_reverse_shift_reverse,\n  encode_shift: encode_shift,\n  decode_shift: decode_shift,\n  reverse: reverse\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n  return text.replace(new RegExp(`[${vowels.join('|')}]`, 'g'), '');\n};\n\n/*\n  reverse_string is a function that takes string and returns string in reverse order.\n  >>> reverse_string('')\n  ''\n  >>> reverse_string('abcdef')\n  'fedcba'\n  >>> reverse_string('aaBAA')\n  'AAbaA'\n  >>> reverse_string('zbcd')\n  'dcbaZ'\n  */\nconst reverse_string = (text) => {\n  return text.split('').reverse().join('');\n};\n\n/*\n  reverse_words is a function that takes string and returns string in reverse order.\n  >>> reverse_words('')\n  ''\n  >>> reverse_words('abcdef')\n  'fedcba'\n  >>> reverse_words('aaBAA')\n  'AAbaA'\n  >>> reverse_words('zbcd')\n  'dcbaZ'\n  */\nconst reverse_words = (text) => {\n  const words = text.split(' ');\n  return words.reverse().join(' ');\n};\n\n/*\n  reverse_sentence is a function that takes string and returns string in reverse order.\n  >>> reverse_sentence('')\n  ''\n  >>> reverse_sentence('abcdef')\n  'fedcba'\n  >>> reverse_sentence('aaBAA')\n  'AAbaA'\n  >>> reverse_sentence('zbcd')\n  'dcbaZ'\n  */\nconst reverse_sentence = (text) => {\n  const words = text.split(' ');\n  return words.join(' ');\n};\n\n/*\n  sort_string is a function that takes string and returns sorted string in reverse order.\n  >>> sort_string('')\n  ''\n  >>> sort_string('abcdef')\n  'fedcba'\n  >>> sort_string('aaBAA')\n  'AAbaA'\n  >>> sort_string('zbcd')\n  'dcbaZ'\n  */\nconst sort_string = (text) => {\n  const sorted_words = text.split(' ').sort().reverse();\n  return sorted_words.join(' ');\n};\n\n/*\n  sort_sentence is a function that takes string and returns sorted string.\n  >>> sort_sentence('')\n  ''\n  >>> sort_sentence('abcdef')\n  'fedcba'\n  >>> sort_sentence('aaBAA')\n  'AAbaA'\n  >>> sort_sentence('zbcd')\n  'dcbaZ'\n  */\nconst sort_sentence = (text) => {\n  const sorted_words = text.split(' ').sort();\n  return sorted_words.join(' ');\n};\n\n/*\n  trim_whitespace is a function that takes string and returns trimmed string.\n  >>> trim_whitespace('')\n  ''\n  >>> trim_whitespace('  abcdef  ')\n  'abcdef'\n  >>> trim_whitespace('abcdef ')\n  'abcdef'\n  >>> trim_whitespace(' aabccc')\n  'aabccc'\n  >>> trim_whitespace('  \\t \\n\\t\\t\\r')\n  ''\n  */\nconst trim_whitespace = (text) => {\n  return text.trim();\n};\n\n/*\n  upper_case is a function that takes string and returns string in upper case.\n  >>> upper_case('')\n  ''\n  >>> upper_case('abcdef')\n  'ABCDEF'\n  >>> upper_case('aaBAA')\n  'AABAA'\n  >>> upper_case('zbcd')\n  'ZBCD'\n  */\nconst upper_case = (text) => {\n  return text.toUpperCase();\n};\n\n/*\n  lower_case is a function that takes string and returns string in lower case.\n  >>> lower_case('')\n  ''\n  >>> lower_case('abcdef')\n  'abcdef'\n  >>> lower_case('aaBAA')\n  'aabaa'\n  >>> lower_case('zbcd')\n  'zbcd'\n  */\nconst lower_case = (text) => {\n  return text.toLowerCase();\n};\n\nmodule.exports = {\n  remove_vowels,\n  reverse_string,\n  reverse_words,\n  reverse_sentence,\n  sort_string,\n  sort_sentence,\n  trim_whitespace,\n  upper_case,\n  lower_case\n};\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) return false;\n  }\n  return true;\n};\n\n/*Return the sum of all elements in the list l.\n  >>> sum_list([1, 2, 3])\n  6\n  >>> sum_list([])\n  0\n  >>> sum_list([1, 2, 3, 4])\n  9\n  */\nconst sum_list = l => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i];\n  }\n  return sum;\n};\n\n/*Return the average of all elements in the list l.\n  >>> average([1, 2, 3])\n  2\n  >>> average([])\n  0\n  >>> average([1, 2, 3, 4])\n  2.5\n  */\nconst average = l => {\n  return sum_list(l) / l.length;\n};\n\n/*Return the largest number in the list l.\n  >>> largest_in_list([1, 2, 3])\n  3\n  >>> largest_in_list([])\n  0\n  >>> largest_in_list([1, 2, 3, 4])\n  4\n  */\nconst largest_in_list = l => {\n  let max = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n  }\n  return max;\n};\n\n/*Return the smallest number in the list l.\n  >>> smallest_in_list([1, 2, 3])\n  1\n  >>> smallest_in_list([])\n  0\n  >>> smallest_in_list([1, 2, 3, 4])\n  1\n  */\nconst smallest_in_list = l => {\n  let min = Number.MAX_VALUE;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < min) min = l[i];\n  }\n  return min;\n};\n\n/*Return the median of all elements in the list l.\n  >>> median([1, 2, 3])\n  2\n  >>> median([])\n  0\n  >>> median([1, 2, 3, 4])\n  2\n  */\nconst median = l => {\n  let half = l.length / 2;\n  let s = 0;\n  for (let i = 0; i < half; i++) {\n    s += l[i];\n  }\n  return (s + l[half]) / 2;\n};\n\n/*Return the mean of all elements in the list l.\n  >>> mean([1, 2, 3])\n  2\n  >>> mean([])\n  0\n  >>> mean([1, 2, 3, 4])\n  2.5\n  */\nconst mean = l => {\n  return sum_list(l) / l.length;\n};\n\n/*Return the mode of all elements in the list l.\n  >>> mode([1, 2, 3])\n  2\n  >>> mode([])\n  0\n  >>> mode([1, 2, 3, 4])\n  3\n  */\nconst mode = l => {\n  let mode = 0;\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === mode) count++;\n    else if (count === 1) {\n      mode = l[i];\n      count = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the sum of all squares of all elements in the list l.\n  >>> sum_of_squares([1, 2, 3])\n  9\n  >>> sum_of_squares([])\n  0\n  >>> sum_of_squares([1, 2, 3, 4])\n  25\n  */\nconst sum_of_squares = l => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i], 2);\n  }\n  return sum;\n};\n\n/*Return the sum of all cube of all elements in the list l.\n  >>> sum_of_cubes([1, 2, 3])\n  9\n  >>> sum_of_cubes([])\n  0\n  >>> sum_of_cubes([1, 2, 3, 4])\n  16\n  */\nconst sum_of_cubes = l => {\n  let sum = 0;\n  for (let i = 0; i < l.length; i++) {\n    sum += Math.pow(l[i], 3);\n  }\n  return sum;\n};\n\n/*Return the number of times a number appears in the list l.\n  >>> count_of(1, [1, 2, 3, 4, 5])\n  3\n  >>> count_of(0, [1, 2, 3, 4, 5])\n  0\n  >>> count_of(1, [1, 2, 3, 4, 5, 1])\n  2\n  */\nconst count_of = (n, l) => {\n  let count = 0;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === n) count++;\n  }\n  return count;\n};\n\nmodule.exports = {\n  sum_list,\n  average,\n  largest_in_list,\n  smallest_in_list,\n  median,\n  mean,\n  mode,\n  sum_of_squares,\n  sum_of_cubes,\n  count_of\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let r = x + y;\n  return r;\n};\n\n/*Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  105\n  */\nconst multiply = (x, y) => {\n  let r = x * y;\n  return r;\n};\n\n/*Divide two numbers x and y\n  >>> divide(6, 3)\n  2\n  >>> divide(105, 7)\n  70\n  */\nconst divide = (x, y) => {\n  let r = x / y;\n  return r;\n};\n\n/*Sum of squares of the numbers 1 to n\n  >>> sumSquares(1, 4)\n  15\n  >>> sumSquares(1, 7)\n  49\n  */\nconst sumSquares = (x, y) => {\n  let r = (x*x) + (y*y);\n  return r;\n};\n\n/*Sum of the numbers 1 to n\n  >>> sum(1, 4)\n  15\n  >>> sum(1, 7)\n  49\n  */\nconst sum = (x, y) => {\n  let r = x + y;\n  return r;\n};\n\n/*Square root of a number x\n  >>> squareRoot(16)\n  4\n  >>> squareRoot(25)\n  5\n  */\nconst squareRoot = (x) => {\n  let r = Math.sqrt(x);\n  return r;\n};\n\n/*Square of a number x\n  >>> square(2)\n  4\n  >>> square(5)\n  25\n  */\nconst square = (x) => {\n  let r = x*x;\n  return r;\n};\n\n/*Pow of a number x to a number y\n  >>> pow(2, 2)\n  4\n  >>> pow(5, 2)\n  25\n  */\nconst pow = (x, y) => {\n  let r = Math.pow(x, y);\n  return r;\n};\n\n/*Complex number\n  >>> complex(2, 3)\n  (2+3j)\n  >>> complex(4, -5)\n  (4-5j)\n  */\nconst complex = (x, y) => {\n  let r = x + y;\n  return r;\n};\n\n/*Euclidean norm\n  >>> norm(2, 3)\n  5\n  >>> norm(4, -5)\n  15\n  */\nconst norm = (x, y) => {\n  let r = Math.sqrt(x*x + y*y);\n  return r;\n};\n\n/*Complex conjugate of a complex number\n  >>> conj(2+3j)\n  (2-3j)\n  */\nconst conj = (x) => {\n  let r = x + 0;\n  return r;\n};\n\n/*Complex conjugate of a real number\n  >>> conj(4)\n  4\n  */\nconst conj = (x) => {\n  let r = x - 0;\n  return r;\n};\n\n/*Exponentiation of a complex number\n  >>> exp(2+3j)\n  (2+3j)^(2+3j)\n  */\nconst exp = (x) => {\n  let r = Math.pow(x, 2+3j);\n  return r;\n};\n\n/*Exponentiation of a real number\n  >>> exp(4)\n  16\n  */\nconst exp = (x) => {\n  let r = Math.pow(x, 4);\n  return r;\n};\n\n/*Natural logarithm of a complex number\n  >>> ln(2+3j)\n  (2+3j)^(1/2)\n  >>> ln(4)\n  2\n  */\nconst ln = (x) => {\n  let r = Math.log(x);\n  return r;\n};\n\n/*Natural logarithm of a real number\n  >>> ln(4)\n  2\n  */\nconst ln = (x) => {\n  let r = Math.log(x);\n  return r;\n};\n\n/*Modulus\n  >>> mod(3, 4)\n  3\n  >>> mod(7, 4)\n  3\n  */\nconst mod = (x, y) => {\n  let r = x % y;\n  return r;\n};\n\n/*Floor\n  >>> floor(4.5)\n  4\n  >>> floor(5.1)\n  5\n  */\nconst floor = (x) => {\n  let r = Math.floor(x);\n  return r;\n};\n\n/*Ceiling\n  >>> ceiling(4.5)\n  5\n  >>> ceiling(5.1)\n  6\n  */\nconst ceiling = (x) => {\n  let r = Math.ceil(x);\n  return r;\n};\n\n/*Absolute value\n  >>> abs(4.5)\n  4.5\n  >>> abs(-4.5)\n  4.5\n  >>> abs(0)\n  0\n  */\nconst abs = (x) => {\n  let r = Math.abs(x);\n  return r;\n};\n\n/*Truncation\n  >>> trunc(4.5)\n  4\n  >>> trunc(5.1)\n  5\n  */\nconst trunc = (x) => {\n  let r = Math.trunc(x);\n  return r;\n};\n\n/*Round\n  >>> round(4.5)\n  4\n  >>> round(5.1)\n  5\n  >>> round(4.6)\n  5\n  >>> round(-4.5)\n  -4\n  >>> round(-4.6)\n  -4\n  */\nconst round = (x) => {\n  let r = Math.round(x);\n  return r;\n};\n\n/*Is a number a power of two\n  >>> isPowerOfTwo(2)\n  true\n  >>> isPowerOfTwo(3)\n  false\n  >>> isPowerOfTwo(4)\n  true\n  >>> isPowerOfTwo(5)\n  false\n  */\nconst isPowerOfTwo = (x) => {\n  let r = Math.log(x) === Math.log(Math"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n    const chars = [];\n    for (let i = 0; i < s0.length; i++) {\n        if (s1.indexOf(s0[i], i) === -1) {\n            return false;\n        }\n        chars.push(s0[i]);\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) return 1\n  return fib(n-1) + fib(n-2)\n}\n\nmodule.exports = fib\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const len = brackets.length\n  for (let i = 0; i < len - 1; i++) {\n    if (brackets[i] === '<' && brackets[i + 1] === '>') {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  @method brackets_match\n  @param {string} brackets\n  @param {string} string\n  @return {boolean}\n  @static\n  Check if the brackets in brackets are matched in the string.\n\n  >>> brackets_match('<>', '<a>')\n  true\n  >>> brackets_match('<>', 'a>')\n  false\n  >>> brackets_match('<>', '<a>b>')\n  false\n  >>> brackets_match('<>', '<a>b>c')\n  false\n  >>> brackets_match('<>', '<a>b>c<d>')\n  true\n  */\nconst brackets_match = (brackets, string) => {\n  const len = brackets.length\n  for (let i = 0; i < len - 1; i++) {\n    if (string.indexOf(brackets[i]) === -1) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  brackets_match,\n  correct_bracketing\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let i = 0;\n  let j = 0;\n  let t = true;\n  while (i < l.length) {\n    j = i + 1;\n    while (j < l.length) {\n      if (l[j] <= l[i]) {\n        t = false;\n        break;\n      }\n      j++;\n    }\n    i++;\n  }\n  return t;\n};\n\nexport default monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  if (!l1 ||!l2) return [];\n  const set1 = new Set(l1);\n  const set2 = new Set(l2);\n  return [...new Set([...set1,...set2])].sort();\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  if (n <= 2) return n;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return largest_prime_factor(n / i);\n    }\n  }\n  return n;\n};\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_recursive = (n) => {\n  if (n <= 2) return n;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) {\n      return largest_prime_factor_recursive(n / i);\n    }\n  }\n  return n;\n};\n\n// TEST\n/*\nlargest_prime_factor(13195)\nlargest_prime_factor(2048)\nlargest_prime_factor(1729)\nlargest_prime_factor(1929)\nlargest_prime_factor(1409)\nlargest_prime_factor(1901)\nlargest_prime_factor(1257)\nlargest_prime_factor(1901)\nlargest_prime_factor(1119)\nlargest_prime_factor(1801)\nlargest_prime_factor(1729)\nlargest_prime_factor(2048)\nlargest_prime_factor(1729)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048)\nlargest_prime_factor(2048"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * sum_to_n(n - 1);\n};\n\n// console.log(sum_to_n(5));\n// console.log(sum_to_n(10));\n// console.log(sum_to_n(15));\n// console.log(sum_to_n(20));\n// console.log(sum_to_n(30));\n// console.log(sum_to_n(40));\n// console.log(sum_to_n(50));\n// console.log(sum_to_n(55));\n// console.log(sum_to_n(60));\n// console.log(sum_to_n(65));\n// console.log(sum_to_n(70));\n// console.log(sum_to_n(75));\n// console.log(sum_to_n(80));\n// console.log(sum_to_n(85));\n// console.log(sum_to_n(90));\n// console.log(sum_to_n(95));\n// console.log(sum_to_n(100));\n// console.log(sum_to_n(105));\n// console.log(sum_to_n(110));\n// console.log(sum_to_n(115));\n// console.log(sum_to_n(120));\n// console.log(sum_to_n(125));\n// console.log(sum_to_n(130));\n// console.log(sum_to_n(135));\n// console.log(sum_to_n(140));\n// console.log(sum_to_n(145));\n// console.log(sum_to_n(150));\n// console.log(sum_to_n(155));\n// console.log(sum_to_n(160));\n// console.log(sum_to_n(165));\n// console.log(sum_to_n(170));\n// console.log(sum_to_n(175));\n// console.log(sum_to_n(180));\n// console.log(sum_to_n(185));\n// console.log(sum_to_n(190));\n// console.log(sum_to_n(195));\n// console.log(sum_to_n(200));\n// console.log(sum_to_n(205));\n// console.log(sum_to_n(210));\n// console.log(sum_to_n(215));\n// console.log(sum_to_n(220));\n// console.log(sum_to_n(225));\n// console.log(sum_to_n(230));\n// console.log(sum_to_n(235));\n// console.log(sum_to_n(240));\n// console.log(sum_to_n(245));\n// console.log(sum_to_n(250));\n// console.log(sum_to_n(255));\n// console.log(sum_to_n(260));\n// console.log(sum_to_n(265));\n// console.log(sum_to_n(270));\n// console.log(sum_to_n(275));\n// console.log(sum_to_n(280));\n// console.log(sum_to_n(285));\n// console.log(sum_to_n(290));\n// console.log(sum_to_n(295));\n// console.log(sum_to_n(300));\n// console.log(sum_to_n(305));\n// console.log(sum_to_n(310));\n// console.log(sum_to_n(315));\n// console.log(sum_to_n(320));\n// console.log(sum_to_n(325));\n// console.log(sum_to_n(330));\n// console.log(sum_to_n(335));\n// console.log(sum_to_n(340));\n// console.log(sum_to_n(345));\n// console.log(sum_to_n(350));\n// console.log(sum_to_n(355));\n// console.log(sum_to_n(360));\n// console.log(sum_to_n(365));\n// console.log(sum_to_n(370));\n// console.log(sum_to_n(375));\n// console.log(sum_to_n(380));\n// console.log(sum_to_n(385));\n// console.log(sum_to_n(390));\n// console.log(sum_to_n(395));\n// console.log(sum_to_n(400));\n// console.log(sum_to_n(405));\n// console.log(sum_to_n(410));\n// console.log(sum_to_n(415));\n// console.log(sum_to_n(420));\n// console.log(sum_to_n(425));\n// console.log(sum_to_n(430));\n// console.log(sum_to_n(435));\n// console.log(sum_to_n(440));\n// console.log(sum_to_n(445));\n// console.log(sum_to_n(450));\n// console.log(sum_to_n(455));\n// console.log(sum_to_n(460));\n// console.log(sum_to_n(465));\n// console.log(sum_to_n(470));\n// console.log(sum_to_n(475));\n// console.log(sum_to_n(480));\n// console.log(sum_to_n(485));\n// console.log(sum_to_n(490));\n// console.log(sum_to_n(495));\n// console.log(sum_to_n(500));\n// console.log(sum_to_n(505));\n// console.log(sum_to_n(510));\n// console.log(sum_to_n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const brackets = brackets.split(\"()\");\n  return brackets.every(\n    (bracket) => bracket.split(\"(\")[1].split(\")\")[0] === brackets[0].split(\"(\")[1].split(\")\")[1]\n  );\n};\n\n/*\n  Check that the string is not too long, and is made of only valid brackets\n  and parentheses.\n\n  >>> long_string(\"()\")\n  false\n  >>> long_string(\"((())(())\")\n  false\n  >>> long_string(\"(()()())\")\n  false\n  >>> long_string(\"()\")\n  true\n  >>> long_string(\"((()()())\")\n  true\n  >>> long_string(\"((()()())\")\n  true\n  >>> long_string(\"()\")\n  true\n  >>> long_string(\"()())\")\n  true\n  >>> long_string(\"()())\")\n  true\n  >>> long_string(\"(()())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"(()()())\")\n  true\n  >>> long_string(\"()(()())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()())\")\n  true\n  >>> long_string(\"(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"(())\")\n  true\n  >>> long_string(\"(()(())\")\n  true\n  >>> long_string(\"(()(())\")\n  true\n  >>> long_string(\"(())\")\n  true\n  >>> long_string(\"(()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"(())\")\n  true\n  >>> long_string(\"(()(())\")\n  true\n  >>> long_string(\"(()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>> long_string(\"()(())\")\n  true\n  >>>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  const coeff = xs[0];\n  const dcoeff = coeff;\n  for (let i = 1; i < len; i++) {\n    dcoeff = coeff * (i + 1) + xs[i] * dcoeff;\n  }\n  return [dcoeff, dcoeff];\n};\n\n/*\n  Calculate roots of a polynomial using Newton's method.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> roots(derivative([3, 1, 2, 4, 5]))\n  [3.0, 3.0]\n  >>> roots([2, -2, 2, 0, -1])\n  [1.0, -1.0]\n  >>> roots([-2, 0, 0])\n  [0.0]\n  >>> roots([1, 2, 3])\n  [1.0]\n  */\nconst roots = (xs) => {\n  const len = xs.length;\n  const coeff = xs[0];\n  const dcoeff = coeff;\n  let root;\n  let droot;\n  let i = 1;\n  do {\n    root = coeff / dcoeff;\n    droot = coeff * (i - 1) + xs[i] - root * dcoeff;\n    i++;\n  } while (droot!== 0);\n  return [root];\n};\n\nmodule.exports = {\n  derivative,\n  roots\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let a = 0,\n        b = 1,\n        result = 0;\n\n    while (a < n) {\n        result = a + b;\n        a = b;\n        b = result;\n    }\n\n    return result;\n};\n\nconsole.log(fibfib(1));\nconsole.log(fibfib(2));\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n            count++;\n        }\n    }\n    return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let digits = x.toString(10);\n  let len = digits.length;\n  if (shift > len) {\n    digits = digits.slice().reverse();\n  } else {\n    digits = digits.slice(shift, len).reverse().concat(digits.slice(0, shift));\n  }\n  return digits.join('');\n};\n\n/*\n  Given an integer x, return a string containing the first n digits of the\n  number, where n is the number of digits in the result.\n  If n < number of digits, return all digits.\n  >>> first_n(12, 1)\n  \"12\"\n  >>> first_n(12, 2)\n  \"12\"\n  >>> first_n(12, 3)\n  \"12\"\n  >>> first_n(12, 4)\n  \"12\"\n  >>> first_n(12, 5)\n  \"12\"\n  >>> first_n(12, 6)\n  \"12\"\n  >>> first_n(12, 7)\n  \"12\"\n  >>> first_n(12, 8)\n  \"12\"\n  >>> first_n(12, 9)\n  \"12\"\n  >>> first_n(12, 10)\n  \"12\"\n  >>> first_n(12, 11)\n  \"12\"\n  >>> first_n(12, 12)\n  \"12\"\n  >>> first_n(12, 13)\n  \"12\"\n  >>> first_n(12, 14)\n  \"12\"\n  >>> first_n(12, 15)\n  \"12\"\n  >>> first_n(12, 16)\n  \"12\"\n  >>> first_n(12, 17)\n  \"12\"\n  >>> first_n(12, 18)\n  \"12\"\n  >>> first_n(12, 19)\n  \"12\"\n  >>> first_n(12, 20)\n  \"12\"\n  >>> first_n(12, 21)\n  \"12\"\n  >>> first_n(12, 22)\n  \"12\"\n  >>> first_n(12, 23)\n  \"12\"\n  >>> first_n(12, 24)\n  \"12\"\n  >>> first_n(12, 25)\n  \"12\"\n  >>> first_n(12, 26)\n  \"12\"\n  >>> first_n(12, 27)\n  \"12\"\n  >>> first_n(12, 28)\n  \"12\"\n  >>> first_n(12, 29)\n  \"12\"\n  >>> first_n(12, 30)\n  \"12\"\n  >>> first_n(12, 31)\n  \"12\"\n  >>> first_n(12, 32)\n  \"12\"\n  >>> first_n(12, 33)\n  \"12\"\n  >>> first_n(12, 34)\n  \"12\"\n  >>> first_n(12, 35)\n  \"12\"\n  >>> first_n(12, 36)\n  \"12\"\n  >>> first_n(12, 37)\n  \"12\"\n  >>> first_n(12, 38)\n  \"12\"\n  >>> first_n(12, 39)\n  \"12\"\n  >>> first_n(12, 40)\n  \"12\"\n  >>> first_n(12, 41)\n  \"12\"\n  >>> first_n(12, 42)\n  \"12\"\n  >>> first_n(12, 43)\n  \"12\"\n  >>> first_n(12, 44)\n  \"12\"\n  >>> first_n(12, 45)\n  \"12\"\n  >>> first_n(12, 46)\n  \"12\"\n  >>> first_n(12, 47)\n  \"12\"\n  >>> first_n(12, 48)\n  \"12\"\n  >>> first_n(12, 49)\n  \"12\"\n  >>> first_n(12, 50)\n  \"12\"\n  >>> first_n(12, 51)\n  \"12\"\n  >>> first_n(12, 52)\n  \"12\"\n  >>> first_n(12, 53)\n  \"12\"\n  >>> first_n(12, 54)\n  \"12\"\n  >>> first_n(12, 55)\n  \"12\"\n  >>> first_n(12, 56)\n  \"12\"\n  >>> first_n(12, 57)\n  \"12\"\n  >>> first_n(12, 58)\n  \"12\"\n  >>> first_n(12, 59)\n  \"12\"\n  >>> first_n(12, 60)\n  \"12\"\n  >>> first_n(12, 61)\n  \"12\"\n  >>> first_n(12, 62)\n  \"12\"\n  >>> first_n(12, 63)\n  \"12\"\n  >>> first_n(12, 64)\n  \"12\"\n  >>> first_n(12, 65)\n  \"12\"\n  >>> first_n(12, 66)\n  \"12\"\n  >>> first_n(12, 67)\n  \"12\"\n  >>> first_n(12, 68)\n  \"12\"\n  >>> first_n(12, 69)\n  \"12\"\n  >>> first_n(12, 70)\n  \"12\"\n  >>> first_n(12, 71)\n  \"12\"\n  >>> first_n(12, 72)\n  \"12\"\n  >>> first_n(12, 73)\n  \"12\"\n  >>> first_n(12, 74)\n  \"12\"\n  >>> first_n(12, 75)\n  \"12\"\n  >>> first_n(12, 76)\n  \"12\"\n  >>> first_n(12, 77)\n  \"12\"\n  >>> first_n(12, 78)\n  \"12\"\n  >>> first_n(12, 79)\n  \"12\"\n  >>> first_n(12, 80)\n  \"12\"\n  >>> first_n(12, 81)\n  \"12\"\n  >>> first_n(12, 82)\n  \"12\"\n"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const upper = s.split('')\n   .filter(x => x.charCodeAt(0) >= 65 && x.charCodeAt(0) <= 90)\n   .reduce((acc, x) => acc + x.charCodeAt(0), 0);\n  return upper.length;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const arr = [...s.split('')].map(x => Number(x));\n  return arr.reduce((prev, current, index) => {\n    return current + (prev - arr[index + 1]);\n  }, n);\n};\n\nconsole.log(fruit_distribution(\"5 apples and 6 oranges\", 19));\nconsole.log(fruit_distribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruit_distribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruit_distribution(\"100 apples and 1 oranges\", 120));<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let node = arr[0];\n    let list = [];\n    let last = 0;\n    while (node.index!== 0) {\n        if (arr[node.index] % 2 === 0) {\n            last = node.index;\n            node = arr[node.index];\n        }\n        list.push([node.value, last]);\n        node.index--;\n    }\n    return list;\n}\n\nconst test = (n) => {\n    let arr = [];\n    for (let i = 1; i <= n; i++) {\n        arr.push(i);\n    }\n    let expected = pluck(arr);\n    let actual = pluck(arr);\n    assert(expected.length === actual.length);\n    for (let i = 0; i < expected.length; i++) {\n        assert(expected[i][0] === actual[i][0]);\n    }\n}\n\n// https://leetcode.com/problems/smallest-odd-branch/\ndescribe('smallest odd branch', () => {\n    describe('#test', () => {\n        it('should return empty list when input array is empty', () => {\n            test(0);\n        });\n        it('should return list with [value, index] of the smallest even value', () => {\n            test(3);\n        });\n        it('should return list with [value, index] of the smallest odd value', () => {\n            test(4);\n        });\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  let maxFrequency = 0\n  for (let i = 0; i < lst.length; i++) {\n    const frequency = lst[i]\n    if (frequency >= 0 && frequency > maxFrequency) {\n      max = lst[i]\n      maxFrequency = frequency\n    }\n  }\n  return max\n}\n\nexport default search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  if (lst.length === 0) {\n    return lst\n  }\n\n  const list = lst.slice()\n  list.sort((a, b) => a - b)\n\n  let current = list.pop()\n  while (list.length) {\n    let min = list.pop()\n    list.unshift(current)\n    current = min\n  }\n\n  return list\n}\n\nexport default strange_sort_list\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const s = (a + b + c) / 2\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n\n  if (a + b > c) {\n    return (s * (s - a) * (s - b) / 6)\n  } else if (b + c > a) {\n    return (s * (s - b) * (s - c) / 6)\n  } else if (a + c > b) {\n    return (s * (s - a) * (s - c) / 6)\n  } else {\n    return -1\n  }\n}\n\n/*\n  Given the length of a side, return the perimeter of the triangle with that side.\n  Example:\n  triangle_perimeter(3) == 3 + 4 + 5 = 12\n  */\nconst triangle_perimeter = (side) => {\n  return (side + 2) * 2\n}\n\n/*\n  Given the length of each side of a rectangle, return the area of the rectangle.\n  Example:\n  rectangle_area(3, 4, 5) == 15\n  */\nconst rectangle_area = (a, b, c) => {\n  const area = triangle_area(a, b, c)\n  if (area === -1) {\n    return -1\n  }\n\n  const perimeter = triangle_perimeter(a) + triangle_perimeter(b) + triangle_perimeter(c)\n  return area * perimeter\n}\n\n/*\n  Given the length of each side of a rectangle, return the length of the longest\n  side of the rectangle.\n  Example:\n  rectangle_longest(3, 4, 5) == 5\n  */\nconst rectangle_longest = (a, b, c) => {\n  const longest = Math.max(a, b, c)\n  return longest\n}\n\n/*\n  Given the length of each side of a rectangle, return the length of the shortest\n  side of the rectangle.\n  Example:\n  rectangle_shortest(3, 4, 5) == 3\n  */\nconst rectangle_shortest = (a, b, c) => {\n  const shortest = Math.min(a, b, c)\n  return shortest\n}\n\n/*\n  Given the perimeter of a rectangle, return the area of the rectangle.\n  Example:\n  rectangle_area(3, 4, 5) == 3 + 4 + 5 = 12\n  */\nconst rectangle_area = (perimeter) => {\n  return perimeter * 2\n}\n\n/*\n  Given the length of each side of a rectangle, return the length of the shortest\n  side of the rectangle.\n  Example:\n  rectangle_longest(3, 4, 5) == 5\n  */\nconst rectangle_longest = (a, b, c) => {\n  return Math.min(a, b, c)\n}\n\n/*\n  Given the length of each side of a rectangle, return the length of the longest\n  side of the rectangle.\n  Example:\n  rectangle_shortest(3, 4, 5) == 3\n  */\nconst rectangle_shortest = (a, b, c) => {\n  return Math.max(a, b, c)\n}\n\n/*\n  Given the length of the longest side of a rectangle, return the length of the\n  shortest side of the rectangle.\n  Example:\n  rectangle_shortest(3, 4, 5) == 3\n  */\nconst rectangle_shortest = (a, b, c) => {\n  return rectangle_shortest(b, a, c)\n}\n\n/*\n  Given the length of the shortest side of a rectangle, return the length of the\n  longest side of the rectangle.\n  Example:\n  rectangle_longest(3, 4, 5) == 5\n  */\nconst rectangle_longest = (a, b, c) => {\n  return rectangle_longest(b, a, c)\n}\n\n/*\n  Given the length of the longest side of a rectangle, return the length of the\n  longest side of the rectangle.\n  Example:\n  rectangle_longest(3, 4, 5) == 5\n  */\nconst rectangle_longest = (a, b, c) => {\n  return Math.max(a, b, c)\n}\n\n/*\n  Given the length of the shortest side of a rectangle, return the length of the\n  shortest side of the rectangle.\n  Example:\n  rectangle_shortest(3, 4, 5) == 3\n  */\nconst rectangle_shortest = (a, b, c) => {\n  return Math.min(a, b, c)\n}\n\n/*\n  Given the length of the longest side of a rectangle, return the length of the\n  longest side of the rectangle.\n  Example:\n  rectangle_longest(3, 4, 5) == 5\n  */\nconst rectangle_longest = (a, b, c) => {\n  return Math.max(a, b, c)\n}\n\n/*\n  Given the length of the shortest side of a rectangle, return the length of the\n  longest side of the rectangle.\n  Example:\n  rectangle_shortest(3, 4, 5) == 3\n  */\nconst rectangle_shortest = (a, b, c) => {\n  return Math.min(a, b, c)\n}\n\n/*\n  Given the length of the shortest side of a rectangle, return the length of the\n  longest side of the rectangle.\n  Example:\n  rectangle_shortest(3, 4, 5) == 3\n  */\nconst rectangle_longest = (a, b, c) => {\n  return Math.max(a, b, c)\n}\n\n/*\n  Given the length of the shortest side of a rectangle, return the length of the\n  longest side of the rectangle.\n  Example:\n  rectangle_shortest(3, 4, 5) == 3\n  */\nconst rectangle_longest = (a, b, c) =>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n    const isPalindrome = q.every((i, idx) => i === q[idx + 1 - idx]);\n    const isBalanced = q.every((i, idx) => isPalindrome && (q[idx] + i) <= w);\n    return isBalanced;\n}\n\n// [3, 2, 3]\n// [1, 2, 3]\n// [2, 3, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 2, 1]\n// [3, 2, 1]\n// [2, 1, 2]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [2, 1, 2]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [1, 2, 2]\n// [2, 1, 2]\n// [1, 2, 2]\n// [1, 2, 1]\n// [1, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1, 1, 1]\n// [1, 1, 2]\n// [2, 1, 1]\n// [1, 1, 2]\n// [1, 2, 1]\n// [1, 2, 1]\n// [2, 2, 1]\n// [1, 2, 2]\n// [2, 2, 2]\n// [1,"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  if (!Array.isArray(arr)) {\n    return 0;\n  }\n\n  const arrLength = arr.length;\n  let min = Infinity;\n\n  for (let i = 0; i < arrLength; i += 1) {\n    if (arr[i] < arr[arrLength - i - 1]) {\n      min = Math.min(min, arrLength - i - 1);\n    }\n  }\n\n  return min;\n};\n\nmodule.exports = smallest_change;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (lst1.length > lst2.length) {\n    return [...lst1].filter((val) => {\n      return lst2.includes(val);\n    });\n  }\n  return lst1;\n};\n\nmodule.exports = total_match;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  if (a < 100) {\n    return false;\n  }\n  const result = Math.pow(a, 2) % 1e9 + 1e9\n  const is_prime = (n) => {\n    if (n === 2) {\n      return true\n    }\n    if (n === 1) {\n      return false\n    }\n    let count = 2\n    while (n % count === 0) {\n      count += 1\n    }\n    return count === 2\n  }\n  let is_multiply_prime_temp = false\n  let count = 1\n  while (result % count!== 0) {\n    if (is_prime(result)) {\n      is_multiply_prime_temp = true\n      break\n    }\n    count++\n  }\n  return is_multiply_prime_temp\n}\n\nexport default is_multiply_prime\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  let n_int = n;\n  while (n_int > 0) {\n    if (x % n_int === 0) {\n      return true;\n    }\n    n_int = n_int / 10;\n  }\n  return false;\n};\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const b = Math.sqrt(a)\n  return (b * b) == a\n}\n\n// const iscube = (a) => {\n//   const b = Math.sqrt(a)\n//   return (b * b) == a\n// }\n\n// const iscube = (a) => {\n//   return Math.sqrt(a) * Math.sqrt(a) == a\n// }\n\n// const iscube = (a) => {\n//   return a.reduce(function(sum, number) {\n//     return sum + number * number;\n//   }, 0) == Math.pow(a, 2)\n// }\n\n// const iscube = (a) => {\n//   return a.reduce(function(sum, number) {\n//     return sum + number * number;\n//   }, 0) == Math.pow(a, 2)\n// }\n\n// const iscube = (a) => {\n//   return (a * a) % (Math.pow(10, 9) + 7) == 0\n// }\n\n// const iscube = (a) => {\n//   return (a * a) % (Math.pow(10, 9) + 7) == 0\n// }\n\nconst iscube = (a) => {\n  return a.reduce(function(sum, number) {\n    return sum + number * number;\n  }, 0) % (Math.pow(10, 9) + 7) == 0\n}\n\nexport default iscube\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let prime = 2,\n    i = 0,\n    s = 0,\n    x = 0,\n    p = 0;\n\n  if (num.length === 0) {\n    return 0;\n  }\n\n  for (; i < num.length; i += 1) {\n    s += parseInt(num[i]);\n  }\n\n  while (prime <= Math.pow(10, 8)) {\n    x = prime * parseInt(num[i]);\n    if (x < parseInt(num[i + 1])) {\n      break;\n    }\n    prime += 1;\n  }\n\n  while (x < parseInt(num[i + 1])) {\n    if (x % prime === 0) {\n      p += 1;\n    }\n    x += 1;\n  }\n\n  return p;\n};\n\n// console.log(hex_key(\"AB\"));\n// console.log(hex_key(\"1077E\"));\n// console.log(hex_key(\"ABED1A33\"));\n// console.log(hex_key(\"123456789ABCDEF0\"));\n// console.log(hex_key(\"2020\"));\nconsole.log(hex_key(\"ABCD1A2E1\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  if (decimal === 0) {\n    return 'db';\n  }\n  let binary = '';\n  while (decimal > 0) {\n    if (decimal % 2 === 1) {\n      binary += '1';\n    } else {\n      binary += '0';\n    }\n    decimal = Math.floor(decimal / 2);\n  }\n  return 'db' + binary + 'db';\n};\n\nconst binary_to_decimal = (binary) => {\n  let decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1);\n    }\n  }\n  return decimal;\n};\n\nexport default {\n  decimal_to_binary,\n  binary_to_decimal,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  const len = s.length\n  if (len < 3) {\n    return false\n  }\n  const a = s.charAt(0)\n  const b = s.charAt(1)\n  const c = s.charAt(2)\n  const d = s.charAt(len - 1)\n  const e = s.charAt(len - 2)\n  const f = s.charAt(len - 3)\n  const g = s.charAt(len - 4)\n  const h = s.charAt(len - 5)\n  const sum = a + b + c + d + e + f + g + h\n  const diff = Math.abs(sum - 9)\n  return diff <= 1\n}\n\n/*\n  Your task is to implement a function that takes an array of strings as input and returns a boolean.\n  If all the strings in the array are happy, return true.\n  Otherwise return false.\n  Example:\n  is_happy([a, b, c, d, e, f, g]) => true\n  is_happy([a, b, c, d, e, f, g, h]) => false\n  */\nconst is_happy_array = (strings) => {\n  return strings.every((s) => is_happy(s))\n}\n\nconst test = () => {\n  console.log(is_happy(\"abcd\"))\n  console.log(is_happy(\"aabb\"))\n  console.log(is_happy(\"adb\"))\n  console.log(is_happy(\"xyy\"))\n  console.log(is_happy_array([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"]))\n  console.log(is_happy_array([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"]))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  let sorted_grades = [...grades].sort(compare)\n  let len = sorted_grades.length\n  let result = []\n  for (let i = 0; i < len; i++) {\n    let grade = sorted_grades[i]\n    if (grade > 3.7) {\n      result.push('A+')\n    } else if (grade > 3.3) {\n      result.push('A')\n    } else if (grade > 3.0) {\n      result.push('A-')\n    } else if (grade > 2.7) {\n      result.push('B+')\n    } else if (grade > 2.3) {\n      result.push('B')\n    } else if (grade > 2.0) {\n      result.push('B-')\n    } else if (grade > 1.7) {\n      result.push('C+')\n    } else if (grade > 1.3) {\n      result.push('C')\n    } else if (grade > 1.0) {\n      result.push('C-')\n    } else if (grade > 0.7) {\n      result.push('D+')\n    } else if (grade > 0.0) {\n      result.push('D')\n    } else if (grade > 0.0) {\n      result.push('D-')\n    } else {\n      result.push('E')\n    }\n  }\n  return result\n}\n\nexport default numerical_letter_grade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let str = string.length;\n  for (let i = 2; i <= Math.sqrt(str); i++) {\n    if (str % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default prime_length;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i + 1;\n    while (start < end) {\n      if (start * end === i) {\n        count++;\n      }\n      start++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given two numbers a and b, return the count of the numbers of n-digit\n  positive integers that start or end with a and b.\n  */\nconst starts_and_ends = (a, b) => {\n  let count = 0;\n  for (let i = 1; i <= a; i++) {\n    for (let j = 1; j <= b; j++) {\n      if (i * j === a * b) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with n.\n  */\nconst starts_one_ends_with_n = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    let start = i;\n    let end = i + n;\n    while (start < end) {\n      if (start * end === i) {\n        count++;\n      }\n      start++;\n    }\n  }\n  return count;\n};\n\n/*\n  Given two numbers a and b, return the count of the numbers of n-digit\n  positive integers that start with a and end with b.\n  */\nconst starts_and_ends_with_n = (a, b) => {\n  let count = 0;\n  for (let i = 1; i <= a; i++) {\n    for (let j = 1; j <= b; j++) {\n      if (i * j === a * b) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with n.\n  */\nconst starts_one_ends_with_n_from_m = (n, m) => {\n  let count = 0;\n  for (let i = 1; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i * j === m * n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given two numbers a and b, return the count of the numbers of n-digit\n  positive integers that start with a and end with b.\n  */\nconst starts_and_ends_with_n_from_m = (a, b, m) => {\n  let count = 0;\n  for (let i = 1; i <= a; i++) {\n    for (let j = 1; j <= b; j++) {\n      if (i * j === m * n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1 and end with n.\n  */\nconst starts_one_ends_with_n_from_m_from_k = (n, k) => {\n  let count = 0;\n  for (let i = 1; i <= k; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i * j === k * n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Given two numbers a and b, return the count of the numbers of n-digit\n  positive integers that start with a and end with b.\n  */\nconst starts_and_ends_with_n_from_m_from_k = (a, b, k) => {\n  let count = 0;\n  for (let i = 1; i <= a; i++) {\n    for (let j = 1; j <= b; j++) {\n      if (i * j === k * n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nexport {\n  starts_one_ends,\n  starts_one_ends_with_n,\n  starts_and_ends,\n  starts_and_ends_with_n,\n  starts_one_ends_with_n_from_m,\n  starts_and_ends_with_n_from_m,\n  starts_one_ends_with_n_from_m_from_k,\n  starts_and_ends_with_n_from_m_from_k\n};\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let binary = \"\";\n  \n  while (N > 0) {\n    binary += (N % 2)? \"1\" : \"0\";\n    N = Math.floor(N / 2);\n  }\n  \n  return binary;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.reduce((a, b) => {\n    return a + b;\n  });\n};\n\nadd([4, 2, 6, 7]);\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const arr = s.split(' ')\n  let new_arr = []\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp[j].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_2 = (s) => {\n  const arr = s.split(' ')\n  let new_arr = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = 0\n  for (let k = 0; k < arr.length; k++) {\n    let tmp = arr[k].split('')\n    let m = 0\n    for (let n = 0; n < tmp.length; n++) {\n      tmp[n] = (tmp[n].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_3 = (s) => {\n  let arr = s.split(' ')\n  let new_arr = []\n  let tmp = []\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp[j].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_4 = (s) => {\n  let arr = s.split(' ')\n  let new_arr = []\n  let tmp = []\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp[j].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_5 = (s) => {\n  let arr = s.split(' ')\n  let new_arr = []\n  let tmp = []\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp[j].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_6 = (s) => {\n  let arr = s.split(' ')\n  let new_arr = []\n  let tmp = []\n  let i = 0\n  let j = 0\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    let m = 0\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp[j].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_7 = (s) => {\n  let arr = s.split(' ')\n  let new_arr = []\n  let tmp = []\n  let i = 0\n  let j = 0\n  let k = 0\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    let m = 0\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp[j].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_8 = (s) => {\n  let arr = s.split(' ')\n  let new_arr = []\n  let tmp = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    let m = 0\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp[j].charCodeAt(0) + 1).toString(16)\n    }\n    new_arr.push(tmp.join(''))\n  }\n  return new_arr.join(' ')\n}\n\nconst anti_shuffle_9 = (s) => {\n  let arr = s.split(' ')\n  let new_arr = []\n  let tmp = []\n  let i = 0\n  let j = 0\n  let k = 0\n  let n = 0\n  for (let i = 0; i < arr.length; i++) {\n    let tmp = arr[i].split('')\n    let m = 0\n    for (let j = 0; j < tmp.length; j++) {\n      tmp[j] = (tmp"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  if (lst.length === 0) return [];\n\n  let rows = [];\n  for (let i = 0; i < lst.length; i++) {\n    rows.push([]);\n    for (let j = 0; j < lst[i].length; j++) {\n      if (i === x) {\n        rows[i].push(j);\n      } else if (j < lst[i].length - 1) {\n        rows[i].push(j);\n      }\n    }\n  }\n\n  return rows.sort((a, b) => {\n    if (a[0] < b[0]) {\n      return -1;\n    } else if (a[0] > b[0]) {\n      return 1;\n    } else {\n      return b[1] - a[1];\n    }\n  }).sort((a, b) => {\n    if (a[0] < b[0]) {\n      return 1;\n    } else if (a[0] > b[0]) {\n      return -1;\n    } else {\n      return b[1] - a[1];\n    }\n  });\n};\n\nconsole.log(get_row([\n  [1, 2, 3, 4, 5, 6],\n  [1, 2, 3, 4, 1, 6],\n  [1, 2, 3, 4, 5, 1]\n], 3));\nconsole.log(get_row([], 3));\nconsole.log(get_row([[], [1], [1, 2, 3]], 2));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let arr = array.slice(0);\n  let len = arr.length;\n  let sorted = false;\n\n  while (!sorted) {\n    let index = 0;\n    let count = 0;\n    while (index < len) {\n      let sum = arr[index];\n      count += sum;\n      arr[index] = count;\n      index++;\n    }\n    sorted = (count % 2 === 0);\n  }\n\n  return arr;\n};\n\nexport default sort_array;<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let n = s.length\n  let ret = ''\n  for (let i = 0; i < n; i++) {\n    ret += s[i].charCodeAt(0)\n  }\n  ret = ret.toLowerCase()\n  for (let i = 0; i < n; i++) {\n    let index = ret.indexOf(s[i].charAt(0))\n    ret = ret.substring(index + 1, index + 1)\n  }\n  return ret\n}\n\nconsole.log(encrypt('hi'))\nconsole.log(encrypt('asdfghjkl'))\nconsole.log(encrypt('gf'))\nconsole.log(encrypt('et'))\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  const {length} = lst\n  if (length === 0) return null\n  const smallest = lst[0]\n  const index = smallest\n  const [first, second] = [smallest, largest(lst.slice(1))]\n  if (first <= second) return first\n  return second\n}\n\nconst largest = (lst) => {\n  const [smallest,...rest] = lst\n  return smallest\n}\n\nconsole.log(next_smallest([1, 2, 3, 4, 5]))\nconsole.log(next_smallest([5, 1, 4, 3, 2]))\nconsole.log(next_smallest([2, 1, 4, 3, 5]))\nconsole.log(next_smallest([1, 2, 3, 4, 5]));<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let i = 0;\n  let b = 0;\n  let l = S.length;\n  let s = S.split(\" \");\n  let w;\n  for(i = 0; i < l; i++){\n    w = s[i].charAt(0);\n    if(w === \"I\"){\n      b++;\n    }\n  }\n  return b;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (typeof x!== 'number' || typeof y!== 'number' || typeof z!== 'number') return false;\n  return (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z));\n};\n\n// Create a function that takes 2 arrays of numbers.\n// Returns true if one of the numbers in the first array is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\nconst any_int_arr = (a, b) => {\n  if (a.length!== 2 || b.length!== 2) return false;\n  if (!any_int(a[0], b[1], b[0])) return false;\n  return true;\n};\n\n// Create a function that takes two arrays of numbers.\n// Returns true if one of the numbers in the first array is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\nconst any_int_arr_2 = (a, b) => {\n  if (a.length!== 2 || b.length!== 2) return false;\n  const x = a[0];\n  const y = a[1];\n  const z = b[0];\n  const s = b[1];\n  return (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z));\n};\n\n// Create a function that takes 2 arrays of numbers.\n// Returns true if one of the numbers in the first array is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\nconst any_int_arr_3 = (a, b) => {\n  if (a.length!== 2 || b.length!== 2) return false;\n  const x = a[0];\n  const y = a[1];\n  const z = b[0];\n  const s = b[1];\n  const t = b[1];\n  return (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z));\n};\n\nconst any_int_arr_4 = (a, b) => {\n  if (a.length!== 2 || b.length!== 2) return false;\n  const x = a[0];\n  const y = a[1];\n  const z = b[0];\n  const s = b[1];\n  const t = b[1];\n  const u = b[0];\n  return (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y));\n};\n\nconst any_int_arr_5 = (a, b) => {\n  if (a.length!== 2 || b.length!== 2) return false;\n  const x = a[0];\n  const y = a[1];\n  const z = b[0];\n  const s = b[1];\n  const t = b[1];\n  const u = b[0];\n  const v = b[1];\n  return (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y));\n};\n\n// Create a function that takes two arrays of numbers.\n// Returns true if one of the numbers in the first array is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\nconst any_int_arr_6 = (a, b) => {\n  if (a.length!== 2 || b.length!== 2) return false;\n  const x = a[0];\n  const y = a[1];\n  const z = b[0];\n  const s = b[1];\n  const t = b[1];\n  const u = b[0];\n  const v = b[1];\n  const w = b[0];\n  const e = b[1];\n  const f = b[0];\n  const g = b[1];\n  return (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y)) || (x === (y + z)) || (x === (y - z)) || (x === (z - y));\n};\n\n// Create a function that takes two arrays of numbers.\n// Returns true if one of the numbers in the first array is equal to the sum of the other two, and all numbers are integers.\n// Returns false in any other cases.\nconst any_int_arr_7 = (a, b) => {\n  if (a.length!== 2 || b.length!== 2) return false;\n"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.split('').map((letter, index) => {\n    let char = letter.charCodeAt(0);\n    let vowel = char % 26;\n    let vowelIndex = char - vowel;\n    return vowelIndex === 0? letter : letter.toUpperCase();\n  }).join('');\n};\n\nconst decode = (message) => {\n  return message.split('').map((letter, index) => {\n    let char = letter.charCodeAt(0);\n    let vowel = char % 26;\n    let vowelIndex = char - vowel;\n    return vowelIndex === 0? letter.toLowerCase() : letter;\n  }).join('');\n};\n\nmodule.exports = {\n  encode,\n  decode\n};<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  //  console.log(lst);\n  const l = lst.length;\n  const n = lst[0];\n  const p = (n === 0)? 1 : 2;\n  let max = n;\n  for (let i = 1; i < l; i++) {\n    const n = lst[i];\n    if (n === 0) {\n      continue;\n    }\n    if (n > max) {\n      max = n;\n    }\n    if (p <= max) {\n      p *= n;\n    }\n  }\n  return p;\n};\n\nexport {skjkasdkd};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_2 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_3 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_4 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_5 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_6 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_7 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_8 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_9 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_10 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_11 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_12 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_13 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_14 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_15 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_16 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_17 = (dict) => {\n  for (const key of Object.keys(dict)) {\n    if (!key.match(/[A-Za-z]+/)) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst check_dict_case_18 = (dict) => {\n  for (const key of Object.keys(dict"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let arr = []\n  let i = 2\n  while (i <= n) {\n    if (isPrime(i)) {\n      arr.push(i)\n      i++\n    } else {\n      i++\n    }\n  }\n  return arr\n}\n\n// Checks if n is prime\nconst isPrime = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n// Checks if a number is prime\nconst isPrime_num = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  let i = 3\n  while (i <= Math.sqrt(n)) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_2 = (n) => {\n  let i = 2\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_3 = (n) => {\n  let i = 3\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_4 = (n) => {\n  let i = 5\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_5 = (n) => {\n  let i = 7\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_6 = (n) => {\n  let i = 11\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_7 = (n) => {\n  let i = 13\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_8 = (n) => {\n  let i = 17\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_9 = (n) => {\n  let i = 19\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_10 = (n) => {\n  let i = 23\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_11 = (n) => {\n  let i = 29\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_12 = (n) => {\n  let i = 31\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_13 = (n) => {\n  let i = 37\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_14 = (n) => {\n  let i = 41\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_15 = (n) => {\n  let i = 43\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_16 = (n) => {\n  let i = 47\n  while (i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n\n// Checks if a number is a prime number\nconst isPrime_num_17 = (n) => {\n  let i = 53\n  while (i <= n) {\n    if (n % i === 0) {\n      return false"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a_units = Array.from(a),\n      b_units = Array.from(b),\n      res = 0;\n  a_units.forEach((unit, index) => {\n    res += (b_units[index] * unit);\n  });\n  return res;\n}\n\n/*\n  Complete the function that takes two integers and returns the sum of their\n  powers.\n  Assume the input is always valid.\n  Examples:\n  sumPowers(4, 2) should return 8.\n  sumPowers(7, 5) should return 495.\n  sumPowers(4, 7) should return 8.\n  sumPowers(7, 2) should return 49.\n  sumPowers(2, 7) should return 0.\n  sumPowers(2, 2) should return 4.\n  sumPowers(2, 4) should return 8.\n  */\nconst sumPowers = (a, b) => {\n  let a_units = Array.from(a),\n      b_units = Array.from(b),\n      res = 0;\n  a_units.forEach((unit, index) => {\n    res += Math.pow(b_units[index], unit);\n  });\n  return res;\n}\n\n/*\n  Complete the function that takes two integers and returns the sum of their\n  difference.\n  Assume the input is always valid.\n  Examples:\n  sumDifference(100, 2) should return 98.\n  sumDifference(1000, 4) should return 9900.\n  sumDifference(1, 100) should return 9.\n  sumDifference(101, 102) should return 0.\n  sumDifference(1, 1) should return 0.\n  sumDifference(1, 2) should return 1.\n  sumDifference(4, 3) should return 3.\n  */\nconst sumDifference = (a, b) => {\n  let a_units = Array.from(a),\n      b_units = Array.from(b),\n      res = 0;\n  a_units.forEach((unit, index) => {\n    res += a_units[index] - b_units[index];\n  });\n  return res;\n}\n\n/*\n  Complete the function that takes two strings and returns the concatenation\n  of them.\n  Assume the input is always valid.\n  Examples:\n  concatenate('abc', 'xyz') should return abcxyz.\n  concatenate('abc', 'def') should return abcdef.\n  concatenate('abc', 'xyz') should return abcxyz.\n  concatenate('xyz', 'abc') should return abcxyz.\n  concatenate('xyz', 'xyz') should return xyzxyz.\n  concatenate('xyz', 'xyz') should return xyzxyz.\n  */\nconst concatenate = (a, b) => {\n  return a + b;\n}\n\n/*\n  Complete the function that takes two strings and returns the minimum of the\n  lengths of the two strings.\n  Assume the input is always valid.\n  Examples:\n  minimumLength('abc', 'xyz') should return 3.\n  minimumLength('abc', 'xyz') should return 3.\n  minimumLength('abc', 'xyz') should return 3.\n  minimumLength('xyz', 'abc') should return 3.\n  minimumLength('xyz', 'xyz') should return 1.\n  minimumLength('xyz', 'xyz') should return 1.\n  */\nconst minimumLength = (a, b) => {\n  return Math.min(a.length, b.length);\n}\n\n/*\n  Complete the function that takes two strings and returns the first string with\n  the largest common prefix.\n  Assume the input is always valid.\n  Examples:\n  commonPrefix('a', 'a') should return 'a'.\n  commonPrefix('a', 'b') should return 'a'.\n  commonPrefix('a', 'ab') should return 'a'.\n  commonPrefix('abc', 'ab') should return 'a'.\n  commonPrefix('ab', 'abc') should return 'a'.\n  commonPrefix('a', 'abc') should return 'a'.\n  commonPrefix('abc', 'def') should return 'a'.\n  commonPrefix('a', 'def') should return 'a'.\n  commonPrefix('abc', 'def') should return 'a'.\n  commonPrefix('xyz', 'xyz') should return 'x'.\n  commonPrefix('xyz', 'xyz') should return 'x'.\n  commonPrefix('xyz', 'xyz') should return 'x'.\n  */\nconst commonPrefix = (a, b) => {\n  const min = Math.min(a.length, b.length);\n  let i = 0;\n  while (i < min && a.charAt(i) === b.charAt(i)) {\n    i++;\n  }\n  return a.substring(0, i);\n}\n\n/*\n  Complete the function that takes two strings and returns the first string with\n  the largest common suffix.\n  Assume the input is always valid.\n  Examples:\n  commonSuffix('a', 'a') should return 'a'.\n  commonSuffix('a', 'b') should return 'b'.\n  commonSuffix('a', 'ab') should return 'ab'.\n  commonSuffix('abc', 'ab') should return 'ab'.\n  commonSuffix('ab', 'abc') should return 'ab'.\n  commonSuffix('a', 'abc') should return 'abc'.\n  commonSuffix('abc', 'def') should return 'def'.\n  commonSuffix('a', 'def') should return 'def'.\n  commonSuffix('abc', 'def') should return 'def'.\n  commonSuffix('xyz', 'xyz') should return 'xyz'.\n  commonSuffix('xyz', 'xyz') should return 'xyz'.\n  commonSuffix('xyz', '"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  const count = 0\n  for (let i = 0; i < s.length; i+=2) {\n    count += s[i].toUpperCase() === s[i + 1].toUpperCase()\n  }\n  return count\n}\n\nexport default count_upper\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  const parts = value.toString().split(\".\");\n  const int_value = parts[0];\n  const dec_value = parts[1];\n  const int_parts = int_value.split(\"\");\n  const dec_parts = dec_value.split(\"\");\n  const int_length = int_parts.length;\n  const dec_length = dec_parts.length;\n  const int_index = Math.abs(int_length - dec_length);\n  const dec_index = Math.abs(int_length - dec_length);\n  const index = Math.min(int_index, dec_index);\n  const int_part = int_parts.slice(0, index).join(\"\");\n  const dec_part = dec_parts.slice(0, index).join(\"\");\n  const value = int_part + dec_part;\n  const abs = Math.abs(value);\n  if (abs % 1 === 0) {\n    return value;\n  } else {\n    return Math.round(value);\n  }\n};\n\nmodule.exports = closest_integer;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n    const levels = []\n    for (let i = 0; i < n; i += 2) {\n        levels.push(i + 1)\n    }\n    return levels\n}\n\n/**\n  Given a positive integer n, return the number of ways to make a pile of n\n  level of stones.\n\n  Examples:\n  >>> n = 4\n  >>> make_piles(n)\n  [4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36]\n  */\nconst make_piles = (n) => {\n    const count = make_a_pile(n)\n    const ways = []\n    for (let i = 0; i < count.length; i++) {\n        ways.push(count[i] * count[i + 1])\n    }\n    return ways\n}\n\n/**\n  Return the total number of ways to make a pile of n level of stones.\n\n  Examples:\n  >>> n = 5\n  >>> make_pile_ways(n)\n  [25, 49, 81, 125, 201, 285]\n  */\nconst make_pile_ways = (n) => {\n    return make_a_pile(n)\n       .map((x) => x * (x + 1))\n       .reduce((acc, x) => acc + x)\n}\n\n/**\n  Given a positive integer n, return the number of ways to make a pile of n\n  level of stones.\n\n  Examples:\n  >>> n = 4\n  >>> make_pile_ways(n)\n  [4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56, 60, 64]\n  */\nconst make_pile_ways = (n) => {\n    const count = make_a_pile(n)\n    const ways = []\n    for (let i = 0; i < count.length; i++) {\n        ways.push(count[i] * (count[i + 1] + 1))\n    }\n    return ways\n}\n\n/**\n  Returns the number of ways to make a pile of n level of stones.\n\n  Examples:\n  >>> n = 5\n  >>> make_pile_ways(n)\n  [25, 49, 81, 125, 201, 285]\n  */\nconst make_pile_ways = (n) => {\n    return make_a_pile(n)\n       .map((x) => x * (x + 1))\n       .reduce((acc, x) => acc + x)\n}\n\nconst make_pile_ways = (n) => {\n    return make_a_pile(n)\n       .map((x) => x * (x + 1))\n       .reduce((acc, x) => acc + x)\n}\n\n/**\n  Returns the number of ways to make a pile of n level of stones.\n\n  Examples:\n  >>> n = 5\n  >>> make_pile_ways(n)\n  [25, 49, 81, 125, 201, 285]\n  */\nconst make_pile_ways = (n) => {\n    return make_a_pile(n)\n       .map((x) => x * (x + 1))\n       .reduce((acc, x) => acc + x)\n}\n\n/**\n  Returns the number of ways to make a pile of n level of stones.\n\n  Examples:\n  >>> n = 5\n  >>> make_pile_ways(n)\n  [25, 49, 81, 125, 201, 285]\n  */\nconst make_pile_ways = (n) => {\n    return make_a_pile(n)\n       .map((x) => x * (x + 1))\n       .reduce((acc, x) => acc + x)\n}\n\n/**\n  Returns the number of ways to make a pile of n level of stones.\n\n  Examples:\n  >>> n = 5\n  >>> make_pile_ways(n)\n  [25, 49, 81, 125, 201, 285]\n  */\nconst make_pile_ways = (n) => {\n    return make_a_pile(n)\n       .map((x) => x * (x + 1))\n       .reduce((acc, x) => acc + x)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const words = [];\n  let current_word = '';\n  let is_word_start = false;\n  \n  for (let i = 0; i < s.length; i++) {\n    if (s[i] ==='') {\n      if (is_word_start) {\n        words.push(current_word);\n        current_word = '';\n      }\n    } else if (s[i] === ',' || s[i] ==='') {\n      if (is_word_start) {\n        current_word += s[i];\n      }\n    } else if (s[i] === '\"') {\n      if (s[i - 1] === '\\\\') {\n        // skip over the '\"' and the next char\n        i++;\n      } else {\n        is_word_start = true;\n      }\n    } else {\n      current_word += s[i];\n    }\n  }\n  \n  if (current_word) {\n    words.push(current_word);\n  }\n  \n  return words;\n}\n\nconsole.log(words_string('\"Hi, my name is John\"'));\nconsole.log(words_string('One, two, three, four, five, six'));\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconst choose_num_b = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result[0] : -1;\n};\n\nconst choose_num_c = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_d = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  const result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_e = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_f = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_g = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_h = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_i = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_j = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_k = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_l = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2 : -1;\n};\n\nconst choose_num_m = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n  let result = [];\n  for (let i = x; i <= y; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i);\n    }\n  }\n  return result.length > 0? result.reduce((acc, n) => acc + n, 0) / 2"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let avg = 0, i = n;\n  for (; i <= m; i++) {\n    avg += i;\n  }\n  return (Math.round(avg / (m - n + 1))).toString(2);\n}\n\nconst round_avg = (n, m) => {\n  return (Math.round(n + m / 2)).toString(2);\n}\n\nmodule.exports = {\n  rounded_avg,\n  round_avg\n}\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  const xs = Array.from(x)\n  const ans = []\n  for (let i = 0; i < xs.length; i++) {\n    const x_str = xs[i].toString()\n    let cur = x_str.replace(/\\d/g, '')\n    let prev = cur\n    while (cur.length > 0) {\n      if (cur.length % 2!== 0) {\n        break\n      }\n      prev = cur\n      cur = cur.replace(/\\d/g, '')\n    }\n    if (cur.length === 0) {\n      ans.push(xs[i])\n    }\n    if (cur.length > prev.length) {\n      break\n    }\n  }\n  return ans\n}\n\nconsole.log(unique_digits([15, 33, 1422, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const arr_sorted = arr.sort((a, b) => a - b);\n  const new_arr = arr_sorted.reverse();\n  const new_arr_sorted = new_arr.sort((a, b) => b - a);\n  return new_arr_sorted.map((el, i) => i + 1 +'' + el.toString());\n};\n\nconst by_digit = (arr) => {\n  const new_arr = arr.sort((a, b) => a - b);\n  return new_arr.reverse().map((el, i) => i + 1 +'' + el.toString());\n};\n\nconst by_digit_sorted = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_sorted_reverse = (arr) => {\n  return arr.reverse().sort((a, b) => a - b);\n};\n\nconst by_digit_sorted_reverse_sort = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_sorted_reverse_reverse = (arr) => {\n  return arr.reverse().sort((a, b) => a - b);\n};\n\nconst by_digit_sorted_reverse_reverse_sort = (arr) => {\n  return arr.reverse().sort((a, b) => b - a);\n};\n\nconst by_digit_sorted_reverse_reverse_reverse = (arr) => {\n  return arr.reverse().sort((a, b) => a - b);\n};\n\nconst by_digit_sorted_reverse_reverse_reverse_reverse = (arr) => {\n  return arr.reverse().sort((a, b) => b - a);\n};\n\nconst by_digit_sorted_reverse_reverse_reverse_reverse = (arr) => {\n  return arr.reverse().sort((a, b) => a - b);\n};\n\nconst by_digit_sorted_reverse_reverse_reverse_reverse_reverse = (arr) => {\n  return arr.reverse().sort((a, b) => b - a);\n};\n\nconst main = () => {\n  const arr = [1, -1, 55];\n  console.log(by_length(arr));\n  console.log(by_digit(arr));\n  console.log(by_digit_sorted(arr));\n  console.log(by_digit_sorted_reverse(arr));\n  console.log(by_digit_sorted_reverse_sort(arr));\n  console.log(by_digit_sorted_reverse_reverse(arr));\n  console.log(by_digit_sorted_reverse_reverse_reverse(arr));\n  console.log(by_digit_sorted_reverse_reverse_reverse_reverse(arr));\n  console.log(by_digit_sorted_reverse_reverse_reverse_reverse_reverse(arr));\n  console.log(by_digit_sorted_reverse_reverse_reverse_reverse_reverse_reverse(arr));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [1]\n  for (let i = 2; i <= n; i++) {\n    result.push(i)\n    result = result.concat(Array.prototype.slice.call(result).reverse())\n  }\n  return result\n}\n\nf(5)\n//=> [1, 2, 6, 24, 15]\n\nf(6)\n//=> [1, 2, 6, 12, 6, 1]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const odd_palindrome = () => {\n    const odd = 0\n    const odd_cursor = n - 1\n    while (odd_cursor > 0) {\n      const odd_p = odd_cursor\n      odd_cursor -= 2\n      odd += 1\n      if (odd_p === n - 1) {\n        return true\n      }\n    }\n    return false\n  }\n\n  const even_palindrome = () => {\n    const even = 0\n    const even_cursor = n - 1\n    while (even_cursor > 0) {\n      const even_p = even_cursor\n      even_cursor -= 2\n      even += 1\n      if (even_p === n - 1) {\n        return true\n      }\n    }\n    return false\n  }\n\n  const palindrome = () => {\n    const palindrome_cursor = n - 1\n    while (palindrome_cursor > 0) {\n      const palindrome_p = palindrome_cursor\n      palindrome_cursor -= 2\n      if (palindrome_p === n - 1) {\n        return true\n      }\n    }\n    return false\n  }\n\n  return (odd_palindrome(), even_palindrome(), palindrome())\n}\n\nexport default even_odd_palindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let num = arr.reduce((sum, curr) => sum + curr.toString().split('.').reduce((pSum, p) => pSum + p, 0), 0)\n  return num > 0\n}\n\nconst count_nums = (arr) => {\n  let num = arr.reduce((sum, curr) => sum + curr.toString().split('.').reduce((pSum, p) => pSum + p, 0), 0)\n  return num > 0\n}\n\nconsole.log(count_nums([1, 1, 2]))\nconsole.log(count_nums([-1, 11, -11]))\nconsole.log(count_nums([-1, 11, -11, -1, -1]))\nconsole.log(count_nums([1, 1, 2, -1, 1, 1]))\nconsole.log(count_nums([1, 1, 2, -1, 1, 1, -1, -1]))\nconsole.log(count_nums([1, 1, 2, -1, 1, 1, -1, -1, -1, -1]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  if (arr.length === 0) {\n    return true\n  }\n  \n  let max_ball = arr[0]\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max_ball) {\n      max_ball = arr[i]\n    }\n  }\n  \n  let count = 0\n  while (true) {\n    let max_ball_index = arr.indexOf(max_ball)\n    let min_ball_index = arr.indexOf(arr[max_ball_index - 1])\n    if (min_ball_index === -1) {\n      return true\n    }\n    let difference = max_ball - arr[min_ball_index]\n    for (let i = 0; i < difference; i++) {\n      arr.splice(min_ball_index + 1, 0, arr[min_ball_index])\n    }\n    arr.splice(max_ball_index, 1)\n    count += 1\n  }\n}\n\nconsole.log(move_one_ball([3, 4, 5, 1, 2]))\nconsole.log(move_one_ball([3, 5, 4, 1, 2]))\nconsole.log(move_one_ball([3, 5, 4, 1, 2, 3]))\nconsole.log(move_one_ball([3, 5, 4, 1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  let first = lst1.shift();\n  let second = lst2.shift();\n  if(first === second) {\n    return \"YES\";\n  } else if(first > second) {\n    return \"NO\";\n  }\n  return exchange(lst1, lst2);\n};\n\nconst lst1 = [1, 2, 3, 4];\nconst lst2 = [1, 5, 3, 4];\nconsole.log(exchange(lst1, lst2));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const count = {};\n  const countMax = {};\n  const letters = test.split('');\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i];\n    count[letter] = (count[letter] || 0) + 1;\n    countMax[letter] = (countMax[letter] || 0) + 1;\n  }\n  return countMax;\n};\n\n// TESTING\n//console.log(histogram('a b c'));\n//console.log(histogram('a b c a b'));\n//console.log(histogram('a b c a b b'));\n//console.log(histogram('a b c a b b a'));\n//console.log(histogram(''));\n\n/*\nGiven a string representing a space separated list of numbers, return a dictionary of the number with the most repetition.\nIf several numbers have the same occurrence, return all of them.\n\nExample:\n\nhistogram('1 2 3 4') == {'1': 4, '2': 3, '3': 2, '4': 1}\nhistogram('1 2 3 4 5') == {'1': 5, '2': 4, '3': 3, '4': 2}\nhistogram('1 2 3 4 3 2 1') == {'1': 6, '2': 5, '3': 4, '4': 3}\nhistogram('') == {}\n\n*/\nconst histogram = (test) => {\n  const count = {};\n  const countMax = {};\n  const numbers = test.split('');\n  for (let i = 0; i < numbers.length; i++) {\n    const number = parseInt(numbers[i]);\n    count[number] = (count[number] || 0) + 1;\n    countMax[number] = (countMax[number] || 0) + 1;\n  }\n  return countMax;\n};\n\n// TESTING\n//console.log(histogram('1 2 3 4'));\n//console.log(histogram('1 2 3 4 5'));\n//console.log(histogram('1 2 3 4 3 2 1'));\n//console.log(histogram(''));\n\n/*\nGiven a string representing a space separated list of numbers, return the number with the highest number.\n\nExample:\n\nnumber('1 2 3 4') == 4\nnumber('1 2 3 4 5') == 5\nnumber('1 2 3 4 3 2 1') == 5\nnumber('') == 0\n\n*/\nconst number = (test) => {\n  const numbers = test.split('');\n  const max = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (parseInt(numbers[i]) > parseInt(max)) {\n      max = numbers[i];\n    }\n  }\n  return parseInt(max);\n};\n\n// TESTING\n//console.log(number('1 2 3 4'));\n//console.log(number('1 2 3 4 5'));\n//console.log(number('1 2 3 4 3 2 1'));\n//console.log(number(''));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n    let result = [];\n    for (let i = 0; i < s.length; i++) {\n        let temp = s[i];\n        if (c.indexOf(temp) === -1) {\n            result.push(temp);\n        }\n    }\n    return [...new Set(result), s.length - result.length, result.length, s.length, result.join('') === s.join('')? 'true' : 'false'];\n};\n\n/*\n  Given a string s, you have to print the number of palindromes in it\n  Example\n  For s = \"abcdcba\", the result should be \"1\".\n  For s = \"abbababab\", the result should be \"1\".\n  For s = \"bbbaa\", the result should be \"1\".\n  For s = \"aabbcccc\", the result should be \"2\".\n  */\nconst count_palindromes = (s) => {\n    let result = 0;\n    for (let i = 0; i < s.length; i++) {\n        let temp = s[i];\n        let r = reverse_delete(s, temp);\n        if (r[3] === 'true') {\n            result++;\n        }\n    }\n    return result;\n};\n\nmodule.exports = count_palindromes;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  if (!lst) {\n    return []\n  }\n  return lst.map((str) => {\n    const odd_digit_count = count_odd_digit(str)\n    return `the number of odd elements ${odd_digit_count} of the ${str} of the ${str}put.`\n  })\n}\n\nconst count_odd_digit = (str) => {\n  const digit_count = str.length\n  const odd_digit_count = 0\n  for (let i = 0; i < digit_count; i++) {\n    if (str[i] % 2 === 1) {\n      odd_digit_count++\n    }\n  }\n  return odd_digit_count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  let sum = 0\n  const minSum = nums.reduce((sum, num) => {\n    if (sum < num) {\n      sum = num\n    }\n    return sum\n  }, 0)\n\n  const currSum = sum\n  let start = 0\n  while (start < nums.length) {\n    const nextSum = currSum + nums[start]\n    if (nextSum < minSum) {\n      minSum = nextSum\n    }\n    currSum = nextSum\n    start++\n  }\n\n  return minSum\n}\n\nconsole.log(min_sub_array_sum([2, 3, 4, 1, 2, 4]))\nconsole.log(min_sub_array_sum([-1, -2, -3]))\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  let rows = grid.length\n  let cols = grid[0].length\n  let fill = 0\n\n  // row 0 is the first row, col 0 is the first column\n  for (let row = 0; row < rows; row++) {\n    fill += grid[row][0]\n  }\n  fill = Math.min(fill, cols)\n\n  // row 0 is the first row, col 0 is the first column\n  for (let row = 0; row < rows; row++) {\n    fill -= grid[row][0]\n  }\n  fill = Math.min(fill, cols - 1)\n\n  // row 0 is the first row, col 0 is the first column\n  for (let row = 1; row < rows; row++) {\n    fill += grid[row][0]\n  }\n  fill = Math.min(fill, cols - 1)\n\n  fill = Math.min(fill, capacity)\n  return fill\n}\n\nconst solution = (grid, capacity) => {\n  let fill = max_fill(grid, capacity)\n  let result = 0\n  let count = 1\n\n  while (fill > 0) {\n    fill -= 1\n    result += count\n    count++\n  }\n  return result\n}\n\nconsole.log(solution([\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n], 1))\nconsole.log(solution([\n  [0, 0, 0],\n  [0, 0, 0]\n], 1))\nconsole.log(solution([\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [1, 1, 1, 1]\n], 1))\nconsole.log(solution([\n  [1, 1, 1, 1],\n  [1, 1, 1, 1],\n  [0, 0, 0, 0],\n  [1, 1, 1, 1]\n], 2))\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  let len = arr.length\n  let max_bit = -1\n\n  for (let i = 0; i < len; i++) {\n    let bit = arr[i].toString(2)\n    let bit_length = bit.length\n\n    if (bit_length > max_bit) {\n      max_bit = bit_length\n    }\n  }\n\n  let reverse_arr = []\n\n  for (let i = 0; i < len; i++) {\n    let bit = arr[i].toString(2)\n    let bit_length = bit.length\n    let index = bit_length - max_bit\n\n    while (bit[index]) {\n      index--\n    }\n\n    let value = bit.substring(index + 1)\n\n    reverse_arr.push(parseInt(value, 2))\n  }\n\n  return reverse_arr\n}\n\n/*\n  This Kata gives you the smallest of 3 or more numbers in the array,\n  which can be obtained by a bitwise AND operation.\n  >>> sort_array([1, 5, 2, 3, 4])\n  [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6])\n  [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array_btw = (arr) => {\n  let len = arr.length\n\n  if (len < 3) {\n    return arr\n  }\n\n  let min = arr[0]\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] < min) {\n      min = arr[i]\n    }\n  }\n\n  return [min,...arr.slice(1)]\n}\n\n/*\n  This Kata gives you the largest of 3 or more numbers in the array,\n  which can be obtained by a bitwise OR operation.\n  >>> sort_array([1, 5, 2, 3, 4])\n  [5, 6, 7, 8, 9]\n  >>> sort_array([-2, -3, -4, -5, -6])\n  [6, 7, 8, 9, 10]\n  >>> sort_array([1, 0, 2, 3, 4]) [1, 2, 3, 4, 5]\n  */\nconst sort_array_btw_or = (arr) => {\n  let len = arr.length\n\n  if (len < 3) {\n    return arr\n  }\n\n  let max = arr[0]\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n\n  return [max,...arr.slice(1)]\n}\n\n/*\n  This Kata gives you the largest of 3 or more numbers in the array,\n  which can be obtained by a bitwise XOR operation.\n  >>> sort_array([1, 5, 2, 3, 4])\n  [4, 5, 6, 7, 8]\n  >>> sort_array([-2, -3, -4, -5, -6])\n  [-2, -3, -4, -5, -6]\n  >>> sort_array([1, 0, 2, 3, 4]) [4, 5, 6, 7, 8]\n  */\nconst sort_array_btw_xor = (arr) => {\n  let len = arr.length\n\n  if (len < 3) {\n    return arr\n  }\n\n  let max = arr[0]\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i]!== max) {\n      max = arr[i]\n    }\n  }\n\n  return [max,...arr.slice(1)]\n}\n\n/*\n  This Kata gives you the smallest of 3 or more numbers in the array,\n  which can be obtained by a bitwise NOT operation.\n  >>> sort_array([1, 5, 2, 3, 4])\n  [6, 7, 8, 9, 10]\n  >>> sort_array([-2, -3, -4, -5, -6])\n  [-7, -8, -9, -10, -11]\n  >>> sort_array([1, 0, 2, 3, 4]) [5, 6, 7, 8, 9]\n  */\nconst sort_array_btw_not = (arr) => {\n  let len = arr.length\n\n  if (len < 3) {\n    return arr\n  }\n\n  let min = arr[0]\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i] === min) {\n      min = arr[i]\n    }\n  }\n\n  return [min,...arr.slice(1)]\n}\n\n/*\n  This Kata gives you the smallest of 3 or more numbers in the array,\n  which can be obtained by a bitwise SHL operation.\n  >>> sort_array([1, 5, 2, 3, 4])\n  [4, 5, 6, 7, 8]\n  >>> sort_array([-2, -3, -4, -5, -6])\n  [-7, -8, -9, -10, -11]\n  >>> sort_array([1, 0, 2, 3, 4]) [2, 3, 4, 5, 6]\n  */\nconst sort_array_btw_shl = (arr) => {\n  let len = arr.length\n\n  if (len < 3) {\n    return arr\n  }\n\n  let min = arr[0]\n\n  for (let i = 1; i < len; i++) {\n    if (arr[i"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  if (s.length === 0) return []\n  const num = Math.floor(n / 3)\n  const a = s.split('')\n  const len = a.length\n  const c = a[0]\n  let result = []\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      result = result.concat(a.slice(i, i + num).filter((x) => {\n        return x.length === num\n      }))\n    }\n  }\n  return result.filter((x) => {\n    return x.length === n\n  })\n}\n\nexport default select_words\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  const vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n  let index = -1\n  let min = Infinity\n  \n  for (let i = 0; i < word.length; i++) {\n    if (vowels.indexOf(word[i]) > -1) {\n      index = i\n      break\n    }\n  }\n  \n  if (index > -1) {\n    for (let i = index + 1; i < word.length; i++) {\n      if (vowels.indexOf(word[i]) > -1) {\n        if (distance(word[i], word[index]) < min) {\n          min = distance(word[i], word[index])\n          index = i\n        }\n      }\n    }\n  }\n  \n  return index\n}\n\nconst distance = (a, b) => {\n  const diff = Math.abs(a - b)\n  return (a > b)? diff : -diff\n}\n\nconst is_valid_vowel = (letter) => {\n  return (letter === \"a\" || letter === \"e\" || letter === \"i\" || letter === \"o\" || letter === \"u\")\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\n/*\n  match_parens2(['()(', ')']) == 'Yes'\n  match_parens2([')', ')']) == 'No'\n  */\nconst match_parens2 = (lst) => {\n  const { length } = lst;\n  const left = match_parens2(lst.slice(2, length));\n  const right = match_parens2(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\n/*\n  match_parens2(['()(', ')']) == 'Yes'\n  match_parens2([')', ')']) == 'No'\n  */\nconst match_parens3 = (lst) => {\n  const { length } = lst;\n  const left = match_parens3(lst.slice(2, length));\n  const right = match_parens3(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\n/*\n  match_parens2(['()(', ')']) == 'Yes'\n  match_parens2([')', ')']) == 'No'\n  */\nconst match_parens4 = (lst) => {\n  const { length } = lst;\n  const left = match_parens4(lst.slice(2, length));\n  const right = match_parens4(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const { length } = lst;\n  const left = match_parens(lst.slice(1, length));\n  const right = match_parens(lst.slice(1));\n  return left === 'Yes' && right === 'Yes';\n};\n\nconst match_parens = (lst) => {\n  const {"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max = arr.reduce((a, b) => Math.max(a, b), 0)\n  let maxLen = 1\n\n  while (k > 1) {\n    maxLen = Math.min(k, maxLen + 1)\n    max = Math.max(max, arr.reduce((a, b) => Math.max(a, b), 0))\n    k -= maxLen\n  }\n\n  return arr.slice(0, maxLen)\n}\n\nexport default maximum\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const even = lst.filter(x => x % 2 === 0)\n  const odd = lst.filter(x => x % 2 === 1)\n  const result = even.reduce((acc, elem) => acc + elem, 0)\n  const sum = odd.reduce((acc, elem) => acc + elem, 0)\n  return result + sum\n}\n\nconsole.log(solution([5, 8, 7, 1]))\nconsole.log(solution([3, 3, 3, 3, 3]))\nconsole.log(solution([30, 13, 24, 321]))\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const l = k - 1\n  const r = arr.length - 1\n\n  // we don't want to add the last element\n  if (r >= 0) {\n    let sum = 0\n    let i = l\n    let j = r\n    while (i >= 0 && j >= 0) {\n      sum += arr[i] + arr[j]\n      i--\n      j--\n    }\n\n    if (i < 0) sum += arr[j]\n    if (j < 0) sum += arr[i]\n  }\n\n  return sum\n}\n\nexport default add_elements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  const odd_numbers = [];\n  while (n) {\n    if (n % 2 === 1) {\n      odd_numbers.push(n);\n    }\n    n = parseInt(n / 2, 10);\n  }\n  return odd_numbers;\n};\n\n// ************************* TEST CODE ***************************\nconst test_collatz_odd = () => {\n  const odd_collatz = get_odd_collatz(1);\n  assert(odd_collatz.length === 1 && odd_collatz[0] === 1, 'Collatz(1) is [1]');\n  assert(odd_collatz.length === 5, 'Collatz(5) is [1, 5, 16, 8, 4, 2, 1]');\n  assert(odd_collatz.length === 6, 'Collatz(6) is [1, 5, 16, 8, 4, 2, 1, 3]');\n  assert(odd_collatz.length === 7, 'Collatz(7) is [1, 5, 16, 8, 4, 2, 1, 3, 7]');\n  assert(odd_collatz.length === 8, 'Collatz(8) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15]');\n  assert(odd_collatz.length === 9, 'Collatz(9) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31]');\n  assert(odd_collatz.length === 10, 'Collatz(10) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62]');\n  assert(odd_collatz.length === 11, 'Collatz(11) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85]');\n  assert(odd_collatz.length === 12, 'Collatz(12) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118]');\n  assert(odd_collatz.length === 13, 'Collatz(13) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118, 144]');\n  assert(odd_collatz.length === 14, 'Collatz(14) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118, 144, 233]');\n  assert(odd_collatz.length === 15, 'Collatz(15) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118, 144, 233, 296]');\n};\n\nconst test_odd_collatz_to_even = () => {\n  const odd_collatz = get_odd_collatz(1);\n  assert(odd_collatz.length === 1 && odd_collatz[0] === 1, 'Collatz(1) is [1]');\n  assert(odd_collatz.length === 5, 'Collatz(5) is [1, 5, 16, 8, 4, 2, 1]');\n  assert(odd_collatz.length === 6, 'Collatz(6) is [1, 5, 16, 8, 4, 2, 1, 3]');\n  assert(odd_collatz.length === 7, 'Collatz(7) is [1, 5, 16, 8, 4, 2, 1, 3, 7]');\n  assert(odd_collatz.length === 8, 'Collatz(8) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15]');\n  assert(odd_collatz.length === 9, 'Collatz(9) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31]');\n  assert(odd_collatz.length === 10, 'Collatz(10) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62]');\n  assert(odd_collatz.length === 11, 'Collatz(11) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85]');\n  assert(odd_collatz.length === 12, 'Collatz(12) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118]');\n  assert(odd_collatz.length === 13, 'Collatz(13) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118, 144]');\n  assert(odd_collatz.length === 14, 'Collatz(14) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118, 144, 233]');\n  assert(odd_collatz.length === 15, 'Collatz(15) is [1, 5, 16, 8, 4, 2, 1, 3, 7, 15, 31, 62, 85, 118, 144, 233, 296]');\n};\n\ntest_collatz_odd();\ntest_odd_collatz_to_even();\n\nconsole.log('All tests passed!');\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if(!date || date.length < 3) return false;\n  const mm = parseInt(date[0], 10);\n  const dd = parseInt(date[1], 10);\n  const yyyy = parseInt(date[2], 10);\n  const month = new Date(yyyy, mm, 1).getMonth();\n  if(mm <= 0 || mm > 12 || mm == 2 && dd > 29) return false;\n  if(dd <= 0 || dd > 31) return false;\n  if(mm == 4 || mm == 6 || mm == 9 || mm == 11) {\n    if(dd <= 0 || dd > 30) return false;\n  } else {\n    if(dd <= 0 || dd > 31) return false;\n  }\n  if(mm == 1 || mm == 3 || mm == 5 || mm == 7 || mm == 8 || mm == 10 || mm == 12) {\n    if(dd <= 0 || dd > 31) return false;\n  }\n  return true;\n}\n\n/*\n  valid_date('10-12-2012') => true\n  valid_date('10-12-2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date('10/12/2012') => true\n  valid_date"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const arr = txt.toLowerCase().split(\" \");\n  const word_list = arr.filter(x => x.length > 0);\n  const word_count = word_list.length;\n  return word_count;\n}\n\n/* Given a string of words, return the index of the first word starting with the letter 'X',\n  starting from 0.\n  Examples\n  index_of_word(\"Hello world!\", \"X\") ➞ 0\n  index_of_word(\"Hello world!\", \"hello\") ➞ 4\n  index_of_word(\"Hello world!\", \"Hell\") ➞ -1\n  index_of_word(\"Hello world!\", \"Hello\") ➞ 0\n  index_of_word(\"Hello world!\", \"H\") ➞ -1\n  index_of_word(\"Hello world!\", \"World\") ➞ 4\n  index_of_word(\"Hello world!\", \"World!\") ➞ -1\n  index_of_word(\"Hello world!\", \"\") ➞ -1\n  */\nconst index_of_word = (txt, word) => {\n  const arr = txt.toLowerCase().split(\" \");\n  const arr_len = arr.length;\n  let word_index = -1;\n  let i = 0;\n  while (i < arr_len) {\n    if (arr[i].toLowerCase() === word) {\n      word_index = i;\n      break;\n    }\n    i++;\n  }\n  return word_index;\n}\n\n/* Given a string of words, return the index of the first word starting with the letter 'X',\n  starting from 1.\n  Examples\n  index_of_word(\"Hello world!\", \"X\", 1) ➞ 1\n  index_of_word(\"Hello world!\", \"Hello\", 1) ➞ 0\n  index_of_word(\"Hello world!\", \"Hell\", 1) ➞ -1\n  index_of_word(\"Hello world!\", \"Hello\", 2) ➞ 0\n  index_of_word(\"Hello world!\", \"Hello\", 3) ➞ -1\n  index_of_word(\"Hello world!\", \"Hello\", -1) ➞ -1\n  */\nconst index_of_word_from = (txt, word, index) => {\n  const arr = txt.toLowerCase().split(\" \");\n  const arr_len = arr.length;\n  let word_index = -1;\n  let i = index;\n  while (i < arr_len) {\n    if (arr[i].toLowerCase() === word) {\n      word_index = i;\n      break;\n    }\n    i++;\n  }\n  return word_index;\n}\n\n/* Given a string of words, return the index of the first word starting with the letter 'X',\n  starting from 0.\n  Examples\n  index_of_word_from(\"Hello world!\", \"X\") ➞ 0\n  index_of_word_from(\"Hello world!\", \"Hello\") ➞ 0\n  index_of_word_from(\"Hello world!\", \"Hell\") ➞ -1\n  index_of_word_from(\"Hello world!\", \"Hello\", 1) ➞ -1\n  index_of_word_from(\"Hello world!\", \"Hello\", 2) ➞ -1\n  */\nconst index_of_word_from_1 = (txt, word) => {\n  const arr = txt.toLowerCase().split(\" \");\n  const arr_len = arr.length;\n  let word_index = -1;\n  let i = 0;\n  while (i < arr_len) {\n    if (arr[i].toLowerCase() === word) {\n      word_index = i;\n      break;\n    }\n    i++;\n  }\n  return word_index;\n}\n\n/* Given a string of words, return the index of the first word starting with the letter 'X',\n  starting from 1.\n  Examples\n  index_of_word_from_1(\"Hello world!\", \"X\") ➞ 1\n  index_of_word_from_1(\"Hello world!\", \"Hello\") ➞ 1\n  index_of_word_from_1(\"Hello world!\", \"Hell\") ➞ -1\n  */\nconst index_of_word_from_2 = (txt, word) => {\n  const arr = txt.toLowerCase().split(\" \");\n  const arr_len = arr.length;\n  let word_index = -1;\n  let i = 1;\n  while (i < arr_len) {\n    if (arr[i].toLowerCase() === word) {\n      word_index = i;\n      break;\n    }\n    i++;\n  }\n  return word_index;\n}\n\n/* Given a string of words, return the index of the first word starting with the letter 'X',\n  starting from 0.\n  Examples\n  index_of_word_from_0(\"Hello world!\", \"X\") ➞ -1\n  index_of_word_from_0(\"Hello world!\", \"Hello\") ➞ -1\n  index_of_word_from_0(\"Hello world!\", \"Hell\") ➞ -1\n  index_of_word_from_0(\"Hello world!\", \"Hello\", 1) ➞ -1\n  index_of_word_from_0(\"Hello world!\", \"Hello\", 2) ➞ -1\n  */\nconst index_of_word_from_0 = (txt, word) => {\n  const arr = txt.toLowerCase().split(\" \");\n  const arr_len = arr.length;\n  let word_index = -1;\n  let i = 0;\n  while (i < arr_len) {\n    if (arr[i].toLowerCase() === word) {\n      word_index = i;\n      break;\n    }\n    i++;"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  // if list is empty, return true\n  if (!lst) {\n    return true;\n  }\n  // check if list has only 1 element\n  if (lst.length === 1) {\n    return true;\n  }\n  // loop through the list and check if element is greater than previous\n  for (let i = 0; i < lst.length - 1; i++) {\n    // if not, return false\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  // if no element is less than previous element, return true\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start > interval2.end) {\n    return \"NO\";\n  }\n\n  const min1 = Math.min(interval1.start, interval1.end);\n  const max1 = Math.max(interval1.start, interval1.end);\n  const min2 = Math.min(interval2.start, interval2.end);\n  const max2 = Math.max(interval2.start, interval2.end);\n\n  const min = Math.min(min1, min2);\n  const max = Math.max(max1, max2);\n\n  const intersection = Math.min(max, max1) - Math.max(min, min2);\n\n  const isPrime = n => n === 1? false :\n    Math.floor(n) === 1? false :\n    (n & 1) === 0? false :\n    (n + 1) % n === 0;\n\n  if (isPrime(intersection)) {\n    return \"YES\";\n  }\n\n  return \"NO\";\n};\n\n// test\nconsole.log(intersection((1, 2), (2, 3)));\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  return arr.reduce((a, b) => {\n    return a + (Math.abs(b) * (b > 0? 1 : -1));\n  }, 0);\n};\n\n/*\n  Given an array arr of integers, return\n  the product of all the elements in the array,\n  or 0 if the array is empty.\n\n  Example:\n  >>> prod_all([1, 2, 2, -4]) == 8\n  >>> prod_all([]) == 0\n  */\nconst prod_all = (arr) => {\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  Given an array arr of strings, return\n  the sum of magnitudes of all strings\n  multiplied by product of all signs\n  of all strings in the array,\n  represented by 1, -1 or 0.\n\n  Example:\n  >>> prod_signs_all(\"a\", \"b\", \"c\") == -6\n  >>> prod_signs_all(\"\") == 0\n  >>> prod_signs_all(\"a\") == 1\n  */\nconst prod_signs_all = (arr) => {\n  return arr.reduce((a, b) => {\n    return a + (Math.abs(b) * (b > 0? 1 : -1));\n  }, 0);\n};\n\n/*\n  Given an array arr of strings, return\n  the product of all the elements in the array,\n  or 0 if the array is empty.\n\n  Example:\n  >>> prod_all_all(\"a\", \"b\", \"c\") == 8\n  >>> prod_all_all(\"\") == 0\n  >>> prod_all_all(\"a\") == 1\n  */\nconst prod_all_all = (arr) => {\n  return arr.reduce((a, b) => a * b, 1);\n};\n\n/*\n  Given two arrays arr1 and arr2, return\n  the sum of magnitudes of all the elements in\n  arr1 and arr2 multiplied by product of all signs\n  of all the elements in the two arrays,\n  represented by 1, -1 or 0.\n\n  Example:\n  >>> prod_all([1, 2, 2, -4], [1, 2, 2, -4]) == -9\n  >>> prod_all([], []) == 0\n  >>> prod_all([1, 2, 2, -4], []) == 0\n  >>> prod_all([1, 2, 2, -4], [1]) == 1\n  */\nconst prod_all = (arr1, arr2) => {\n  return arr1.reduce((a, b) => a + (Math.abs(b) * (b > 0? 1 : -1)), 0) *\n    arr2.reduce((a, b) => a + (Math.abs(b) * (b > 0? 1 : -1)), 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n    const m = grid.length;\n    const n = grid[0].length;\n    const grid_val = [...new Array(m * n)].fill(null);\n    const cell_val = [...new Array(m * n)].fill(null);\n\n    const min_path_d = new Array(k).fill(null);\n\n    for (let i = 0; i < k; i++) {\n        min_path_d[i] = new Array(n).fill(null);\n    }\n\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === null) {\n                continue;\n            }\n\n            cell_val[i * n + j] = grid[i][j];\n        }\n    }\n\n    const count = {};\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (grid[i][j] === null) {\n                continue;\n            }\n\n            count[grid[i][j]] = count[grid[i][j]] || 0;\n            count[grid[i][j]]++;\n        }\n    }\n\n    for (let i = 0; i < k; i++) {\n        for (let j = 0; j < n; j++) {\n            min_path_d[i][j] = Math.min(\n                min_path_d[i][j],\n                count[cell_val[i * n + j]]\n            );\n        }\n    }\n\n    const res = [];\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            res.push(min_path_d[min_path_d[i][j] - 1][j]);\n        }\n    }\n\n    return res;\n};\n\nconsole.log(min_path([[1,2,3],[4,5,6],[7,8,9]], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let fib = [1, 2]\n  let tri = [1, 3]\n  while (fib.length < n + 1) {\n    let x = tri[tri.length - 2] + tri[tri.length - 1]\n    tri.push(x)\n    if (x % 2 === 1) {\n      fib.push(x + 1)\n    }\n  }\n  return fib\n}\n\nconsole.log(tri(5))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let count = 0;\n    let result = 1;\n    for (let i = 1; i <= n; i++) {\n        if (i % 2!== 0) {\n            count++;\n        } else {\n            if (count > 0) {\n                result *= count;\n            }\n            count = 0;\n        }\n    }\n    return result;\n};\n\nconsole.log(digits(234));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  const stack = []\n  let is_nested = false\n  let brackets = 0\n  let depth = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      brackets++\n      stack.push(string[i])\n    } else if (string[i] === ']') {\n      if (brackets === 0) {\n        return false\n      }\n      stack.pop()\n      if (stack[stack.length - 1] === '[') {\n        brackets--\n      }\n      if (stack.length === 0) {\n        depth--\n        if (depth === 0) {\n          is_nested = true\n        }\n      }\n    }\n  }\n  return is_nested\n}\n\nconsole.log(is_nested('[[]]'))\nconsole.log(is_nested('[]]]]]]][[[[[]'))\nconsole.log(is_nested('[][]'))\nconsole.log(is_nested('[]'))\nconsole.log(is_nested('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let sum_of_squares = 0;\n  for(let item of lst) {\n    let item_value = parseInt(item);\n    sum_of_squares += (Math.pow(item_value, 2));\n  }\n  return sum_of_squares;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  return txt.lastIndexOf(/\\w/) === txt.length - 1;\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"number\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_number(\"1234\") ➞ true\n  check_if_last_char_is_a_number(\" 1234\") ➞ false\n  check_if_last_char_is_a_number(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_number = (txt) => {\n  return txt.lastIndexOf(/\\d/) === txt.length - 1;\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter, and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"1234\") ➞ false\n  check_if_last_char_is_a_letter(\" 1234\") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  return txt.lastIndexOf(/\\w/) === txt.length - 1;\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a letter or number, and false otherwise.\n  Note: \"letter_or_number\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter_or_number(\"1234\") ➞ true\n  check_if_last_char_is_a_letter_or_number(\" 1234\") ➞ true\n  check_if_last_char_is_a_letter_or_number(\"\") ➞ false\n  check_if_last_char_is_a_letter_or_number(\"abcd\") ➞ true\n  */\nconst check_if_last_char_is_a_letter_or_number = (txt) => {\n  return txt.lastIndexOf(/\\w/) === txt.length - 1 || txt.lastIndexOf(/\\d/) === txt.length - 1;\n}\n\n/* Create a function that returns true if the last character\n  of a given string is an upper case letter, and false otherwise.\n  Note: \"upper_case_letter\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_an_upper_case_letter(\"A\") ➞ true\n  check_if_last_char_is_an_upper_case_letter(\"a\") ➞ false\n  check_if_last_char_is_an_upper_case_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_an_upper_case_letter = (txt) => {\n  return txt.lastIndexOf(/[A-Z]/) === txt.length - 1;\n}\n\n/* Create a function that returns true if the last character\n  of a given string is an upper case letter or number, and false otherwise.\n  Note: \"letter_or_number\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_an_upper_case_letter_or_number(\"A\") ➞ true\n  check_if_last_char_is_an_upper_case_letter_or_number(\"a\") ➞ true\n  check_if_last_char_is_an_upper_case_letter_or_number(\"\") ➞ false\n  check_if_last_char_is_an_upper_case_letter_or_number(\"1234\") ➞ false\n  */\nconst check_if_last_char_is_an_upper_case_letter_or_number = (txt) => {\n  return txt.lastIndexOf(/[A-Z]/) === txt.length - 1 || txt.lastIndexOf(/\\d/) === txt.length - 1;\n}\n\n/* Create a function that returns true if the last character\n  of a given string is an lower case letter, and false otherwise.\n  Note: \"lower_case_letter\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_lower_case_letter(\"a\") ➞ true\n  check_if_last_char_is_a_lower_case_letter(\"\") ➞ false\n  check_if_last_char_is_a_lower_case_letter(\"1234\") ➞ false\n  */\nconst check_if_last_char_is_a_lower_case_letter = (txt) => {\n  return txt.lastIndexOf(/[a-z]/) === txt.length - 1;\n}\n\n/* Create a function that returns true if the last character\n  of a given string is a lower case letter or number, and false otherwise.\n  Note: \"letter_or_number\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_lower_case_letter_or_number(\"a\") ➞ true\n  check_if_last_char_is_a_lower_case_letter_or_number(\"\") ➞ false\n  check_if_last_char_is_a_lower_case_letter_or_number(\"1234\") ➞ false\n  */\nconst check_if_last_char_is_"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let last_index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[i + 1]) {\n      last_index = i;\n    }\n  }\n  return last_index;\n};\n\nmodule.exports = can_arrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const largest = largest_smallest_integer(lst);\n  const smallest = smallest_smallest_integer(lst);\n  return largest? (largest, smallest) : (null, null);\n};\n\nconst largest_smallest_integer = (lst) => {\n  let largest = 0;\n  let smallest = Infinity;\n  lst.forEach(el => {\n    if (largest < el) largest = el;\n    if (smallest > el) smallest = el;\n  });\n  return largest;\n};\n\nconst smallest_smallest_integer = (lst) => {\n  let smallest = Infinity;\n  let largest = 0;\n  lst.forEach(el => {\n    if (largest < el) largest = el;\n    if (smallest > el) smallest = el;\n  });\n  return smallest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return null;\n  }\n  if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      return a > b? a : b;\n    } else {\n      return b;\n    }\n  } else {\n    if (typeof b ==='string') {\n      return a;\n    } else {\n      return a > b? a : b;\n    }\n  }\n};\n\nconsole.log(compare_one(1, \"2,3\"));\nconsole.log(compare_one(\"5,1\", \"6\"));\nconsole.log(compare_one(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n    return ((n % 2 === 0) && (n > 0) && (n < 5) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 3 positive even numbers\n  Example\n  is_equal_to_sum_even(3) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(12) == true\n  */\nconst is_equal_to_sum_odd = (n) => {\n    return ((n % 2 === 0) && (n > 0) && (n < 6) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  is_equal_to_sum_even(5) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(12) == false\n  is_equal_to_sum_even(20) == true\n  */\nconst is_equal_to_sum_even_odd = (n) => {\n    return ((n % 2 === 0) && (n > 0) && (n < 10) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  Example\n  is_equal_to_sum_odd(5) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(12) == false\n  is_equal_to_sum_odd(20) == false\n  is_equal_to_sum_odd(30) == true\n  */\nconst is_equal_to_sum_odd_even = (n) => {\n    return ((n % 2 === 1) && (n > 0) && (n < 10) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  Example\n  is_equal_to_sum_odd(5) == false\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(12) == false\n  is_equal_to_sum_odd(20) == false\n  is_equal_to_sum_odd(30) == false\n  is_equal_to_sum_odd(40) == true\n  */\nconst is_equal_to_sum_odd_odd = (n) => {\n    return ((n % 2 === 1) && (n > 0) && (n < 10) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  is_equal_to_sum_even(6) == true\n  is_equal_to_sum_even(8) == true\n  is_equal_to_sum_even(12) == false\n  is_equal_to_sum_even(20) == false\n  is_equal_to_sum_even(30) == false\n  is_equal_to_sum_even(40) == false\n  */\nconst is_equal_to_sum_even_odd_even = (n) => {\n    return ((n % 2 === 0) && (n > 0) && (n < 12) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive odd numbers\n  Example\n  is_equal_to_sum_odd(6) == false\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(12) == false\n  is_equal_to_sum_odd(20) == false\n  is_equal_to_sum_odd(30) == false\n  is_equal_to_sum_odd(40) == true\n  */\nconst is_equal_to_sum_odd_even_odd = (n) => {\n    return ((n % 2 === 1) && (n > 0) && (n < 12) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  is_equal_to_sum_even(7) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(12) == false\n  is_equal_to_sum_even(20) == false\n  is_equal_to_sum_even(30) == false\n  is_equal_to_sum_even(40) == false\n  is_equal_to_sum_even(50) == true\n  */\nconst is_equal_to_sum_even_odd_even_odd = (n) => {\n    return ((n % 2 === 0) && (n > 0) && (n < 14) && ((n % 4) === 0))\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive odd numbers\n  Example\n  is_equal_to_sum_odd(7) == false\n  is_equal_to_sum_odd(8) == false\n  is_equal_to_sum_odd(12) == false\n  is_equal_to_sum_odd(20) == false\n  is_equal_to_sum_odd(30) == false\n  is_equal_to_sum_odd(40) == false\n  is_equal_to_sum_odd(50) == false\n  is_equal_to_sum_odd(60) == true\n  */\nconst is_equal_to_sum_odd_even_odd_odd = (n) => {\n    "}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  if (n === 0) return 1\n  else if (n === 1) return 1\n  else return n * special_factorial(n - 1)\n}\n\nconst product = (n, m) => {\n  if (n < 0 || m < 0) {\n    throw new Error(\"Invalid parameters\")\n  }\n  if (n === 0 || m === 0) {\n    return 1\n  }\n  return n * special_factorial(n) / special_factorial(m)\n}\n\nconst is_prime = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n <= 1) {\n    return false\n  }\n  const div = (a) => {\n    return n % a === 0? 1 : 0\n  }\n  for (let i = 2; i <= n / 2; i++) {\n    if (div(i) === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  factorial,\n  is_prime,\n  product\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n    if(text.indexOf(\" \") === -1) {\n        return text;\n    }\n    var spaces = text.split(\" \");\n    var fix = [];\n    for(var i=0; i<spaces.length; i++) {\n        if(spaces[i].length > 2) {\n            for(var j=0; j<spaces[i].length; j++) {\n                if(spaces[i].charAt(j) === \" \") {\n                    if(i === spaces.length-1) {\n                        fix.push(spaces[i].slice(0, j+1)+\"_\");\n                    } else {\n                        fix.push(spaces[i].slice(0, j+1)+\"-\");\n                    }\n                } else {\n                    fix.push(spaces[i].slice(0, j+1));\n                }\n            }\n        } else {\n            fix.push(spaces[i]);\n        }\n    }\n    return fix.join(\" \");\n}\n\n/*\n  Given a string text, return the string with the\n  first letter capitalized\n  \n  fix_first_char(\"Example\") == \"Example\"\n  fix_first_char(\"example\") == \"Example\"\n  */\nconst fix_first_char = (text) => {\n    if(text.length > 1) {\n        return text[0].toUpperCase() + text.slice(1);\n    }\n    return text;\n}\n\nconst test_func = (test) => {\n    console.log(\"Testing \" + test.name + \"...\");\n    var test_result = test.func();\n    console.log(test.name + \" passed\");\n}\n\nconst test_fix_spaces = (test) => {\n    console.log(\"Testing fix spaces...\");\n    var test_result = fix_spaces(test.text);\n    console.log(test.text + \" => \" + test_result);\n    if(test_result === test.expected) {\n        console.log(test.text + \" passed\");\n    } else {\n        console.log(\"Error: Expected \" + test.expected + \" but got \" + test_result);\n    }\n}\n\nconst test_fix_first_char = (test) => {\n    console.log(\"Testing fix first char...\");\n    var test_result = fix_first_char(test.text);\n    console.log(test.text + \" => \" + test_result);\n    if(test_result === test.expected) {\n        console.log(test.text + \" passed\");\n    } else {\n        console.log(\"Error: Expected \" + test.expected + \" but got \" + test_result);\n    }\n}\n\nconst test_func_chain = (test) => {\n    console.log(\"Testing chain of functions...\");\n    var test_result = test.func(test.func2, test.func3);\n    console.log(test.func2.name + \" and \" + test.func3.name + \" combined, returning \" + test_result);\n    if(test_result === test.expected) {\n        console.log(test.func2.name + \" and \" + test.func3.name + \" combined, passed\");\n    } else {\n        console.log(\"Error: Expected \" + test.expected + \" but got \" + test_result);\n    }\n}\n\nconsole.log(\"Starting tests...\");\nconsole.log(\"Testing fix_spaces...\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\" Example 2\");\ntest_func(\" Example   3\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\" Example 2\");\ntest_func(\"Example   3\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\" Example 2\");\ntest_func(\"Example   3\");\nconsole.log(\"Testing fix_first_char...\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");\ntest_func(\"Example\");\ntest_func(\"Example 1\");"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9.]*$/;\n  const regex_error = 'File name contains invalid characters';\n  const error_message = `${regex_error}${file_name}`;\n\n  return file_name_regex.test(file_name) &&\n    file_name.split('.').length === 2 &&\n    file_name.split('.')[0].length > 0 &&\n    file_name.split('.')[1].length > 0 &&\n    file_name.split('.')[0].length < 4 &&\n    file_name.split('.')[1] === 'exe' ||\n    file_name.split('.')[1] === 'dll';\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  the file's extension\n  Examples:\n  file_extension(\"example.txt\") # => 'txt'\n  file_extension(\"example.exe\") # => 'exe'\n  */\nconst file_extension = (file_name) => {\n  const file_extension_regex = /(\\.\\w+$)/;\n  const error_message = 'File extension contains invalid characters';\n  const file_extension = file_name.split('.').pop();\n\n  return file_extension_regex.test(file_extension) &&\n    file_extension.length > 0 &&\n    file_extension.length < 4;\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  the file's extension\n  Examples:\n  file_extension(\"example.txt\") # => 'txt'\n  file_extension(\"example.exe\") # => 'exe'\n  */\nconst file_extension_2 = (file_name) => {\n  const file_extension_regex = /(\\.\\w+$)/;\n  const error_message = 'File extension contains invalid characters';\n  const file_extension = file_name.split('.').pop();\n\n  return file_extension_regex.test(file_extension) &&\n    file_extension.length > 0 &&\n    file_extension.length < 4;\n};\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the file's name is valid, and 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_validation = (file_name) => {\n  const file_name_regex = /^[a-zA-Z][a-zA-Z0-9.]*$/;\n  const regex_error = 'File name contains invalid characters';\n  const error_message = `${regex_error}${file_name}`;\n\n  return file_name_regex.test(file_name) &&\n    file_name.split('.').length === 1 &&\n    file_name.split('.')[0].length > 0 &&\n    file_name.split('.')[0].length < 4 &&\n    file_name.split('.')[1] === 'exe' ||\n    file_name.split('.')[1] === 'dll';\n};\n\nmodule.exports = {\n  file_name_check,\n  file_extension,\n  file_extension_2,\n  file_name_validation\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  if (!lst) return 0\n  const squares = lst.map((x) => x*x)\n  const sum = squares.reduce((prev, next) => prev + next, 0)\n  return sum\n}\n\nconsole.log(sum_squares([1,2,3]))\nconsole.log(sum_squares([]))\nconsole.log(sum_squares([-1,-5,2,-1,-5]))\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  let array = sentence.split(' ');\n  for(let i = 0; i < array.length; i++) {\n    let str = array[i];\n    let l = str.length;\n    while(l < 2) {\n      l += 2;\n    }\n    while(l % 2 == 0) {\n      l++;\n    }\n    array[i] = str.substr(0, l);\n  }\n  let result = array.join(' ');\n  return result;\n}\n\nconst primes = (n) => {\n  let arr = [];\n  for(let i = 2; i <= n; i++) {\n    if(isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n}\n\nconst isPrime = (n) => {\n  let arr = [];\n  for(let i = 2; i <= n/2; i++) {\n    if(n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// let str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('lets go for swimming');\n// console.log(str); // 'go for'\n\n// str = words_in_sentence('Let\\'s go for swimming');\n// console.log(str); // 'go for'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n// console.log(str); // 'is'\n\n// str = words_in_sentence('This is a test');\n//"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  const [numerator, denominator] = x.split('/')\n  const isInt = Number(numerator) === Number(denominator) && numerator.length === denominator.length\n  return isInt\n}\n\nconsole.log(simplify('1/5', '5/1')) // true\nconsole.log(simplify('1/6', '2/1')) // false\nconsole.log(simplify('7/10', '10/2')) // false\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted = nums.sort((a, b) => {\n    const x = a + b;\n    const y = a - b;\n    return x > y? 1 : x < y? -1 : 0;\n  });\n\n  const sorted_points = [];\n  for (const num of sorted) {\n    const sum = parseInt(num.toString().split('').reduce((sum, digit) => sum + digit));\n    sorted_points.push({num, sum});\n  }\n\n  return sorted_points;\n};\n\nexport default order_by_points;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  const odd_nums = [];\n  for (let num of nums) {\n    if (num % 2 === 1 && num % 10 === 1) {\n      odd_nums.push(num);\n    }\n  }\n  return odd_nums.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  return a.reduce((acc, val, index) => {\n    if (index > 0) {\n      const [prev, current, next] = a.slice(index - 1, index + 2)\n      const sum = prev + current + next\n      if (sum % 3 === 0) {\n        acc.push([prev, current, next])\n      }\n    }\n    return acc\n  }, [])\n}\n\nconst get_max_triples_2 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  return a.reduce((acc, val, index) => {\n    if (index > 0) {\n      const [prev, current, next] = a.slice(index - 1, index + 2)\n      const sum = prev + current + next\n      if (sum % 3 === 0) {\n        if (index === 1) {\n          acc.push([prev, current, next])\n        } else {\n          const [prev2, current, next2] = a.slice(index - 2, index + 3)\n          const sum2 = prev2 + current + next2\n          if (sum2 % 3 === 0) {\n            acc.push([prev2, current, next2])\n          }\n        }\n      }\n    }\n    return acc\n  }, [])\n}\n\nconst get_max_triples_3 = (n) => {\n  const a = new Array(n)\n  for (let i = 0; i < n; i++) {\n    a[i] = i * i - i + 1\n  }\n  return a.reduce((acc, val, index) => {\n    if (index > 0) {\n      const [prev, current, next] = a.slice(index - 1, index + 2)\n      const sum = prev + current + next\n      if (sum % 3 === 0) {\n        if (index === 1) {\n          acc.push([prev, current, next])\n        } else {\n          const [prev2, current, next2] = a.slice(index - 2, index + 3)\n          const sum2 = prev2 + current + next2\n          if (sum2 % 3 === 0) {\n            acc.push([prev2, current, next2])\n          }\n        }\n      }\n    }\n    return acc\n  }, [])\n}\n\nconsole.log(get_max_triples(5))\nconsole.log(get_max_triples_2(5))\nconsole.log(get_max_triples_3(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const distances = {\n    \"Mercury\": 0,\n    \"Venus\": 0,\n    \"Earth\": 0,\n    \"Mars\": 0,\n    \"Jupiter\": 0,\n    \"Saturn\": 0,\n    \"Uranus\": 0,\n    \"Neptune\": 0\n  };\n\n  const planet1_orbits = [];\n  const planet2_orbits = [];\n\n  // Get planet1 orbits\n  for (let i = 0; i < 6; i++) {\n    const planet = (i === 0? planet1 : (i + 1) + planet1);\n    const planet_orb = (\n      (planet === planet1)? planet1_orbits :\n      (planet === planet2)? planet2_orbits :\n      (typeof distances[planet] === \"undefined\")? distances[planet] : distances[planet]\n    );\n    planet_orb.push(i);\n  }\n\n  // Sort the orbits by distance from the sun\n  let sorted_orbits = [];\n  for (let planet in distances) {\n    sorted_orbits.push(distances[planet]);\n  }\n  sorted_orbits.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\n  // Get planet2 orbits\n  for (let i = 0; i < 6; i++) {\n    const planet = (i === 0? planet2 : (i + 1) + planet2);\n    const planet_orb = (\n      (planet === planet1)? planet2_orbits :\n      (planet === planet2)? planet1_orbits :\n      (typeof distances[planet] === \"undefined\")? distances[planet] : distances[planet]\n    );\n    planet_orb.push(i);\n  }\n\n  // Find the orbits between the two planets\n  let orbits = [];\n  for (let i = 0; i < sorted_orbits.length; i++) {\n    for (let j = 0; j < sorted_orbits.length; j++) {\n      if (i!== j && (sorted_orbits[i] + 1) % sorted_orbits[j] === 0) {\n        orbits.push([sorted_orbits[i], sorted_orbits[j]]);\n      }\n    }\n  }\n\n  return orbits;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  let sorted_list = [...lst];\n  sorted_list.sort((a, b) => a.length - b.length);\n  return sorted_list;\n};\n\nconsole.log(sorted_list_sum([\"a\", \"aa\", \"aaa\", \"aaaa\"]));\n\n// console.log(sorted_list_sum([\n//   \"a\",\n//   \"aa\",\n//   \"aaa\",\n//   \"aaaa\",\n//   \"aaab\",\n//   \"aaaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   \"aaba\",\n//   \"aaab\",\n//   "}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  } else {\n    return x;\n  }\n};\n\nconst main = (n) => {\n  const x = 3;\n  const y = 7;\n  console.log(x_or_y(n, x, y));\n};\n\nmain(1000);\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let n = lst[i];\n    if (n > 0 && Math.floor(n) === n) {\n      sum += n * n;\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let diff = [];\n  let result = [];\n  \n  for (let i = 0; i < game.length; i++) {\n    diff[i] = game[i] - guess[i];\n  }\n  \n  for (let i = 0; i < game.length; i++) {\n    if (diff[i] === 0) {\n      result.push(0);\n    } else {\n      result.push(Math.abs(diff[i]));\n    }\n  }\n  \n  return result;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  const caps = new Set();\n  const l = extensions.length;\n  for (let i = 0; i < l; i++) {\n    const ext = extensions[i];\n    caps.add(ext.toUpperCase());\n  }\n  const len = caps.size;\n  const strength = {};\n  for (let i = 0; i < len; i++) {\n    const cap = caps.values()[i];\n    strength[cap] = -1;\n  }\n  const keys = Object.keys(strength);\n  const sorted_keys = keys.sort((a, b) => strength[a] - strength[b]);\n  const strongest = sorted_keys[0];\n  return class_name + '.' + strongest;\n};\n\n// ##############################################\n\nmodule.exports = strongest_extension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  //console.log(\"a: \" + a + \" b: \" + b);\n  const a_length = a.length;\n  const b_length = b.length;\n\n  if (a_length > b_length) return false;\n\n  let i = 0;\n  let j = 0;\n  const sub_length = b_length - a_length;\n\n  while (i < a_length) {\n    while (j < sub_length) {\n      if (a[i] == b[j]) {\n        i++;\n        j++;\n      }\n      else if (j < sub_length && a[i] == b[j + sub_length]) {\n        i++;\n        j += sub_length;\n      }\n      else if (i < a_length && a[i] == b[j - sub_length]) {\n        i++;\n        j -= sub_length;\n      }\n      else if (i < a_length && j < sub_length && a[i] == b[j + sub_length - 1] && a[i + 1] == b[j]) {\n        i++;\n        j += sub_length;\n      }\n      else {\n        return false;\n      }\n    }\n    j = 0;\n  }\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n    if(num === 0) {\n        return (1, 1);\n    }\n    const sum = (num).toString().split('').reduce((prev, curr) => {\n        if(curr % 2 === 0) {\n            return prev + 1;\n        } else {\n            return prev;\n        }\n    }, 0);\n    return (sum % 2 === 0? (sum / 2, 1) : (sum / 2, 2));\n};\n\n//# sourceMappingURL=even_odd_count.js.map<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  number = parseInt(number);\n  if (number < 1) return 'xix';\n  switch (number) {\n    case 1: return 'xix';\n    case 2: return 'xxv';\n    case 3: return 'xxvi';\n    case 4: return 'xvii';\n    case 5: return 'ix';\n    case 6: return 'ixx';\n    case 7: return 'i';\n    case 8: return 'ii';\n    case 9: return 'iii';\n    case 10: return 'iv';\n    case 11: return 'x';\n    case 12: return 'xx';\n    case 13: return 'xxi';\n    case 14: return 'xii';\n    case 15: return 'v';\n    case 16: return 'vi';\n    case 17: return 'vii';\n    case 18: return 'viii';\n    case 19: return 'ix';\n    case 20: return 'x';\n    case 21: return 'xli';\n    case 22: return 'xlii';\n    case 23: return 'xliii';\n    case 24: return 'cl';\n    case 25: return 'clx';\n    case 26: return 'cxv';\n    case 27: return 'cxii';\n    case 28: return 'ccl';\n    case 29: return 'ccc';\n    case 30: return 'ccxc';\n    case 31: return 'cxl';\n    case 32: return 'cxli';\n    case 33: return 'cd';\n    case 34: return 'cdx';\n    case 35: return 'cxvii';\n    case 36: return 'dxv';\n    case 37: return 'dxii';\n    case 38: return 'dxcv';\n    case 39: return 'dxcc';\n    case 40: return 'l';\n    case 41: return 'lx';\n    case 42: return 'lxx';\n    case 43: return 'lxxx';\n    case 44: return 'lxxxx';\n    case 45: return 'xl';\n    case 46: return 'xli';\n    case 47: return 'xlx';\n    case 48: return 'xlxx';\n    case 49: return 'xlxxx';\n    case 50: return 'xlxxxx';\n    case 51: return 'c';\n    case 52: return 'cx';\n    case 53: return 'cxx';\n    case 54: return 'cxxx';\n    case 55: return 'cxxxx';\n    case 56: return'm';\n    case 57: return'mxx';\n    case 58: return'mxxx';\n    case 59: return'mxxxx';\n    case 60: return'mxl';\n    case 61: return'mxli';\n    case 62: return'mxc';\n    case 63: return'mxxi';\n    case 64: return'mxxii';\n    case 65: return'mxxiii';\n    case 66: return'mxxiv';\n    case 67: return'mv';\n    case 68: return'mvi';\n    case 69: return'mvii';\n    case 70: return'mviii';\n    case 71: return'mvx';\n    case 72: return'mxxv';\n    case 73: return'mxxvi';\n    case 74: return'mxxvii';\n    case 75: return'mxxviii';\n    case 76: return'mxxxv';\n    case 77: return'mxxiv';\n    case 78: return'mxxxvi';\n    case 79: return'mxxvii';\n    case 80: return'mxxviii';\n    case 81: return'mxxxxv';\n    case 82: return'mxxiv';\n    case 83: return'mxxxxvi';\n    case 84: return'mxxvii';\n    case 85: return'mxxxxvii';\n    case 86: return'mxxviii';\n    case 87: return'mxxxxviii';\n    case 88: return'mxxxxix';\n    case 89: return'mxxvx';\n    case 90: return'mxxvi';\n    case 91: return'mxxvii';\n    case 92: return'mxxxxvii';\n    case 93: return'mxxviii';\n    case 94: return'mxxxxviii';\n    case 95: return'mxxxxix';\n    case 96: return'mxxxvx';\n    case 97: return'mxxxvi';\n    case 98: return'mxxxvii';\n    case 99: return'mxxxxvii';\n    case 100: return'mxxxviii';\n    case 101: return'mxxxxviii';\n    case 102: return'mxxxxix';\n    case 103: return'mxxxvx';\n    case 104: return'mxxxvi';\n    case 105: return'mxxxvii';\n    case 106: return'mxxxxvii';\n    case 107: return'mxxxviii';\n    case 108: return'mxxxxviii';\n    case 109: return'mxxxxix';\n    case 110: return'mxxxvx';\n    case 111: return'mxxxvi';\n    case 112: return'mxxxvii';\n    case 113: return'mxxxxvii';\n    case 114: return'mxxxviii';\n    case 115: return'mxxxxviii';\n    case 116: return'mxxxxix';\n    case 117: return'mxxxvx';\n    case 118: return'mxxxvi';\n    case 119: return'mxxxvii';\n    case 120: return'mxxxxvii';\n    case 121: return'mxxxviii';\n    case 122: return'mxxxxviii';\n    case 123: return'mxxxxix';\n    case 124: return'mxxxvx';\n    case 125: return'mxxxvi';\n    case 126: return'mxxxvii';\n    case 127: return'mxxxxvii';\n    case 128: return'mxxxviii';\n    case 129: return'mxxxxviii';"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n    //  (a + b + c) / 2 === (a^2 + b^2 + c^2) / 2\n    return ((a + b + c) / 2 === ((a * a) + (b * b) + (c * c)) / 2);\n}\n\n//  (a + b + c) / 2 === (a^2 + b^2 + c^2) / 2\nconst are_similar = (a, b, c) => {\n    return ((a + b + c) / 2 === ((a * a) + (b * b) + (c * c)) / 2);\n}\n\nconst is_similar = (a, b) => {\n    return ((a + b) / 2 === (a * a) + (b * b) / 2);\n}\n\nconst are_similar = (a, b) => {\n    return ((a + b) / 2 === (a * a) + (b * b) / 2);\n}\n\n//  a > b > c\nconst is_similar = (a, b, c) => {\n    return ((a + b + c) / 3 === ((a * a) + (b * b) + (c * c)) / 3);\n}\n\nconst is_similar = (a, b, c, d) => {\n    return ((a + b + c + d) / 4 === ((a * a) + (b * b) + (c * c) + (d * d)) / 4);\n}\n\nconst are_similar = (a, b, c, d) => {\n    return ((a + b + c + d) / 4 === ((a * a) + (b * b) + (c * c) + (d * d)) / 4);\n}\n\nconst are_similar = (a, b, c, d, e) => {\n    return ((a + b + c + d + e) / 5 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e)) / 5);\n}\n\nconst is_similar = (a, b, c, d, e, f) => {\n    return ((a + b + c + d + e + f) / 6 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f)) / 6);\n}\n\nconst are_similar = (a, b, c, d, e, f, g) => {\n    return ((a + b + c + d + e + f + g) / 8 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f) + (g * g)) / 8);\n}\n\nconst is_similar = (a, b, c, d, e, f, g, h) => {\n    return ((a + b + c + d + e + f + g + h) / 9 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f) + (g * g) + (h * h)) / 9);\n}\n\nconst are_similar = (a, b, c, d, e, f, g, h, i) => {\n    return ((a + b + c + d + e + f + g + h + i) / 10 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f) + (g * g) + (h * h) + (i * i)) / 10);\n}\n\nconst is_similar = (a, b, c, d, e, f, g, h, i, j) => {\n    return ((a + b + c + d + e + f + g + h + i + j) / 12 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f) + (g * g) + (h * h) + (i * i) + (j * j)) / 12);\n}\n\nconst are_similar = (a, b, c, d, e, f, g, h, i, j, k) => {\n    return ((a + b + c + d + e + f + g + h + i + j + k) / 12 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f) + (g * g) + (h * h) + (i * i) + (j * j) + (k * k)) / 12);\n}\n\nconst is_similar = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n    return ((a + b + c + d + e + f + g + h + i + j + k + l) / 12 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f) + (g * g) + (h * h) + (i * i) + (j * j) + (k * k) + (l * l)) / 12);\n}\n\nconst are_similar = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n    return ((a + b + c + d + e + f + g + h + i + j + k + l + m) / 12 === ((a * a) + (b * b) + (c * c) + (d * d) + (e * e) + (f * f) + (g * g) + (h * h) + (i * i) + (j * j) + (k * k) + (l * l) + (m * m)) / 12);\n}\n\n//  (a + b + c) / 3 === (a^"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const map = new Map();\n  words.forEach(word => map.set(word, 1));\n  const result = map.get(words[0]);\n  return words[0];\n};\n\nconsole.log(find_max([\"name\", \"of\", \"string\"]));\nconsole.log(find_max([\"name\", \"enam\", \"game\"]));\nconsole.log(find_max([\"aaaaaaa\", \"bb\",\"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    let result = [];\n    if (number >= need) {\n        number = number - need;\n        result.push(number);\n        if (remaining >= number) {\n            result.push(remaining);\n        }\n    } else {\n        result.push(number);\n        if (remaining >= number) {\n            result.push(remaining);\n        }\n    }\n    return result;\n}\n\n// tests\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n    //console.log('operator = ', operator);\n    //console.log('operand = ', operand);\n\n    let operator_array = operator.map(x => Number(x));\n    let operand_array = operand.map(x => Number(x));\n\n    // console.log('operator_array = ', operator_array);\n    // console.log('operand_array = ', operand_array);\n\n    // Create the result array\n    let result_array = operator_array.map((_, i) => (operand_array[i] + operator_array[i + 1] * operand_array[i + 2]));\n    // console.log('result_array = ', result_array);\n\n    // Calculate the result\n    let result = result_array.reduce((sum, num) => sum + num, 0);\n    // console.log('result = ', result);\n    return result;\n}\n\nconsole.log(do_algebra([ '+', '*', '-'], [2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let index = 0\n  let char = ''\n  let len = s.length\n  let res = ''\n\n  while (index < len) {\n    char = s[index]\n    if (char.match(/[A-Z]/)) {\n      res += char.toUpperCase()\n    } else if (char.match(/[a-z]/)) {\n      res += char.toLowerCase()\n    } else {\n      res += char\n    }\n    index += 1\n  }\n\n  return res\n}\n\nconsole.log(solve('1234'))\nconsole.log(solve('ab'))\nconsole.log(solve('#a@C'))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text.length === 0) return null;\n\n  let md5sum = crypto.createHash('md5').update(text, 'utf8').digest('hex');\n\n  // convert hex string to string\n  return md5sum.slice(0, -2);\n};\n\n/**\n  Given an md5 hash string, return the original text.\n  If 'text' is an empty string, return null.\n\n  >>> string_from_md5('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst string_from_md5 = (text) => {\n  if (text.length === 0) return null;\n\n  let hash = crypto.createHash('md5').update(text, 'utf8').digest('hex');\n  return hash.slice(0, -2);\n};\n\nmodule.exports = {\n  string_to_md5,\n  string_from_md5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const numbers = [];\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      numbers.push(i);\n    }\n  }\n  return numbers;\n};\n\n// export the function\nmodule.exports = generate_integers;\n<|endoftext|>"}
