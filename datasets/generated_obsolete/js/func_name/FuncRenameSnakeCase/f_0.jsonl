{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const result = [];\n  const length = numbers.length;\n\n  for (let i = 0; i < length - 1; i++) {\n    for (let j = i + 1; j < length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        result.push([numbers[i], numbers[j]]);\n      }\n    }\n  }\n\n  return result.length > 0;\n};\n\n/*\n  Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.3)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements2 = (numbers, threshold) => {\n  const result = [];\n  const length = numbers.length;\n\n  for (let i = 0; i < length - 1; i++) {\n    for (let j = i + 1; j < length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        result.push([numbers[i], numbers[j]]);\n      }\n    }\n  }\n\n  return result.length > 0;\n};\n\nmodule.exports = {\n  has_close_elements,\n  has_close_elements2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const all_open_parens = /\\(/g;\n  const all_close_parens = /\\)/g;\n  const open_paren_stack = [];\n  const close_paren_stack = [];\n  let paren_stack_index = 0;\n\n  paren_string = paren_string.replace(all_open_parens, (match) => {\n    if (open_paren_stack.length === 0) {\n      return match;\n    }\n    open_paren_stack.push(paren_stack_index);\n    return `(${open_paren_stack.pop()})`;\n  });\n\n  paren_string = paren_string.replace(all_close_parens, (match) => {\n    if (close_paren_stack.length === 0) {\n      return match;\n    }\n    close_paren_stack.push(paren_stack_index);\n    return `)${close_paren_stack.pop()}`;\n  });\n\n  return [open_paren_stack, close_paren_stack];\n};\n\nconsole.log(separate_paren_groups('((()()))'));\n\n// Output: [[0,2],[1,3],[2,5]]\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  let int_part = Math.floor(number);\n  let decimal_part = number - int_part;\n\n  return decimal_part;\n};\n\n/*\n  Given a string, return the number in the given string.\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3.5')\n  3.5\n  >>> extract_number('3"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  const stack = [];\n  const index = -1;\n\n  operations.forEach(op => {\n    if (op < 0) {\n      stack.push(op);\n    } else if (stack.length === 0) {\n      stack.push(op);\n    } else {\n      stack.push(op);\n      index = stack.length - 1;\n      while (index >= 0) {\n        const prev = stack[index];\n        const next = stack[index - 1];\n        if (next < 0 && prev >= 0) {\n          stack.splice(index, 1);\n          return true;\n        }\n        index -= 1;\n      }\n      stack.pop();\n    }\n  });\n\n  return stack.length === 0;\n};\n\nexport default below_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const mean = (numbers) => (numbers.reduce((p, c) => p + c) / numbers.length)\n  const standard_deviation = (numbers) => {\n    const variance = (numbers) => {\n      const sum = numbers.reduce((p, c) => p + c)\n      const square_sum = sum * sum\n      return square_sum / numbers.length\n    }\n    return Math.sqrt(variance(numbers))\n  }\n  const average = (numbers) => {\n    const sum = numbers.reduce((p, c) => p + c)\n    return sum / numbers.length\n  }\n  const difference = (x, y) => Math.abs(x - y)\n  const deviations = numbers.map((x) => difference(x, mean(numbers)))\n  return deviation = average(deviations)\n}\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the average absolute difference between each\n  element and the median of the list of numbers:\n  MAD = average | x - median |\n  >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median_absolute_deviation = (numbers) => {\n  const median = (numbers) => {\n    const half = numbers.length / 2\n    const upper_index = half\n    const lower_index = half + 1\n    return (numbers[upper_index] + numbers[lower_index]) / 2\n  }\n  const difference = (x, y) => Math.abs(x - y)\n  const deviations = numbers.map((x) => difference(x, median(numbers)))\n  return deviation = average(deviations)\n}\n\n/* For a given list of input numbers, calculate Mean Square Deviation\n  around the mean of this dataset.\n  Mean Square Deviation is the average squared difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_square_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_square_deviation = (numbers) => {\n  const mean = (numbers) => (numbers.reduce((p, c) => p + c) / numbers.length)\n  const standard_deviation = (numbers) => {\n    const variance = (numbers) => {\n      const sum = numbers.reduce((p, c) => p + c)\n      const square_sum = sum * sum\n      return square_sum / numbers.length\n    }\n    return Math.sqrt(variance(numbers))\n  }\n  const average = (numbers) => {\n    const sum = numbers.reduce((p, c) => p + c)\n    return sum / numbers.length\n  }\n  const difference = (x, y) => Math.abs(x - y)\n  const deviations = numbers.map((x) => difference(x, mean(numbers)))\n  return deviation = average(deviations)\n}\n\n/* For a given list of input numbers, calculate Mean Square Deviation\n  around the median of this dataset.\n  Median Square Deviation is the average squared difference between each\n  element and the median of the list of numbers:\n  MAD = average | x - median |\n  >>> median_square_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median_square_deviation = (numbers) => {\n  const median = (numbers) => {\n    const half = numbers.length / 2\n    const upper_index = half\n    const lower_index = half + 1\n    return (numbers[upper_index] + numbers[lower_index]) / 2\n  }\n  const difference = (x, y) => Math.abs(x - y)\n  const deviations = numbers.map((x) => difference(x, median(numbers)))\n  return deviation = average(deviations)\n}\n\n/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the average absolute difference between each\n  element and the median of the list of numbers:\n  MAD = average | x - median |\n  >>> median_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median_absolute_deviation = (numbers) => {\n  const median = (numbers) => {\n    const half = numbers.length / 2\n    const upper_index = half\n    const lower_index = half + 1\n    return (numbers[upper_index] + numbers[lower_index]) / 2\n  }\n  const difference = (x, y) => Math.abs(x - y)\n  const deviations = numbers.map((x) => difference(x, median(numbers)))\n  return deviation = average(deviations)\n}\n\n/*\n  Test the functions\n */\n\n/* Test the function: mean_absolute_deviation */\nconst mean_absolute_deviation_tests = [\n  [\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0, 0]\n  ],\n  [\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1, 2, 3, 4, 5, 6, 7],\n    [1"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  if (typeof delimeter!== 'number') {\n    throw new TypeError('Delimeter must be a number');\n  }\n  if (delimeter === 0) {\n    throw new RangeError('Delimeter must not be zero');\n  }\n  return numbers.reduce((acc, curr, idx) => {\n    if (idx < numbers.length - 1) {\n      acc.push(curr);\n    }\n    acc.push(curr);\n    return acc;\n  }, []);\n};\n\n// ## Interpolation\n// interpolate()\n// Interpolate two lists of numbers, using the'sine' interpolation.\n// The interpolation is done using the [Sinc Function](http://en.wikipedia.org/wiki/Sinc_function), which approximates the function `sin(x)`:\n//\n//     sin(x) ~ x - x^2/2 + x^3/3 - x^4/4 + x^5/5 +...\n//\n// Interpolate two lists of numbers using the Sinc function.\n// The function is a function of two variables. It is defined as\n//\n//     sin(x) = x - x^2/2 + x^3/3 - x^4/4 + x^5/5 +...\n//\n// Example:\n//\n//     const interpolate = (a, b, steps) => {\n//       let curr = a[0];\n//       for (let i = 0; i < steps; i++) {\n//         curr = interpolate(a, b, curr, i);\n//       }\n//       return curr;\n//     };\n//     const a = [1, 2, 3, 4, 5, 6];\n//     const b = [1, 3, 5, 7, 9];\n//     interpolate(a, b, 3); // returns [2, 4, 6, 8, 10]\n//\n// ## Cubic Hermite Interpolation\n// interpolate()\n// Interpolate two lists of numbers, using the 'cubic Hermite interpolation'.\n// The interpolation is done using the [cubic Hermite](http://en.wikipedia.org/wiki/Cubic_Hermite_spline) method:\n//\n//     cubicHermite(a, b, steps)\n//     = c(x) = a[0] + (b[0] - a[0]) * c^2 + (b[1] - a[1]) * c^3 + (b[2] - a[2]) * c^4 + (b[3] - a[3]) * c^5\n//     = a[0] + (b[0] - a[0]) * c^2 + (b[1] - a[1]) * c^3 + (b[2] - a[2]) * c^4 + (b[3] - a[3]) * c^5\n//     = b[0] + (a[0] - b[0]) * c^2 + (a[1] - b[1]) * c^3 + (a[2] - b[2]) * c^4 + (a[3] - b[3]) * c^5\n//     = a[0] + (b[0] - a[0]) * c^2 + (b[1] - a[1]) * c^3 + (b[2] - a[2]) * c^4 + (b[3] - a[3]) * c^5\n//     = a[0] + b[0] * c^2 + a[1] * c^3 + b[1] * c^4 + a[2] * c^5 + b[2] * c^6 + a[3] * c^7 + b[3] * c^8\n//     = b[0] * c^2 + a[1] * c^3 + b[1] * c^4 + a[2] * c^5 + b[2] * c^6 + a[3] * c^7 + b[3] * c^8\n//     = a[0] * c^2 + a[1] * c^3 + a[2] * c^5 + a[3] * c^7 + b[0] * c^4 + b[1] * c^6 + b[2] * c^8 + a[3] * c^9\n//     = a[0] * c^2 + a[1] * c^3 + a[2] * c^5 + a[3] * c^7 + b[0] * c^4 + b[1] * c^6 + b[2] * c^8 + a[3] * c^9\n//     = a[0] * c^2 + a[1] * c^3 + a[2] * c^5 + a[3] * c^7 + b[0] * c^4 + b[1] * c^6 + b[2] * c^8 + a[3] * c^9\n//     = a[0] * c^2 + a[1] * c^3 + a[2] * c^5 + a[3] * c^7 + b[0] * c^4 + b[1] * c^6 + b[2] * c^8 + a[3] * c^9\n//     = a[0] * c^2 + a[1] * c^3 + a[2] * c^5 + a[3] * c^7 + b[0] * c^4 + b[1] * c^6 + b[2] * c^8 + a[3] * c^9\n//     = a[0] * c^2 + a[1] * c^3 + a[2] * c^5 + a[3] * c^7 + b[0] * c^4 + b[1] * c^6 + b[2] * c^8 + a[3] * c^9\n//     = a[0] * c^2 + a[1] * c^3 + a[2] * c^5 + a[3] * c^7 + b[0] * c^4 + b[1]"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  let max_depth = 0;\n  let current_depth = 0;\n\n  paren_string.split(' ').forEach((char, index) => {\n    if (char === '(') {\n      current_depth++;\n    } else if (char === ')') {\n      current_depth--;\n      if (current_depth < 0) {\n        throw new Error('unbalanced parenthesis');\n      }\n    }\n    if (current_depth > max_depth) {\n      max_depth = current_depth;\n    }\n  });\n\n  return max_depth;\n};\n\nmodule.exports = parse_nested_parens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(s => {\n    return s.includes(substring);\n  });\n};\n\n/* Filter an input list of objects by a specified field\n  >>> filter_by_field(['a', 'b', 'c', 'd'], 'x')\n  [{x: 'a'}, {x: 'c'}]\n  >>> filter_by_field([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x')\n  [{x: 'a'}, {x: 'b'}, {x: 'c'}]\n  */\nconst filter_by_field = (objects, field) => {\n  return objects.filter(o => {\n    return o[field];\n  });\n};\n\n/* Given an array of objects, return the values of the specified field\n  >>> get_field_values([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x')\n  ['a', 'b', 'c', 'd']\n  >>> get_field_values([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x')\n  ['a', 'b', 'c', 'd']\n  */\nconst get_field_values = (objects, field) => {\n  return objects.map(o => {\n    return o[field];\n  });\n};\n\n/* Given an array of objects, return the object with the highest value of the\n * specified field\n  >>> get_highest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x')\n  {x: 'd'}\n  >>> get_highest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x')\n  {x: 'd'}\n  */\nconst get_highest_field_value = (objects, field) => {\n  return objects.reduce((a, b) => {\n    return a[field] > b[field]? a : b;\n  });\n};\n\n/* Given an array of objects, return the object with the lowest value of the\n * specified field\n  >>> get_lowest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x')\n  {x: 'a'}\n  >>> get_lowest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x')\n  {x: 'a'}\n  */\nconst get_lowest_field_value = (objects, field) => {\n  return objects.reduce((a, b) => {\n    return a[field] < b[field]? a : b;\n  });\n};\n\n/* Given an array of objects, return the object with the highest value of the\n * specified field that does not have the specified substring\n  >>> filter_by_substring(get_highest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x'), 'b')\n  {x: 'b'}\n  >>> filter_by_substring(get_highest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x'), 'd')\n  {x: 'd'}\n  */\nconst filter_by_substring_highest_field = (objects, substring) => {\n  return filter_by_substring(get_highest_field_value(objects, 'x'), substring);\n};\n\n/* Given an array of objects, return the object with the lowest value of the\n * specified field that does not have the specified substring\n  >>> filter_by_substring(get_lowest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x'), 'b')\n  {x: 'a'}\n  >>> filter_by_substring(get_lowest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x'), 'd')\n  {x: 'c'}\n  */\nconst filter_by_substring_lowest_field = (objects, substring) => {\n  return filter_by_substring(get_lowest_field_value(objects, 'x'), substring);\n};\n\n/* Given an array of objects, return the object with the highest value of the\n * specified field that does not have the specified substring\n  >>> filter_by_substring_highest_field(get_highest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x'), 'b')\n  {x: 'b'}\n  >>> filter_by_substring_highest_field(get_highest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x'), 'd')\n  {x: 'd'}\n  */\nconst filter_by_substring_highest_field_substring = (objects, substring) => {\n  return filter_by_substring(get_highest_field_value(objects, 'x'), substring);\n};\n\n/* Given an array of objects, return the object with the lowest value of the\n * specified field that does not have the specified substring\n  >>> filter_by_substring_lowest_field(get_lowest_field_value([{x: 'a'}, {x: 'b'}, {x: 'c'}, {x: 'd'}], 'x'), 'b')"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  const product = 1\n  const sum = 0\n\n  if (!numbers) {\n    return (sum, product)\n  }\n\n  for (const n of numbers) {\n    const newSum = sum + n\n    const newProduct = product * n\n\n    sum = newSum\n    product = newProduct\n  }\n\n  return (sum, product)\n}\n\nexport default sum_product\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  let i = 1;\n  while (i < numbers.length) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result.push(max);\n    }\n    i++;\n  }\n  return result;\n};\n\nmodule.exports = rolling_max;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n\n  while (string.length > 1) {\n    let postfix = string.slice(0, string.length - 1);\n    let is_palindrome = is_palindrome(postfix);\n    if (is_palindrome) {\n      suffix = postfix + suffix;\n      prefix = string.slice(0, string.length - 1);\n    } else {\n      break;\n    }\n    string = string.slice(0, string.length - 1);\n  }\n\n  return prefix + suffix;\n}\n\n/* Test if a given string is a palindrome\n  >>> is_palindrome('cat')\n  True\n  >>> is_palindrome('cata')\n  True\n  >>> is_palindrome('dac')\n  False\n  >>> is_palindrome('bac')\n  False\n  >>> is_palindrome('abcd')\n  False\n  */\nconst is_palindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n\n  return true;\n}\n\n/* Test if a given string is a palindrome\n  >>> is_palindrome('cat')\n  True\n  >>> is_palindrome('cata')\n  True\n  >>> is_palindrome('dac')\n  False\n  >>> is_palindrome('bac')\n  False\n  >>> is_palindrome('abcd')\n  False\n  */\nconst is_palindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n\n  return true;\n}\n\n/* Test if a given string is a palindrome\n  >>> is_palindrome('cat')\n  True\n  >>> is_palindrome('cata')\n  True\n  >>> is_palindrome('dac')\n  False\n  >>> is_palindrome('bac')\n  False\n  >>> is_palindrome('abcd')\n  False\n  */\nconst is_palindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n\n  return true;\n}\n\n/* Test if a given string is a palindrome\n  >>> is_palindrome('cat')\n  True\n  >>> is_palindrome('cata')\n  True\n  >>> is_palindrome('dac')\n  False\n  >>> is_palindrome('bac')\n  False\n  >>> is_palindrome('abcd')\n  False\n  */\nconst is_palindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n\n  return true;\n}\n\n/* Test if a given string is a palindrome\n  >>> is_palindrome('cat')\n  True\n  >>> is_palindrome('cata')\n  True\n  >>> is_palindrome('dac')\n  False\n  >>> is_palindrome('bac')\n  False\n  >>> is_palindrome('abcd')\n  False\n  */\nconst is_palindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n\n  return true;\n}\n\n/* Test if a given string is a palindrome\n  >>> is_palindrome('cat')\n  True\n  >>> is_palindrome('cata')\n  True\n  >>> is_palindrome('dac')\n  False\n  >>> is_palindrome('bac')\n  False\n  >>> is_palindrome('abcd')\n  False\n  */\nconst is_palindrome = (string) => {\n  let i = 0;\n  let j = string.length - 1;\n\n  while (i < j) {\n    if (string.charAt(i)!= string.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let xorStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        xorStr += strA[i] + strB[i];\n    }\n    return xorStr;\n};\n\n/*\n  Perform binary OR on two input strings and return the result as a string.\n  >>> string_or('0011', '0010')\n  '0101'\n  */\nconst string_or = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let orStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        orStr += strA[i] + strB[i];\n    }\n    return orStr;\n};\n\n/*\n  Perform binary AND on two input strings and return the result as a string.\n  >>> string_and('0101', '0101')\n  '0101'\n  */\nconst string_and = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let andStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        andStr += strA[i] + strB[i];\n    }\n    return andStr;\n};\n\n/*\n  Perform binary NOT on two input strings and return the result as a string.\n  >>> string_not('0101', '0101')\n  '0011'\n  */\nconst string_not = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let notStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        notStr += strA[i] + strB[i];\n    }\n    return notStr;\n};\n\n/*\n  Given two input strings, perform binary XOR on them and return the result\n  as a string.\n  >>> string_xor('0011', '0010')\n  '0101'\n  */\nconst string_xor_binary = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let xorStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        xorStr += (strA[i] + strB[i]).toString(2);\n    }\n    return xorStr;\n};\n\n/*\n  Given two input strings, perform binary OR on them and return the result\n  as a string.\n  >>> string_or('0011', '0010')\n  '0101'\n  */\nconst string_or_binary = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let orStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        orStr += (strA[i] + strB[i]).toString(2);\n    }\n    return orStr;\n};\n\n/*\n  Given two input strings, perform binary AND on them and return the result\n  as a string.\n  >>> string_and('0011', '0010')\n  '0011'\n  */\nconst string_and_binary = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let andStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        andStr += (strA[i] + strB[i]).toString(2);\n    }\n    return andStr;\n};\n\n/*\n  Given two input strings, perform binary NOT on them and return the result\n  as a string.\n  >>> string_not('0011', '0010')\n  '1100'\n  */\nconst string_not_binary = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let notStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        notStr += (strA[i] + strB[i]).toString(2);\n    }\n    return notStr;\n};\n\n/*\n  Given two input strings, perform a bitwise AND on them and return the result\n  as a string.\n  >>> string_and_binary('0011', '0010')\n  '0011'\n  */\nconst string_and_binary_bitwise = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let andStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        andStr += (strA[i] + strB[i]).toString(2);\n    }\n    return andStr;\n};\n\n/*\n  Given two input strings, perform a bitwise OR on them and return the result\n  as a string.\n  >>> string_or_binary('0011', '0010')\n  '1101'\n  */\nconst string_or_binary_bitwise = (a, b) => {\n    const strA = a.split('');\n    const strB = b.split('');\n    const strC = [];\n    let orStr = '';\n    for (let i = 0; i < strA.length; i++) {\n        orStr += (strA[i] + strB[i]).toString(2);\n    }\n    return orStr;\n};\n\n/*\n  Given two input strings, perform a bitwise NOT on"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) return null;\n  return strings[0].length > strings[1].length? strings[0] : strings[1];\n}\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  let temp = 0;\n  while (b) {\n    temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n};\n\n/* Return a least common multiple of two integers a and b\n  >>> least_common_multiple(3, 5)\n  15\n  >>> least_common_multiple(25, 15)\n  25\n  */\nconst least_common_multiple = (a, b) => {\n  return a * b / greatest_common_divisor(a, b);\n};\n\n/* Return the sum of the integers a through b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  35\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the difference of the integers a and b\n  >>> difference(5, 3)\n  2\n  >>> difference(25, 15)\n  10\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/* Return the product of the integers a and b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  375\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Return the quotient of the integers a and b\n  >>> quotient(3, 5)\n  1\n  >>> quotient(25, 15)\n  5\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/* Return the remainder of the integer division of the integers a and b\n  >>> remainder(3, 5)\n  2\n  >>> remainder(25, 15)\n  10\n  */\nconst remainder = (a, b) => {\n  return a % b;\n};\n\n/* Return the product of the integers a through b\n  >>> product(3, 5)\n  15\n  >>> product(25, 15)\n  375\n  */\nconst product = (a, b) => {\n  return a * b;\n};\n\n/* Return the sum of the integers a through b\n  >>> sum(3, 5)\n  8\n  >>> sum(25, 15)\n  35\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the difference of the integers a and b\n  >>> difference(5, 3)\n  2\n  >>> difference(25, 15)\n  10\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/* Return the quotient of the integers a and b\n  >>> quotient(3, 5)\n  1\n  >>> quotient(25, 15)\n  5\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/* Return the remainder of the integer division of the integers a and b\n  >>> remainder(3, 5)\n  2\n  >>> remainder(25, 15)\n  10\n  */\nconst remainder = (a, b) => {\n  return a % b;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  const prefixes = []\n  let prefix = ''\n  for (let i = 0; i < string.length; i++) {\n    prefix += string[i]\n    prefixes.push(prefix)\n    prefix = prefix[0]\n  }\n  return prefixes\n}\n\n/* Return longest common prefix from the input strings\n  >>> longest_common_prefix('abc', 'abc')\n  'a'\n  >>> longest_common_prefix('abc', 'bcd')\n  'a'\n  >>> longest_common_prefix('abc', 'abcd')\n  'a'\n  >>> longest_common_prefix('abc', 'abcd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'ab')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'ac')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acde')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'ab')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'ac')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acde')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'ab')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'ac')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acde')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acde')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acde')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acde')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acde')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'abc')\n  'abc'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acb')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd', 'acd')\n  'ab'\n  >>> longest_common_prefix('abc', 'abcd', 'acd', 'acd', 'acd', 'acd',"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  const numbers = [];\n  for (let i = 0; i < n; i++) {\n    numbers.push(i);\n  }\n  return numbers.join(\" \");\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 3)\n  '0 1 2'\n  >>> string_sequence(5, 3)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, m) => {\n  const numbers = [];\n  for (let i = 0; i < m; i++) {\n    numbers.push(i);\n  }\n  return numbers.join(\" \");\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0, 3, 3)\n  '0 1 2'\n  >>> string_sequence(5, 3, 3)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n, m, k) => {\n  const numbers = [];\n  for (let i = 0; i < k; i++) {\n    numbers.push(i);\n  }\n  return numbers.join(\" \");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const lower_case_string = string.toLowerCase()\n  let unique_characters = 0\n  for (let index = 0; index < lower_case_string.length; index++) {\n    unique_characters += lower_case_string[index] === lower_case_string[index]? 1 : 0\n  }\n  return unique_characters\n}\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const notes = music_string.split(' ');\n\n  return notes.map(note => {\n    let note_length = 4;\n\n    if (note[0] === '.') {\n      note_length = 2;\n    }\n\n    return note_length;\n  });\n};\n\n/**\n  * This is a function that takes a list of integers and returns the sum of all elements.\n  *\n  * @param {Array} list - List of integers to sum.\n  * @return {Number} Sum of all elements.\n  */\nconst sum_list = (list) => {\n  return list.reduce((accumulator, current_element) => {\n    return accumulator + current_element;\n  }, 0);\n};\n\n/**\n  * This is a function that takes a list of integers and returns the maximum element of that list.\n  *\n  * @param {Array} list - List of integers.\n  * @return {Number} Maximum element of the list.\n  */\nconst max_list = (list) => {\n  return Math.max(list);\n};\n\n/**\n  * This is a function that takes a list of integers and returns the minimum element of that list.\n  *\n  * @param {Array} list - List of integers.\n  * @return {Number} Minimum element of the list.\n  */\nconst min_list = (list) => {\n  return Math.min(list);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the sum of all elements of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Sum of all elements of the list.\n  */\nconst sum_list_of_strings = (list) => {\n  return list.reduce((accumulator, current_element) => {\n    return accumulator + current_element;\n  }, 0);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the maximum element of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Maximum element of the list.\n  */\nconst max_list_of_strings = (list) => {\n  return Math.max(list);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the minimum element of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Minimum element of the list.\n  */\nconst min_list_of_strings = (list) => {\n  return Math.min(list);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the sum of all elements of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Sum of all elements of the list.\n  */\nconst sum_list_of_strings_as_a_string = (list) => {\n  return list.reduce((accumulator, current_element) => {\n    return accumulator + current_element;\n  }, 0);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the maximum element of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Maximum element of the list.\n  */\nconst max_list_of_strings_as_a_string = (list) => {\n  return Math.max(list);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the minimum element of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Minimum element of the list.\n  */\nconst min_list_of_strings_as_a_string = (list) => {\n  return Math.min(list);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the sum of all elements of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Sum of all elements of the list.\n  */\nconst sum_list_of_strings_as_a_string_as_a_string = (list) => {\n  return list.reduce((accumulator, current_element) => {\n    return accumulator + current_element;\n  }, 0);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the maximum element of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Maximum element of the list.\n  */\nconst max_list_of_strings_as_a_string_as_a_string = (list) => {\n  return Math.max(list);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the minimum element of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Minimum element of the list.\n  */\nconst min_list_of_strings_as_a_string_as_a_string = (list) => {\n  return Math.min(list);\n};\n\n/**\n  * This is a function that takes a list of strings and returns the sum of all elements of that list.\n  *\n  * @param {Array} list - List of strings.\n  * @return {Number} Sum of all elements of the list.\n  */\nconst sum_list_of_strings_as_a_string_as_a_string_as_a_string = (list) => {\n  return list.reduce((accumulator, current_element) => {\n    return accumulator + current_element;\n  }, 0);\n};\n\n/**\n  * This is a function that"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n  const string_length = string.length;\n  const substring_length = substring.length;\n  const how_many = [];\n  for (let i = 0; i <= string_length - substring_length; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      how_many.push(1);\n    }\n    if (string.indexOf(substring, i + substring_length)!== -1) {\n      how_many.push(1);\n    }\n  }\n  return how_many;\n};\n\n// Sum of an array of numbers\nconst sum_of_numbers = (numbers) => {\n  return numbers.reduce((prev, current) => prev + current);\n};\n\n// Sum of squares of an array of numbers\nconst sum_of_squares = (numbers) => {\n  return numbers.reduce((prev, current) => prev + Math.pow(current, 2));\n};\n\n// Sum of an array of arrays of numbers\nconst sum_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_of_numbers(current));\n};\n\n// Sum of an array of arrays of arrays of numbers\nconst sum_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_of_arrays(current));\n};\n\n// Sum of an array of arrays of arrays of arrays of numbers\nconst sum_of_arrays_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_of_arrays_of_arrays(current));\n};\n\n// Sum of an array of numbers, from one number to the next\nconst sum_from_one_to_next = (numbers) => {\n  return numbers.reduce((prev, current) => prev + current - prev);\n};\n\n// Sum of an array of arrays of numbers, from one array to the next\nconst sum_from_one_to_next_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_of_arrays_from_one_to_next(current));\n};\n\n// Sum of an array of arrays of arrays of numbers, from one array to the next\nconst sum_from_one_to_next_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_of_arrays_of_arrays_from_one_to_next(current));\n};\n\n// Sum of an array of arrays of arrays of arrays of numbers, from one array to the next\nconst sum_from_one_to_next_of_arrays_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_of_arrays_of_arrays_of_arrays_from_one_to_next(current));\n};\n\n// Sum of an array of numbers, from the last number to the first\nconst sum_from_last_to_first = (numbers) => {\n  return numbers.reduce((prev, current) => prev + current - current);\n};\n\n// Sum of an array of arrays of numbers, from the last number to the first\nconst sum_from_last_to_first_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_from_last_to_first(current));\n};\n\n// Sum of an array of arrays of arrays of numbers, from the last number to the first\nconst sum_from_last_to_first_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_from_last_to_first_of_arrays(current));\n};\n\n// Sum of an array of arrays of arrays of arrays of numbers, from the last number to the first\nconst sum_from_last_to_first_of_arrays_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_from_last_to_first_of_arrays_of_arrays(current));\n};\n\n// Sum of an array of numbers, from the first number to the last\nconst sum_from_first_to_last = (numbers) => {\n  return numbers.reduce((prev, current) => prev + current - prev);\n};\n\n// Sum of an array of arrays of numbers, from the first number to the last\nconst sum_from_first_to_last_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_from_first_to_last(current));\n};\n\n// Sum of an array of arrays of arrays of numbers, from the first number to the last\nconst sum_from_first_to_last_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_from_first_to_last_of_arrays(current));\n};\n\n// Sum of an array of arrays of arrays of arrays of numbers, from the first number to the last\nconst sum_from_first_to_last_of_arrays_of_arrays_of_arrays = (arrays) => {\n  return arrays.reduce((prev, current) => prev + sum_from_first_to_last_of_arrays_of_arrays(current));\n};\n\n// Sum of an array of numbers, from the first number to the first\nconst sum_from_first_to_first = (numbers) => {\n  return numbers.reduce((prev, current) => prev + current - current);\n};\n\n// Sum of an array of arrays of numbers, from the first number to the first\nconst sum_from_first_to_first_of_arrays = (arrays) => {\n  return arrays.red"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n    return numbers.split(' ').sort((a, b) => parseInt(b) - parseInt(a)).join(' ')\n}\n\n/*\n  Input: numbers sorted from largest to smallest\n  Output: the numbers in ascending order\n  >>> sort_numbers('two one three')\n  'one two three'\n  */\nconst sort_numbers_reverse = (numbers) => {\n    return numbers.split(' ').sort((a, b) => parseInt(a) - parseInt(b)).join(' ')\n}\n\n/*\n  Input: numbers sorted from largest to smallest\n  Output: the numbers in descending order\n  >>> sort_numbers('two one three')\n  'two three one'\n  */\nconst sort_numbers_reverse_desc = (numbers) => {\n    return numbers.split(' ').sort((a, b) => parseInt(b) - parseInt(a)).reverse().join(' ')\n}\n\n/*\n  Input: a string of numbers sorted from largest to smallest\n  Output: the numbers in descending order\n  >>> sort_numbers('tw o one three')\n  'two three one'\n  */\nconst sort_numbers_reverse_string = (numbers) => {\n    return sort_numbers_reverse(sort_numbers(numbers))\n}\n\n/*\n  Input: a string of numbers sorted from largest to smallest\n  Output: the numbers in descending order\n  >>> sort_numbers('tw o one three')\n  'two three one'\n  */\nconst sort_numbers_reverse_string_desc = (numbers) => {\n    return sort_numbers_reverse_desc(sort_numbers_reverse(numbers))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  // The closest pair of numbers to the supplied list\n  let closest_pair = null;\n\n  // Find the closest pair\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < Math.abs(closest_pair[0] - closest_pair[1])) {\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closest_pair;\n};\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number)\nconst find_closest_elements_random = (numbers) => {\n  // The closest pair of numbers to the supplied list\n  let closest_pair = null;\n\n  // Find the closest pair\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let x = Math.abs(numbers[i] - numbers[j]);\n      if (closest_pair === null || x < Math.abs(closest_pair[0] - closest_pair[1])) {\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closest_pair;\n};\n\n// From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number)\nconst find_closest_elements_random_stable = (numbers) => {\n  // The closest pair of numbers to the supplied list\n  let closest_pair = null;\n\n  // Find the closest pair\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      let x = Math.abs(numbers[i] - numbers[j]);\n      if (closest_pair === null || x < Math.abs(closest_pair[0] - closest_pair[1])) {\n        closest_pair = [numbers[i], numbers[j]];\n      }\n    }\n  }\n\n  return closest_pair;\n};\n\nconst find_closest_elements_random_stable_memoized = (numbers) => {\n  let memoized_find_closest_elements = memoize(find_closest_elements_random_stable);\n  return memoized_find_closest_elements(numbers);\n};\n\nconst find_closest_elements_random_stable_memoized_stable = (numbers) => {\n  let memoized_find_closest_elements = memoize(find_closest_elements_random_stable_stable);\n  return memoized_find_closest_elements(numbers);\n};\n\n// Test\nconst test_find_closest_elements_random_stable = (input) => {\n  let find_closest_elements_random_stable_result = find_closest_elements_random_stable(input);\n  console.log(`The closest pair of numbers to the supplied list is ${find_closest_elements_random_stable_result}`);\n};\n\n// Test\nconst test_find_closest_elements_random_stable_stable = (input) => {\n  let find_closest_elements_random_stable_stable_result = find_closest_elements_random_stable_stable(input);\n  console.log(`The closest pair of numbers to the supplied list is ${find_closest_elements_random_stable_stable_result}`);\n};\n\n// Test\nconst test_find_closest_elements_random = (input) => {\n  let find_closest_elements_random_result = find_closest_elements_random(input);\n  console.log(`The closest pair of numbers to the supplied list is ${find_closest_elements_random_result}`);\n};\n\n// Test\nconst test_find_closest_elements_random_stable_memoized = (input) => {\n  let find_closest_elements_random_stable_memoized_result = find_closest_elements_random_stable_memoized(input);\n  console.log(`The closest pair of numbers to the supplied list is ${find_closest_elements_random_stable_memoized_result}`);\n};\n\n// Test\nconst test_find_closest_elements_random_stable_memoized_stable = (input) => {\n  let find_closest_elements_random_stable_memoized_stable_result = find_closest_elements_random_stable_memoized_stable(input);\n  console.log(`The closest pair of numbers to the supplied list is ${find_closest_elements_random_stable_memoized_stable_result}`);\n};\n\n// Test\nconst test_find_closest_elements_random_stable = (input) => {\n  let find_closest_elements_random_stable_stable_result = find_closest_elements_random_stable_stable(input);\n  console.log(`The closest pair of numbers to the supplied list is ${find_closest_elements_random_stable_stable_result}`);\n};\n\n// Test\nconst test_find_closest_elements_random_"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const new_numbers = [];\n  let min = numbers[0];\n  let max = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    min = Math.min(min, numbers[i]);\n    max = Math.max(max, numbers[i]);\n  }\n  let scale = 1.0 / (max - min);\n  for (let i = 0; i < numbers.length; i++) {\n    new_numbers.push(Math.floor((numbers[i] - min) * scale));\n  }\n  return new_numbers;\n}\n\nexport default rescale_to_unit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  return values.filter(v => typeof v === 'number' && isFinite(v));\n};\n\n/*\n  Given a list of strings, filter out all the strings that don't start with\n  \"a\".\n  >>> filter_prefix(\"abc\", \"a\")\n  [\"a\", \"b\", \"c\"]\n  >>> filter_prefix(\"a\", \"a\")\n  [\"a\"]\n  >>> filter_prefix(\"a\", \"\")\n  []\n  >>> filter_prefix(\"\", \"a\")\n  []\n  >>> filter_prefix(\"\", \"\")\n  []\n  >>> filter_prefix(\"abcd\", \"\")\n  []\n  >>> filter_prefix(\"abcd\", \"a\")\n  [\"a\", \"b\", \"c\", \"d\"]\n  >>> filter_prefix(\"abcd\", \"a\", 2)\n  [\"ab\", \"bc\", \"cd\"]\n  >>> filter_prefix(\"abcd\", \"a\", -2)\n  []\n  >>> filter_prefix(\"abcd\", \"a\", 3)\n  []\n  */\nconst filter_prefix = (values, prefix) => {\n  const len = values.length;\n  if (!len) return [];\n  if (!prefix) return values;\n  if (prefix === \"\") return [];\n  const filtered = [];\n  let index = 0;\n  while (index < len) {\n    const value = values[index];\n    if (value.startsWith(prefix)) {\n      filtered.push(value);\n    }\n    index++;\n  }\n  return filtered;\n};\n\n/*\n  Given a list of strings, return a list of the strings without the first\n  character.\n  >>> filter_suffix(\"abc\", \"a\")\n  [\"b\", \"c\"]\n  >>> filter_suffix(\"a\", \"a\")\n  []\n  >>> filter_suffix(\"a\", \"\")\n  []\n  >>> filter_suffix(\"\", \"a\")\n  []\n  >>> filter_suffix(\"abcd\", \"a\")\n  [\"b\", \"c\", \"d\"]\n  >>> filter_suffix(\"abcd\", \"b\")\n  [\"a\", \"c\", \"d\"]\n  >>> filter_suffix(\"abcd\", \"c\")\n  [\"a\", \"b\", \"d\"]\n  */\nconst filter_suffix = (values, suffix) => {\n  const len = values.length;\n  if (!len) return [];\n  if (!suffix) return values;\n  if (suffix === \"\") return [];\n  const filtered = [];\n  let index = len - 1;\n  while (index >= 0) {\n    const value = values[index];\n    if (value.endsWith(suffix)) {\n      filtered.push(value);\n    }\n    index--;\n  }\n  return filtered;\n};\n\n/*\n  Given a list of strings, return a list of the strings without the first\n  character.\n  >>> filter_suffix_at([\"abc\", \"abc\"], \"a\")\n  [\"bc\", \"bc\"]\n  >>> filter_suffix_at([\"abc\"], \"a\")\n  []\n  >>> filter_suffix_at([\"abc\"], \"\")\n  []\n  >>> filter_suffix_at([\"abc\"], \"b\")\n  [\"abc\"]\n  >>> filter_suffix_at([\"abc\"], \"c\")\n  [\"abc\"]\n  >>> filter_suffix_at([\"abc\", \"abc\"], \"c\")\n  [\"abc\"]\n  >>> filter_suffix_at([\"abc\", \"abc\"], \"b\")\n  [\"abc\", \"abc\"]\n  >>> filter_suffix_at([\"abc\", \"abc\"], \"a\")\n  [\"abc\", \"abc\"]\n  >>> filter_suffix_at([\"abc\", \"abc\"], \"\")\n  [\"abc\", \"abc\"]\n  */\nconst filter_suffix_at = (values, index) => {\n  const len = values.length;\n  if (!len) return [];\n  if (!index) return values;\n  if (index === \"\") return [];\n  const filtered = [];\n  let index2 = index;\n  while (index2 < len) {\n    const value = values[index2];\n    if (value.endsWith(values[index])) {\n      filtered.push(value);\n    }\n    index2++;\n  }\n  return filtered;\n};\n\n/*\n  Return a list of the first n elements of a list.\n  >>> first_n(3, [1, 2, 3, 4, 5])\n  [1, 2, 3]\n  >>> first_n(3, [])\n  []\n  >>> first_n(3, [1, 2, 3])\n  [1, 2, 3]\n  >>> first_n(3, [1, 2])\n  [1, 2]\n  >>> first_n(3, [1])\n  [1]\n  */\nconst first_n = (n, values) => {\n  if (!n) return [];\n  const len = values.length;\n  const filtered = [];\n  let index = 0;\n  while (index < len && filtered.length < n) {\n    filtered.push(values[index]);\n    index++;\n  }\n  return filtered;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('strlen: argument must be a string');\n  }\n  return string.length;\n};\n\nexport default strlen;\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  return Math.ceil(Math.sqrt(n));\n};\n\n/**\n  For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> largest_divisor(15)\n  3\n  >>> largest_divisor(13)\n  3\n  >>> largest_divisor(16)\n  4\n  */\nconst smallest_divisor = (n) => {\n  return Math.ceil(Math.sqrt(n));\n};\n\n/**\n  Given a number n, find the sum of all its multiples\n  >>> sum_of_multiples(4)\n  16\n  >>> sum_of_multiples(15)\n  60\n  >>> sum_of_multiples(13)\n  60\n  >>> sum_of_multiples(6)\n  12\n  \"\"\"\nconst sum_of_multiples = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n  Given a number n, find the sum of all its multiples\n  >>> sum_of_multiples(4)\n  16\n  >>> sum_of_multiples(15)\n  60\n  >>> sum_of_multiples(13)\n  60\n  >>> sum_of_multiples(6)\n  12\n  \"\"\"\nconst sum_of_multiples = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/**\n  Given a number n, find the sum of all its multiples\n  >>> sum_of_multiples(4)\n  16\n  >>> sum_of_multiples(15)\n  60\n  >>> sum_of_multiples(13)\n  60\n  >>> sum_of_multiples(6)\n  12\n  \"\"\"\nconst sum_of_multiples = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nmodule.exports = {\n  largest_divisor,\n  smallest_divisor,\n  sum_of_multiples\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let result = [];\n  let i = 2;\n  while (i <= n) {\n    let curr = n % i;\n    if (curr === 0) {\n      result.push(i);\n      n = n / i;\n    } else {\n      i = i + 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n    const arr = [];\n    const result = [];\n    const current = [];\n\n    if (!numbers ||!numbers.length) {\n        return result;\n    }\n\n    numbers.forEach(item => {\n        const index = current.indexOf(item);\n        if (index === -1) {\n            current.push(item);\n        } else {\n            arr.push(item);\n        }\n    });\n\n    arr.forEach(item => {\n        result.push(item);\n    });\n\n    return result;\n};\n\n// console.log(remove_duplicates([1, 2, 3, 2, 4]));\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.replace(/[a-z]/g, c => c.toUpperCase());\n};\n\n// For a given string, capitalize every letter.\nconst capitalize = (string) => {\n  return string.replace(/^\\W+|\\W+$/g, \"\");\n};\n\n// Create a string that is made of a sequence of word characters.\nconst create_sentence = (string) => {\n  return string.split(\" \").map(capitalize).join(\" \");\n};\n\n// Create a string that is made of a sequence of word characters.\nconst create_sentence_with_dashes = (string) => {\n  return string.split(\" \").map(capitalize).join(\" - \");\n};\n\n/*\n  # If there is a string, remove all the spaces in the string.\n  >>> remove_spaces('Hello world')\n  'Hello world'\n  >>> remove_spaces('  Hello world  ')\n  'Hello world'\n  >>> remove_spaces('  Hello world    ')\n  'Hello world'\n  >>> remove_spaces('  Hello world    \\n')\n  'Hello world'\n  >>> remove_spaces('  Hello world    \\n\\n')\n  'Hello world'\n  >>> remove_spaces('  Hello world    \\n\\n\\n')\n  'Hello world'\n  >>> remove_spaces('  Hello world    \\n\\n\\n\\n')\n  'Hello world'\n  >>> remove_spaces('  Hello world    \\n\\n\\n\\n\\n')\n  'Hello world'\n  >>> remove_spaces('Hello world')\n  'Hello world'\n  >>> remove_spaces('Hello world ')\n  'Hello world '\n  >>> remove_spaces('Hello world  ')\n  'Hello world  '\n  >>> remove_spaces('Hello world  \\n')\n  'Hello world  \\n'\n  >>> remove_spaces('Hello world  \\n\\n')\n  'Hello world  \\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n')\n  'Hello world  \\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n'\n  >>> remove_spaces('Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n')\n  'Hello world  \\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((str, x) => str + x, '')\n}\n\n/**\n  * Remove whitespace from both ends of a string\n  *\n  * @param {string} str The string to trim\n  * @returns {string} The string without whitespace\n  */\nconst trim = (str) => {\n  return str.trim()\n}\n\n/**\n  * Return a list of all strings in a string\n  *\n  * @param {string} str The string to split\n  * @returns {array} An array of strings\n  */\nconst split = (str) => {\n  return str.split('')\n}\n\n/**\n  * Return a string with all spaces removed\n  *\n  * @param {string} str The string to strip\n  * @returns {string} The string without whitespace\n  */\nconst strip = (str) => {\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\n/**\n  * Return a string without all special characters\n  *\n  * @param {string} str The string to sanitize\n  * @returns {string} The string without special characters\n  */\nconst sanitize = (str) => {\n  return str.replace(/[^\\w\\s]/gi, '')\n}\n\n/**\n  * Return a string with all special characters replaced with a space\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst replace = (str) => {\n  return str.replace(/[^\\w\\s]/gi,'')\n}\n\n/**\n  * Return a string with all special characters removed\n  *\n  * @param {string} str The string to remove\n  * @returns {string} The string without special characters\n  */\nconst remove = (str) => {\n  return str.replace(/[^\\w\\s]/g, '')\n}\n\n/**\n  * Return a string with all characters in upper case\n  *\n  * @param {string} str The string to convert\n  * @returns {string} The string in upper case\n  */\nconst upperCase = (str) => {\n  return str.toUpperCase()\n}\n\n/**\n  * Return a string with all characters in lower case\n  *\n  * @param {string} str The string to convert\n  * @returns {string} The string in lower case\n  */\nconst lowerCase = (str) => {\n  return str.toLowerCase()\n}\n\n/**\n  * Return a string with all special characters replaced with an underscore\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst underscore = (str) => {\n  return str.replace(/[^\\w\\s]/gi, '_')\n}\n\n/**\n  * Return a string with all special characters replaced with a space\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst space = (str) => {\n  return str.replace(/[^\\w\\s]/g,'')\n}\n\n/**\n  * Return a string with all special characters replaced with a dash\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst dash = (str) => {\n  return str.replace(/[^\\w\\s]/g, '-')\n}\n\n/**\n  * Return a string with all special characters replaced with a hyphen\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst hyphen = (str) => {\n  return str.replace(/[^\\w\\s]/g, '-')\n}\n\n/**\n  * Return a string with all special characters replaced with a underscore\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst upper = (str) => {\n  return str.toUpperCase()\n}\n\n/**\n  * Return a string with all special characters replaced with a lowercase\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst lower = (str) => {\n  return str.toLowerCase()\n}\n\n/**\n  * Return a string with all special characters replaced with a lowercase\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst lowerHyphen = (str) => {\n  return str.replace(/[^\\w\\s]/g, '-')\n}\n\n/**\n  * Return a string with all special characters replaced with a lowercase\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst lowerDash = (str) => {\n  return str.replace(/[^\\w\\s]/g, '-')\n}\n\n/**\n  * Return a string with all special characters replaced with a lowercase\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst lowerSpace = (str) => {\n  return str.replace(/[^\\w\\s]/g,'')\n}\n\n/**\n  * Return a string with all special characters replaced with a lowercase\n  *\n  * @param {string} str The string to replace\n  * @returns {string} The string with all special characters replaced\n  */\nconst lowerHyphenSpace = (str) => {\n  return str.replace(/[^\\w\\s]/g, '- ')\n}\n\n/**\n  * Return a string with all special characters replaced with a lowercase\n  *\n  * @param {string}"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(string => string.indexOf(prefix) === 0);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  >>> filter_by_substring(['abc', 'bcd', 'cde', 'array'], 'not_a')\n  []\n  */\nconst filter_by_substring = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) > -1);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring\n  and also match a given predicate.\n  >>> filter_by_substring_and_predicate([], 'a', predicate => predicate(''))\n  []\n  >>> filter_by_substring_and_predicate(['abc', 'bcd', 'cde', 'array'], 'a', predicate => predicate('array'))\n  ['array']\n  >>> filter_by_substring_and_predicate(['abc', 'bcd', 'cde', 'array'], 'a', predicate => predicate('not_a'))\n  []\n  */\nconst filter_by_substring_and_predicate = (strings, substring, predicate) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) > -1 && predicate(string);\n  });\n};\n\n/* Filter an input list of strings only for ones that match a given predicate.\n  >>> filter_by_predicate([], predicate => predicate(''))\n  []\n  >>> filter_by_predicate(['abc', 'bcd', 'cde', 'array'], predicate => predicate('array'))\n  ['array']\n  >>> filter_by_predicate(['abc', 'bcd', 'cde', 'array'], predicate => predicate('not_a'))\n  []\n  */\nconst filter_by_predicate = (strings, predicate) => {\n  return strings.filter(string => predicate(string));\n};\n\n/* Filter an input list of strings only for ones that don't contain a given substring.\n  >>> filter_by_substring_not([], 'a')\n  []\n  >>> filter_by_substring_not(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde']\n  */\nconst filter_by_substring_not = (strings, substring) => {\n  return strings.filter(string => string.indexOf(substring) === -1);\n};\n\n/* Filter an input list of strings only for ones that don't contain a given substring\n  and also match a given predicate.\n  >>> filter_by_substring_not_and_predicate([], 'a', predicate => predicate(''))\n  []\n  >>> filter_by_substring_not_and_predicate(['abc', 'bcd', 'cde', 'array'], 'a', predicate => predicate('array'))\n  ['bcd', 'cde']\n  >>> filter_by_substring_not_and_predicate(['abc', 'bcd', 'cde', 'array'], 'a', predicate => predicate('not_a'))\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_substring_not_and_predicate = (strings, substring, predicate) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) === -1 && predicate(string);\n  });\n};\n\n/* Filter an input list of strings only for ones that don't match a given predicate.\n  >>> filter_by_predicate_not([], predicate => predicate(''))\n  []\n  >>> filter_by_predicate_not(['abc', 'bcd', 'cde', 'array'], predicate => predicate('array'))\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_predicate_not = (strings, predicate) => {\n  return strings.filter(string =>!predicate(string));\n};\n\n/* Filter an input list of strings only for ones that don't contain a given substring\n  and also match a given predicate.\n  >>> filter_by_substring_not_and_predicate_not([], 'a', predicate => predicate(''))\n  []\n  >>> filter_by_substring_not_and_predicate_not(['abc', 'bcd', 'cde', 'array'], 'a', predicate => predicate('array'))\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_substring_not_and_predicate_not = (strings, substring, predicate) => {\n  return strings.filter(string => {\n    return string.indexOf(substring) === -1 &&!predicate(string);\n  });\n};\n\n/* Filter an input list of strings only for ones that match a given predicate.\n  >>> filter_by_predicate_not_and_substring_not([], 'a', predicate => predicate(''))\n  []\n  >>> filter_by_predicate_not_and_substring_not(['abc', 'bcd', 'cde', 'array'], 'a', predicate => predicate('array'))\n  []\n  >>> filter_by_predicate_not_and_substring_not(['abc', 'bcd', 'cde', 'array'], 'a', predicate => predicate('not_a'))\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst filter_by_predicate_not_and_substring_not = (strings, substring, predicate) => {\n  return strings.filter(string => {\n    return!predicate(string) && string.indexOf(substring) === -1;\n  });\n};\n\n/* Filter an input list of strings only for ones that don't contain a given substring\n  and"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * //example\n  * get_even(4)\n  * //returns 2\n  */\nconst get_even = (n) => {\n  return n % 2 === 0? n : n + 1\n}\n\n/**\n  * @param {string} s\n  * @return {string}\n  * @example\n  * //example\n  * reverse_string('abcdefg')\n  * //returns 'gfedabc'\n  */\nconst reverse_string = (s) => {\n  return s.split('').reverse().join('')\n}\n\n/**\n  * @param {string} s\n  * @return {string}\n  * @example\n  * //example\n  * rotate_string('abcdefg', 1)\n  * //returns 'bcdefga'\n  */\nconst rotate_string = (s, r) => {\n  if (r === 0) {\n    return s\n  }\n  return s.split('').reverse().join('')\n}\n\n/**\n  * @param {string} s\n  * @return {string}\n  * @example\n  * //example\n  * rotate_string('abcdefg', 2)\n  * //returns 'efgabcd'\n  */\nconst rotate_string_with_rotation = (s, r) => {\n  if (r === 0) {\n    return s\n  }\n  return s.split('').reverse().join('')\n}\n\nexport {\n  get_positive,\n  get_even,\n  reverse_string,\n  rotate_string,\n  rotate_string_with_rotation\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n === 1) return false\n  if (n === 2) return true\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) return false\n    i += 1\n  }\n  return true\n}\n\n/*Return the smallest number that has the same digits as the given number.\n  >>> get_next_prime(11)\n  12\n  >>> get_next_prime(10)\n  12\n  >>> get_next_prime(13)\n  23\n  >>> get_next_prime(15)\n  23\n  >>> get_next_prime(14)\n  23\n  >>> get_next_prime(2)\n  2\n  >>> get_next_prime(3)\n  3\n  >>> get_next_prime(4)\n  4\n  >>> get_next_prime(1)\n  1\n  >>> get_next_prime(7)\n  7\n  >>> get_next_prime(8)\n  8\n  >>> get_next_prime(100000000)\n  100000000\n  */\nconst get_next_prime = (n) => {\n  let a = []\n  for (let i = 1; i <= 9; i++) {\n    a.push(n % i + 1)\n    n = n / i\n  }\n  a.push(n + 1)\n  let i = a.length - 1\n  while (i > 1) {\n    if (is_prime(a[i - 2])) return a[i - 2]\n    i -= 1\n  }\n  return 1\n}\n\n/*Return the sum of the digits of the given number.\n  >>> sum_digits(15)\n  6\n  >>> sum_digits(10)\n  6\n  >>> sum_digits(8)\n  8\n  >>> sum_digits(3)\n  3\n  >>> sum_digits(1)\n  1\n  >>> sum_digits(100000000)\n  100000000\n  */\nconst sum_digits = (n) => {\n  let sum = 0\n  for (let i = 1; i <= 9; i++) {\n    sum += n % i\n    n = n / i\n  }\n  return sum\n}\n\n/*Return the difference between the digits of the given numbers.\n  >>> difference(11, 13)\n  2\n  >>> difference(11, 10)\n  2\n  >>> difference(9, 8)\n  2\n  >>> difference(3, 1)\n  3\n  >>> difference(2, 1)\n  0\n  >>> difference(1, 1)\n  0\n  >>> difference(1, 2)\n  1\n  >>> difference(1, 3)\n  2\n  >>> difference(1, 4)\n  3\n  >>> difference(1, 5)\n  4\n  >>> difference(1, 6)\n  5\n  >>> difference(1, 7)\n  6\n  >>> difference(1, 8)\n  7\n  >>> difference(1, 9)\n  8\n  >>> difference(1, 100000000)\n  100000000\n  */\nconst difference = (a, b) => {\n  let diff = 0\n  while (a > 0 && b > 0) {\n    diff += a % b\n    a = a / b\n    b = b % 10\n  }\n  return diff\n}\n\n/*Return the absolute value of the given number.\n  >>> absolute(9)\n  9\n  >>> absolute(8)\n  8\n  >>> absolute(-2)\n  2\n  >>> absolute(1)\n  1\n  >>> absolute(0)\n  0\n  >>> absolute(-1)\n  1\n  >>> absolute(2)\n  2\n  >>> absolute(100000000)\n  100000000\n  */\nconst absolute = (n) => Math.abs(n)\n\n/*Return the sum of the digits of the given number times the number of digits.\n  >>> sum_digits_times_digits(12)\n  12\n  >>> sum_digits_times_digits(13)\n  13\n  >>> sum_digits_times_digits(15)\n  15\n  >>> sum_digits_times_digits(1)\n  1\n  >>> sum_digits_times_digits(100000000)\n  100000000\n  */\nconst sum_digits_times_digits = (n) => {\n  let sum = 0\n  for (let i = 1; i <= 9; i++) {\n    sum += n % i\n    n = n / i\n  }\n  return sum\n}\n\n/*Return the number of digits in the given number.\n  >>> number_of_digits(1)\n  1\n  >>> number_of_digits(100000000)\n  8\n  >>> number_of_digits(10)\n  2\n  >>> number_of_digits(100)\n  3\n  >>> number_of_digits(1000)\n  4\n  >>> number_of_digits(1000000)\n  5\n  >>> number_of_digits(1000000000)\n  9\n  >>> number_of_digits(10000000000)\n  10\n  >>> number_of_digits(100000000000)\n  11\n  >>> number_of_digits(1000000000000)\n  12\n  >>> number_of_digits(10000000000000)\n  13\n  >>> number_of_digits(100000000000000)\n  14\n  >>> number_of_digits(1000000000000000)\n  15\n  >>> number_of_digits(10000000000000000)\n  16\n  >>> number_of_digits(1000000000000000000)\n  17\n  >>> number_of_digits(10000000000000000000)\n  18\n  >>> number_of_digits(100000000000000000000)\n  19\n  >>> number_of_digits(1000000000000000000000)\n  20\n  >>> number_of_digits(10000000000000000000000)\n  21\n  >>> number_of_digits(100000000000000000000000)\n  22\n  >>> number_of"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  const lastCoef = xs[len - 1];\n  if (lastCoef === 0) {\n    return xs[0] / lastCoef;\n  }\n  if (lastCoef === -1) {\n    return -xs[0] / lastCoef;\n  }\n\n  let i = len - 2;\n  while (xs[i] === 0) {\n    i--;\n  }\n\n  const x0 = xs[i] / lastCoef;\n  const x1 = xs[i + 1] / lastCoef;\n  const x = -x1 + Math.sqrt(x0 * x1);\n  return x;\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findRoot find a root of a polynomial.\n  findRoot returns only one root even if there are many.\n  >>> round(findRoot([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  -1.0\n  >>> round(findRoot([-2, 0, 2]), 2) # f(x) = -2 + x + x^2\n  1.5\n  >>> round(findRoot([-5, -3, 1, 2]), 2) # f(x) = -5 + 3x - 1x^2 + 2x^3\n  2.0\n  */\nconst findRoot = (xs) => {\n  const len = xs.length;\n  const lastCoef = xs[len - 1];\n  if (lastCoef === 0) {\n    return xs[0] / lastCoef;\n  }\n  if (lastCoef === -1) {\n    return -xs[0] / lastCoef;\n  }\n\n  let i = len - 2;\n  while (xs[i] === 0) {\n    i--;\n  }\n\n  const x0 = xs[i] / lastCoef;\n  const x1 = xs[i + 1] / lastCoef;\n  const x = -x1 + Math.sqrt(x0 * x1);\n  return x;\n}\n\n/*\n  >>> round(findRoot([1, -1, 1]), 2) # f(x) = 1 - 1x + x^2\n  -1.0\n  >>> round(findRoot([1, 0, 1]), 2) # f(x) = 1 + x + x^2\n  0.0\n  >>> round(findRoot([1, 1, 1]), 2) # f(x) = 1 + 1x + x^2\n  1.0\n  >>> round(findRoot([1, -1, -1]), 2) # f(x) = 1 - 1x - x^2\n  -1.0\n  >>> round(findRoot([1, 0, -1]), 2) # f(x) = 1 - 1x - x^2\n  0.0\n  >>> round(findRoot([1, 1, -1]), 2) # f(x) = 1 + 1x - x^2\n  1.0\n  >>> round(findRoot([1, -1, 0]), 2) # f(x) = 1 - 1x + x^2\n  0.0\n  >>> round(findRoot([1, 0, 0]), 2) # f(x) = 1 + x + x^2\n  0.0\n  >>> round(findRoot([1, 1, 0]), 2) # f(x) = 1 + 1x + x^2\n  1.0\n  >>> round(findRoot([1, -1, -0]), 2) # f(x) = 1 - 1x - x^2\n  -1.0\n  >>> round(findRoot([1, 0, -0]), 2) # f(x) = 1 - 1x - x^2\n  0.0\n  >>> round(findRoot([1, 1, -0]), 2) # f(x) = 1 + 1x - x^2\n  1.0\n  >>> round(findRoot([1, -1, 0, 1]), 2) # f(x) = 1 - 1x + x^2\n  -1.0\n  >>> round(findRoot([1, 0, 0, 1]), 2) # f(x) = 1 - 1x + x^2\n  0.0\n  >>> round(findRoot([1, 1, 0, 1]), 2) # f(x) = 1 + 1x + x^2\n  1.0\n  >>> round(findRoot([1, -1, -0, -1]), 2) # f(x) = 1 - 1x - x^2\n  -1.0\n  >>> round(findRoot([1, 0, -0, -1]), 2) # f(x) = 1 - 1x - x^2\n  0.0\n  >>> round(findRoot([1, 1, -0, -1]), 2) # f(x) = 1 + 1x - x^2\n  1.0\n  >>> round(findRoot([1, -1, 0, -1]), 2) # f(x) = 1 + 1x - x^2\n  1.0\n  >>> round(findRoot([1, 0, 0, -1]), 2) # f(x) = 1 + x + x^2\n  0"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n    const sorted = l.slice().sort((a, b) => {\n        const ai = a % 3;\n        const bi = b % 3;\n        if (ai === bi) {\n            return a - b;\n        } else if (ai < bi) {\n            return -1;\n        } else {\n            return 1;\n        }\n    });\n    const new_list = [...sorted];\n    return new_list;\n}\n\nconst sort_third_test = {\n    l: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10],\n    expected: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n};\n\nmodule.exports = {\n    sort_third: sort_third,\n    sort_third_test: sort_third_test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const seen = []\n  return l.filter((v) => seen.indexOf(v) === -1)\n}\n\n/* Return all elements of a list except the first\n  >>> [1, 2, 3, 4].rest()\n  [3, 4]\n  >>> [1, 2, 3, 4].rest(2)\n  [3, 4]\n  */\nconst rest = (l, n) => {\n  if (n === 0) {\n    return []\n  }\n  return l.slice(n)\n}\n\n/* Return a copy of a list with a new element added\n  >>> [1, 2, 3].concat(4)\n  [1, 2, 3, 4]\n  >>> [1, 2, 3].concat([4])\n  [1, 2, 3, 4]\n  */\nconst concat = (l, el) => [...l, el]\n\n/* Return a copy of a list with a new element removed\n  >>> [1, 2, 3].without(2)\n  [1, 3]\n  >>> [1, 2, 3].without(4)\n  [1, 2, 3]\n  */\nconst without = (l, el) => l.filter((v) => v!== el)\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([])\n  [1, 2, 3]\n  >>> [1, 2, 3].into([4, 5, 6])\n  [4, 5, 6]\n  */\nconst into = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6])\n  [1, 2, 3]\n  >>> [1, 2, 3].into([4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst intoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6]\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst intoListIntoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst intoListIntoListIntoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst intoListIntoListIntoListIntoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  */\nconst intoListIntoListIntoListIntoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst intoListIntoListIntoListIntoListIntoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  */\nconst intoListIntoListIntoListIntoListIntoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  */\nconst intoListIntoListIntoListIntoListIntoList = (l, el) => [...l, el]\n\n/* Return a list that contains the elements of a list\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> [1, 2, 3].into([4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [1, 2, 3, 4, 5,"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  const arr = l.slice(0);\n  let max = -Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n    }\n  }\n  return max;\n};\n\n/**\n  * @name minimum\n  * @param {Array} l\n  * @return {Number}\n  * @example\n  >>> minimum([1, 2, 3])\n  1\n  >>> minimum([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minimum = (l) => {\n  const arr = l.slice(0);\n  let min = Infinity;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < min) {\n      min = arr[i];\n    }\n  }\n  return min;\n};\n\nexport {\n  max_element,\n  minimum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  let s = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 11 === 0) || (i % 13 === 0)) {\n      s++;\n    }\n  }\n  return s;\n};\n\n/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11, 13 or 17.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  >>> fizz_buzz(80)\n  4\n  */\nconst fizz_buzz_17 = (n) => {\n  let s = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 11 === 0) || (i % 13 === 0) || (i % 17 === 0)) {\n      s++;\n    }\n  }\n  return s;\n};\n\n/* Return the number of times the digit 7 appears in integers less than n which are divisible by 11, 13, 17 or 19.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  >>> fizz_buzz(80)\n  4\n  >>> fizz_buzz(120)\n  6\n  >>> fizz_buzz(123)\n  7\n  >>> fizz_buzz(124)\n  8\n  */\nconst fizz_buzz_19 = (n) => {\n  let s = 0;\n  for (let i = 1; i <= n; i++) {\n    if ((i % 11 === 0) || (i % 13 === 0) || (i % 17 === 0) || (i % 19 === 0)) {\n      s++;\n    }\n  }\n  return s;\n};\n\n/* Return the number of times the digit 7 appears in integers less than n which are divisible by 11, 13, 17, 19, 23, or 29.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  >>> fizz_buzz(80)\n  4\n  >>> fizz_buzz(120)\n  6\n  >>> fizz_buzz(123)\n  7\n  >>> fizz_buzz(124)\n  8\n  >>> fizz_buzz(300)\n  22\n  >>> fizz_buzz(301)\n  23\n  >>> fizz_buzz(310)\n  30\n  >>> fizz_buzz(319)\n  31\n  >>> fizz_buzz(320)\n  32\n  >>> fizz_buzz(321)\n  33\n  >>> fizz_buzz(330)\n  36\n  >>> fizz_buzz(331)\n  37\n  >>> fizz_buzz(400)\n  42\n  >>> fizz_buzz(401)\n  43\n  >>> fizz_buzz(420)\n  48\n  >>> fizz_buzz(421)\n  49\n  >>> fizz_buzz(430)\n  50\n  >>> fizz_buzz(431)\n  51\n  >>> fizz_buzz(440)\n  54\n  >>> fizz_buzz(441)\n  55\n  >>> fizz_buzz(500)\n  60\n  >>> fizz_buzz(501)\n  61\n  >>> fizz_buzz(520)\n  64\n  >>> fizz_buzz(521)\n  65\n  >>> fizz_buzz(530)\n  70\n  >>> fizz_buzz(531)\n  71\n  >>> fizz_buzz(540)\n  76\n  >>> fizz_buzz(541)\n  77\n  >>> fizz_buzz(600)\n  90\n  >>> fizz_buzz(601)\n  91\n  >>> fizz_buzz(620)\n  96\n  >>> fizz_buzz(621)\n  97\n  >>> fizz_buzz(630)\n  100\n  >>> fizz_buzz(631)\n  101\n  >>> fizz_buzz(640)\n  106\n  >>> fizz_buzz(641)\n  107\n  >>> fizz_buzz(650)\n  112\n  >>> fizz_buzz(651)\n  113\n  >>> fizz_buzz(660)\n  118\n  >>> fizz_buzz(661)\n  119\n  >>> fizz_buzz(700)\n  124\n  >>> fizz_buzz(701)\n  125\n  >>> fizz_buzz(720)\n  130\n  >>> fizz_buzz(721)\n  131\n  >>> fizz_buzz(730)\n  136\n  >>> fizz_buzz(731)\n  137\n  >>> fizz_buzz(740)\n  142\n  >>> fizz_buzz(741)\n  143\n  >>> fizz_buzz(750)\n  148\n  >>> fizz_buzz(751)\n  149\n  >>> fizz_buzz(760)\n  154\n  >>> fizz_buzz(761)\n  155\n  >>> fizz_buzz(770)\n  162\n  >>> fizz_buzz(771)\n  163\n  >>> fizz_buzz(780)\n  168\n  >>> fizz_buzz(781)\n  169\n  >>> fizz_buzz(800)\n  174\n  >>> fizz_buzz(801)\n  175\n  >>> fizz_buzz(810)\n  180\n  >>> fizz_buzz(811)\n  181\n  >>> fizz_buzz(820)\n  186\n  >>> fizz_buzz(821)\n  187\n  >>> fizz_buzz(830)\n  192\n  >>> fizz_buzz(831)\n  193\n  >>> fizz_buzz(840)\n  198\n  >>> fizz_"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n    const even_indices = Array.from(Array(2 * l.length + 1).keys());\n    const sorted_even = even_indices.map((x, i) => {\n        return l[x];\n    });\n    sorted_even.sort((a, b) => a - b);\n    return sorted_even;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0] + group[1] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0] + group[1] + group[1] + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0] + group[1] + group[1] + group[0] + group[1] + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0] + group[1] + group[1] + group[0] + group[1] + group[0] + group[1] + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[1] + group[0] + group[1] + group[1] + group[0] + group[1] + group[0] + group[1] + group[0] + group[1] + group"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n === 1) return 2\n  else if (n === 2) return 3\n  else {\n    const x = prime_fib(n - 1)\n    const y = prime_fib(n - 2)\n    return x + y\n  }\n}\n\n/*\n  prime_fib_prime returns n-th number that is a Fibonacci number and it's prime.\n  >>> prime_fib_prime(1)\n  2\n  >>> prime_fib_prime(2)\n  3\n  >>> prime_fib_prime(3)\n  5\n  >>> prime_fib_prime(4)\n  13\n  >>> prime_fib_prime(5)\n  89\n  */\nconst prime_fib_prime = (n) => {\n  if (n === 1) return 2\n  else if (n === 2) return 3\n  else {\n    const x = prime_fib_prime(n - 1)\n    const y = prime_fib_prime(n - 2)\n    return x + y\n  }\n}\n\n/*\n  prime_fib_prime_prime returns n-th number that is a Fibonacci number and it's prime.\n  >>> prime_fib_prime_prime(1)\n  2\n  >>> prime_fib_prime_prime(2)\n  3\n  >>> prime_fib_prime_prime(3)\n  5\n  >>> prime_fib_prime_prime(4)\n  13\n  >>> prime_fib_prime_prime(5)\n  89\n  */\nconst prime_fib_prime_prime = (n) => {\n  if (n === 1) return 2\n  else if (n === 2) return 3\n  else {\n    const x = prime_fib_prime_prime(n - 1)\n    const y = prime_fib_prime_prime(n - 2)\n    return x + y\n  }\n}\n\n/*\n  prime_fib_prime_prime_prime returns n-th number that is a Fibonacci number and it's prime.\n  >>> prime_fib_prime_prime_prime(1)\n  2\n  >>> prime_fib_prime_prime_prime(2)\n  3\n  >>> prime_fib_prime_prime_prime(3)\n  5\n  >>> prime_fib_prime_prime_prime(4)\n  13\n  >>> prime_fib_prime_prime_prime(5)\n  89\n  */\nconst prime_fib_prime_prime_prime = (n) => {\n  if (n === 1) return 2\n  else if (n === 2) return 3\n  else {\n    const x = prime_fib_prime_prime_prime(n - 1)\n    const y = prime_fib_prime_prime_prime(n - 2)\n    return x + y\n  }\n}\n\nexport { prime_fib, prime_fib_prime, prime_fib_prime_prime, prime_fib_prime_prime_prime }\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let set = new Set();\n  for (let i = 0; i < l.length - 2; i++) {\n    for (let j = i + 1; j < l.length - 1; j++) {\n      for (let k = j + 1; k < l.length; k++) {\n        if (l[i] + l[j] + l[k] === 0) {\n          set.add(l[i] + l[j] + l[k]);\n        }\n      }\n    }\n  }\n  return set.size === 3;\n};\n\nconst triples_sum_to_zero_recursive = (l) => {\n  if (l.length === 3) {\n    return true;\n  }\n  if (l.length === 2) {\n    return false;\n  }\n  let left = triples_sum_to_zero_recursive(l.slice(0, l.length - 1));\n  let right = triples_sum_to_zero_recursive(l.slice(1));\n  return left || right;\n};\n\nexport default triples_sum_to_zero_recursive([1, 2, 3, 7, 9, -2, 4, 5, -3]);\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  // first compute the speed of each car\n  const speeds = n * [0, 1];\n  // for each car, compute its distance to the other car\n  const distances = n * [0, 2];\n  // compute the number of collisions\n  const collisions = n * n;\n  // compute the number of collisions with collisions == 0\n  const collisionsWithZero = n * n - collisions;\n  // compute the total number of collisions\n  const totalCollisions = collisions + collisionsWithZero;\n\n  return totalCollisions;\n};\n\nconsole.log(car_race_collision(2));\n\nconst collisions = car_race_collision(10);\nconsole.log(collisions);\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  let i = 0,\n      l = l.slice(0);\n  while (i < l.length - 1) {\n    l[i] += 1;\n    i++;\n  }\n  l[i] += 1;\n  return l;\n};\n\n/**\n * Increment every element of a list by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst incr_list_by_1 = (l) => {\n  return l.map((x) => x + 1);\n};\n\n/**\n * Decrement every element of a list by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst decr_list = (l) => {\n  return l.map((x) => x - 1);\n};\n\n/**\n * Decrement every element of a list by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst decr_list_by_1 = (l) => {\n  return l.map((x) => x - 1);\n};\n\n/**\n * Multiply every element of a list by a factor.\n *\n * @param {Array}\n * @param {Number}\n * @return {Array}\n */\nconst mult_list = (l, factor) => {\n  return l.map((x) => x * factor);\n};\n\n/**\n * Multiply every element of a list by a factor.\n *\n * @param {Array}\n * @param {Number}\n * @return {Array}\n */\nconst mult_list_by_1 = (l, factor) => {\n  return l.map((x) => x * factor);\n};\n\n/**\n * Divide every element of a list by a factor.\n *\n * @param {Array}\n * @param {Number}\n * @return {Array}\n */\nconst div_list = (l, factor) => {\n  return l.map((x) => x / factor);\n};\n\n/**\n * Divide every element of a list by a factor.\n *\n * @param {Array}\n * @param {Number}\n * @return {Array}\n */\nconst div_list_by_1 = (l, factor) => {\n  return l.map((x) => x / factor);\n};\n\n/**\n * Sum every element of a list.\n *\n * @param {Array}\n * @return {Number}\n */\nconst sum_list = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n};\n\n/**\n * Sum every element of a list.\n *\n * @param {Array}\n * @return {Number}\n */\nconst sum_list_by_1 = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n};\n\n/**\n * Returns list with elements incremented by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst incr_list_by_1 = (l) => {\n  return l.map((x) => x + 1);\n};\n\n/**\n * Returns list with elements incremented by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst decr_list_by_1 = (l) => {\n  return l.map((x) => x - 1);\n};\n\n/**\n * Returns list with elements incremented by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst mult_list_by_1 = (l, factor) => {\n  return l.map((x) => x * factor);\n};\n\n/**\n * Returns list with elements incremented by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst div_list_by_1 = (l, factor) => {\n  return l.map((x) => x / factor);\n};\n\n/**\n * Returns list with elements incremented by 1.\n *\n * @param {Array}\n * @return {Array}\n */\nconst sum_list_by_1 = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n};\n\nmodule.exports = {\n  incr_list,\n  incr_list_by_1,\n  decr_list,\n  decr_list_by_1,\n  mult_list,\n  mult_list_by_1,\n  div_list,\n  div_list_by_1,\n  sum_list,\n  sum_list_by_1\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  if (l.length === 0) return false;\n  const list = l.filter((x) => x > 0);\n  const diff = list.filter((x) => x % 2!== 0);\n  return diff.length!== 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const r = x.toString(base);\n  const l = x.toString(10);\n  if (base <= 10) return r;\n  return r.replace(l, `${l.charAt(0) * base}${l.slice(1)}`);\n};\n\n/*\n  Given a number in base 10, change it to a number in base 3.\n  >>> number_to_base(8)\n  '2'\n  >>> number_to_base(12)\n  '10'\n  >>> number_to_base(8, 2)\n  '0'\n  >>> number_to_base(12, 2)\n  '11'\n  >>> number_to_base(12, 3)\n  '10'\n  */\nconst number_to_base = (x, base) => {\n  if (base === 2) return x.toString(2);\n  return x.toString(10).toUpperCase().split('').reverse().join('');\n};\n\n/*\n  Given a number in base 3, change it to a number in base 10.\n  >>> number_to_base(0)\n  '0'\n  >>> number_to_base(11)\n  '1'\n  >>> number_to_base(2)\n  '0'\n  >>> number_to_base(10, 2)\n  '2'\n  >>> number_to_base(10, 3)\n  '3'\n  */\nconst number_to_10 = (x, base) => {\n  if (base === 2) return x.toString(2);\n  return x.toString(3).toUpperCase().split('').reverse().join('');\n};\n\n/*\n  Given a number in base 10, return the number in base 3.\n  >>> number_to_base(0)\n  '0'\n  >>> number_to_base(11)\n  '1'\n  >>> number_to_base(2)\n  '0'\n  >>> number_to_base(10, 2)\n  '2'\n  >>> number_to_base(10, 3)\n  '3'\n  */\nconst number_to_3 = (x, base) => {\n  if (base === 2) return x.toString(2);\n  return x.toString(3).toUpperCase().split('').reverse().join('');\n};\n\n/*\n  Given a number, return the number in base 3.\n  >>> number_to_base(0)\n  '0'\n  >>> number_to_base(11)\n  '1'\n  >>> number_to_base(2)\n  '0'\n  >>> number_to_base(10, 2)\n  '2'\n  >>> number_to_base(10, 3)\n  '3'\n  */\nconst number_to_base3 = (x) => {\n  const digits = x.toString(3).split('').reverse().join('');\n  const digits2 = x.toString(10).split('').reverse().join('');\n  return digits + digits2;\n};\n\n/*\n  Given a number, return the number in base 10.\n  >>> number_to_base(0)\n  '0'\n  >>> number_to_base(11)\n  '1'\n  >>> number_to_base(2)\n  '0'\n  >>> number_to_base(10, 2)\n  '2'\n  >>> number_to_base(10, 3)\n  '3'\n  */\nconst number_to_10base = (x, base) => {\n  if (base === 2) return x.toString(2);\n  return x.toString(10).toUpperCase().split('').reverse().join('');\n};\n\n/*\n  Given a number, return the number in base 2.\n  >>> number_to_base(0)\n  '0'\n  >>> number_to_base(11)\n  '1'\n  >>> number_to_base(2)\n  '0'\n  >>> number_to_base(10, 2)\n  '2'\n  >>> number_to_base(10, 3)\n  '3'\n  */\nconst number_to_base2 = (x, base) => {\n  if (base === 2) return x.toString(2);\n  return x.toString(2).toUpperCase().split('').reverse().join('');\n};\n\n/*\n  Given a number, return the number in base 8.\n  >>> number_to_base(0)\n  '0'\n  >>> number_to_base(11)\n  '7'\n  >>> number_to_base(2)\n  '0'\n  >>> number_to_base(10, 2)\n  '2'\n  >>> number_to_base(10, 3)\n  '3'\n  */\nconst number_to_base8 = (x, base) => {\n  if (base === 2) return x.toString(2);\n  return x.toString(8).toUpperCase().split('').reverse().join('');\n};\n\n/*\n  Given a number, return the number in base 16.\n  >>> number_to_base(0)\n  '0'\n  >>> number_to_base(11)\n  '7'\n  >>> number_to_base(2)\n  '0'\n  >>> number_to_base(10, 2)\n  '2'\n  >>> number_to_base(10, 3)\n  '3'\n  */\nconst number_to_base16 = (x, base) => {\n  if (base === 2) return x.toString(2);\n  return x.toString(16).toUpperCase().split('').reverse().join('');\n};\n\nexport {\n  change_base,\n  number_to_base,\n  number_to_base3,\n  number_to_base10,\n  number_to_base2,\n  number_to_base8,\n  number_"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return a * h / 2;\n};\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(3, 4)\n  9\n  >>> triangle_area(3, 5)\n  12\n  */\nconst triangle_area2 = (a, h) => {\n  return (a * h) / 2;\n};\n\nconst testTriangleArea = (a, h) => {\n  console.log(triangle_area(a, h));\n};\n\ntestTriangleArea(5, 3);\ntestTriangleArea(3, 4);\ntestTriangleArea(3, 5);\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0;\n  }\n  else if (n === 1) {\n    return 0;\n  }\n  else if (n === 2) {\n    return 2;\n  }\n  else if (n === 3) {\n    return 0;\n  }\n  else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n    const sorted = l.sort();\n    const half = Math.floor(sorted.length / 2);\n    if (sorted.length % 2) {\n        return sorted[half];\n    } else {\n        return (sorted[half - 1] + sorted[half]) / 2;\n    }\n};\n\nconst findMedian = (l) => {\n    const sorted = l.sort();\n    return (sorted.length % 2)? sorted[Math.floor(sorted.length / 2)] : (sorted[Math.floor(sorted.length / 2) - 1] + sorted[Math.floor(sorted.length / 2)]) / 2;\n};\n\n// console.log(findMedian([1, 2, 3, 4, 5]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]));\n// console.log(findMedian([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    return text.split('').map((letter, index) => {\n        return letter === text.charAt(index === text.length - 1? 0 : index + 1);\n    }).reduce((acc, current) => {\n        return acc && current === acc;\n    }, true);\n}\n\n/**\n  Calculates the number of digits in a number\n  >>> number_of_digits(12)\n  2\n  >>> number_of_digits(0)\n  1\n  >>> number_of_digits(1)\n  1\n  >>> number_of_digits(2)\n  1\n  >>> number_of_digits(123456789)\n  9\n  */\nconst number_of_digits = (num) => {\n    let count = 1;\n    while (num) {\n        num = num / 10;\n        count++;\n    }\n    return count;\n}\n\n/**\n  Calculates the number of leading zeroes in a number\n  >>> number_of_leading_zeroes(123456789)\n  4\n  >>> number_of_leading_zeroes(1234567890)\n  0\n  >>> number_of_leading_zeroes(1235)\n  0\n  >>> number_of_leading_zeroes(0)\n  0\n  >>> number_of_leading_zeroes(1)\n  1\n  >>> number_of_leading_zeroes(9)\n  1\n  */\nconst number_of_leading_zeroes = (num) => {\n    let count = 0;\n    while (num) {\n        num = num / 10;\n        count++;\n    }\n    return count;\n}\n\n/**\n  Converts a string to integer\n  >>> to_integer('12')\n  12\n  >>> to_integer('abc')\n  0\n  >>> to_integer('2a')\n  0\n  >>> to_integer('-1')\n  -1\n  >>> to_integer('-1a')\n  0\n  >>> to_integer('-1a1')\n  -1\n  */\nconst to_integer = (text) => {\n    if (text === '-') return 0;\n    return parseInt(text);\n}\n\n/**\n  Converts a string to float\n  >>> to_float('12')\n  12\n  >>> to_float('abc')\n  0\n  >>> to_float('2a')\n  0\n  >>> to_float('-1')\n  -1\n  >>> to_float('-1a')\n  0\n  >>> to_float('-1a1')\n  -1\n  >>> to_float('1e1')\n  1\n  >>> to_float('1e-1')\n  1e-1\n  >>> to_float('1e+1')\n  1e+1\n  */\nconst to_float = (text) => {\n    let float = parseFloat(text);\n    return isNaN(float)? 0 : float;\n}\n\n/**\n  Converts a number to integer\n  >>> to_integer(12)\n  12\n  >>> to_integer(0)\n  0\n  >>> to_integer(1)\n  1\n  >>> to_integer(-1)\n  -1\n  >>> to_integer(2.0)\n  2\n  >>> to_integer(-2.0)\n  -2\n  >>> to_integer(2.5)\n  2\n  >>> to_integer(-2.5)\n  -2\n  >>> to_integer(1.9)\n  1\n  >>> to_integer(-1.9)\n  -1\n  >>> to_integer(9e9)\n  9007199254740992\n  >>> to_integer(9e-9)\n  9007199254740992\n  >>> to_integer(9e+9)\n  9007199254740992\n  >>> to_integer(9e+9)\n  9007199254740992\n  >>> to_integer(9e+999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  9007199254740992\n  >>> to_integer(9e-999)\n  9007199254740992\n  >>> to_integer(9e999)\n  90071992547"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p\n}\n\n// ---------------------------------------------------------------------------\n// Prime-generation functions\n// ---------------------------------------------------------------------------\n\nconst genprimes = (p) => {\n  if (!p) return null\n  const primes = []\n  const sqrtp = Math.sqrt(p)\n  for (let i = 2; i <= sqrtp; i++) {\n    if (modp(i, p) === 0) continue\n    primes.push(i)\n  }\n  return primes\n}\n\n// ---------------------------------------------------------------------------\n// Generate a random prime number\n// ---------------------------------------------------------------------------\nconst genprime = (p) => {\n  let t = 1\n  while (t % p === 0) t += 1\n  return t\n}\n\n// ---------------------------------------------------------------------------\n// Generate a random number in [a, b]\n// ---------------------------------------------------------------------------\nconst genrand = (a, b) => {\n  if (a === b) return a\n  return (a + Math.random() * (b - a))\n}\n\n// ---------------------------------------------------------------------------\n// Check if a number is prime\n// ---------------------------------------------------------------------------\nconst isprime = (n) => {\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  const sqrtn = Math.sqrt(n)\n  for (let i = 3; i <= sqrtn; i += 2) {\n    if (modp(i, n) === 0) return false\n  }\n  return true\n}\n\n// ---------------------------------------------------------------------------\n// Check if a number is prime in [a, b]\n// ---------------------------------------------------------------------------\nconst isprimein = (n, a, b) => {\n  if (n < a) return false\n  if (n > b) return false\n  if (n < 2) return false\n  if (n === 2) return true\n  if (n === 3) return true\n  if (n % 2 === 0) return false\n  const sqrtn = Math.sqrt(n)\n  for (let i = 3; i <= sqrtn; i += 2) {\n    if (modp(i, n) === 0) return false\n  }\n  return true\n}\n\n// ---------------------------------------------------------------------------\n// Generate a number with exactly a certain number of digits\n// ---------------------------------------------------------------------------\nconst genn = (n, d) => {\n  const p = genprime(n)\n  const a = genprime(2, p)\n  const b = genprime(2, p)\n  const c = genprime(2, p)\n  const f = genprime(2, p)\n  const r = a * b % p\n  const s = a * c % p\n  const t = b * c % p\n  const u = f * f % p\n  const v = f * s % p\n  const w = f * t % p\n  const x = a * t % p\n  const y = b * u % p\n  const z = c * v % p\n  const d1 = (n - 1) * a % p\n  const d2 = (n - 1) * b % p\n  const d3 = (n - 1) * c % p\n  const d4 = (n - 1) * f % p\n  const d5 = (n - 1) * r % p\n  const d6 = (n - 1) * s % p\n  const d7 = (n - 1) * t % p\n  const d8 = (n - 1) * u % p\n  const d9 = (n - 1) * v % p\n  const d10 = (n - 1) * w % p\n  const d11 = (n - 1) * x % p\n  const d12 = (n - 1) * y % p\n  const d13 = (n - 1) * z % p\n  const d14 = (n - 1) * d1 % p\n  const d15 = (n - 1) * d2 % p\n  const d16 = (n - 1) * d3 % p\n  const d17 = (n - 1) * d4 % p\n  const d18 = (n - 1) * d5 % p\n  const d19 = (n - 1) * d6 % p\n  const d20 = (n - 1) * d7 % p\n  const d21 = (n - 1) * d8 % p\n  const d22 = (n - 1) * d9 % p\n  const d23 = (n - 1) * d10 % p\n  const d24 = (n - 1) * d11 % p\n  const d25 = (n - 1) * d12 % p\n  const d26 = (n - 1) * d13 % p\n  const d27 = (n - 1) * d14 % p\n  const d28 = (n - 1) * d15 % p\n  const d29 = (n - 1) * d16 % p\n  const d30 = (n - 1) * d17 % p\n  const d31 = (n - 1) * d18 % p\n  const d32 = (n - 1) * d19 % p\n  const d33 = (n - 1) * d20 % p\n  const d34 = (n - 1) * d21 % p\n  const d35 = (n - 1) * d22 % p\n  const d36 = (n - 1) * d23 % p\n  const d37 = (n - 1) * d24 % p\n  const d38 = (n - 1) * d25 % p\n  const d39 = (n - 1) * d26 % p\n  const d40 = (n - 1) * d27 % p\n  const d41 = (n - 1) * d28 % p\n  const d42 = (n - 1) * d29 % p\n  const d43 = (n - 1) * d30 % p\n  const d44 = (n - 1) * d31 % p\n  const d45 = (n - 1) * d32 % p\n  const d46 = (n - 1) * d33 % p\n  const d47 = (n - 1) * d34 % p\n  "}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const code = encode_shift(s);\n  return code.split(\"\").map((str) => String.fromCharCode(\n    parseInt(str)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decode_shift_2 = (s) => {\n  const code = encode_shift(s);\n  return code.split(\"\").map((str) => String.fromCharCode(\n    parseInt(str)\n  )).join(\"\");\n}\n\n/*\n  returns an array of string representing a string\n  */\nconst stringify = (s) => {\n  return s.split(\"\");\n}\n\n/*\n  returns the sum of a number of strings\n  */\nconst sum = (s) => {\n  return s.reduce((acc, val) => acc + parseInt(val), 0);\n}\n\n/*\n  returns the max of a number of strings\n  */\nconst max = (s) => {\n  return Math.max.apply(null, s.map(Number));\n}\n\n/*\n  returns the min of a number of strings\n  */\nconst min = (s) => {\n  return Math.min.apply(null, s.map(Number));\n}\n\n/*\n  returns the number of strings in an array\n  */\nconst length = (s) => {\n  return s.length;\n}\n\n/*\n  returns a string that has the given length\n  */\nconst fill_string = (s, length) => {\n  return String.fromCharCode(65 + Math.floor(Math.random() * 26));\n}\n\n/*\n  returns a random string\n  */\nconst random_string = () => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const string = \"\";\n  for (let i = 0; i < 32; i++) {\n    string += chars[Math.floor(Math.random() * 62)];\n  }\n  return string;\n}\n\n/*\n  returns a random string of the given length\n  */\nconst random_string_length = (length) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  const string = \"\";\n  for (let i = 0; i < length; i++) {\n    string += chars[Math.floor(Math.random() * 62)];\n  }\n  return string;\n}\n\n/*\n  returns a random string of the given length\n  */\nconst random_string_length_with_spaces = (length) => {\n  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz01234567890123456789';\n  const string = \"\";\n  for (let i = 0; i < length; i++) {\n    string += chars[Math.floor(Math.random() * 62)];\n  }\n  return string;\n}\n\n/*\n  returns a string that has the given length with spaces\n  */\nconst fill_string_with_spaces = (s, length) => {\n  return String.fromCharCode(65 + Math.floor(Math.random() * 26));\n}\n\n/*\n  returns a random string with the given length\n  */\nconst fill_string_with_spaces_length = (length) => {\n  return String.fromCharCode(65 + Math.floor(Math.random() * 26));\n}\n\n/*\n  returns a string with all characters in lower case\n  */\nconst to_lowercase = (s) => {\n  return s.toLowerCase();\n}\n\n/*\n  returns a string with all characters in upper case\n  */\nconst to_uppercase = (s) => {\n  return s.toUpperCase();\n}\n\n/*\n  returns a string with all characters in the alphabet\n  */\nconst to_alpha = (s) => {\n  return s.split(\"\").map((ch) => ch.toUpperCase()).join(\"\");\n}\n\n/*\n  returns a string with all characters in the alphabet\n  */\nconst to_alpha_numeric = (s) => {\n  return s.split(\"\").map((ch) => ch.toUpperCase()).join(\"\");\n}\n\n/*\n  returns a string that has the same number of spaces as the given string\n  */\nconst spacing = (s) => {\n  const len = s.length;\n  const string = \"\";\n  for (let i = 0; i < len; i++) {\n    string += \" \";\n  }\n  return string;\n}\n\n/*\n  returns a string that has the same number of spaces as the given string\n  */\nconst spacing_length = (s, length) => {\n  const len = s.length;\n  const string = \"\";\n  for (let i = 0; i < length; i++) {\n    string += \" \";\n  }\n  return string;\n}\n\n/*\n  returns a string that has the same number of spaces as the given string\n  */\nconst spacing_length_with_spaces = (s, length) => {\n  const len = s.length;\n  const string = \"\";\n  for (let i = 0; i < length; i++) {\n    string += \" \";\n  }\n  return string;\n}\n\n/*\n  returns a string with the given number of spaces\n  */\nconst space_length = (n) => {\n  const string = \"\";\n  for (let i = 0; i < n; i++) {\n    string += \" \";\n  }\n  return string;\n}\n\n/*\n"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  text = text.replace(/[aeiouAEIOU]/g, '');\n  return text;\n};\n\nconst word = (text) => {\n  return text.replace(/[^a-z0-9\\s]+/ig, '').replace(/[\\s]+/g, '');\n};\n\nconst is_number = (text) => {\n  return /^[0-9]*[0-9]*[0-9]*$/.test(text);\n};\n\nconst is_date = (text) => {\n  return /^[0-9]{4}-[0-9]{2}-[0-9]{2}$/.test(text);\n};\n\nconst is_email = (text) => {\n  return /^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(\\.[a-zA-Z0-9-]+)*$/.test(text);\n};\n\nconst is_url = (text) => {\n  return /(http|https|ftp|mailto)/.test(text);\n};\n\nconst is_ip = (text) => {\n  return /^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$/.test(text);\n};\n\nconst is_phone_number = (text) => {\n  return /^[1-9][0-9]{3,6}$/.test(text);\n};\n\nconst is_alpha = (text) => {\n  return /^[a-zA-Z]+$/.test(text);\n};\n\nconst is_alpha_numeric = (text) => {\n  return /^[a-zA-Z0-9]+$/.test(text);\n};\n\nconst is_alphanumeric = (text) => {\n  return /^[a-zA-Z0-9]+$/.test(text);\n};\n\nconst is_password = (text) => {\n  return /^[a-zA-Z0-9_-]+$/.test(text);\n};\n\nconst is_hex = (text) => {\n  return /^[0-9a-f]+$/.test(text);\n};\n\nconst is_id = (text) => {\n  return /^[a-zA-Z0-9-]+$/.test(text);\n};\n\nconst is_alpha_dash = (text) => {\n  return /^[a-zA-Z0-9_-]+$/.test(text);\n};\n\nconst is_alphanumeric_dash = (text) => {\n  return /^[a-zA-Z0-9_-]+$/.test(text);\n};\n\nconst is_alphanumeric_dash_underscore = (text) => {\n  return /^[a-zA-Z0-9_-]+$/.test(text);\n};\n\nconst is_numeric = (text) => {\n  return /^[0-9]+$/.test(text);\n};\n\nconst is_float = (text) => {\n  return /^[0-9]+(\\.[0-9]+)+$/.test(text);\n};\n\nconst is_integer = (text) => {\n  return /^[0-9]+$/.test(text);\n};\n\nconst is_hex_color = (text) => {\n  return /(^#[0-9a-f]{6}$)|(^#[0-9a-f]{3}$)/i.test(text);\n};\n\nconst is_color = (text) => {\n  return /(^#[0-9a-f]{6}$)|(^#[0-9a-f]{3}$)/i.test(text);\n};\n\nconst is_file = (text) => {\n  return /^[a-zA-Z0-9._()+-]+$/.test(text);\n};\n\nconst is_zipcode = (text) => {\n  return /^[0-9]{5}$/.test(text);\n};\n\nconst is_date_with_time = (text) => {\n  return /^[0-9]{4}-[0-9]{2}-[0-9]{2}[T][0-9]{2}:[0-9]{2}:[0-9]{2}$/.test(text);\n};\n\nconst is_date_with_time_no_millis = (text) => {\n  return /^[0-9]{4}-[0-9]{2}-[0-9]{2}[T][0-9]{2}:[0-9]{2}$/.test(text);\n};\n\nconst is_date_with_time_no_millis_no_secs = (text) => {\n  return /^[0-9]{4}-[0-9]{2}-[0-9]{2}[T][0-9]{2}$/.test(text);\n};\n\nconst is_date_with_time_no_millis_no_secs_time_zone = (text) => {\n  return /^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}$/.test(text);\n};\n\nconst is_date_with_time_no_millis_no_secs_time_zone_no_offset = (text) => {\n  return /^[0-9]{4}-[0-9]{"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n    const result = l.every(i => i <= t);\n    return result;\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold([1, 20, 4, 10], 5)\n  true\n  */\nconst above_threshold = (l, t) => {\n    const result = l.every(i => i >= t);\n    return result;\n}\n\n/*Return a list of the numbers that are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  [1, 2, 4]\n  */\nconst below_threshold_nums = (l, t) => {\n    const result = l.filter(i => i <= t);\n    return result;\n}\n\n/*Return a list of the numbers that are above threshold t.\n  >>> above_threshold([1, 2, 4, 10], 100)\n  [10]\n  >>> above_threshold([1, 20, 4, 10], 5)\n  [1, 4, 10]\n  */\nconst above_threshold_nums = (l, t) => {\n    const result = l.filter(i => i >= t);\n    return result;\n}\n\n/*Return true if number n is below threshold t.\n  >>> below_threshold_nums([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold_nums([1, 2, 4, 10], 5)\n  false\n  >>> below_threshold_nums([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold_num = (n, t) => {\n    const result = n <= t;\n    return result;\n}\n\n/*Return true if number n is above threshold t.\n  >>> above_threshold_nums([1, 2, 4, 10], 100)\n  false\n  >>> above_threshold_nums([1, 20, 4, 10], 5)\n  true\n  >>> above_threshold_nums([1, 2, 4, 10], 5)\n  false\n  */\nconst above_threshold_num = (n, t) => {\n    const result = n >= t;\n    return result;\n}\n\n/*Return true if the numbers in the list l are in increasing order.\n  >>> increasing([1, 2, 4, 10])\n  true\n  >>> increasing([1, 2, 4, 10, 20])\n  false\n  >>> increasing([1, 2, 4, 10, 20, 30])\n  true\n  */\nconst increasing = (l) => {\n    const result = l.every(i => i <= l[l.length - 1]);\n    return result;\n}\n\n/*Return true if the numbers in the list l are in decreasing order.\n  >>> decreasing([1, 2, 4, 10])\n  false\n  >>> decreasing([1, 2, 4, 10, 20])\n  true\n  >>> decreasing([1, 2, 4, 10, 20, 30])\n  false\n  */\nconst decreasing = (l) => {\n    const result = l.every(i => i >= l[l.length - 1]);\n    return result;\n}\n\n/*Return true if the numbers in the list l are in increasing order.\n  >>> increasing([1, 2, 4, 10, 20])\n  true\n  >>> increasing([1, 2, 4, 10, 20, 30])\n  true\n  >>> increasing([1, 2, 4, 10, 20, 30, 40])\n  false\n  */\nconst increasing_num = (l) => {\n    const result = increasing(l);\n    return result;\n}\n\n/*Return true if the numbers in the list l are in decreasing order.\n  >>> decreasing([1, 2, 4, 10, 20])\n  false\n  >>> decreasing([1, 2, 4, 10, 20, 30])\n  false\n  >>> decreasing([1, 2, 4, 10, 20, 30, 40])\n  true\n  */\nconst decreasing_num = (l) => {\n    const result = decreasing(l);\n    return result;\n}\n\n/*Return true if the numbers in the list l are in increasing order.\n  >>> increasing_num([1, 2, 4, 10, 20])\n  true\n  >>> increasing_num([1, 2, 4, 10, 20, 30])\n  true\n  >>> increasing_num([1, 2, 4, 10, 20, 30, 40])\n  false\n  */\nconst increasing_num_2 = (l) => {\n    const result = increasing(l);\n    return result;\n}\n\n/*Return true if the numbers in the list l are in decreasing order.\n  >>> decreasing_num([1, 2, 4, 10, 20])\n  false\n  >>> decreasing_num([1, 2, 4, 10, 20, 30])\n  false\n  >>> decreasing_num([1, 2, 4, 10, 20, 30, 40])\n  true\n  */\nconst decreasing_num_2 = (l) => {\n    const result = decreasing(l);\n    return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nconst add2 = (x, y) => {\n  return x + y;\n};\n\nconst add3 = (x, y) => {\n  return x + y;\n};\n\nconst add4 = (x, y) => {\n  return x + y;\n};\n\nconst add5 = (x, y) => {\n  return x + y;\n};\n\nconst add6 = (x, y) => {\n  return x + y;\n};\n\nconst add7 = (x, y) => {\n  return x + y;\n};\n\nconst add8 = (x, y) => {\n  return x + y;\n};\n\nconst add9 = (x, y) => {\n  return x + y;\n};\n\nconst add10 = (x, y) => {\n  return x + y;\n};\n\nconst add11 = (x, y) => {\n  return x + y;\n};\n\nconst add12 = (x, y) => {\n  return x + y;\n};\n\nconst add13 = (x, y) => {\n  return x + y;\n};\n\nconst add14 = (x, y) => {\n  return x + y;\n};\n\nconst add15 = (x, y) => {\n  return x + y;\n};\n\nconst add16 = (x, y) => {\n  return x + y;\n};\n\nconst add17 = (x, y) => {\n  return x + y;\n};\n\nconst add18 = (x, y) => {\n  return x + y;\n};\n\nconst add19 = (x, y) => {\n  return x + y;\n};\n\nconst add20 = (x, y) => {\n  return x + y;\n};\n\nconst add21 = (x, y) => {\n  return x + y;\n};\n\nconst add22 = (x, y) => {\n  return x + y;\n};\n\nconst add23 = (x, y) => {\n  return x + y;\n};\n\nconst add24 = (x, y) => {\n  return x + y;\n};\n\nconst add25 = (x, y) => {\n  return x + y;\n};\n\nconst add26 = (x, y) => {\n  return x + y;\n};\n\nconst add27 = (x, y) => {\n  return x + y;\n};\n\nconst add28 = (x, y) => {\n  return x + y;\n};\n\nconst add29 = (x, y) => {\n  return x + y;\n};\n\nconst add30 = (x, y) => {\n  return x + y;\n};\n\nconst add31 = (x, y) => {\n  return x + y;\n};\n\nconst add32 = (x, y) => {\n  return x + y;\n};\n\nconst add33 = (x, y) => {\n  return x + y;\n};\n\nconst add34 = (x, y) => {\n  return x + y;\n};\n\nconst add35 = (x, y) => {\n  return x + y;\n};\n\nconst add36 = (x, y) => {\n  return x + y;\n};\n\nconst add37 = (x, y) => {\n  return x + y;\n};\n\nconst add38 = (x, y) => {\n  return x + y;\n};\n\nconst add39 = (x, y) => {\n  return x + y;\n};\n\nconst add40 = (x, y) => {\n  return x + y;\n};\n\nconst add41 = (x, y) => {\n  return x + y;\n};\n\nconst add42 = (x, y) => {\n  return x + y;\n};\n\nconst add43 = (x, y) => {\n  return x + y;\n};\n\nconst add44 = (x, y) => {\n  return x + y;\n};\n\nconst add45 = (x, y) => {\n  return x + y;\n};\n\nconst add46 = (x, y) => {\n  return x + y;\n};\n\nconst add47 = (x, y) => {\n  return x + y;\n};\n\nconst add48 = (x, y) => {\n  return x + y;\n};\n\nconst add49 = (x, y) => {\n  return x + y;\n};\n\nconst add50 = (x, y) => {\n  return x + y;\n};\n\nconst add51 = (x, y) => {\n  return x + y;\n};\n\nconst add52 = (x, y) => {\n  return x + y;\n};\n\nconst add53 = (x, y) => {\n  return x + y;\n};\n\nconst add54 = (x, y) => {\n  return x + y;\n};\n\nconst add55 = (x, y) => {\n  return x + y;\n};\n\nconst add56 = (x, y) => {\n  return x + y;\n};\n\nconst add57 = (x, y) => {\n  return x + y;\n};\n\nconst add58 = (x, y) => {\n  return x + y;\n};\n\nconst add59 = (x, y) => {\n  return x + y;\n};\n\nconst add60 = (x, y) => {\n  return x + y;\n};\n\nconst add61 = (x, y) => {\n  return x + y;\n};\n\nconst add62 = (x, y) => {\n  return x + y;\n};\n\nconst add63 = (x, y) => {\n  return x + y;\n};\n\nconst add64 = (x, y) => {\n  return x + y;\n};\n\nconst add65 = (x, y) => {\n  return x + y;\n};\n\nconst add66 = (x, y) => {\n  return x + y;\n};\n\nconst add67 = (x, y) => {\n  return x + y;\n};\n\nconst add68 = (x, y) => {\n  return x + y;\n};\n\nconst add69 = (x"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n    let i = 0\n    while (i < s0.length) {\n        if (s0.charCodeAt(i)!= s1.charCodeAt(i)) {\n            return false\n        }\n        i++\n    }\n    return true\n}\n\nconst has_digits = (s) => {\n    return s.search(/\\d/g)!= -1\n}\n\nconst has_lowercase = (s) => {\n    return s.search(/[a-z]/g)!= -1\n}\n\nconst has_uppercase = (s) => {\n    return s.search(/[A-Z]/g)!= -1\n}\n\nconst has_upper_lower = (s) => {\n    return s.search(/[A-Z]/g)!= -1 && s.search(/[a-z]/g)!= -1\n}\n\nconst has_numbers = (s) => {\n    return s.search(/[0-9]/g)!= -1\n}\n\nconst has_space = (s) => {\n    return s.search(/\\s/g)!= -1\n}\n\nconst has_word = (s) => {\n    return s.search(/[a-z]+/g)!= -1\n}\n\nconst is_empty = (s) => {\n    return s.length === 0\n}\n\nconst has_n_digits = (s, n) => {\n    return has_digits(s) && s.length === n\n}\n\nconst has_n_lowercase = (s, n) => {\n    return has_lowercase(s) && s.length === n\n}\n\nconst has_n_uppercase = (s, n) => {\n    return has_uppercase(s) && s.length === n\n}\n\nconst has_n_upper_lower = (s, n) => {\n    return has_upper_lower(s) && s.length === n\n}\n\nconst has_n_numbers = (s, n) => {\n    return has_numbers(s) && s.length === n\n}\n\nconst has_n_space = (s, n) => {\n    return has_space(s) && s.length === n\n}\n\nconst has_n_word = (s, n) => {\n    return has_word(s) && s.length === n\n}\n\nconst has_n_letters = (s, n) => {\n    return has_letters(s) && s.length === n\n}\n\nconst has_n_letters_numbers = (s, n) => {\n    return has_letters(s) && has_numbers(s) && s.length === n\n}\n\nconst has_n_letters_numbers_space = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_space(s) && s.length === n\n}\n\nconst has_n_letters_numbers_word = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_word(s) && s.length === n\n}\n\nconst has_letters_numbers_space_word = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_space(s) && has_word(s) && s.length === n\n}\n\nconst has_n_digits_numbers_space_word = (s, n) => {\n    return has_digits(s) && has_numbers(s) && has_space(s) && has_word(s) && s.length === n\n}\n\nconst has_letters_numbers_space_word_numbers = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_space(s) && has_word(s) && has_numbers(s) && s.length === n\n}\n\nconst has_letters_numbers_space_word_numbers_space = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_space(s) && has_word(s) && has_numbers(s) && has_space(s) && s.length === n\n}\n\nconst has_letters_numbers_space_word_numbers_space_numbers = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_space(s) && has_word(s) && has_numbers(s) && has_space(s) && has_numbers(s) && s.length === n\n}\n\nconst has_letters_numbers_space_word_numbers_space_numbers_space = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_space(s) && has_word(s) && has_numbers(s) && has_space(s) && has_numbers(s) && has_space(s) && s.length === n\n}\n\nconst has_letters_numbers_space_word_numbers_space_numbers_space_numbers = (s, n) => {\n    return has_letters(s) && has_numbers(s) && has_space(s) && has_word(s) && has_numbers(s) && has_space(s) && has_numbers(s) && has_space(s) && has_numbers(s) && s.length === n\n}\n\nconst has_letters_numbers_space_word_numbers_space_numbers_space_n"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n-1) + fib(n-2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib2(n-1) + fib2(n-2);\n};\n\n/* Return n-th Fibonacci number.\n *\n * @param n\n * @return\n */\nconst fib3 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib3(n-1) + fib3(n-2);\n};\n\nconst fib4 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib4(n-1) + fib4(n-2);\n};\n\nconst fib5 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib5(n-1) + fib5(n-2);\n};\n\n/* Return n-th Fibonacci number.\n *\n * @param n\n * @return\n */\nconst fib6 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib6(n-1) + fib6(n-2);\n};\n\n/* Return n-th Fibonacci number.\n *\n * @param n\n * @return\n */\nconst fib7 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib7(n-1) + fib7(n-2);\n};\n\n/* Return n-th Fibonacci number.\n *\n * @param n\n * @return\n */\nconst fib8 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib8(n-1) + fib8(n-2);\n};\n\n/* Return n-th Fibonacci number.\n *\n * @param n\n * @return\n */\nconst fib9 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib9(n-1) + fib9(n-2);\n};\n\n/* Return n-th Fibonacci number.\n *\n * @param n\n * @return\n */\nconst fib10 = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib10(n-1) + fib10(n-2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const bracket_stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      bracket_stack.push('<');\n    } else if (brackets[i] === '>') {\n      if (bracket_stack.pop()!== '<') return false;\n    }\n  }\n  return true;\n};\n\nconst main = () => {\n  const lines = process.stdin.toString().split('\\n');\n  const brackets = lines.map(s => s.split('').reverse().join(''));\n  const brackets_without_inner_brackets = correct_bracketing(brackets);\n  if (brackets_without_inner_brackets) {\n    console.log('YES');\n  } else {\n    console.log('NO');\n  }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  let min = Math.min(...l);\n  let max = Math.max(...l);\n  return l.every(v => v > min && v < max);\n};\n\n/*\n  Finds the median of a list.\n  >>> median([1, 2, 4, 5, 6])\n  4\n  >>> median([1, 2, 4, 5, 6, 7])\n  4.5\n  >>> median([1, 2, 4, 5, 6, 7, 8])\n  5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9])\n  5.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10])\n  6.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11])\n  7.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  8.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  9.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  10.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  11.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  12.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  13.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  14.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  15.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  16.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  17.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  18.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  19.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  20.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  21.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  22.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  23.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  24.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  25.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  26.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  27.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  28.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  29.5\n  >>> median([1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  30.5\n  >>> median([1, 2,"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const minSize = Math.min(l1.length, l2.length)\n\n  let p1 = 0\n  let p2 = 0\n  let c = 0\n\n  while (p1 < minSize && p2 < minSize) {\n    if (l1[p1] === l2[p2]) {\n      c++\n      p1++\n      p2++\n    } else if (l1[p1] < l2[p2]) {\n      p1++\n    } else {\n      p2++\n    }\n  }\n\n  return l1.slice(p1, minSize)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      return largest_prime_factor(n / i);\n    }\n  }\n  return n;\n};\n\nconsole.log(largest_prime_factor(7));\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\nexport default sum_to_n;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n    let brackets_stack = brackets.split(\"(\").reverse();\n    let brackets_stack_index = 0;\n    while (brackets_stack_index < brackets_stack.length) {\n        if (brackets_stack[brackets_stack_index] === \")\") {\n            brackets_stack_index++;\n            if (brackets_stack_index >= brackets_stack.length) {\n                return false;\n            }\n        } else if (brackets_stack[brackets_stack_index] === \"(\" && brackets_stack[brackets_stack_index + 1] === \")\") {\n            brackets_stack_index += 2;\n        } else {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Given a string, return the index of the leftmost opening bracket.\n\n  >>> index_of_leftmost_opening_bracket(\"(()())\")\n  0\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  0\n  >>> index_of_leftmost_opening_bracket(\"\")\n  0\n  >>> index_of_leftmost_opening_bracket(\"(\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"(()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"(())\")\n  0\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"(())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"(()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"(()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"\")\n  0\n  >>> index_of_leftmost_opening_bracket(\"(()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"(()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_bracket(\"()()())\")\n  1\n  >>> index_of_leftmost_opening_br"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const a = new Array(len + 1)\n  const d = new Array(len)\n\n  a[0] = 1\n  a[1] = xs[0]\n  for (let i = 1; i < len; i++) {\n    a[i + 1] = a[i] * (i + 1)\n  }\n\n  for (let i = 0; i < len; i++) {\n    d[i] = a[i + 1]\n  }\n\n  return d\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is zero.\n  >>> zero(derivative([3, 1, 2, 4, 5]))\n  [2, 6]\n  >>> zero(derivative([1, 2, 3]))\n  []\n  */\nconst zero = (xs) => {\n  const len = xs.length\n  const a = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    a[i] = 0\n  }\n\n  return a\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is one.\n  >>> one(derivative([3, 1, 2, 4, 5]))\n  [1, 4, 12, 20]\n  >>> one(derivative([1, 2, 3]))\n  [2]\n  */\nconst one = (xs) => {\n  const len = xs.length\n  const a = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    a[i] = 1\n  }\n\n  return a\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is two.\n  >>> two(derivative([3, 1, 2, 4, 5]))\n  [1, 4, 12, 20]\n  >>> two(derivative([1, 2, 3]))\n  [2, 6]\n  */\nconst two = (xs) => {\n  const len = xs.length\n  const a = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    a[i] = 2\n  }\n\n  return a\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is three.\n  >>> three(derivative([3, 1, 2, 4, 5]))\n  [1, 4, 12, 20]\n  >>> three(derivative([1, 2, 3]))\n  [2, 6]\n  */\nconst three = (xs) => {\n  const len = xs.length\n  const a = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    a[i] = 3\n  }\n\n  return a\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is four.\n  >>> four(derivative([3, 1, 2, 4, 5]))\n  [1, 4, 12, 20]\n  >>> four(derivative([1, 2, 3]))\n  [2, 6]\n  */\nconst four = (xs) => {\n  const len = xs.length\n  const a = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    a[i] = 4\n  }\n\n  return a\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is five.\n  >>> five(derivative([3, 1, 2, 4, 5]))\n  [1, 4, 12, 20]\n  >>> five(derivative([1, 2, 3]))\n  [2, 6]\n  */\nconst five = (xs) => {\n  const len = xs.length\n  const a = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    a[i] = 5\n  }\n\n  return a\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is six.\n  >>> six(derivative([3, 1, 2, 4, 5]))\n  [1, 4, 12, 20]\n  >>> six(derivative([1, 2, 3]))\n  [2, 6]\n  */\nconst six = (xs) => {\n  const len = xs.length\n  const a = new Array(len)\n\n  for (let i = 0; i < len; i++) {\n    a[i] = 6\n  }\n\n  return a\n}\n\n/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return polynomial for which derivative is seven.\n  >>> seven(derivative([3, 1, 2, 4, 5]))\n  [1, 4, 12, 20]\n  >>> seven(derivative([1, 2, 3]))\n  [2, 6]\n  */\nconst seven = (xs) => {\n  const len = xs.length\n  const"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nfibfib(10)\n// => 24\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const result = []\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i]\n    if (vowels.indexOf(c)!== -1) {\n      result.push(c)\n    }\n    if (i === s.length - 1 && vowels.indexOf(c)!== -1) {\n      result.push(c)\n    }\n  }\n  return result.length\n}\n\n// const vowels_count = (s) => {\n//   const vowels = ['a', 'e', 'i', 'o', 'u']\n//   const result = []\n//   for (let i = 0; i < s.length; i++) {\n//     const c = s[i]\n//     if (vowels.indexOf(c)!== -1) {\n//       result.push(c)\n//     }\n//     if (i === s.length - 1 && vowels.indexOf(c)!== -1) {\n//       result.push(c)\n//     }\n//   }\n//   return result.length\n// }\n\nconst s = \"ACEDY\"\nconsole.log(vowels_count(s))\n\n/*\nWrite a function count_vowels which takes a string as input and returns the number of vowels\nin the string. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n\nExample:\n\n>>> count_vowels(\"abcde\")\n2\n>>> count_vowels(\"ACEDY\")\n3\n*/\nconst count_vowels = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const result = []\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i]\n    if (vowels.indexOf(c)!== -1) {\n      result.push(1)\n    }\n  }\n  return result\n}\n\nconsole.log(count_vowels(\"ACEDY\"))\n\n/*\nWrite a function remove_vowels which takes a string as input and returns a new string without\nany vowels in it. Vowels in this case are 'a', 'e', 'i', 'o', 'u'.\n\nExample:\n\n>>> remove_vowels(\"abcde\")\n\"bcd\"\n>>> remove_vowels(\"ACEDY\")\n\"ACD\"\n*/\nconst remove_vowels = (s) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u']\n  const result = []\n  for (let i = 0; i < s.length; i++) {\n    const c = s[i]\n    if (vowels.indexOf(c) === -1) {\n      result.push(c)\n    }\n  }\n  return result.join(\"\")\n}\n\nconsole.log(remove_vowels(\"abcde\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const digits = x.toString().split('');\n  if (shift < 0) {\n    const rev_digits = [];\n    for (let i = 0; i < digits.length + shift; i++) {\n      rev_digits.push(digits[digits.length - i - 1]);\n    }\n    return rev_digits.join('');\n  } else if (shift > digits.length) {\n    return digits.reverse().join('');\n  } else {\n    const shifted_digits = [];\n    for (let i = 0; i < shift; i++) {\n      shifted_digits.push(digits[i]);\n    }\n    for (let i = shift; i < digits.length; i++) {\n      shifted_digits.push(digits[digits.length - i - 1]);\n    }\n    return shifted_digits.join('');\n  }\n};\n\nconst test_circular_shift = (x, shift) => {\n  console.log(`x: ${x}`);\n  console.log(`shift: ${shift}`);\n  console.log(`result: ${circular_shift(x, shift)}`);\n};\n\ntest_circular_shift(12, 1);\ntest_circular_shift(12, 2);\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const arr = s.split('')\n  const result = arr.reduce((acc, c) => acc + c.charCodeAt(0) - 97, 0)\n  return result\n}\n\nconst test_cases = [\n  [\"\", 0],\n  [\"abAB\", 131],\n  [\"abcCd\", 67],\n  [\"helloE\", 69],\n  [\"woArBld\", 131],\n  [\"aAaaaXa\", 153]\n]\n\nfor (const [s, expected] of test_cases) {\n  console.log(`${s} => ${expected}`)\n  console.log(`${digit_sum(s)} => ${expected}`)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  let fruits = s.split('')\n  let number_of_apples = parseInt(fruits[0])\n  let number_of_oranges = parseInt(fruits[1])\n  let number_of_mango = parseInt(fruits[2])\n\n  return n - number_of_apples - number_of_oranges - number_of_mango\n}\n\nfruit_distribution(\"5 apples and 6 oranges\", 19)\n\nfruit_distribution(\"0 apples and 1 oranges\",3)\n\nfruit_distribution(\"2 apples and 3 oranges\", 100)\n\nfruit_distribution(\"100 apples and 1 oranges\",120)\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    const node = arr.find(node => node.value % 2 === 0);\n\n    if (!node) return [];\n\n    return [node.value, node.index];\n};\n\nmodule.exports = pluck;\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == -1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search_reverse = (lst) => {\n  const max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 1\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 2\n      search([5, 5, 4, 4, 4])) == 5\n  */\nconst search_min = (lst) => {\n  const min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are given a non-empty list of positive integers. Return the smallest integer that is greater than\n  zero, and has a frequency less than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 4\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 1\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search_min_reverse = (lst) => {\n  const min = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\n/*\n  You are given two non-empty lists of positive integers. Return the greatest common divisor of the two lists.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      gcd([4, 1, 2, 2, 3, 1], [1, 2, 2, 3, 3, 3, 4, 4, 4])) == 2\n      gcd([1, 2, 2, 3, 3, 3, 4, 4, 4], [5, 5, 4, 4, 4]) == 5\n  */\nconst gcd = (a, b) => {\n  const x = search(a)\n  const y = search(b)\n  if (x === -1) {\n    return y\n  }\n  if (y === -1) {\n    return x\n  }\n  return a[x]\n}\n\n/*\n  You are given two non-empty lists of positive integers. Return the smallest common divisor of the two lists.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      gcd([4, 1, 2, 2, 3, 1], [1, 2, 2, 3, 3, 3, 4, 4, 4])) == 4\n      gcd([1, 2, 2, 3, 3, 3, 4, 4, 4], [5, 5, 4, 4, 4]) == 5\n  */\nconst gcd_reverse = (a, b) => {\n  const x = search_min_reverse(a)\n  const y = search_min_reverse(b)\n  if (x === -1) {\n    return y\n  }\n  if (y === -1) {\n    return x\n  }\n  return a[x]\n}\n\n/*\n  You are given two non-empty lists of positive integers. Return the sum of the numbers that appear at least once in both lists.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      sum([4, 1, 2, 2, 3, 1], [1, 2, 2, 3, 3, 3, 4, 4, 4])) == 6\n      sum([1, 2, 2, 3, 3, 3, 4, 4, 4], [5, 5, 4, 4, 4]) == 9\n  */\nconst sum = (a, b) => {\n  const result = {}\n  for (let i = 0; i < a.length; i++) {\n    if (a[i] in result) {\n      result[a[i]] += 1\n    }\n    else {\n      result[a[i]] = 1\n"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  const odd = (x, y) => x % 2!== 0 && y % 2!== 0;\n  const even = (x, y) => x % 2 === 0 && y % 2 === 0;\n  const odd_even = (x, y) => odd(x, y) || even(x, y);\n  const sorted_lst = lst.sort((a, b) => {\n    if (odd_even(a, b)) {\n      return a - b;\n    } else {\n      return b - a;\n    }\n  });\n  return sorted_lst;\n};\n\n/*\n  Given list of strings, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining strings, then minimum and so on.\n\n  Examples:\n  strange_sort_list_str(\"abc\", \"def\") == \"def, abc\"\n  strange_sort_list_str(\"def\", \"abc\") == \"def, abc\"\n  strange_sort_list_str(\"def\", \"def\") == \"def, def\"\n  strange_sort_list_str(\"\", \"\") == \"\"\n  */\nconst strange_sort_list_str = (lst_str, lst_str2) => {\n  const lst = weird_sort_list(lst_str, lst_str2);\n  return lst.join(\", \");\n};\n\nconst random_sort_list = (lst) => {\n  const random_array = random_array_generator();\n  return random_array.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    } else if (a > b) {\n      return 1;\n    } else {\n      return 0;\n    }\n  });\n};\n\nconst random_sort_list_str = (lst_str, lst_str2) => {\n  const lst = weird_sort_list(lst_str, lst_str2);\n  return lst.join(\", \");\n};\n\nconst shuffle_array = (lst) => {\n  const random_array = random_array_generator();\n  const shuffled_array = random_array.slice();\n  const random_index = random_array_generator();\n  const temp_array = [];\n  const temp_index = [];\n  let i = 0;\n  let j = 0;\n  for (i = 0; i < lst.length; i++) {\n    temp_array[i] = shuffled_array[j];\n    temp_index[i] = j;\n    j++;\n    if (j === shuffled_array.length) {\n      j = 0;\n    }\n  }\n  for (i = 0; i < lst.length; i++) {\n    shuffled_array[j] = lst[i];\n    j++;\n    if (j === shuffled_array.length) {\n      j = 0;\n    }\n  }\n  return shuffled_array;\n};\n\nconst shuffle_list_str = (lst_str, lst_str2) => {\n  const lst = weird_sort_list(lst_str, lst_str2);\n  const shuffled_array = shuffle_array(lst);\n  return shuffled_array.join(\", \");\n};\n\nmodule.exports = {\n  strange_sort_list: strange_sort_list,\n  strange_sort_list_str: strange_sort_list_str,\n  random_sort_list: random_sort_list,\n  random_sort_list_str: random_sort_list_str,\n  shuffle_array: shuffle_array,\n  shuffle_list_str: shuffle_list_str\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  // This is the definition of the area of a triangle\n  // The area of a triangle is the sum of the area of any two sides\n  // If any side is less than the sum of the other two sides, then the triangle is not a valid triangle\n  const s1 = a + b\n  const s2 = b + c\n  const s3 = c + a\n  if (s1 < s2 || s1 < s3) return -1\n  const s = s1 + s2 + s3\n  const a_half = a / 2\n  const b_half = b / 2\n  const c_half = c / 2\n  return Math.round((s * (s - a_half) * (s - b_half) * (s - c_half)) / 6)\n}\n\nconst triangle_area2 = (a, b, c) => {\n  // This is the definition of the area of a triangle\n  // The area of a triangle is the sum of the area of any two sides\n  // If any side is less than the sum of the other two sides, then the triangle is not a valid triangle\n  const s1 = a + b\n  const s2 = b + c\n  const s3 = c + a\n  if (s1 < s2 || s1 < s3) return -1\n  const s = s1 + s2 + s3\n  const a_half = a / 2\n  const b_half = b / 2\n  const c_half = c / 2\n  return ((s * (s - a_half) * (s - b_half) * (s - c_half)) / 6)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  if (typeof q === 'number') {\n    return q === q;\n  }\n  if (q.length!== 2) {\n    return false;\n  }\n  return q[0] === q[1] && q[0] <= w && q[1] <= w;\n};\n\nmodule.exports = will_it_fly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  if (!Array.isArray(arr)) {\n    throw new TypeError('arr must be an array');\n  }\n\n  if (arr.length === 1) {\n    return 0;\n  }\n\n  const half = arr.length / 2;\n  const odd = arr.length % 2;\n  const left = arr.slice(0, half);\n  const right = arr.slice(half);\n\n  let smallest = -1;\n  for (let i = 0; i < half; i++) {\n    let min = Infinity;\n\n    if (left[i] === right[half - i - 1]) {\n      min = Math.min(min, i);\n    }\n    if (left[half - i - 1] === right[i]) {\n      min = Math.min(min, half - i - 1);\n    }\n\n    if (min!== Infinity && min!== -1) {\n      smallest = Math.min(smallest, min);\n    }\n  }\n\n  if (smallest === -1) {\n    return 0;\n  }\n\n  return smallest + 1;\n};\n\nmodule.exports = smallest_change;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const set1 = new Set(lst1);\n  const set2 = new Set(lst2);\n  const intersection = new Set(set1.intersection(set2));\n  const map1 = new Map(lst1.map(str => [str, 1]));\n  const map2 = new Map(lst2.map(str => [str, 1]));\n  const mapIntersection = new Map(intersection.map(str => [str, 1]));\n  const max = Math.max(...map1.keys(),...map2.keys(),...mapIntersection.keys());\n  const min = Math.min(...map1.keys(),...map2.keys(),...mapIntersection.keys());\n  if (max - min > 0) {\n    return [];\n  }\n  const lst = [];\n  lst.push(...map1.keys());\n  lst.push(...map2.keys());\n  lst.push(...mapIntersection.keys());\n  return lst;\n};\n\nconsole.log(total_match(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(total_match(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  const prime_list = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997, 1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069, 1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163, 1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249, 1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321, 1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439, 1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511, 1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601, 1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693, 1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783, 1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877, 1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987, 1993, 1997, 1999]\n  const res = [];\n  for (let i = prime_list.length - 1; i >= 0; i--) {\n    if (a % prime_list[i] === 0) {\n      res.push(prime_list[i]);\n      return res;\n    }\n  }\n  return false;\n}\n\nconsole.log(is_multiply_prime(30));<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  const power = Math.pow(x, n)\n  if (power === x) {\n    return true\n  }\n  return false\n}\n\nconsole.log(is_simple_power(3, 2))\nconsole.log(is_simple_power(8, 2))\nconsole.log(is_simple_power(1, 4))\nconsole.log(is_simple_power(2, 2))\nconsole.log(is_simple_power(3, 1))\nconsole.log(is_simple_power(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n    if (a === 0) {\n        return true;\n    }\n    return a % a === 0;\n};\n\nexport default iscube;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  const n = parseInt(num, 16)\n  const p = []\n  let i = 0\n  while (i < n) {\n    if (isPrime(n)) {\n      p.push(i)\n    }\n    i++\n  }\n  return p.length\n}\n\nconst isPrime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\nconsole.log(hex_key(\"A\"))\nconsole.log(hex_key(\"1077E\"))\nconsole.log(hex_key(\"ABED1A33\"))\nconsole.log(hex_key(\"123456789ABCDEF0\"))\nconsole.log(hex_key(\"2020\"))\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  const decimal_string = decimal.toString(2)\n  const decimal_length = decimal_string.length\n\n  const binary_string = \"\"\n  let index = 0\n  while (index < decimal_length) {\n    binary_string = decimal_string.charAt(index) + binary_string\n    index += 1\n  }\n\n  return `db${binary_string}db`\n}\n\nexport default decimal_to_binary\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  let len = s.length,\n      result = true;\n  for (let i = 0; i < len - 2; i++) {\n    if (s[i] === s[i + 1] && s[i + 2] === s[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nconsole.log(is_happy(\"a\"));\nconsole.log(is_happy(\"aa\"));\nconsole.log(is_happy(\"abcd\"));\nconsole.log(is_happy(\"aabb\"));\nconsole.log(is_happy(\"adb\"));\nconsole.log(is_happy(\"xyy\"));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n    return grades.map(grade => {\n        const letterGrade = 'E';\n        if (grade > 3.7) {\n            letterGrade = 'A+';\n        } else if (grade > 3.3) {\n            letterGrade = 'A';\n        } else if (grade > 3.0) {\n            letterGrade = 'B+';\n        } else if (grade > 2.7) {\n            letterGrade = 'B';\n        } else if (grade > 2.3) {\n            letterGrade = 'C-';\n        } else if (grade > 2.0) {\n            letterGrade = 'C';\n        } else if (grade > 1.7) {\n            letterGrade = 'D+';\n        } else if (grade > 1.3) {\n            letterGrade = 'D';\n        } else if (grade > 1.0) {\n            letterGrade = 'D-';\n        } else if (grade > 0.7) {\n            letterGrade = 'E';\n        } else if (grade > 0.0) {\n            letterGrade = 'F';\n        }\n        return `${letterGrade}`;\n    }).join(', ');\n};\n\n// Your Solution\nconst letter_grade = (grades) => {\n    const letter_grade = {\n        A: [1, 2, 3, 4, 5],\n        B: [2, 3, 4, 5],\n        C: [3, 4, 5],\n        D: [4, 5],\n        E: [5]\n    };\n\n    return Object.keys(letter_grade).reduce((prev, curr) => {\n        const gpa = grades.reduce((p, c) => {\n            const d = Math.floor(c / 10);\n            if (c % 10 >= 5) {\n                p += d;\n            } else {\n                p += (d * 0.25);\n            }\n            return p;\n        }, prev);\n        return prev[curr] = gpa;\n    }, {}).map(curr => {\n        const letter = curr.toString().toLowerCase();\n        return letter;\n    });\n};\n\nconsole.log(numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]));\nconsole.log(letter_grade([4.0, 3, 1.7, 2, 3.5]));\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  let i = 0,\n    isPrime = true;\n\n  for (i = 2; i <= string.length - 1; i++) {\n    if (string.indexOf(i)!== -1) {\n      isPrime = false;\n      break;\n    }\n  }\n\n  return isPrime;\n};\n\nmodule.exports = prime_length;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    for (let j = 1; j < i; j++) {\n      if (i == 1 && j == 1) {\n        count++;\n      } else if (i == 1 || j == 1) {\n        count++;\n      } else if (i == 1 || j == n) {\n        count++;\n      } else if (i == n || j == n) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\nexport default starts_one_ends;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const result = []\n  let carry = 0\n  while (N > 0) {\n    result.unshift(N % 2)\n    N = Math.floor(N / 2)\n    carry = N % 2\n  }\n  result.unshift(carry)\n  return result.join(\"\")\n}\n\nconst solve2 = (N) => {\n  let result = []\n  let carry = 0\n  while (N > 0) {\n    result.unshift(N % 2)\n    N = Math.floor(N / 2)\n    carry = N % 2\n  }\n  result.unshift(carry)\n  return result.join(\"\")\n}\n\nconsole.log(solve(1))\nconsole.log(solve(1000))\nconsole.log(solve(150))\nconsole.log(solve(147))\nconsole.log(solve2(1))\nconsole.log(solve2(1000))\nconsole.log(solve2(150))\nconsole.log(solve2(147))\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add6 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add7 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add8 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add9 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add10 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add11 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add12 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add13 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) sum += lst[i];\n  }\n  return sum;\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add14 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  const words = s.split(/\\s+/);\n  const shuffled = words.map((w, i) => [w, i]).sort(([a, b], [c, d]) => a > b? 1 : a < c? -1 : 0)\n  const new_s = shuffled.join(' ');\n  return new_s;\n}\n\n// test cases\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti_shuffle('Hello World!!!'))\nconsole.log(anti"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  // return lst.map(e => e.slice(0, x))\n  return lst.map(e => e.slice(0, x))\n}\n\nconst get_row_sorted = (lst, x) => {\n  const list = get_row(lst, x)\n  list.sort((a, b) => a[0] - b[0])\n  list.sort((a, b) => b[1] - a[1])\n  return list\n}\n\nconst get_row_sorted_reverse = (lst, x) => {\n  const list = get_row(lst, x)\n  list.sort((a, b) => b[0] - a[0])\n  list.sort((a, b) => a[1] - b[1])\n  return list\n}\n\n// const get_row_sorted_reverse = (lst, x) => {\n//   const list = get_row(lst, x)\n//   list.sort((a, b) => b[0] - a[0])\n//   return list\n// }\n\n// const get_row_sorted_reverse = (lst, x) => {\n//   const list = get_row(lst, x)\n//   list.sort((a, b) => a[0] - b[0])\n//   return list\n// }\n\nconst get_row_sorted_reverse = (lst, x) => {\n  const list = get_row_sorted(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x) => {\n  const list = get_row_sorted_reverse_reverse(lst, x)\n  list.reverse()\n  return list\n}\n\nconst get_row_sorted_reverse_reverse_reverse_reverse_reverse_reverse = (lst, x)"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  if (array.length === 0) return []\n\n  let sorted_array = array.slice()\n  sorted_array.sort((a, b) => a - b)\n\n  let sorted_array_sum = sorted_array.reduce((acc, n) => acc + n, 0)\n\n  if (sorted_array_sum % 2 === 1) {\n    sorted_array.reverse()\n  }\n\n  return sorted_array\n}\n\nexport default sort_array\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let result = '';\n  let i = 0;\n  while(i < s.length){\n    let x = alphabet.indexOf(s[i]);\n    let y = alphabet.indexOf(s[i+1]);\n    let z = alphabet.indexOf(s[i+2]);\n    let z0 = alphabet.indexOf(s[i+3]);\n    let k = (x - y) / 2 + (y - z) / 2;\n    let k0 = (z - x) / 2 + (x - z0) / 2;\n    result += alphabet[k];\n    i += 4;\n  }\n  return result;\n};\n\n/*\n  Create a function decrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'asdfghjkl'\n  */\nconst decrypt = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let result = '';\n  let i = 0;\n  while(i < s.length){\n    let x = alphabet.indexOf(s[i]);\n    let y = alphabet.indexOf(s[i+1]);\n    let z = alphabet.indexOf(s[i+2]);\n    let z0 = alphabet.indexOf(s[i+3]);\n    let k = (x - y) / 2 + (y - z) / 2;\n    let k0 = (z - x) / 2 + (x - z0) / 2;\n    result += alphabet[k];\n    i += 4;\n  }\n  return result;\n};\n\n// Testing\nconst encryptTest = (s) => {\n  let x = encrypt(s);\n  return x;\n};\n\nconst decryptTest = (s) => {\n  let x = decrypt(s);\n  return x;\n};\n\n// The actual tests\nconsole.log(encryptTest('gf'));\nconsole.log(decryptTest('kj'));\nconsole.log(encryptTest('ix'));\nconsole.log(decryptTest('asdfghjkl'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_2 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  let i = 0\n  while(i < list.length) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_3 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_4 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_5 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_6 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_7 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_8 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_9 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_10 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_11 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_12 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i++\n  }\n  return null\n}\n\nconst next_smallest_test_13 = (lst) => {\n  const list = lst.slice()\n  if(list.length < 2) return null\n  const last_index = list.length - 1\n  let i = 0\n  while(i <= last_index) {\n    if(list[i] < list[i + 1]) return list[i + 1]\n    i"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let bored = 0\n  let length = S.length\n  for (let i = 0; i < length; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (S[i + 1] === 'I') {\n        bored += 1\n      }\n    }\n  }\n  return bored\n}\n\n/*\n  Input:\n  \n  The following example contains the number of boredom sentences in a \n  sentence:\n  \n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  \n  Output:\n  2\n  \n  The following example contains the number of boredom sentences in a \n  sentence:\n  \n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  \n  Output:\n  4\n  \n  The following example contains the number of boredom sentences in a \n  sentence:\n  \n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I am bored of this sentence.\n  I am bored of this sentence. I"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  return x >= y && x <= z && x % 1 === 0 && y % 1 === 0 && z % 1 === 0;\n};\n\n/**\n  Create a function that takes a number.\n  Returns true if that number is a power of 2.\n  Examples\n  is_power_of_two(2) ➞ true\n  is_power_of_two(3) ➞ true\n  is_power_of_two(7) ➞ true\n  is_power_of_two(11) ➞ false\n  */\nconst is_power_of_two = n => {\n  return n % 1 === 0 && (n - 1) % 1 === 0 && (n + 1) % 1 === 0;\n};\n\n/**\n  Create a function that takes a number.\n  Returns true if that number is a multiple of 2.\n  Examples\n  is_multiple_of_two(2) ➞ true\n  is_multiple_of_two(3) ➞ true\n  is_multiple_of_two(7) ➞ false\n  */\nconst is_multiple_of_two = n => {\n  return n % 2 === 0;\n};\n\n/**\n  Create a function that takes a number.\n  Returns true if that number is a prime.\n  Examples\n  is_prime(2) ➞ true\n  is_prime(3) ➞ true\n  is_prime(7) ➞ true\n  is_prime(17) ➞ true\n  is_prime(1) ➞ false\n  is_prime(0) ➞ false\n  is_prime(-1) ➞ false\n  is_prime(-2) ➞ false\n  is_prime(-3) ➞ false\n  */\nconst is_prime = n => {\n  if (n === 0 || n === 1) return false;\n  if (n % 2 === 0) return false;\n  for (let i = 3; i * i <= n; i += 2) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is smaller than the second.\n  Examples\n  smaller_than(1, 2) ➞ true\n  smaller_than(2, 1) ➞ false\n  smaller_than(2, 2) ➞ false\n  */\nconst smaller_than = (a, b) => {\n  return a < b;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is larger than the second.\n  Examples\n  larger_than(1, 2) ➞ true\n  larger_than(2, 1) ➞ false\n  larger_than(2, 2) ➞ false\n  */\nconst larger_than = (a, b) => {\n  return a > b;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is equal to the second.\n  Examples\n  equal_to(1, 1) ➞ true\n  equal_to(2, 2) ➞ true\n  equal_to(2, 1) ➞ false\n  */\nconst equal_to = (a, b) => {\n  return a === b;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is not equal to the second.\n  Examples\n  not_equal_to(1, 1) ➞ true\n  not_equal_to(2, 2) ➞ true\n  not_equal_to(2, 1) ➞ true\n  */\nconst not_equal_to = (a, b) => {\n  return a!== b;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is less than or equal to the second.\n  Examples\n  less_than_or_equal_to(1, 2) ➞ true\n  less_than_or_equal_to(2, 1) ➞ true\n  less_than_or_equal_to(1, 1) ➞ true\n  less_than_or_equal_to(2, 2) ➞ true\n  */\nconst less_than_or_equal_to = (a, b) => {\n  return a <= b;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is greater than or equal to the second.\n  Examples\n  greater_than_or_equal_to(1, 2) ➞ true\n  greater_than_or_equal_to(2, 1) ➞ true\n  greater_than_or_equal_to(1, 1) ➞ true\n  greater_than_or_equal_to(2, 2) ➞ true\n  */\nconst greater_than_or_equal_to = (a, b) => {\n  return a >= b;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is greater than the second.\n  Examples\n  greater_than(1, 2) ➞ true\n  greater_than(2, 1) ➞ false\n  greater_than(2, 2) ➞ false\n  */\nconst greater_than = (a, b) => {\n  return a > b;\n};\n\n/**\n  Create a function that takes two numbers.\n  Returns true if the first number is less than the second.\n  Examples\n  less_than(1, 2) ➞ true\n  less_than(2, 1) ➞ false\n  less_than(2, 2) ➞ false\n  */\nconst less_than = (a, b) => {\n  return a < b;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const message = message.toLowerCase();\n    const dictionary = {\n        'a':'á',\n        'e':'é',\n        'i':'í',\n        'o':'ó',\n        'u':'ú',\n        'A':'Á',\n        'E':'É',\n        'I':'Í',\n        'O':'Ó',\n        'U':'Ú',\n        '0':'0',\n        '1':'1',\n        '2':'2',\n        '3':'3',\n        '4':'4',\n        '5':'5',\n        '6':'6',\n        '7':'7',\n        '8':'8',\n        '9':'9'\n    };\n    const output = [];\n    for(let i = 0; i < message.length; i++) {\n        if(message[i] ==='') {\n            output.push(' ');\n        } else if(message[i] === '.') {\n            output.push('.');\n        } else if(message[i] === '!') {\n            output.push('!');\n        } else if(message[i] === '?') {\n            output.push('?');\n        } else if(message[i] === '\\'') {\n            output.push('\\'');\n        } else if(message[i] === ',') {\n            output.push(',');\n        } else if(message[i] === ';') {\n            output.push(';');\n        } else if(message[i] === '-') {\n            output.push('-');\n        } else if(message[i] === '(') {\n            output.push('(');\n        } else if(message[i] === ')') {\n            output.push(')');\n        } else if(message[i] === '\\n') {\n            output.push('\\n');\n        } else if(message[i] === '\\t') {\n            output.push('\\t');\n        } else if(message[i] === '_') {\n            output.push('_');\n        } else if(message[i] === '#') {\n            output.push('#');\n        } else if(message[i] === '@') {\n            output.push('@');\n        } else if(message[i] === '^') {\n            output.push('^');\n        } else if(message[i] === '%') {\n            output.push('%');\n        } else if(message[i] === '$') {\n            output.push('$');\n        } else if(message[i] === '&') {\n            output.push('&');\n        } else if(message[i] === '*') {\n            output.push('*');\n        } else if(message[i] === '+') {\n            output.push('+');\n        } else if(message[i] === '=') {\n            output.push('=');\n        } else if(message[i] === '{') {\n            output.push('{');\n        } else if(message[i] === '}') {\n            output.push('}');\n        } else if(message[i] === '[') {\n            output.push('[');\n        } else if(message[i] === ']') {\n            output.push(']');\n        } else if(message[i] === '|') {\n            output.push('|');\n        } else if(message[i] === '\\\\') {\n            output.push('\\\\');\n        } else if(message[i] === '<') {\n            output.push('<');\n        } else if(message[i] === '>') {\n            output.push('>');\n        } else if(message[i] === '~') {\n            output.push('~');\n        } else {\n            output.push(dictionary[message[i]]);\n        }\n    }\n    return output.join('');\n};\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('THIS IS A MESSAGE'));\nconsole.log(encode('This is a message'));<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let max = 0,\n    sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n    if (lst[i] > max) {\n      max = lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n    for (let key in dict) {\n        if (!isString(key)) {\n            return false;\n        }\n        if (key.toLowerCase()!== key && key.toUpperCase()!== key) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  upper case letter, else return false.\n  Examples:\n  is_upper_case(\"Hello\") should return true.\n  is_upper_case(\"HELLO\") should return false.\n  is_upper_case(\"abcdef\") should return false.\n  is_upper_case(\"Hello_World\") should return true.\n*/\nconst is_upper_case = (str) => {\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*\n  Given a string, return true if the string contains at least one\n  lower case letter, else return false.\n  Examples:\n  is_lower_case(\"Hello\") should return true.\n  is_lower_case(\"HELLO\") should return false.\n  is_lower_case(\"abcdef\") should return false.\n  is_lower_case(\"Hello_World\") should return true.\n*/\nconst is_lower_case = (str) => {\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toLowerCase() === str[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*\n  Given a string, return true if the string contains only upper\n  case letters, else return false.\n  Examples:\n  is_upper_case(\"Hello\") should return true.\n  is_upper_case(\"HELLO\") should return true.\n  is_upper_case(\"abcdef\") should return false.\n  is_upper_case(\"Hello_World\") should return true.\n*/\nconst is_upper_only = (str) => {\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toLowerCase() === str[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  Given a string, return true if the string contains only lower\n  case letters, else return false.\n  Examples:\n  is_lower_case(\"Hello\") should return true.\n  is_lower_case(\"HELLO\") should return true.\n  is_lower_case(\"abcdef\") should return true.\n  is_lower_case(\"Hello_World\") should return false.\n*/\nconst is_lower_only = (str) => {\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n\n/*\n  Given a string, return true if the string contains at least\n  one lower case letter and at least one upper case letter,\n  else return false.\n  Examples:\n  is_upper_and_lower_case(\"Hello\") should return true.\n  is_upper_and_lower_case(\"HELLO\") should return false.\n  is_upper_and_lower_case(\"abcdef\") should return false.\n  is_upper_and_lower_case(\"Hello_World\") should return true.\n*/\nconst is_upper_and_lower_case = (str) => {\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toLowerCase() === str[i]) {\n            return true;\n        }\n    }\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*\n  Given a string, return true if the string contains at least\n  one lower case letter, one upper case letter and no\n  lower case letters, else return false.\n  Examples:\n  is_lower_and_upper_only(\"Hello\") should return true.\n  is_lower_and_upper_only(\"HELLO\") should return false.\n  is_lower_and_upper_only(\"abcdef\") should return false.\n  is_lower_and_upper_only(\"Hello_World\") should return true.\n*/\nconst is_lower_and_upper_only = (str) => {\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toLowerCase() === str[i]) {\n            return false;\n        }\n    }\n    for (let i = 0; i < str.length; i++) {\n        if (str[i].toUpperCase() === str[i]) {\n            return true;\n        }\n    }\n    return false;\n}\n\n/*\n  Given a string, return true if the string contains at least\n  one upper case letter, one lower case letter and no\n  upper case letters, else return false.\n  Examples:\n  is_upper_and_lower_only(\"Hello\") should return false.\n  is_upper_and_lower_only(\"HELLO\") should return false.\n  is_upper_and_lower_only(\"abcdef\") should return true.\n  is_upper_and_lower_only(\"Hello_World\") should return false.\n*/\nconst is_upper_and_lower_only ="}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] >= i) {\n        break\n      }\n      if (is_prime(i)) {\n        primes.push(i)\n      }\n    }\n  }\n  return primes\n}\n\nconst is_prime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n === 3) {\n    return true\n  }\n  if (n < 3) {\n    return false\n  }\n  let i = n - 1\n  while (i % 2 === 0) {\n    i = i / 2\n  }\n  if (i === 1 || i === 3) {\n    return false\n  }\n  let p = 5\n  while (p * p <= n) {\n    if (n % p === 0) {\n      return false\n    }\n    p = p + 4\n  }\n  return true\n}\n\nconst count_up_to_prime = (n) => {\n  const primes = []\n  for (let i = 2; i < n; i++) {\n    for (let j = 0; j < primes.length; j++) {\n      if (primes[j] >= i) {\n        break\n      }\n      if (is_prime(i)) {\n        primes.push(i)\n      }\n    }\n  }\n  return primes\n}\n\nmodule.exports = count_up_to_prime\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let result = 0\n  let i = b\n  while (i > 0) {\n    result += (a % 10) * (i % 10)\n    i = Math.floor(i / 10)\n    a = Math.floor(a / 10)\n  }\n  return result\n}\n\n/*\n  Complete the function that takes an integer and returns \n  the value of the sum of the squares of its unit digits.\n  Assume the input is always valid.\n  Examples:\n  squaredSum(14) should return 28.\n  squaredSum(19) should return 579.\n  squaredSum(9) should return 81.\n  */\nconst squaredSum = (a) => {\n  let sum = 0\n  let i = 1\n  while (i <= a) {\n    sum += i * i\n    i += 1\n  }\n  return sum\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the difference of the sum of the squares of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(19, 48) should return 1.\n  difference(19, 2) should return 3.\n  difference(18, 9) should return 6.\n  */\nconst difference = (a, b) => {\n  return squaredSum(a) - squaredSum(b)\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the difference of the sum of the squares of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(19, 48) should return 1.\n  difference(19, 2) should return 3.\n  difference(18, 9) should return 6.\n  */\nconst difference2 = (a, b) => {\n  return squaredSum(a) - squaredSum(b) + a\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the sum of the squares of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sumOfSquares(148, 412) should return 674.\n  sumOfSquares(19, 28) should return 1071.\n  sumOfSquares(2020, 1851) should return 84464.\n  */\nconst sumOfSquares = (a, b) => {\n  let result = 0\n  let i = b\n  while (i > 0) {\n    result += i * i\n    i = Math.floor(i / 10)\n  }\n  return result\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the sum of the absolute difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sumOfAbsDiff(14, 48) should return 6.\n  sumOfAbsDiff(19, 2) should return 8.\n  sumOfAbsDiff(18, 9) should return 4.\n  */\nconst sumOfAbsDiff = (a, b) => {\n  return Math.abs(a - b) + squaredSum(a) - squaredSum(b)\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the sum of the absolute difference of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  sumOfAbsDiff(19, 48) should return 6.\n  sumOfAbsDiff(19, 2) should return 8.\n  sumOfAbsDiff(18, 9) should return 4.\n  */\nconst sumOfAbsDiff2 = (a, b) => {\n  return Math.abs(a - b) + squaredSum(a) - squaredSum(b) + a\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(19, 48) should return 1248.\n  multiply(18, 9) should return 27.\n  multiply(14, -15) should return 1.\n  */\nconst multiply2 = (a, b) => {\n  return multiply(a, b) + squaredSum(a) - squaredSum(b)\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(19, 48) should return 1248.\n  multiply(18, 9) should return 27.\n  multiply(14, -15) should return 1.\n  */\nconst multiply3 = (a, b) => {\n  return multiply(a, b) + squaredSum(a) - squaredSum(b) + a\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(19, 48) should return 1248.\n  multiply(18, 9) should return 27.\n  multiply(14, -15) should return 1.\n  */\nconst multiply4 = (a, b) => {\n  return multiply(a, b) + squaredSum(a) - squaredSum(b) + a\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(19, 48) should return 1248.\n  multiply(18, 9) should return 27.\n  multiply(14, -15) should return 1.\n  */\nconst multiply5 = (a, b) => {\n  return multiply(a, b) + squaredSum(a) - squaredSum(b) + a\n}\n\n/*\n  Complete the function that takes two integers and returns \n  the value of the difference of the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  difference(19, 48) should return -2.\n  difference(19, 2) should return"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toUpperCase())\n            count++;\n    }\n    return count;\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  count_lower('aBCdEf') returns 0\n  count_lower('abcdefg') returns 1\n  count_lower('dBBE') returns 1\n  */\nconst count_lower = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i++){\n        if(s[i] === s[i].toLowerCase())\n            count++;\n    }\n    return count;\n}\n\nconst test = () => {\n    const s = \"aBCdEf\";\n    console.log(count_upper(s));\n    console.log(count_lower(s));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  let num = parseInt(value, 10);\n  if (Math.abs(num) === 1) {\n    return Math.round(num);\n  }\n\n  let num_plus_one = num + 1;\n  let num_minus_one = num - 1;\n  if (num_plus_one === num_minus_one) {\n    return num;\n  }\n\n  if (Math.abs(num_plus_one) === Math.abs(num_minus_one)) {\n    return num_plus_one;\n  }\n\n  return num_minus_one;\n};\n\nexport default closest_integer;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  const piles = [];\n  for (let i = 0; i < n; i++) {\n    piles.push(i);\n  }\n  return piles;\n};\n\n/**\n  Find the maximum number of stones in a pile.\n\n  Examples:\n  >>> find_max_pile(3)\n  5\n  >>> find_max_pile(10)\n  10\n  >>> find_max_pile(19)\n  19\n  */\nconst find_max_pile = (n) => {\n  return make_a_pile(n).reduce((a, b) => a + b, 0);\n};\n\nmodule.exports = find_max_pile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  const split = s.split(/(\\s|,)/)\n  return split.filter(x => x!== \"\")\n}\n\n/*\n  Your task is to count how many words are in the string.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string_count = (s) => {\n  return words_string(s).length\n}\n\n/*\n  Given an array of words, return an array of the words in order without repetitions.\n  \n  For example:\n  words_sort(\"Hello, World, Hello, World\") == [\"Hello\", \"World\", \"Hello\", \"World\"]\n  words_sort(\"Hello, World, Hello, World\") == [\"Hello\", \"World\", \"Hello\", \"World\"]\n  */\nconst words_sort = (s) => {\n  const words = words_string(s)\n  const sorted = words.sort()\n  return sorted\n}\n\n/*\n  Given an array of words, return an array of the words in order without repetitions,\n  but each word must be a different word.\n  \n  For example:\n  words_unique(\"Hello, World, Hello, World\") == [\"Hello\", \"World\"]\n  words_unique(\"Hello, World, Hello, World\") == [\"Hello\", \"World\"]\n  words_unique(\"Hello, World, Hello, World\") == [\"Hello\", \"World\"]\n  */\nconst words_unique = (s) => {\n  const words = words_sort(s)\n  const unique = words.filter(x => words.indexOf(x) === words.lastIndexOf(x))\n  return unique\n}\n\n/*\n  Given an array of words, return an array of the words in order without repetitions,\n  but each word must be a different word, but with a maximum length of N.\n  \n  For example:\n  words_unique_n([\"Hello\", \"World\", \"Hello\", \"World\"], 2) == [\"Hello\", \"World\"]\n  words_unique_n([\"Hello\", \"World\", \"Hello\", \"World\"], 2) == [\"Hello\", \"World\"]\n  words_unique_n([\"Hello\", \"World\", \"Hello\", \"World\"], 3) == [\"Hello\", \"World\", \"Hello\"]\n  */\nconst words_unique_n = (s, N) => {\n  const words = words_unique(s)\n  const unique = words.filter(x => words.indexOf(x) === words.lastIndexOf(x))\n  return unique.slice(0, N)\n}\n\n/*\n  Given an array of words, return an array of the words in order without repetitions,\n  but each word must be a different word, but with a maximum length of N.\n  \n  For example:\n  words_unique_n([\"Hello\", \"World\", \"Hello\", \"World\"], 2) == [\"Hello\", \"World\"]\n  words_unique_n([\"Hello\", \"World\", \"Hello\", \"World\"], 3) == [\"Hello\", \"World\", \"Hello\"]\n  words_unique_n([\"Hello\", \"World\", \"Hello\", \"World\"], 4) == [\"Hello\", \"World\", \"Hello\", \"World\"]\n  */\nconst words_unique_n_1 = (s, N) => {\n  const words = words_unique(s)\n  const unique = words.filter(x => words.indexOf(x) === words.lastIndexOf(x))\n  return unique.slice(0, N)\n}\n\n/*\n  Given an array of words, return the first word that occurs in the array.\n  \n  For example:\n  words_first(\"Hello, World, Hello, World\") == \"Hello\"\n  words_first(\"Hello, World, Hello, World\") == \"Hello\"\n  words_first(\"Hello, World, Hello, World\") == \"Hello\"\n  words_first(\"Hello, World, Hello, World\") == \"Hello\"\n  */\nconst words_first = (s) => {\n  const words = words_sort(s)\n  return words[0]\n}\n\n/*\n  Given an array of words, return the last word that occurs in the array.\n  \n  For example:\n  words_last(\"Hello, World, Hello, World\") == \"World\"\n  words_last(\"Hello, World, Hello, World\") == \"World\"\n  words_last(\"Hello, World, Hello, World\") == \"World\"\n  words_last(\"Hello, World, Hello, World\") == \"World\"\n  */\nconst words_last = (s) => {\n  const words = words_sort(s)\n  return words[words.length - 1]\n}\n\n/*\n  Given an array of words, return a string with the words in order,\n  with each word separated by a space.\n  \n  For example:\n  words_space(\"Hello, World, Hello, World\") == \"Hello World Hello\"\n  words_space(\"Hello, World, Hello, World\") == \"Hello World Hello\"\n  words_space(\"Hello, World, Hello, World\") == \"Hello World Hello\"\n  words_space(\"Hello, World, Hello, World\") == \"Hello World Hello\"\n  */\nconst words_space = (s) => {\n  const words = words_sort(s)\n  return words.join(\" \")\n}\n\n/*\n  Given an array of words, return a string with the words in order,\n  with each word separated by a comma.\n  \n  For example:\n  words_comma(\"Hello, World, Hello, World\") == \"Hello, World, Hello\"\n  words_comma(\"Hello, World, Hello, World\") == \"Hello, World, Hello\"\n  words_comma(\"Hello, World, Hello, World\") == \"Hello, World, Hello\"\n  words_comma(\"Hello, World, Hello, World\") == \"Hello, World"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  const r = x % 2 == 0? x : x + 1;\n  return y < r? -1 : r;\n};\n\n// console.log(choose_num(12, 15));\n// console.log(choose_num(13, 12));\n\nconst get_largest_even_number = (n) => {\n  const i = n;\n  const j = n;\n  const max = -1;\n\n  // console.log(n, i, j);\n\n  while (i <= j) {\n    const k = choose_num(i, j);\n\n    // console.log(k);\n    if (k >= 0 && k < max) {\n      // console.log(k);\n      max = k;\n    }\n\n    if (k < 0) {\n      j--;\n    } else {\n      i++;\n    }\n  }\n\n  return max;\n};\n\nconsole.log(get_largest_even_number(12));\nconsole.log(get_largest_even_number(13));\nconsole.log(get_largest_even_number(20));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let n_int = parseInt(n)\n  let m_int = parseInt(m)\n  let average = (n_int + m_int) / 2\n  let average_rounded = Math.round(average)\n  let rounded_average = String(average_rounded)\n  let rounded_average_bin = \"\"\n  \n  if (rounded_average_bin.length < 4) {\n    rounded_average_bin = (rounded_average_bin + \"0\").slice(-4)\n  }\n\n  rounded_average_bin = (rounded_average_bin + \"b\").slice(0, -4)\n  \n  return rounded_average_bin\n}\n\nexport default rounded_avg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  return x.filter(x => x % 2 === 0)\n   .filter(x => x > 0)\n   .sort((a, b) => a - b)\n}\n\n/*\n  Given a list of positive integers x, return a list of all\n  elements that haven't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits_n = (x) => {\n  return x.filter(x => x > 0)\n   .filter(x => x % 2 === 0)\n   .sort((a, b) => a - b)\n}\n\nconst unique_digits_2 = (x) => {\n  return x.filter(x => x > 0)\n   .filter(x => x % 2 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n}\n\nconst unique_digits_3 = (x) => {\n  return x.filter(x => x > 0)\n   .filter(x => x % 2 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 3 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 5 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 7 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 11 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 13 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 17 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 19 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 23 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 29 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 31 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 37 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 41 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 43 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 47 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 49 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 53 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 59 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 61 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 67 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 71 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 73 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 79 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 81 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 87 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 89 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 97 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 101 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 103 === 0)\n   .sort((a, b) => a - b)\n   .filter(x => x > 0)\n   .filter(x => x % 109 === 0)\n   .sort((a, b) => a - b)\n   .filter("}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  return arr.sort((a, b) => a.length - b.length);\n};\n\nconst by_first = (arr) => {\n  return arr.sort((a, b) => a.charAt(0) - b.charAt(0));\n};\n\nconst by_last = (arr) => {\n  return arr.sort((a, b) => b.charAt(0) - a.charAt(0));\n};\n\nconst by_index = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_length_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_first_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_last_reverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_index_reverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_reverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_first = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_first_reverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_last = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_last_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_index = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_index_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_first = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_length_first_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_last = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_length_last_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_index_first = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_index_first_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_index_last = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_index_last_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_index_first = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_length_index_first_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_index_last = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_length_index_last_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_index_first_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_index_last_reverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_length_index = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_length_index_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_index_first_reverse = (arr) => {\n  return arr.sort((a, b) => b - a);\n};\n\nconst by_digit_length_index_last_reverse = (arr) => {\n  return arr.sort((a, b) => a - b);\n};\n\nconst by_digit_length_index_first = (arr) => {\n  return arr.sort((a, b) => a -"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorial = () => {\n    const factors = []\n    for (let i = 1; i <= n; i++) {\n      factors.push(i)\n    }\n    return factors\n  }\n  const sum = () => {\n    const result = []\n    for (let i = 0; i < n; i++) {\n      if (i % 2 === 0) {\n        result.push(factorial(i))\n      } else {\n        result.push(factorial(i) + sum(i))\n      }\n    }\n    return result\n  }\n  return sum()\n}\n\n/*\n  The function sum takes n as a parameter, and returns the sum of numbers\n  from 1 to n.\n  Example:\n  sum(5) == 15\n  */\nconst sum = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    result.push(i)\n  }\n  return result.reduce((a, b) => a + b)\n}\n\n/*\n  The function odd takes n as a parameter, and returns a list of numbers\n  that are odd.\n  Example:\n  odd(5) == [1, 3, 5]\n  */\nconst odd = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\n/*\n  The function even takes n as a parameter, and returns a list of numbers\n  that are even.\n  Example:\n  even(5) == [2, 4]\n  */\nconst even = (n) => {\n  const result = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\n/*\n  The function is_prime takes n as a parameter, and returns a boolean value\n  that is true if n is prime and false otherwise.\n  Example:\n  is_prime(5) == true\n  is_prime(10) == false\n  is_prime(100) == true\n  is_prime(10000) == false\n  */\nconst is_prime = (n) => {\n  const result = []\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      result.push(false)\n    }\n  }\n  return result\n}\n\n/*\n  The function gcd takes two numbers as a parameters, and returns the\n  greatest common divisor of the two.\n  Example:\n  gcd(10, 20) == 10\n  gcd(12, 6) == 6\n  gcd(8, 18) == 2\n  */\nconst gcd = (a, b) => {\n  if (b === 0) {\n    return a\n  }\n  return gcd(b, a % b)\n}\n\n/*\n  The function lcm takes two numbers as a parameters, and returns the\n  least common multiple of the two.\n  Example:\n  lcm(10, 20) == 60\n  lcm(12, 6) == 12\n  lcm(8, 18) == 72\n  */\nconst lcm = (a, b) => {\n  return a * b / gcd(a, b)\n}\n\n/*\n  The function euler takes n as a parameter, and returns a list of\n  numbers that are the first n primes.\n  Example:\n  euler(5) == [2, 3, 5, 7]\n  */\nconst euler = (n) => {\n  const result = []\n  let count = 1\n  while (count < n) {\n    let is_prime = true\n    for (let i = 2; i <= count; i++) {\n      if (count % i === 0) {\n        is_prime = false\n        break\n      }\n    }\n    if (is_prime) {\n      result.push(count)\n    }\n    count += 1\n  }\n  return result\n}\n\nconst num = parseInt(process.argv[2])\nconsole.log(f(num))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const odd_palindromes = 0\n  const even_palindromes = 0\n  for (let i = 1; i < n; i++) {\n    if (is_palindrome(i)) {\n      if (i % 2 === 0) {\n        even_palindromes += 1\n      } else {\n        odd_palindromes += 1\n      }\n    }\n  }\n  return (odd_palindromes, even_palindromes)\n}\n\nconst is_palindrome = (n) => {\n  let i = 1\n  let k = n\n  while (i <= k) {\n    if (n % i === 0) {\n      return true\n    }\n    i++\n  }\n  return false\n}\n\nconsole.log(even_odd_palindrome(3))\nconsole.log(even_odd_palindrome(12))\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let n = arr.length;\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    let sum = arr[i];\n    if (sum > 0) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(count_nums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n    let new_arr = [...arr]\n    new_arr.sort((a, b) => a - b)\n    return (new_arr[new_arr.length - 1] <= arr[0])\n}\n\nconst move_one_ball_2 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n        index -= 1\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_3 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_4 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_5 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_6 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_7 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_8 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_9 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_10 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_11 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_12 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_arr[index]) {\n        new_arr.splice(index, 1)\n    }\n    return new_arr.every(x => x <= new_arr[index])\n}\n\nconst move_one_ball_13 = (arr) => {\n    let new_arr = [...arr]\n    let index = new_arr.length - 1\n    while (index > 0 && new_arr[index - 1] >= new_"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n    if (lst1.length > lst2.length) return 'NO';\n    for (let i = 0; i < lst1.length; i++) {\n        if (lst2.length === 0) return 'NO';\n        if (lst1[i] % 2!== 0) return 'NO';\n        let temp = lst1[i];\n        lst1[i] = lst2[i];\n        lst2[i] = temp;\n    }\n    return 'YES';\n};\n\nconst result = exchange(lst1, lst2);\nconsole.log(`${result}`);\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const histogram = {}\n  const letters = test.split(\" \")\n  for(let i = 0; i < letters.length; i++) {\n    if(histogram[letters[i]]) {\n      histogram[letters[i]] = histogram[letters[i]] + 1\n    }\n    else {\n      histogram[letters[i]] = 1\n    }\n  }\n  return histogram\n}\n\nconst getLetters = (test) => {\n  const letters = test.split(\" \")\n  const histogram = histogram(test)\n  const histogramLetters = Object.keys(histogram)\n  return {\n    histogramLetters,\n    histogram\n  }\n}\n\nconst isValid = (test) => {\n  const letters = getLetters(test)\n  const valid = Object.keys(letters.histogram).length > 1\n  return {\n    isValid: valid,\n    histogramLetters: letters.histogramLetters,\n    histogram: letters.histogram\n  }\n}\n\nconst maxRepetition = (test) => {\n  const letters = getLetters(test)\n  return {\n    maxRepetition: letters.histogramLetters.reduce((a, b) => {\n      return a > b? a : b\n    }, 0)\n  }\n}\n\nconst letterRepetition = (test) => {\n  const letters = getLetters(test)\n  return {\n    letterRepetition: letters.histogram.reduce((a, b) => {\n      return a > b? a : b\n    }, 0)\n  }\n}\n\nmodule.exports = {\n  histogram,\n  getLetters,\n  isValid,\n  maxRepetition,\n  letterRepetition\n}<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let result = []\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === c[i]) {\n      continue\n    }\n    result.push(s[i])\n  }\n  return [new String(result.reverse()), s.startsWith(c)]\n}\n\nconst main = () => {\n  let [s, c] = reverse_delete('abcc', 'cc')\n  console.log(s, c, s.startsWith(c))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  if (lst.length === 0) return []\n  let sum = 0\n  lst.forEach((s) => {\n    const len = s.length\n    sum += parseInt(s.split('').filter((x) => x % 2 === 1).join(''))\n  })\n  return [`the number of odd elements ${sum} of the ${lst.length}nput.`]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  const len = nums.length;\n  const result = [];\n\n  let sum = 0;\n  let start = 0;\n  let end = 0;\n\n  while (start <= len - 1) {\n    sum = 0;\n    end = start + 1;\n\n    while (end <= len - 1) {\n      sum += nums[start];\n      end++;\n    }\n\n    result.push(sum);\n    start++;\n  }\n\n  return result.reduce((acc, num) => {\n    if (acc < num) {\n      return num;\n    }\n\n    return acc;\n  }, 0);\n};\n\nexport default min_sub_array_sum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n    const count = 0;\n    let n = grid.length;\n    let row = 0;\n    while (row < n) {\n        const col = 0;\n        while (col < n) {\n            if (grid[row][col] === 0) {\n                count++;\n                row++;\n                col++;\n            } else {\n                const j = col;\n                while (j < n) {\n                    if (grid[row][j] === 1) {\n                        grid[row][j] = 0;\n                        col = j + 1;\n                        count++;\n                    } else {\n                        col = j + 1;\n                    }\n                }\n                row++;\n                col = 0;\n            }\n        }\n    }\n    return count;\n}\n\nconst count = (grid, capacity) => {\n    const n = grid.length;\n    const col = 0;\n    while (col < n) {\n        const row = 0;\n        while (row < n) {\n            if (grid[row][col] === 1) {\n                row++;\n            } else {\n                const j = col + 1;\n                while (j < n) {\n                    if (grid[row][j] === 1) {\n                        grid[row][j] = 0;\n                        col = j;\n                        break;\n                    } else {\n                        col = j;\n                    }\n                }\n                row++;\n            }\n        }\n        col++;\n    }\n    return grid.reduce((a, b, i, arr) => {\n        const j = i + 1;\n        while (j < n) {\n            if (arr[j] === 1) {\n                arr[j] = 0;\n            }\n            j++;\n        }\n        return a + 1;\n    }, 0);\n}\n\nconst fill = (grid, capacity) => {\n    const n = grid.length;\n    const row = 0;\n    while (row < n) {\n        const col = 0;\n        while (col < n) {\n            if (grid[row][col] === 0) {\n                row++;\n            } else {\n                const j = col + 1;\n                while (j < n) {\n                    if (grid[row][j] === 1) {\n                        grid[row][j] = 0;\n                        col = j;\n                        break;\n                    } else {\n                        col = j;\n                    }\n                }\n                row++;\n            }\n        }\n        col++;\n    }\n    return grid.reduce((a, b, i, arr) => {\n        const j = i + 1;\n        while (j < n) {\n            if (arr[j] === 1) {\n                arr[j] = 0;\n            }\n            j++;\n        }\n        return a + 1;\n    }, 0);\n}\n\nconst main = () => {\n    let grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\n    let capacity = 1;\n    console.log(count(grid, capacity));\n    console.log(fill(grid, capacity));\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  if (arr.length === 0) return []\n  const sorted = arr.slice(0).sort((a, b) => a - b)\n  return [...new Set(sorted)].map(e => e * 1)\n}\n\nmodule.exports = sort_array\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  let result = []\n  for (let i = 0; i < s.length; i++) {\n    let words = []\n    let cur_word = \"\"\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] ==='') {\n        if (cur_word!== \"\") {\n          words.push(cur_word)\n          cur_word = \"\"\n        }\n      } else if (j === i) {\n        cur_word += s[j]\n      } else if (cur_word!== \"\") {\n        cur_word += s[j]\n      }\n    }\n    if (cur_word!== \"\") {\n      words.push(cur_word)\n    }\n    for (let i = 0; i < words.length; i++) {\n      if (words[i].length === n) {\n        result.push(words[i])\n      }\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a non-empty string p, you have been tasked to implement a\nfunction that checks if s contains all the substrings of p.\n\nExample:\n  contains(\"mississippi\", \"issip\") -> true\n  contains(\"mississippi\", \"iissp\") -> false\n  contains(\"mississippi\", \"missis\") -> true\n  contains(\"mississippi\", \"miss\") -> true\n  contains(\"mississippi\", \"xxx\") -> false\n  contains(\"mississippi\", \"\") -> false\n  contains(\"mississippi\", \"i\") -> true\n*/\nconst contains = (s, p) => {\n  let result = true\n  for (let i = 0; i < p.length; i++) {\n    let cur_string = \"\"\n    for (let j = 0; j < s.length; j++) {\n      if (s[j] === p[i]) {\n        cur_string += s[j]\n      } else {\n        break\n      }\n    }\n    if (cur_string === p[i]) {\n      continue\n    }\n    result = false\n  }\n  return result\n}\n\n/*\nGiven a string s, you have been tasked to implement a function that returns the\nnumber of different words that can be created by deleting characters from the\nfront of the string s.\n\nExample:\n  length_of_words(\"Hello world\") -> 5\n  length_of_words(\"Hello\") -> 2\n  length_of_words(\"Hello world\", 2) -> 3\n  length_of_words(\"Hello world\", 1) -> 4\n  length_of_words(\"Hello world\", 3) -> 1\n  length_of_words(\"Hello world\", 5) -> 1\n  length_of_words(\"Hello world\", 6) -> 1\n  length_of_words(\"Hello world\", 7) -> 1\n  length_of_words(\"Hello world\", 8) -> 1\n*/\nconst length_of_words = (s, n) => {\n  let result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (i + n < s.length) {\n      let cur_string = \"\"\n      for (let j = i; j < i + n; j++) {\n        cur_string += s[j]\n      }\n      if (contains(cur_string, s)) {\n        result++\n      }\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a string t, you have been tasked to implement a function\nthat checks if s contains all the characters from t.\n\nExample:\n  contains(\"mississippi\", \"issip\") -> true\n  contains(\"mississippi\", \"xxx\") -> false\n  contains(\"mississippi\", \"miss\") -> true\n  contains(\"mississippi\", \"i\") -> true\n*/\nconst contains_all = (s, t) => {\n  let result = true\n  for (let i = 0; i < t.length; i++) {\n    if (s.indexOf(t[i]) === -1) {\n      result = false\n      break\n    }\n  }\n  return result\n}\n\n/*\nGiven a string s and a string t, you have been tasked to implement a function\nthat checks if t is a substring of s.\n\nExample:\n  is_substring(\"mississippi\", \"issip\") -> true\n  is_substring(\"mississippi\", \"xxx\") -> false\n  is_substring(\"mississippi\", \"miss\") -> true\n  is_substring(\"mississippi\", \"i\") -> true\n*/\nconst is_substring = (s, t) => {\n  return contains_all(s, t)\n}\n\nmodule.exports = {\n  select_words,\n  contains,\n  length_of_words,\n  is_substring\n}\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let closest = word.split('').reverse().reduce((acc, char, index) => {\n    if (index > 0 && is_consonant(char)) {\n      return acc;\n    }\n    if (index < word.length - 1 && is_vowel(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n\n  return closest;\n};\n\n/*\n  Given a string, return the index of the first vowel from the right side of the string.\n  \n  Example:\n  get_first_vowel(\"cabC\") ==> \"c\"\n  get_first_vowel(\"ab\") ==> \"\"\n  */\nconst get_first_vowel = (word) => {\n  let char = word.split('').reverse().reduce((acc, char, index) => {\n    if (index < word.length - 1 && is_vowel(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n\n/*\n  Given a string, return the index of the last vowel from the right side of the string.\n  \n  Example:\n  get_last_vowel(\"cabC\") ==> \"c\"\n  get_last_vowel(\"ab\") ==> \"a\"\n  */\nconst get_last_vowel = (word) => {\n  let char = word.split('').reverse().reduce((acc, char, index) => {\n    if (index > 0 && is_vowel(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n\n/*\n  Given a string, return the index of the first consonant from the right side of the string.\n  \n  Example:\n  get_first_consonant(\"cabC\") ==> \"b\"\n  get_first_consonant(\"ab\") ==> \"\"\n  */\nconst get_first_consonant = (word) => {\n  let char = word.split('').reverse().reduce((acc, char, index) => {\n    if (index < word.length - 1 && is_consonant(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n\n/*\n  Given a string, return the index of the last consonant from the right side of the string.\n  \n  Example:\n  get_last_consonant(\"cabC\") ==> \"c\"\n  get_last_consonant(\"ab\") ==> \"a\"\n  */\nconst get_last_consonant = (word) => {\n  let char = word.split('').reverse().reduce((acc, char, index) => {\n    if (index > 0 && is_consonant(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n\n/*\n  Given a string, return the index of the first vowel from the left side of the string.\n  \n  Example:\n  get_first_vowel(\"cabC\") ==> \"a\"\n  get_first_vowel(\"ab\") ==> \"a\"\n  */\nconst get_first_vowel_from_left = (word) => {\n  let char = word.split('').reduce((acc, char, index) => {\n    if (is_vowel(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n\n/*\n  Given a string, return the index of the last vowel from the left side of the string.\n  \n  Example:\n  get_last_vowel(\"cabC\") ==> \"c\"\n  get_last_vowel(\"ab\") ==> \"b\"\n  */\nconst get_last_vowel_from_left = (word) => {\n  let char = word.split('').reduce((acc, char, index) => {\n    if (is_vowel(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n\n/*\n  Given a string, return the index of the first consonant from the left side of the string.\n  \n  Example:\n  get_first_consonant(\"cabC\") ==> \"b\"\n  get_first_consonant(\"ab\") ==> \"b\"\n  */\nconst get_first_consonant_from_left = (word) => {\n  let char = word.split('').reduce((acc, char, index) => {\n    if (is_consonant(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n\n/*\n  Given a string, return the index of the last consonant from the left side of the string.\n  \n  Example:\n  get_last_consonant(\"cabC\") ==> \"b\"\n  get_last_consonant(\"ab\") ==> \"b\"\n  */\nconst get_last_consonant_from_left = (word) => {\n  let char = word.split('').reduce((acc, char, index) => {\n    if (is_consonant(char)) {\n      return acc;\n    }\n    return acc + char;\n  }, '');\n  return char;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = []\n  const result = []\n  const stack_empty = (lst) => stack.length === 0\n  const stack_push = (item) => stack.push(item)\n\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack_push(c)\n    } else if (c === ')') {\n      stack_empty(lst) && stack_push(c)\n      stack_pop(lst)\n    } else {\n      stack_empty(lst) && stack_push(c)\n    }\n  }\n  stack_empty(lst) && stack_push(c)\n  stack_pop(lst)\n  stack_empty(lst)? result.push('Yes') : result.push('No')\n  return result.join('')\n}\n\nconst match_parens_with_list = (lst) => {\n  const stack = []\n  const result = []\n  const stack_empty = (lst) => stack.length === 0\n  const stack_push = (item) => stack.push(item)\n\n  for (let i = 0; i < lst.length; i++) {\n    const c = lst[i]\n    if (c === '(') {\n      stack_push(c)\n    } else if (c === ')') {\n      stack_empty(lst) && stack_push(c)\n      stack_pop(lst)\n    } else {\n      stack_empty(lst) && stack_push(c)\n    }\n  }\n  stack_empty(lst) && stack_push(c)\n  stack_pop(lst)\n  stack_empty(lst)? result.push('Yes') : result.push('No')\n  return result.join('')\n}\n\nexport default match_parens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  let max_element = arr[0]\n  let max_index = 0\n  for (let i = 1; i < k; i++) {\n    if (arr[i] > max_element) {\n      max_element = arr[i]\n      max_index = i\n    }\n  }\n  return arr.slice(0, max_index + 1)\n}\n\nconsole.log(maximum([-3, -4, 5], 3)) // => [-4, -3, 5]\nconsole.log(maximum([4, -4, 4], 2)) // => [4, 4]\nconsole.log(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) // => [2]\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const len = arr.length\n  const sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  for (let i = k; i < len; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst add_elements_test = () => {\n  const arr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const k = 4\n  console.log(add_elements(arr, k))\n}\n\nadd_elements_test()\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  const collatz = {1, 1};\n  const step = (x) => {\n    if (x === 1) {\n      return collatz;\n    }\n    const [x_tmp, y] = step(x / 2);\n    if (x % 2 === 0) {\n      return [y, x_tmp];\n    } else {\n      return [x_tmp, 3 * x_tmp + 1];\n    }\n  };\n  return step(n);\n};\n\nconst get_odd_collatz_v1 = (n) => {\n  let odd_collatz = [1];\n  let last_odd_collatz = [1];\n  while (n!== 1) {\n    if (n % 2 === 0) {\n      odd_collatz.push(n);\n      last_odd_collatz.push(n);\n      n = n / 2;\n    } else {\n      odd_collatz.push(3 * n + 1);\n      last_odd_collatz.push(n);\n      n = (3 * n + 1) / 2;\n    }\n  }\n  return odd_collatz;\n};\n\nconsole.log(get_odd_collatz_v1(5));\nconsole.log(get_odd_collatz_v1(7));\nconsole.log(get_odd_collatz_v1(12));\nconsole.log(get_odd_collatz_v1(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  if (!date) return false;\n  const months = ['01', '03', '05', '07', '08', '10', '12'];\n  const days = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '30'];\n  const date_array = date.split('-');\n  if (date_array.length!== 3) return false;\n  const year = parseInt(date_array[0]);\n  const month = parseInt(date_array[1]);\n  const day = parseInt(date_array[2]);\n  if (isNaN(year) || isNaN(month) || isNaN(day)) return false;\n  if (month < 1 || month > 12) return false;\n  if (month === 1 && (day < 1 || day > 31)) return false;\n  if (month === 3 && (day < 1 || day > 31)) return false;\n  if (month === 5 && (day < 1 || day > 31)) return false;\n  if (month === 7 && (day < 1 || day > 31)) return false;\n  if (month === 8 && (day < 1 || day > 31)) return false;\n  if (month === 10 && (day < 1 || day > 31)) return false;\n  if (month === 12 && (day < 1 || day > 31)) return false;\n  if (month === 4 && (day < 1 || day > 30)) return false;\n  if (month === 6 && (day < 1 || day > 30)) return false;\n  if (month === 9 && (day < 1 || day > 29)) return false;\n  if (month === 11 && (day < 1 || day > 29)) return false;\n  if (year < 1 || year > 2040) return false;\n  if (date_array[0].length === 2) return false;\n  if (date_array[2].length === 2) return false;\n  if (month === 2 && (day < 1 || day > 29)) return false;\n  return true;\n};\n\nconst test_cases = [\n  ['03-11-2000', true],\n  ['15-01-2012', false],\n  ['04-0-2040', false],\n  ['06/04/2020', true],\n  ['06/04/2020', true],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],\n  ['06/04/2020', false],"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const word_regex = /\\S+/g\n  const word_arr = txt.match(word_regex)\n  if (!word_arr) return []\n  return word_arr.map((word) => word.trim())\n}\n\n/*\n  Given a string of words, return a list of the letters of all the words, if no words exist, you should return an empty list.\n  Examples\n  words_to_letters(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"d\", \"e\", \"l\", \"o\", \"h\", \"l\", \"e\", \"w\", \"o\", \"r\", \"d\", \"!\"]\n  words_to_letters(\"Hello,world!\") ➞ [\"Hello\", \"world!\", \"d\", \"e\", \"l\", \"o\", \"h\", \"l\", \"e\", \"w\", \"o\", \"r\", \"d\", \"!\"]\n  words_to_letters(\"abcdef\") ➞ []\n  */\nconst words_to_letters = (txt) => {\n  const word_regex = /\\S+/g\n  const word_arr = txt.match(word_regex)\n  if (!word_arr) return []\n  return word_arr.map((word) => word.trim()).map((word) => word.toUpperCase())\n}\n\n/*\n  Given a list of words, return a list of all the unique words in the list.\n  Examples\n  words_to_unique(\"Hello world!\") ➞ [\"Hello\", \"world!\", \"Hello\", \"world!\", \"world!\", \"world!\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\", \"Hello\","}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const sorted = lst.sort();\n  return lst.every(l => lst.indexOf(l) === sorted.indexOf(l));\n};\n\nconst is_sorted_array = (lst) => {\n  return lst.every(l => is_sorted(l));\n};\n\nconst lst = [3, 5, 5, 6, 5, 5, 6, 5, 6];\nconsole.log(is_sorted(lst));\nconsole.log(is_sorted_array(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (!interval1 ||!interval2) {\n    return \"NO\";\n  }\n  const start1 = interval1[0], end1 = interval1[1],\n        start2 = interval2[0], end2 = interval2[1];\n  if (end1 < start2 || end2 < start1) {\n    return \"NO\";\n  }\n  return start1 === start2 && end1 === end2? \"YES\" : \"NO\";\n};\n\nexport const interval = (start, end) => {\n  if (start > end) {\n    const temp = start;\n    start = end;\n    end = temp;\n  }\n  return [start, end];\n};\n\nexport const test = (interval) => {\n  const res = intersection(interval, interval);\n  console.log(`intersection({${interval[0]}, ${interval[1]}}) = ${res}`);\n};\n\nexport const test1 = () => {\n  const [start, end] = interval(1, 2);\n  console.log(`intersection({${start}, ${end}}, ${start}, ${end}) = ${intersection(start, end)}`);\n};\n\nexport const test2 = () => {\n  const [start, end] = interval(-3, -1);\n  console.log(`intersection({${start}, ${end}}, ${start}, ${end}) = ${intersection(start, end)}`);\n};\n\nexport const test3 = () => {\n  const [start, end] = interval(-5, 5);\n  console.log(`intersection({${start}, ${end}}, ${start}, ${end}) = ${intersection(start, end)}`);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  if (!arr || arr.length === 0) {\n    return null;\n  }\n\n  const arr_sorted = arr.sort((a, b) => a - b);\n  let sum = 0;\n  for (let i = 0; i < arr_sorted.length; i++) {\n    sum += Math.abs(arr_sorted[i]) * (arr_sorted[i] > 0? 1 : -1);\n  }\n\n  return sum;\n};\n\nexport default prod_signs;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n    const N = grid.length;\n\n    const lst_path = new Array(N);\n    lst_path[0] = grid[0][0];\n    for (let i = 1; i < N; i++) {\n        lst_path[i] = grid[i][0];\n    }\n\n    for (let i = 1; i < N; i++) {\n        for (let j = 1; j < N; j++) {\n            const grid_val = grid[i][j];\n            const lst_values = lst_path.slice(0, i).concat(grid_val, lst_path.slice(i + 1));\n            const lst_values_min = values_sorted_lex(lst_values);\n            if (k === 1) {\n                lst_path[i] = lst_values_min[0];\n            } else {\n                if (lst_values_min.indexOf(lst_values_min[k - 1])!== -1) {\n                    lst_path[i] = lst_values_min[k - 1];\n                } else {\n                    lst_path[i] = lst_values_min[0];\n                }\n            }\n        }\n    }\n\n    return lst_path.slice(0, k);\n};\n\nexport { min_path };\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const arr = [1, 3, 2]\n  if (n === 0) {\n    return arr\n  }\n  if (n === 1) {\n    return arr\n  }\n  let result = arr\n  for (let i = 2; i <= n; i++) {\n    result.push(arr[i - 1] + arr[i - 2] + arr[i + 1])\n  }\n  return result\n}\n\nexport default tri\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  const len = n.length;\n  let num = 0;\n  for (let i = 0; i < len; i += 1) {\n    num = num * 10 + n[i];\n  }\n  return num % 2 === 1? num : 0;\n};\n\nconsole.log(digits(23));\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  let current_index = 0;\n  let stack = [];\n  while (current_index < string.length) {\n    const char = string[current_index];\n    if (char === '[') {\n      stack.push(char);\n    } else if (char === ']') {\n      if (stack.length > 0) {\n        stack.pop();\n      } else {\n        return false;\n      }\n    } else if (char === '[' || char === ']') {\n      return false;\n    }\n    current_index++;\n  }\n  return stack.length === 0;\n};\n\n// Test the function\nconsole.log(is_nested('[[]]'));\nconsole.log(is_nested('[]]]]]]][[[[[]'));\nconsole.log(is_nested('[][]'));\nconsole.log(is_nested('[]'));\nconsole.log(is_nested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  const sum = lst.reduce((a, b) => a + b, 0);\n  return lst.map(x => Math.floor(x)).reduce((a, b) => a + b * b, sum);\n};\n\nexport default sum_squares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const last_char = txt[txt.length - 1];\n  const is_a_letter = is_alpha(last_char);\n  const is_a_word = txt.startsWith(\" \");\n  return is_a_letter &&!is_a_word;\n};\n\n/*\n  Create a function that returns true if the last character of a given\n  string is a digit, and false otherwise.\n  Note: \"digit\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_digit(\"12345\") ➞ true\n  check_if_last_char_is_a_digit(\"123 45\") ➞ true\n  check_if_last_char_is_a_digit(\"apple pie\") ➞ false\n  check_if_last_char_is_a_digit(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_digit = (txt) => {\n  const last_char = txt[txt.length - 1];\n  const is_a_digit = is_digit(last_char);\n  const is_a_word = txt.startsWith(\" \");\n  return is_a_digit &&!is_a_word;\n};\n\n/*\n  Create a function that returns true if the last two characters of a\n  given string are both alphabetic characters, and false otherwise.\n  Note: \"alphabetic\" is a group of characters separated by space.\n  Examples:\n  check_if_last_two_char_are_a_letter(\"apple pie\") ➞ true\n  check_if_last_two_char_are_a_letter(\"apple pi e\") ➞ true\n  check_if_last_two_char_are_a_letter(\"apple pie \") ➞ true\n  check_if_last_two_char_are_a_letter(\"\") ➞ false\n  */\nconst check_if_last_two_char_are_a_letter = (txt) => {\n  const last_char = txt[txt.length - 1];\n  const next_char = txt[txt.length - 2];\n  const is_a_letter = is_alpha(last_char) && is_alpha(next_char);\n  const is_a_word = txt.startsWith(\" \");\n  return is_a_letter &&!is_a_word;\n};\n\n/*\n  Create a function that returns true if the last two characters of a\n  given string are both numeric characters, and false otherwise.\n  Note: \"numeric\" is a group of characters separated by space.\n  Examples:\n  check_if_last_two_char_are_a_numeric(\"12345\") ➞ true\n  check_if_last_two_char_are_a_numeric(\"123 45\") ➞ true\n  check_if_last_two_char_are_a_numeric(\"apple pie\") ➞ false\n  check_if_last_two_char_are_a_numeric(\"\") ➞ false\n  */\nconst check_if_last_two_char_are_a_numeric = (txt) => {\n  const last_char = txt[txt.length - 1];\n  const next_char = txt[txt.length - 2];\n  const is_a_numeric = is_digit(last_char) && is_digit(next_char);\n  const is_a_word = txt.startsWith(\" \");\n  return is_a_numeric &&!is_a_word;\n};\n\n/*\n  Create a function that returns true if the last character of a\n  given string is a lowercase letter and if the last two characters\n  of the given string are both upper case letters.\n  Note: \"lowercase\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_lowercase(\"apple pie\") ➞ false\n  check_if_last_char_is_a_lowercase(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_lowercase(\"apple pie \") ➞ false\n  check_if_last_char_is_a_lowercase(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_lowercase = (txt) => {\n  const last_char = txt[txt.length - 1];\n  const is_lowercase = is_lower(last_char);\n  const is_upper = check_if_last_two_char_are_a_uppercase(txt);\n  return is_lowercase && is_upper;\n};\n\n/*\n  Create a function that returns true if the last two characters of a\n  given string are both uppercase letters.\n  Note: \"uppercase\" is a group of characters separated by space.\n  Examples:\n  check_if_last_two_char_are_uppercase(\"apple pie\") ➞ true\n  check_if_last_two_char_are_uppercase(\"apple pi e\") ➞ true\n  check_if_last_two_char_are_uppercase(\"apple pie \") ➞ true\n  check_if_last_two_char_are_uppercase(\"\") ➞ false\n  */\nconst check_if_last_two_char_are_uppercase = (txt) => {\n  const last_char = txt[txt.length - 1];\n  const next_char = txt[txt.length - 2];\n  const is_uppercase = is_upper(last_char) && is_upper(next_char);\n  const is_word = txt.startsWith(\" \");"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let max = arr[0];\n  while (i < j) {\n    let mid = (i + j) / 2;\n    if (arr[mid] <= arr[j]) {\n      max = Math.max(arr[mid], max);\n      i = mid + 1;\n    } else {\n      j = mid;\n    }\n  }\n  return max;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 2\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange_rev = (arr) => {\n  let i = 0;\n  let j = arr.length - 1;\n  let max = arr[0];\n  while (i < j) {\n    let mid = (i + j) / 2;\n    if (arr[mid] >= arr[j]) {\n      max = Math.max(arr[mid], max);\n      i = mid + 1;\n    } else {\n      j = mid;\n    }\n  }\n  return max;\n};\n\nconst can_arrange_test = [\n  [1,2,3,4,5],\n  [1,2,3],\n  [1,2,3,4,5,6],\n  [1,2,3,4,5,6,7],\n  [1,2,3,4,5,6,7,8],\n  [1,2,3,4,5,6,7,8,9],\n  [1,2,3,4,5,6,7,8,9,10],\n  [1,2,3,4,5,6,7,8,9,10,11],\n];\n\nconst can_arrange_test_rev = [\n  [1,2,3,4,5,6,7,8,9,10,11],\n  [1,2,3,4,5,6,7,8,9,10,11,12],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],\n];\n\nconst can_arrange_test_rev_rev = [\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25],\n];\n\nconst can_arrange_test_rev_rev_rev = [\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29],\n  [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  // Create a function to find largest of negative integers.\n  const largest_negative_integers = (lst) => {\n    const neg_ints = lst.filter(x => x < 0);\n    if (neg_ints.length) {\n      return Math.max.apply(Math, neg_ints);\n    } else {\n      return null;\n    }\n  };\n\n  // Create a function to find smallest of positive integers.\n  const smallest_positive_integers = (lst) => {\n    const pos_ints = lst.filter(x => x > 0);\n    if (pos_ints.length) {\n      return Math.min.apply(Math, pos_ints);\n    } else {\n      return null;\n    }\n  };\n\n  // Create a function to return largest and smallest of integers.\n  const largest_smallest_integers = (lst) => {\n    const largest = largest_negative_integers(lst);\n    const smallest = smallest_positive_integers(lst);\n    if (largest!== null && smallest!== null) {\n      return (largest, smallest);\n    } else {\n      return (largest, smallest);\n    }\n  };\n\n  return largest_smallest_integers(lst);\n};\n\nlargest_smallest_integers([2, 4, 1, 3, 5, 7]) === (null, 1)\nlargest_smallest_integers([]) === (null, null)\nlargest_smallest_integers([0]) === (null, null)\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n  if (typeof a ==='string') {\n    a = a.replace(/,/g, '.');\n  }\n  if (typeof b ==='string') {\n    b = b.replace(/,/g, '.');\n  }\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a === b) return null;\n    if (a > b) return a;\n    return b;\n  }\n  if (a > b) return a;\n  return b;\n};\n\ncompare_one(1, 2.5) === 2.5;\ncompare_one(1, \"2,3\") === \"2,3\";\ncompare_one(\"5,1\", \"6\") === \"6\";\ncompare_one(\"1\", 1) === null;\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(12) == false\n  is_equal_to_sum_even(14) == true\n  is_equal_to_sum_even(16) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 2) % 6 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(9) == false\n  is_equal_to_sum_even(16) == true\n  is_equal_to_sum_even(24) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 2) % 6 === 0 && (n + 3) % 8 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n  Example\n  is_equal_to_sum_even(10) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(24) == false\n  is_equal_to_sum_even(32) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 2) % 6 === 0 && (n + 3) % 8 === 0 && (n + 4) % 10 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 12 positive even numbers\n  Example\n  is_equal_to_sum_even(12) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(24) == false\n  is_equal_to_sum_even(32) == false\n  is_equal_to_sum_even(36) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 2) % 6 === 0 && (n + 3) % 8 === 0 && (n + 4) % 10 === 0 && (n + 5) % 12 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 14 positive even numbers\n  Example\n  is_equal_to_sum_even(14) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(24) == false\n  is_equal_to_sum_even(32) == false\n  is_equal_to_sum_even(36) == false\n  is_equal_to_sum_even(40) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 2) % 6 === 0 && (n + 3) % 8 === 0 && (n + 4) % 10 === 0 && (n + 5) % 12 === 0 && (n + 6) % 14 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 16 positive even numbers\n  Example\n  is_equal_to_sum_even(16) == true\n  is_equal_to_sum_even(24) == false\n  is_equal_to_sum_even(32) == false\n  is_equal_to_sum_even(36) == false\n  is_equal_to_sum_even(40) == false\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 2) % 6 === 0 && (n + 3) % 8 === 0 && (n + 4) % 10 === 0 && (n + 5) % 12 === 0 && (n + 6) % 14 === 0 && (n + 7) % 16 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 18 positive even numbers\n  Example\n  is_equal_to_sum_even(18) == false\n  is_equal_to_sum_even(20) == false\n  is_equal_to_sum_even(24) == false\n  is_equal_to_sum_even(32) == false\n  is_equal_to_sum_even(36) == false\n  is_equal_to_sum_even(40) == false\n  is_equal_to_sum_even(42) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && (n + 1) % 4 === 0 && (n + 2) % 6 === 0 && (n + 3) % 8 === 0 && (n + 4) % 10 === 0 && (n + 5) % 12 === 0 && (n + 6) % 14 === 0 && (n + 7) % 16 === 0 && (n + 8) % 18 === 0;\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 20 positive even numbers\n  Example\n  is_equal_to_sum_even(20) == true\n  is_equal_to_sum_even(24) == false\n  is_equal_to_sum_even(32) == false\n  is_equal_to_sum_even(36) == false\n  is_equal_to_sum_even(40) == false\n  is_equal_to_"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let i, result = 1;\n  for (i = n - 1; i > 0; i--) {\n    result = result * i;\n  }\n  return result;\n};\n\nconsole.log(special_factorial(3));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n    text = text.replace(/\\s/g, '_');\n    if (text.length > 2) {\n        text = text.replace(/\\s{2}/g, '-');\n    }\n    return text;\n}\n\nconst fix_spaces_and_convert_to_upper = (text) => {\n    text = fix_spaces(text);\n    return text.toUpperCase();\n}\n\nconst get_random_number = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nconst get_random_string = (length) => {\n    var result = \"\";\n    var possible = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";\n    for (var i = 0; i < length; i++) {\n        var char = possible.charAt(Math.floor(Math.random() * possible.length));\n        result += char;\n    }\n    return result;\n}\n\nconst get_random_date = () => {\n    var year = get_random_number(1900, 2100);\n    var month = get_random_number(1, 12);\n    var day = get_random_number(1, 31);\n    var date = new Date(year, month - 1, day);\n    return date;\n}\n\nconst get_random_date_time = () => {\n    var date = get_random_date();\n    var time = new Date(date.getTime() + get_random_number(0, 1000));\n    return [date, time];\n}\n\nconst convert_to_datetime = (date_time) => {\n    if (date_time) {\n        var date = date_time[0];\n        var time = date_time[1];\n        var datetime = new Date(date.getTime() + time.getTime());\n        return [datetime, time];\n    }\n}\n\nconst convert_to_datetime_for_printing = (date_time) => {\n    if (date_time) {\n        var date = date_time[0];\n        var time = date_time[1];\n        var datetime = new Date(date.getTime() + time.getTime());\n        var format = 'dd-MM-yyyy HH:mm';\n        return datetime.toLocaleString(undefined, format);\n    }\n}\n\nconst convert_to_date = (date) => {\n    if (date) {\n        var date = new Date(date);\n        return [date, undefined];\n    }\n}\n\nconst convert_to_date_time = (date_time) => {\n    if (date_time) {\n        var date = date_time[0];\n        var time = date_time[1];\n        var datetime = new Date(date.getTime() + time.getTime());\n        return [datetime, time];\n    }\n}\n\nconst convert_to_date_time_for_printing = (date_time) => {\n    if (date_time) {\n        var date = date_time[0];\n        var time = date_time[1];\n        var datetime = new Date(date.getTime() + time.getTime());\n        var format = 'dd-MM-yyyy HH:mm';\n        return datetime.toLocaleString(undefined, format);\n    }\n}\n\nconst get_random_datetime = () => {\n    var year = get_random_number(1900, 2100);\n    var month = get_random_number(1, 12);\n    var day = get_random_number(1, 31);\n    var date = new Date(year, month - 1, day);\n    var time = get_random_date_time();\n    return [date, time];\n}\n\nconst get_random_datetime_for_printing = () => {\n    var date = get_random_datetime();\n    var time = date[1];\n    var format = 'dd-MM-yyyy HH:mm';\n    return [date[0], time.toLocaleString(undefined, format)];\n}\n\nmodule.exports = {\n    fix_spaces,\n    fix_spaces_and_convert_to_upper,\n    get_random_number,\n    get_random_string,\n    get_random_date,\n    get_random_date_time,\n    convert_to_datetime,\n    convert_to_datetime_for_printing,\n    convert_to_date,\n    convert_to_date_time,\n    convert_to_date_time_for_printing,\n    get_random_datetime,\n    get_random_datetime_for_printing\n};\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  let is_valid = true;\n  const file_name_length = file_name.length;\n  for (let i = 0; i < file_name_length; i++) {\n    if (file_name.charCodeAt(i) > 64 && file_name.charCodeAt(i) < 91) {\n      continue;\n    }\n    if (i === 0 && file_name.charCodeAt(i) === 46) {\n      continue;\n    }\n    if (file_name.charCodeAt(i) === 45) {\n      continue;\n    }\n    if (i === file_name_length - 1 && file_name.charCodeAt(i) === 46) {\n      continue;\n    }\n    if (i === file_name_length - 1 && file_name.charCodeAt(i) > 47) {\n      continue;\n    }\n    if (i === 0 && file_name.charCodeAt(i) === 46) {\n      continue;\n    }\n    if (file_name.charCodeAt(i) > 96 && file_name.charCodeAt(i) < 123) {\n      continue;\n    }\n    if (file_name.charCodeAt(i) > 64 && file_name.charCodeAt(i) < 91) {\n      continue;\n    }\n    is_valid = false;\n    break;\n  }\n  return is_valid;\n}\n\n/* Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check2 = (file_name) => {\n  let is_valid = true;\n  const file_name_length = file_name.length;\n  for (let i = 0; i < file_name_length; i++) {\n    if (file_name.charCodeAt(i) > 64 && file_name.charCodeAt(i) < 91) {\n      continue;\n    }\n    if (i === 0 && file_name.charCodeAt(i) === 46) {\n      continue;\n    }\n    if (file_name.charCodeAt(i) === 45) {\n      continue;\n    }\n    if (i === file_name_length - 1 && file_name.charCodeAt(i) === 46) {\n      continue;\n    }\n    if (i === file_name_length - 1 && file_name.charCodeAt(i) > 47) {\n      continue;\n    }\n    if (i === 0 && file_name.charCodeAt(i) === 46) {\n      continue;\n    }\n    if (file_name.charCodeAt(i) > 96 && file_name.charCodeAt(i) < 123) {\n      continue;\n    }\n    if (file_name.charCodeAt(i) > 64 && file_name.charCodeAt(i) < 91) {\n      continue;\n    }\n    is_valid = false;\n    break;\n  }\n  return is_valid;\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check3 = (file_name) => {\n  let is_valid = true;\n  const file_name_length = file_name.length;\n  for (let i = 0; i < file_name_length; i++) {\n    if (file_name.charCodeAt(i) > 64 && file_name.charCodeAt(i) < 91) {\n      continue;\n    }\n    if (i === 0 && file_name.charCodeAt(i) === 46) {\n      continue;\n    }\n    if (file_name.charCodeAt(i) === 45) {\n      continue;\n    }\n    if (i === file_name_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  if (lst.length === 0) {\n    return 0\n  }\n  return lst.reduce((acc, val) => {\n    if (val > 0) {\n      if (Math.floor(val) % 3 === 0) {\n        acc += val * val\n      } else if (Math.floor(val) % 4 === 0) {\n        acc += val * val * val\n      }\n    }\n    return acc\n  }, 0)\n}\n\n// Test Cases\nconst testSumSquares = () => {\n  const lst = [1, 2, 3, 4, 5, 6]\n  console.log(sum_squares(lst))\n  console.log(sum_squares([-1, -5, 2, -1, -5]))\n  console.log(sum_squares([-1, -5, 2, -1, -5, 3, 4, 5, 6]))\n  console.log(sum_squares([-1, -5, 2, -1, -5, 3, 4, 5, 6, 7, 8, 9]))\n  console.log(sum_squares([-1, -5, 2, -1, -5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\n  console.log(sum_squares([-1, -5, 2, -1, -5, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126]))\n}\n\n// Main Execution\ntestSumSquares()\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  let words = sentence.split(\" \");\n  let result = [];\n  let check = 0;\n  let index = 0;\n  while (index < words.length) {\n    if (check === 0) {\n      check = 2;\n      result.push(words[index]);\n      index++;\n    } else {\n      check = (check * 2) % words.length;\n    }\n  }\n  return result;\n};\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst sentence_prime = (sentence) => {\n  let words = words_in_sentence(sentence);\n  let result = [];\n  let index = 0;\n  while (index < words.length) {\n    let word = words[index];\n    while (index < words.length && words[index] === word) {\n      index++;\n    }\n    result.push(word);\n  }\n  return result.join(\" \");\n};\n\nconsole.log(sentence_prime(\"This is a test\")); // \"This is\"\nconsole.log(sentence_prime(\"lets go for swimming\")); // \"lets go\"\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === '0' || n === '0') {\n    return false;\n  }\n  const xNum = Number(x);\n  const nNum = Number(n);\n  const nDen = nNum === 0? 1 : nNum;\n  if (nDen === 0) {\n    return false;\n  }\n  return nDen === 1 || (nDen > 1 && nNum % nDen === 0);\n};\n\n// tests\n// simplify(\"1/5\", \"5/1\")\n// simplify(\"1/6\", \"2/1\")\n// simplify(\"7/10\", \"10/2\")\n// simplify(\"5/7\", \"7/2\")\n// simplify(\"2/1\", \"2/1\")\n// simplify(\"1/7\", \"7/2\")\n// simplify(\"1/3\", \"3/2\")\n// simplify(\"1/4\", \"4/2\")\n// simplify(\"3/4\", \"2/1\")\n// simplify(\"4/2\", \"2/1\")\n// simplify(\"1/2\", \"2/1\")\n// simplify(\"2/2\", \"2/1\")\n// simplify(\"3/3\", \"3/1\")\n// simplify(\"4/4\", \"4/1\")\n// simplify(\"5/5\", \"5/1\")\n// simplify(\"6/6\", \"6/1\")\n// simplify(\"7/7\", \"7/1\")\n// simplify(\"1/4\", \"4/3\")\n// simplify(\"3/4\", \"4/3\")\n// simplify(\"5/6\", \"6/3\")\n// simplify(\"2/3\", \"3/2\")\n// simplify(\"2/6\", \"6/3\")\n// simplify(\"2/5\", \"5/3\")\n// simplify(\"4/5\", \"5/3\")\n// simplify(\"6/5\", \"5/3\")\n// simplify(\"2/4\", \"4/3\")\n// simplify(\"2/5\", \"5/3\")\n// simplify(\"4/6\", \"6/3\")\n// simplify(\"1/2\", \"2/3\")\n// simplify(\"1/3\", \"3/4\")\n// simplify(\"1/5\", \"5/6\")\n// simplify(\"1/6\", \"6/7\")\n// simplify(\"1/7\", \"7/8\")\n// simplify(\"1/8\", \"8/9\")\n// simplify(\"1/9\", \"9/10\")\n// simplify(\"1/10\", \"10/11\")\n// simplify(\"1/11\", \"11/12\")\n// simplify(\"1/12\", \"12/13\")\n// simplify(\"1/13\", \"13/14\")\n// simplify(\"1/14\", \"14/15\")\n// simplify(\"1/15\", \"15/16\")\n// simplify(\"1/16\", \"16/17\")\n// simplify(\"1/17\", \"17/18\")\n// simplify(\"1/18\", \"18/19\")\n// simplify(\"1/19\", \"19/20\")\n// simplify(\"1/20\", \"20/21\")\n// simplify(\"1/21\", \"21/22\")\n// simplify(\"1/22\", \"22/23\")\n// simplify(\"1/23\", \"23/24\")\n// simplify(\"1/24\", \"24/25\")\n// simplify(\"1/25\", \"25/26\")\n// simplify(\"1/26\", \"26/27\")\n// simplify(\"1/27\", \"27/28\")\n// simplify(\"1/28\", \"28/29\")\n// simplify(\"1/29\", \"29/30\")\n// simplify(\"1/30\", \"30/31\")\n// simplify(\"1/31\", \"31/32\")\n// simplify(\"1/32\", \"32/33\")\n// simplify(\"1/33\", \"33/34\")\n// simplify(\"1/34\", \"34/35\")\n// simplify(\"1/35\", \"35/36\")\n// simplify(\"1/36\", \"36/37\")\n// simplify(\"1/37\", \"37/38\")\n// simplify(\"1/38\", \"38/39\")\n// simplify(\"1/39\", \"39/40\")\n// simplify(\"1/40\", \"40/41\")\n// simplify(\"1/41\", \"41/42\")\n// simplify(\"1/42\", \"42/43\")\n// simplify(\"1/43\", \"43/44\")\n// simplify(\"1/44\", \"44/45\")\n// simplify(\"1/45\", \"45/46\")\n// simplify(\"1/46\", \"46/47\")\n// simplify(\"1/47\", \"47/48\")\n// simplify(\"1/48\", \"48/49\")\n// simplify(\"1/49\", \"49/50\")\n// simplify(\"1/50\", \"50/51\")\n// simplify(\"1/51\", \"51/52\")\n// simplify(\"1/52\", \"52/53\")\n// simplify(\"1/53\", \"53/54\")\n// simplify(\"1/54\", \"54/55\")\n// simplify(\"1/55\", \"55/56\")\n// simplify(\"1/56\", \"56/57\")\n// simplify(\"1/57\", \"57/58\")\n// simplify(\"1/58\", \"58/59\")\n// simplify(\"1/59\", \"59/60\")\n// simplify(\"1/60\", \"60/61\")\n// simplify(\"1/61\", \"61/62\")\n// simplify(\"1/62\", \"62/63\")\n// simplify(\"1/63\", \"63/64\")\n// simplify(\"1/64\", \"64/65\")\n// simplify(\"1/65\", \"65/66\")\n// simplify(\"1/66\", \"66/67\")\n// simplify(\"1/67\", \"67/68\")\n// simplify(\"1/68\", \"68/69\")\n// simplify(\"1/69\", \"69/70\")\n// simplify(\"1/70\", \"70/71\")\n// simplify(\"1/71\", \"71/72"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  const sorted_list = sort_by(nums, (item) => item.points)\n  return sorted_list\n}\n\n/*\n  Write a function which finds the difference between two\n  numbers a and b. The difference is defined as\n  the absolute value of a minus b.\n\n  For example:\n  >>> difference(1, 5) == 1\n  >>> difference(1, -1) == 1\n  >>> difference(-1, 1) == 1\n  >>> difference(2, 3) == 1\n  >>> difference(-3, -2) == 3\n  */\nconst difference = (a, b) => Math.abs(a - b)\n\n/*\n  Write a function which finds the sum of two given\n  numbers a and b. The sum is defined as a plus b.\n\n  For example:\n  >>> sum(1, 2) == 3\n  >>> sum(-1, 1) == 2\n  >>> sum(1, -1) == 0\n  >>> sum(-3, -2) == 5\n  */\nconst sum = (a, b) => a + b\n\n/*\n  Write a function which finds the product of two given\n  numbers a and b. The product is defined as a times b.\n\n  For example:\n  >>> product(3, 5) == 15\n  >>> product(1, 2) == 2\n  >>> product(3, -1) == 0\n  >>> product(-1, 2) == 0\n  >>> product(3, 0) == 0\n  */\nconst product = (a, b) => a * b\n\n/*\n  Write a function which finds the greatest of two given\n  numbers a and b. The greatest is defined as a if a is greater,\n  otherwise b.\n\n  For example:\n  >>> greatest(5, -1) == 5\n  >>> greatest(2, -1) == 2\n  >>> greatest(5, 1) == 5\n  >>> greatest(1, 3) == 3\n  >>> greatest(1, 1) == 1\n  */\nconst greatest = (a, b) => (a > b)? a : b\n\n/*\n  Write a function which finds the smallest of two given\n  numbers a and b. The smallest is defined as a if a is smaller,\n  otherwise b.\n\n  For example:\n  >>> smallest(5, -1) == -1\n  >>> smallest(2, -1) == 2\n  >>> smallest(5, 1) == 5\n  >>> smallest(1, 3) == 1\n  >>> smallest(1, 1) == 1\n  */\nconst smallest = (a, b) => (a < b)? a : b\n\n/*\n  Write a function which finds the maximum of two given\n  numbers a and b. The maximum is defined as a if a is larger,\n  otherwise b.\n\n  For example:\n  >>> maximum(5, -1) == 5\n  >>> maximum(2, -1) == 2\n  >>> maximum(5, 1) == 5\n  >>> maximum(1, 3) == 3\n  >>> maximum(1, 1) == 1\n  */\nconst maximum = (a, b) => (a > b)? a : b\n\n/*\n  Write a function which finds the minimum of two given\n  numbers a and b. The minimum is defined as a if a is smaller,\n  otherwise b.\n\n  For example:\n  >>> minimum(5, -1) == -1\n  >>> minimum(2, -1) == 2\n  >>> minimum(5, 1) == 5\n  >>> minimum(1, 3) == 1\n  >>> minimum(1, 1) == 1\n  */\nconst minimum = (a, b) => (a < b)? a : b\n\n/*\n  Write a function which finds the average of two given\n  numbers a and b. The average is defined as a plus b\n  divided by two.\n\n  For example:\n  >>> average(1, 2) == 1\n  >>> average(3, 2) == 4\n  >>> average(2, 3) == 1\n  >>> average(1, 3) == 2\n  >>> average(2, 3) == 2\n  >>> average(1, 1) == 1\n  */\nconst average = (a, b) => (a + b) / 2\n\n/*\n  Write a function which finds the median of a given\n  list of numbers. The median is defined as the middle\n  of the list.\n\n  For example:\n  >>> median([1, 2, 3, 4, 5]) == 3\n  >>> median([1, 2]) == 2\n  >>> median([1, 2, 3, 4, 5, 6]) == 4\n  >>> median([]) == 0\n  */\nconst median = (nums) => {\n  if (nums.length === 0) return 0\n  if (nums.length === 1) return nums[0]\n\n  const middle = Math.floor(nums.length / 2)\n  return (nums[middle] + nums[middle - 1]) / 2\n}\n\n/*\n  Write a function which finds the mode of a given\n  list of numbers. The mode is defined as the item\n  which appears most often in the list.\n\n  For example:\n  >>> mode([1, 2, 3, 4, 5]) == 5\n  >>> mode([1, 2]) == 2\n  >>> mode([1, 2, 3, 4, 5, 6]) == 5\n  >>> mode([]) == 0\n  */\nconst mode = (nums) => {\n  const max_counter = {}\n  const max_index = 0\n\n  nums.forEach((item, index) => {\n    if (max_counter[item] === undefined) {\n      max_counter[item] = 1\n    } else {\n      max_counter[item]++\n    }\n\n    if (max_counter[item] > max_counter[max_index]) {\n      max_index = index\n    }\n  })\n\n  return nums[max_index]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  const filtered_nums = nums.filter(e => e > 10 && e % 2 === 1)\n  const filtered_nums_last_digit = filtered_nums.map(e => e % 10)\n  const filtered_nums_first_digit = filtered_nums.map(e => e / 10)\n  return filtered_nums_last_digit.length === 1 &&\n    filtered_nums_first_digit.length === 1 &&\n    filtered_nums_last_digit[0] === 1 &&\n    filtered_nums_first_digit[0] === 3 ||\n    filtered_nums_last_digit[0] === 5 &&\n    filtered_nums_first_digit[0] === 7 ||\n    filtered_nums_last_digit[0] === 9 &&\n    filtered_nums_first_digit[0] === 9\n}\n\nconsole.log(special_filter([15, -73, 14, -15]))\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]))\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const d = new Map();\n  const a = new Array(n);\n  for (let i = 1; i <= n; i++) {\n    a[i - 1] = i * i - i + 1;\n    d.set(i, d.get(i) || 0);\n    d.set(a[i - 1], d.get(a[i - 1]) || 0);\n    d.set(a[i - 1] + a[i - 2], d.get(a[i - 1] + a[i - 2]) || 0);\n  }\n  return d.values().reduce((a, b) => a + b, 0);\n};\n\nconst get_max_triples_2 = (n) => {\n  const d = new Map();\n  const a = new Array(n);\n  for (let i = 1; i <= n; i++) {\n    a[i - 1] = i * i - i + 1;\n    d.set(i, d.get(i) || 0);\n    d.set(a[i - 1], d.get(a[i - 1]) || 0);\n    d.set(a[i - 1] + a[i - 2], d.get(a[i - 1] + a[i - 2]) || 0);\n  }\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = a[i] + a[j] + a[k];\n        if (sum % 3 === 0) {\n          res.push([i, j, k]);\n        }\n      }\n    }\n  }\n  return res.length;\n};\n\nconst get_max_triples_3 = (n) => {\n  const d = new Map();\n  const a = new Array(n);\n  for (let i = 1; i <= n; i++) {\n    a[i - 1] = i * i - i + 1;\n    d.set(i, d.get(i) || 0);\n    d.set(a[i - 1], d.get(a[i - 1]) || 0);\n    d.set(a[i - 1] + a[i - 2], d.get(a[i - 1] + a[i - 2]) || 0);\n    d.set(a[i - 1] + a[i - 2] + a[i - 3], d.get(a[i - 1] + a[i - 2] + a[i - 3]) || 0);\n  }\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = a[i] + a[j] + a[k];\n        if (sum % 3 === 0) {\n          res.push([i, j, k]);\n        }\n      }\n    }\n  }\n  return res.length;\n};\n\nconst get_max_triples = (n) => {\n  const d = new Map();\n  const a = new Array(n);\n  for (let i = 1; i <= n; i++) {\n    a[i - 1] = i * i - i + 1;\n    d.set(i, d.get(i) || 0);\n    d.set(a[i - 1], d.get(a[i - 1]) || 0);\n    d.set(a[i - 1] + a[i - 2], d.get(a[i - 1] + a[i - 2]) || 0);\n    d.set(a[i - 1] + a[i - 2] + a[i - 3], d.get(a[i - 1] + a[i - 2] + a[i - 3]) || 0);\n    d.set(a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4], d.get(a[i - 1] + a[i - 2] + a[i - 3] + a[i - 4]) || 0);\n  }\n  const res = [];\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = a[i] + a[j] + a[k];\n        if (sum % 3 === 0) {\n          res.push([i, j, k]);\n        }\n      }\n    }\n  }\n  return res.length;\n};\n\nconst main = () => {\n  let res = 0;\n  res = get_max_triples(10);\n  console.log(res);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let arr = [],\n    arr1 = [],\n    arr2 = [];\n  for (let i = 0; i < 8; i++) {\n    arr1 = [];\n    arr2 = [];\n    arr = [];\n    for (let j = 0; j < 8; j++) {\n      if (j!= i) {\n        arr1.push(j);\n      }\n      arr2.push(j);\n      arr.push(j);\n    }\n    arr = arr1.concat(arr2, arr);\n  }\n  arr.sort((a, b) => {\n    let delta = Math.abs(a - b);\n    return delta;\n  });\n  return arr;\n};\n\n// console.log(bf(\"Jupiter\", \"Neptune\")); // (\"Saturn\", \"Uranus\")\n// console.log(bf(\"Earth\", \"Mercury\")); // (\"Venus\")\n// console.log(bf(\"Mercury\", \"Uranus\")); // (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  const list = Array.isArray(lst)? lst : lst.split(\"\").filter(l => l).sort();\n  const res = [];\n  let sum = 0;\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i].length;\n    if (sum % 2!== 0) {\n      res.push(list.splice(i, 1)[0]);\n    }\n  }\n  return res.join(\"\");\n};\n\nconst list_sort = (lst) => {\n  const list = Array.isArray(lst)? lst : lst.split(\"\").filter(l => l).sort();\n  const res = [];\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.splice(i, 1)[0]);\n  }\n  return res.join(\"\");\n};\n\nconst list_sort_2 = (lst) => {\n  const list = Array.isArray(lst)? lst : lst.split(\"\").filter(l => l).sort();\n  const res = [];\n  for (let i = 0; i < list.length; i++) {\n    res.push(list.splice(i, 1)[0]);\n  }\n  return res.join(\"\");\n};\n\nconsole.log(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(list_sort([\"aa\", \"a\", \"aaa\"]));\nconsole.log(list_sort_2([\"aa\", \"a\", \"aaa\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n}\n\nconsole.log(x_or_y(3, 7, 8));\nconsole.log(x_or_y(17, 3, 7));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (!lst.length) {\n    return 0;\n  }\n  return lst.reduce((sum, n) => {\n    if (n % 2) {\n      return sum + n * n;\n    }\n    return sum;\n  }, 0);\n};\n\nmodule.exports = double_the_difference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare1 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare2 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare3 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare4 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare5 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare6 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare7 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare8 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare9 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare10 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare11 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map(n => n);\n  let diff = game.length - guess.length;\n  \n  let isCorrect = game.every(n => n === guess[n]);\n  let diffScore = score.every(n => n === guess[n]);\n  \n  return [diffScore, diff, isCorrect];\n};\n\nconst compare12 = (game, guess) => {\n  let score = game.map(n => n);\n  let guess = guess.map("}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n    const strength = new Map();\n    for (const extension of extensions) {\n        const [letter1, letter2] = extension.split('.');\n        const [letter1_cap, letter2_cap] = letter1.toUpperCase().split('');\n        const letter1_strength = letter1_cap.length - letter2_cap.length;\n        const letter2_strength = -1;\n        strength.set(extension, strength.get(extension) + letter1_strength + letter2_strength);\n    }\n    return strongest(strength, extensions);\n}\n\nmodule.exports = strongest_extension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n    const i = a.indexOf(b);\n    return (i >= 0) || (i >= a.length - b.length);\n};\n\nconst cycpattern = (a, b) => {\n    let i = a.indexOf(b);\n    while(i >= 0){\n        let str = a.substring(0, i) + b + a.substring(i + b.length);\n        if(cycpattern_check(str, b)){\n            return str;\n        }\n        i = a.indexOf(b, i + 1);\n    }\n    return false;\n};\n\nconsole.log(cycpattern(\"himenss\", \"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let odd_digit_count = 0;\n  let even_digit_count = 0;\n\n  while (num) {\n    const digit = num % 10;\n    num = Math.floor(num / 10);\n\n    if (digit % 2) {\n      odd_digit_count++;\n    } else {\n      even_digit_count++;\n    }\n  }\n\n  return [odd_digit_count, even_digit_count];\n};\n\nexport default even_odd_count;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  let res = '';\n  for (let i = 1; i <= number; i++) {\n    res += this.int_to_roman(i);\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  if (a === b && b === c) {\n    return true;\n  }\n  const s1 = Math.sqrt(a * a + b * b);\n  const s2 = Math.sqrt(c * c + b * b);\n  const s3 = Math.sqrt(a * a + c * c);\n  return Math.abs(s1 + s2 - s3) === 0;\n};\n\n/*\n Given a triangle, return the area.\n  If there are multiple solutions, return the area of the smallest triangle.\n  The area of a triangle is half the height of the triangle.\n  Example:\n  area_of_triangle(1, 2, 3) == 6\n  area_of_triangle(1, 3, 2) == 6\n  area_of_triangle(2, 3, 4) == 12\n  area_of_triangle(1, 2, 5) == 15\n  */\nconst area_of_triangle = (a, b, c) => {\n  return (Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(a, 2)) / 2;\n};\n\nconst triangle = (a, b, c) => {\n  if (right_angle_triangle(a, b, c)) {\n    return area_of_triangle(a, b, c);\n  }\n  else {\n    const sides = [a, b, c];\n    const minimum = Math.min(sides);\n    const maximum = Math.max(sides);\n    return triangle(minimum, maximum, maximum - minimum);\n  }\n};\n\nconst test = (a, b, c) => {\n  console.log(`Triangle: a = ${a}, b = ${b}, c = ${c}`);\n  console.log(`Triangle: ${triangle(a, b, c)}`);\n};\n\ntest(1, 2, 3);\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const max_length = words[0].length;\n  let counter = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max_length) {\n      max_length = words[i].length;\n      counter = 1;\n    } else if (words[i].length == max_length) {\n      counter++;\n    }\n  }\n  let result = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (counter > 0 && words[i].length > max_length) {\n      result = words[i];\n      counter = 1;\n    } else if (words[i].length == max_length) {\n      counter++;\n    }\n  }\n  return result;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Return the word with minimum number\n  of unique characters. If multiple strings have minimum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_min([\"name\", \"of\", \"string\"]) === \"name\"\n  find_min([\"name\", \"enam\", \"game\"]) === \"name\"\n  find_min([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst find_min = (words) => {\n  const min_length = words[0].length;\n  let counter = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length < min_length) {\n      min_length = words[i].length;\n      counter = 1;\n    } else if (words[i].length == min_length) {\n      counter++;\n    }\n  }\n  let result = words[0];\n  for (let i = 1; i < words.length; i++) {\n    if (counter > 0 && words[i].length < min_length) {\n      result = words[i];\n      counter = 1;\n    } else if (words[i].length == min_length) {\n      counter++;\n    }\n  }\n  return result;\n};\n\nconst test = [\n  [\"name\", \"of\", \"string\"],\n  [\"name\", \"enam\", \"game\"],\n  [\"aaaaaaa\", \"bb\", \"cc\"]\n];\n\nconsole.log(find_max(test));\n\nconst test2 = [\n  [\"name\", \"of\", \"string\"],\n  [\"name\", \"enam\", \"game\"],\n  [\"aaaaaaa\", \"bb\", \"cc\"]\n];\n\nconsole.log(find_min(test2));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number > need) {\n        return [need, remaining];\n    }\n    return [number, remaining];\n};\n\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  let index_operator = 0\n  let index_operand = 0\n  let result = []\n  let result_operator = []\n  let result_operand = []\n\n  while (index_operator < operator.length && index_operand < operand.length) {\n    result.push(operator[index_operator])\n    result_operator.push(operator[index_operator])\n    result_operand.push(operand[index_operand])\n    index_operator++\n    index_operand++\n  }\n\n  while (index_operator < operator.length) {\n    result.push(operator[index_operator])\n    result_operator.push(operator[index_operator])\n    index_operator++\n  }\n\n  while (index_operand < operand.length) {\n    result.push(operand[index_operand])\n    result_operand.push(operand[index_operand])\n    index_operand++\n  }\n\n  while (index_operand < operand.length) {\n    result.push(operand[index_operand])\n    result_operand.push(operand[index_operand])\n    index_operand++\n  }\n\n  let length_result = result.length\n  let length_result_operator = result_operator.length\n  let length_result_operand = result_operand.length\n\n  while (length_result_operator > 0) {\n    let sum = result_operator[length_result_operand - 1]\n    let power = result_operand[length_result_operand - 1]\n    let operator_power = length_result_operand - 1\n    let operator_sum = result_operator[length_result_operand - 1]\n    while (power > 0) {\n      let power_sum = power + sum\n      result.push(power_sum)\n      result_operand.push(power_sum)\n      length_result++\n      length_result_operand--\n      power--\n    }\n    length_result_operator--\n    length_result_operand--\n  }\n\n  return result\n}\n\nconsole.log(do_algebra(['+', '*', '-'], [2, 3, 4, 5]))\n\n// ===\n\nconst do_algebra2 = (operator, operand) => {\n  let result = []\n  let index_operator = 0\n  let index_operand = 0\n  while (index_operator < operator.length && index_operand < operand.length) {\n    let operator_value = operator[index_operator]\n    let operand_value = operand[index_operand]\n    if (operator_value === '+') {\n      result.push(operand_value)\n    } else if (operator_value === '-') {\n      result.push(operand_value)\n    } else if (operator_value === '*') {\n      let product = operand_value * operand_value\n      result.push(product)\n    } else if (operator_value === '/') {\n      let dividend = operand_value\n      let divisor = operand_value\n      let result_dividend = 0\n      let result_divisor = 0\n      while (result_dividend <= dividend) {\n        result_dividend = result_dividend + 1\n      }\n      while (result_divisor <= divisor) {\n        result_divisor = result_divisor + 1\n      }\n      result.push(result_dividend)\n      result.push(result_divisor)\n    } else if (operator_value === '**') {\n      let power = operand_value\n      let result_power = 0\n      while (result_power <= power) {\n        result_power = result_power + 1\n      }\n      result.push(result_power)\n    }\n    index_operator++\n    index_operand++\n  }\n  return result\n}\n\nconsole.log(do_algebra2(['+', '*', '-'], [2, 3, 4, 5]))\n\n// ===\n\nconst do_algebra3 = (operator, operand) => {\n  let result = []\n  let index_operator = 0\n  let index_operand = 0\n  while (index_operator < operator.length && index_operand < operand.length) {\n    let operator_value = operator[index_operator]\n    let operand_value = operand[index_operand]\n    if (operator_value === '+') {\n      result.push(operand_value)\n    } else if (operator_value === '-') {\n      result.push(operand_value)\n    } else if (operator_value === '*') {\n      let product = operand_value * operand_value\n      result.push(product)\n    } else if (operator_value === '/') {\n      let dividend = operand_value\n      let divisor = operand_value\n      let result_dividend = 0\n      let result_divisor = 0\n      while (result_dividend <= dividend) {\n        result_dividend = result_dividend + 1\n      }\n      while (result_divisor <= divisor) {\n        result_divisor = result_divisor + 1\n      }\n      result.push(result_dividend)\n      result.push(result_divisor)\n    } else if (operator_value === '**') {"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const charMap = {\n    'a': 'A',\n    'b': 'B',\n    'c': 'C',\n    'd': 'D',\n    'e': 'E',\n    'f': 'F',\n    'g': 'G',\n    'h': 'H',\n    'i': 'I',\n    'j': 'J',\n    'k': 'K',\n    'l': 'L',\n   'm': 'M',\n    'n': 'N',\n    'o': 'O',\n    'p': 'P',\n    'q': 'Q',\n    'r': 'R',\n   's': 'S',\n    't': 'T',\n    'u': 'U',\n    'v': 'V',\n    'w': 'W',\n    'x': 'X',\n    'y': 'Y',\n    'z': 'Z'\n  }\n  let newStr = ''\n  for (let i = 0; i < s.length; i++) {\n    if (charMap[s.charAt(i)]) {\n      newStr += charMap[s.charAt(i)]\n    } else {\n      newStr += s.charAt(i)\n    }\n  }\n  return newStr\n}\n\nconsole.log(solve('1234'))\nconsole.log(solve('ab'))\nconsole.log(solve('#a@C'))<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n  return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n};\n\nexport default string_to_md5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const start = a\n  const end = b\n  const result = []\n  for (let i = start; i <= end; i += 2) {\n    result.push(i)\n  }\n  return result\n}\n\nconst generate_even_integers = (a, b) => {\n  const start = a\n  const end = b\n  const result = []\n  for (let i = start; i <= end; i += 2) {\n    if (i % 2 === 0) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nconst generate_odd_integers = (a, b) => {\n  const start = a\n  const end = b\n  const result = []\n  for (let i = start; i <= end; i += 2) {\n    if (i % 2!== 0) {\n      result.push(i)\n    }\n  }\n  return result\n}\n\nexport default {\n  generate_integers,\n  generate_even_integers,\n  generate_odd_integers\n}\n<|endoftext|>"}
