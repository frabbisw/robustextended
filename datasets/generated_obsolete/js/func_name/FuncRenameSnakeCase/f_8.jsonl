{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const close = (a, b) => Math.abs(a - b) < threshold;\n  return numbers.every(close);\n};\n\n// Generate random elements and check if they are close enough.\nconst generate_and_check = (generator, threshold) => {\n  const close = (a, b) => Math.abs(a - b) < threshold;\n  const numbers = [...new Array(100)].map(generator);\n  return numbers.every(close);\n};\n\nmodule.exports = {\n  generate_and_check,\n  has_close_elements,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const paren_list = paren_string.split('').filter(s => s!=='');\n  const group_list = [];\n  const stack = [];\n  for (let i = 0; i < paren_list.length; i++) {\n    const paren = paren_list[i];\n    if (paren === '(') {\n      stack.push(paren);\n    } else if (paren === ')') {\n      const group = stack.pop();\n      if (group!== '(') {\n        group_list.push(group);\n      }\n    }\n  }\n  return group_list;\n};\n\nexport default separate_paren_groups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const float_number = parseFloat(number);\n  const int_number = Math.floor(float_number);\n  const dec_number = float_number - int_number;\n\n  return dec_number;\n};\n\nexport { truncate_number };\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n    let sum = 0;\n    for (let i = 0; i < operations.length; i++) {\n        sum += operations[i];\n    }\n    return sum < 0;\n};\n\n/*\n  Given a list of operations, return true if the sum of all the operations is 0, false otherwise.\n  >>> sum_is_zero([1, 2, 3])\n  false\n  >>> sum_is_zero([1, 2, -4, 5])\n  true\n  */\nconst sum_is_zero = (operations) => {\n    let sum = 0;\n    for (let i = 0; i < operations.length; i++) {\n        sum += operations[i];\n    }\n    return sum === 0;\n};\n\nmodule.exports = {\n    below_zero,\n    sum_is_zero\n};<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  return (numbers.reduce((acc, number) => {\n    const difference = number - acc.mean;\n    return acc.mean + difference;\n  }, {\n    mean: numbers[0],\n  })) / (numbers.length - 1);\n};\n\n/**\n  Calculate the Standard Deviation of a given list of input numbers.\n  Standard Deviation is the square root of the sum of the squares of the\n  deviations from the mean:\n  >>> standard_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst standard_deviation = (numbers) => {\n  return Math.sqrt(\n    numbers.reduce((acc, number) => {\n      const difference = number - acc.mean;\n      return acc.mean + difference * difference;\n    }, 0) / (numbers.length - 1)\n  );\n};\n\n/**\n  Calculate the Variance of a given list of input numbers.\n  Variance is the sum of the squares of the deviations from the mean:\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst variance = (numbers) => {\n  return numbers.reduce((acc, number) => {\n    const difference = number - acc.mean;\n    return acc.mean + difference * difference;\n  }, 0) / (numbers.length - 1);\n};\n\n/**\n  Calculate the Maximum Absolute Deviation of a given list of input numbers.\n  The Max Absolute Deviation is the maximum absolute difference between any\n  two elements in the list.\n  >>> max_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  4.0\n  */\nconst max_absolute_deviation = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Standard Deviation of a given list of input numbers.\n  The Max Standard Deviation is the largest standard deviation of any two\n  elements in the list.\n  >>> max_standard_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst max_standard_deviation = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Variance of a given list of input numbers.\n  The Max Variance is the largest variance of any two elements in the list.\n  >>> max_variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst max_variance = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Mean Absolute Deviation of a given list of input\n  numbers.\n  The Max Mean Absolute Deviation is the largest mean absolute difference\n  between any two elements in the list.\n  >>> max_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  4.0\n  */\nconst max_mean_absolute_deviation = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Standard Deviation of a given list of input numbers.\n  The Max Standard Deviation is the largest standard deviation of any two\n  elements in the list.\n  >>> max_standard_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst max_standard_deviation = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Variance of a given list of input numbers.\n  The Max Variance is the largest variance of any two elements in the list.\n  >>> max_variance([1.0, 2.0, 3.0, 4.0])\n  3.0\n  */\nconst max_variance = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Mean Absolute Deviation of a given list of input\n  numbers.\n  The Max Mean Absolute Deviation is the largest mean absolute difference\n  between any two elements in the list.\n  >>> max_mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  4.0\n  */\nconst max_mean_absolute_deviation = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Standard Deviation of a given list of input numbers.\n  The Max Standard Deviation is the largest standard deviation of any two\n  elements in the list.\n  >>> max_standard_deviation([1.0, 2.0, 3.0, 4.0])\n  2.0\n  */\nconst max_standard_deviation = (numbers) => {\n  const max = Math.max.apply(Math, numbers);\n  return Math.max(...numbers.map(number => Math.abs(max - number)));\n};\n\n/**\n  Calculate the Maximum Variance"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  const intersperse_func = intersperse_func_gen(numbers, delimeter);\n  return intersperse_func();\n};\n\nexport default intersperse;\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  paren_string = paren_string.replace(/\\s/g, '');\n  let parenthesis_level = [0, 0];\n  let level = 0;\n  let depth = 0;\n  let new_depth = 0;\n  let new_paren_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === ')') {\n      new_depth = 0;\n    } else if (paren_string[i] === '(') {\n      new_depth = depth + 1;\n    }\n    if (paren_string[i] === '(') {\n      if (parenthesis_level[level] === 0) {\n        level++;\n        parenthesis_level[level] = 1;\n      }\n    } else if (paren_string[i] === ')') {\n      new_depth = 0;\n      parenthesis_level[level]--;\n      if (parenthesis_level[level] === 0) {\n        level--;\n      }\n    }\n    if (new_depth === depth) {\n      depth = new_depth;\n    }\n    if (new_depth === 1) {\n      new_paren_string = new_paren_string + paren_string[i];\n    }\n  }\n  return parse_nested_parens(new_paren_string);\n};\n\n/*\n  Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n  The string to be parsed should contain balanced parenthesis.\n\n  >>> parse_nested_parens_balanced('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens_balanced = (paren_string) => {\n  paren_string = paren_string.replace(/\\s/g, '');\n  let parenthesis_level = [0, 0];\n  let level = 0;\n  let depth = 0;\n  let new_depth = 0;\n  let new_paren_string = '';\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === ')') {\n      new_depth = 0;\n    } else if (paren_string[i] === '(') {\n      new_depth = depth + 1;\n    }\n    if (paren_string[i] === '(') {\n      if (parenthesis_level[level] === 0) {\n        level++;\n        parenthesis_level[level] = 1;\n      }\n    } else if (paren_string[i] === ')') {\n      new_depth = 0;\n      parenthesis_level[level]--;\n      if (parenthesis_level[level] === 0) {\n        level--;\n      }\n    }\n    if (new_depth === depth) {\n      depth = new_depth;\n    }\n    if (new_depth === 1) {\n      new_paren_string = new_paren_string + paren_string[i];\n    }\n  }\n  if (depth!== 0) {\n    return false;\n  }\n  return parse_nested_parens(new_paren_string);\n};\n\nmodule.exports = {\n  parse_nested_parens,\n  parse_nested_parens_balanced\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const is_in_array = (string) => {\n    let index = strings.indexOf(string);\n    if (index === -1) {\n      return false;\n    }\n    let i = index + 1;\n    while (i < strings.length) {\n      if (strings[i] === string) {\n        return true;\n      }\n      i++;\n    }\n    return false;\n  };\n  return strings.filter(is_in_array(substring));\n};\n\n/**\n  * @name filter_by_substring_with_case\n  * @param {string} substring\n  * @param {array} strings\n  * @return {array}\n  * @description Filter an input list of strings only for ones that contain given substring,\n  * but make sure to keep the case of the input strings\n  *\n  * @example\n  * filter_by_substring_with_case([], 'a')\n  * // => []\n  *\n  * filter_by_substring_with_case(['abc', 'bacd', 'cde', 'array'], 'a')\n  * // => ['abc', 'bacd']\n  *\n  * filter_by_substring_with_case(['abc', 'bacd', 'cde', 'array'], 'b')\n  * // => ['abc', 'bacd', 'cde']\n  */\nconst filter_by_substring_with_case = (strings, substring) => {\n  const is_in_array = (string) => {\n    let index = strings.indexOf(string);\n    if (index === -1) {\n      return false;\n    }\n    let i = index + 1;\n    while (i < strings.length) {\n      if (strings[i].toLowerCase() === string.toLowerCase()) {\n        return true;\n      }\n      i++;\n    }\n    return false;\n  };\n  return strings.filter(is_in_array(substring));\n};\n\n/**\n  * @name filter_by_substring_with_case_with_length\n  * @param {string} substring\n  * @param {array} strings\n  * @param {number} [max_length=Infinity]\n  * @return {array}\n  * @description Filter an input list of strings only for ones that contain given substring,\n  * but make sure to keep the case of the input strings\n  *\n  * @example\n  * filter_by_substring_with_case_with_length(['', 'abc', 'bacd', 'cde', 'array'], 'a')\n  * // => ['abc', 'bacd']\n  *\n  * filter_by_substring_with_case_with_length(['', 'abc', 'bacd', 'cde', 'array'], 'b')\n  * // => ['abc', 'bacd', 'cde']\n  */\nconst filter_by_substring_with_case_with_length = (strings, substring, max_length = Infinity) => {\n  const is_in_array = (string) => {\n    let index = strings.indexOf(string);\n    if (index === -1) {\n      return false;\n    }\n    let i = index + 1;\n    while (i < strings.length) {\n      if (strings[i].length <= max_length) {\n        if (strings[i].toLowerCase() === string.toLowerCase()) {\n          return true;\n        }\n      }\n      i++;\n    }\n    return false;\n  };\n  return strings.filter(is_in_array(substring));\n};\n\nmodule.exports = {\n  filter_by_substring,\n  filter_by_substring_with_case,\n  filter_by_substring_with_case_with_length\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Given a string, return the maximum possible length of a substring that contains\n  all the same characters.\n\n  >>> length_of_longest_substring(\"abc\")\n  3\n  >>> length_of_longest_substring(\"abcd\")\n  4\n  >>> length_of_longest_substring(\"cddd\")\n  3\n  >>> length_of_longest_substring(\"cccc\")\n  4\n  >>> length_of_longest_substring(\"c\")\n  1\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"a\")\n  1\n  >>> length_of_longest_substring(\"aaa\")\n  3\n  >>> length_of_longest_substring(\"aaaa\")\n  4\n  >>> length_of_longest_substring(\"abcdefg\")\n  7\n  >>> length_of_longest_substring(\"ab\")\n  2\n  >>> length_of_longest_substring(\"cc\")\n  2\n  >>> length_of_longest_substring(\"abcdef\")\n  6\n  >>> length_of_longest_substring(\"abcdefgh\")\n  8\n  >>> length_of_longest_substring(\"abcdefg\")\n  6\n  >>> length_of_longest_substring(\"abcd\")\n  4\n  >>> length_of_longest_substring(\"abbc\")\n  3\n  >>> length_of_longest_substring(\"aa\")\n  1\n  >>> length_of_longest_substring(\"abb\")\n  2\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest_substring(\"\")\n  0\n  >>> length_of_longest"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const max = numbers.reduce((max, number) => Math.max(max, number), 0);\n  let current = 0;\n  let max_index = 0;\n  let rolling = [];\n  const max_rolling = (current, max_index) => {\n    rolling.push(current);\n    current = numbers[current];\n    max_index = max_index + 1;\n  };\n  for (let i = 0; i < numbers.length - 1; i++) {\n    rolling_max_helper(numbers, current, max_index, rolling, max);\n  }\n  return rolling;\n};\n\n/*\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 1)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 2)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 3)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 4)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 5)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 6)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 7)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 8)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 9)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 10)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 11)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 12)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 13)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 14)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 15)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 16)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 17)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 18)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 19)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 20)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 21)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 22)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 23)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 24)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 25)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 26)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 27)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_helper([1, 2, 3, 2, 3, 4, 2], 0, 28)\n  [1, 2, 3, 3, 3, 4, 4]\n  >>> rolling_max_hel"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let palindrome = '';\n  while (string.length > 0) {\n    let suffix = string.slice(string.length - 1);\n    if (is_palindrome(suffix)) {\n      palindrome = string + suffix;\n      string = string.slice(0, string.length - 1);\n    } else {\n      break;\n    }\n  }\n  return palindrome;\n}\n\n/*\n  Given a string, write a method that returns whether it is a\n  palindrome or not.\n\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('race')\n  false\n  >>> isPalindrome('babab')\n  true\n  >>> isPalindrome('abab')\n  false\n  */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/*\n  Given a string, write a method that returns the length of the\n  string.\n\n  >>> length('cat')\n  3\n  >>> length('race')\n  4\n  >>> length('babab')\n  5\n  >>> length('abab')\n  4\n  */\nconst length = (string) => {\n  return string.length;\n}\n\n/*\n  Given a string, write a method that returns the number of times\n  it occurs in the string.\n\n  >>> count('cat')\n  2\n  >>> count('race')\n  3\n  >>> count('babab')\n  4\n  >>> count('abab')\n  2\n  */\nconst count = (string) => {\n  return string.split('').length;\n}\n\n/*\n  Given a string, write a method that returns the index of the first\n  occurrence of a given substring in the string.\n\n  >>> indexOf('cat', 'at')\n  2\n  >>> indexOf('race', 'a')\n  4\n  >>> indexOf('babab', 'ab')\n  1\n  >>> indexOf('abab', 'ab')\n  1\n  */\nconst indexOf = (string, substring) => {\n  return string.indexOf(substring);\n}\n\n/*\n  Given a string, write a method that returns the last index of the\n  given substring in the string.\n\n  >>> lastIndexOf('cat', 'at')\n  3\n  >>> lastIndexOf('race', 'a')\n  4\n  >>> lastIndexOf('babab', 'ab')\n  1\n  >>> lastIndexOf('abab', 'ab')\n  1\n  */\nconst lastIndexOf = (string, substring) => {\n  return string.lastIndexOf(substring);\n}\n\n/*\n  Given a string, write a method that returns the index of the first\n  occurrence of a given substring in the string, or -1 if the string\n  does not contain the given substring.\n\n  >>> indexOf('cat', 'bob')\n  -1\n  >>> indexOf('race', 'ab')\n  -1\n  >>> indexOf('babab', 'ab')\n  1\n  >>> indexOf('abab', 'ab')\n  1\n  */\nconst indexOf = (string, substring) => {\n  return string.indexOf(substring);\n}\n\n/*\n  Given a string, write a method that returns the index of the last\n  occurrence of a given substring in the string, or -1 if the string\n  does not contain the given substring.\n\n  >>> lastIndexOf('cat', 'bob')\n  -1\n  >>> lastIndexOf('race', 'ab')\n  -1\n  >>> lastIndexOf('babab', 'ab')\n  1\n  >>> lastIndexOf('abab', 'ab')\n  1\n  */\nconst lastIndexOf = (string, substring) => {\n  return string.lastIndexOf(substring);\n}\n\n/*\n  Given a string, write a method that returns the index of the first\n  occurrence of the substring with the maximum length in the string,\n  or -1 if the string does not contain the given substring.\n\n  >>> lastIndexOf('cat', 'ab')\n  -1\n  >>> lastIndexOf('race', 'ab')\n  -1\n  >>> lastIndexOf('babab', 'ab')\n  2\n  >>> lastIndexOf('abab', 'ab')\n  2\n  */\nconst lastIndexOf = (string, substring) => {\n  let max = 0;\n  let index = -1;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) == substring.charAt(0)) {\n      let len = 1;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j)!= substring.charAt(j)) {\n          break;\n        } else {\n          len++;\n        }\n      }\n      if (len > max) {\n        max = len;\n        index = i;\n      }\n    }\n  }\n  return index;\n}\n\n/*\n  Given a string, write a method that returns the index of the first\n  occurrence of the substring with the minimum length in the string,\n  or -1 if the string does not contain the given substring.\n\n  >>> lastIndexOf('cat', 'ab')\n  -1\n  >>> lastIndexOf('race', 'ab')\n  -1\n  >>> lastIndexOf('babab', 'ab')\n  0\n  >>> lastIndexOf('abab', 'ab')\n  0\n  */\nconst lastIndexOf = (string, substring) => {\n  let min = -1;\n  let index = -1;\n"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  const len_a = a.length\n  const len_b = b.length\n  const xor = []\n\n  for (let i = 0; i < len_a; i++) {\n    xor.push(a[i] ^ b[i])\n  }\n\n  return xor.join('')\n}\n\nconst string_to_binary = (a) => {\n  const binary = []\n  const len_a = a.length\n  for (let i = 0; i < len_a; i++) {\n    binary.push(a[i])\n  }\n\n  return binary.join('')\n}\n\n/*\n  Input is two strings a and b consisting only of 1s and 0s.\n  Perform binary AND on these inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '010'\n  */\nconst string_and = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  const len_a = a.length\n  const len_b = b.length\n  const and = []\n\n  for (let i = 0; i < len_a; i++) {\n    and.push(a[i] & b[i])\n  }\n\n  return and.join('')\n}\n\nconst string_to_ascii = (str) => {\n  const str_bytes = []\n  for (let i = 0; i < str.length; i++) {\n    str_bytes.push(str.charCodeAt(i))\n  }\n\n  return str_bytes.join('')\n}\n\nconst string_to_binary_with_length = (str, length) => {\n  const binary = []\n  const len_str = str.length\n  for (let i = 0; i < len_str; i++) {\n    binary.push(str.charCodeAt(i))\n  }\n\n  const len_binary = length\n  const len_binary_mod_2 = len_binary % 8\n  const result = []\n\n  for (let i = 0; i < len_binary; i++) {\n    if (i < len_binary_mod_2) {\n      result.push(binary[i])\n    } else {\n      result.push(0)\n    }\n  }\n\n  return result.join('')\n}\n\n/*\n  Input is a string of binary number.\n  Perform binary OR on this inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '110'\n  */\nconst string_or = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  const len_a = a.length\n  const len_b = b.length\n  const or = []\n\n  for (let i = 0; i < len_a; i++) {\n    or.push(a[i] | b[i])\n  }\n\n  return or.join('')\n}\n\n/*\n  Input is a string of binary number.\n  Perform binary XOR on this inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '010'\n  */\nconst string_xor = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  const len_a = a.length\n  const len_b = b.length\n  const xor = []\n\n  for (let i = 0; i < len_a; i++) {\n    xor.push(a[i] ^ b[i])\n  }\n\n  return xor.join('')\n}\n\n/*\n  Input is a string of binary number.\n  Perform binary AND on this inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '010'\n  */\nconst string_and = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  const len_a = a.length\n  const len_b = b.length\n  const and = []\n\n  for (let i = 0; i < len_a; i++) {\n    and.push(a[i] & b[i])\n  }\n\n  return and.join('')\n}\n\n/*\n  Input is a string of binary number.\n  Perform binary NOT on this inputs and return result also as a string.\n  >>> string_not('010')\n  '110'\n  */\nconst string_not = (a) => {\n  const binary = []\n  const len_a = a.length\n  for (let i = 0; i < len_a; i++) {\n    binary.push(~a[i])\n  }\n\n  return binary.join('')\n}\n\n/*\n  Input is a string of binary number.\n  Perform binary AND on this inputs and return result also as a string.\n  >>> string_and('010', '110')\n  '010'\n  */\nconst string_and = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  const len_a = a.length\n  const len_b = b.length\n  const and = []\n\n  for (let i = 0; i < len_a; i++) {\n    and.push(a[i] & b[i])\n  }\n\n  return and.join('')\n}\n\n/*\n  Input is a string of binary number.\n  Perform binary OR on this inputs and return result also as a string.\n  >>> string_or('010', '110')\n  '110'\n  */\nconst string_or = (a, b) => {\n  a = a.split('')\n  b = b.split('')\n  const len_a = a.length\n  const len_b = b.length\n  const or = []\n\n  for (let i = 0; i < len_a; i++) {\n    or.push(a[i] | b"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings || strings.length === 0) {\n    return null;\n  }\n  return strings[0];\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a === 0 || b === 0) return 1;\n  if (a === 1 || b === 1) return a;\n  if (a < 0) {\n    a = -a;\n    if (b < 0) b = -b;\n  }\n  if (b < 0) return greatest_common_divisor(b, a);\n  const s = a % b;\n  if (s === 0) return b;\n  return greatest_common_divisor(a, b - s);\n};\n\n/* Return the gcd of a number and its inverse\n  >>> gcd(7, 4)\n  7\n  >>> gcd(7, -4)\n  -4\n  >>> gcd(4, 7)\n  4\n  >>> gcd(7, 0)\n  7\n  >>> gcd(0, 7)\n  7\n  */\nconst gcd = (a, b) => {\n  if (b === 0) return a;\n  return gcd(b, a % b);\n};\n\n/* Return the least common multiple of a number and its inverse\n  >>> lcm(7, 4)\n  28\n  >>> lcm(7, -4)\n  -28\n  >>> lcm(4, 7)\n  28\n  >>> lcm(7, 0)\n  0\n  >>> lcm(0, 7)\n  7\n  */\nconst lcm = (a, b) => {\n  if (b === 0) return a;\n  return a * b / gcd(a, b);\n};\n\n/* Return the inverse of a number modulo its greatest common divisor\n  >>> inverse(7, 4)\n  -7\n  >>> inverse(7, -4)\n  7\n  >>> inverse(4, 7)\n  -4\n  >>> inverse(7, 0)\n  0\n  >>> inverse(0, 7)\n  7\n  */\nconst inverse = (a, b) => {\n  return lcm(a, b) / greatest_common_divisor(a, b);\n};\n\n/* Return the product of a number and its inverse\n  >>> product(7, 4)\n  28\n  >>> product(7, -4)\n  -28\n  >>> product(4, 7)\n  28\n  >>> product(7, 0)\n  0\n  >>> product(0, 7)\n  0\n  */\nconst product = (a, b) => {\n  return a * inverse(a, b);\n};\n\n/* Return the sum of a number and its inverse\n  >>> sum(7, 4)\n  28\n  >>> sum(7, -4)\n  -28\n  >>> sum(4, 7)\n  28\n  >>> sum(7, 0)\n  0\n  >>> sum(0, 7)\n  7\n  */\nconst sum = (a, b) => {\n  return a + b;\n};\n\n/* Return the difference of a number and its inverse\n  >>> difference(7, 4)\n  -7\n  >>> difference(7, -4)\n  7\n  >>> difference(4, 7)\n  -4\n  >>> difference(7, 0)\n  0\n  >>> difference(0, 7)\n  0\n  */\nconst difference = (a, b) => {\n  return a - b;\n};\n\n/* Return the quotient of a number and its inverse\n  >>> quotient(7, 4)\n  -2\n  >>> quotient(7, -4)\n  2\n  >>> quotient(4, 7)\n  -2\n  >>> quotient(7, 0)\n  0\n  >>> quotient(0, 7)\n  0\n  */\nconst quotient = (a, b) => {\n  return a / b;\n};\n\n/* Return the remainder of a number and its inverse\n  >>> remainder(7, 4)\n  1\n  >>> remainder(7, -4)\n  -1\n  >>> remainder(4, 7)\n  1\n  >>> remainder(7, 0)\n  0\n  >>> remainder(0, 7)\n  0\n  */\nconst remainder = (a, b) => {\n  return a % b;\n};\n\n/* Return the number of 1 bits in a binary number\n  >>> count_ones(0)\n  0\n  >>> count_ones(1)\n  1\n  >>> count_ones(2)\n  1\n  >>> count_ones(3)\n  2\n  >>> count_ones(4)\n  2\n  >>> count_ones(5)\n  2\n  >>> count_ones(6)\n  2\n  >>> count_ones(7)\n  3\n  >>> count_ones(8)\n  3\n  >>> count_ones(9)\n  3\n  >>> count_ones(10)\n  3\n  >>> count_ones(11)\n  4\n  >>> count_ones(12)\n  4\n  >>> count_ones(13)\n  4\n  >>> count_ones(14)\n  4\n  >>> count_ones(15)\n  5\n  >>> count_ones(16)\n  5\n  >>> count_ones(17)\n  5\n  >>> count_ones(18)\n  5\n  >>> count_ones(19)\n  5\n  >>> count_ones(20)\n  5\n  >>> count_ones(21)\n  6\n  >>> count_ones(22)\n  6\n  >>> count_ones(23)\n  6\n  >>> count_ones(24)\n  6\n  >>> count_ones(25)\n  7\n  >>> count_ones(26)\n  7\n  >>> count_ones(27)\n  7\n  >>> count_ones(28)\n  7\n  >>> count_ones(29)\n  8\n  >>> count_ones(30)\n  8\n  >>> count_ones(31)\n  8\n  >>> count_ones(32)\n  8\n  >>> count_ones(33)\n  9\n  >>> count_ones(34)\n  9\n  >>> count_ones(35)\n  9\n  >>> count_ones(36)\n  9\n  >>> count_ones(37)\n  9\n  >>> count_ones(38)\n  9\n  >>>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n  return string.split('').reduce((all, prefix) => {\n    if (all.length === 0) {\n      all.push(prefix)\n    } else {\n      for (let i = 0; i < all.length; i++) {\n        all.push(all[i] + prefix)\n      }\n    }\n    return all\n  }, []);\n};\n\n// Return list of all suffixes from shortest to longest of the input string\nconst all_suffixes = (string) => {\n  return string.split('').reduce((all, suffix) => {\n    if (all.length === 0) {\n      all.push(suffix)\n    } else {\n      for (let i = 0; i < all.length; i++) {\n        all.push(suffix + all[i])\n      }\n    }\n    return all;\n  }, []);\n};\n\n// Return list of all prefixes, suffixes and duplicates from shortest to longest of the input string\nconst all_permutations = (string) => {\n  return all_prefixes(string).concat(all_suffixes(string)).concat(all_prefixes(string).concat(all_suffixes(string)))\n};\n\n/* Return list of all permutations of the input string, e.g.\n  >>> all_permutations('ab')\n  ['a', 'b', 'ab', 'ba', 'aa']\n  */\nconst all_permutations = (string) => {\n  return all_permutations(string.split('').reduce((all, prefix) => {\n    if (all.length === 0) {\n      all.push(prefix)\n    } else {\n      for (let i = 0; i < all.length; i++) {\n        all.push(all[i] + prefix)\n      }\n    }\n    return all;\n  }, []))\n};\n\n/* Return list of all permutations of the input string, e.g.\n  >>> all_permutations('ab')\n  ['a', 'b', 'ab', 'ba', 'aa']\n  */\nconst all_permutations_str = (string) => {\n  return all_permutations(string.split('').map(str => {\n    return str + ''\n  }))\n};\n\nmodule.exports = {\n  all_prefixes,\n  all_suffixes,\n  all_permutations,\n  all_permutations_str\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let result = '';\n  for (let i = 0; i < n; i++) {\n    result += `${i}`;\n    if (i < n - 1) {\n      result +='';\n    }\n  }\n  return result;\n};\n\nexport default string_sequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const uniqueChars = new Set();\n  const chars = string.split('');\n  return chars.reduce((acc, char) => {\n    if (uniqueChars.has(char.toLowerCase())) {\n      acc++;\n    } else {\n      uniqueChars.add(char.toLowerCase());\n    }\n    return acc;\n  }, 0);\n};\n\n// _____________________________________________________________________________\n// Reflection\n/*\nWhat was the most difficult part of this challenge?\n  The most difficult part of this challenge was figuring out how to split the string into individual characters.\nWhat did you learn about creating objects and functions?\n  I learned about creating objects and functions. I created my own functions in order to get the number of unique characters in a string.\nWhat was the most difficult part of this challenge?\n  The most difficult part of this challenge was figuring out how to split the string into individual characters.\nWhat did you learn about manipulating objects and functions?\n  I learned about manipulating objects and functions. I created my own functions in order to get the number of unique characters in a string.\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  const result = [];\n  const beat = 0;\n  const previous_letter = '';\n  const current_beat = 0;\n  let is_half_note = false;\n  let is_quarter_note = false;\n  let beat_counter = 0;\n  for (let i = 0; i < music_string.length; i++) {\n    const current_letter = music_string[i];\n    if (current_letter === previous_letter) {\n      beat_counter++;\n    } else {\n      if (beat_counter >= 4) {\n        result.push(beat);\n        beat_counter = 0;\n        is_quarter_note = false;\n        is_half_note = false;\n      }\n      if (is_quarter_note) {\n        result.push(beat);\n        beat_counter = 0;\n        is_quarter_note = false;\n      }\n      if (is_half_note) {\n        result.push(beat);\n        beat_counter = 0;\n        is_half_note = false;\n      }\n      if (current_letter === 'o') {\n        beat++;\n        is_half_note = false;\n        is_quarter_note = false;\n      } else if (current_letter === 'o|') {\n        beat++;\n        is_half_note = true;\n      } else if (current_letter === '.') {\n        is_half_note = false;\n      } else if (current_letter === '|') {\n        is_quarter_note = true;\n      }\n    }\n    previous_letter = current_letter;\n  }\n  return result;\n};\n\nexport default parse_music;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n    const count = (string.length - substring.length + 1)\n    const count_overlap = (string.length - substring.length + 1)\n\n    const start = 0\n    let end = 0\n\n    while (end < string.length) {\n        end = string.indexOf(substring, start)\n        if (end === -1) {\n            break\n        }\n\n        if (string.substring(end - 1, end + substring.length) === substring) {\n            count_overlap--\n        }\n\n        if (string.substring(start, start + substring.length) === substring) {\n            count--\n        }\n\n        start = end + 1\n    }\n\n    return count\n}\n\n/*\n  Find the longest substring that contains all the letters in the original string.\n  >>> longest_substring('abcdefg')\n  'abcdefg'\n  >>> longest_substring('aab')\n  'aab'\n  >>> longest_substring('a')\n  'a'\n  */\nconst longest_substring = (string) => {\n    const start = 0\n    const end = 0\n    const longest = ''\n    const i = 0\n    const is_longest = false\n    const char_to_int = (string.charAt(i)) => {\n        return (string.charCodeAt(i) - 97)\n    }\n\n    while (end < string.length) {\n        if (string.charCodeAt(end) < 97 || string.charCodeAt(end) > 122) {\n            end++\n            continue\n        }\n\n        let current_substring = string.substring(start, end + 1)\n        const current_substring_length = current_substring.length\n\n        if (current_substring_length > longest.length) {\n            longest = current_substring\n            is_longest = true\n        }\n\n        for (i = 0; i < current_substring_length; i++) {\n            if (is_longest === false) {\n                continue\n            }\n\n            if (char_to_int(current_substring[i])!== char_to_int(longest[i])) {\n                is_longest = false\n            }\n        }\n\n        start = end + 1\n        end = start\n    }\n\n    return longest\n}\n\nmodule.exports = {\n    how_many_times,\n    longest_substring\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  const sorted_numbers = numbers.split(' ').sort((a, b) => parseInt(a, 10) - parseInt(b, 10));\n  return sorted_numbers.join(' ');\n};\n\nexport default sort_numbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  let closest1 = numbers[0];\n  let closest2 = numbers[0];\n  let minDist = numbers[0];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] < minDist) {\n      closest1 = numbers[i];\n      minDist = numbers[i];\n    } else if (numbers[i] > minDist) {\n      closest2 = numbers[i];\n      minDist = numbers[i];\n    }\n  }\n  return [closest1, closest2];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => (v - min) * factor)\n}\n\n/**\n  Given a list of numbers (of at least two elements), apply a logarithmic\n  transform to that list, such that the smallest number will become 0 and the\n  largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => Math.log(v + min) * factor)\n}\n\n/**\n  Given a list of numbers (of at least two elements), apply a logarithmic\n  transform to that list, such that the smallest number will become 0 and the\n  largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log2 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => Math.log(v + min) * factor)\n}\n\n/**\n  Given a list of numbers (of at least two elements), apply a logarithmic\n  transform to that list, such that the smallest number will become 0 and the\n  largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log10 = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => Math.log(v + min) * factor)\n}\n\n/**\n  Given a list of numbers (of at least two elements), apply a logarithmic\n  transform to that list, such that the smallest number will become 0 and the\n  largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log1p = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => (v - min) * factor)\n}\n\n/**\n  Given a list of numbers (of at least two elements), apply a logarithmic\n  transform to that list, such that the smallest number will become 0 and the\n  largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log2p = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => Math.log(v + min) * factor)\n}\n\n/**\n  Given a list of numbers (of at least two elements), apply a logarithmic\n  transform to that list, such that the smallest number will become 0 and the\n  largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log10p = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => Math.log(v + min) * factor)\n}\n\n/**\n  Given a list of numbers (of at least two elements), apply a logarithmic\n  transform to that list, such that the smallest number will become 0 and the\n  largest will become 1\n  >>> rescale_to_unit_log([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.5, 1.0, 1.5, 2.0]\n  */\nconst rescale_to_unit_log1pp = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const factor = 1.0 / (max - min)\n  return numbers.map(v => (v - min) * factor)\n}\n\nexport default {\n  rescale_to_unit,\n  rescale_to_unit_log,\n  rescale_to_unit_log2,\n  rescale_to_unit_log10,\n  rescale_to_unit_log1p,\n  rescale_to_unit_log2p,\n  rescale_to_unit_log"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for floats\n  >>> filter_floats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter_floats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_floats = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (typeof value === 'number') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filter_booleans(['a', 3.14, 5])\n  [5]\n  >>> filter_booleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_booleans = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (typeof value === 'boolean') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for strings\n  >>> filter_strings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filter_strings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_strings = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for bytes\n  >>> filter_bytes(['a', 3.14, 5])\n  [5]\n  >>> filter_bytes([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_bytes = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (typeof value ==='string') {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for iterators\n  >>> filter_iterators(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter_iterators([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_iterators = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (value instanceof _) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for list of iterators\n  >>> filter_iterators_list(['a', 3.14, 5])\n  [[3.14, 5]]\n  >>> filter_iterators_list([1, 2, 3, 'abc', {}, []])\n  [[1, 2, 3]]\n  */\nconst filter_iterators_list = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (value instanceof _) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for iterators\n  >>> filter_iterators(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter_iterators([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_iterators_iterators = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (value instanceof _) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n\n/* Filter given list of any python values only for iterators\n  >>> filter_iterators_iterators(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filter_iterators_iterators([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_iterators_iterators_iterators = (values) => {\n  let result = [];\n  values.forEach(value => {\n    if (value instanceof _) {\n      result.push(value);\n    }\n  });\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const s = String(string)\n  return s.length\n}\n\n/* Return a character at given index\n  >>> strcharat('')\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strcharat('abc')\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strcharat('abc', 1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strcharat('abc', 3)\n  'c'\n  >>> strcharat('abc', -1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strcharat('abc', 3)\n  'c'\n  */\nconst strcharat = (string, index) => {\n  const s = String(string)\n  return s.charAt(index)\n}\n\n/* Create a substring from a given index to the end of the string\n  >>> substr('')\n  ''\n  >>> substr('abc')\n  'abc'\n  >>> substr('abc', 1)\n  'bc'\n  >>> substr('abc', 2)\n  'c'\n  >>> substr('abc', -1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> substr('abc', 3)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> substr('abc', -2)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  */\nconst substr = (string, start) => {\n  const s = String(string)\n  return s.substr(start)\n}\n\n/* Return a copy of a given string with the leading characters omitted\n  >>> strleft('')\n  ''\n  >>> strleft('abc')\n  'abc'\n  >>> strleft('abc', 1)\n  'bc'\n  >>> strleft('abc', 2)\n  'c'\n  >>> strleft('abc', -1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strleft('abc', 3)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strleft('abc', -2)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  */\nconst strleft = (string, start) => {\n  const s = String(string)\n  return s.substr(0, start)\n}\n\n/* Return a copy of a given string with the trailing characters omitted\n  >>> strright('')\n  ''\n  >>> strright('abc')\n  'abc'\n  >>> strright('abc', 1)\n  'a'\n  >>> strright('abc', 2)\n  'ab'\n  >>> strright('abc', -1)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strright('abc', 3)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  >>> strright('abc', -2)\n  Traceback (most recent call last):\n ...\n  IndexError: string index out of range\n  */\nconst strright = (string, start) => {\n  const s = String(string)\n  return s.substr(start, s.length - start)\n}\n\n/* Return a copy of a given string with the given characters removed\n  >>> strremove('')\n  ''\n  >>> strremove('abc')\n  'abc'\n  >>> strremove('abc', '')\n  'abc'\n  >>> strremove('abc', 'a')\n  'bc'\n  >>> strremove('abc', 'b')\n  'ac'\n  >>> strremove('abc', 'c')\n  'ab'\n  >>> strremove('abc', 'd')\n  'abc'\n  >>> strremove('abc', 'ab')\n  Traceback (most recent call last):\n ...\n  ValueError: string contains a null character\n  >>> strremove('abc', 'bc')\n  Traceback (most recent call last):\n ...\n  ValueError: string contains a null character\n  */\nconst strremove = (string, chars) => {\n  const s = String(string)\n  for (let i = 0; i < chars.length; i++) {\n    if (s.includes(chars[i])) {\n      s = s.replace(chars[i], '')\n    }\n  }\n  return s\n}\n\n/* Return a copy of a given string with the given characters inserted\n  >>> strinsert('')\n  ''\n  >>> strinsert('abc')\n  'abc'\n  >>> strinsert('abc', 'def')\n  'defabc'\n  >>> strinsert('abc', 'def', 1)\n  'defabc'\n  >>> strinsert('abc', 'def', 1, 'x')\n  'dexfabc'\n  >>> strinsert('abc', 'def', 1, 'x', 1)\n  'dexfabc'\n  >>> strinsert('abc', 'def', 1, 'x', 1, 'y')\n  'dexfyabc'\n  >>> strinsert('abc', 'def', 1, 'x', 1, 'y', 1)\n  'dexfyabc'\n  >>> strinsert('abc', 'def', 1, 'x', 1, 'y', 1, 'z')\n  'dexfyzabc'\n  */\nconst strinsert = (string, chars, start) => {\n  const s = String(string)\n  let i = start\n  for (let j = 0; j < chars.length; j++) {\n    s = s.slice(0, i) + chars[j] + s.slice(i)\n    i++\n  }\n  return s\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  if (n === 3) {\n    return 3;\n  }\n  if (n === 4) {\n    return 4;\n  }\n  if (n === 5) {\n    return 5;\n  }\n  if (n === 6) {\n    return 6;\n  }\n  if (n === 7) {\n    return 7;\n  }\n  if (n === 8) {\n    return 8;\n  }\n  if (n === 9) {\n    return 9;\n  }\n  if (n === 10) {\n    return 10;\n  }\n  if (n === 11) {\n    return 11;\n  }\n  if (n === 12) {\n    return 12;\n  }\n  if (n === 13) {\n    return 13;\n  }\n  if (n === 14) {\n    return 14;\n  }\n  if (n === 15) {\n    return 15;\n  }\n  const a = largest_divisor(n / 2);\n  const b = largest_divisor(n - n / 2);\n  if (a * b === n) {\n    return a * b;\n  }\n  return largest_divisor(n - n / 2);\n};\n\nconsole.log(largest_divisor(15));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let primeFactorization = [];\n\n  for (let i = 1; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      primeFactorization.push(i);\n      while (n % i === 0) {\n        n = n / i;\n      }\n    }\n  }\n\n  if (n > 1) {\n    primeFactorization.push(n);\n  }\n\n  return primeFactorization;\n};\n\nexport default factorize;\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const set = new Set();\n  return numbers.filter((x) => set.add(x));\n};\n\nmodule.exports = remove_duplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.toLowerCase().replace(/\\B([a-z])/g, m => {\n    return m.toUpperCase()\n  })\n}\n\n// ToUpperCase() is similar to String.prototype.toUpperCase(), but it is not\n// defined in the ECMAScript Standard.  It is only defined in the Mozilla\n// Edition.  The string is converted to upper case, and then returned.\n//\n// For example, the string 'Hello' becomes 'HELLO'\n//\n// For a given string, flip upper case characters to lower case and lower case\n// to upper case.\nconst to_upper_case = (string) => {\n  return string.toUpperCase().replace(/\\B([A-Z])/g, m => {\n    return m.toLowerCase()\n  })\n}\n\n// For a given string, replace characters with a given character.\n// For example, if the string is 'abcdefg', the function replaces the 'f'\n// with '5'\nconst replace_with = (string, character) => {\n  return string.replace(/\\B([a-z])([0-9])/g, m => {\n    return m.toUpperCase().replace(m, m.toUpperCase().charAt(0) + character)\n  })\n}\n\n// For a given string, remove characters from the string.\n// For example, if the string is 'abcdefg', the function removes the 'g'\n// from the string\nconst remove = (string, characters) => {\n  return string.replace(new RegExp(`[${characters.join('|')}]`, 'g'), '')\n}\n\n// Convert a string to a list of strings\nconst to_list = (string) => {\n  return string.split('')\n}\n\n// Returns the longest string in the list\nconst longest = (list) => {\n  return list.reduce((acc, item) => {\n    return acc.length > item.length? acc : item\n  }, '')\n}\n\n// For a given string, return the number of occurrences of a given string\nconst count = (string, search_string) => {\n  return string.split(search_string).length - 1\n}\n\n// Returns the number of occurrences of a given character\nconst count_character = (string, character) => {\n  return string.split(character).length - 1\n}\n\n// Returns the number of occurences of a given string in a list of strings\nconst count_list = (list, search_string) => {\n  return list.filter(item => item.includes(search_string)).length\n}\n\n// For a given string, return the number of occurences of a given character\n// in a list of strings\nconst count_character_list = (list, character) => {\n  return list.filter(item => item.includes(character)).length\n}\n\n// For a given string, return the number of occurences of a given string\n// in a list of strings\nconst count_list_list = (list, search_list) => {\n  return list.filter(item => search_list.includes(item)).length\n}\n\n// For a given string, return the number of occurences of a given character\n// in a list of strings\nconst count_character_list_list = (list, character) => {\n  return list.filter(item => character.includes(item)).length\n}\n\n// Returns the number of occurences of a given string\nconst count_string = (string, search_string) => {\n  return string.split(search_string).length\n}\n\n// For a given string, return the number of occurences of a given character\nconst count_character_string = (string, character) => {\n  return string.split(character).length\n}\n\n// Returns the number of occurences of a given string\nconst count_string_list = (list, search_string) => {\n  return list.filter(item => item.includes(search_string)).length\n}\n\n// For a given string, return the number of occurences of a given character\nconst count_character_string_list = (list, character) => {\n  return list.filter(item => item.includes(character)).length\n}\n\n// Returns the number of occurences of a given string\nconst count_string_list_list = (list, search_list) => {\n  return list.filter(item => search_list.includes(item)).length\n}\n\n// For a given string, return the number of occurences of a given character\nconst count_character_string_list_list = (list, character) => {\n  return list.filter(item => character.includes(item)).length\n}\n\n// Returns the number of occurences of a given string\nconst count_list_list = (list, search_list) => {\n  return list.filter(item => search_list.includes(item)).length\n}\n\n// For a given string, return the number of occurences of a given character\nconst count_character_list_list = (list, character) => {\n  return list.filter(item => character.includes(item)).length\n}\n\n// For a given string, return the number of occurences of a given string\n// in a list of strings\nconst count_character_list_list_list = (list, character) => {\n  return list.filter(item => character.includes(item)).length\n}\n\n// Returns a string consisting of a character repeated a given number of times\nconst repeat_character = (character, times) => {\n  return new Array(times + 1).join(character)\n}\n\n// Returns a string consisting of a character repeated a given number of times\nconst repeat_character_list = (character, times) => {\n  return new Array(times + 1).join(character)\n}\n\n// Returns a string consisting of a string repeated a given number of times\nconst repeat_string = (string, times) => {\n  return new Array(times + 1).join(string)\n}\n\n// Returns a string consisting of a string repeated a given number of times\nconst repeat_string_list = (string, times) => {\n  return new Array(times + 1).join(string)\n}\n\n// Returns a string consisting of a list of strings repeated a given number of times\nconst repeat_list = (list,"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('Expected an array of strings, but received'+ strings);\n  }\n  let output = '';\n  strings.forEach((s) => {\n    output += s;\n  });\n  return output;\n};\n\n/**\n  * Concatenate list of strings into a single string, separated by a delimiter.\n  * If the list is empty, the delimiter is not added.\n  * If the list contains only one string, the delimiter is not added.\n  * If the list contains only one empty string, the delimiter is not added.\n  *\n  * @param {Array} strings List of strings\n  * @param {String} delimiter Delimiter to use\n  *\n  * @return {String} Concatenated string\n  *\n  * @example\n  *\n  * ```javascript\n  * // Concatenate an empty list\n  * concatenate([], '-')\n  * // => ''\n  *\n  * // Concatenate a list of one string\n  * concatenate(['a'], '-')\n  * // => 'a'\n  *\n  * // Concatenate a list of two strings\n  * concatenate(['a', 'b'], '-')\n  * // => 'a-b'\n  *\n  * // Concatenate a list of three strings\n  * concatenate(['a', 'b', 'c'], '-')\n  * // => 'a-b-c'\n  * ```\n  */\nconst concatenateWithDelimiter = (strings, delimiter) => {\n  if (!Array.isArray(strings)) {\n    throw new TypeError('Expected an array of strings, but received'+ strings);\n  }\n  if (!delimiter) {\n    throw new TypeError('Expected a delimiter, but received'+ delimiter);\n  }\n  let output = '';\n  strings.forEach((s, index) => {\n    if (index === 0) {\n      output += s;\n    } else if (index === strings.length - 1) {\n      output += s + delimiter;\n    } else {\n      output += s + delimiter + s;\n    }\n  });\n  return output;\n};\n\nexport {\n  concatenate,\n  concatenateWithDelimiter\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n  return strings.filter(s => s.startsWith(prefix))\n}\n\n/* Filter an input list of strings only for ones that are numeric.\n  >>> filter_by_numeric(['1', '2', '3', '4'])\n  ['1', '2', '3', '4']\n  >>> filter_by_numeric([])\n  []\n  >>> filter_by_numeric([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  */\nconst filter_by_numeric = (strings) => {\n  return strings.filter(s =>!isNaN(s))\n}\n\n/* Print the elements of a list of strings.\n  >>> print_elements(['1', '2', '3', '4'])\n  1\n  2\n  3\n  4\n  */\nconst print_elements = (strings) => {\n  strings.forEach(s => console.log(s))\n}\n\n/* Sort a list of strings using the str.localeCompare() method.\n  >>> sort_by_locale(['1', '3', '2'])\n  ['1', '2', '3']\n  >>> sort_by_locale([])\n  []\n  >>> sort_by_locale(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst sort_by_locale = (strings) => {\n  return strings.sort((a, b) => {\n    let localeA = a.localeCompare(b)\n    if (localeA < 0) return -1\n    if (localeA > 0) return 1\n    return 0\n  })\n}\n\n/* Sort a list of strings using the str.localeCompare() method.\n  >>> sort_by_locale_reverse(['1', '3', '2'])\n  ['3', '2', '1']\n  >>> sort_by_locale_reverse([])\n  []\n  >>> sort_by_locale_reverse(['a', 'b', 'c'])\n  ['c', 'b', 'a']\n  */\nconst sort_by_locale_reverse = (strings) => {\n  return sort_by_locale(strings).reverse()\n}\n\n/* Sort a list of strings using the str.localeCompare() method.\n  >>> sort_by_length(['1', '3', '2'])\n  ['1', '2', '3']\n  >>> sort_by_length([])\n  []\n  >>> sort_by_length(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst sort_by_length = (strings) => {\n  return strings.sort((a, b) => {\n    let lenA = a.length\n    let lenB = b.length\n    if (lenA < lenB) return -1\n    if (lenA > lenB) return 1\n    return 0\n  })\n}\n\n/* Sort a list of strings using the str.localeCompare() method.\n  >>> sort_by_length_reverse(['1', '3', '2'])\n  ['2', '3', '1']\n  >>> sort_by_length_reverse([])\n  []\n  >>> sort_by_length_reverse(['a', 'b', 'c'])\n  ['c', 'b', 'a']\n  */\nconst sort_by_length_reverse = (strings) => {\n  return sort_by_length(strings).reverse()\n}\n\n/* Sort a list of strings using the str.localeCompare() method.\n  >>> sort_by_length_reverse(['1', '3', '2'])\n  ['2', '3', '1']\n  >>> sort_by_length_reverse([])\n  []\n  >>> sort_by_length_reverse(['a', 'b', 'c'])\n  ['c', 'b', 'a']\n  */\nconst sort_by_length_reverse = (strings) => {\n  return sort_by_length(strings).reverse()\n}\n\n/* Print a list of strings with line breaks.\n  >>> print_with_linebreaks(['1', '2', '3', '4'])\n  1\n  2\n  3\n  4\n  */\nconst print_with_linebreaks = (strings) => {\n  strings.forEach(s => console.log(s + '\\n'))\n}\n\n/* Print a list of strings with line breaks.\n  >>> print_with_linebreaks([])\n  []\n  >>> print_with_linebreaks(['1', '2', '3', '4'])\n  1\n  2\n  3\n  4\n  */\nconst print_with_linebreaks = (strings) => {\n  strings.forEach(s => console.log(s + '\\n'))\n}\n\n/* Print a list of strings with line breaks.\n  >>> print_with_linebreaks(['1', '2', '3', '4'])\n  1\n  2\n  3\n  4\n  */\nconst print_with_linebreaks = (strings) => {\n  strings.forEach(s => console.log(s + '\\n'))\n}\n\n/* Print a list of strings with line breaks.\n  >>> print_with_linebreaks([])\n  []\n  >>> print_with_linebreaks(['1', '2', '3', '4'])\n  1\n  2\n  3\n  4\n  */\nconst print_with_linebreaks = (strings) => {\n  strings.forEach(s => console.log(s + '\\n'))\n}\n\n/* Print a list of strings with line breaks.\n  >>> print_with_linebreaks([])\n  []\n  >>> print_with_linebreaks(['1', '2', '3', '4'])\n  1\n  2\n  3\n  4\n  */\nconst print_with_linebreaks = (strings) => {\n  strings.forEach(s => console.log(s + '\\n'))\n}\n\n/* Print a list of strings with line breaks."}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  return [...new Set(l)].filter(i => i > 0).map(i => i);\n}\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-4, -5]\n  >>> get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [-5, -3, -3, -9, -123, -1]\n  */\nconst get_negative = (l) => {\n  return [...new Set(l)].filter(i => i < 0).map(i => -i);\n}\n\n// console.log(get_positive([-1, 2, -4, 5, 6]), get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n\n// console.log(get_negative([-1, 2, -4, 5, 6]), get_negative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]));\n\nmodule.exports = {\n  get_positive,\n  get_negative\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  if (n <= 1) return false\n  let n_str = n.toString()\n  for (let i = 2; i <= Math.sqrt(n_str); i++) {\n    if (n_str % i === 0) return false\n  }\n  return true\n}\n\n/*Return the prime factors of a number.\n  >>> prime_factors(6)\n  [2, 3]\n  >>> prime_factors(25)\n  [5, 5]\n  >>> prime_factors(81)\n  [3, 9, 27]\n  >>> prime_factors(25)\n  [5, 5]\n  >>> prime_factors(1)\n  []\n  >>> prime_factors(11)\n  [11]\n  */\nconst prime_factors = (n) => {\n  if (n <= 1) return []\n  let factors = []\n  let n_str = n.toString()\n  let i = 2\n  while (i <= Math.sqrt(n_str)) {\n    while (n_str % i === 0) {\n      factors.push(i)\n      n_str = n_str / i\n    }\n    i++\n  }\n  return factors\n}\n\n/*Return the sum of the digits of a given number.\n  >>> sum_of_digits(6)\n  5\n  >>> sum_of_digits(25)\n  16\n  >>> sum_of_digits(81)\n  16\n  >>> sum_of_digits(25)\n  16\n  >>> sum_of_digits(1)\n  1\n  >>> sum_of_digits(11)\n  1\n  */\nconst sum_of_digits = (n) => {\n  let n_str = n.toString()\n  let sum = 0\n  for (let i = 0; i < n_str.length; i++) {\n    sum += n_str.charAt(i) - '0'\n  }\n  return sum\n}\n\n/*Return the greatest product of the digits of a given number.\n  >>> greatest_product(6)\n  10\n  >>> greatest_product(25)\n  2700\n  >>> greatest_product(81)\n  81000\n  >>> greatest_product(25)\n  2700\n  >>> greatest_product(1)\n  1\n  >>> greatest_product(11)\n  11\n  */\nconst greatest_product = (n) => {\n  let n_str = n.toString()\n  let prod = 1\n  for (let i = 0; i < n_str.length; i++) {\n    prod *= parseInt(n_str.charAt(i), 10)\n  }\n  return prod\n}\n\n/*Return the smallest prime factor of a number.\n  >>> smallest_prime_factor(6)\n  2\n  >>> smallest_prime_factor(25)\n  5\n  >>> smallest_prime_factor(81)\n  9\n  >>> smallest_prime_factor(25)\n  5\n  >>> smallest_prime_factor(1)\n  1\n  >>> smallest_prime_factor(11)\n  11\n  */\nconst smallest_prime_factor = (n) => {\n  let factors = prime_factors(n)\n  let min_factor = factors[0]\n  for (let i = 1; i < factors.length; i++) {\n    if (factors[i] < min_factor) {\n      min_factor = factors[i]\n    }\n  }\n  return min_factor\n}\n\n/*Return the number of primes under n.\n  >>> count_primes(1)\n  0\n  >>> count_primes(6)\n  1\n  >>> count_primes(25)\n  3\n  >>> count_primes(81)\n  6\n  >>> count_primes(25)\n  3\n  >>> count_primes(1)\n  0\n  >>> count_primes(11)\n  1\n  */\nconst count_primes = (n) => {\n  let n_str = n.toString()\n  let count = 0\n  for (let i = 2; i <= n_str; i++) {\n    if (is_prime(i)) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*Return the sum of the digits of the number in base 10.\n  >>> sum_of_digits_10(6)\n  5\n  >>> sum_of_digits_10(25)\n  16\n  >>> sum_of_digits_10(81)\n  16\n  >>> sum_of_digits_10(25)\n  16\n  >>> sum_of_digits_10(1)\n  1\n  >>> sum_of_digits_10(11)\n  1\n  */\nconst sum_of_digits_10 = (n) => {\n  let n_str = n.toString()\n  let sum = 0\n  for (let i = 0; i < n_str.length; i++) {\n    sum += parseInt(n_str.charAt(i), 10)\n  }\n  return sum\n}\n\n/*Return the greatest product of the digits of the number in base 10.\n  >>> greatest_product_10(6)\n  10\n  >>> greatest_product_10(25)\n  2700\n  >>> greatest_product_10(81)\n  81000\n  >>> greatest_product_10(25)\n  2700\n  >>> greatest_product_10(1)\n  1\n  >>> greatest_product_10(11)\n  11\n  */\nconst greatest_product_10 = (n) => {\n  let n_str = n.toString()\n  let prod = 1\n  for (let i = 0; i < n_str.length; i++) {\n    prod *= parseInt(n_str.charAt(i), 10)\n  }\n  return prod\n}\n\n/*Return the smallest prime factor of the number in base"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length;\n  const sum = poly(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly2 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero2 find x such that poly2(x) = 0.\n  findZero2 returns only only zero point, even if there are many.\n  Moreover, findZero2 only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero2([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero2([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero2 = (xs) => {\n  const n = xs.length;\n  const sum = poly2(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst poly3 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero3 = (xs) => {\n  const n = xs.length;\n  const sum = poly3(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\n/*\n  Evaluate polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly4 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero4 = (xs) => {\n  const n = xs.length;\n  const sum = poly4(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero5 = (xs) => {\n  const n = xs.length;\n  const sum = poly4(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst poly5 = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero6 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero7 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero8 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero9 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero10 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero11 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero12 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero13 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero14 = (xs) => {\n  const n = xs.length;\n  const sum = poly5(xs, -1);\n  const x0 = sum / n;\n  return x0;\n}\n\nconst findZero15 = (xs) => {\n  const n = xs.length;"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sorted = [...l].sort((a, b) => a - b);\n  const sorted_third = [...l].filter((v, i) => i % 3 == 0).sort((a, b) => a - b);\n  return [...sorted,...sorted_third];\n};\n\nexport default sort_third;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  if (l.length === 0) return []\n  const d = {}\n  for (let i = 0; i < l.length; i++) {\n    d[l[i]] = true\n  }\n  return Object.keys(d)\n}\n\n/*Return the number of times a number appears in a list\n  >>> count(1, [1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6])\n  4\n  */\nconst count = (x, l) => {\n  let count = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === x) count++\n  }\n  return count\n}\n\n/* Return the difference between two lists\n  >>> listDiff([1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7])\n  [4, 5, 6, 7]\n  */\nconst listDiff = (a, b) => {\n  const l = []\n  for (let i = 0; i < a.length; i++) {\n    l.push(a[i])\n  }\n  for (let i = 0; i < b.length; i++) {\n    l.push(b[i])\n  }\n  return l\n}\n\n/* Given a list, find the longest common prefix\n  >>> longestCommonPrefix([1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8])\n  [1, 2, 2, 3, 3, 3]\n  */\nconst longestCommonPrefix = (l) => {\n  const longest = []\n  let longest_len = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[0]) {\n      longest.push(l[i])\n      longest_len++\n    } else {\n      break\n    }\n  }\n  return longest.slice(0, longest_len)\n}\n\n/* Given two lists, return a list of lists where\n  each inner list is the intersection of two lists\n  >>> intersect([1, 2, 2, 3, 3, 3, 4, 4, 5, 5, 5, 6, 6, 6, 7, 8], [1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3]\n  */\nconst intersect = (a, b) => {\n  const l = []\n  for (let i = 0; i < a.length; i++) {\n    for (let j = 0; j < b.length; j++) {\n      if (a[i] === b[j]) {\n        l.push(a[i])\n      }\n    }\n  }\n  return l\n}\n\n/*Given a list, return the longest consecutive elements\n  >>> longestConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst longestConsecutive = (l) => {\n  const longest = []\n  let l_len = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      l_len++\n      longest.push(l[i])\n    } else {\n      break\n    }\n  }\n  return longest.slice(0, l_len)\n}\n\n/* Given a list, return the longest consecutive elements\n  >>> longestConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst longestConsecutive1 = (l) => {\n  let l_len = 0\n  const longest = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1]) {\n      l_len++\n      longest.push(l[i])\n    } else {\n      break\n    }\n  }\n  return longest.slice(0, l_len)\n}\n\n/* Given a list, return the longest consecutive elements\n  >>> longestConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst longestConsecutive2 = (l) => {\n  let l_len = 0\n  const longest = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1] && l[i] === l[i + 2]) {\n      l_len += 3\n      longest.push(l[i])\n    } else {\n      break\n    }\n  }\n  return longest.slice(0, l_len)\n}\n\n/* Given a list, return the longest consecutive elements\n  >>> longestConsecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  */\nconst longestConsecutive3 = (l) => {\n  let l_len = 0\n  const longest = []\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[i + 1] && l[i] === l[i + 2]) {\n      l_len += 3\n      longest.push(l[i])\n    } else {\n      break\n    }\n  }\n  return longest.slice(0, l_len)\n}\n\nmodule.exports = {\n  unique,\n  count,\n  listDiff,\n  longestCommonPrefix,\n  longestConsecutive,\n  longestConsecutive1,\n  longestConsecutive2,\n  longestConsecutive3,\n  intersect\n}\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n  if (l.length === 0) return undefined\n  const largest = l[0]\n  const largest_index = 0\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > largest) {\n      largest = l[i]\n      largest_index = i\n    }\n  }\n  return largest\n}\n\n/*Return element in the list that is closest to the given element.\n  >>> min_element([1, 2, 3, 4, 5])\n  2\n  >>> min_element([1, 2, 3, 4, 5], 1)\n  1\n  >>> min_element([1, 2, 3, 4, 5], 2)\n  3\n  >>> min_element([1, 2, 3, 4, 5], 4)\n  4\n  >>> min_element([1, 2, 3, 4, 5], 6)\n  5\n  >>> min_element([1, 2, 3, 4, 5], -1)\n  5\n  >>> min_element([1, 2, 3, 4, 5], -2)\n  3\n  >>> min_element([1, 2, 3, 4, 5], -4)\n  1\n  >>> min_element([1, 2, 3, 4, 5], -6)\n  1\n  >>> min_element([1, 2, 3, 4, 5], 9)\n  1\n  >>> min_element([1, 2, 3, 4, 5], 123)\n  1\n  >>> min_element([1, 2, 3, 4, 5], -10)\n  1\n  >>> min_element([1, 2, 3, 4, 5], -1)\n  1\n  >>> min_element([1, 2, 3, 4, 5], -2)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -3)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -4)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -5)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -6)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -7)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -8)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -9)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -10)\n  2\n  >>> min_element([1, 2, 3, 4, 5], -11)\n  2\n  */\nconst min_element = (l, el) => {\n  const i = 0\n  const min = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i]\n      i = i\n    }\n  }\n  return min\n}\n\nexport { max_element, min_element }\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n    return Math.floor(n / 11) % 2 === 0 || Math.floor(n / 13) % 2 === 0\n};\n\nmodule.exports = fizz_buzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const even = [];\n  const odd = [];\n  for (let i = 0; i < l.length; i++) {\n    if (i % 2 === 0) {\n      even.push(l[i]);\n    } else {\n      odd.push(l[i]);\n    }\n  }\n  return [...odd,...even];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = s.split('');\n  let groups2 = [];\n  for (let i = 0; i < groups.length; i++) {\n    if (groups[i].length == 3)\n      groups2.push(groups[i].slice(0, 2) + groups[i].slice(2));\n    else\n      groups2.push(groups[i]);\n  }\n  return groups2.join('');\n}\n\n/*\n  encodes string with base64.\n  */\nconst base64_encode = (s) => {\n  const x = s.length, y = x % 3, z = x - y;\n  const arr = [];\n  for (let i = 0; i < z; i++) {\n    arr.push(s.slice(i * 3, i * 3 + 3));\n  }\n  for (let i = 0; i < y; i++) {\n    arr.push(s.slice(i * 3 + z, i * 3 + z + 3));\n  }\n  const output = btoa(arr.join(''));\n  return output;\n}\n\n/*\n  decodes string with base64.\n  */\nconst base64_decode = (s) => {\n  const x = s.length, y = x % 4, z = x - y;\n  const arr = [];\n  for (let i = 0; i < z; i++) {\n    arr.push(s.slice(i * 4, i * 4 + 4));\n  }\n  for (let i = 0; i < y; i++) {\n    arr.push(s.slice(i * 4 + z, i * 4 + z + 4));\n  }\n  const output = atob(arr.join(''));\n  return output;\n}\n\n/*\n  Encodes and decodes base64 strings.\n  */\nconst base64 = (s) => {\n  const base64_encode_str = base64_encode(s);\n  const base64_decode_str = base64_decode(base64_encode_str);\n  return decodeCyclic(base64_decode_str);\n}\n\nexport default base64;\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n    if (n == 1) {\n        return 2;\n    } else if (n == 2) {\n        return 3;\n    } else {\n        let prev = 1;\n        let curr = 2;\n        let fib = 1;\n        while (curr < n) {\n            fib = prev + curr;\n            if (isPrime(fib)) {\n                return fib;\n            }\n            prev = curr;\n            curr = fib;\n        }\n    }\n}\n\n/*\n  prime_fib_sum returns sum of fibonacci numbers.\n  >>> prime_fib_sum(1)\n  2\n  >>> prime_fib_sum(2)\n  5\n  >>> prime_fib_sum(3)\n  11\n  >>> prime_fib_sum(4)\n  22\n  >>> prime_fib_sum(5)\n  33\n  >>> prime_fib_sum(10)\n  66\n  */\nconst prime_fib_sum = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += prime_fib(i);\n    }\n    return sum;\n}\n\n/*\n  prime_fib_product returns product of fibonacci numbers.\n  >>> prime_fib_product(1)\n  1\n  >>> prime_fib_product(2)\n  2\n  >>> prime_fib_product(3)\n  6\n  >>> prime_fib_product(4)\n  12\n  >>> prime_fib_product(5)\n  30\n  >>> prime_fib_product(10)\n  210\n  >>> prime_fib_product(20)\n  420\n  >>> prime_fib_product(30)\n  990\n  */\nconst prime_fib_product = (n) => {\n    let product = 1;\n    for (let i = 1; i <= n; i++) {\n        product *= prime_fib(i);\n    }\n    return product;\n}\n\n/*\n  prime_fib_primes returns primes less than n.\n  >>> prime_fib_primes(1)\n  [2]\n  >>> prime_fib_primes(2)\n  [2, 3]\n  >>> prime_fib_primes(3)\n  [2, 3, 5]\n  >>> prime_fib_primes(4)\n  [2, 3, 5, 7]\n  >>> prime_fib_primes(5)\n  [2, 3, 5, 7, 11]\n  >>> prime_fib_primes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> prime_fib_primes(20)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> prime_fib_primes(30)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 117, 121, 123, 127, 129, 131, 133, 137, 139, 149, 151, 157, 163, 167, 169, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> prime_fib_primes(100)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 117, 121, 123, 127, 129, 131, 133, 137, 139, 149, 151, 157, 163, 167, 169, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 511, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n  let result = false\n  let i = 0\n  while(i < l.length) {\n    if(l.length - i > 3) {\n      let j = i + 1\n      while(j < l.length) {\n        if(l[i] + l[j] == 0) {\n          result = true\n          return result\n        }\n        j++\n      }\n    }\n    i++\n  }\n  return result\n}\n\nexport default triples_sum_to_zero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n  const cars = []\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: i,\n      y: 0,\n      direction: i % 2? 'left' : 'right'\n    })\n  }\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      x: n - i - 1,\n      y: 0,\n      direction: i % 2? 'right' : 'left'\n    })\n  }\n  cars.sort((a, b) => a.x - b.x)\n  let collisions = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (cars[i].direction === 'left' && cars[j].direction === 'right') {\n        collisions++\n      }\n    }\n  }\n  return collisions\n}\n\nconsole.log(car_race_collision(2))\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  const len = l.length\n  const incr = (a, i) => (i === len - 1)? a + 1 : a + 1\n  return l.reduce((a, v, i) => incr(a, i), 0)\n}\n\n// const incr_list = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a + 1 : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\nconst incr_list_no_incr = (l) => {\n  const len = l.length\n  const incr = (a, i) => (i === len - 1)? a + 1 : a\n  return l.reduce((a, v, i) => incr(a, i), 0)\n}\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a + 1 : a\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\nconst incr_list_no_incr = (l) => {\n  const len = l.length\n  const incr = (a, i) => (i === len - 1)? a : a + 1\n  return l.reduce((a, v, i) => incr(a, i), 0)\n}\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n// }\n\n// const incr_list_no_incr = (l) => {\n//   const len = l.length\n//   const incr = (a, i) => (i === len - 1)? a : a + 1\n//   return l.reduce((a, v, i) => incr(a, i), 0)\n//"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n  const len = l.length;\n  const zero = 0;\n  const result = [false, false];\n\n  // if the sum of any two elements is zero, we're done\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const sum = l[i] + l[j];\n\n      if (sum === zero) {\n        result[0] = true;\n      } else if (sum === -zero) {\n        result[1] = true;\n      }\n    }\n  }\n\n  return result;\n};\n\nexport default pairs_sum_to_zero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  if(x === 0) {\n    return '0'\n  }\n\n  let result = ''\n  while(x > 0) {\n    let y = x % base\n    x = Math.floor(x / base)\n    result = y + result\n  }\n  return result\n}\n\nconst change_base_to_num = (str, base) => {\n  if(str === 0) {\n    return 0\n  }\n  let result = 0\n  for(let i = str.length - 1; i >= 0; i--) {\n    result += parseInt(str[i], base) * Math.pow(base, i)\n  }\n  return result\n}\n\nmodule.exports = {\n  change_base,\n  change_base_to_num\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n  return (2 * a * h) / 2;\n};\n\n/**\n * @description Given length of a side and high return volume for a triangle.\n  >>> triangle_volume(5, 3)\n  9\n  */\nconst triangle_volume = (a, h) => {\n  return (a * h) * (a * h) / 4;\n};\n\n/**\n * @description Given length of a side and high return perimeter for a triangle.\n  >>> triangle_perimeter(5, 3)\n  15\n  */\nconst triangle_perimeter = (a, h) => {\n  return (2 * a * h) + (a * h) + (a * h);\n};\n\nexport {\n  triangle_area,\n  triangle_volume,\n  triangle_perimeter\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let fib = [1, 2, 3];\n  if (n <= 1) {\n    return fib[n];\n  } else {\n    fib[n] = fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n    return fib[n];\n  }\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const s = sort(l);\n  return s.length % 2 === 1? s[Math.floor(s.length / 2)] : (s[Math.floor(s.length / 2) - 1] + s[Math.floor(s.length / 2)]) / 2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n  if (!text) {\n    return false;\n  }\n\n  const reversed = text.split('').reverse().join('');\n  return text === reversed;\n};\n\nexport default is_palindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const m = (n % p)\n  if (n === 0) {\n    return 0\n  }\n  return (m === 0)? p : m\n}\n\n/**\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  * @description\n  * If x and y are both primes, return the product of x and y.\n  * If one of them is not prime, return 0.\n  * If both are not prime, return 1.\n  * If one of them is not prime, return 0.\n  * If both are not prime, return 1.\n  * @example\n  *\n  * >>> modp(3, 3)\n  * 3\n  * >>> modp(3, 5)\n  * 0\n  * >>> modp(4, 3)\n  * 0\n  * >>> modp(3, 4)\n  * 1\n  */\nconst modp = (x, y) => {\n  if (isPrime(x) && isPrime(y)) {\n    return x * y\n  }\n  if (isPrime(x) || isPrime(y)) {\n    return 0\n  }\n  return 1\n}\n\n/**\n  * @param {number} n\n  * @param {number} p\n  * @return {number}\n  * @description\n  * Return the greatest common divisor of two numbers, which are guaranteed to be\n  * prime, using the extended euclid algorithm.\n  * @example\n  *\n  * >>> gcd(3, 5)\n  * 3\n  * >>> gcd(10, 20)\n  * 10\n  * >>> gcd(30, 40)\n  * 20\n  * >>> gcd(30, 60)\n  * 30\n  * >>> gcd(10, 10)\n  * 10\n  */\nconst gcd = (n, p) => {\n  let a = n\n  let b = p\n  while (b!== 0) {\n    let t = a % b\n    a = b\n    b = t\n  }\n  return a\n}\n\n/**\n  * @param {number} n\n  * @return {boolean}\n  * @description\n  * Return whether or not the number is prime using the Miller-Rabin\n  * algorithm.\n  * @example\n  *\n  * >>> isPrime(2)\n  * true\n  * >>> isPrime(3)\n  * true\n  * >>> isPrime(4)\n  * true\n  * >>> isPrime(5)\n  * false\n  * >>> isPrime(6)\n  * false\n  * >>> isPrime(7)\n  * false\n  * >>> isPrime(8)\n  * false\n  * >>> isPrime(10)\n  * false\n  * >>> isPrime(11)\n  * false\n  */\nconst isPrime = n => {\n  if (n < 2) return false\n  const isPrime = (n & 1) === 1\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nexport {\n  modp,\n  gcd,\n  isPrime,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - \"a\".charCodeAt(0)) - 5) % 26) + \"a\").join(\"\");\n}\n\n/*\n  encodes given string with encode_shift function and returns encoded string.\n  */\nconst encode = (s) => {\n  return encodeShift(s);\n}\n\n/*\n  decodes given string with decode_shift function and returns decoded string.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nmodule.exports = { encode, decode }\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n  let a = /[aeiouAEIOU]/g;\n  let b = /[aeiouAEIOU]/g;\n  let c = a.exec(text);\n  let d = b.exec(text);\n  while (c) {\n    let last_match = c.index;\n    text = text.replace(c[0], '');\n    c = a.exec(text);\n  }\n  while (d) {\n    let last_match = d.index;\n    text = text.replace(d[0], '');\n    d = b.exec(text);\n  }\n  return text;\n}\n\n/*\n  remove_numbers is a function that takes string and returns string without number.\n  >>> remove_numbers(\"1a1b1c1d\")\n  'abcd'\n  >>> remove_numbers(\"1a1b1c1d1\")\n  'abcd'\n  >>> remove_numbers(\"1a1b1c1d1e1f\")\n  'abcd1e1f'\n  >>> remove_numbers(\"1a1b1c1d1e1f1g1h1i1j\")\n  'abcd1e1f1g1h1i1j'\n  >>> remove_numbers(\"1a1b1c1d1e1f1g1h1i1j1\")\n  'abcd1e1f1g1h1i1j'\n  >>> remove_numbers(\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z\")\n  'abcd1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z'\n  >>> remove_numbers(\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1\")\n  'abcd1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1'\n  >>> remove_numbers(\"1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1n1o1p1q1r1s1t1u1v1w1x1y1z1a1b1c1d1e1f1g1h1i1j1k1l1m1"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  let i = 0\n  while (i < l.length) {\n    if (l[i] > t) {\n      return false\n    }\n    i++\n  }\n  return true\n}\n\n/*\n  Return the median of the list.\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  >>> median([1, 2, 3, 4])\n  2.5\n  >>> median([1, 2, 3, 4, 5, 6])\n  3.0\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  4.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return (l[l.length / 2] + l[(l.length / 2) - 1]) / 2\n  }\n  return l[Math.floor(l.length / 2)]\n}\n\n/*\n  Return the mode of the list.\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([1, 2, 2, 4, 5])\n  2\n  >>> mode([1, 2, 2, 4, 5, 6])\n  2\n  >>> mode([1, 2, 3, 4, 5, 6])\n  3\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  */\nconst mode = (l) => {\n  let mode = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[mode]) {\n      if (l.length - i > maxCount) {\n        maxCount = l.length - i\n        mode = i\n      }\n    }\n  }\n  return l[mode]\n}\n\n/*\n  Return the standard deviation of the list.\n  >>> variance([1, 2, 3, 4, 5])\n  2.5\n  >>> variance([1, 2, 3, 4, 5, 6])\n  3.25\n  >>> variance([1, 2, 3, 4, 5, 6, 7])\n  4.25\n  */\nconst variance = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += (l[i] - mean(l)) * (l[i] - mean(l))\n  }\n  return sum / l.length\n}\n\n/*\n  Return the standard deviation of the list.\n  >>> stddev([1, 2, 3, 4, 5])\n  2.0\n  >>> stddev([1, 2, 3, 4, 5, 6])\n  3.0\n  >>> stddev([1, 2, 3, 4, 5, 6, 7])\n  4.0\n  */\nconst stddev = (l) => {\n  let variance = variance(l)\n  return Math.sqrt(variance)\n}\n\n/*\n  Return the sum of the list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  22\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  29\n  */\nconst sum = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n  return sum\n}\n\n/*\n  Return the average of the list.\n  >>> average([1, 2, 3, 4, 5])\n  3.0\n  >>> average([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> average([1, 2, 3, 4, 5, 6, 7])\n  5.0\n  */\nconst average = (l) => {\n  return sum(l) / l.length\n}\n\n/*\n  Return the median of the list.\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  >>> median([1, 2, 3, 4, 5, 6])\n  4.0\n  >>> median([1, 2, 3, 4, 5, 6, 7])\n  5.0\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) {\n    return (l[l.length / 2] + l[(l.length / 2) - 1]) / 2\n  }\n  return l[Math.floor(l.length / 2)]\n}\n\n/*\n  Return the mode of the list.\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([1, 2, 2, 4, 5])\n  2\n  >>> mode([1, 2, 2, 4, 5, 6])\n  2\n  >>> mode([1, 2, 3, 4, 5, 6, 7])\n  6\n  */\nconst mode = (l) => {\n  let mode = 0\n  let maxCount = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === l[mode]) {\n      if (l.length - i > maxCount) {\n        maxCount = l.length - i\n        mode = i\n      }\n    }\n  }\n  return l[mode]\n}\n\n/*\n  Return the standard deviation of the list.\n  >>> variance([1, 2, 3, 4, 5])\n  2.5\n  >>> variance([1, 2, 3, 4, 5, 6])\n  3.25\n  >>> variance([1, 2, 3, 4, 5, 6, 7])\n  4.25\n  */\nconst stddev = (l) => {\n  let variance = variance(l)\n  return Math.sqrt(variance)\n}\n\n/*\n  Return the sum of the list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  22\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  29\n  "}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\nconst multiply = (x, y) => {\n  return x * y;\n}\n\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/*Add two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\nconst divide = (x, y) => {\n  return x / y;\n}\n\nconst divideByZero = (x, y) => {\n  return x / y;\n}\n\n/*Divide two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\nconst modulo = (x, y) => {\n  return x % y;\n}\n\nconst moduloByZero = (x, y) => {\n  return x % y;\n}\n\n/*Modulo two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst modulo = (x, y) => {\n  return x % y;\n}\n\nconst power = (x, y) => {\n  return Math.pow(x, y);\n}\n\nconst powerByZero = (x, y) => {\n  return Math.pow(x, y);\n}\n\n/*Power two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst power = (x, y) => {\n  return Math.pow(x, y);\n}\n\nconst square = (x) => {\n  return x * x;\n}\n\nconst squareByZero = (x) => {\n  return x * x;\n}\n\n/*Square two numbers x\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst square = (x) => {\n  return x * x;\n}\n\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n}\n\nconst squareRootByZero = (x) => {\n  return Math.sqrt(x);\n}\n\n/*Square root two numbers x\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n}\n\nconst absolute = (x) => {\n  return Math.abs(x);\n}\n\nconst absoluteByZero = (x) => {\n  return Math.abs(x);\n}\n\n/*Absolute value two numbers x\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst absolute = (x) => {\n  return Math.abs(x);\n}\n\nconst cosine = (x, y) => {\n  return Math.cos(x) * Math.cos(y);\n}\n\nconst cosineByZero = (x, y) => {\n  return Math.cos(x) * Math.cos(y);\n}\n\n/*Cosine of two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst cosine = (x, y) => {\n  return Math.cos(x) * Math.cos(y);\n}\n\nconst sine = (x, y) => {\n  return Math.sin(x) * Math.sin(y);\n}\n\nconst sineByZero = (x, y) => {\n  return Math.sin(x) * Math.sin(y);\n}\n\n/*Sine of two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst sine = (x, y) => {\n  return Math.sin(x) * Math.sin(y);\n}\n\nconst tangent = (x, y) => {\n  return Math.tan(x) * Math.tan(y);\n}\n\nconst tangentByZero = (x, y) => {\n  return Math.tan(x) * Math.tan(y);\n}\n\n/*Tangent of two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst tangent = (x, y) => {\n  return Math.tan(x) * Math.tan(y);\n}\n\nconst arccosine = (x, y) => {\n  return Math.acos(x) * Math.acos(y);\n}\n\nconst arccosineByZero = (x, y) => {\n  return Math.acos(x) * Math.acos(y);\n}\n\n/*Arccosine of two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst arccosine = (x, y) => {\n  return Math.acos(x) * Math.acos(y);\n}\n\nconst arcsine = (x, y) => {\n  return Math.asin(x) * Math.asin(y);\n}\n\nconst arcsineByZero = (x, y) => {\n  return Math.asin(x) * Math.asin(y);\n}\n\n/*Arcsine of two numbers x and y\n  >>> subtract(5, 7)\n  -2\n  >>> subtract(2, 3)\n  1\n  */\nconst arcsine = (x, y) => {\n  return Math.asin(x) * Math.asin(y);\n}\n\nconst arctangent = (x, y) => {\n  return Math.atan(x) * Math.atan(y);\n}\n\nconst arctangentByZero = (x, y) => {\n  return Math.atan(x) * Math.atan(y);\n}\n\n/*Arctangent of two numbers x and"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  const len0 = s0.length;\n  const len1 = s1.length;\n  const max = Math.max(len0, len1);\n  for (let i = 0; i < max; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Check if two words are anagrams.\n  >>> anagram('abc', 'cdc')\n  false\n  >>> anagram('abc', 'bbc')\n  false\n  >>> anagram('abc', 'cbc')\n  true\n  >>> anagram('abcd', 'acbd')\n  true\n  >>> anagram('abcd', 'abce')\n  false\n  >>> anagram('abcd', 'acbd')\n  true\n  >>> anagram('abcd', 'abcde')\n  true\n  */\nconst anagram = (s0, s1) => {\n  if (s0 === s1) {\n    return true;\n  }\n  const len0 = s0.length;\n  const len1 = s1.length;\n  const max = Math.max(len0, len1);\n  for (let i = 0; i < max; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Find the smallest common ancestor.\n  >>> lca('abcd', 'cde')\n  'd'\n  >>> lca('abcd', 'bcde')\n  'b'\n  >>> lca('abcd', 'cbd')\n  'b'\n  >>> lca('abcd', 'ab')\n  'a'\n  >>> lca('abcd', 'abcd')\n  'a'\n  >>> lca('abcd', 'abcdef')\n  'a'\n  >>> lca('abcd', 'abcdefg')\n  'a'\n  >>> lca('abcdef', 'abcd')\n  'a'\n  >>> lca('abcdef', 'abcdefg')\n  'a'\n  >>> lca('abcdefg', 'abcdef')\n  'a'\n  >>> lca('abcdefg', 'abcdef')\n  'a'\n  >>> lca('abcdefg', 'abcdefg')\n  'a'\n  >>> lca('abcdefg', 'abcdefgh')\n  'a'\n  >>> lca('abcdefgh', 'abcdefg')\n  'a'\n  >>> lca('abcdefgh', 'abcdef')\n  'a'\n  >>> lca('abcdefgh', 'abcdefgh')\n  'a'\n  >>> lca('abcdefgh', 'abcdefghi')\n  'a'\n  >>> lca('abcdefghi', 'abcdefgh')\n  'a'\n  >>> lca('abcdefghi', 'abcdefghi')\n  'a'\n  >>> lca('abcdefghi', 'abcdefghij')\n  'a'\n  >>> lca('abcdefghij', 'abcdefghi')\n  'a'\n  >>> lca('abcdefghij', 'abcdefghij')\n  'a'\n  >>> lca('abcdefghij', 'abcdefghijk')\n  'a'\n  >>> lca('abcdefghijk', 'abcdefghij')\n  'a'\n  >>> lca('abcdefghijk', 'abcdefghijk')\n  'a'\n  >>> lca('abcdefghijk', 'abcdefghijkl')\n  'a'\n  >>> lca('abcdefghijkl', 'abcdefghijk')\n  'a'\n  >>> lca('abcdefghijkl', 'abcdefghijkl')\n  'a'\n  >>> lca('abcdefghijkl', 'abcdefghijkl')\n  'a'\n  >>> lca('abcdefghijkl', 'abcdefghijkl')\n  'a'\n  */\nconst lca = (s0, s1) => {\n  if (s0 === s1) {\n    return s0;\n  }\n  const len0 = s0.length;\n  const len1 = s1.length;\n  const min = Math.min(len0, len1);\n  const c0 = s0.charAt(0);\n  const c1 = s1.charAt(0);\n  let curr = c0;\n  let prev = c0;\n  let prev_count = 1;\n  for (let i = 1; i < min; i++) {\n    curr = s0.charAt(i);\n    if (curr === prev) {\n      prev_count++;\n    } else {\n      prev = curr;\n      prev_count = 1;\n    }\n  }\n  const curr_count = 1;\n  let next;\n  for (let i = 1; i < len1; i++) {\n    curr = s1.charAt(i);\n    if (curr === prev) {\n      curr_count++;\n    } else {\n      next = curr;\n      curr_count = 1;\n    }\n  }\n  while (curr!== next) {\n    curr = next;\n    prev = next;\n    prev_count = next_count;\n    next = s1.charAt(0);\n    next_count = 1;\n    for (let i = 1; i < len1; i++) {\n      curr = s1.charAt(i);\n      if (curr === prev) {\n        next"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\n/*Return n-th Fibonacci number.\n  >>> fib2(10)\n  55\n  >>> fib2(1)\n  1\n  >>> fib2(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  let f1 = 1;\n  let f2 = 1;\n  let f3 = 1;\n  for (let i = 1; i < n; i++) {\n    f1 = f2;\n    f2 = f3;\n    f3 = f1 + f2;\n  }\n  return f3;\n};\n\nconsole.log(fib(10));\nconsole.log(fib(1));\nconsole.log(fib(8));\nconsole.log(fib2(10));\nconsole.log(fib2(1));\nconsole.log(fib2(8));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  let stack = [];\n  for (let char of brackets) {\n    if (char === \"<\") {\n      stack.push(\"<\");\n    } else if (char === \">\") {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        stack.pop();\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(correct_bracketing(\"<>\")); // true\nconsole.log(correct_bracketing(\"<<<\")); // false\nconsole.log(correct_bracketing(\"<><\")); // false\nconsole.log(correct_bracketing(\"<>\")); // false\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  if (!Array.isArray(l)) {\n    return false\n  }\n  if (l.length === 1) {\n    return true\n  }\n  if (l.length === 2) {\n    return l[0] <= l[1]\n  }\n  return l[l.length - 1] <= l[l.length - 2]\n}\n\nmodule.exports = monotonic\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const list1 = Array.from(l1)\n  const list2 = Array.from(l2)\n  const result = []\n\n  const sort = (a, b) => a < b? -1 : a > b? 1 : 0\n\n  const sortBy = (a, b) => [a, b].sort(sort)\n\n  const uniq = (a, b) => {\n    if (a === b) {\n      return true\n    }\n\n    if (a === undefined) {\n      return b === undefined\n    }\n\n    if (b === undefined) {\n      return a === undefined\n    }\n\n    return false\n  }\n\n  const intersect = (a, b) => {\n    const l = []\n\n    for (const i of a) {\n      if (uniq(i, b) === false) {\n        l.push(i)\n      }\n    }\n\n    return l\n  }\n\n  const isIntersect = (a, b) => {\n    return intersect(a, b).length > 0\n  }\n\n  const isUnion = (a, b) => {\n    if (a.length === 0) {\n      return false\n    }\n\n    if (b.length === 0) {\n      return false\n    }\n\n    if (isIntersect(a, b) === true) {\n      return true\n    }\n\n    return false\n  }\n\n  const uniqBy = (f) => {\n    const a = Array.from(list1)\n\n    return a.sort((a, b) => {\n      return sortBy(f(a), f(b))\n    })\n  }\n\n  const uniqByIndex = (f) => {\n    const a = Array.from(list1)\n\n    return a.sort((a, b) => {\n      const indexA = f(a)\n      const indexB = f(b)\n\n      return indexA - indexB\n    })\n  }\n\n  const remove = (list, el) => {\n    const index = list.indexOf(el)\n\n    if (index === -1) {\n      return false\n    }\n\n    list.splice(index, 1)\n\n    return true\n  }\n\n  const uniqList = (list) => {\n    const a = []\n\n    for (const i of list) {\n      if (uniq(a, i) === false) {\n        a.push(i)\n      }\n    }\n\n    return a\n  }\n\n  for (let i = 0; i < list2.length; i++) {\n    const item = list2[i]\n    const index = list1.indexOf(item)\n\n    if (index === -1) {\n      result.push(item)\n    } else {\n      const item1 = list1[index]\n      if (uniq(item1, item) === false) {\n        result.push(item1)\n      }\n    }\n  }\n\n  return result\n}\n\nmodule.exports = common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  if (n === 1) return 1\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_without_if = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\n/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor_without_while = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    i += 1\n  }\n  return n\n}\n\nconst largest_prime_factor_without_if_else = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    else if (n % (i + 1) === 0) {\n      return n //n is prime\n    }\n    i += 1\n  }\n  return n\n}\n\nconst largest_prime_factor_without_while_else = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    else if (n % (i + 1) === 0) {\n      return n //n is prime\n    }\n    i += 1\n  }\n  return n\n}\n\nconst largest_prime_factor_without_if_else_while = (n) => {\n  let i = 2\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return i\n    }\n    else if (n % (i + 1) === 0) {\n      return n //n is prime\n    }\n    i += 1\n  }\n  return n\n}\n\nexport default largest_prime_factor\nexport { largest_prime_factor, largest_prime_factor_without_if, largest_prime_factor_without_while, largest_prime_factor_without_if_else, largest_prime_factor_without_while_else, largest_prime_factor_without_if_else_while }\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n/*\n  sum_to_n_2 is a function that sums numbers from 1 to n.\n  >>> sum_to_n_2(30)\n  465\n  >>> sum_to_n_2(100)\n  5050\n  >>> sum_to_n_2(5)\n  15\n  >>> sum_to_n_2(10)\n  55\n  >>> sum_to_n_2(1)\n  1\n  */\nconst sum_to_n_2 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n}\n\n/*\n  sum_to_n_3 is a function that sums numbers from 1 to n.\n  >>> sum_to_n_3(30)\n  465\n  >>> sum_to_n_3(100)\n  5050\n  >>> sum_to_n_3(5)\n  15\n  >>> sum_to_n_3(10)\n  55\n  >>> sum_to_n_3(1)\n  1\n  */\nconst sum_to_n_3 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i);\n  }\n  return sum;\n}\n\nconst sum_to_n_4 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i;\n  }\n  return sum;\n}\n\n/*\n  sum_to_n_5 is a function that sums numbers from 1 to n.\n  >>> sum_to_n_5(30)\n  465\n  >>> sum_to_n_5(100)\n  5050\n  >>> sum_to_n_5(5)\n  15\n  >>> sum_to_n_5(10)\n  55\n  >>> sum_to_n_5(1)\n  1\n  */\nconst sum_to_n_5 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_6 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_7 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_8 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_9 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_10 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_11 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_12 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_13 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_14 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_15 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i * i * i * i * i * i * i;\n  }\n  return sum;\n}\n\nconst sum_to_n_16 = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += (n + 1 - i) * i * i * i * i * i * i * i * i * i * i * i"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  // get the opening and closing brackets\n  const opening_bracket = brackets.match(/\\((.*)\\)/)[1];\n  const closing_bracket = brackets.match(/\\)(.*)/)[1];\n\n  // check that every opening bracket has a corresponding closing bracket\n  for (let i = 0; i < brackets.length - 1; i++) {\n    const opening_bracket_index = brackets.indexOf(opening_bracket, i);\n    const closing_bracket_index = brackets.indexOf(closing_bracket, i);\n    if (opening_bracket_index == -1 || closing_bracket_index == -1) {\n      return false;\n    }\n  }\n\n  // check that every opening bracket has a corresponding closing bracket\n  for (let i = 0; i < brackets.length - 1; i++) {\n    const opening_bracket_index = brackets.indexOf(opening_bracket, i);\n    const closing_bracket_index = brackets.indexOf(closing_bracket, i);\n    if (opening_bracket_index == -1 || closing_bracket_index == -1) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * Function to get the brackets that contain the given string.\n *\n * @param {string} string - a string of \"(\" and \")\".\n * @return {array} - an array of strings containing opening and closing brackets.\n */\nconst brackets = (string) => {\n  const brackets = [];\n\n  // get the opening and closing brackets\n  const opening_bracket = string.match(/\\((.*)\\)/)[1];\n  const closing_bracket = string.match(/\\)(.*)/)[1];\n\n  // add the opening and closing brackets to the array\n  brackets.push(opening_bracket);\n  brackets.push(closing_bracket);\n\n  return brackets;\n};\n\n/**\n * Function to count the brackets in a string.\n *\n * @param {string} string - a string of \"(\" and \")\".\n * @return {integer} - the number of brackets.\n */\nconst countBrackets = (string) => {\n  const brackets = brackets(string);\n  return brackets.length;\n};\n\n/**\n * Function to count the number of opening brackets in a string.\n *\n * @param {string} string - a string of \"(\" and \")\".\n * @return {integer} - the number of opening brackets.\n */\nconst countOpeningBrackets = (string) => {\n  const brackets = brackets(string);\n  const opening_bracket = brackets[0];\n  return brackets.indexOf(opening_bracket);\n};\n\n/**\n * Function to count the number of closing brackets in a string.\n *\n * @param {string} string - a string of \"(\" and \")\".\n * @return {integer} - the number of closing brackets.\n */\nconst countClosingBrackets = (string) => {\n  const brackets = brackets(string);\n  const closing_bracket = brackets[1];\n  return brackets.indexOf(closing_bracket);\n};\n\n/**\n * Function to count the number of brackets in a string.\n *\n * @param {string} string - a string of \"(\" and \")\".\n * @return {integer} - the number of brackets.\n */\nconst countBracketsInString = (string) => {\n  const brackets = brackets(string);\n  return brackets.length;\n};\n\nmodule.exports = {\n  brackets,\n  correct_bracketing,\n  countBrackets,\n  countOpeningBrackets,\n  countClosingBrackets,\n  countBracketsInString,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let n = xs.length - 1;\n  return [xs[n],...xs.slice(0, n)];\n};\n\n// Derivative of xs with respect to x\nconst derivativeWithX = (xs, x) => {\n  let n = xs.length - 1;\n  return [xs[n],...xs.slice(0, n)];\n};\n\nconst derivativeWithXAndY = (xs, ys) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n)];\n};\n\nconst derivativeWithXY = (xs, ys, zs) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n]];\n};\n\n// Derivative of xs with respect to x and y\nconst derivativeWithXYAndX = (xs, ys, zs, x) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x];\n};\n\n// Derivative of xs with respect to x, y and z\nconst derivativeWithXYZ = (xs, ys, zs, x, y) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y];\n};\n\n// Derivative of xs with respect to x, y, z and z\nconst derivativeWithXYZAndX = (xs, ys, zs, x, y, z) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z];\n};\n\n// Derivative of xs with respect to x, y, z, and z\nconst derivativeWithXYZAndXAndX = (xs, ys, zs, x, y, z, x2) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2];\n};\n\nconst derivativeWithXYZAndXAndXY = (xs, ys, zs, x, y, z, x2, y2) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2, y2];\n};\n\n// Derivative of xs with respect to x, y, z, x and y\nconst derivativeWithXYZAndXAndXY = (xs, ys, zs, x, y, z, x2, y2) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2, y2];\n};\n\n// Derivative of xs with respect to x, y, z, x, y and z\nconst derivativeWithXYZAndXAndXYAndX = (xs, ys, zs, x, y, z, x2, y2, z2) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2, y2, z2];\n};\n\n// Derivative of xs with respect to x, y, z, x, y, z and z\nconst derivativeWithXYZAndXAndXYAndXAndZ = (xs, ys, zs, x, y, z, x2, y2, z2) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2, y2, z2];\n};\n\n// Derivative of xs with respect to x, y, z, x, y, z, and z\nconst derivativeWithXYZAndXAndXYAndXAndZ = (xs, ys, zs, x, y, z, x2, y2, z2, z3) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2, y2, z2, z3];\n};\n\n// Derivative of xs with respect to x, y, z, x, y, z, x and y\nconst derivativeWithXYZAndXAndXYAndXAndY = (xs, ys, zs, x, y, z, x2, y2, z2, y3) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2, y2, z2, y3];\n};\n\n// Derivative of xs with respect to x, y, z, x, y, z, x, y and z\nconst derivativeWithXYZAndXAndXYAndXAndY = (xs, ys, zs, x, y, z, x2, y2, z2, y3, z3) => {\n  let n = xs.length - 1;\n  return [ys[n],...ys.slice(0, n), zs[n], x, y, z, x2, y2, z2, y3, z3];\n};\n\n// Derivative of xs with respect to x, y, z, x, y, z, x, y, z and z\nconst derivativeWithXYZAndXAndXYAndXAndYAndZ = (xs, ys, zs, x, y, z, x2, y2, z2, y3, z3) => {\n  let n = xs.length - 1;\n  return [ys[n],..."}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 1\n  } else {\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n  }\n}\n\nconsole.log(fibfib(2))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n  }\n  if (s.length > 1 && s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*Write a function sort_string which takes a string as input and returns\n  the string in sorted order. The given string can have characters\n  in any order. However, any sequence of repeated characters (e.g. \"abcabc\"\n  or \"cabcabc\") must be sorted in ascending order.\n\n  Example:\n  >>> sort_string(\"cabcabc\")\n  \"cabcabc\"\n  >>> sort_string(\"abcabc\")\n  \"abcabc\"\n  >>> sort_string(\"cabac\")\n  \"cabac\"\n  */\nconst sort_string = (s) => {\n  let s_array = s.split('')\n  let sorted_array = []\n  for (let i = 0; i < s_array.length; i++) {\n    let element = s_array[i]\n    let current_index = i\n    let count = 0\n    while (current_index >= 0 && count < s_array.length) {\n      if (sorted_array[current_index] === undefined) {\n        sorted_array[current_index] = element\n        count++\n      } else {\n        let compare_string = sorted_array[current_index]\n        let compare_index = sorted_array[current_index].length - 1\n        while (compare_index >= 0 && compare_string[compare_index] === element[compare_index]) {\n          compare_index--\n        }\n        if (compare_index < 0) {\n          sorted_array[current_index] = element\n          count++\n        } else {\n          sorted_array[current_index] = element[0] + sorted_array[current_index].substr(compare_index + 1)\n          count++\n        }\n      }\n      current_index--\n    }\n  }\n  return sorted_array.join('')\n}\n\n/*Write a function is_palindrome which takes a string as input and returns\n  true if the given string is a palindrome.\n\n  Example:\n  >>> is_palindrome(\"abc\")\n  True\n  >>> is_palindrome(\"bac\")\n  False\n  >>> is_palindrome(\"cba\")\n  True\n  */\nconst is_palindrome = (s) => {\n  let s_array = s.split('')\n  for (let i = 0; i < s_array.length; i++) {\n    if (s_array[i]!== s_array[s_array.length - i - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function is_palindrome_array which takes an array of strings as input\n  and returns true if all of the strings in the array are palindromes.\n\n  Example:\n  >>> is_palindrome_array([\"abc\", \"bac\", \"cba\"])\n  True\n  >>> is_palindrome_array([\"cabac\", \"cba\", \"cac\"])\n  False\n  */\nconst is_palindrome_array = (array) => {\n  for (let i = 0; i < array.length - 1; i++) {\n    if (array[i]!== array[array.length - i - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n/*Write a function find_sub_string that takes a string and a string\n  as input and returns the first occurence of the given string in the\n  given string.\n\n  Example:\n  >>> find_sub_string(\"This is a string\", \"string\")\n  \"This is a string\"\n  >>> find_sub_string(\"This is a string\", \"s\")\n  \"This is a string\"\n  >>> find_sub_string(\"This is a string\", \"This is a\")\n  \"This is a string\"\n  */\nconst find_sub_string = (s, substr) => {\n  return s.indexOf(substr)\n}\n\n/*Write a function string_to_num which takes a string as input and\n  returns the corresponding number.\n\n  Example:\n  >>> string_to_num(\"123\")\n  123\n  >>> string_to_num(\"1a23\")\n  1a23\n  >>> string_to_num(\"12a3\")\n  12a3\n  >>> string_to_num(\"1a23\")\n  1a23\n  >>> string_to_num(\"A1\")\n  A1\n  >>> string_to_num(\"A1a23\")\n  A1a23\n  >>> string_to_num(\"0\")\n  0\n  >>> string_to_num(\"\")\n  0\n  */\nconst string_to_num = (s) => {\n  let n = 0\n  for (let i = 0; i < s.length; i++) {\n    n = n * 10 + parseInt(s[i], 10)\n  }\n  return n\n}\n\n/*Write a function string_to_bool which takes a string as input and\n  returns the corresponding boolean.\n\n  Example:\n  >>> string_to_bool(\"True\")\n  True\n  >>> string_to_bool(\"False\")\n  False\n  >>> string_to_bool(\"True\")\n  True\n  >>> string_to_bool(\"False\")\n  False\n  >>> string_to_bool(\"\")\n  False\n  >>> string_to_bool(\"true\")\n  True\n  */\nconst string_to_bool = (s"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  const digits = [];\n  for (let i = 0; i < x.length; i++) {\n    digits[i] = x[x.length - i - 1];\n  }\n\n  if (shift < x.length) {\n    return digits.reverse().join('');\n  }\n\n  return digits.reverse().join('');\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left < s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray2 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left <= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray3 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left >= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray4 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left <= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray5 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left <= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray6 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left <= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray7 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left >= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray8 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left >= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray9 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left <= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray10 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for (let i = 0; i < n; i++) {\n    const s = array[i];\n    const s_left = s[0];\n    const s_right = s[1];\n    if (s_left <= s_right) {\n      result += 1;\n    }\n  }\n\n  return result;\n};\n\n// https://www.hackerrank.com/challenges/sherlock-and-array\nconst sherlockAndArray11 = (array) => {\n  const n = array.length;\n  let result = 0;\n  for ("}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  const char_arr = s.split(\"\");\n  const sum = char_arr.map((x) => x.charCodeAt(0)).reduce((acc, x) => acc + x, 0);\n  return sum;\n};\n\nconsole.log(digit_sum(\"abAB\"));\nconsole.log(digit_sum(\"abcCd\"));\nconsole.log(digit_sum(\"helloE\"));\nconsole.log(digit_sum(\"woArBld\"));\nconsole.log(digit_sum(\"aAaaaXa\"));\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const string = s.split('');\n  let total_fruit = 0;\n  for (let i = 0; i < string.length; i++) {\n    total_fruit += string[i] - 'a';\n  }\n  return total_fruit / n;\n};\n\nfruit_distribution('3 apples and 6 oranges', 19);\nfruit_distribution('2 apples and 3 oranges', 3);\nfruit_distribution('2 apples and 2 oranges', 100);\nfruit_distribution('3 apples and 1 oranges', 120);\nfruit_distribution('5 apples and 1 oranges', 120);\nfruit_distribution('3 apples and 2 oranges', 120);\nfruit_distribution('5 apples and 5 oranges', 120);\nfruit_distribution('4 apples and 3 oranges', 120);\nfruit_distribution('2 apples and 3 oranges', 120);\nfruit_distribution('5 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('1 apples and 1 oranges', 120);\nfruit_distribution('2 apples and 2 oranges', 120);\nfruit_distribution('2 apples and 2 oranges', 120);\nfruit_distribution('2 apples and 2 oranges', 120);\nfruit_distribution('2 apples and 2 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('1 apples and 1 oranges', 120);\nfruit_distribution('2 apples and 2 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3 apples and 3 oranges', 120);\nfruit_distribution('3"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const arrSize = arr.length;\n\n  if (arrSize === 0) {\n    return [];\n  }\n\n  if (arrSize === 1) {\n    return [arr[0], 0];\n  }\n\n  let node = arr[0];\n  let result = [node, 0];\n\n  for (let i = 1; i < arrSize; i++) {\n    if (arr[i] === 0) {\n      continue;\n    }\n\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < result[0]) {\n        result = [arr[i], i];\n      }\n    }\n  }\n\n  return result;\n};\n\nconst main = () => {\n  let arr = [4, 2, 3, 1, 2, 5, 0, 3, 0, 4, 2];\n  let result = pluck(arr);\n  console.log(`The first node in the sorted tree has value ${result[0]}`);\n  console.log(`The index of the first node in the sorted tree is ${result[1]}`);\n\n  arr = [1, 2, 3];\n  result = pluck(arr);\n  console.log(`The first node in the sorted tree has value ${result[0]}`);\n  console.log(`The index of the first node in the sorted tree is ${result[1]}`);\n\n  arr = [];\n  result = pluck(arr);\n  console.log(`The first node in the sorted tree has value ${result[0]}`);\n  console.log(`The index of the first node in the sorted tree is ${result[1]}`);\n\n  arr = [5, 0, 3, 0, 4, 2];\n  result = pluck(arr);\n  console.log(`The first node in the sorted tree has value ${result[0]}`);\n  console.log(`The index of the first node in the sorted tree is ${result[1]}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const lstLength = lst.length\n  let i = 0\n  let curr = -1\n  let currFreq = 0\n\n  for (i; i < lstLength; i += 1) {\n    if (lst[i] > 0) {\n      curr = lst[i]\n      currFreq = 1\n    } else if (lst[i] === 0) {\n      if (currFreq > 0) {\n        currFreq += 1\n      } else {\n        currFreq = 0\n      }\n    } else if (lst[i] < 0) {\n      if (currFreq > 0) {\n        currFreq -= 1\n      } else {\n        currFreq = 0\n      }\n    }\n  }\n\n  return (currFreq > 0)? curr : -1\n}\n\nconsole.log(search([-1, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  if (lst.length === 0) {\n    return lst\n  }\n\n  const head = lst[0]\n  let sorted = lst\n  const sort = (a, b) => a - b\n  sorted = sorted.sort((a, b) => sort(a, b))\n\n  while (sorted.length > 1) {\n    sorted = sorted.map((val, index) => {\n      if (index + 1 === sorted.length) {\n        return val\n      }\n      return sorted[index + 1]\n    })\n  }\n\n  return [head]\n   .concat(sorted)\n   .concat(lst.slice(1))\n}\n\nexport default strange_sort_list\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  // validate\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (Math.abs(a - b) > c || Math.abs(b - c) > a || Math.abs(a - c) > b) {\n    return -1;\n  }\n\n  const s = (a + b + c) / 2;\n\n  return (Math.sqrt(s * (s - a) * (s - b) * (s - c)) * 2) / 3;\n};\n\nconst triangle_area_2 = (a, b, c) => {\n  // validate\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (Math.abs(a - b) > c || Math.abs(b - c) > a || Math.abs(a - c) > b) {\n    return -1;\n  }\n\n  const s = (a + b + c) / 2;\n\n  return (Math.pow(s * (s - a) * (s - b) * (s - c), 1 / 3) * 2) / 3;\n};\n\nconst triangle_area_3 = (a, b, c) => {\n  // validate\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (Math.abs(a - b) > c || Math.abs(b - c) > a || Math.abs(a - c) > b) {\n    return -1;\n  }\n\n  const s = (a + b + c) / 2;\n\n  return (Math.pow(s * (s - a) * (s - b) * (s - c), 1 / 3) * 2) / 3;\n};\n\nconst triangle_area_4 = (a, b, c) => {\n  // validate\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (Math.abs(a - b) > c || Math.abs(b - c) > a || Math.abs(a - c) > b) {\n    return -1;\n  }\n\n  const s = (a + b + c) / 2;\n\n  return (Math.pow(s * (s - a) * (s - b) * (s - c), 1 / 3) * 2) / 3;\n};\n\nconst triangle_area_5 = (a, b, c) => {\n  // validate\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (Math.abs(a - b) > c || Math.abs(b - c) > a || Math.abs(a - c) > b) {\n    return -1;\n  }\n\n  const s = (a + b + c) / 2;\n\n  return (Math.pow(s * (s - a) * (s - b) * (s - c), 1 / 3) * 2) / 3;\n};\n\nconst triangle_area_6 = (a, b, c) => {\n  // validate\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1;\n  }\n  if (Math.abs(a - b) > c || Math.abs(b - c) > a || Math.abs(a - c) > b) {\n    return -1;\n  }\n\n  const s = (a + b + c) / 2;\n\n  return (Math.pow(s * (s - a) * (s - b) * (s - c), 1 / 3) * 2) / 3;\n};\n\nexport default triangle_area;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  let result = true;\n  if (!Array.isArray(q) || q.length <= 1) {\n    result = false;\n  } else if (q.length === 2) {\n    result = q[0] === q[1];\n  } else if (q.length === 3) {\n    result = q[0] === q[1] && q[1] === q[2] && q[0] + q[1] + q[2] <= w;\n  } else if (q.length === 4) {\n    result = q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[0] + q[1] + q[2] + q[3] <= w;\n  } else if (q.length === 5) {\n    result = q[0] === q[1] && q[1] === q[2] && q[2] === q[3] && q[3] === q[4] && q[0] + q[1] + q[2] + q[3] + q[4] <= w;\n  } else {\n    result = false;\n  }\n  return result;\n};\n\nconsole.log(will_it_fly([3, 2, 3], 9));\nconsole.log(will_it_fly([3], 5));\nconsole.log(will_it_fly([3, 2, 3, 2, 3], 9));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  const count = arr.length;\n  const result = count - 1;\n  for (let i = 0; i < count / 2; i++) {\n    if (arr[i]!== arr[count - 1 - i]) {\n      result = Math.min(result, i);\n    }\n  }\n  return result;\n};\n\nconsole.log(smallest_change([1, 2, 3, 2, 1])); // 1\nconsole.log(smallest_change([1, 2, 3, 4, 3, 2, 2])); // 1\nconsole.log(smallest_change([1, 2, 3, 2, 1])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  if (!lst1.length ||!lst2.length) return lst1;\n  const same = lst1.every((v) => lst2.includes(v));\n  if (same) return lst1;\n  const diff = lst1.filter((v) =>!lst2.includes(v));\n  return diff.length? diff : lst1;\n};\n\nexport default total_match;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  const divisors = get_divisors(a);\n  return divisors.every((divisor) => {\n    return a % divisor === 0;\n  });\n};\n\nconst get_divisors = (a) => {\n  const divisors = [];\n  for (let i = 2; i <= Math.sqrt(a); i++) {\n    if (a % i === 0) {\n      divisors.push(i);\n      divisors.push(a / i);\n    }\n  }\n  return divisors;\n};\n\nexport default is_multiply_prime;\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  const y = Math.pow(n, x);\n  return y === x? true : false;\n};\n\nconsole.log(is_simple_power(1, 4));\nconsole.log(is_simple_power(2, 2));\nconsole.log(is_simple_power(8, 2));\nconsole.log(is_simple_power(3, 2));\nconsole.log(is_simple_power(3, 1));\nconsole.log(is_simple_power(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  const arr = Array.from(Array(a)).map((_, i) => i);\n  const res = arr.reduce((sum, n) => sum + (n * n * n), 0);\n  return a === res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  const hex_key_list = []\n\n  for (let i = 0; i < num.length; i++) {\n    let current_hex = num[i]\n    if (current_hex.toLowerCase() === 'a' || current_hex.toLowerCase() === 'b' || current_hex.toLowerCase() === 'c' || current_hex.toLowerCase() === 'd' || current_hex.toLowerCase() === 'e' || current_hex.toLowerCase() === 'f') {\n      if (current_hex.toLowerCase() === 'a' || current_hex.toLowerCase() === 'b') {\n        current_hex = '0'\n      }\n      if (current_hex.toLowerCase() === 'c' || current_hex.toLowerCase() === 'd') {\n        current_hex = '1'\n      }\n      if (current_hex.toLowerCase() === 'e' || current_hex.toLowerCase() === 'f') {\n        current_hex = '2'\n      }\n      hex_key_list.push(parseInt(current_hex, 16))\n    }\n  }\n\n  return hex_key_list.reduce((acc, x) => acc + x)\n}\n\n/*\n  Write a function that takes a number N and returns the sum of all primes up to and including N.\n  Note that if N is a prime then the sum of the primes up to and including N will be N itself.\n  */\nconst prime_sum = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (isPrime(i)) {\n      sum += i\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the sum of the digits in a number.\n  Note that if the number is a prime then the sum of the digits in that number will be itself.\n  */\nconst sum_digits = (num) => {\n  let sum = 0\n  for (let i = 0; i < num.length; i++) {\n    sum += num[i]\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of prime numbers that are greater than N.\n  */\nconst count_primes = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of prime numbers that are less than N.\n  */\nconst count_non_primes = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (!isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of digits that are primes.\n  */\nconst count_primes_digits = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of digits that are non primes.\n  */\nconst count_non_primes_digits = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (!isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of digits that are primes.\n  */\nconst count_primes_hex = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of digits that are non primes.\n  */\nconst count_non_primes_hex = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (!isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of digits that are primes.\n  */\nconst count_primes_decimal = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of digits that are non primes.\n  */\nconst count_non_primes_decimal = (num) => {\n  let sum = 0\n  for (let i = 1; i <= num; i++) {\n    if (!isPrime(i)) {\n      sum++\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function that returns the number of hexadecimal digits that are primes.\n  */\nconst count_primes_hex_key ="}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  if(typeof decimal!== 'number') {\n    throw new TypeError('decimal is not a number')\n  }\n  const decimal_num = decimal.toString(2)\n  const decimal_bin = decimal_num.split('')\n  const length = decimal_bin.length\n  let binary = ''\n  for(let i=0; i<length; i++) {\n    binary += (decimal_bin[i] == '1')? '1' : '0'\n  }\n  const bin_len = binary.length\n  const extra_bits = (bin_len % 8)\n  let extra_char = ''\n  if(extra_bits!== 0) {\n    extra_char = '0'\n  }\n  for(let i=0; i<(extra_bits); i++) {\n    extra_char += 'b'\n  }\n  return `${extra_char}${binary}db`\n}\n\nconsole.log(decimal_to_binary(15))\nconsole.log(decimal_to_binary(32))\nconsole.log(decimal_to_binary(25))\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n    if (s.length < 3) return false;\n    const dict = {};\n    for (let i = 0; i < 3; i++) dict[s[i]] = true;\n    for (let i = 3; i < s.length; i++) {\n        if (dict[s[i]]) return true;\n        dict[s[i]] = false;\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const sort_grades = grades.sort((a, b) => a - b);\n  const len = grades.length;\n  let max_score = 0;\n  let max_index = 0;\n  let max_letter = 'D';\n  for (let i = 0; i < len; i++) {\n    if (max_score < grades[i]) {\n      max_score = grades[i];\n      max_index = i;\n      max_letter = 'A';\n    } else if (max_score === grades[i]) {\n      max_letter = 'A';\n    }\n  }\n  return [max_letter, max_score];\n};\n\n/*\n  It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst letter_grade = (grades) => {\n  const sort_grades = grades.sort((a, b) => a - b);\n  const len = grades.length;\n  let max_score = 0;\n  let max_index = 0;\n  let max_letter = 'D';\n  for (let i = 0; i < len; i++) {\n    if (max_score < grades[i]) {\n      max_score = grades[i];\n      max_index = i;\n      max_letter = 'A';\n    } else if (max_score === grades[i]) {\n      max_letter = 'A';\n    }\n  }\n  return [max_letter, max_score];\n};\n\nconst test_grade = (grades) => {\n  const sort_grades = grades.sort((a, b) => a - b);\n  const len = grades.length;\n  let max_score = 0;\n  let max_index = 0;\n  let max_letter = 'D';\n  for (let i = 0; i < len; i++) {\n    if (max_score < grades[i]) {\n      max_score = grades[i];\n      max_index = i;\n      max_letter = 'A';\n    } else if (max_score === grades[i]) {\n      max_letter = 'A';\n    }\n  }\n  return [max_letter, max_score];\n};\n\n/*\n  Let's write the function.\n  */\n\nlet grades = [4.0, 3, 1.7, 2, 3.5];\n\nconst [max_letter, max_score] = letter_grade(grades);\nconsole.log(`Letters: ${max_letter}`);\nconsole.log(`Max score: ${max_score}`);\n\nconst [max_letter, max_score] = numerical_letter_grade(grades);\nconsole.log(`Letters: ${max_letter}`);\nconsole.log(`Max score: ${max_score}`);\n\nconst [max_letter, max_score] = test_grade(grades);\nconsole.log(`Letters: ${max_letter}`);\nconsole.log(`Max score: ${max_score}`);\n\n/*\n  Let's write the function.\n  */\n\nconst [max_letter, max_score] = numerical_letter_grade(grades);\nconsole.log(`Letters: ${max_letter}`);\nconsole.log(`Max score: ${max_score}`);\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n  const n = parseInt(string);\n  if (!n) return false;\n  const prime_list = [];\n  const d = Math.sqrt(n);\n  for (let i = 2; i <= d; i++) {\n    if (n % i === 0) {\n      prime_list.push(i);\n    }\n  }\n  return prime_list.indexOf(n) === -1;\n};\n\nconst prime_number = (number) => {\n  return prime_length(number.toString());\n};\n\nmodule.exports = prime_number;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  const starts_one_ends_result = [];\n  for (let i = 1; i <= n; i++) {\n    const starts_one = [];\n    const ends_one = [];\n    for (let j = 0; j < i; j++) {\n      starts_one.push(1);\n      ends_one.push(1);\n    }\n    starts_one_ends_result.push(starts_one.length);\n    starts_one_ends_result.push(ends_one.length);\n  }\n  return starts_one_ends_result;\n};\n\nexport default starts_one_ends(10);\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  \n  while (N > 0) {\n    sum += N % 2;\n    N = Math.floor(N / 2);\n  }\n  \n  return sum.toString(2);\n};\n\nconsole.log(solve(147));\nconsole.log(solve(1500));\nconsole.log(solve(1864));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 9\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 11\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 12\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 13\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 14\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 15\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 16\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 17\n  */\nconst add = (lst) => {\n  let carry = 0\n  for (let i = 0; i < lst.length; i++) {\n    carry += lst[i]\n    lst[i] = carry % 2\n    carry = Math.floor(carry / 2)\n  }\n  return lst\n}\n\nadd([4, 2, 6, 7])\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7])"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n  let str = ''\n  for (let i = 0; i < s.length; i++) {\n    let char = s[i]\n    if (char ==='') {\n      str +=''\n    } else if (char ==='') {\n      str +=''\n    } else if (char ==='') {\n      str +=''\n    } else if (char ==='') {\n      str +=''\n    } else if (char ==='') {\n      str +=''\n    } else {\n      str += char.toUpperCase()\n    }\n  }\n  return str\n}\n\nconsole.log(anti_shuffle('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  const result = [];\n  for (let i = 0; i < lst.length; i++) {\n    const l = lst[i];\n    const row = [...l];\n    const idx = row.findIndex(x => x === x);\n    if (idx!== -1) {\n      result.push([i, idx]);\n    }\n  }\n  return result.sort((a, b) => {\n    const row_a = a[0];\n    const row_b = b[0];\n    if (row_a === row_b) {\n      return a[1] - b[1];\n    }\n    return row_b - row_a;\n  }).sort((a, b) => {\n    const row_a = a[0];\n    const row_b = b[0];\n    if (row_a === row_b) {\n      return b[1] - a[1];\n    }\n    return row_a - row_b;\n  });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  if (array.length <= 1) return array;\n  const sum = sum(array);\n  if (sum % 2 === 1) {\n    return sort_array_descending(array);\n  }\n  return sort_array_ascending(array);\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in descending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  * sort_array([2, 4, 3, 0, 1, 5, 6, 7]) => [7, 6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array_descending = (array) => {\n  if (array.length <= 1) return array;\n  const sum = sum(array);\n  if (sum % 2 === 1) {\n    return sort_array_ascending(array);\n  }\n  array.reverse();\n  return array;\n};\n\n/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [0, 1, 2, 3, 4, 5, 6]\n  * sort_array([2, 4, 3, 0, 1, 5, 6, 7]) => [0, 1, 2, 3, 4, 5, 6, 7]\n  */\nconst sort_array_ascending = (array) => {\n  if (array.length <= 1) return array;\n  array.sort((a, b) => a - b);\n  return array;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc = '';\n  for (let i = 0; i < s.length; i++) {\n    enc += alphabet.charAt((alphabet.indexOf(s.charAt(i)) + 1) % 26);\n  }\n  return enc;\n};\n\n/*\nCreate a function decrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters\n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  let alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  let enc = '';\n  for (let i = 0; i < s.length; i++) {\n    enc += alphabet.charAt((alphabet.indexOf(s.charAt(i)) - 1) % 26);\n  }\n  return enc;\n};\n\nmodule.exports = {\n  encrypt,\n  decrypt\n};\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  const next_smallest = (n) => {\n    let index = lst.indexOf(n) + 1;\n    while (index < lst.length && lst[index] < n) {\n      index += 1;\n    }\n    return index < lst.length? lst[index] : null;\n  }\n  return next_smallest(lst);\n}\n\n// console.log(next_smallest([1, 2, 3, 4, 5]));\n// console.log(next_smallest([5, 1, 4, 3, 2]));\n// console.log(next_smallest([]));\n// console.log(next_smallest([1, 1]));<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n    let count = 0\n    let i = 0\n    let c = 0\n    while (i < S.length) {\n        c = S[i]\n        if (c === \"I\" && i + 1 < S.length && S[i+1] === \".\") {\n            count++\n        }\n        i++\n    }\n    return count\n}\n\nconsole.log(is_bored(\"The sky is blue. The sun is shining. I love this weather\"))\nconsole.log(is_bored(\"Hello world\"))\nconsole.log(is_bored(\"This is a test\"))\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    if (x === y + z && x === z + y && x === z - y && x > y && x < z && y > z && y < z) {\n      return true\n    } else {\n      return false\n    }\n  } else {\n    return false\n  }\n}\n\nexport default any_int<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  return message.toLowerCase()\n   .replace(/[aeiou]/g, letter => {\n      let index = message.indexOf(letter);\n      let next = message[index + 1];\n      let prev = message[index - 1];\n      return next.toUpperCase() === prev.toUpperCase()? next.toLowerCase() : letter;\n    });\n};\n\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is a message');\nencode('This is"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const lstLength = lst.length;\n  const largestPrime = largestPrimeInArray(lst);\n  const sumOfDigits = sumOfDigits(largestPrime);\n  return sumOfDigits;\n}\n\nconst largestPrimeInArray = (lst) => {\n  let largestPrime = 1;\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > largestPrime) {\n      largestPrime = lst[i];\n    }\n  }\n  return largestPrime;\n}\n\nconst sumOfDigits = (num) => {\n  let sum = 0;\n  for (let i = 1; i <= num; i++) {\n    sum += num % 10;\n    num = Math.floor(num / 10);\n  }\n  return sum;\n}\n\nconsole.log(largestPrimeInArray([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(largestPrimeInArray([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(largestPrimeInArray([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(largestPrimeInArray([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(largestPrimeInArray([0,81,12,3,1,21]));\nconsole.log(largestPrimeInArray([0,8,1,2,1,7]));<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let all_lower = true\n  let all_upper = true\n  for (let key in dict) {\n    if (key === \"a\" || key === \"A\" || key === \"b\" || key === \"B\") {\n      if (key === \"a\" || key === \"A\") {\n        all_lower = false\n      } else if (key === \"b\" || key === \"B\") {\n        all_upper = false\n      }\n    } else {\n      all_lower = false\n      all_upper = false\n    }\n  }\n  return (all_lower && all_upper)\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"A\":\"banana\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_2 = (dict) => {\n  let all_lower = true\n  let all_upper = true\n  for (let key in dict) {\n    let first_letter = key.charAt(0)\n    if (first_letter === \"a\" || first_letter === \"A\" || first_letter === \"b\" || first_letter === \"B\") {\n      if (first_letter === \"a\" || first_letter === \"A\") {\n        all_lower = false\n      } else if (first_letter === \"b\" || first_letter === \"B\") {\n        all_upper = false\n      }\n    } else {\n      all_lower = false\n      all_upper = false\n    }\n  }\n  return (all_lower && all_upper)\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"A\":\"banana\", \"b\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_3 = (dict) => {\n  let all_lower = true\n  let all_upper = true\n  for (let key in dict) {\n    let first_letter = key.charAt(0)\n    if (first_letter === \"a\" || first_letter === \"A\" || first_letter === \"b\" || first_letter === \"B\") {\n      if (first_letter === \"a\" || first_letter === \"A\") {\n        all_lower = false\n      } else if (first_letter === \"b\" || first_letter === \"B\") {\n        all_upper = false\n      }\n    } else {\n      all_lower = false\n      all_upper = false\n    }\n  }\n  return (all_lower && all_upper)\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\", \"A\":\"banana\", \"b\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case_4 = (dict) => {\n  let all_lower = true\n  let all_upper = true\n  for (let key in dict) {\n    let first_letter = key.charAt(0)\n    if (first_letter === \"a\" || first_letter === \"A\") {\n      all_lower = false\n    } else if (first_letter === \"b\" || first_letter === \"B\") {\n      all_upper = false\n    }\n  }\n  return (all_lower && all_upper)\n}"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n    let i = 1;\n    const prime = [];\n    while (i <= n) {\n        if (isPrime(i)) {\n            prime.push(i);\n            if (prime.length == n) {\n                return prime;\n            }\n        }\n        i++;\n    }\n    return prime;\n}\n\nexport default count_up_to;\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const a = a.toString()\n  const b = b.toString()\n  return a.length < b.length\n   ? multiply(b, a)\n    : multiply(a, b)\n}\n\n// __________________________________________\n// Test Code:  Do not alter code below this line.\n\n/*\n  What is the value of the expression 12 * 709?\n  */\n\nconst product = multiply(12, 709)\n\nassert(product === 926782749,'should be 926782749')\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i += 1) {\n    if (s[i].toUpperCase() === s[i]) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconsole.log(count_upper('aBCdEf')); // 1\nconsole.log(count_upper('abcdefg')); // 0\nconsole.log(count_upper('dBBE')); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  let digits = parseFloat(value).toString().split(\".\")\n  let closest = 0\n  let index = 0\n  let is_first = true\n  let is_second = false\n\n  // Iterate through the digits and look for the closest integer\n  for (let i = 0; i < digits.length; i++) {\n    // Skip the decimal point if we're on it\n    if (i == digits.length - 1) {\n      index = i\n      continue\n    }\n\n    let digit = parseInt(digits[i])\n\n    if (is_first) {\n      closest = closest + digit\n      is_first = false\n    } else if (is_second) {\n      closest = closest - digit\n      is_second = false\n    } else {\n      if (digit < 0) {\n        closest = closest - digit\n      } else {\n        closest = closest + digit\n      }\n    }\n  }\n\n  return closest\n}\n\nmodule.exports = closest_integer\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  if (n === 0) {\n    return [];\n  }\n\n  const pile = [1];\n  const half = n / 2;\n  for (let i = 1; i < half; i++) {\n    const next = (i + 1) % half? (i + 1) : (i - 1);\n    pile.push(pile[next] + 1);\n  }\n\n  return pile;\n};\n\nexport default make_a_pile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n    return s.split(/\\s+/g);\n}\n\n// Your task is to implement a function to split a string into an array of substrings\n// Each substring is a separate word in the input string. The function should return\n// the array of substrings.\nconst split = (s) => {\n    const words = words_string(s);\n    return words;\n}\n\n// The following test cases are given to you.  Write a function to return an array\n// of the substrings of the string after removing the repeated letters from the string.\n// The function should return an array of the substrings of the string after removing\n// the repeated letters from the string.\n// For example:\n// remove_repeats(\"abcdcccc\", \"c\") == [\"ab\", \"d\", \"e\"]\n// remove_repeats(\"abcdcccc\", \"x\") == [\"ab\", \"cd\", \"cc\", \"cc\", \"cc\"]\nconst remove_repeats = (s, substring) => {\n    const word_array = words_string(s);\n    const substrings = [];\n    for (let i = 0; i < word_array.length; i++) {\n        let substring_index = i;\n        let substring_index_prev = i - 1;\n        let word_substring = word_array[i];\n        while (substring_index_prev >= 0 && word_substring == word_array[substring_index_prev]) {\n            substring_index--;\n            substring_index_prev--;\n            word_substring = word_array[substring_index];\n        }\n        substrings.push(word_substring);\n    }\n    return substrings;\n}\n\n// The following test cases are given to you.  Write a function to return an array\n// of the substrings of the string after removing the repeated letters from the string.\n// The function should return an array of the substrings of the string after removing\n// the repeated letters from the string.\n// For example:\n// remove_repeats(\"abcdcccc\", \"c\") == [\"ab\", \"d\", \"e\"]\n// remove_repeats(\"abcdcccc\", \"x\") == [\"ab\", \"cd\", \"cc\", \"cc\", \"cc\"]\nconst remove_repeats_2 = (s, substring) => {\n    const word_array = words_string(s);\n    const substrings = [];\n    let word = \"\";\n    for (let i = 0; i < word_array.length; i++) {\n        if (word_array[i]!= substring) {\n            substrings.push(word);\n            word = word_array[i];\n        }\n    }\n    substrings.push(word);\n    return substrings;\n}\n\nconst remove_repeats_3 = (s, substring) => {\n    const word_array = words_string(s);\n    const substrings = [];\n    let index = -1;\n    let word = \"\";\n    for (let i = 0; i < word_array.length; i++) {\n        if (word_array[i]!= substring) {\n            index = i;\n            word = word_array[i];\n        }\n        else if (index >= 0) {\n            substrings.push(word);\n            index = -1;\n            word = \"\";\n        }\n    }\n    substrings.push(word);\n    return substrings;\n}\n\nconst remove_repeats_4 = (s, substring) => {\n    const word_array = words_string(s);\n    const substrings = [];\n    let index = -1;\n    let word = \"\";\n    let index_prev = -1;\n    for (let i = 0; i < word_array.length; i++) {\n        if (word_array[i]!= substring) {\n            index = i;\n            word = word_array[i];\n            index_prev = index - 1;\n            while (index_prev >= 0 && word_array[index_prev] == substring) {\n                index--;\n                index_prev--;\n                word = word_array[index];\n            }\n            substrings.push(word);\n        }\n    }\n    return substrings;\n}\n\nconst remove_repeats_5 = (s, substring) => {\n    const word_array = words_string(s);\n    const substrings = [];\n    let index = -1;\n    let word = \"\";\n    let index_prev = -1;\n    for (let i = 0; i < word_array.length; i++) {\n        if (word_array[i]!= substring) {\n            index = i;\n            word = word_array[i];\n            index_prev = index - 1;\n            while (index_prev >= 0 && word_array[index_prev] == substring) {\n                index--;\n                index_prev--;\n                word = word_array[index];\n            }\n            substrings.push(word);\n        }\n    }\n    substrings.push(word);\n    return substrings;\n}\n\nconst remove_repeats_6 = (s, substring) => {\n    const word_array = words_string(s);\n    const substrings = [];\n    let index = -1;\n    let word = \"\";\n    let index_prev = -1;\n    for (let i = 0; i < word_array.length; i++) {\n        if (word_array[i]!= substring) {\n            index = i;\n            word = word_array[i];\n            index_prev = index - 1;\n            while (index_prev >= 0 && word_array[index_prev] == substring) {\n                index--;\n                index_prev--;\n                word = word_array[index];\n            }\n            substrings.push(word);\n        }\n    }\n    return substrings;\n}\n\nconsole.log(remove_repeats(\"abcd"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  let max = x;\n  while (max < y) {\n    max += 2;\n  }\n  return max;\n}\n\nconsole.log(choose_num(12, 15));\nconsole.log(choose_num(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let avg = (n + m) / 2\n  let binary_avg = \"\"\n  let i = Math.floor(avg)\n  let j = Math.ceil(avg)\n  while (i <= m && j <= n) {\n    binary_avg += \"1\"\n    i++\n    j++\n  }\n  if (i <= n) {\n    binary_avg += \"0\"\n  }\n  if (j <= m) {\n    binary_avg += \"1\"\n  }\n  return parseInt(binary_avg, 2)\n}\n\nconsole.log(rounded_avg(1, 5))\nconsole.log(rounded_avg(7, 5))\nconsole.log(rounded_avg(10, 20))\nconsole.log(rounded_avg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let sorted = x.sort()\n  const ret = []\n  for(let i=0; i < sorted.length; i++){\n    if(sorted[i].toString().match(/\\d/)){\n      if(sorted[i]%2 === 0){\n        ret.push(sorted[i])\n      }\n    }\n  }\n  return ret\n}\n\nconst solve = (x) => {\n  const sorted = unique_digits(x)\n  const result = []\n  for(let i=0; i < sorted.length; i++){\n    for(let j=0; j < sorted.length; j++){\n      if(i!= j && sorted[i] == sorted[j]){\n        break\n      }\n      if(sorted[i] + sorted[j] == x){\n        result.push([sorted[i], sorted[j]])\n      }\n    }\n  }\n  return result\n}\n\nconst test = (t) => {\n  if(t.length > 100){\n    console.log(t.length)\n    console.log(solve(t))\n  }\n}\n\ntest([8,5,6,3,7])\ntest([1,5,6,3,7,8,9])\ntest([1,5,6,3,7,8,9,10,12,15,16,19,22,25])\ntest([1,5,6,3,7,8,9,10,12,15,16,19,22,25,26])\ntest([1,5,6,3,7,8,9,10,12,15,16,19,22,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127])\ntest([1,5,6,3,7,8,9,10,12,15,16,19,22,25,26,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127])\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  const sorted_arr = sort(arr);\n  const reversed_arr = arr.slice(0).reverse();\n  const reversed_sorted_arr = sort(reversed_arr);\n  const sorted_sorted_arr = sorted_arr.concat(reversed_sorted_arr);\n  const sorted_arr_length = sorted_sorted_arr.length;\n  const max_length = (sorted_arr_length - 1);\n  const result = [];\n  let i = 0;\n  while (i <= max_length) {\n    if (sorted_arr_length!== 0) {\n      result.push(sorted_sorted_arr[i]);\n      i++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of strings, sort the strings alphabetically and then replace each\n  character by its corresponding name from \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n  \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\".\n\n  For example:\n    arr = [\"I\", \"B\", \"T\", \"R\", \"N\", \"A\", \"O\", \"S\", \"K\", \"J\", \"M\", \"P\", \"L\", \"W\", \"C\", \"E\", \"D\"]\n          -> sort arr -> [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n          -> reverse arr -> [\"Z\", \"Y\", \"X\", \"W\", \"V\", \"U\", \"T\", \"S\", \"R\", \"N\", \"M\", \"L\", \"K\", \"J\", \"I\", \"H\", \"G\", \"F\", \"E\", \"D\", \"C\", \"P\", \"O\", \"O\", \"B\", \"A\"]\n    return = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length_with_names = (arr) => {\n  const sorted_arr = sort(arr);\n  const reversed_arr = arr.slice(0).reverse();\n  const reversed_sorted_arr = sort(reversed_arr);\n  const sorted_sorted_arr = sorted_arr.concat(reversed_sorted_arr);\n  const sorted_arr_length = sorted_sorted_arr.length;\n  const max_length = (sorted_arr_length - 1);\n  const result = [];\n  let i = 0;\n  while (i <= max_length) {\n    if (sorted_arr_length!== 0) {\n      result.push(sorted_sorted_arr[i].replace(/\\d/g, (val) => val.toUpperCase()));\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  by_length,\n  by_length_with_names\n};\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i += 2) {\n    result.push(i * factorial(i));\n  }\n  for (let i = 3; i <= n; i += 2) {\n    result.push(result[i - 1] + result[i - 3]);\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  if (n === 0) return 1;\n  return n * factorial(n - 1);\n};\n\nmodule.exports = f;<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n    const range = new Array(n)\n    let index = 1\n    range[0] = 1\n\n    while (index <= n) {\n        let is_odd = false\n        let is_even = false\n        while (index <= n) {\n            if (is_odd) {\n                range[index] = range[index - 1]\n            }\n            is_odd =!is_odd\n            if (is_even) {\n                range[index] = range[index - 1]\n            }\n            is_even =!is_even\n            index++\n        }\n    }\n\n    return range\n}\n\nexport default even_odd_palindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  const result = arr.filter(i => i > 0).reduce((acc, num) => {\n    const numDigits = num.toString().split('').reduce((acc, digit, index) => {\n      if (index < num.toString().length - 1) {\n        return acc + (digit === '-'? -1 : digit.charCodeAt(0));\n      } else {\n        return acc;\n      }\n    }, 0);\n    if (numDigits > acc) {\n      return num;\n    }\n    return acc;\n  }, 0);\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  if (!arr || arr.length === 0) return true\n  \n  let last_ball = arr.pop()\n  let shifted = arr.shift()\n  while (shifted < last_ball) {\n    let last = arr.pop()\n    let temp = arr.shift()\n    arr.unshift(shifted)\n    arr.push(temp)\n    shifted = last\n  }\n  return arr.indexOf(last_ball) === arr.length - 1\n}\n\nconst move_one_ball_test = [3, 4, 5, 1, 2]\nconsole.log(move_one_ball(move_one_ball_test))\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  if(!lst1 ||!lst2) return 'NO';\n  let i = 0,\n    j = 0;\n  for(i = 0, j = 0; i < lst1.length && j < lst2.length; i++, j++) {\n    if(lst1[i]!== lst2[j]) return 'NO';\n  }\n  return 'YES';\n};\n\nconsole.log(exchange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 7, 4]));\nconsole.log(exchange([1, 2, 3, 4], [1, 5, 7, 8]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const lowerCase = test.toLowerCase()\n  let current = {}\n  for (let i = 0; i < lowerCase.length; i++) {\n    const currentLetter = lowerCase[i]\n    if (current[currentLetter] === undefined) {\n      current[currentLetter] = 0\n    }\n    current[currentLetter]++\n  }\n  return current\n}\n\nconst main = () => {\n  const test = 'a b c'\n  console.log(histogram(test))\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n  let i = 0,\n    j = s.length - 1;\n  while (i <= j) {\n    while (s[i] === c[j]) {\n      i++;\n      j--;\n    }\n    if (i > j) {\n      break;\n    }\n    s[i] = s[j];\n    s[j] = c[i];\n    i++;\n    j--;\n  }\n  return {\n    str: s,\n    check: s === c.split('').reverse().join('')\n  };\n};\n\nmodule.exports = reverse_delete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  if (!lst ||!lst.length) return []\n  return lst.map((e) => {\n    if (!e ||!e.length) return \"empty string\"\n    return [\"the number of odd elements \" + (e.length - (e.length % 2) + 1) + \" of the \" + e.length + \"th string of the input.\"].join(\" \")\n  })\n}\n\nexport default odd_count\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n    let sum = 0;\n    for(let i = 0; i < nums.length; i++) {\n        let sub_sum = 0;\n        for(let j = i; j < nums.length; j++) {\n            sub_sum += nums[j];\n            if(sub_sum > sum) {\n                sum = sub_sum;\n            }\n        }\n    }\n    return sum;\n}\n\nconsole.log(min_sub_array_sum([2, 3, 4, 1, 2, 4])); //1\nconsole.log(min_sub_array_sum([-1, -2, -3])); //-6\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  const max_water = 0\n  const min_water = 99999999\n  const min_row = -1\n  const max_row = grid.length - 1\n\n  const length = grid.length\n  for (let row = 0; row <= length - 1; row++) {\n    for (let col = 0; col <= length - 1; col++) {\n      if (grid[row][col] === 0) {\n        const new_water = capacity - grid[row][col]\n        if (new_water >= 0 && new_water <= max_water) {\n          max_water = new_water\n          min_row = row\n          min_col = col\n        }\n      }\n    }\n  }\n\n  if (max_water < 0) {\n    return 0\n  }\n\n  return (max_water - min_water) + 1\n}\n\nconst main = () => {\n  const grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]]\n  const capacity = 1\n  console.log(max_fill(grid, capacity))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  return arr.reduce((prev, curr) => {\n    if (curr === 1) {\n      prev.push(curr)\n    } else if (curr === 0) {\n      prev.push(curr)\n    } else if (curr === -1) {\n      prev.push(curr)\n    } else if (curr < 0) {\n      if (curr + 1 === -1) {\n        prev.push(curr)\n      } else {\n        prev.push(curr + 1)\n      }\n    } else {\n      if (curr + 1 === 1) {\n        prev.push(curr)\n      } else {\n        prev.push(curr + 1)\n      }\n    }\n    return prev\n  })\n}\n\n// test cases\nconst testCases = [\n  [0, 0],\n  [1, 1],\n  [1, 2, 3, 4],\n  [-2, -3, -4, -5, -6],\n  [1, 2, 3, 4, 5],\n  [-6, -5, -4, -3, -2],\n  [1, 0, 2, 3, 4],\n  [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510,"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const cn = n => {\n    return s.match(/[^ ]/g).filter(w => w.length === n);\n  };\n  return cn(2).length? cn(3).concat(cn(2)) : [];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n  let word_length = word.length;\n  let start = word.length - 1;\n  let end = 0;\n  \n  while (start > 0) {\n    if (word[start]!=='') {\n      end = start;\n      break;\n    }\n    start--;\n  }\n  \n  while (end < word_length - 1) {\n    if (word[end]!=='') {\n      return word[end];\n    }\n    end++;\n  }\n  \n  return '';\n};\n\n// tests\ntests.forEach((test) => {\n  console.log(`TESTING get_closest_vowel(${test.word}) = ${get_closest_vowel(test.word)}`);\n});\n\n/*\nINPUT:\n  word = \"yogurt\"\nOUTPUT:\n  \"u\"\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  const stack = [];\n  const len = lst.length;\n  let i = 0;\n  while (i < len) {\n    if (lst[i] === '(') {\n      stack.push(lst[i]);\n    } else {\n      if (stack.length === 0) {\n        return false;\n      } else {\n        const j = stack.pop();\n        if (lst[i] === ')' && j === '(') {\n          return true;\n        }\n      }\n    }\n    i++;\n  }\n  return false;\n};\n\n/*\n  There are a number of pairs of parentheses ( '(' and ')' ). The string\n  inside each pair is called a \"pairs\" string.\n  Given a list of pairs, return the number of strings that can be made\n  by concatenating each pair.\n  For example:\n  Given pairs = [('(()(', ')')], return 3.\n  Note:\n  The length of the given pairs is in range [1, 1000].\n  The length of the strings inside the given pairs is in range [1, 1000].\n  The strings inside the pairs are not necessarily valid parentheses.\n  */\nconst find_pairs = (pairs) => {\n  let count = 0;\n  for (let i = 0; i < pairs.length; i++) {\n    if (match_parens(pairs[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\n// TEST\n\nconst pairs = [\n  ['(()(', ')']\n];\nconsole.log(find_pairs(pairs));\n\n// END TEST\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n  if (k === 1) {\n    return arr.sort().slice(0, 1);\n  }\n  if (k === 2) {\n    return arr.sort().slice(0, 2);\n  }\n  if (k === 3) {\n    return arr.sort().slice(0, 3);\n  }\n\n  const arrSorted = arr.slice().sort();\n\n  return arrSorted.slice(0, k - 1).concat(arrSorted.slice(k - 1));\n};\n\nexport default maximum;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = lst.reduce((acc, i) => i % 2? acc + i : acc, 0);\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  let ret = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_b = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i] - prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_c = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_d = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_e = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_f = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_g = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_h = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_i = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_j = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_k = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_l = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret += arr[i];\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_m = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_n = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_o = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_p = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_q = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i < k; i++) {\n    ret += arr[i];\n    ret -= prev;\n    prev = arr[i];\n  }\n  return ret;\n}\n\nconst add_elements_r = (arr, k) => {\n  let ret = 0;\n  let prev = 0;\n  for (let i = 0; i <"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd = [1];\n  while (n > 1) {\n    let next = n % 2 === 0? n / 2 : 3 * n + 1;\n    odd.push(next);\n    n = next;\n  }\n  return odd.sort();\n};\n\nconsole.log(get_odd_collatz(5));\n\n/*\n  Given a positive integer n, return the number of terms in the collatz sequence.\n\n  Note: \n      1. The terms in the collatz sequence are strictly increasing.\n      2. The sequence always reaches 1.\n      3. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n      4. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n      5. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n      6. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n      7. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n      8. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n      9. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n      10. If the collatz sequence is [1, 3, 8, 13, 21, 34, 55, 89, 144,...], the sequence is:\n        1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,..., 1, 3, 8, 13, 21, 34, 55, 89, 144,...\n*/\nconst get_collatz_len = (n) => {\n  let n_len = 1;\n  while (n > 1) {\n    let next = n % 2 === 0? n / 2 : 3 * n + 1;\n    n_len += 1;\n    n = next;\n  }\n  return n_len;\n};\n\nconsole.log(get_collatz_len(5));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  const regexp = /^\\d{1,2}-\\d{1,2}-\\d{4}$/\n  const regexp_mm = /^\\d{1,2}-/\n  const regexp_dd = /^\\d{1,2}-/\n  const regexp_yyyy = /^\\d{4}$/\n\n  if (!regexp.test(date)) {\n    return false\n  }\n\n  let months = 0\n  let days = 0\n  let year = 0\n  let mm = 0\n  let dd = 0\n\n  months = date.match(regexp_mm)\n  if (months) {\n    mm = months[0].substring(0, 2)\n  }\n\n  days = date.match(regexp_dd)\n  if (days) {\n    dd = days[0].substring(0, 2)\n  }\n\n  year = date.match(regexp_yyyy)\n  if (year) {\n    year = year[0].substring(0, 4)\n  }\n\n  if (mm < 1 || mm > 12) {\n    return false\n  }\n\n  if (dd < 1 || dd > 30) {\n    return false\n  }\n\n  if (dd > days) {\n    return false\n  }\n\n  if (mm > months) {\n    return false\n  }\n\n  if (dd > days) {\n    return false\n  }\n\n  if (mm < 1 || mm > 12) {\n    return false\n  }\n\n  if (year < 1900 || year > 2100) {\n    return false\n  }\n\n  if (year < 2010) {\n    if (mm < 4 || mm > 6 || mm == 7 || mm == 8 || mm == 9 || mm == 10) {\n      return false\n    }\n  }\n\n  if (year >= 2010) {\n    if (mm < 4 || mm > 6 || mm == 7 || mm == 8 || mm == 9 || mm == 10) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconsole.log(valid_date('03-11-2000'))\nconsole.log(valid_date('15-01-2012'))\nconsole.log(valid_date('04-0-2040'))\nconsole.log(valid_date('06-04-2020'))\nconsole.log(valid_date('06/04/2020'))\nconsole.log(valid_date('07/04/2020'))\nconsole.log(valid_date('07/04/2020'))\nconsole.log(valid_date('07/04/2020'))\nconsole.log(valid_date('07/04/2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  return txt.split(/\\s+/g)\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words = (txt) => {\n  const unique = []\n  for (let i = 0; i < txt.length; i++) {\n    if (unique.indexOf(txt[i]) == -1) {\n      unique.push(txt[i])\n    }\n  }\n  return unique\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_2 = (txt) => {\n  return txt.filter((e, i, a) => a.indexOf(e) == i)\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_3 = (txt) => {\n  return txt.reduce((acc, word) => acc.indexOf(word) == -1? acc.concat(word) : [], txt)\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_4 = (txt) => {\n  return txt.reduce((acc, word) => acc.indexOf(word) == -1? acc.concat(word) : [], txt.concat(txt))\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_5 = (txt) => {\n  return txt.reduce((acc, word) => acc.indexOf(word) == -1? acc.concat(word) : [], txt.concat(txt).concat(txt))\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_6 = (txt) => {\n  return txt.reduce((acc, word) => acc.indexOf(word) == -1? acc.concat(word) : [], txt.concat(txt).concat(txt).concat(txt))\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_7 = (txt) => {\n  return txt.reduce((acc, word) => acc.indexOf(word) == -1? acc.concat(word) : [], txt.concat(txt).concat(txt).concat(txt).concat(txt))\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_8 = (txt) => {\n  return txt.reduce((acc, word) => acc.indexOf(word) == -1? acc.concat(word) : [], txt.concat(txt).concat(txt).concat(txt).concat(txt).concat(txt))\n}\n\n/* Given a list of words, return a list of unique words.\n  Examples\n  unique_words([\"abc\", \"def\", \"xyz\", \"bcd\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  unique_words([\"abc\", \"def\", \"xyz\"]) ➞ [\"abc\", \"def\", \"xyz\"]\n  */\nconst unique_words_9 = (txt) => {\n  return txt.reduce((acc, word) => acc.indexOf(word) == -1? acc.concat(word) : [], txt.concat(txt).concat(txt).concat(txt).concat(txt).concat(txt).concat(txt))\n}\n\n/*"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  if (lst.length === 0) {\n    return true\n  }\n  const len = lst.length\n  const sorted = lst.slice()\n   .sort()\n  for (let i = 1; i < len; i++) {\n    if (sorted[i - 1] > sorted[i]) {\n      return false\n    }\n  }\n  return true\n}\n\n/* Given a list of numbers, return the index of the largest number.\n  If there is no largest number, return -1.\n  Examples\n  largest_index([1, 2, 3, 4]) ➞ 4\n  largest_index([1, 2, 3, 2]) ➞ -1\n  largest_index([1, 2, 3, 2, 4]) ➞ 4\n  largest_index([1, 2, 3, 2, 4, 5]) ➞ 4\n  */\nconst largest_index = (lst) => {\n  const len = lst.length\n  let index = -1\n  let largest = 0\n  for (let i = 0; i < len; i++) {\n    if (largest < lst[i]) {\n      index = i\n      largest = lst[i]\n    }\n  }\n  return index\n}\n\n/* Given a list of numbers, return the index of the smallest number.\n  If there is no smallest number, return -1.\n  Examples\n  smallest_index([1, 2, 3, 4]) ➞ 0\n  smallest_index([1, 2, 3, 2]) ➞ -1\n  smallest_index([1, 2, 3, 2, 4]) ➞ 0\n  smallest_index([1, 2, 3, 2, 4, 5]) ➞ 0\n  */\nconst smallest_index = (lst) => {\n  const len = lst.length\n  let index = -1\n  let smallest = Infinity\n  for (let i = 0; i < len; i++) {\n    if (smallest > lst[i]) {\n      index = i\n      smallest = lst[i]\n    }\n  }\n  return index\n}\n\n/* Given a list of numbers, return the smallest number.\n  If there is no smallest number, return -1.\n  Examples\n  smallest_number([1, 2, 3, 4]) ➞ 1\n  smallest_number([1, 2, 3, 2]) ➞ -1\n  smallest_number([1, 2, 3, 2, 4]) ➞ 1\n  smallest_number([1, 2, 3, 2, 4, 5]) ➞ 1\n  */\nconst smallest_number = (lst) => {\n  const len = lst.length\n  let index = -1\n  let smallest = Infinity\n  for (let i = 0; i < len; i++) {\n    if (smallest > lst[i]) {\n      index = i\n      smallest = lst[i]\n    }\n  }\n  return index\n}\n\n/* Given a list of numbers, return the largest number.\n  If there is no largest number, return -1.\n  Examples\n  largest_number([1, 2, 3, 4]) ➞ 4\n  largest_number([1, 2, 3, 2]) ➞ -1\n  largest_number([1, 2, 3, 2, 4]) ➞ 4\n  largest_number([1, 2, 3, 2, 4, 5]) ➞ 5\n  */\nconst largest_number = (lst) => {\n  const len = lst.length\n  let index = -1\n  let largest = 0\n  for (let i = 0; i < len; i++) {\n    if (largest < lst[i]) {\n      index = i\n      largest = lst[i]\n    }\n  }\n  return index\n}\n\n/* Given a list of numbers, return the number at index i.\n  If index i is out of bounds, return -1.\n  Examples\n  index_of([1, 2, 3, 4], 3) ➞ 3\n  index_of([1, 2, 3, 4], 5) ➞ -1\n  */\nconst index_of = (lst, index) => {\n  const len = lst.length\n  if (index < 0 || index > len - 1) {\n    return -1\n  }\n  return lst[index]\n}\n\n/* Given a list of numbers, return the list of numbers in reverse order.\n  If there is no reverse order, return [].\n  Examples\n  reverse_list([1, 2, 3, 4]) ➞ [4, 3, 2, 1]\n  reverse_list([1, 2, 3, 2]) ➞ [2, 3, 2, 1]\n  reverse_list([1, 2, 3, 2, 4]) ➞ [4, 3, 2, 1]\n  */\nconst reverse_list = (lst) => {\n  const len = lst.length\n  const reversed = lst.slice()\n   .reverse()\n  return reversed\n}\n\n/* Given a list of numbers, return the list of numbers with smallest\n  to largest. If there is no order, return [].\n  Examples\n  order_list([1, 2, 3, 4]) ➞ [1, 2, 3, 4]\n  order_list([1, 2, 3, 2]) ➞ [1, 2, 3, 2]\n  order_list([1, 2, 3"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  // If the two intervals don't intersect, return \"NO\"\n  if (interval1[0] > interval2[1] || interval1[1] < interval2[0]) {\n    return \"NO\";\n  }\n  // Otherwise, return \"YES\"\n  return \"YES\";\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst isPrime = (number) => {\n  // If the number is 0 or 1, return \"NO\"\n  if (number === 0 || number === 1) {\n    return \"NO\";\n  }\n  // If the number is 2, return \"YES\"\n  if (number === 2) {\n    return \"YES\";\n  }\n  // Otherwise, return \"NO\"\n  return \"NO\";\n};\n\n// -------------------------------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------------------------------\n// -------------------------------------------------------------------------------------------------------\n\nconst interval1 = [1, 2];\nconst interval2 = [2, 3];\n\nconsole.log(`${intersection(interval1, interval2)}`);\nconsole.log(`${isPrime(intersection(interval1, interval2))}`);\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n    return arr.reduce((acc, elem) => {\n        let sign = 1;\n        if (elem < 0) {\n            sign = -1;\n        }\n        return sign * acc + sign * elem;\n    }, 0);\n};\n\n// const test_prod_signs = () => {\n//     const arr = [1, 2, 2, -4];\n//     console.log(prod_signs(arr));\n// };\n\n// test_prod_signs();\n\nconst prod_signs_2 = (arr) => {\n    let res = 0;\n    for (let elem of arr) {\n        let sign = 1;\n        if (elem < 0) {\n            sign = -1;\n        }\n        res = sign * res + sign * elem;\n    }\n    return res;\n};\n\n// const test_prod_signs_2 = () => {\n//     const arr = [1, 2, 2, -4];\n//     console.log(prod_signs_2(arr));\n// };\n\n// test_prod_signs_2();\n\nconst prod_signs_3 = (arr) => {\n    let res = 1;\n    for (let elem of arr) {\n        res *= elem;\n    }\n    return res;\n};\n\n// const test_prod_signs_3 = () => {\n//     const arr = [1, 2, 2, -4];\n//     console.log(prod_signs_3(arr));\n// };\n\n// test_prod_signs_3();\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  const visited = new Array(k + 1).fill(0);\n  const visited_arr = new Array(k + 1).fill(0);\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const visited_count = new Array(k + 1).fill(0);\n  const visited_count_arr = new Array(k + 1).fill(0);\n  const dp = new Array(k + 1).fill(0);\n  dp[0] = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      if (grid[i][j] > 0) {\n        dp[0] = Math.min(dp[0], grid[i][j] + dp[k - 1]);\n        visited[grid[i][j] - 1]++;\n      }\n    }\n  }\n  const min_dp = dp[k - 1];\n  for (let i = k - 1; i >= 1; i--) {\n    dp[i] = Math.min(dp[i], dp[i - 1] + grid[visited[i - 1] - 1][visited[i] - 1]);\n    visited[grid[visited[i] - 1][visited[i] - 1] - 1]++;\n  }\n  for (let i = rows - 1; i >= 0; i--) {\n    for (let j = cols - 1; j >= 0; j--) {\n      if (grid[i][j] > 0) {\n        dp[grid[i][j] - 1] = Math.min(dp[grid[i][j] - 1], dp[i + 1] + grid[visited[grid[i][j] - 1] - 1][j + 1]);\n        visited[grid[i][j] - 1]++;\n      }\n    }\n  }\n  return visited_count.map((_, index) => visited_arr[index] > 0? index + 1 : 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n === 0) return [];\n  return [1, 1, 2].concat(tri(n - 1).map(x => x + 1));\n}\n\n// const tri = (n) => {\n//   if (n === 0) return [];\n//   return [1, 1, 2].concat(tri(n - 1).map(x => x + 1));\n// }\n\nconst tri = (n) => {\n  if (n === 0) return [];\n  if (n === 1) return [1];\n  if (n === 2) return [1, 1];\n\n  const res = [];\n\n  res.push(1);\n  res.push(1);\n  res.push(2);\n\n  const fib = tri(n - 1);\n  res = res.concat(fib.map(x => x + 1));\n\n  return res;\n}\n\ntri(10)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let i = 1, j = 1;\n  if (n <= 0) {\n    return 0;\n  }\n  while (i <= n) {\n    if (n % i === 0) {\n      if (i % 2 === 1) {\n        return n;\n      }\n      else {\n        i++;\n      }\n    }\n    else {\n      i++;\n    }\n  }\n  return n;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n  let depth = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      depth++;\n    } else if (string[i] === ']') {\n      depth--;\n    }\n    if (depth < 0) {\n      return false;\n    }\n  }\n  return depth === 0;\n};\n\n/*\n  Create a function that takes a string as input which contains a valid sequence of\n  opening and closing square brackets. The function should return the number of opening\n  square brackets.\n  brackets_count('[]') ➞ 1\n  brackets_count('[]]') ➞ 2\n  brackets_count('[][]') ➞ 3\n  brackets_count('[][]][') ➞ 3\n  brackets_count('[][]][]') ➞ 3\n  brackets_count('[][]][]][') ➞ 4\n  */\nconst brackets_count = (string) => {\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '[') {\n      count++;\n    } else if (string[i] === ']') {\n      count--;\n    }\n    if (count < 0) {\n      return -1;\n    }\n  }\n  return count;\n};\n\n/*\n  Create a function that takes a string as input and returns the sum of the values\n  of the characters in the string.\n  string_sum('ab') ➞ 'ab'\n  string_sum('a[b]c') ➞ 'abc'\n  string_sum('[a]b') ➞ 'a'\n  string_sum('[a[b]c]') ➞ 'abc'\n  string_sum('[a[b][c]]') ➞ 'abc'\n  string_sum('[a[b][c]d]') ➞ 'abc'\n  string_sum('[a[b][c][d]]') ➞ 'abc'\n  */\nconst string_sum = (string) => {\n  let total = 0;\n  for (let i = 0; i < string.length; i++) {\n    total += string[i].charCodeAt(0);\n  }\n  return total;\n};\n\n/*\n  Create a function that takes a string as input and returns the string with all\n  punctuation characters removed.\n  remove_punctuation('a!b') ➞ 'ab'\n  remove_punctuation('[a]b') ➞ 'ab'\n  remove_punctuation('a,b') ➞ 'ab'\n  remove_punctuation('a:b') ➞ 'ab'\n  */\nconst remove_punctuation = (string) => {\n  let without_punctuation = string.replace(/[^\\w\\s]/g, '');\n  return without_punctuation;\n};\n\nconst test = {\n  is_nested: is_nested,\n  brackets_count: brackets_count,\n  string_sum: string_sum,\n  remove_punctuation: remove_punctuation\n};\n\nconst tests = [\n  {\n    string: 'a!b',\n    result: 'ab'\n  },\n  {\n    string: 'a,b',\n    result: 'ab'\n  },\n  {\n    string: 'a:b',\n    result: 'ab'\n  },\n  {\n    string: 'a!b[c]d',\n    result: 'abcd'\n  },\n  {\n    string: '[a]b[c]d',\n    result: 'abc'\n  },\n  {\n    string: '[a][b][c]d',\n    result: 'abc'\n  },\n  {\n    string: '[a][b][c][d]',\n    result: 'abc'\n  },\n  {\n    string: '[a][b][c][d]e',\n    result: 'abcde'\n  },\n  {\n    string: '[a][b][c][d]e[f]g',\n    result: 'abcdefg'\n  },\n  {\n    string: 'a[b][c]d',\n    result: 'abcd'\n  },\n  {\n    string: '[a]b[c]d',\n    result: 'abc'\n  },\n  {\n    string: '[a]b[c]d[e]',\n    result: 'abce'\n  },\n  {\n    string: 'a[b][c]d[e]',\n    result: 'abce'\n  },\n  {\n    string: '[a]b[c]d[e]',\n    result: 'abce'\n  },\n  {\n    string: '[a]b[c]d[e]f',\n    result: 'abcef'\n  },\n  {\n    string: '[a][b][c][d][e]',\n    result: 'abcde'\n  },\n  {\n    string: '[a][b][c][d][e]f',\n    result: 'abcdef'\n  },\n  {\n    string: '[a][b][c][d][e][f]',\n    result: 'abcdef'\n  },\n  {\n    string: '[a][b][c][d][e][f]g',\n    result: 'abcdefg'\n  },\n  {\n    string: 'a[b][c]d[e][f]g',\n    result: 'abcefg'\n  },\n  {\n    string: '[a][b][c][d][e][f]g',\n    result: 'abcefg'\n  "}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n    let sum = 0;\n    lst.forEach((n) => {\n        let num = n + 0;\n        sum += Math.pow(num, 2);\n    });\n    return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_letter = char.match(/[a-zA-Z]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_letter;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_letter_or_dash = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_letter = char.match(/[a-zA-Z]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_letter &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_letter_or_underscore = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_letter = char.match(/[a-zA-Z]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_letter &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_letter_or_space = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_letter = char.match(/[a-zA-Z]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_letter &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_number = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_number = char.match(/[0-9]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_number;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_number_or_underscore = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_number = char.match(/[0-9]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_number &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_number_or_space = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_number = char.match(/[0-9]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_number &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_number_or_dash = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_number = char.match(/[0-9]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_number &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_number_or_space_or_dash = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_number = char.match(/[0-9]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_number &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_space = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_space = char.match(/[ ]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_space;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_space_or_dash = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_space = char.match(/[ ]/);\n  const is_dash = char.match(/[-]/);\n  const is_not_a_word = txt.length > 1 &&!is_a_space &&!is_dash;\n  return is_not_a_word;\n};\n\nconst check_if_last_char_is_a_space_or_dash_or_underscore = (txt) => {\n  const char = txt.charAt(txt.length - 1);\n  const is_a_space = char.match(/[ ]/);\n  const is_dash = char.match(/[-]/);\n  const"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  let low = 0\n  let high = arr.length - 1\n  let index = -1\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2)\n    if (arr[mid] >= arr[high]) {\n      high = mid - 1\n    } else if (arr[mid] < arr[high]) {\n      low = mid + 1\n    } else {\n      index = mid\n      break\n    }\n  }\n  return index\n}\n\n/*\n  Return the largest value in the array.\n  \n  Examples:\n  largest([1,2,3]) = 3\n  largest([2,3,1]) = 3\n  largest([3,2,1]) = 3\n  largest([1,2,3,4,5]) = 5\n  */\nconst largest = (arr) => {\n  const max = arr.length > 0? arr[0] : -1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i]\n    }\n  }\n  return max\n}\n\n/*\n  Return the largest index of an element which is less than the given element.\n  If no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = 1\n  can_arrange([3,2,1]) = 1\n  can_arrange([1,2,3,4,5]) = -1\n  */\nconst can_arrange_1 = (arr) => {\n  let low = 0\n  let high = arr.length - 1\n  let index = -1\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2)\n    if (arr[mid] < arr[high]) {\n      high = mid - 1\n    } else if (arr[mid] > arr[high]) {\n      low = mid + 1\n    } else {\n      index = mid\n      break\n    }\n  }\n  return index\n}\n\n/*\n  Return the largest index of an element which is less than the given element.\n  If no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = 1\n  can_arrange([3,2,1]) = 1\n  can_arrange([1,2,3,4,5]) = -1\n  */\nconst can_arrange_2 = (arr) => {\n  let low = 0\n  let high = arr.length - 1\n  let index = -1\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2)\n    if (arr[mid] > arr[high]) {\n      high = mid - 1\n    } else if (arr[mid] < arr[high]) {\n      low = mid + 1\n    } else {\n      index = mid\n      break\n    }\n  }\n  return index\n}\n\n/*\n  Return the largest index of an element which is less than the given element.\n  If no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = 1\n  can_arrange([3,2,1]) = 1\n  can_arrange([1,2,3,4,5]) = -1\n  */\nconst can_arrange_3 = (arr) => {\n  let low = 0\n  let high = arr.length - 1\n  let index = -1\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2)\n    if (arr[mid] < arr[high]) {\n      high = mid - 1\n    } else if (arr[mid] > arr[high]) {\n      low = mid + 1\n    } else {\n      index = mid\n      break\n    }\n  }\n  return index\n}\n\n/*\n  Return the largest index of an element which is less than the given element.\n  If no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = 1\n  can_arrange([3,2,1]) = 1\n  can_arrange([1,2,3,4,5]) = -1\n  */\nconst can_arrange_4 = (arr) => {\n  let low = 0\n  let high = arr.length - 1\n  let index = -1\n  while (low <= high) {\n    const mid = Math.floor((low + high) / 2)\n    if (arr[mid] <= arr[high]) {\n      high = mid - 1\n    } else if (arr[mid] > arr[high]) {\n      low = mid + 1\n    } else {\n      index = mid\n      break\n    }\n  }\n  return index\n}\n\n/*\n  Return the largest index of an element which is less than the given element.\n  If no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = 1\n  can_arrange([3,2,1]) = 1\n  can_arrange([1,2,3,4,5]) = -1\n  */\nconst can_arrange_5 = (arr) => {\n  let low = 0\n  let high = arr.length - 1\n  "}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  // Use the min and max functions to find the\n  // largest and smallest negative and positive\n  // integers in a list.\n  const neg = largest_neg(lst);\n  const pos = largest_pos(lst);\n  // If there are no negative or positive integers,\n  // return null\n  if(!neg &&!pos) {\n    return null;\n  }\n  // If there is only a negative integer, return a\n  // tuple with (null, neg)\n  if(!pos) {\n    return (null, neg);\n  }\n  // If there is only a positive integer, return a\n  // tuple with (pos, null)\n  if(!neg) {\n    return (pos, null);\n  }\n  // If there is both a negative and a positive\n  // integer, return a tuple with (pos, neg)\n  return (pos, neg);\n};\n\n/*\n  Given a list of tuples (x, y) and a function f(x) -> y,\n  create a function f(lst) -> tuple(x, y), where x is\n  the largest of tuples x, y in lst.\n  If there is no largest tuple, return null.\n  Examples:\n  largest_tuple_f(f([1, 2, 3, 4]), (1, 4)) == (4, 4)\n  largest_tuple_f(f([1, 2, 3, 4]), (5, 4)) == (null, 4)\n  largest_tuple_f(f([1, 2, 3, 4]), (1, 3)) == (1, 3)\n  largest_tuple_f(f([1, 2, 3, 4]), (2, 3)) == (2, 3)\n  largest_tuple_f(f([1, 2, 3, 4]), (4, 3)) == (4, 3)\n  largest_tuple_f(f([1, 2, 3, 4]), (1, 2)) == (1, 2)\n  largest_tuple_f(f([1, 2, 3, 4]), (5, 2)) == (null, 2)\n  largest_tuple_f(f([1, 2, 3, 4]), (2, 2)) == (2, 2)\n  largest_tuple_f(f([1, 2, 3, 4]), (3, 2)) == (3, 2)\n  largest_tuple_f(f([1, 2, 3, 4]), (4, 2)) == (4, 2)\n  largest_tuple_f(f([1, 2, 3, 4]), (2, 1)) == (2, 1)\n  largest_tuple_f(f([1, 2, 3, 4]), (5, 1)) == (null, 1)\n  largest_tuple_f(f([1, 2, 3, 4]), (1, 1)) == (1, 1)\n  */\nconst largest_tuple_f = (f, lst) => {\n  // Find the largest tuple in the list.\n  const max = largest_tuple(lst);\n  // If there is no largest tuple, return null\n  if(!max) {\n    return null;\n  }\n  // If there is only one largest tuple, return the\n  // largest tuple.\n  if(max.length === 1) {\n    return max[0];\n  }\n  // If there are two largest tuples, return the\n  // largest tuple.\n  if(max.length === 2) {\n    return max;\n  }\n  // If there are more than two largest tuples,\n  // iterate through the list and find the largest\n  // tuple in each sublist.\n  const max_list = largest_list(f, lst);\n  // If there are no largest tuples, return null.\n  if(!max_list) {\n    return null;\n  }\n  // Return the largest tuple.\n  return largest_tuple(max_list);\n};\n\n/*\n  Given a list of tuples (x, y) and a function f(x) -> y,\n  create a function f(lst) -> list(tuple(x, y)), where\n  x is the largest of tuples x, y in lst.\n  If there is no largest tuple, return an empty list.\n  Examples:\n  largest_tuple_list(f([1, 2, 3, 4]), (1, 4)) == [[1, 4], [2, 4], [3, 4], [4, 4]]\n  largest_tuple_list(f([1, 2, 3, 4]), (5, 4)) == [[5, 4]]\n  largest_tuple_list(f([1, 2, 3, 4]), (1, 3)) == [[1, 3], [2, 3], [3, 3], [4, 3]]\n  largest_tuple_list(f([1, 2, 3, 4]), (2, 3)) == [[2, 3], [3, 3], [4, 3]]\n  largest_tuple_list(f([1, 2, 3, 4]), (4, 3)) == [[4, 3]]\n  largest_tuple_list(f([1, 2, 3, 4]), (1, 2)) == [[1, 2]]\n  largest_tuple_list(f([1, 2, 3, 4]), (5, 2)) == []\n  largest_tuple_list(f([1, 2, 3, 4]), (2, 2)) == [[2, 2]]\n  largest_tuple_list(f([1, 2, 3, 4]), (3, 2)) == [[3, 2]]\n  largest_tuple_list(f([1, 2, 3, 4]), (4, 2)) == [[4, 2]]\n  largest_tuple_list(f([1, 2, 3, 4]), (2, 1)) == [[2, 1]]\n  largest_tuple_list(f([1, 2, 3"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n    if (typeof a === typeof b) {\n        if (typeof a === 'number') {\n            if (a > b) return b\n            return a\n        } else if (typeof a ==='string') {\n            if (a > b) return b\n            return a\n        }\n    } else {\n        if (a > b) return b\n        return a\n    }\n}\n\n// console.log(compare_one(1, 2.5))\n// console.log(compare_one(\"1\", \"2,3\"))\n// console.log(compare_one(\"1\", \"5,1\"))\n// console.log(compare_one(\"1\", 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console.log(compare_one(1, 1))\n// console"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  return n % 2 === 0 && n > 2 && n % 4 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(15) == true\n  */\nconst is_equal_to_sum_even_2 = (n) => {\n  return n % 2 === 0 && n > 4 && n % 4 === 0 && n % 5 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(15) == false\n  is_equal_to_sum_even(16) == true\n  */\nconst is_equal_to_sum_even_3 = (n) => {\n  return n % 2 === 0 && n > 6 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(15) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(25) == true\n  */\nconst is_equal_to_sum_even_4 = (n) => {\n  return n % 2 === 0 && n > 7 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  is_equal_to_sum_even(15) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(25) == false\n  is_equal_to_sum_even(26) == true\n  */\nconst is_equal_to_sum_even_5 = (n) => {\n  return n % 2 === 0 && n > 8 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 9 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(15) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(25) == false\n  is_equal_to_sum_even(26) == false\n  is_equal_to_sum_even(27) == true\n  */\nconst is_equal_to_sum_even_6 = (n) => {\n  return n % 2 === 0 && n > 9 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 10 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(15) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(25) == false\n  is_equal_to_sum_even(26) == false\n  is_equal_to_sum_even(27) == false\n  is_equal_to_sum_even(28) == true\n  */\nconst is_equal_to_sum_even_7 = (n) => {\n  return n % 2 === 0 && n > 10 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n % 10 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 11 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == false\n  is_equal_to_sum_even(15) == false\n  is_equal_to_sum_even(16) == false\n  is_equal_to_sum_even(25) == false\n  is_equal_to_sum_even(26) == false\n  is_equal_to_sum_even(27) == false\n  is_equal_to_sum_even(28) == false\n  is_equal_to_sum_even(29) == true\n  */\nconst is_equal_to_sum_even_8 = (n) => {\n  return n % 2 === 0 && n > 11 && n % 4 === 0 && n % 5 === 0 && n % 6 === 0 && n % 7 === 0 && n % 8 === 0 && n % 9 === 0 && n %"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n  let factorial = 1;\n  if (n === 0) {\n    return 1;\n  }\n  if (n === 1) {\n    return 1;\n  }\n  for (let i = 2; i <= n; i++) {\n    factorial = factorial * i;\n  }\n  return factorial;\n}\n\nexport default special_factorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  return text.replace(/\\s/g, '_')\n   .replace(/\\s{2,}/g, '-');\n}\n\nconst check_space = (text) => {\n  return text.replace(/\\s/g, '_')\n   .replace(/\\s{2,}/g, '-');\n}\n\nconst is_space = (text) => {\n  return text.replace(/\\s/g, '_')\n   .replace(/\\s{2,}/g, '-');\n}\n\nconst space_check = (text) => {\n  return text.replace(/\\s/g, '_')\n   .replace(/\\s{2,}/g, '-');\n}\n\nconst has_space = (text) => {\n  return text.replace(/\\s/g, '_')\n   .replace(/\\s{2,}/g, '-');\n}\n\nconst check_has_space = (text) => {\n  return text.replace(/\\s/g, '_')\n   .replace(/\\s{2,}/g, '-');\n}\n\nconst has_spaces = (text) => {\n  return text.replace(/\\s/g, '_')\n   .replace(/\\s{2,}/g, '-');\n}\n\nconst remove_spaces = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '');\n}\n\nconst remove_all_spaces = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '');\n}\n\nconst replace_spaces = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '');\n}\n\nconst remove_newlines = (text) => {\n  return text.replace(/\\n/g, '');\n}\n\nconst get_all_spaces = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '');\n}\n\nconst get_all_spaces_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst check_all_spaces = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '');\n}\n\nconst check_all_spaces_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst check_has_spaces = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '');\n}\n\nconst check_has_spaces_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst check_has_spaces_length_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst get_all_spaces_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst get_all_spaces_length_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst has_spaces_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst get_all_spaces_length_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst has_spaces_length_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst get_all_spaces_length_length_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nconst has_spaces_length_length_length = (text) => {\n  return text.replace(/\\s/g, '')\n   .replace(/\\s{2,}/g, '').length;\n}\n\nmodule.exports = {\n  fix_spaces,\n  check_space,\n  is_space,\n  space_check,\n  has_space,\n  check_has_space,\n  remove_spaces,\n  remove_all_spaces,\n  replace_spaces,\n  remove_newlines,\n  get_all_spaces,\n  get_all_spaces_length,\n  check_all_spaces,\n  check_all_spaces_length,\n  check_has_spaces,\n  check_has_spaces_length,\n  check_has_spaces_length_length,\n  get_all_spaces_length,\n  get_all_spaces_length_length,\n  "}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_valid_email_address = (email) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_last_n_characters = (string, n) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_nth_last_word = (string, n) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_word_count = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst remove_all_spaces = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst reverse_string = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_string_length = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_sorted = (array) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_palindrome = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst remove_duplicates = (array) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_largest_subsequence = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_largest_common_subsequence = (string1, string2) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_number_of_lines = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_number = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_number_between = (string, min_num, max_num) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_number_decimal = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_number_hexadecimal = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_number_octal = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_number_as_string = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_number_as_int = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_number_as_float = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst is_a_number = (string) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_last_n_numbers = (string, n) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_first_n_numbers = (string, n) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_string_from_file = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_contents_as_string = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst file_exists = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst file_is_empty = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_line_count = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_lines_of_file = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst write_lines_to_file = (file_name, lines) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_modification_date = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_int = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_float = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_string = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_bytes = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_kb = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_mb = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_gb = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get_file_size_as_bytes_per_second = (file_name) => {\n    //TODO\n    return 'Yes';\n};\n\nconst get"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  return lst.reduce((a, b) => a + b * b, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the integer entry if its index is a \n  multiple of 3 and a negative integer if its index is not a multiple of 3. The function will not change the entries in the list whose indexes \n  are not a multiple of 3. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  For lst = [-1,-5,2,2,3]  the output should be -1\n  For lst = [1,2,3,4,5,6]  the output should be 18\n  */\nconst sum_negatives = (lst) => {\n  return lst.reduce((a, b) => a + b < 0? b : a, 0);\n};\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the integer entry if its index is a \n  multiple of 4 and a negative integer if its index is not a multiple of 4. The function will not change the entries in the list whose indexes \n  are not a multiple of 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 1\n  For lst = [-1,-5,2,-1,-5]  the output should be -1\n  For lst = [-1,-5,2,2,3]  the output should be -1\n  For lst = [1,2,3,4,5,6]  the output should be 12\n  */\nconst sum_negatives2 = (lst) => {\n  return lst.reduce((a, b) => a + b < 0? b : a, 0);\n};\n\nconst test = [\n  [1, 2, 3],\n  [],\n  [-1, -5, 2, -1, -5]\n];\n\nconst sum_squares_test = sum_squares(test);\n\nconst sum_negatives_test = sum_negatives(test);\n\nconst sum_negatives2_test = sum_negatives2(test);\n\nconsole.log(sum_squares_test);\nconsole.log(sum_negatives_test);\nconsole.log(sum_negatives2_test);\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const result = sentence.split(' ').filter(word => {\n    return isPrime(word.length);\n  });\n  return result.join(' ');\n};\n\n/*\n  You are given two strings,\n  the first string contains only the digits 0-9\n  the second string contains only the digits 0-9\n  and you have to return the longest common string between the two strings.\n\n  Example 1:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: \"1110111111\"\n\n  Example 2:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: \"0011001101\"\n\n  Constraints:\n      * 1 <= len(str1) <= 10\n      * 1 <= len(str2) <= 10\n      * str1 and str2 are both composed of digits\n*/\nconst longestCommon = (str1, str2) => {\n  let [start, end] = [0, 0];\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str2.indexOf(str1[i], start)!== -1) {\n      end = i;\n      count++;\n    }\n  }\n  return str2.slice(start, end + 1);\n};\n\n/*\n  You are given two strings,\n  the first string contains only the digits 0-9\n  the second string contains only the digits 0-9\n  and you have to return the sum of the values of the longest common string between the two strings.\n\n  Example 1:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: \"2221111111\"\n\n  Example 2:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: \"0011001101\"\n\n  Constraints:\n      * 1 <= len(str1) <= 10\n      * 1 <= len(str2) <= 10\n      * str1 and str2 are both composed of digits\n*/\nconst sumOfLongestCommon = (str1, str2) => {\n  let [start, end] = [0, 0];\n  let count = 0;\n  for (let i = 0; i < str1.length; i++) {\n    if (str2.indexOf(str1[i], start)!== -1) {\n      end = i;\n      count++;\n    }\n  }\n  return str1.slice(start, end + 1).reduce((sum, val) => sum + val);\n};\n\n/*\n  You are given two strings,\n  the first string contains only the digits 0-9\n  the second string contains only the digits 0-9\n  and you have to return the index of the first string that contains all the digits from the second one.\n\n  Example 1:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: 0\n\n  Example 2:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: 1\n\n  Constraints:\n      * 1 <= len(str1) <= 10\n      * 1 <= len(str2) <= 10\n      * str1 and str2 are both composed of digits\n*/\nconst containsAllDigits = (str1, str2) => {\n  let [start, end] = [0, 0];\n  for (let i = 0; i < str1.length; i++) {\n    if (str2.indexOf(str1[i], start)!== -1) {\n      end = i;\n    }\n  }\n  return start;\n};\n\n/*\n  You are given two strings,\n  the first string contains only the digits 0-9\n  the second string contains only the digits 0-9\n  and you have to return the index of the second string that contains all the digits from the first one.\n\n  Example 1:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: 0\n\n  Example 2:\n      Input: str1 = \"0011001101\"\n      str2 = \"1110111111\"\n      Output: 1\n\n  Constraints:\n      * 1 <= len(str1) <= 10\n      * 1 <= len(str2) <= 10\n      * str1 and str2 are both composed of digits\n*/\nconst containsAllDigits2 = (str1, str2) => {\n  let [start, end] = [0, 0];\n  for (let i = 0; i < str2.length; i++) {\n    if (str1.indexOf(str2[i], start)!== -1) {\n      end = i;\n    }\n  }\n  return start;\n};\n\nexport {\n  words_in_sentence,\n  longestCommon,\n  sumOfLongestCommon,\n  containsAllDigits,\n  containsAllDigits2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === '0' || n === '0') return false\n\n  if (x.charAt(0) === '/') {\n    const [numerator, denominator] = x.split('/')\n    return simplify(numerator, n)\n  }\n\n  if (n.charAt(0) === '/') {\n    const [numerator, denominator] = n.split('/')\n    return simplify(x, numerator)\n  }\n\n  const xParts = x.split('/')\n  const nParts = n.split('/')\n\n  if (xParts[0] === nParts[0]) {\n    return simplify(xParts[1], nParts[1])\n  }\n\n  const xIsWhole = xParts[0].match(/^[0-9]+$/)\n  const nIsWhole = nParts[0].match(/^[0-9]+$/)\n\n  if (xIsWhole && nIsWhole) {\n    return xParts[0] === nParts[0] && xParts[1] === nParts[1]\n  }\n\n  return false\n}\n\nconsole.log(simplify('1/3', '3/2'))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  return nums.sort((a, b) => {\n    let diff = a + b;\n    let s = diff.toString();\n    s = s.split(\"\");\n    let diff_sum = 0;\n    for (let i = 0; i < s.length; i++) {\n      let i = parseInt(s[i], 10);\n      diff_sum += i;\n    }\n    if (diff_sum === a + b) {\n      return a - b;\n    } else if (diff_sum < a + b) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n};\n\nexport default order_by_points;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n    let counter = 0;\n    for (let i = 0; i < nums.length; i++) {\n        if (nums[i] > 10 && (nums[i] % 2 === 1 && nums[i - 1] % 2 === 1) ||\n            nums[i] > 10 && (nums[i] % 2 === 1 && nums[i + 1] % 2 === 1)) {\n            counter += 1;\n        }\n    }\n    return counter;\n};\n\nconsole.log(special_filter([15, -73, 14, -15]));\nconsole.log(special_filter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  const result = []\n  const d = n * (n - 1) / 2\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const a = i * i - i + 1\n        const b = j * j - j + 1\n        const c = k * k - k + 1\n        const sum = a + b + c\n        if (sum % 3 === 0 && i < j && j < k) {\n          result.push([i, j, k])\n        }\n      }\n    }\n  }\n  return result.length\n}\n\n/*\n  You are given an array A of integers.\n      Find the largest sum of a triple (a[i], a[j], a[k]) such that a[i] < a[j] < a[k], \n  and (a[i], a[j], a[k]) is an element of A.\n      Return the largest sum found.\n\n  Example :\n      Input: [1, 2, 3, 4, 5, 6]\n      Output: 30\n\n  Note:\n      The largest sum of a given triple should be a[i] + a[j] + a[k] < 100.\n      The number of elements in a given array is guaranteed to be in the range [1, 50].\n*/\nconst max_sum_triple = (A) => {\n  const result = []\n  for (let i = 0; i < A.length - 1; i++) {\n    for (let j = i + 1; j < A.length; j++) {\n      for (let k = j + 1; k < A.length; k++) {\n        const sum = A[i] + A[j] + A[k]\n        if (sum > result[0] && i < j && j < k) {\n          result.unshift([i, j, k])\n        }\n      }\n    }\n  }\n  return result.sort((a, b) => a[0] - b[0]).pop()[1]\n}\n\n/*\n  Given a positive integer n, you need to write a function which returns the number of positive integers less than n and greater than n. \n      Example:\n          Input: n = 10\n          Output: 2\n*/\nconst number_of_positive_numbers_in_range = (n) => {\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (i < j) {\n        result.unshift(i)\n      }\n      if (i > j) {\n        result.unshift(j)\n      }\n    }\n  }\n  return result.length\n}\n\n/*\n  Given a positive integer n, you need to write a function which returns the sum of all numbers that are strictly between two numbers a and b.\n      Example:\n          Input: n = 10\n          Output: 30\n\n  Note:\n      The number of numbers in the given range should be in the range [1, n].\n*/\nconst sum_of_numbers_between_two_numbers = (n) => {\n  const result = []\n  for (let i = 1; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      result.unshift(i)\n      result.unshift(j)\n    }\n  }\n  return result.reduce((acc, n) => acc + n)\n}\n\n/*\n  Given an array of numbers, write a function that sorts the array in ascending order and returns the index of the smallest number.\n      Example:\n          Input: [3, 3, 1, 4, 2, 5]\n          Output: 1\n\n  Note:\n      The index of the smallest number in the array should be in the range [1, 6].\n*/\nconst find_the_smallest_number_index = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[i] > numbers[j]) {\n        result.unshift(i)\n      }\n      if (numbers[j] > numbers[i]) {\n        result.unshift(j)\n      }\n    }\n  }\n  return result.sort((a, b) => a - b).pop()\n}\n\n/*\n  Given an array of numbers, write a function that sorts the array in ascending order and returns the index of the largest number.\n      Example:\n          Input: [3, 3, 1, 4, 2, 5]\n          Output: 6\n\n  Note:\n      The index of the largest number in the array should be in the range [1, 6].\n*/\nconst find_the_largest_number_index = (numbers) => {\n  const result = []\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (numbers[i] < numbers[j]) {\n        result.unshift(i)\n      }\n      if (numbers[j] < numbers[i]) {\n        result.unshift(j)\n      }\n    }\n  }\n  return result.sort((a, b) => a - b).pop()\n}\n\n/*\n  Given an array of numbers, write a function that returns the index of the number that appears in the given array in the given order.\n      Example:\n          Input: [3, 3, 1, 4, 2, 5]\n          Output: 5"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  const indexes = planets.map(planet => planets.indexOf(planet))\n  const x = indexes.filter(index => index > 0 && index < indexes.length - 1)\n  const y = indexes.filter(index => index > 1 && index < indexes.length - 1)\n  const a = indexes.filter(index => index < 3)\n  const b = indexes.filter(index => index > 4)\n  const indexesA = a.map(index => indexes[index])\n  const indexesB = b.map(index => indexes[index])\n  const indexA = indexes.find(index => indexesA.includes(index))\n  const indexB = indexes.find(index => indexesB.includes(index))\n  const result = indexes.filter(index => indexes.includes(index))\n  return result\n}\n\n//console.log(bf(\"Mercury\", \"Jupiter\"))\n//=> (\"Mercury\", \"Jupiter\")\n//console.log(bf(\"Earth\", \"Mercury\"))\n//=> (\"Earth\")\n//console.log(bf(\"Earth\", \"Uranus\"))\n//=> ()\n//console.log(bf(\"Mercury\", \"Mercury\"))\n//=> (\"Mercury\")\n//console.log(bf(\"Mercury\", \"Jupiter\"))\n//=> (\"Mercury\", \"Jupiter\")\n//console.log(bf(\"Earth\", \"Jupiter\"))\n//=> (\"Earth\", \"Jupiter\")\n//console.log(bf(\"Mars\", \"Jupiter\"))\n//=> (\"Mars\", \"Jupiter\")\n//console.log(bf(\"Mars\", \"Mercury\"))\n//=> (\"Mars\", \"Mercury\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Mercury\"))\n//=> (\"Jupiter\", \"Mercury\")\n//console.log(bf(\"Mercury\", \"Uranus\"))\n//=> (\"Mercury\", \"Uranus\")\n//console.log(bf(\"Mercury\", \"Saturn\"))\n//=> (\"Mercury\", \"Saturn\")\n//console.log(bf(\"Mercury\", \"Saturn\"))\n//=> (\"Mercury\", \"Saturn\")\n//console.log(bf(\"Mercury\", \"Jupiter\"))\n//=> (\"Mercury\", \"Jupiter\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Saturn\", \"Uranus\"))\n//=> (\"Saturn\", \"Uranus\")\n//console.log(bf(\"Saturn\", \"Uranus\"))\n//=> (\"Saturn\", \"Uranus\")\n//console.log(bf(\"Saturn\", \"Saturn\"))\n//=> (\"Saturn\", \"Saturn\")\n//console.log(bf(\"Saturn\", \"Saturn\"))\n//=> (\"Saturn\", \"Saturn\")\n//console.log(bf(\"Saturn\", \"Jupiter\"))\n//=> (\"Saturn\", \"Jupiter\")\n//console.log(bf(\"Jupiter\", \"Uranus\"))\n//=> (\"Jupiter\", \"Uranus\")\n//console.log(bf(\"Jupiter\", \"Mercury\"))\n//=> (\"Jupiter\", \"Mercury\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Jupiter\"))\n//=> (\"Jupiter\", \"Jupiter\")\n//console.log(bf(\"Jupiter\", \"Mercury\"))\n//=> (\"Jupiter\", \"Mercury\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Jupiter\"))\n//=> (\"Jupiter\", \"Jupiter\")\n//console.log(bf(\"Jupiter\", \"Mercury\"))\n//=> (\"Jupiter\", \"Mercury\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Jupiter\"))\n//=> (\"Jupiter\", \"Jupiter\")\n//console.log(bf(\"Jupiter\", \"Mercury\"))\n//=> (\"Jupiter\", \"Mercury\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Jupiter\"))\n//=> (\"Jupiter\", \"Jupiter\")\n//console.log(bf(\"Jupiter\", \"Mercury\"))\n//=> (\"Jupiter\", \"Mercury\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Saturn\"))\n//=> (\"Jupiter\", \"Saturn\")\n//console.log(bf(\"Jupiter\", \"Jupiter\"))\n//=> (\"Jupiter\", \"Jupiter\")\n//console.log(bf(\"Jupiter\", \"Mercury\"))\n//"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n  return lst.sort((a, b) => {\n    if (a.length!== b.length) {\n      return a.length - b.length;\n    }\n    return a < b? -1 : a > b? 1 : 0;\n  });\n};\n\nexport default sorted_list_sum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n  const prime = (n, y, x) => {\n    for (let i = 1; i <= n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  return prime(n, y, x)? x : y;\n};\n\nconsole.log(x_or_y(7, 34, 12));\nconsole.log(x_or_y(15, 8, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  const len = lst.length\n  if (len === 0) return 0\n  const diff = [...lst].map((num) => Math.pow(num, 2))\n  return sum(diff)\n}\n\n// double_the_difference([1, 3, 2, 0])\n// double_the_difference([-1, -2, 0])\n// double_the_difference([9, -2])\n// double_the_difference([0])\n// double_the_difference([])\n// double_the_difference([1, 2, 3, 4, 5])\n// double_the_difference([-1, -2, 0])\n// double_the_difference([1, 2, 3, 4, 5, -1])\n// double_the_difference([1, 2, 3, 4, 5, -2])\n// double_the_difference([1, 2, 3, 4, 5, -3])\n// double_the_difference([1, 2, 3, 4, 5, -4])\n// double_the_difference([1, 2, 3, 4, 5, -5])\n// double_the_difference([1, 2, 3, 4, 5, -6])\n// double_the_difference([1, 2, 3, 4, 5, -7])\n// double_the_difference([1, 2, 3, 4, 5, -8])\n// double_the_difference([1, 2, 3, 4, 5, -9])\n// double_the_difference([1, 2, 3, 4, 5, -10])\n// double_the_difference([1, 2, 3, 4, 5, -11])\n// double_the_difference([1, 2, 3, 4, 5, -12])\n// double_the_difference([1, 2, 3, 4, 5, -13])\n// double_the_difference([1, 2, 3, 4, 5, -14])\n// double_the_difference([1, 2, 3, 4, 5, -15])\n// double_the_difference([1, 2, 3, 4, 5, -16])\n// double_the_difference([1, 2, 3, 4, 5, -17])\n// double_the_difference([1, 2, 3, 4, 5, -18])\n// double_the_difference([1, 2, 3, 4, 5, -19])\n// double_the_difference([1, 2, 3, 4, 5, -20])\n// double_the_difference([1, 2, 3, 4, 5, -21])\n// double_the_difference([1, 2, 3, 4, 5, -22])\n// double_the_difference([1, 2, 3, 4, 5, -23])\n// double_the_difference([1, 2, 3, 4, 5, -24])\n// double_the_difference([1, 2, 3, 4, 5, -25])\n// double_the_difference([1, 2, 3, 4, 5, -26])\n// double_the_difference([1, 2, 3, 4, 5, -27])\n// double_the_difference([1, 2, 3, 4, 5, -28])\n// double_the_difference([1, 2, 3, 4, 5, -29])\n// double_the_difference([1, 2, 3, 4, 5, -30])\n// double_the_difference([1, 2, 3, 4, 5, -31])\n// double_the_difference([1, 2, 3, 4, 5, -32])\n// double_the_difference([1, 2, 3, 4, 5, -33])\n// double_the_difference([1, 2, 3, 4, 5, -34])\n// double_the_difference([1, 2, 3, 4, 5, -35])\n// double_the_difference([1, 2, 3, 4, 5, -36])\n// double_the_difference([1, 2, 3, 4, 5, -37])\n// double_the_difference([1, 2, 3, 4, 5, -38])\n// double_the_difference([1, 2, 3, 4, 5, -39])\n// double_the_difference([1, 2, 3, 4, 5, -40])\n// double_the_difference([1, 2, 3, 4, 5, -41])\n// double_the_difference([1, 2, 3, 4, 5, -42])\n// double_the_difference([1, 2, 3, 4, 5, -43])\n// double_the_difference([1, 2, 3, 4, 5, -44])\n// double_the_difference([1, 2, 3, 4, 5, -45])\n// double_the_difference([1, 2, 3, 4, 5, -46])\n// double_the_difference([1, 2, 3, 4, 5, -47])\n// double_the_difference([1, 2, 3, 4, 5, -48])\n// double_the_difference([1, 2, 3, 4, 5, -49])\n// double_the_difference([1, 2, 3, 4, 5, -50])\n// double_the_difference([1, 2, 3, 4, 5, -51])\n// double_the_difference([1, 2, 3, 4, 5, -52])\n// double_the_difference([1, 2, 3, 4, 5, -53])\n// double_the_difference([1, 2, 3, 4, 5, -54])\n// double_the_difference([1, 2, 3, 4, 5, -55])\n// double_the_difference([1, 2, 3, 4, 5, -56])\n// double_the_difference"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const isGuessCorrect = (score, guess) => {\n    if (score == guess) {\n      return 0\n    }\n    if (score > guess) {\n      return score - guess\n    }\n    return guess - score\n  }\n\n  const correctGuesses = game.filter((score, index) => score == game[index])\n  const guesses = game.filter((score, index) => score!= game[index])\n  const diff = correctGuesses.reduce((acc, score, index) => {\n    acc[index] = isGuessCorrect(score, guess[index])\n    return acc\n  }, {})\n  return guesses.reduce((acc, score, index) => {\n    acc[index] = isGuessCorrect(score, guess[index])\n    return acc\n  }, {})\n}\n\nmodule.exports = compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  return extensions\n   .map(ext => ext.replace(/[A-Z]/g, (s) => s.toUpperCase()).replace(/[a-z]/g, (s) => s.toLowerCase()).replace(/\\s/g, ''))\n   .filter(ext => ext.length > 0)\n   .reduce((acc, curr) => {\n      if (curr.length > acc.length) return curr\n      if (curr.length === acc.length && curr > acc) return curr\n      return acc\n    })\n}\n\n/*\n  Returns the number of classes in the list.\n  Example:\n  list = ['one', 'two', 'three']\n  list.size() == 3\n  */\nconst size = (list) => list.length\n\n/*\n  Returns the number of classes in the list that are also in the\n  subset.\n  Example:\n  list = ['one', 'two', 'three']\n  subset = ['two', 'three']\n  list.subset_size('two', 'three') == 1\n  */\nconst subset_size = (class_name, subset) => {\n  return size(list_subset(class_name, subset))\n}\n\n/*\n  Returns a new list that contains all the classes in the list that\n  are also in the subset.\n  Example:\n  list = ['one', 'two', 'three']\n  subset = ['two', 'three']\n  list.subset(subset) == ['two', 'three']\n  */\nconst list_subset = (class_name, subset) => {\n  return subset.filter(item => list_contains(class_name, item))\n}\n\n/*\n  Returns true if the list contains the given class.\n  Example:\n  list = ['one', 'two', 'three']\n  list_contains('one', 'one') == true\n  list_contains('one', 'two') == false\n  */\nconst list_contains = (class_name, item) => {\n  return list_contains_subset(class_name, item, class_name)\n}\n\n/*\n  Returns true if the list contains the given class in the given subset.\n  Example:\n  list = ['one', 'two', 'three']\n  subset = ['two', 'three']\n  list_contains('one', 'one', subset) == true\n  list_contains('one', 'two', subset) == false\n  */\nconst list_contains_subset = (class_name, item, subset) => {\n  return subset.indexOf(item) >= 0\n}\n\n/*\n  Returns the number of classes in the list that are in the given set.\n  Example:\n  list = ['one', 'two', 'three']\n  set = ['two', 'three']\n  list.set_size('two', 'three') == 1\n  */\nconst set_size = (class_name, set) => {\n  return size(list_set(class_name, set))\n}\n\n/*\n  Returns a new list that contains all the classes in the list that are also\n  in the given set.\n  Example:\n  list = ['one', 'two', 'three']\n  set = ['two', 'three']\n  list.set(set) == ['two', 'three']\n  */\nconst list_set = (class_name, set) => {\n  return set.filter(item => list_contains(class_name, item))\n}\n\n/*\n  Returns a new list that contains all the classes in the list that are not\n  in the given set.\n  Example:\n  list = ['one', 'two', 'three']\n  set = ['two', 'three']\n  list.not_set(set) == ['one']\n  */\nconst list_not_set = (class_name, set) => {\n  return set.filter(item =>!list_contains(class_name, item))\n}\n\n/*\n  Returns the intersection of the two lists.\n  Example:\n  list = ['one', 'two', 'three']\n  set = ['two', 'three']\n  list.intersection(set) == ['two']\n  */\nconst list_intersection = (class_name, set) => {\n  return set.filter(item => list_contains(class_name, item))\n}\n\n/*\n  Returns the union of the two lists.\n  Example:\n  list = ['one', 'two', 'three']\n  set = ['two', 'three']\n  list.union(set) == ['one', 'two', 'three']\n  */\nconst list_union = (class_name, set) => {\n  return set.concat(list_contains(class_name, set))\n}\n\n/*\n  Returns the difference of the two lists.\n  Example:\n  list = ['one', 'two', 'three']\n  set = ['two', 'three']\n  list.difference(set) == ['one']\n  */\nconst list_difference = (class_name, set) => {\n  return set.filter(item =>!list_contains(class_name, item))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n  if(a.length === 0) return false\n  let s1 = a.split('')\n  let s2 = b.split('')\n  let m = a.length\n  let n = b.length\n  for(let i = 0; i < m; i++) {\n    for(let j = 0; j < n; j++) {\n      if(s2[j].includes(s1[i])) return true\n    }\n  }\n  return false\n}\n\n/*\n  Given a string, write a function to determine if it is a valid palindrome.\n\n  Follow up:\n    Could you do it in O(n) time and O(1) space?\n\n  Example:\n    Input: \"A man, a plan, a canal pan.\"\n    Output: true\n    Note:\n      ignore non-ascii characters, assume all letters are ascii.\n*/\nconst palindrome = (s) => {\n  let r = []\n  let m = s.length\n  for(let i = 0; i < m; i++) {\n    r.push(s[i])\n  }\n  let i = 0, j = m - 1\n  while(i < j) {\n    if(r[i]!== r[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Given a string, write a function to determine if it is a valid Sudoku.\n\n  Follow up:\n    Could you do it in O(n^3) time and O(n^2) space?\n    \n  Example:\n    Input:\n      [\n        [\"5\", \"3\", \"7\", \"4\", \"6\", \"9\", \"8\", \"1\", \"2\"],\n        [\"6\", \"9\", \"3\", \"1\", \"5\", \"2\", \"7\", \"4\", \"8\"],\n        [\"4\", \"8\", \"9\", \"2\", \"6\", \"5\", \"3\", \"1\", \"7\"],\n        [\"7\", \"2\", \"1\", \"4\", \"5\", \"3\", \"6\", \"8\", \"9\"],\n        [\"1\", \"9\", \"8\", \"3\", \"4\", \"2\", \"5\", \"6\", \"7\"],\n        [\"8\", \"5\", \"6\", \"1\", \"7\", \"9\", \"3\", \"2\", \"4\"],\n        [\"2\", \"6\", \"4\", \"7\", \"1\", \"9\", \"5\", \"3\", \"8\"],\n        [\"3\", \"2\", \"4\", \"5\", \"6\", \"7\", \"1\", \"8\", \"9\"],\n        [\"9\", \"5\", \"3\", \"1\", \"4\", \"2\", \"6\", \"7\", \"8\"]\n      ]\n    Output: true\n*/\nconst valid_sudoku = (board) => {\n  let i = 0, j = 0\n  while(i < 9) {\n    while(j < 9) {\n      if(board[i][j]!== undefined && board[i][j]!== null) {\n        if(board[i][j].length!== 1) {\n          return false\n        }\n      } else if(board[i][j] === undefined || board[i][j] === null) {\n        if(board[i][j]!== undefined && board[i][j]!== null) {\n          return false\n        }\n      }\n      j++\n    }\n    i++\n    j = 0\n  }\n  return true\n}\n\n/*\n  Given a string array, return all groups of same length.\n\n  Example:\n    Input: [\"abracadabra\", \"bob\", \"abacadabra\", \"dabracadabra\"]\n    Output: [[[\"ab\", \"br\", \"ca\", \"da\", \"b\"], [\"ac\", \"ad\", \"aa\", \"ba\"], [\"ad\", \"ad\", \"da\", \"ca\"]],\n             [[\"ac\", \"ac\", \"ad\", \"ad\"], [\"da\", \"ac\", \"ac\", \"ad\"], [\"ad\", \"da\", \"da\", \"ac\"]],\n             [[\"ab\", \"ab\", \"ab\", \"ab\"], [\"da\", \"da\", \"da\", \"da\"], [\"ab\", \"da\", \"da\", \"da\"]]]\n*/\nconst groups = (array) => {\n  let res = []\n  let m = array.length\n  for(let i = 0; i < m; i++) {\n    let group = array[i]\n    let n = group.length\n    for(let j = 0; j < n; j++) {\n      if(res.indexOf(group[j]) === -1) {\n        res.push(group[j])\n      }\n    }\n  }\n  return res\n}\n\n/*\n  Given a string array, return all groups of same length.\n\n  Example:\n    Input: [\"abracadabra\", \"bob\", \"abacadabra\", \"dabracadabra\"]\n    Output: [[[\"ab\", \"br\", \"ca\", \"da\", \"b\"], [\"ac\", \"ad\", \"aa\", \"ba\"], [\"ad\", \"ad\", \"da\", \"ca\"]],\n             [[\"ac\", \"ac\", \"ad\", \"ad\"], [\"da\", \"ac\", \"ac\", \"ad\"], [\"ad\", \"da\", \"da\", \"ac\"]],\n             [[\"ab\", \"ab\", \"ab\", \"ab\"], [\"da\", \"da\", \"da\", \"da\"], [\"ab\", \"da\", \"da\", \"da\"]]]\n*/\nconst groups2 = (array) => {\n  let res = []\n  let m = array.length\n  for(let i = 0; i < m; i++) {\n    let group = array[i]\n    let n = group.length\n    for(let j = 0; j < n; j++) {\n      if(res.indexOf(group[j]) === -1"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n    let count = 0;\n    for (let i = num; i > 0; i--) {\n        if (num % 2 === 0) {\n            count++;\n        }\n        num = Math.floor(num / 2);\n    }\n    return (count, num);\n}\n\nmodule.exports = even_odd_count;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  number = parseInt(number);\n  let i = 0;\n  let roman = '';\n  while (number > 0) {\n    if (number >= 1000) {\n      roman +='m';\n      number -= 1000;\n    }\n    if (number >= 900) {\n      roman += 'cm';\n      number -= 900;\n    }\n    if (number >= 500) {\n      roman += 'd';\n      number -= 500;\n    }\n    if (number >= 400) {\n      roman += 'cd';\n      number -= 400;\n    }\n    if (number >= 100) {\n      roman += 'c';\n      number -= 100;\n    }\n    if (number >= 90) {\n      roman += 'xc';\n      number -= 90;\n    }\n    if (number >= 50) {\n      roman += 'l';\n      number -= 50;\n    }\n    if (number >= 40) {\n      roman += 'xl';\n      number -= 40;\n    }\n    if (number >= 10) {\n      roman += 'x';\n      number -= 10;\n    }\n    if (number >= 9) {\n      roman += 'ix';\n      number -= 9;\n    }\n    if (number >= 5) {\n      roman += 'v';\n      number -= 5;\n    }\n    if (number >= 4) {\n      roman += 'iv';\n      number -= 4;\n    }\n    if (number >= 1) {\n      roman += 'i';\n      number -= 1;\n    }\n    number = parseInt(number);\n  }\n  return roman.toLowerCase();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  if (Math.abs(Math.acos(a / (a + b + c)) - Math.PI / 4) > 0.001) return false;\n  return true;\n};\n\nexport {\n  right_angle_triangle,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  let max_word = words[0]\n  let min_word = words[0]\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max_word.length) {\n      max_word = words[i]\n    }\n\n    if (words[i].length < min_word.length) {\n      min_word = words[i]\n    }\n  }\n\n  return max_word\n}\n\n//Find the maximum number of unique characters in the given list of words.\nconst find_max_uniq = (words) => {\n  let max_uniq = 1\n  let count = 1\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max_uniq) {\n      max_uniq = words[i].length\n      count = 1\n    }\n\n    if (words[i].length < max_uniq) {\n      if (words[i].length === max_uniq) {\n        count++\n      }\n    }\n  }\n\n  return max_uniq * count\n}\n\n//Find the maximum number of unique characters in the given list of words.\nconst find_max_uniq_consecutive = (words) => {\n  let max_uniq = 1\n  let count = 1\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max_uniq) {\n      max_uniq = words[i].length\n      count = 1\n    }\n\n    if (words[i].length < max_uniq) {\n      if (words[i].length === max_uniq) {\n        count++\n      }\n\n      if (count === 2) {\n        break\n      }\n    }\n  }\n\n  return max_uniq * count\n}\n\n//Find the maximum number of unique characters in the given list of words.\nconst find_max_uniq_consecutive_words = (words) => {\n  let max_uniq = 1\n  let count = 1\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max_uniq) {\n      max_uniq = words[i].length\n      count = 1\n    }\n\n    if (words[i].length < max_uniq) {\n      if (words[i].length === max_uniq) {\n        count++\n      }\n\n      if (count === 2) {\n        break\n      }\n    }\n  }\n\n  return max_uniq * count\n}\n\n//Find the maximum number of unique characters in the given list of words.\nconst find_max_uniq_consecutive_words_with_dictionary = (words, dictionary) => {\n  let max_uniq = 1\n  let count = 1\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > max_uniq) {\n      max_uniq = words[i].length\n      count = 1\n    }\n\n    if (words[i].length < max_uniq) {\n      if (words[i].length === max_uniq) {\n        count++\n      }\n\n      if (count === 2) {\n        if (dictionary.hasOwnProperty(words[i])) {\n          count = 1\n        } else {\n          break\n        }\n      }\n    }\n  }\n\n  return max_uniq * count\n}\n\n//Find the maximum number of unique characters in the given list of words.\nconst find_max_uniq_consecutive_words_with_dictionary_reverse = (words, dictionary) => {\n  let max_uniq = 1\n  let count = 1\n\n  for (let i = words.length - 1; i >= 0; i--) {\n    if (words[i].length > max_uniq) {\n      max_uniq = words[i].length\n      count = 1\n    }\n\n    if (words[i].length < max_uniq) {\n      if (words[i].length === max_uniq) {\n        count++\n      }\n\n      if (count === 2) {\n        if (dictionary.hasOwnProperty(words[i])) {\n          count = 1\n        } else {\n          break\n        }\n      }\n    }\n  }\n\n  return max_uniq * count\n}\n\n//Find the maximum number of unique characters in the given list of words.\nconst find_max_uniq_consecutive_words_with_dictionary_reverse_and_sort = (words, dictionary) => {\n  let max_uniq = 1\n  let count = 1\n\n  for (let i = words.length - 1; i >= 0; i--) {\n    if (words[i].length > max_uniq) {\n      max_uniq = words[i].length\n      count = 1\n    }\n\n    if (words[i].length < max_uniq) {\n      if (words[i].length === max_uniq) {\n        count++\n      }\n\n      if (count === 2) {\n        if (dictionary.hasOwnProperty(words[i])) {\n          count = 1\n          words.sort()\n        } else {\n          break\n        }\n      }\n    }\n  }\n\n  return max_uniq * count\n}\n\n//Find the maximum number of unique characters in the given list of words.\nconst find_max_uniq_consecutive_words_with_dictionary_reverse_and_sort_and_sort = (words, dictionary) => {\n  let max_uniq = 1\n  let count = 1\n\n  for (let i = words.length - 1; i >= 0; i--) {\n    if (words[i].length > max_uniq) {\n      max_uniq = words[i].length\n      count"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let totalCarrots = number\n  let needCarrots = need\n  let remainingCarrots = remaining\n  \n  while(needCarrots > 0) {\n    if(totalCarrots < needCarrots) {\n      break\n    }\n    totalCarrots -= needCarrots\n    remainingCarrots -= needCarrots\n  }\n  \n  return [totalCarrots, remainingCarrots]\n}\n\nconsole.log(eat(5, 6, 10))\nconsole.log(eat(4, 8, 9))\nconsole.log(eat(1, 10, 10))\nconsole.log(eat(2, 11, 5))<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n  const operator_len = operator.length\n  const operand_len = operand.length\n  const operator_array = Array.from(operator)\n  const operand_array = Array.from(operand)\n\n  // Base case\n  if (operator_len === 0) {\n    return operand_array.join('')\n  }\n\n  // Recursion\n  const operator_0 = operator_array[0]\n  if (operator_0 === '+') {\n    return do_algebra(operator_array.slice(1), operand_array)\n  } else if (operator_0 === '-') {\n    return do_algebra(operator_array.slice(1), operand_array.concat([]).reverse())\n  } else if (operator_0 === '*') {\n    return do_algebra(operator_array.slice(1), operand_array.reduce((pre, cur) => [pre[0] + cur[0], pre[1] + cur[1]], [0, 0]))\n  } else if (operator_0 === '/') {\n    return do_algebra(operator_array.slice(1), operand_array.reduce((pre, cur) => [pre[0] * cur[0], pre[1] * cur[1]], [1, 1]))\n  } else if (operator_0 === '**') {\n    return do_algebra(operator_array.slice(1), operand_array.reduce((pre, cur) => [pre[0] * cur[0], pre[1] * cur[1]], [1, 1]))\n  } else {\n    return undefined\n  }\n}\n\nconst main = () => {\n  const operators = ['+', '-', '*', '/', '**']\n  const operands = [2, 3, 4, 5]\n  const expected = '9'\n\n  console.log(do_algebra(operators, operands))\n  console.log(expected)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  if (!s) return ''\n  let len = s.length\n  let res = ''\n  for (let i = 0; i < len; i++) {\n    let x = s[i]\n    if (x === 'A' || x === 'a' || x === 'B' || x === 'b' || x === 'C' || x === 'c' || x === 'D' || x === 'd') {\n      x = x.toUpperCase()\n    } else {\n      x = x.toLowerCase()\n    }\n    res += x\n  }\n  return res\n}\n\nconsole.log(solve('Aa'))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  if(text === undefined) {\n    return undefined;\n  }\n  else if(text === '') {\n    return null;\n  }\n\n  return md5(text);\n};\n\nexport default string_to_md5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n    const result = [];\n    let i = a;\n    while (i < b) {\n        result.push(i);\n        i += 2;\n    }\n    return result;\n};\n\n// Tests\n// ----------------------------------------\n\nconst test_generate_integers = () => {\n    let i;\n    let a;\n    let b;\n\n    a = 2;\n    b = 8;\n    i = generate_integers(a, b);\n    console.log(i);\n    assert.deepEqual(i, [2, 4, 6, 8]);\n\n    a = 8;\n    b = 2;\n    i = generate_integers(a, b);\n    console.log(i);\n    assert.deepEqual(i, [2, 4, 6, 8]);\n\n    a = 10;\n    b = 14;\n    i = generate_integers(a, b);\n    console.log(i);\n    assert.deepEqual(i, []);\n};\n\ntest_generate_integers();\n<|endoftext|>"}
