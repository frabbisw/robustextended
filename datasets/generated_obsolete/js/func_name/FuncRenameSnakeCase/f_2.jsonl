{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "has_close_elements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> has_close_elements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> has_close_elements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst has_close_elements = (numbers, threshold) => {\n  const sorted_numbers = numbers.slice().sort();\n  for (let i = 1; i < sorted_numbers.length; i++) {\n    if (sorted_numbers[i - 1] === sorted_numbers[i] && Math.abs(sorted_numbers[i - 1] - sorted_numbers[i]) < threshold) {\n      return true;\n    }\n  }\n  return false;\n};\n\nexport default has_close_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separate_paren_groups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separate_paren_groups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separate_paren_groups = (paren_string) => {\n  const string_length = paren_string.length;\n  const nested_brackets = [0, 0];\n  let open_brackets = 0;\n  let index = 0;\n  while (index < string_length) {\n    const char = paren_string.charAt(index);\n    if (char === '(') {\n      nested_brackets[open_brackets] += 1;\n    } else if (char === ')') {\n      nested_brackets[open_brackets] -= 1;\n      if (nested_brackets[open_brackets] === 0) {\n        open_brackets -= 1;\n      }\n    }\n    index += 1;\n  }\n  const results = [];\n  index = 0;\n  while (index < string_length) {\n    const next_char = paren_string.charAt(index);\n    if (next_char === ')') {\n      const next_nested_brackets = nested_brackets[open_brackets];\n      if (next_nested_brackets === 0) {\n        const result = paren_string.substring(index + 1, index + 1 + next_nested_brackets);\n        index += next_nested_brackets + 1;\n        results.push(result);\n      }\n    } else if (next_char === '(') {\n      index += 1;\n      open_brackets += 1;\n    } else {\n      index += 1;\n    }\n  }\n  return results;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncate_number", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncate_number(3.5)\n  0.5\n  */\nconst truncate_number = (number) => {\n  const number_as_string = number.toString()\n  const decimal_index = number_as_string.indexOf('.')\n  const integer_part = number_as_string.substring(0, decimal_index)\n  const decimals = number_as_string.substring(decimal_index + 1)\n  return parseInt(decimals)\n}\n\n/* Given a string, return its length in characters.\n  >>> length('This is a string.')\n  13\n  */\nconst length = (string) => {\n  return string.length\n}\n\n/* Given a string, return a string with all of its non-alphanumeric characters\n  transformed to underscores.\n  >>> replace_non_alphanumeric('This is a string. It is a string.')\n  'this_is_a_string. it_is_a_string'\n  */\nconst replace_non_alphanumeric = (string) => {\n  const regex = /[^a-zA-Z0-9]/g\n  return string.replace(regex, '_')\n}\n\n/* Given a string, return a string with all of its non-alphanumeric characters\n  transformed to lowercase.\n  >>> lowercase('This is a string. It is a string.')\n  'this_is_a_string. it_is_a_string'\n  */\nconst lowercase = (string) => {\n  return replace_non_alphanumeric(string).toLowerCase()\n}\n\n/* Given a string, return a string with all of its non-alphanumeric characters\n  transformed to uppercase.\n  >>> uppercase('This is a string. It is a string.')\n  'this_is_a_string. it_is_a_string'\n  */\nconst uppercase = (string) => {\n  return replace_non_alphanumeric(string).toUpperCase()\n}\n\n/* Given a string, return a string with all of its words in a single sentence\n  capitalized.\n  >>> capitalize('This is a string. It is a string.')\n  'This is a string. It is a string.'\n  */\nconst capitalize = (string) => {\n  const words = string.split(' ')\n  return words.map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1)\n  }).join(' ')\n}\n\n/* Given a string, return a string with all of its words in a single sentence\n  lowercased.\n  >>> lowercase('This is a string. It is a string.')\n  'this_is_a_string. it_is_a_string'\n  */\nconst lowercase_words = (string) => {\n  const words = string.split(' ')\n  return words.map(word => {\n    return word.toLowerCase()\n  }).join(' ')\n}\n\n/* Given a string, return a string with all of its words in a single sentence\n  capitalized.\n  >>> capitalize('This is a string. It is a string.')\n  'This is a string. It is a string.'\n  */\nconst capitalize_words = (string) => {\n  const words = string.split(' ')\n  return words.map(word => {\n    return word.charAt(0).toUpperCase() + word.slice(1)\n  }).join(' ')\n}\n\n/* Given a string, return a string with all of its words in a single sentence\n  capitalized.\n  >>> capitalize_words('This is a string. It is a string.')\n  'This is a string. It is a string.'\n  */\nconst upper_case_words = (string) => {\n  const words = string.split(' ')\n  return words.map(word => {\n    return word.toUpperCase()\n  }).join(' ')\n}\n\n/* Given a string, return a string with all of its words in a single sentence\n  capitalized.\n  >>> lowercase_words('This is a string. It is a string.')\n  'this_is_a_string. it_is_a_string'\n  */\nconst upper_case_words = (string) => {\n  const words = string.split(' ')\n  return words.map(word => {\n    return word.toUpperCase()\n  }).join(' ')\n}\n\n/* Given a string, return a string with all of its words in a single sentence\n  capitalized.\n  >>> lowercase_words('This is a string. It is a string.')\n  'this_is_a_string. it_is_a_string'\n  */\nconst upper_case_words = (string) => {\n  const words = string.split(' ')\n  return words.map(word => {\n    return word.toUpperCase()\n  }).join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "below_zero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> below_zero([1, 2, 3])\n  false\n  >>> below_zero([1, 2, -4, 5])\n  true\n  */\nconst below_zero = (operations) => {\n  const result = []\n  let balance = 0\n  for (let i = 0; i < operations.length; i += 2) {\n    if (operations[i] === 'withdraw') {\n      balance -= operations[i + 1]\n    } else {\n      balance += operations[i + 1]\n    }\n    if (balance < 0) {\n      result.push(true)\n      return result\n    }\n  }\n  result.push(false)\n  return result\n}\n\nexport default below_zero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "mean_absolute_deviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> mean_absolute_deviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst mean_absolute_deviation = (numbers) => {\n  const center = mean(numbers);\n  return (number) => Math.abs(number - center);\n};\n\nexport default mean_absolute_deviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let result = []\n  if (!Array.isArray(numbers) ||!numbers.length) {\n    return []\n  }\n  const n = numbers.length\n  for (let i = 0; i < n; i++) {\n    if (i === 0) {\n      result.push(numbers[0])\n    } else if (i === n - 1) {\n      result.push(numbers[n - 1])\n    } else {\n      result.push(numbers[i], delimeter, numbers[i + 1])\n    }\n  }\n  return result\n}\n\nmodule.exports = intersperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parse_nested_parens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parse_nested_parens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parse_nested_parens = (paren_string) => {\n  // Array of levels of nesting\n  let levels = [];\n  let current_level = 0;\n  const paren_matches = paren_string.match(/(\\()|(\\))/g);\n  const string_length = paren_string.length;\n  // Create an empty list to hold each level of nesting.\n  for (let i = 0; i < paren_matches.length; i++) {\n    // If the current group is an opening parenthesis, create a new list.\n    if (paren_matches[i] === '(') {\n      levels.push([]);\n    }\n    // If the current group is a closing parenthesis, append the list to the current level.\n    if (paren_matches[i] === ')') {\n      levels[current_level].push(paren_matches[i]);\n      current_level--;\n    }\n  }\n  // Return the maximum level of nesting.\n  return max(levels, (level) => {\n    return level.length;\n  });\n};\n\nmodule.exports = parse_nested_parens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filter_by_substring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filter_by_substring([], 'a')\n  []\n  >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filter_by_substring = (strings, substring) => {\n  const len = strings.length;\n  const filtered_strings = [];\n  let i = 0;\n  let j = 0;\n  for (; i < len; i++) {\n    if (strings[i].indexOf(substring)!== -1) {\n      filtered_strings.push(strings[i]);\n    }\n  }\n  return filtered_strings;\n};\n\n/**\n  * Return the first index of a substring in a string\n  * @param {string} string - the string to search\n  * @param {string} substr - the substring to search for\n  * @return {number} - the index of the first occurence of substr in string\n  *\n  * @example\n  * find_index_of_substring('hello', 'll')\n  * // => 1\n  * find_index_of_substring('hello', 'hello')\n  * // => 0\n  * find_index_of_substring('hello', 'hello world')\n  * // => -1\n  */\nconst find_index_of_substring = (string, substr) => {\n  const substr_len = substr.length;\n  const string_len = string.length;\n  let index = -1;\n  let i = 0;\n  let j = 0;\n  for (; i < string_len; i++) {\n    for (; j < substr_len; j++) {\n      if (string[i] === substr[j]) {\n        index = i;\n        break;\n      }\n    }\n    if (index!== -1) {\n      break;\n    }\n  }\n  return index;\n};\n\n/**\n  * Return a new string that contains all occurrences of a substring in a string\n  * @param {string} string - the string to search\n  * @param {string} substr - the substring to search for\n  * @return {string} - the string with all occurrences of substr\n  *\n  * @example\n  * filter_by_substring('hello world', 'ello')\n  * // => 'world'\n  * filter_by_substring('hello world', 'world')\n  * // => ''\n  * filter_by_substring('hello world', 'hellow')\n  * // => 'world'\n  */\nconst filter_by_substring = (string, substr) => {\n  const substr_len = substr.length;\n  const string_len = string.length;\n  let i = 0;\n  let j = 0;\n  let new_string = '';\n  let substr_index = 0;\n  while (i < string_len) {\n    substr_index = 0;\n    while (j < substr_len) {\n      if (string[i] === substr[j]) {\n        new_string += substr[j];\n        i++;\n        j++;\n      } else {\n        substr_index = substr_index + 1;\n        j = 0;\n      }\n    }\n    i = i + 1;\n  }\n  return new_string;\n};\n\nmodule.exports = {\n  filter_by_substring,\n  find_index_of_substring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sum_product", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sum_product([])\n  (0, 1)\n  >>> sum_product([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sum_product = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n\n  const sum = sum_product(numbers.slice(1))\n  const product = product_sum(numbers.slice(1))\n\n  return (sum[0] + numbers[0], product[0] * sum[1])\n}\n\nexport default sum_product\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolling_max", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolling_max = (numbers) => {\n  const roll_max = (numbers, index) => {\n    if (index === numbers.length - 1) {\n      return numbers[index];\n    }\n    return Math.max(roll_max(numbers, index + 1), numbers[index]);\n  };\n  return roll_max(numbers, 0);\n};\n\nmodule.exports = rolling_max;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "is_palindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longest = longestPalindrome(string);\n  const palindromic = longest.slice(0, longest.length - 1);\n  return string + palindromic.split('').reverse().join('');\n}\n\n/* Find the longest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest prefix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('abc')\n  'abcc'\n  >>> makePalindrome('aaaa')\n  'aaaa'\n  */\nconst longestPalindrome = (string) => {\n  const max_length = string.length;\n  const length_of_prefix = 1;\n  const length_of_suffix = 1;\n  const palindrome = '';\n  for (let i = 0; i < max_length; i++) {\n    let prefix = string.substring(0, i + length_of_prefix);\n    let suffix = string.substring(i + length_of_prefix, i + length_of_prefix + length_of_suffix);\n    if (is_palindrome(prefix + suffix)) {\n      palindrome = prefix + suffix;\n    }\n  }\n  return palindrome;\n}\n\n/* Find the shortest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('catac')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('abc')\n  'abc'\n  >>> makePalindrome('aaaa')\n  'aaaa'\n  */\nconst makePalindrome = (string) => {\n  const longest = longestPalindrome(string);\n  const palindromic = longest.split('').reverse().join('');\n  return string.slice(0, string.length - longest.length) + palindromic;\n}\n\n/* Find the shortest palindrome that ends with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the start of the string reverse of a string suffix that comes after the palindromic prefix.\n  >>> makePalindrome('cat')\n  'cat'\n  >>> makePalindrome('catac')\n  'cat'\n  >>> makePalindrome('cata')\n  'cata'\n  >>> makePalindrome('abc')\n  'abc'\n  >>> makePalindrome('aaaa')\n  'aaaa'\n  */\nconst longestPalindrome = (string) => {\n  const max_length = string.length;\n  const length_of_prefix = 1;\n  const length_of_suffix = 1;\n  const palindrome = '';\n  for (let i = 0; i < max_length; i++) {\n    let prefix = string.substring(i + length_of_prefix, i + length_of_prefix + length_of_suffix);\n    let suffix = string.substring(i + length_of_prefix + length_of_suffix, i + length_of_prefix + 2 * length_of_suffix);\n    if (is_palindrome(prefix + suffix)) {\n      palindrome = prefix + suffix;\n    }\n  }\n  return palindrome;\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if a string is a palindrome */\nconst is_palindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/*"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "string_xor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> string_xor('010', '110')\n  '100'\n  */\nconst string_xor = (a, b) => {\n  const a_len = a.length;\n  const b_len = b.length;\n  const str = new Array(a_len + b_len);\n  let i = 0;\n  let j = 0;\n  while (i < a_len && j < b_len) {\n    str[i + j] = a[i] ^ b[j];\n    i++;\n    j++;\n  }\n  while (i < a_len) {\n    str[i + j] = a[i];\n    i++;\n  }\n  while (j < b_len) {\n    str[i + j] = b[j];\n    j++;\n  }\n  return str.join('');\n};\n\n/*\n  Input is an integer n. Perform n iterations of binary XOR on n inputs\n  and return the final value.\n  >>> xor_iterations(10)\n  90\n  */\nconst xor_iterations = (n) => {\n  const iterations = new Array(n);\n  for (let i = 0; i < n; i++) {\n    iterations[i] = xor_iteration(i);\n  }\n  return iterations.reduce((sum, current) => sum + current, 0);\n};\n\n/*\n  Input is an integer n. Perform n iterations of binary XOR on n inputs\n  and return the final value.\n  >>> xor_iteration(10)\n  90\n  */\nconst xor_iteration = (n) => {\n  const xor_input = new Array(n);\n  for (let i = 0; i < n; i++) {\n    xor_input[i] = i;\n  }\n  return xor_input.reduce((a, b) => a ^ b, 0);\n};\n\nexport { string_xor, xor_iterations, xor_iteration };\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings ||!strings.length) return null;\n  let longest = strings[0];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].length > longest.length) {\n      longest = strings[i];\n    }\n  }\n  return longest;\n};\n\n/*\n  >>> longest([[]])\n  Error: Cannot iterate empty array\n  >>> longest([[], [], []])\n  Error: Cannot iterate empty array\n  >>> longest([[], [], []])\n  Error: Cannot iterate empty array\n  >>> longest([])\n  Error: Cannot iterate empty array\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longest([['a'], ['b'], ['c']])\n  'a'\n  >>> longest([['a'], ['b'], ['c'], ['d']])\n  'c'\n  */\nconst longest = (arr) => {\n  if (!arr ||!arr.length) return null;\n  let longest = arr[0];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i].length > longest.length) {\n      longest = arr[i];\n    }\n  }\n  return longest;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greatest_common_divisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greatest_common_divisor(3, 5)\n  1\n  >>> greatest_common_divisor(25, 15)\n  5\n  */\nconst greatest_common_divisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  let tmp = Math.min(a, b);\n  if (a > tmp) {\n    a = a - tmp;\n  } else {\n    b = tmp - b;\n  }\n  while (a!== 0) {\n    tmp = a;\n    a = b % a;\n    b = tmp;\n  }\n  return b;\n};\n\nexport default greatest_common_divisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "all_prefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> all_prefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst all_prefixes = (string) => {\n    const prefixes = []\n    for (let i = 0; i <= string.length; i++) {\n        const prefix = string.substring(0, i)\n        prefixes.push(prefix)\n    }\n    return prefixes\n}\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  *\n  * @param  {string} string Input string\n  * @return {array} List of all suffixes\n  *\n  * @example\n  *\n  *    >>> all_suffixes('abc')\n  *    ['c', 'b', 'a']\n  */\nconst all_suffixes = (string) => {\n    const suffixes = []\n    for (let i = 0; i <= string.length; i++) {\n        const suffix = string.substring(string.length - i, string.length)\n        suffixes.push(suffix)\n    }\n    return suffixes\n}\n\n/**\n  * Return list of all prefixes and suffixes of the input string\n  *\n  * @param  {string} string Input string\n  * @return {array} List of all prefixes and suffixes\n  *\n  * @example\n  *\n  *    >>> all_prefixes_suffixes('abc')\n  *    ['a', 'ab', 'abc', 'b', 'bc', 'c', 'ab', 'abc']\n  */\nconst all_prefixes_suffixes = (string) => {\n    const prefixes = all_prefixes(string)\n    const suffixes = all_suffixes(string)\n    return prefixes.concat(suffixes)\n}\n\n/**\n  * Return list of all substrings of the input string\n  *\n  * @param  {string} string Input string\n  * @return {array} List of all substrings\n  *\n  * @example\n  *\n  *    >>> all_substrings('abc')\n  *    ['a', 'b', 'c']\n  */\nconst all_substrings = (string) => {\n    const substrings = []\n    for (let i = 0; i <= string.length; i++) {\n        const substring = string.substring(i)\n        substrings.push(substring)\n    }\n    return substrings\n}\n\n/**\n  * Return list of all prefixes and suffixes of the input string\n  *\n  * @param  {string} string Input string\n  * @return {array} List of all prefixes and suffixes\n  *\n  * @example\n  *\n  *    >>> all_prefixes_suffixes('abc')\n  *    ['a', 'ab', 'abc', 'b', 'bc', 'c', 'ab', 'abc']\n  */\nconst all_substrings_of_length = (string, length) => {\n    const substrings = all_substrings(string)\n    const result = []\n    for (let i = 0; i < substrings.length; i++) {\n        const substring = substrings[i]\n        if (substring.length === length) {\n            result.push(substring)\n        }\n    }\n    return result\n}\n\n/**\n  * Return list of all prefixes of the input string of a given length\n  *\n  * @param  {string} string Input string\n  * @param  {int}     length Length of prefix to return\n  * @return {array} List of all prefixes\n  *\n  * @example\n  *\n  *    >>> all_prefixes_of_length(string, 3)\n  *    ['a', 'ab', 'abc']\n  */\nconst all_prefixes_of_length = (string, length) => {\n    const substrings = all_substrings_of_length(string, length)\n    const result = []\n    for (let i = 0; i < substrings.length; i++) {\n        const substring = substrings[i]\n        result.push(substring)\n    }\n    return result\n}\n\n/**\n  * Return list of all prefixes of the input string\n  *\n  * @param  {string} string Input string\n  * @return {array} List of all prefixes\n  *\n  * @example\n  *\n  *    >>> all_prefixes('abc')\n  *    ['a', 'ab', 'abc']\n  */\nconst all_prefixes_of_length_of_length = (string, length) => {\n    const substrings = all_substrings_of_length(string, length)\n    const result = []\n    for (let i = 0; i < substrings.length; i++) {\n        const substring = substrings[i]\n        result.push(substring)\n    }\n    return result\n}\n\n/**\n  * Return list of all suffixes of the input string of a given length\n  *\n  * @param  {string} string Input string\n  * @param  {int}     length Length of suffix to return\n  * @return {array} List of all suffixes\n  *\n  * @example\n  *\n  *    >>> all_suffixes_of_length(string, 3)\n  *    ['c', 'b', 'a']\n  */\nconst all_suffixes_of_length = (string, length) => {\n    const substrings = all_substrings_of_length(string, length)\n    const result = []\n    for (let i = 0; i < substrings.length; i++) {\n        const substring = substrings[i]\n        result.push(substring)\n    }\n    return result\n}\n\nmodule.exports = {\n    all_substrings,\n    all_prefixes,\n    all_suffixes,\n    all_prefixes_suffixes,\n    all_prefixes_of_length,\n    all_prefixes_of_length_of_length,\n    all_suffixes_of_length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "string_sequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> string_sequence(0)\n  '0'\n  >>> string_sequence(5)\n  '0 1 2 3 4 5'\n  */\nconst string_sequence = (n) => {\n  let output = '';\n  for (let i = 0; i < n; i++) {\n    output += i;\n    if (i < n - 1) {\n      output +='';\n    }\n  }\n  return output;\n};\n\nexport { string_sequence };\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "count_distinct_characters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> count_distinct_characters('xyzXYZ')\n  3\n  >>> count_distinct_characters('Jerry')\n  4\n  */\nconst count_distinct_characters = (string) => {\n  const counts = {};\n  const unique_chars = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const char = string[i];\n    if (counts[char] === undefined) {\n      counts[char] = 0;\n      unique_chars.push(char);\n    }\n    counts[char]++;\n  }\n  return unique_chars.length;\n};\n\n/**\n * Given a string, find out how many lowercase letters does it consist of\n  >>> count_lowercase_characters('xyzXYZ')\n  1\n  >>> count_lowercase_characters('Jerry')\n  4\n  */\nconst count_lowercase_characters = (string) => {\n  const counts = {};\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const char = string[i];\n    if (char.toLowerCase() === char) {\n      if (counts[char.toLowerCase()] === undefined) {\n        counts[char.toLowerCase()] = 0;\n      }\n      counts[char.toLowerCase()]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\n/**\n * Given a string, find out how many uppercase letters does it consist of\n  >>> count_uppercase_characters('xyzXYZ')\n  1\n  >>> count_uppercase_characters('Jerry')\n  4\n  */\nconst count_uppercase_characters = (string) => {\n  const counts = {};\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const char = string[i];\n    if (char.toUpperCase() === char) {\n      if (counts[char.toUpperCase()] === undefined) {\n        counts[char.toUpperCase()] = 0;\n      }\n      counts[char.toUpperCase()]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\n/**\n * Given a string, find out how many numbers does it consist of\n  >>> count_numbers('xyzXYZ')\n  1\n  >>> count_numbers('Jerry')\n  4\n  */\nconst count_numbers = (string) => {\n  const counts = {};\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const char = string[i];\n    if (char.match(/[0-9]/)) {\n      if (counts[char] === undefined) {\n        counts[char] = 0;\n      }\n      counts[char]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\n/**\n * Given a string, find out how many numbers does it consist of\n  >>> count_special_characters('xyzXYZ')\n  0\n  >>> count_special_characters('Jerry')\n  4\n  */\nconst count_special_characters = (string) => {\n  const counts = {};\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const char = string[i];\n    if (char.match(/[a-zA-Z]/)) {\n      if (counts[char] === undefined) {\n        counts[char] = 0;\n      }\n      counts[char]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\n/**\n * Given a string, find out how many special characters does it consist of\n  >>> count_special_characters('xyzXYZ')\n  0\n  >>> count_special_characters('Jerry')\n  4\n  */\nconst count_special_characters = (string) => {\n  const counts = {};\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const char = string[i];\n    if (char.match(/[A-Za-z0-9]/)) {\n      if (counts[char] === undefined) {\n        counts[char] = 0;\n      }\n      counts[char]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\n/**\n * Given a string, find out how many whitespaces does it consist of\n  >>> count_whitespaces('xyzXYZ')\n  0\n  >>> count_whitespaces('Jerry')\n  4\n  */\nconst count_whitespaces = (string) => {\n  const counts = {};\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const char = string[i];\n    if (char ==='' || char === '\\n' || char === '\\t' || char === '\\r') {\n      if (counts[char] === undefined) {\n        counts[char] = 0;\n      }\n      counts[char]++;\n    }\n  }\n  return Object.keys(counts).length;\n};\n\nmodule.exports = {\n  count_distinct_characters,\n  count_lowercase_characters,\n  count_uppercase_characters,\n  count_numbers,\n  count_special_characters,\n  count_whitespaces\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parse_music", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music = (music_string) => {\n  let beat_counts = []\n  let current_beat_count = 0\n\n  for (let i = 0; i < music_string.length; i++) {\n    let current_note = music_string[i]\n\n    if (current_note === 'o') {\n      current_beat_count += 1\n    }\n\n    if (current_note === '|') {\n      current_beat_count += 1\n    }\n\n    if (current_beat_count === 4) {\n      beat_counts.push(current_beat_count)\n      current_beat_count = 0\n    }\n  }\n\n  return beat_counts\n}\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_2 = (music_string) => {\n  let beat_counts = []\n  let current_beat_count = 0\n  let current_note = 0\n  let is_half_note = false\n  let is_quarter_note = false\n  let previous_note = 0\n\n  for (let i = 0; i < music_string.length; i++) {\n    let current_note = music_string[i]\n\n    if (current_note === 'o') {\n      current_beat_count += 1\n    }\n\n    if (current_note === '|') {\n      if (is_quarter_note) {\n        beat_counts.push(current_beat_count)\n      }\n\n      is_quarter_note = true\n      is_half_note = false\n      current_beat_count = 0\n    }\n\n    if (current_note === '.') {\n      if (is_half_note) {\n        beat_counts.push(current_beat_count)\n      }\n\n      is_half_note = true\n      is_quarter_note = false\n      current_beat_count = 0\n    }\n\n    previous_note = current_note\n\n    if (previous_note === 'o') {\n      current_beat_count += 1\n    }\n  }\n\n  if (is_half_note) {\n    beat_counts.push(current_beat_count)\n  }\n\n  if (is_quarter_note) {\n    beat_counts.push(current_beat_count)\n  }\n\n  return beat_counts\n}\n\n/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parse_music_2('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parse_music_3 = (music_string) => {\n  let beat_counts = []\n  let current_beat_count = 0\n  let current_note = 0\n  let is_half_note = false\n  let is_quarter_note = false\n  let previous_note = 0\n\n  for (let i = 0; i < music_string.length; i++) {\n    let current_note = music_string[i]\n\n    if (current_note === 'o') {\n      current_beat_count += 1\n    }\n\n    if (current_note === '|') {\n      if (is_quarter_note) {\n        beat_counts.push(current_beat_count)\n      }\n\n      is_quarter_note = true\n      is_half_note = false\n      current_beat_count = 0\n    }\n\n    if (current_note === '.') {\n      if (is_half_note) {\n        beat_counts.push(current_beat_count)\n      }\n\n      is_half_note = true\n      is_quarter_note = false\n      current_beat_count = 0\n    }\n\n    previous_note = current_note\n\n    if (previous_note === 'o') {\n      current_beat_count += 1\n    }\n  }\n\n  if (is_half_note) {\n    beat_counts.push(current_beat_count)\n  }\n\n  if (is_quarter_note) {\n    beat_counts.push(current_beat_count)\n  }\n\n  return beat_counts\n}\n\nmodule.exports = parse_music\nmodule.exports2 = parse_music_2\nmodule.exports3 = parse_music_3\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "how_many_times", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> how_many_times('', 'a')\n  0\n  >>> how_many_times('aaa', 'a')\n  3\n  >>> how_many_times('aaaa', 'aa')\n  3\n  */\nconst how_many_times = (string, substring) => {\n    let count = 0;\n    let start = 0;\n    while (start!== -1) {\n        start = string.indexOf(substring, start + 1);\n        if (start!== -1) {\n            count++;\n        }\n    }\n    return count;\n};\n\n/* Find the longest substring in the string that doesn't contain any character\n  from the given set. */\nconst longest_substring_without_characters = (string, char_set) => {\n    const longest_substring = '';\n    let start = 0;\n    while (start!== -1) {\n        start = string.indexOf(char_set, start + 1);\n        if (start!== -1) {\n            longest_substring = string.substring(0, start + 1);\n        }\n    }\n    return longest_substring;\n};\n\n/* Find the longest substring in the string that doesn't contain any character\n  from the given set. */\nconst longest_substring_without_characters2 = (string, char_set) => {\n    const longest_substring = '';\n    let start = 0;\n    while (start!== -1) {\n        start = string.indexOf(char_set, start + 1);\n        if (start!== -1) {\n            longest_substring = string.substring(start, string.length);\n        }\n    }\n    return longest_substring;\n};\n\nconst longest_substring_without_characters_string = 'bbbbb';\nconst longest_substring_without_characters_char_set = 'bbb';\n\nconsole.log(longest_substring_without_characters(longest_substring_without_characters_string, longest_substring_without_characters_char_set));\nconsole.log(longest_substring_without_characters2(longest_substring_without_characters_string, longest_substring_without_characters_char_set));\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sort_numbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sort_numbers('three one five')\n  'one three five'\n  */\nconst sort_numbers = (numbers) => {\n  return (\n    numbers.split(' ').sort(n => parseInt(n))\n     .join(' ')\n  );\n};\n\n/*\n  Input: \"apple orange banana\"\n  Output: \"apple orange banana\"\n  Return a string with the order of the words reversed.\n  >>> reverse_words(\"apple orange banana\")\n  'apple orange banana'\n  */\nconst reverse_words = (words) => {\n  return words.split(' ').reverse().join(' ');\n};\n\n/*\n  Input: \"one two\"\n  Output: \"two one\"\n  Return a string with the words in the order of their lengths, with the shortest first.\n  >>> length_first(\"one two\")\n  'one two'\n  */\nconst length_first = (words) => {\n  return words.split(' ').sort((a, b) => a.length - b.length).join(' ');\n};\n\n/*\n  Input: \"one two three\"\n  Output: \"three two one\"\n  Return a string with the words in the order of their lengths, with the shortest first.\n  >>> length_first(\"one two three\")\n  'one two three'\n  */\nconst length_first_reverse = (words) => {\n  return words.split(' ').sort((a, b) => b.length - a.length).join(' ');\n};\n\n/*\n  Input: \"one two\"\n  Output: \"two one\"\n  Return a string with the words in the order of their lengths, with the shortest first.\n  >>> length_first(\"one two\")\n  'one two'\n  */\nconst length_first_reverse_sort = (words) => {\n  return words.split(' ').sort((a, b) => a.length - b.length).reverse().join(' ');\n};\n\n/*\n  Input: \"one two three\"\n  Output: \"three two one\"\n  Return a string with the words in the order of their lengths, with the shortest first.\n  >>> length_first_reverse_sort(\"one two three\")\n  'one two three'\n  */\nconst length_first_reverse_sort_reverse = (words) => {\n  return words.split(' ').sort((a, b) => b.length - a.length).reverse().join(' ');\n};\n\n/*\n  Input: \"a b c d e f\"\n  Output: \"a b c d e f\"\n  Return a string with the words in the order of their lengths, with the shortest first.\n  >>> length_first_reverse_sort_reverse(\"a b c d e f\")\n  'a b c d e f'\n  */\nconst length_first_reverse_sort_reverse_reverse = (words) => {\n  return words.split(' ').sort((a, b) => a.length - b.length).reverse().reverse().join(' ');\n};\n\n/*\n  Input: \"a b c d e f\"\n  Output: \"f c b a e d\"\n  Return a string with the words in the order of their lengths, with the shortest first.\n  >>> length_first_reverse_sort_reverse_reverse(\"a b c d e f\")\n  'f c b a e d'\n  */\nconst length_first_reverse_sort_reverse_reverse_reverse = (words) => {\n  return words.split(' ').sort((a, b) => a.length - b.length).reverse().reverse().reverse().join(' ');\n};\n\n/*\n  Input: \"one two three\"\n  Output: \"three two one\"\n  Return a string with the words in the order of their lengths, with the shortest first.\n  >>> length_first_reverse_sort_reverse_reverse_reverse(\"one two three\")\n  'one two three'\n  */\nconst length_first_reverse_sort_reverse_reverse_reverse_reverse = (words) => {\n  return words.split(' ').sort((a, b) => a.length - b.length).reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().join(' ');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "find_closest_elements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> find_closest_elements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst find_closest_elements = (numbers) => {\n  const sorted_numbers = numbers.slice().sort();\n  let i = 0;\n  let j = 0;\n  let closest_numbers = [sorted_numbers[0], sorted_numbers[0]];\n\n  while (i < sorted_numbers.length - 1) {\n    let min_distance = sorted_numbers[i + 1] - sorted_numbers[i];\n\n    for (let k = i + 1; k < sorted_numbers.length - 1; k++) {\n      if (Math.abs(sorted_numbers[k] - sorted_numbers[i]) < min_distance) {\n        min_distance = Math.abs(sorted_numbers[k] - sorted_numbers[i]);\n        closest_numbers = [sorted_numbers[i], sorted_numbers[k]];\n      }\n    }\n\n    i += 1;\n  }\n\n  return closest_numbers;\n};\n\nexport default find_closest_elements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescale_to_unit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescale_to_unit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescale_to_unit = (numbers) => {\n  const l = numbers.length\n  const max = Math.max.apply(Math, numbers)\n  const min = Math.min.apply(Math, numbers)\n  if (max === min) {\n    return [1.0, 0.0]\n  }\n  const mid = (max + min) / 2\n  const factor = 1.0 / (max - mid)\n  const result = numbers.map((x) => x * factor)\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filter_integers", "gc": "/* Filter given list of any python values only for integers\n  >>> filter_integers(['a', 3.14, 5])\n  [5]\n  >>> filter_integers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filter_integers = (values) => {\n  let result = [];\n  values.forEach((val) => {\n    if (typeof val === 'number' && val % 1 === 0) {\n      result.push(val);\n    }\n  });\n  return result;\n};\n\n/*\n  * @param {Array} array\n  * @return {Array}\n  * @example\n  * filter_strings([{id: 1}, {id: 2}])\n  * // => [{id: 1}, {id: 2}]\n  */\nconst filter_strings = (array) => {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n    if (typeof item ==='string') {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nconst filter_arrays = (array) => {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n    if (typeof item === 'object') {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nconst filter_objects = (array) => {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n    if (typeof item === 'object') {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*\n  * @param {Array} array\n  * @return {Array}\n  * @example\n  * filter_booleans([{id: 1}, {id: 2}])\n  * // => [{id: 1}, {id: 2}]\n  */\nconst filter_booleans = (array) => {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n    if (typeof item === 'boolean') {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\n/*\n  * @param {Array} array\n  * @return {Array}\n  * @example\n  * filter_dates([{id: 1}, {id: 2}])\n  * // => [{id: 1}, {id: 2}]\n  */\nconst filter_dates = (array) => {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n    if (typeof item === 'object' && 'date' in item) {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nconst filter_numbers = (array) => {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    let item = array[i];\n    if (typeof item === 'number') {\n      result.push(item);\n    }\n  }\n  return result;\n};\n\nexport default {\n  filter_integers,\n  filter_strings,\n  filter_arrays,\n  filter_objects,\n  filter_booleans,\n  filter_dates,\n  filter_numbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) return 0\n  return string.length\n}\n\n/* Return string with all characters replaced by the character 'x' */\nconst replace = (string, old, new) => {\n  if (!string) return ''\n  return string.replace(new RegExp(old, 'g'), new)\n}\n\n/* Return true if a string contains any of the characters in the second\n   argument'search' */\nconst contains = (string, search) => {\n  if (!string) return false\n  return search.every(search => string.indexOf(search) > -1)\n}\n\n/* Return string with all characters in the second argument'search'\n   replaced by 'new' */\nconst replaceAll = (string, search, new) => {\n  if (!string) return ''\n  return string.replace(new RegExp(search, 'g'), new)\n}\n\n/* Return string with all occurrences of 'old' replaced by 'new' */\nconst replaceAllWith = (string, old, new) => {\n  if (!string) return ''\n  return string.replace(new RegExp(old, 'g'), new)\n}\n\n/* Return true if all characters in'string' are in the alphabet */\nconst isAlphabet = (string) => {\n  if (!string) return false\n  return string.every(ch => /^[a-zA-Z]$/.test(ch))\n}\n\n/* Return true if all characters in'string' are not in the alphabet */\nconst isNotAlphabet = (string) => {\n  if (!string) return false\n  return string.every(ch => /^[^a-zA-Z]$/.test(ch))\n}\n\n/* Return true if all characters in'string' are not in the alphabet */\nconst isAlphanumeric = (string) => {\n  if (!string) return false\n  return string.every(ch => /^[a-z0-9]$/.test(ch))\n}\n\n/* Return true if all characters in'string' are not in the alphabet */\nconst isNotAlphanumeric = (string) => {\n  if (!string) return false\n  return string.every(ch => /^[^a-z0-9]$/.test(ch))\n}\n\n/* Return true if string contains no whitespace */\nconst isBlank = (string) => {\n  if (!string) return false\n  return /^\\s*$/.test(string)\n}\n\n/* Return true if string contains any whitespace */\nconst isNotBlank = (string) => {\n  if (!string) return false\n  return!/^\\s*$/.test(string)\n}\n\n/* Return true if string contains only the characters 'a' to 'z'\n   (lowercase) */\nconst isLowerCase = (string) => {\n  if (!string) return false\n  return /^[a-z]*$/.test(string)\n}\n\n/* Return true if string contains only the characters 'A' to 'Z'\n   (uppercase) */\nconst isUpperCase = (string) => {\n  if (!string) return false\n  return /^[A-Z]*$/.test(string)\n}\n\n/* Return true if string contains only the characters '0' to '9' */\nconst isNumeric = (string) => {\n  if (!string) return false\n  return /^\\d*$/.test(string)\n}\n\n/* Return true if string contains only the characters '0' to '9', '-',\n   '.', ',' and '_' */\nconst isNumericOrHyphenOrCommaOrUnderscore = (string) => {\n  if (!string) return false\n  return /^[0-9\\-\\.,_]*$/.test(string)\n}\n\n/* Return true if string contains any character in the set 'a' to 'z',\n   'A' to 'Z', '0' to '9', '-', '.', ',' and '_' */\nconst isAlphaOrNumericOrHyphenOrCommaOrUnderscore = (string) => {\n  if (!string) return false\n  return /^[a-zA-Z0-9\\-\\.,_]*$/.test(string)\n}\n\n/* Return true if string contains any character in the set 'a' to 'z',\n   'A' to 'Z', '0' to '9', '-', '.', ',' and '_' */\nconst isAlphaOrNumericOrHyphenOrCommaOrUnderscoreOrBlank = (string) => {\n  if (!string) return false\n  return /^[a-zA-Z0-9\\-\\.,_ ]*$/.test(string)\n}\n\n/* Return true if string contains all of the characters in the set\n   'a' to 'z', 'A' to 'Z', '0' to '9', '-', '.', ',' and '_' */\nconst isAlphaOrNumericOrHyphenOrCommaOrUnderscoreOrBlankOrBlank = (string) => {\n  if (!string) return false\n  return /^[a-zA-Z0-9\\-\\.,_ ]*$/.test(string)\n}\n\n/* Return true if string contains no punctuation or whitespace */\nconst isAlphaNumericOrBlank = (string) => {\n  if (!string) return false\n  return /^[a-zA-Z0-9 ]*$/.test(string)\n}\n\n/* Return true if string contains no punctuation or whitespace */\nconst isAlphaNumericOrBlankOrBlank = (string) => {\n  if (!string) return false\n  return /^[a-zA-Z0-9 ]*$/.test(string)\n}\n\n/* Return true if string contains only the characters 'a' to 'z'\n   (lowercase), 'A' to 'Z' (uppercase), '0' to '9' */\nconst isAlphaNumeric = (string) => {\n  if (!string) return false\n  return /^[a-zA-Z0-9]*$/.test(string)\n}\n\n/* Return true if string contains only the characters 'a' to 'z'\n   (lowercase), 'A' to 'Z' (uppercase), '0' to '9' and '_' */\nconst is"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largest_divisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor(15)\n  5\n  */\nconst largest_divisor = (n) => {\n  let num = 1\n  while (n > 1) {\n    if (n % num === 0) {\n      return num\n    }\n    num += 1\n  }\n  return 1\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_recursive(15)\n  5\n  */\nconst largest_divisor_recursive = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n % largest_divisor_recursive(n) === 0) {\n    return largest_divisor_recursive(n)\n  } else {\n    return largest_divisor_recursive(n - largest_divisor_recursive(n))\n  }\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> largest_divisor_recursive(15)\n  5\n  */\nconst largest_divisor_iterative = (n) => {\n  let num = 1\n  let curr = n\n  while (curr > 1) {\n    if (curr % num === 0) {\n      return num\n    }\n    num += 1\n    curr = curr - num\n  }\n  return 1\n}\n\n/*\n  Find the number of different prime numbers in the given range\n  >>> primes(1, 10)\n  [1, 3, 5, 7, 9]\n  >>> primes(1, 20)\n  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n  >>> primes(2, 10)\n  [2, 5, 7, 11, 13, 17]\n  >>> primes(10, 10)\n  []\n  */\nconst primes = (start, end) => {\n  let primes = []\n  for (let i = start; i < end; i++) {\n    let is_prime = true\n    for (let j = 2; j < i; j++) {\n      if (i % j === 0) {\n        is_prime = false\n      }\n    }\n    if (is_prime) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n/*\n  Find the number of different prime numbers in the given range\n  >>> primes(1, 10)\n  [1, 3, 5, 7, 9]\n  >>> primes(1, 20)\n  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n  >>> primes(2, 10)\n  [2, 5, 7, 11, 13, 17]\n  >>> primes(10, 10)\n  []\n  */\nconst primes_recursive = (start, end) => {\n  let primes = []\n  for (let i = start; i < end; i++) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i)\n      if (i > 1) {\n        primes_recursive(i - 1, end)\n      }\n    }\n  }\n  return primes\n}\n\n/*\n  Find the number of different prime numbers in the given range\n  >>> primes(1, 10)\n  [1, 3, 5, 7, 9]\n  >>> primes(1, 20)\n  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n  >>> primes(2, 10)\n  [2, 5, 7, 11, 13, 17]\n  >>> primes(10, 10)\n  []\n  */\nconst primes_iterative = (start, end) => {\n  let i = start\n  let is_prime = true\n  while (i < end) {\n    if (primes.indexOf(i) === -1) {\n      primes.push(i)\n      is_prime = true\n      i++\n    } else {\n      is_prime = false\n      i++\n    }\n  }\n  return primes\n}\n\n/*\n  Find the number of different prime numbers in the given range\n  >>> primes(1, 10)\n  [1, 3, 5, 7, 9]\n  >>> primes(1, 20)\n  [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]\n  >>> primes(2, 10)\n  [2, 5, 7, 11, 13, 17]\n  >>> primes(10, 10)\n  []\n  */\nconst primes_by_brute_force = (start, end) => {\n  let i = start\n  let is_prime = true\n  while (i < end) {\n    for (let j = 2; j <= i; j++) {\n      if (i % j === 0) {\n        is_prime = false\n      }\n    }\n    if (is_prime) {\n      primes.push(i)\n    }\n    is_prime = true\n    i++\n  }\n  return primes\n}\n\nexport { largest_divisor, largest_divisor_recursive, largest_divisor_iterative,\n         primes, primes_recursive, primes_iterative, primes_by_brute_force }\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const prime = []\n  let d = 2\n  while (d <= Math.sqrt(n)) {\n    if (n % d === 0) {\n      prime.push(d)\n      while (n % d === 0) {\n        n /= d\n      }\n    }\n    d++\n  }\n  if (n > 1) {\n    prime.push(n)\n  }\n  return prime\n}\n\nexport default factorize<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remove_duplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remove_duplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remove_duplicates = (numbers) => {\n  const sorted = Array.from(numbers).sort();\n  const unique = new Set(sorted);\n  return unique.filter((element) => unique.has(element));\n};\n\nconsole.log(remove_duplicates([1, 2, 3, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flip_case", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flip_case('Hello')\n  'hELLO'\n  */\nconst flip_case = (string) => {\n  return string.replace(/[a-z]/g, letter => {\n    return letter.toUpperCase()\n  }).replace(/[A-Z]/g, letter => {\n    return letter.toLowerCase()\n  })\n}\n\n/* For a given string, if any of the characters are not letters,\n  replace them with their letter representation.\n  >>> flip_case('HelloWorld')\n  'HELoWORd'\n  */\nconst flatten_case = (string) => {\n  return flip_case(string.replace(/[^a-zA-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + ('A'.charCodeAt(0) - 'a'.charCodeAt(0)))\n  }))\n}\n\n/*\n  >>> flatten_case('Hello World')\n  'HelloWorld'\n  >>> flatten_case('Hello World!')\n  'HelloWorld!'\n  >>> flatten_case('Hello World! Goodbye World!')\n  'HelloWorld! GoodbyeWorld!'\n  >>> flatten_case('Hello World! Goodbye World!')\n  'HelloWorld! GoodbyeWorld!'\n  */\nconst flatten_case_to_lower = (string) => {\n  return string.replace(/[A-Z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + ('a'.charCodeAt(0) - 'A'.charCodeAt(0)))\n  })\n}\n\n/*\n  >>> flatten_case_to_lower('Hello World')\n  'hello world'\n  >>> flatten_case_to_lower('Hello World!')\n  'hello world!'\n  >>> flatten_case_to_lower('Hello World! Goodbye World!')\n  'hello world! goodbye world!'\n  >>> flatten_case_to_lower('Hello World! Goodbye World!')\n  'hello world! goodbye world!'\n  */\nconst flatten_case_to_upper = (string) => {\n  return string.replace(/[a-z]/g, (c) => {\n    return String.fromCharCode(c.charCodeAt(0) + ('A'.charCodeAt(0) - 'a'.charCodeAt(0)))\n  })\n}\n\n/*\n  >>> flatten_case_to_upper('Hello World')\n  'HELLO WORLD'\n  >>> flatten_case_to_upper('Hello World!')\n  'HELLO WORLD!'\n  >>> flatten_case_to_upper('Hello World! Goodbye World!')\n  'HELLO WORLD! GOODBYE WORLD!'\n  >>> flatten_case_to_upper('Hello World! Goodbye World!')\n  'HELLO WORLD! GOODBYE WORLD!'\n  */\n\nconst flatten_case_to_lower_and_upper = (string) => {\n  return flatten_case_to_lower(flatten_case(flatten_case_to_upper(string)))\n}\n\n/*\n  >>> flatten_case_to_lower_and_upper('Hello World! Goodbye World!')\n  'HELLO WORLD! GOODBYE WORLD!'\n  */\n\nconst flatten_case_to_lower_and_upper_to_title = (string) => {\n  return flatten_case_to_lower(flatten_case_to_upper(flatten_case(string)))\n}\n\n/*\n  >>> flatten_case_to_lower_and_upper_to_title('Hello World! Goodbye World!')\n  'Hello World! Goodbye World!'\n  */\n\nconst flatten_case_to_lower_and_upper_to_title_to_upper = (string) => {\n  return flatten_case_to_lower(flatten_case_to_upper(flatten_case(string)))\n}\n\n/*\n  >>> flatten_case_to_lower_and_upper_to_title_to_upper('Hello World! Goodbye World!')\n  'Hello World! Goodbye World!'\n  */\n\nconst flatten_case_to_lower_and_upper_to_lower_title = (string) => {\n  return flatten_case_to_lower(flatten_case_to_upper(flatten_case(flatten_case_to_lower(string))))\n}\n\n/*\n  >>> flatten_case_to_lower_and_upper_to_lower_title('Hello World! Goodbye World!')\n  'Hello World! Goodbye World!'\n  */\n\nconst flatten_case_to_lower_and_upper_to_lower_title_to_upper = (string) => {\n  return flatten_case_to_lower(flatten_case_to_upper(flatten_case(flatten_case_to_lower(string))))\n}\n\n/*\n  >>> flatten_case_to_lower_and_upper_to_lower_title_to_upper('Hello World! Goodbye World!')\n  'Hello World! Goodbye World!'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  if (strings.length === 0) {\n    return '';\n  } else if (strings.length === 1) {\n    return strings[0];\n  } else {\n    return `${strings.slice(0, -1).join('')}${strings[strings.length - 1]}`;\n  }\n};\n\nexport default concatenate;\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filter_by_prefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filter_by_prefix([], 'a')\n  []\n  >>> filter_by_prefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filter_by_prefix = (strings, prefix) => {\n    return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filter_by_contains([], 'a')\n  []\n  >>> filter_by_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_contains = (strings, contains) => {\n    return strings.filter(s => s.includes(contains));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filter_by_contains([], 'a')\n  []\n  >>> filter_by_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_contains_with_regex = (strings, contains) => {\n    return strings.filter(s => new RegExp(contains).test(s));\n};\n\n/* Filter an input list of strings only for ones that contain a given string.\n  >>> filter_by_contains([], 'a')\n  []\n  >>> filter_by_contains(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde']\n  */\nconst filter_by_contains_with_regex_two = (strings, contains) => {\n    return strings.filter(s => new RegExp(contains, 'i').test(s));\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 'a')\n  ['abc', 'array']\n  */\nconst filter_by_contains_and_prefix = (strings, contains, prefix) => {\n    return filter_by_contains(filter_by_prefix(strings, prefix), contains);\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 'a')\n  ['abc', 'array']\n  */\nconst filter_by_contains_and_prefix_two = (strings, contains, prefix) => {\n    return filter_by_contains(filter_by_prefix(strings, prefix), contains);\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 'a')\n  ['abc', 'array']\n  */\nconst filter_by_contains_and_prefix_three = (strings, contains, prefix) => {\n    return filter_by_contains(filter_by_prefix(strings, prefix), contains);\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 'a')\n  ['abc', 'array']\n  */\nconst filter_by_contains_and_prefix_four = (strings, contains, prefix) => {\n    return filter_by_contains(filter_by_prefix(strings, prefix), contains);\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 'a')\n  ['abc', 'array']\n  */\nconst filter_by_contains_and_prefix_five = (strings, contains, prefix) => {\n    return filter_by_contains(filter_by_prefix(strings, prefix), contains);\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 'a')\n  ['abc', 'array']\n  */\nconst filter_by_contains_and_prefix_six = (strings, contains, prefix) => {\n    return filter_by_contains(filter_by_prefix(strings, prefix), contains);\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'], 'a', 'a')\n  ['abc', 'array']\n  */\nconst filter_by_contains_and_prefix_seven = (strings, contains, prefix) => {\n    return filter_by_contains(filter_by_prefix(strings, prefix), contains);\n};\n\n/* Filter an input list of strings only for ones that start with a given prefix and contain a given string.\n  >>> filter_by_contains_and_prefix([], 'a', 'a')\n  []\n  >>> filter_by_contains_and_prefix(['abc', 'bcd', 'cde', 'array'],"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "get_positive", "gc": "/*Return only positive numbers in the list.\n  >>> get_positive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> get_positive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst get_positive = (l) => {\n  let i = 0;\n  const new_l = [];\n  while (i < l.length) {\n    const curr_val = l[i];\n    if (curr_val > 0) {\n      new_l.push(curr_val);\n    }\n    i++;\n  }\n  return new_l;\n};\n\n/*\n  >>> get_odd([1, 2, 3, 4, 5, 6])\n  [1, 3, 5, 7]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7])\n  [1, 3, 5, 7]\n  >>> get_odd([1, 2, 3, 4, 5, 6, 7, 8])\n  []\n  >>> get_odd([])\n  []\n  */\nconst get_odd = (l) => {\n  const new_l = [];\n  let i = 0;\n  while (i < l.length) {\n    const curr_val = l[i];\n    if (curr_val % 2 === 1) {\n      new_l.push(curr_val);\n    }\n    i++;\n  }\n  return new_l;\n};\n\n/*\n  >>> get_even([1, 2, 3, 4, 5, 6, 7])\n  [2, 4, 6]\n  >>> get_even([])\n  []\n  >>> get_even([1, 2, 3, 4, 5, 6, 7, 8])\n  []\n  */\nconst get_even = (l) => {\n  const new_l = [];\n  let i = 0;\n  while (i < l.length) {\n    const curr_val = l[i];\n    if (curr_val % 2 === 0) {\n      new_l.push(curr_val);\n    }\n    i++;\n  }\n  return new_l;\n};\n\n/*\n  >>> get_negative([-1, 2, -4, 5, 6])\n  [-1, -4, -5]\n  >>> get_negative([1, 2, 3, 4, 5, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> get_negative([-1, 2, 3, 4, 5, 6, 7, 8])\n  [-1, 2, 3, 4, 5, 6, 7, 8]\n  >>> get_negative([])\n  []\n  */\nconst get_negative = (l) => {\n  const new_l = [];\n  let i = 0;\n  while (i < l.length) {\n    const curr_val = l[i];\n    if (curr_val < 0) {\n      new_l.push(curr_val);\n    }\n    i++;\n  }\n  return new_l;\n};\n\n/*\n  >>> get_odd_even([1, 2, 3, 4, 5, 6, 7])\n  [1, 3, 5, 7]\n  >>> get_odd_even([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 3, 5, 7]\n  >>> get_odd_even([-1, 2, 3, 4, 5, 6, 7])\n  [-1, 3, 5, 7]\n  >>> get_odd_even([])\n  []\n  */\nconst get_odd_even = (l) => {\n  const new_l = [];\n  let i = 0;\n  while (i < l.length) {\n    const curr_val = l[i];\n    if (curr_val % 2 === 0) {\n      new_l.push(curr_val);\n    }\n    i++;\n  }\n  return new_l;\n};\n\nexport {\n  get_positive,\n  get_odd,\n  get_even,\n  get_negative,\n  get_odd_even\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "is_prime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> is_prime(6)\n  false\n  >>> is_prime(101)\n  true\n  >>> is_prime(11)\n  true\n  >>> is_prime(13441)\n  true\n  >>> is_prime(61)\n  true\n  >>> is_prime(4)\n  false\n  >>> is_prime(1)\n  false\n  */\nconst is_prime = (n) => {\n  let i = 2\n  while (i < n) {\n    if (n % i === 0) return false\n    i += 1\n  }\n  return true\n}\n\n/* Return the smallest prime that is greater than the given number.\n  >>> next_prime(6)\n  7\n  >>> next_prime(3)\n  5\n  >>> next_prime(12)\n  13\n  >>> next_prime(14)\n  17\n  >>> next_prime(10)\n  11\n  >>> next_prime(20)\n  23\n  >>> next_prime(2)\n  2\n  >>> next_prime(1)\n  1\n  */\nconst next_prime = (n) => {\n  let i = 2\n  while (is_prime(i) === false) {\n    i += 1\n  }\n  while (is_prime(n + i) === true) {\n    i += 1\n  }\n  return i\n}\n\n/* Return the largest prime that is less than or equal to the given number.\n  >>> prev_prime(3)\n  2\n  >>> prev_prime(2)\n  2\n  >>> prev_prime(1)\n  1\n  >>> prev_prime(4)\n  3\n  >>> prev_prime(5)\n  3\n  >>> prev_prime(6)\n  5\n  >>> prev_prime(7)\n  5\n  >>> prev_prime(8)\n  7\n  >>> prev_prime(10)\n  11\n  >>> prev_prime(12)\n  13\n  >>> prev_prime(15)\n  17\n  >>> prev_prime(17)\n  17\n  >>> prev_prime(18)\n  17\n  >>> prev_prime(19)\n  19\n  >>> prev_prime(20)\n  19\n  >>> prev_prime(21)\n  19\n  >>> prev_prime(22)\n  23\n  >>> prev_prime(24)\n  23\n  >>> prev_prime(25)\n  23\n  >>> prev_prime(26)\n  23\n  >>> prev_prime(27)\n  23\n  >>> prev_prime(28)\n  23\n  >>> prev_prime(29)\n  23\n  >>> prev_prime(30)\n  23\n  >>> prev_prime(31)\n  23\n  >>> prev_prime(32)\n  23\n  >>> prev_prime(33)\n  23\n  >>> prev_prime(34)\n  23\n  >>> prev_prime(35)\n  23\n  >>> prev_prime(36)\n  23\n  >>> prev_prime(37)\n  23\n  >>> prev_prime(38)\n  23\n  >>> prev_prime(39)\n  23\n  >>> prev_prime(40)\n  23\n  >>> prev_prime(41)\n  23\n  >>> prev_prime(42)\n  23\n  >>> prev_prime(43)\n  23\n  >>> prev_prime(44)\n  23\n  >>> prev_prime(45)\n  23\n  >>> prev_prime(46)\n  23\n  >>> prev_prime(47)\n  23\n  >>> prev_prime(48)\n  23\n  >>> prev_prime(49)\n  23\n  >>> prev_prime(50)\n  23\n  >>> prev_prime(51)\n  23\n  >>> prev_prime(52)\n  23\n  >>> prev_prime(53)\n  23\n  >>> prev_prime(54)\n  23\n  >>> prev_prime(55)\n  23\n  >>> prev_prime(56)\n  23\n  >>> prev_prime(57)\n  23\n  >>> prev_prime(58)\n  23\n  >>> prev_prime(59)\n  23\n  >>> prev_prime(60)\n  23\n  >>> prev_prime(61)\n  23\n  >>> prev_prime(62)\n  23\n  >>> prev_prime(63)\n  23\n  >>> prev_prime(64)\n  23\n  >>> prev_prime(65)\n  23\n  >>> prev_prime(66)\n  23\n  >>> prev_prime(67)\n  23\n  >>> prev_prime(68)\n  23\n  >>> prev_prime(69)\n  23\n  >>> prev_prime(70)\n  23\n  >>> prev_prime(71)\n  23\n  >>> prev_prime(72)\n  23\n  >>> prev_prime(73)\n  23\n  >>> prev_prime(74)\n  23\n  >>> prev_prime(75)\n  23\n  >>> prev_prime(76)\n  23\n  >>> prev_prime(77)\n  23\n  >>> prev_prime(78)\n  23\n  >>> prev_prime(79)\n  23\n  >>> prev_prime(80)\n  23\n  >>> prev_prime(81)\n  23\n  >>> prev_prime(82)\n  23\n  >>> prev_prime(83)\n  23\n  >>> prev_prime(84)\n  23\n  >>> prev_prime(85)\n  23\n  >>> prev_prime(86)\n  23\n  >>> prev_prime(87)\n  23\n  >>> prev_prime(88)\n  23\n  >>> prev_prime(89)\n  23\n  >>> prev_prime(90)\n  23\n  >>> prev_prime(91)\n  23\n  >>> prev_prime(92)\n  23\n  >>> prev_prime(93)\n  23\n  >>> prev_prime(94)\n  23\n  >>> prev_prime(95)\n  23\n  >>> prev_prime(96)\n  23\n  >>> prev_prime(97)\n  23\n  >>> prev_prime(98)\n  23\n  >>> prev_prime(99)\n  23\n  >>> prev_prime(100)\n  23\n  >>> prev_prime(101)\n  23\n  >>> prev_prime(102)\n  23\n  >>> prev_prime(103)\n  23\n  >>> prev_prime(104)\n  23\n  >>> prev_"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length\n  let i = 0\n  let x = 0\n  let y = 0\n  let denominator = 0\n  while (i < n) {\n    y = xs[i]\n    if (y!== 0) {\n      denominator = xs[i]\n      x = y\n      i++\n    } else {\n      i++\n    }\n  }\n  return x / denominator\n}\n\n/*\n  findZero is a function.\n  It takes a list xs as argument.\n  returns x, which is such that poly(x) = 0.\n  It returns only only zero point, even if there are many.\n  And it returns only largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length\n  let i = 0\n  let x = 0\n  let y = 0\n  let denominator = 0\n  while (i < n) {\n    y = xs[i]\n    if (y!== 0) {\n      denominator = xs[i]\n      x = y\n      i++\n    } else {\n      i++\n    }\n  }\n  return x / denominator\n}\n\nconst test = {\n  findZero: findZero,\n  poly: poly,\n}\n\nconst listOfNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst polyOfNumbers = (xs) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index, index)\n  }, 0)\n}\n\nconst listOfPolynomials = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst polyOfPolynomials = (xs) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index, index)\n  }, 0)\n}\n\nconst listOfPolynomialsWithOneZero = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst polyOfPolynomialsWithOneZero = (xs) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index, index)\n  }, 0)\n}\n\nconst testNumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testNumbersWithOneZero = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testNumbersWithTwoZeros = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testNumbersWithTwoZerosAndOneZero = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testNumbersWithTwoZerosAndOneZeroAndOne = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nconst testPolynomials = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testPolynomialsWithOneZero = [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testPolynomialsWithTwoZeros = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testPolynomialsWithTwoZerosAndOneZero = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\nconst testPolynomialsWithTwoZerosAndOneZeroAndOne = [0, 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n\nmodule.exports = {\n  findZero,\n  poly,\n  listOfNumbers,\n  polyOfNumbers,\n  listOfPolynomials,\n  polyOfPolynomials,\n  listOfPolynomialsWithOneZero,\n  polyOfPolynomialsWithOneZero,\n  testNumbers,\n  testNumbersWithOneZero,\n  testNumbersWithTwoZeros,\n  testNumbersWithTwoZerosAndOneZero,\n  testNumbersWithTwoZerosAndOneZeroAndOne,\n  testPolynomials,\n  testPolynomialsWithOneZero,\n  testPolynomialsWithTwoZeros,\n  testPolynomialsWithTwoZerosAndOneZero,\n  testPolynomialsWithTwoZerosAndOneZeroAndOne,\n  testNumbers,\n  testNumbersWithOneZero,\n  testNumbersWithTwoZeros,\n  testNumbersWithTwoZerosAndOneZero,\n  testNumbers"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sort_third", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sort_third([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_third([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sort_third = (l) => {\n  const sorted_list = []\n  let i = 0\n  let j = 0\n  let temp = 0\n  const len = l.length\n  while (i < len && j < len) {\n    if (l[i] % 3 === 0) {\n      sorted_list[j] = l[i]\n      j++\n    } else if (l[i] % 3 === 1) {\n      temp = l[i]\n      sorted_list[j] = temp\n      i++\n    } else {\n      sorted_list[j] = temp\n      i++\n      j++\n    }\n  }\n  while (i < len) {\n    sorted_list[j] = l[i]\n    i++\n    j++\n  }\n  return sorted_list\n}\n\nconst test = (l) => {\n  console.log('test')\n  console.log(sort_third(l))\n}\n\ntest([3, 2, 6, 1, 4, 9, 7, 8, 5])\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const map = new Map()\n  const seen = new Set()\n  for (const el of l) {\n    if (!map.has(el)) {\n      map.set(el, true)\n      seen.add(el)\n    }\n  }\n  return [...seen]\n}\n\nmodule.exports = unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "max_element", "gc": "/*Return maximum element in the list.\n  >>> max_element([1, 2, 3])\n  3\n  >>> max_element([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst max_element = (l) => {\n    if (l.length === 0) return undefined;\n    const max_value = l[0];\n    const max_index = 0;\n    for (let i = 1; i < l.length; i++) {\n        if (l[i] > max_value) {\n            max_value = l[i];\n            max_index = i;\n        }\n    }\n    return max_value;\n};\n\n/* Return maximum number of occurences of element in the list.\n  >>> max_occurences([1, 2, 3, 3])\n  2\n  >>> max_occurences([1, 2, 3, 2, 4, 5, 1, 2])\n  4\n  */\nconst max_occurences = (l) => {\n    if (l.length === 0) return 0;\n    let max = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] === l[i]) {\n            max++;\n        }\n    }\n    return max;\n};\n\n/* Return maximum number of occurences of element in the list.\n  >>> max_occurences([1, 2, 3, 2, 4, 5, 1, 2])\n  4\n  >>> max_occurences([1, 2, 3, 2, 4, 5, 1, 2, 3, 4, 1, 2, 3])\n  6\n  >>> max_occurences([1, 2, 3, 2, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3])\n  8\n  */\nconst max_occurences_sorted = (l) => {\n    if (l.length === 0) return 0;\n    const arr = Array.from(l).sort((a, b) => a - b);\n    let max = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === arr[i - 1]) {\n            max++;\n        }\n    }\n    return max;\n};\n\n/* Return maximum number of occurences of element in the list.\n  >>> max_occurences_sorted([1, 2, 3, 2, 4, 5, 1, 2])\n  4\n  >>> max_occurences_sorted([1, 2, 3, 2, 4, 5, 1, 2, 3, 4, 1, 2, 3])\n  6\n  >>> max_occurences_sorted([1, 2, 3, 2, 4, 5, 1, 2, 3, 4, 1, 2, 3, 4, 5, 1, 2, 3, 4, 1, 2, 3])\n  8\n  */\nconst max_occurences_sorted_count = (l) => {\n    if (l.length === 0) return 0;\n    const arr = Array.from(l).sort((a, b) => a - b);\n    let max = 0;\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] === arr[i - 1]) {\n            max++;\n        }\n    }\n    return max;\n};\n\nmodule.exports = {\n    max_element,\n    max_occurences,\n    max_occurences_sorted,\n    max_occurences_sorted_count\n};\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizz_buzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizz_buzz(50)\n  0\n  >>> fizz_buzz(78)\n  2\n  >>> fizz_buzz(79)\n  3\n  */\nconst fizz_buzz = (n) => {\n  if (n === 1) return 0\n  if (n === 2) return 1\n  const s = 2\n  let c = 3\n  while (n >= c) {\n    if (n % c === 0) {\n      if (c === 3) {\n        s += 1\n      } else {\n        s += 2\n      }\n    }\n    c += 2\n  }\n  return s\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sort_even", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even = (l) => {\n  const l_sorted = [...l.slice(0, -1).sort(), l[...l.slice(-1)]]\n  return [...l_sorted.sort(), l_sorted[...l_sorted.length - 1]]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_odd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_odd = (l) => {\n  const l_sorted = [...l.slice(1).sort(), l[...l.slice(0, -1).sort()]]\n  return [l[...l.slice(0, -1).sort()], l_sorted[...l_sorted.length - 1]]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even_odd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even_odd = (l) => {\n  const l_sorted = [...l.slice(0, -1).sort(), l[...l.slice(-1).sort()]]\n  return [...l_sorted.sort(), l_sorted[...l_sorted.length - 1]]\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sort_even_odd_odd([1, 2, 3])\n  [1, 2, 3]\n  >>> sort_even_odd_odd([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sort_even_odd_odd = (l) => {\n  const l_sorted = [...l.slice(1).sort(), l[...l.slice(0, -1).sort()]]\n  return [l[...l.slice(0, -1).sort()], l_sorted[...l_sorted.length - 1]]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encode_cyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encode_cyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(2 * i, Math.min((2 * i + 2), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encode_cyclic: encodeCyclic,\n  decodeCyclic: decodeCyclic\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prime_fib", "gc": "/*\n  prime_fib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prime_fib(1)\n  2\n  >>> prime_fib(2)\n  3\n  >>> prime_fib(3)\n  5\n  >>> prime_fib(4)\n  13\n  >>> prime_fib(5)\n  89\n  */\nconst prime_fib = (n) => {\n  if (n < 2) {\n    return n\n  }\n  return prime_fib(n - 1) + prime_fib(n - 2)\n}\n\nconst fib = (n) => {\n  if (n < 2) {\n    return 1\n  }\n  return fib(n - 1) + fib(n - 2)\n}\n\nconsole.log(prime_fib(5))\nconsole.log(fib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triples_sum_to_zero", "gc": "/*\n  triples_sum_to_zero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triples_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> triples_sum_to_zero([1, 3, -2, 1])\n  true\n  >>> triples_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> triples_sum_to_zero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triples_sum_to_zero([1])\n  false\n  */\nconst triples_sum_to_zero = (l) => {\n    return l.reduce((prev, current, index, list) => {\n        if (index === 2) {\n            return list.reduce((prev, current) => {\n                if (prev === 0 && current === 0) {\n                    return true;\n                } else if (prev === current) {\n                    return false;\n                } else {\n                    return prev;\n                }\n            }, prev);\n        } else if (index === list.length - 1) {\n            return list.reduce((prev, current) => {\n                if (prev === 0 && current === 0) {\n                    return true;\n                } else if (prev === current) {\n                    return false;\n                } else {\n                    return prev;\n                }\n            }, prev);\n        } else {\n            return list.reduce((prev, current) => {\n                if (prev === 0 && current === 0) {\n                    return true;\n                } else if (prev === current) {\n                    return false;\n                } else if (prev === current - 1) {\n                    return true;\n                } else {\n                    return prev;\n                }\n            }, prev);\n        }\n    }, false);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "car_race_collision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst car_race_collision = (n) => {\n    let cars = [];\n    for(let i = 0; i < n; i++) {\n        cars.push({\n            speed: 0,\n            direction: 0,\n            x: 0,\n            y: 0\n        });\n    }\n    for(let i = 0; i < n; i++) {\n        cars[i].x = Math.floor(Math.random() * (10000 - 1) + 1);\n        cars[i].y = Math.floor(Math.random() * (10000 - 1) + 1);\n        cars[i].speed = Math.floor(Math.random() * (500 - 1) + 1);\n        cars[i].direction = Math.floor(Math.random() * (2 - 1) + 1);\n    }\n    let collisions = 0;\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            if(cars[i].direction === 0 && cars[j].direction === 1) {\n                if(cars[i].x < cars[j].x + cars[j].speed) {\n                    cars[i].speed = cars[i].x + cars[i].speed - cars[j].x;\n                    cars[j].speed = cars[j].x + cars[j].speed - cars[i].x;\n                    collisions++;\n                }\n            } else if(cars[i].direction === 1 && cars[j].direction === 0) {\n                if(cars[i].y < cars[j].y + cars[j].speed) {\n                    cars[i].speed = cars[i].y + cars[i].speed - cars[j].y;\n                    cars[j].speed = cars[j].y + cars[j].speed - cars[i].y;\n                    collisions++;\n                }\n            }\n        }\n    }\n    return collisions;\n}\n\n/*\n  Given the maximum distance between two cars, the number of cars, the number of cars\n  going left to right and the number of cars going right to left, return the number of\n  cars that can hit the other cars before they crash.\n  */\nconst car_race_collision_simple = (distance, n, left_to_right, right_to_left) => {\n    let collisions = 0;\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            if(left_to_right === 0 && right_to_left === 0) {\n                if(cars[i].x < cars[j].x + cars[j].speed) {\n                    cars[i].speed = cars[i].x + cars[i].speed - cars[j].x;\n                    cars[j].speed = cars[j].x + cars[j].speed - cars[i].x;\n                    collisions++;\n                }\n            } else {\n                if(cars[i].x < cars[j].x + cars[j].speed) {\n                    cars[i].speed = cars[i].x + cars[i].speed - cars[j].x;\n                    cars[j].speed = cars[j].x + cars[j].speed - cars[i].x;\n                    collisions++;\n                }\n            }\n        }\n    }\n    return collisions;\n}\n\nmodule.exports = car_race_collision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incr_list", "gc": "/*Return list with elements incremented by 1.\n  >>> incr_list([1, 2, 3])\n  [2, 3, 4]\n  >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incr_list = (l) => {\n  const incr = (arr, index) => {\n    const inc = 1;\n    arr[index] = inc;\n    return arr;\n  };\n  return Array.isArray(l)? l.concat(incr(l, l.length)) : incr(l, 0);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * first element.\n  *\n  * @param l {Array} List to remove from.\n  * @return {Array} New list.\n  */\nconst remove_first = (l) => {\n  return Array.isArray(l)? l.slice(1) : [];\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * last element.\n  *\n  * @param l {Array} List to remove from.\n  * @return {Array} New list.\n  */\nconst remove_last = (l) => {\n  return Array.isArray(l)? l.slice(0, -1) : [];\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * first and last elements.\n  *\n  * @param l {Array} List to remove from.\n  * @return {Array} New list.\n  */\nconst remove_all = (l) => {\n  return Array.isArray(l)? l.slice(1, -1) : [];\n};\n\n/**\n  * Remove an element from a list.\n  *\n  * @param l {Array} List to remove from.\n  * @param elem {Array} Element to remove.\n  * @return {Array} New list.\n  */\nconst remove = (l, elem) => {\n  const new_list = remove_first(l);\n  new_list.push(elem);\n  new_list.push(remove_last(l));\n  return new_list;\n};\n\n/**\n  * Return a new list containing all the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_list = (l, b) => {\n  const new_list = remove_all(l);\n  new_list.push(...b);\n  return new_list;\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_in_list = (l, b) => {\n  return remove_list(l, b);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_not_in_list = (l, b) => {\n  return remove_list(l, b);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_list_in_list = (l, b) => {\n  return remove_list(l, b);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_not_list_in_list = (l, b) => {\n  return remove_list(l, b);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_list_not_in_list = (l, b) => {\n  return remove_list(l, b);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_list_and_in_list = (l, b) => {\n  return remove_list(l, b);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_list_and_not_in_list = (l, b) => {\n  return remove_list(l, b);\n};\n\n/**\n  * Return a new list containing the elements of the original list except the\n  * elements of the argument list.\n  *\n  * @param l {Array} List to remove from.\n  * @param b {Array} List to remove from the original list.\n  * @return {Array} New list.\n  */\nconst remove_list_not_and_in_list = (l, b) => {\n  return remove_list(l, b"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairs_sum_to_zero", "gc": "/*\n  pairs_sum_to_zero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairs_sum_to_zero([1, 3, 5, 0])\n  false\n  >>> pairs_sum_to_zero([1, 3, -2, 1])\n  false\n  >>> pairs_sum_to_zero([1, 2, 3, 7])\n  false\n  >>> pairs_sum_to_zero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairs_sum_to_zero([1])\n  false\n  */\nconst pairs_sum_to_zero = (l) => {\n    const arr = Array.from(l);\n    const result = arr.reduce((acc, n) => {\n        if (acc[0] === 0 && acc[1] === 0) {\n            return false;\n        }\n        const curr_sum = arr[0] + arr[1];\n        if (acc[0] === 0) {\n            if (curr_sum === 0) {\n                return [acc[0], curr_sum];\n            }\n            return false;\n        }\n        if (acc[1] === 0) {\n            if (curr_sum === 0) {\n                return [curr_sum, acc[1]];\n            }\n            return false;\n        }\n        if (curr_sum === 0) {\n            return false;\n        }\n        return [curr_sum, acc[1]];\n    }, [0, 0]);\n    return result[0] === 0 && result[1] === 0;\n};\n\nmodule.exports = {\n    pairs_sum_to_zero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "change_base", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> change_base(8, 3)\n  '22'\n  >>> change_base(8, 2)\n  '1000'\n  >>> change_base(7, 2)\n  '111'\n  */\nconst change_base = (x, base) => {\n  const res = []\n  while (x > 0) {\n    res.unshift(x % base)\n    x = Math.floor(x / base)\n  }\n  return res.join('')\n}\n\nconst main = () => {\n  const x = convert_base(3)\n  const y = convert_base(2)\n  const z = convert_base(8, 3)\n  console.log(x, y, z)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangle_area(5, 3)\n  7.5\n  */\nconst triangle_area = (a, h) => {\n    return ((a * h) / 2);\n}\n\n/*Given a triangle with side lengths a, b and c return a square with side length sqrt(a*a+b*b+c*c)*/\nconst get_square = (a, b, c) => {\n    return ((a * a) + (b * b) + (c * c));\n}\n\n/*Given the side lengths of a triangle, return the length of the opposite side*/\nconst get_opposite_side = (a, b, c) => {\n    return ((get_square(a, b, c) - get_square(a, b, c)) / 2);\n}\n\n/*Given the side lengths of a triangle return the perimeter of the triangle*/\nconst get_perimeter = (a, b, c) => {\n    return (a + b + c);\n}\n\n/*Given the side lengths of a triangle return the area of the triangle*/\nconst get_area = (a, b, c) => {\n    return (((a * b) + (a * c) + (b * c)) / 2);\n}\n\n/*Given the side lengths of a triangle return the diagonal of the triangle*/\nconst get_diagonal = (a, b, c) => {\n    return ((a + b + c) / 2);\n}\n\n/*Given the side lengths of a triangle return the hypotenuse of the triangle*/\nconst get_hypotenuse = (a, b, c) => {\n    return (Math.sqrt(get_square(a, b, c)));\n}\n\n/*Given the side lengths of a triangle return the right angle of the triangle*/\nconst get_right_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (4 * b));\n}\n\n/*Given the side lengths of a triangle return the left angle of the triangle*/\nconst get_left_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (2 * b));\n}\n\n/*Given the side lengths of a triangle return the interior angle of the triangle*/\nconst get_interior_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (b));\n}\n\n/*Given the side lengths of a triangle return the exterior angle of the triangle*/\nconst get_exterior_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (2 * a));\n}\n\n/*Given the side lengths of a triangle return the hypotenuse of the triangle*/\nconst get_triangle_length = (a, b, c) => {\n    return (Math.sqrt(get_square(a, b, c)));\n}\n\n/*Given the side lengths of a triangle return the area of the triangle*/\nconst get_triangle_area = (a, b, c) => {\n    return ((a * b) + (a * c) + (b * c));\n}\n\n/*Given the side lengths of a triangle return the diagonal of the triangle*/\nconst get_triangle_diagonal = (a, b, c) => {\n    return ((a + b + c) / 2);\n}\n\n/*Given the side lengths of a triangle return the hypotenuse of the triangle*/\nconst get_triangle_hypotenuse = (a, b, c) => {\n    return (Math.sqrt(get_square(a, b, c)));\n}\n\n/*Given the side lengths of a triangle return the right angle of the triangle*/\nconst get_triangle_right_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (4 * b));\n}\n\n/*Given the side lengths of a triangle return the left angle of the triangle*/\nconst get_triangle_left_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (2 * b));\n}\n\n/*Given the side lengths of a triangle return the interior angle of the triangle*/\nconst get_triangle_interior_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (b));\n}\n\n/*Given the side lengths of a triangle return the exterior angle of the triangle*/\nconst get_triangle_exterior_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (2 * a));\n}\n\n/*Given the side lengths of a triangle return the area of the triangle*/\nconst get_triangle_area = (a, b, c) => {\n    return ((a * b) + (a * c) + (b * c));\n}\n\n/*Given the side lengths of a triangle return the diagonal of the triangle*/\nconst get_triangle_diagonal = (a, b, c) => {\n    return ((a + b + c) / 2);\n}\n\n/*Given the side lengths of a triangle return the hypotenuse of the triangle*/\nconst get_triangle_hypotenuse = (a, b, c) => {\n    return (Math.sqrt(get_square(a, b, c)));\n}\n\n/*Given the side lengths of a triangle return the right angle of the triangle*/\nconst get_triangle_right_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (4 * b));\n}\n\n/*Given the side lengths of a triangle return the left angle of the triangle*/\nconst get_triangle_left_angle = (a, b, c) => {\n    return ((Math.sqrt(get_square(a, b, c)) * (a + b + c)) / (2 * b));\n}\n\n/*Given the side lengths of a triangle"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0 || n === 1) {\n    return n;\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n  }\n}\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort();\n  const middle = sorted.length / 2;\n  const left = sorted.slice(0, middle);\n  const right = sorted.slice(middle, sorted.length);\n\n  return (left.length === 0 || right.length === 0)? sorted[middle] : (left[left.length - 1] + right[0]) / 2.0;\n};\n\n/*\n  Return the arithmetic mean of the elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.25\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  12.0\n  */\nconst mean = (l) => {\n  return (sum(l) / l.length).toFixed(2);\n};\n\n/*\n  Return the sum of all the elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  36\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b, 0);\n};\n\n/*\n  Return the standard deviation of the elements in the list l.\n  >>> variance([3, 1, 2, 4, 5])\n  2.60\n  >>> variance([-10, 4, 6, 1000, 10, 20])\n  12.00\n  */\nconst variance = (l) => {\n  const mean = mean(l);\n  const squaredSum = l.reduce((a, b) => a + b, 0);\n  return (squaredSum / l.length) - mean * mean;\n};\n\n/*\n  Return the sum of squares of the elements in the list l.\n  >>> squareSum([3, 1, 2, 4, 5])\n  41\n  >>> squareSum([-10, 4, 6, 1000, 10, 20])\n  3888\n  */\nconst squareSum = (l) => {\n  return l.reduce((a, b) => a + b * b, 0);\n};\n\n/*\n  Return the sum of all the elements in the list l, including the squares.\n  >>> sumSquares([3, 1, 2, 4, 5])\n  41\n  >>> sumSquares([-10, 4, 6, 1000, 10, 20])\n  40088\n  */\nconst sumSquares = (l) => {\n  return (l.reduce((a, b) => a + b * b, 0) + sum(l) * sum(l));\n};\n\nmodule.exports = {\n  mean,\n  median,\n  variance,\n  squareSum,\n  sumSquares\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "is_palindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> is_palindrome('')\n  true\n  >>> is_palindrome('aba')\n  true\n  >>> is_palindrome('aaaaa')\n  true\n  >>> is_palindrome('zbcd')\n  false\n  */\nconst is_palindrome = (text) => {\n    if (!text) return false;\n    return text.split('').every((x, i) => x === text[i + 1]? i === 0 : false);\n}\n\n/*\n  Checks if given string has at least one letter\n  >>> is_letter_only('')\n  false\n  >>> is_letter_only('a')\n  true\n  >>> is_letter_only('abcd')\n  true\n  >>> is_letter_only('xyz')\n  false\n  */\nconst is_letter_only = (text) => {\n    if (!text) return false;\n    return /[a-zA-Z]+/.test(text);\n}\n\n/*\n  Checks if given string has at least one number\n  >>> is_number_only('')\n  false\n  >>> is_number_only('a')\n  false\n  >>> is_number_only('abcd')\n  true\n  >>> is_number_only('xyz')\n  false\n  */\nconst is_number_only = (text) => {\n    if (!text) return false;\n    return /[0-9]+/.test(text);\n}\n\n/*\n  Checks if given string is a word\n  >>> is_word('a')\n  true\n  >>> is_word('ab')\n  true\n  >>> is_word('abcd')\n  false\n  */\nconst is_word = (text) => {\n    if (!text) return false;\n    return /\\w+/.test(text);\n}\n\n/*\n  Checks if given string is a digit\n  >>> is_digit('a')\n  false\n  >>> is_digit('ab')\n  false\n  >>> is_digit('123')\n  true\n  >>> is_digit('123a')\n  false\n  */\nconst is_digit = (text) => {\n    if (!text) return false;\n    return /[0-9]+/.test(text);\n}\n\n/*\n  Checks if given string is an alphanumeric\n  >>> is_alpha_numeric('a')\n  true\n  >>> is_alpha_numeric('ab')\n  true\n  >>> is_alpha_numeric('123')\n  true\n  >>> is_alpha_numeric('123a')\n  false\n  */\nconst is_alpha_numeric = (text) => {\n    if (!text) return false;\n    return /[a-zA-Z0-9]+/.test(text);\n}\n\n/*\n  Checks if given string is a symbol\n  >>> is_symbol('a')\n  false\n  >>> is_symbol('ab')\n  false\n  >>> is_symbol('123')\n  false\n  >>> is_symbol('$')\n  true\n  */\nconst is_symbol = (text) => {\n    if (!text) return false;\n    return /[$a-zA-Z0-9]+/.test(text);\n}\n\n/*\n  Checks if given string is a punctuation\n  >>> is_punctuation('a')\n  false\n  >>> is_punctuation('ab')\n  false\n  >>> is_punctuation('123')\n  false\n  >>> is_punctuation('$')\n  false\n  >>> is_punctuation('')\n  false\n  >>> is_punctuation('a!')\n  false\n  >>> is_punctuation('$!')\n  true\n  */\nconst is_punctuation = (text) => {\n    if (!text) return false;\n    return /[$!a-zA-Z0-9]+/.test(text);\n}\n\n/*\n  Checks if given string is a whitespace\n  >>> is_whitespace('a')\n  false\n  >>> is_whitespace('ab')\n  false\n  >>> is_whitespace('123')\n  false\n  >>> is_whitespace('$')\n  false\n  >>> is_whitespace(' ')\n  true\n  */\nconst is_whitespace = (text) => {\n    if (!text) return false;\n    return /[ \\t]+/.test(text);\n}\n\n/*\n  Checks if given string is a URL\n  >>> is_url('http://google.com')\n  true\n  >>> is_url('http://google.com/')\n  false\n  >>> is_url('google.com')\n  false\n  >>> is_url('$')\n  false\n  */\nconst is_url = (text) => {\n    if (!text) return false;\n    return /^https?:\\/\\//i.test(text);\n}\n\n/*\n  Checks if given string is a email\n  >>> is_email('john@example.com')\n  true\n  >>> is_email('john@')\n  false\n  >>> is_email('john')\n  false\n  >>> is_email('$')\n  false\n  */\nconst is_email = (text) => {\n    if (!text) return false;\n    return /^[a-zA-Z0-9\\.\\-\\+_]+@[a-zA-Z0-9\\-\\_]+(\\.[a-zA-Z0-9\\-\\_]+)*$/.test(text);\n}\n\n/*\n  Checks if given string is a phone\n  >>> is_phone('+1 (123) 456-7890')\n  true\n  >>> is_phone('+1 (123) 456-7890')\n  false\n  >>> is_phone('abc')\n  false\n  >>> is_phone('$')\n  false\n  */\nconst is_phone = (text) => {\n    if (!text) return false;\n    return /^\\+?[1-9]\\d{1,3}(-\\d{1,3})?\\s*(\\d{3}|\\d{4})?$/.test(text);\n}\n\n/*\n  Checks if given string is a currency\n  >>> is_currency('$100')\n  true\n  >>> is_currency('$')\n  false\n  >>> is_currency('$100')"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return nmod\n}\n\nconst nmodp = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return nmod\n}\n\nconst modp_prod = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return p * nmod\n}\n\nconst modp_prod_prod = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return p * p * nmod\n}\n\nconst modp_sqrt = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return Math.sqrt(nmod)\n}\n\nconst modp_sqrt_sqrt = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return Math.sqrt(nmod) * Math.sqrt(nmod)\n}\n\nconst modp_root = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return Math.pow(nmod, 1 / p)\n}\n\nconst modp_root_root = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return Math.pow(nmod, 1 / p) * Math.pow(nmod, 1 / p)\n}\n\nconst modp_mod = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return nmod\n}\n\nconst modp_mod_mod = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return nmod\n}\n\nconst modp_mod_mod_mod = (n, p) => {\n  if (p === 0) return 1\n  const nmod = (n - p) % p\n  if (nmod === 0) return n\n  return nmod\n}\n\nmodule.exports = {\n  modp,\n  nmodp,\n  modp_prod,\n  modp_prod_prod,\n  modp_sqrt,\n  modp_sqrt_sqrt,\n  modp_root,\n  modp_root_root,\n  modp_mod,\n  modp_mod_mod,\n  modp_mod_mod_mod,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encode_shift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encode_shift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map((_, i) => \"a\".charAt(i)).join(\"\");\n}\n\nmodule.exports = {\n  encode,\n  decode,\n  encode_shift,\n  decodeShift\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remove_vowels", "gc": "/*\n  remove_vowels is a function that takes string and returns string without vowels.\n  >>> remove_vowels('')\n  ''\n  >>> remove_vowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remove_vowels('abcdef')\n  'bcdf'\n  >>> remove_vowels('aaaaa')\n  ''\n  >>> remove_vowels('aaBAA')\n  'B'\n  >>> remove_vowels('zbcd')\n  'zbcd'\n  */\nconst remove_vowels = (text) => {\n    let vowels = ['a', 'e', 'i', 'o', 'u'];\n    let len = vowels.length;\n\n    for (let i = 0; i < len; i++) {\n        if (text.indexOf(vowels[i])!== -1) {\n            text = text.replace(vowels[i], '');\n        }\n    }\n\n    return text;\n};\n\n/**\n  * is_punct is a function that takes string and returns boolean\n  * if string contains a punctuation symbol\n  *\n  *>>> is_punct('')\n  *false\n  *>>> is_punct('abcdef')\n  *false\n  *>>> is_punct('abcdefghijklm')\n  *false\n  *>>> is_punct('abcdef.ghijklm')\n  *true\n  *>>> is_punct('abcdef.ghijklm.c')\n  *true\n  *>>> is_punct('abcdef.ghijklm,c')\n  *true\n  *>>> is_punct('abcdef.ghijklm')\n  *true\n  *>>> is_punct('abcdef.')\n  *true\n  *>>> is_punct('abcdef.')\n  *true\n  *>>> is_punct('abcdef.123456')\n  *true\n  */\nconst is_punct = (text) => {\n    let punctuation = ['!', '@', '#', '$', '%', '^', '&', '*', '(', ')', '_', '-', '+', '=', '|', '{', '}', '[', ']', ':', ';', '\\'', '\"', '`', ',', '.', '?', '<', '>', '/', '~', '\\\\', '#', '{', '}'];\n    let len = punctuation.length;\n\n    for (let i = 0; i < len; i++) {\n        if (text.indexOf(punctuation[i])!== -1) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n  * is_digit is a function that takes string and returns boolean\n  * if string contains a digit\n  *\n  *>>> is_digit('')\n  *false\n  *>>> is_digit('abcdef')\n  *false\n  *>>> is_digit('abcdefghijklm')\n  *false\n  *>>> is_digit('abcdef.ghijklm')\n  *false\n  *>>> is_digit('abcdef.ghijklm.c')\n  *false\n  *>>> is_digit('abcdef.ghijklm')\n  *true\n  *>>> is_digit('abcdef.')\n  *true\n  *>>> is_digit('abcdef.')\n  *true\n  *>>> is_digit('abcdef.123456')\n  *true\n  */\nconst is_digit = (text) => {\n    let digits = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9'];\n    let len = digits.length;\n\n    for (let i = 0; i < len; i++) {\n        if (text.indexOf(digits[i])!== -1) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n  * is_lower is a function that takes string and returns boolean\n  * if string contains a lower case letter\n  *\n  *>>> is_lower('')\n  *false\n  *>>> is_lower('abcdef')\n  *false\n  *>>> is_lower('abcdefghijklm')\n  *false\n  *>>> is_lower('abcdef.ghijklm')\n  *false\n  *>>> is_lower('abcdef.ghijklm.c')\n  *false\n  *>>> is_lower('abcdef.ghijklm')\n  *true\n  *>>> is_lower('abcdef.')\n  *true\n  *>>> is_lower('abcdef.')\n  *true\n  *>>> is_lower('abcdef.123456')\n  *true\n  */\nconst is_lower = (text) => {\n    let lowercase = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'];\n    let len = lowercase.length;\n\n    for (let i = 0; i < len; i++) {\n        if (text.indexOf(lowercase[i])!== -1) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\n/**\n  * is_upper is a function that takes string and returns boolean\n  * if string contains a upper case letter\n  *\n  *>>> is_upper('')\n  *false\n  *>>> is_upper('abcdef')\n  *false\n  *>>> is_upper('abcdefghijklm')\n  *false\n  *>>> is_upper('abcdef.ghijklm')\n  *false\n  *>>> is_upper('abcdef.ghijklm.c')\n  *false\n  *>>> is_upper('abcdef.ghijklm')\n  *true\n  *>>> is_upper('abcdef.')\n  *true\n  *>>> is_upper('abcdef.')\n  *true\n  *>>> is_upper('abcdef.123456')\n  *true\n  */\nconst is_upper = (text) => {\n    let uppercase = ['A', 'B', 'C"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "below_threshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> below_threshold([1, 2, 4, 10], 100)\n  true\n  >>> below_threshold([1, 20, 4, 10], 5)\n  false\n  */\nconst below_threshold = (l, t) => {\n  let i = 0;\n  while (i < l.length) {\n    if (l[i] >= t) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nmodule.exports = {\n  below_threshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let total = x + y;\n  return total;\n};\n\nconsole.log(add(2, 3));\n\n/*\n  >>> add(2, 3, 7)\n  16\n  */\nconst add = (x, y, z) => {\n  let total = x + y + z;\n  return total;\n};\n\nconsole.log(add(2, 3, 7));\n\n/*\n  >>> add(2, 3, 7, 11)\n  30\n  */\nconst add = (x, y, z, w) => {\n  let total = x + y + z + w;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11));\n\n/*\n  >>> add(2, 3, 7, 11, 13)\n  45\n  */\nconst add = (x, y, z, w, x) => {\n  let total = x + y + z + w + x;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13));\n\n/*\n  >>> add(2, 3, 7, 11, 13, 17)\n  66\n  */\nconst add = (x, y, z, w, x, y) => {\n  let total = x + y + z + w + x + y;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13, 17));\n\n/*\n  >>> add(2, 3, 7, 11, 13, 17, 19)\n  82\n  */\nconst add = (x, y, z, w, x, y, z) => {\n  let total = x + y + z + w + x + y + z;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13, 17, 19));\n\n/*\n  >>> add(2, 3, 7, 11, 13, 17, 19, 21)\n  99\n  */\nconst add = (x, y, z, w, x, y, z, w) => {\n  let total = x + y + z + w + x + y + z + w;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13, 17, 19, 21));\n\n/*\n  >>> add(2, 3, 7, 11, 13, 17, 19, 21, 23)\n  111\n  */\nconst add = (x, y, z, w, x, y, z, w, x) => {\n  let total = x + y + z + w + x + y + z + w + x;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13, 17, 19, 21, 23));\n\n/*\n  >>> add(2, 3, 7, 11, 13, 17, 19, 21, 23, 29)\n  145\n  */\nconst add = (x, y, z, w, x, y, z, w, x, y) => {\n  let total = x + y + z + w + x + y + z + w + x + y;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13, 17, 19, 21, 23, 29));\n\n/*\n  >>> add(2, 3, 7, 11, 13, 17, 19, 21, 23, 29, 31)\n  170\n  */\nconst add = (x, y, z, w, x, y, z, w, x, y, z) => {\n  let total = x + y + z + w + x + y + z + w + x + y + z;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13, 17, 19, 21, 23, 29, 31));\n\n/*\n  >>> add(2, 3, 7, 11, 13, 17, 19, 21, 23, 29, 31, 33)\n  187\n  */\nconst add = (x, y, z, w, x, y, z, w, x, y, z, w) => {\n  let total = x + y + z + w + x + y + z + w + x + y + z + w;\n  return total;\n};\n\nconsole.log(add(2, 3, 7, 11, 13, 17, 19, 21, 23, 29, 31, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "same_chars", "gc": "/*\n  Check if two words have the same characters.\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_chars('abcd', 'dddddddabc')\n  true\n  >>> same_chars('dddddddabc', 'abcd')\n  true\n  >>> same_chars('eabcd', 'dddddddabc')\n  false\n  >>> same_chars('abcd', 'dddddddabce')\n  false\n  >>> same_chars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_chars = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  for (let i = 0; i < s0.length; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n\n/*\n  Check if two words are the same or not.\n  >>> same_words('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_words('abcd', 'dddddddabc')\n  true\n  >>> same_words('dddddddabc', 'abcd')\n  true\n  >>> same_words('eabcd', 'dddddddabc')\n  false\n  >>> same_words('abcd', 'dddddddabce')\n  false\n  >>> same_words('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_words = (s0, s1) => {\n  if (s0.length!== s1.length) return false;\n  if (s0 === s1) return true;\n  return same_chars(s0, s1);\n};\n\n/*\n  Check if two words are the same or not.\n  >>> same_words('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_words('abcd', 'dddddddabc')\n  true\n  >>> same_words('dddddddabc', 'abcd')\n  true\n  >>> same_words('eabcd', 'dddddddabc')\n  false\n  >>> same_words('abcd', 'dddddddabce')\n  false\n  >>> same_words('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_words_2 = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  if (same_chars(s0, s1)) return true;\n  return false;\n};\n\n/*\n  Check if two words are the same or not.\n  >>> same_words_2('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_words_2('abcd', 'dddddddabc')\n  true\n  >>> same_words_2('dddddddabc', 'abcd')\n  true\n  >>> same_words_2('eabcd', 'dddddddabc')\n  false\n  >>> same_words_2('abcd', 'dddddddabce')\n  false\n  >>> same_words_2('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_words_3 = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  if (same_chars(s0, s1)) return true;\n  if (same_chars(s0, s1)) return true;\n  return false;\n};\n\n/*\n  Check if two words are the same or not.\n  >>> same_words_3('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> same_words_3('abcd', 'dddddddabc')\n  true\n  >>> same_words_3('dddddddabc', 'abcd')\n  true\n  >>> same_words_3('eabcd', 'dddddddabc')\n  false\n  >>> same_words_3('abcd', 'dddddddabce')\n  false\n  >>> same_words_3('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst same_words_4 = (s0, s1) => {\n  if (s0 === s1) return true;\n  if (s0.length!== s1.length) return false;\n  if (same_chars(s0, s1)) return true;\n  if (same_chars(s0, s1)) return true;\n  if (same_chars(s0, s1)) return true;\n  return false;\n};\n\nconst words = [\n  'eabcdzzzz',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'ddddddabc',\n  'd"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1,\n    i = 1;\n  while (i <= n) {\n    a, b = b, a + b;\n    i++;\n  }\n  return a;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"<\")\n  false\n  >>> correct_bracketing(\"<>\")\n  false\n  >>> correct_bracketing(\"<<><>>\")\n  false\n  >>> correct_bracketing(\"><<>\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n    if (brackets === \"\" || brackets === \"<>\" || brackets === \"<>\") {\n        return false;\n    }\n    const brackets_regex = /<|>|<<|>>/;\n    const bracket_stack = brackets_regex.exec(brackets);\n    if (bracket_stack === null) {\n        return false;\n    }\n    const stack_index = brackets_regex.lastIndex;\n    let current_index = stack_index + 1;\n    let last_open = false;\n    while (current_index < brackets.length) {\n        if (brackets[current_index] === \"<\") {\n            last_open = true;\n        } else if (brackets[current_index] === \">\") {\n            if (!last_open) {\n                return false;\n            }\n            last_open = false;\n        } else if (brackets[current_index] === \"<<\") {\n            if (bracket_stack.index === stack_index) {\n                return false;\n            }\n            last_open = true;\n        } else if (brackets[current_index] === \">>\") {\n            if (!last_open) {\n                return false;\n            }\n            last_open = false;\n        }\n        current_index++;\n    }\n    return true;\n};\n\nexport { correct_bracketing };\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    const sorted = l.slice().sort((a, b) => a - b);\n    return (l[0] <= l[1] || l[1] <= l[2] || l[2] <= l[3]) && (sorted[0] <= sorted[1] || sorted[1] <= sorted[2] || sorted[2] <= sorted[3]);\n};\n\n/*Return true if the list is a permutation of the set {1,..., n}\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  >>> permutation([1, 3, 5, 7, 9])\n  false\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  */\nconst permutation = (l) => {\n    const set = {};\n    for (let i = 0; i < l.length; i++) {\n        set[l[i]] = 1;\n    }\n    return Object.keys(set).every(x => set[x] === 1);\n};\n\n/*Return true if the list is a permutation of the set {0,..., n-1}\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> permutation([1, 3, 5, 7, 9])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  */\nconst inversion = (l) => {\n    const set = {};\n    for (let i = 0; i < l.length; i++) {\n        set[l[i]] = 1;\n    }\n    return Object.keys(set).every(x => set[x] === 1);\n};\n\n/*Return true if the list is a permutation of the set {0,..., n-1}\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> permutation([1, 3, 5, 7, 9])\n  true\n  >>> permutation([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  */\nconst double_inversion = (l) => {\n    const set = {};\n    for (let i = 0; i < l.length; i++) {\n        set[l[i]] = 1;\n    }\n    return Object.keys(set).every(x => set[x] === 1);\n};\n\nexport {\n    is_permutation,\n    is_monotonic,\n    permutation,\n    inversion,\n    double_inversion\n};<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const commonArr = []\n    let i = 0\n    let j = 0\n    while (i < l1.length && j < l2.length) {\n        if (l1[i] === l2[j]) {\n            commonArr.push(l1[i])\n            i++\n            j++\n        } else if (l1[i] < l2[j]) {\n            i++\n        } else {\n            j++\n        }\n    }\n    return commonArr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largest_prime_factor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largest_prime_factor(13195)\n  29\n  >>> largest_prime_factor(2048)\n  2\n  */\nconst largest_prime_factor = (n) => {\n  let i = 1;\n  let prime_number = 2;\n  while (prime_number < n) {\n    if (n % prime_number === 0) {\n      return prime_number;\n    }\n    prime_number = prime_number + 1;\n  }\n  return n;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sum_to_n", "gc": "/*sum_to_n is a function that sums numbers from 1 to n.\n  >>> sum_to_n(30)\n  465\n  >>> sum_to_n(100)\n  5050\n  >>> sum_to_n(5)\n  15\n  >>> sum_to_n(10)\n  55\n  >>> sum_to_n(1)\n  1\n  */\nconst sum_to_n = (n) => {\n  return new Array(n + 1).reduce((sum, x) => sum + x, 0);\n};\n\nexport default sum_to_n;\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correct_bracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correct_bracketing(\"(\")\n  false\n  >>> correct_bracketing(\"()\")\n  true\n  >>> correct_bracketing(\"(()())\")\n  true\n  >>> correct_bracketing(\")(()\")\n  false\n  */\nconst correct_bracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i]\n    if (char === \"(\" || char === \"[\" || char === \"{\") {\n      stack.push(char)\n    } else if (stack.length > 0 && stack[stack.length - 1] === char) {\n      stack.pop()\n    } else {\n      return false\n    }\n  }\n  return stack.length === 0\n}\n\nconst is_square_bracket_in_string = (bracket_type, brackets) => {\n  if (bracket_type === \"(\" || bracket_type === \"[\" || bracket_type === \"{\") {\n    return brackets.indexOf(bracket_type)!== -1\n  }\n  return brackets.indexOf(\"(\" + bracket_type)!== -1 || brackets.indexOf(\"[\" + bracket_type)!== -1 || brackets.indexOf(\"{\" + bracket_type)!== -1\n}\n\nconst is_bracket_inside_string = (bracket_type, brackets) => {\n  if (bracket_type === \"(\" || bracket_type === \"[\" || bracket_type === \"{\") {\n    return brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\"(\" + bracket_type) === brackets.lastIndexOf(\"(\") || brackets.indexOf(\"[\" + bracket_type) === brackets.lastIndexOf(\"[\") || brackets.indexOf(\"{\" + bracket_type) === brackets.lastIndexOf(\"{\")\n}\n\nconst is_opening_bracket = (bracket_type, brackets) => {\n  if (bracket_type === \"(\" || bracket_type === \"[\" || bracket_type === \"{\") {\n    return brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\"(\" + bracket_type) === brackets.lastIndexOf(\"(\") || brackets.indexOf(\"[\" + bracket_type) === brackets.lastIndexOf(\"[\") || brackets.indexOf(\"{\" + bracket_type) === brackets.lastIndexOf(\"{\")\n}\n\nconst is_closing_bracket = (bracket_type, brackets) => {\n  if (bracket_type === \")\" || bracket_type === \"]\" || bracket_type === \"}\") {\n    return brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\")\" + bracket_type) === brackets.lastIndexOf(\")\") || brackets.indexOf(\"]\" + bracket_type) === brackets.lastIndexOf(\"]\") || brackets.indexOf(\"}\" + bracket_type) === brackets.lastIndexOf(\"}\")\n}\n\nconst is_valid_brackets = (bracket_type, brackets) => {\n  if (bracket_type === \"(\" || bracket_type === \"[\" || bracket_type === \"{\") {\n    return brackets.indexOf(bracket_type)!== -1 && brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\"(\" + bracket_type)!== -1 && brackets.indexOf(\"(\" + bracket_type) === brackets.lastIndexOf(\"(\") && brackets.indexOf(\"[\" + bracket_type)!== -1 && brackets.indexOf(\"[\" + bracket_type) === brackets.lastIndexOf(\"[\") && brackets.indexOf(\"{\" + bracket_type)!== -1 && brackets.indexOf(\"{\" + bracket_type) === brackets.lastIndexOf(\"{\")\n}\n\nconst is_valid_opening_bracket = (bracket_type, brackets) => {\n  if (bracket_type === \"(\" || bracket_type === \"[\" || bracket_type === \"{\") {\n    return brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\"(\" + bracket_type) === brackets.lastIndexOf(\"(\") || brackets.indexOf(\"[\" + bracket_type) === brackets.lastIndexOf(\"[\") || brackets.indexOf(\"{\" + bracket_type) === brackets.lastIndexOf(\"{\")\n}\n\nconst is_valid_closing_bracket = (bracket_type, brackets) => {\n  if (bracket_type === \")\" || bracket_type === \"]\" || bracket_type === \"}\") {\n    return brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\")\" + bracket_type) === brackets.lastIndexOf(\")\") || brackets.indexOf(\"]\" + bracket_type) === brackets.lastIndexOf(\"]\") || brackets.indexOf(\"}\" + bracket_type) === brackets.lastIndexOf(\"}\")\n}\n\nconst is_valid_opening_closing_bracket = (bracket_type, brackets) => {\n  if (bracket_type === \"(\" || bracket_type === \"[\" || bracket_type === \"{\") {\n    return brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\"(\" + bracket_type) === brackets.lastIndexOf(\"(\") || brackets.indexOf(\"[\" + bracket_type) === brackets.lastIndexOf(\"[\") || brackets.indexOf(\"{\" + bracket_type) === brackets.lastIndexOf(\"{\")\n}\n\nconst is_valid_square_bracket = (bracket_type, brackets) => {\n  if (bracket_type === \"(\" || bracket_type === \"[\" || bracket_type === \"{\") {\n    return brackets.indexOf(bracket_type)!== -1 && brackets.indexOf(bracket_type) === brackets.lastIndexOf(bracket_type)\n  }\n  return brackets.indexOf(\"(\" + bracket_type)!== -1 && brackets.indexOf(\"(\" + bracket_type)"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  let result = [0];\n  for (let i = 0; i < xs.length - 1; i++) {\n    let p = xs[i];\n    let p1 = xs[i + 1];\n    result[i + 1] = p1 - p;\n  }\n  return result;\n};\n\nexport default derivative;\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  const fib = (n) => {\n    if (n === 0) {\n      return 0\n    }\n    if (n === 1) {\n      return 0\n    }\n    return fib(n - 1) + fib(n - 2) + fib(n - 3)\n  }\n  return fib(n)\n}\n\nconsole.log(fibfib(1))\nconsole.log(fibfib(5))\nconsole.log(fibfib(8))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowels_count", "gc": "/*Write a function vowels_count which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowels_count(\"abcde\")\n  2\n  >>> vowels_count(\"ACEDY\")\n  3\n  */\nconst vowels_count = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count += 1;\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count += 1;\n  }\n  return count;\n};\n\nmodule.exports = vowels_count;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circular_shift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circular_shift(12, 1)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  */\nconst circular_shift = (x, shift) => {\n  let s = \"\"\n  while(x > 0) {\n    s = x % 10 + s\n    x = Math.floor(x / 10)\n  }\n  let t = 0\n  while(t < shift) {\n    s = \"0\" + s\n    t += 1\n  }\n  return s\n}\n\n/*\n  >>> circular_shift(12, 3)\n  \"21\"\n  >>> circular_shift(12, 2)\n  \"12\"\n  >>> circular_shift(12, 4)\n  \"12\"\n  >>> circular_shift(12, 0)\n  \"12\"\n  >>> circular_shift(0, 0)\n  \"0\"\n  >>> circular_shift(0, 1)\n  \"0\"\n  */\nconst circular_shift_back = (x, shift) => {\n  let s = \"\"\n  while(x > 0) {\n    s = x % 10 + s\n    x = Math.floor(x / 10)\n  }\n  let t = 0\n  while(t < shift) {\n    s = \"0\" + s\n    t += 1\n  }\n  return s\n}\n\n/*\n  >>> circular_shift_back(12, 3)\n  \"21\"\n  >>> circular_shift_back(12, 2)\n  \"12\"\n  >>> circular_shift_back(12, 4)\n  \"21\"\n  >>> circular_shift_back(12, 0)\n  \"12\"\n  >>> circular_shift_back(0, 0)\n  \"0\"\n  >>> circular_shift_back(0, 1)\n  \"0\"\n  */\nconst reverse = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n  >>> reverse(12)\n  \"12\"\n  >>> reverse(0)\n  \"0\"\n  >>> reverse(0.1)\n  \"0.1\"\n  >>> reverse(12.1)\n  \"12.1\"\n  >>> reverse(-12.1)\n  \"-12.1\"\n  >>> reverse(-12.1)\n  \"12.1\"\n  */\nconst reverse_back = (x) => {\n  return x.split('').reverse().join('')\n}\n\n/*\n  >>> reverse_back(12)\n  \"12\"\n  >>> reverse_back(0)\n  \"0\"\n  >>> reverse_back(0.1)\n  \"0.1\"\n  >>> reverse_back(12.1)\n  \"12.1\"\n  >>> reverse_back(-12.1)\n  \"-12.1\"\n  >>> reverse_back(-12.1)\n  \"12.1\"\n  */\nconst reverse_and_circular_shift = (x, shift) => {\n  return reverse(x) + circular_shift(x, shift)\n}\n\n/*\n  >>> reverse_and_circular_shift(12, 3)\n  \"21\"\n  >>> reverse_and_circular_shift(12, 2)\n  \"12\"\n  >>> reverse_and_circular_shift(12, 4)\n  \"21\"\n  >>> reverse_and_circular_shift(12, 0)\n  \"12\"\n  >>> reverse_and_circular_shift(0, 0)\n  \"0\"\n  >>> reverse_and_circular_shift(0, 1)\n  \"0\"\n  */\nconst reverse_and_circular_shift_back = (x, shift) => {\n  return reverse(x) + circular_shift_back(x, shift)\n}\n\n/*\n  >>> reverse_and_circular_shift_back(12, 3)\n  \"21\"\n  >>> reverse_and_circular_shift_back(12, 2)\n  \"12\"\n  >>> reverse_and_circular_shift_back(12, 4)\n  \"21\"\n  >>> reverse_and_circular_shift_back(12, 0)\n  \"12\"\n  >>> reverse_and_circular_shift_back(0, 0)\n  \"0\"\n  >>> reverse_and_circular_shift_back(0, 1)\n  \"0\"\n  */\nconst reverse_and_circular_shift_and_reverse = (x, shift) => {\n  return reverse(x) + circular_shift(x, shift) + reverse(x)\n}\n\n/*\n  >>> reverse_and_circular_shift_and_reverse(12, 3)\n  \"21\"\n  >>> reverse_and_circular_shift_and_reverse(12, 2)\n  \"12\"\n  >>> reverse_and_circular_shift_and_reverse(12, 4)\n  \"21\"\n  >>> reverse_and_circular_shift_and_reverse(12, 0)\n  \"12\"\n  >>> reverse_and_circular_shift_and_reverse(0, 0)\n  \"0\"\n  >>> reverse_and_circular_shift_and_reverse(0, 1)\n  \"0\"\n  */\n\nconst reverse_and_circular_shift_back_and_reverse = (x, shift) => {\n  return reverse(x) + circular_shift_back(x, shift) + reverse(x)\n}\n\n/*\n  >>> reverse_and_circular_shift_back_and_reverse(12, 3)\n  \"21\"\n  >>> reverse_and_circular_shift_back_and_reverse(12, 2)\n  \"12\"\n  >>> reverse_and_circular_shift_back_and_reverse(12, 4)\n  \"21\"\n  >>> reverse_and_circular_shift_back_and_reverse(12, 0)\n  \"12\"\n  >>> reverse_and_circular_shift_back_and_reverse(0, 0)\n  \"0\"\n  >>> reverse_and_circular_shift_back_and_reverse(0, 1)\n  \"0\"\n  */\n\n/*\n  >>> reverse_and_circular_shift_and_reverse_back(12, 3)\n  \"12\"\n  >>> reverse_and_circ"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digit_sum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digit_sum(\"\") => 0\n      digit_sum(\"abAB\") => 131\n      digit_sum(\"abcCd\") => 67\n      digit_sum(\"helloE\") => 69\n      digit_sum(\"woArBld\") => 131\n      digit_sum(\"aAaaaXa\") => 153\n  */\nconst digit_sum = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] >= 'A' && s[i] <= 'Z') {\n      result += s[i].toUpperCase() - 'A' + 1;\n    } else {\n      result += s[i].toUpperCase() - 'A' + 1;\n    }\n  }\n  return result;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of unique characters'\n  ASCII codes.\n\n  Examples:\n      digit_count(\"\") => 0\n      digit_count(\"abAB\") => 3\n      digit_count(\"abcCd\") => 2\n      digit_count(\"helloE\") => 2\n      digit_count(\"woArBld\") => 4\n      digit_count(\"aAaaaXa\") => 4\n  */\nconst digit_count = (s) => {\n  let result = 0;\n  let char_map = new Map();\n  for (let i = 0; i < s.length; i++) {\n    char_map.set(s[i], 1);\n  }\n  for (let value of char_map.values()) {\n    result += value;\n  }\n  return result;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of the length of the string.\n\n  Examples:\n      digit_length(\"\") => 0\n      digit_length(\"abAB\") => 4\n      digit_length(\"abcCd\") => 5\n      digit_length(\"helloE\") => 5\n      digit_length(\"woArBld\") => 6\n      digit_length(\"aAaaaXa\") => 7\n  */\nconst digit_length = (s) => {\n  return s.length;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of unique characters'\n  ASCII codes.\n\n  Examples:\n      digit_count(\"\") => 0\n      digit_count(\"abAB\") => 3\n      digit_count(\"abcCd\") => 2\n      digit_count(\"helloE\") => 2\n      digit_count(\"woArBld\") => 4\n      digit_count(\"aAaaaXa\") => 4\n  */\nconst digit_unique_count = (s) => {\n  let char_map = new Map();\n  for (let i = 0; i < s.length; i++) {\n    char_map.set(s[i], 1);\n  }\n  return char_map.size;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the length of the string.\n\n  Examples:\n      digit_length(\"\") => 0\n      digit_length(\"abAB\") => 4\n      digit_length(\"abcCd\") => 5\n      digit_length(\"helloE\") => 5\n      digit_length(\"woArBld\") => 6\n      digit_length(\"aAaaaXa\") => 7\n  */\nconst digit_length_2 = (s) => {\n  return s.length;\n};\n\nconst char_to_int = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += (s[i].charCodeAt(0) - 'A' + 1);\n  }\n  return result;\n};\n\nconst int_to_char = (i) => {\n  let result = 'A';\n  let len = i;\n  while (len > 0) {\n    result = String.fromCharCode(i % 26 + 'A');\n    i = i / 26;\n    len--;\n  }\n  return result;\n};\n\nconst digit_sum_2 = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s[i].toUpperCase().charCodeAt(0) - 'A' + 1;\n  }\n  return result;\n};\n\nconst digit_unique_count_2 = (s) => {\n  let char_map = new Map();\n  for (let i = 0; i < s.length; i++) {\n    char_map.set(s[i], 1);\n  }\n  return char_map.size;\n};\n\nconst char_to_int_2 = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s[i].charCodeAt(0) - 'A' + 1;\n  }\n  return result;\n};\n\nconst int_to_char_2 = (i) => {\n  let result = 'A';\n  let len = i;\n  while (len > 0) {\n    result = String.fromCharCode(i % 26 + 'A');\n    i = i / 26;\n    len--;\n  }\n  return result;\n};\n\nconst digit_sum_3 = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s[i].toUpperCase().charCodeAt(0) - 'A' + 1;\n  }\n  return result;\n};\n\nconst char_to_int_3 = (s) => {\n  let result = 0;\n  for (let i = 0; i < s.length; i++) {\n    result += s[i].charCodeAt(0) - 'A' + 1;\n  }\n  return result;\n};\n\nconst int_to_char_3 = (i) => {\n  let result = 'A';\n  let len = i;\n  while (len > 0) {\n    result = String.fromCharCode(i % 26 + 'A');\n    i = i / 26;\n    len--;\n  }\n  return result;\n};\n\nconst digit_sum_4 = (s) => {\n  let result = 0"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruit_distribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruit_distribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruit_distribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruit_distribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruit_distribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruit_distribution = (s, n) => {\n  const total_fruit = s.split('').map((x) => x - 48);\n  return n - total_fruit.filter((x) => x >= 0).reduce((x, y) => x + y);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [min_val, min_index] = arr.reduce(([v, i], [v, i]) => {\n    if (v % 2 === 0) {\n      if (v < min_val) {\n        min_val = v\n        min_index = i\n      }\n    }\n    return [Math.min(v, min_val), i]\n  }, [Infinity, Infinity])\n  return [min_val, min_index]\n}\n\nmodule.exports = pluck\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = 0\n  for(let i = 0; i < lst.length; i++) {\n    let freq = lst[i]\n    if(max < freq) {\n      max = freq\n    }\n  }\n  let found = false\n  for(let i = 0; i < lst.length; i++) {\n    if(lst[i] === max) {\n      found = true\n      break\n    }\n  }\n  if(found) {\n    return max\n  } else {\n    return -1\n  }\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1]))\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(search([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strange_sort_list", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strange_sort_list([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strange_sort_list([]) == []\n  */\nconst strange_sort_list = (lst) => {\n  let sorted = lst.slice(0);\n  let first = sorted[0];\n  let last = sorted[sorted.length - 1];\n  let i = 0;\n  while (i < sorted.length) {\n    if (sorted[i] > first) {\n      sorted[i] = sorted[i - 1];\n      i++;\n    }\n    else {\n      first = sorted[i];\n      sorted.splice(i, 1);\n    }\n  }\n  sorted.unshift(first);\n  sorted.push(last);\n  return sorted;\n}\n\nmodule.exports = strange_sort_list;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangle_area", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangle_area(3, 4, 5) == 6.00\n  triangle_area(1, 2, 10) == -1\n  */\nconst triangle_area = (a, b, c) => {\n  const sides = [a, b, c];\n  const sum = sides.reduce((x, y) => x + y, 0);\n  if (sides.length < 3 || sum < sides[0]) {\n    return -1;\n  }\n  return ((sides[0] * sides[1]) + (sides[1] * sides[2])) / 2;\n};\n\nexport default triangle_area;\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "will_it_fly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  will_it_fly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  will_it_fly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  will_it_fly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  will_it_fly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst will_it_fly = (q, w) => {\n  let l = q.length;\n  if (l % 2!== 0) return false;\n  let sum = 0;\n  for (let i = 0; i < l; i++) {\n    sum += q[i];\n  }\n  return sum <= w;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallest_change", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallest_change([1,2,3,5,4,7,9,6]) == 4\n  smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallest_change([1, 2, 3, 2, 1]) == 0\n  */\nconst smallest_change = (arr) => {\n  const len = arr.length\n  let i = 0\n  let j = len - 1\n  let min_changes = -1\n\n  while (i < j) {\n    if (arr[i]!= arr[j]) {\n      j--\n      min_changes++\n    } else {\n      i++\n      j--\n    }\n  }\n\n  return min_changes\n}\n\nmodule.exports = smallest_change\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "total_match", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  total_match([], []) ➞ []\n  total_match(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  total_match(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  total_match(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  total_match(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst total_match = (lst1, lst2) => {\n  const len1 = lst1.length\n  const len2 = lst2.length\n\n  const total_len = len1 + len2\n\n  const len_lst1 = lst1.reduce((len, item) => {\n    return (len + item.length)\n  }, 0)\n\n  const len_lst2 = lst2.reduce((len, item) => {\n    return (len + item.length)\n  }, 0)\n\n  if (total_len < len_lst1) {\n    return lst1\n  } else if (total_len < len_lst2) {\n    return lst2\n  } else {\n    return lst1\n  }\n}\n\nmodule.exports = total_match\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "is_multiply_prime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  is_multiply_prime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst is_multiply_prime = (a) => {\n  const num = a;\n  for (let i = 2; i <= Math.sqrt(num); i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst is_prime = (n) => {\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport {\n  is_multiply_prime,\n  is_prime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "is_simple_power", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  is_simple_power(1, 4) => true\n  is_simple_power(2, 2) => true\n  is_simple_power(8, 2) => true\n  is_simple_power(3, 2) => false\n  is_simple_power(3, 1) => false\n  is_simple_power(5, 3) => false\n  */\nconst is_simple_power = (x, n) => {\n  if (n === 1) {\n    return x === 1;\n  }\n  if (n === 2) {\n    return x === 2;\n  }\n  if (n % 2!== 0) {\n    return false;\n  }\n  if (x % n!== 0) {\n    return false;\n  }\n  return x === n**Math.floor(Math.log(x) / Math.log(n));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let p = a, i = 1;\n  while (p > 0) {\n    if (p % 3 === 0) {\n      return false;\n    }\n    p = Math.floor(p / 3);\n    i++;\n  }\n  return i === 1;\n};\n\nconst is_cube = (num) => {\n  return iscube(num);\n};\n\nconst test = [\n  -1,\n  0,\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n  22,\n  23,\n  24,\n  25,\n  26,\n  27,\n  28,\n  29,\n  30,\n  31,\n  32,\n  33,\n  34,\n  35,\n  36,\n  37,\n  38,\n  39,\n  40,\n  41,\n  42,\n  43,\n  44,\n  45,\n  46,\n  47,\n  48,\n  49,\n  50,\n  51,\n  52,\n  53,\n  54,\n  55,\n  56,\n  57,\n  58,\n  59,\n  60,\n  61,\n  62,\n  63,\n  64,\n  65,\n  66,\n  67,\n  68,\n  69,\n  70,\n  71,\n  72,\n  73,\n  74,\n  75,\n  76,\n  77,\n  78,\n  79,\n  80,\n  81,\n  82,\n  83,\n  84,\n  85,\n  86,\n  87,\n  88,\n  89,\n  90,\n  91,\n  92,\n  93,\n  94,\n  95,\n  96,\n  97,\n  98,\n  99,\n  100,\n  101,\n  102,\n  103,\n  104,\n  105,\n  106,\n  107,\n  108,\n  109,\n  110,\n  111,\n  112,\n  113,\n  114,\n  115,\n  116,\n  117,\n  118,\n  119,\n  120,\n  121,\n  122,\n  123,\n  124,\n  125,\n  126,\n  127,\n  128,\n  129,\n  130,\n  131,\n  132,\n  133,\n  134,\n  135,\n  136,\n  137,\n  138,\n  139,\n  140,\n  141,\n  142,\n  143,\n  144,\n  145,\n  146,\n  147,\n  148,\n  149,\n  150,\n  151,\n  152,\n  153,\n  154,\n  155,\n  156,\n  157,\n  158,\n  159,\n  160,\n  161,\n  162,\n  163,\n  164,\n  165,\n  166,\n  167,\n  168,\n  169,\n  170,\n  171,\n  172,\n  173,\n  174,\n  175,\n  176,\n  177,\n  178,\n  179,\n  180,\n  181,\n  182,\n  183,\n  184,\n  185,\n  186,\n  187,\n  188,\n  189,\n  190,\n  191,\n  192,\n  193,\n  194,\n  195,\n  196,\n  197,\n  198,\n  199,\n  200,\n  201,\n  202,\n  203,\n  204,\n  205,\n  206,\n  207,\n  208,\n  209,\n  210,\n  211,\n  212,\n  213,\n  214,\n  215,\n  216,\n  217,\n  218,\n  219,\n  220,\n  221,\n  222,\n  223,\n  224,\n  225,\n  226,\n  227,\n  228,\n  229,\n  230,\n  231,\n  232,\n  233,\n  234,\n  235,\n  236,\n  237,\n  238,\n  239,\n  240,\n  241,\n  242,\n  243,\n  244,\n  245,\n  246,\n  247,\n  248,\n  249,\n  250,\n  251,\n  252,\n  253,\n  254,\n  255,\n  256,\n  257,\n  258,\n  259,\n  260,\n  261,\n  262,\n  263,\n  264,\n  265,\n  266,\n  267,\n  268,\n  269,\n  270,\n  271,\n  272,\n  273,\n  274,\n  275,\n  276,\n  277,\n  278,\n  279,\n  280,\n  281,\n  282,\n  283,\n  284,\n  285,\n  286,\n  287,\n  288,\n  289,\n  290,\n  291,\n  292,\n  293,\n  294,\n  295,\n  296,\n  297,\n  298,\n  299,\n  300,\n  301,\n  302,\n  303,\n  304,\n  305,\n  306,\n  307,\n  308,\n  309,\n  310,\n  311,\n  312,\n  313,\n  314,\n  315,\n  316,\n  317,\n  318,\n  319,\n  320,\n  321,\n  322,\n  323,\n  324,\n  325,\n  326,\n  327,\n  328,\n  "}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hex_key", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hex_key = (num) => {\n  let ret = 0;\n  let i = 0;\n  for (; i < num.length; i++) {\n    const digit = parseInt(num[i], 16);\n    if (digit === 0 || digit === 1) {\n      ret++;\n    } else {\n      if (digit < 10) {\n        ret++;\n      }\n    }\n  }\n  return ret;\n};\n\nconsole.log(hex_key(\"1234\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimal_to_binary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimal_to_binary(15)   # returns \"db1111db\"\n  decimal_to_binary(32)   # returns \"db100000db\"\n  */\nconst decimal_to_binary = (decimal) => {\n  let binary = '';\n  let i = 0;\n  let decimal = parseInt(decimal, 10);\n  for (i = 0; i <= decimal; i++) {\n    if (i % 2 === 0) {\n      binary += '0';\n    } else {\n      binary += '1';\n    }\n  }\n  binary = binary.substring(0, binary.length - 1);\n  return binary + 'db';\n};\n\nmodule.exports = decimal_to_binary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "is_happy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  is_happy(a) => false\n  is_happy(aa) => false\n  is_happy(abcd) => true\n  is_happy(aabb) => false\n  is_happy(adb) => true\n  is_happy(xyy) => false\n  */\nconst is_happy = (s) => {\n  if (s.length < 3) {\n    return false\n  }\n  let arr = []\n  let current = ''\n  for (let i = 0; i < s.length; i++) {\n    current += s[i]\n    if (arr.indexOf(current) === -1) {\n      arr.push(current)\n    } else {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(is_happy('a'))\nconsole.log(is_happy('aa'))\nconsole.log(is_happy('abcd'))\nconsole.log(is_happy('aabb'))\nconsole.log(is_happy('adb'))\nconsole.log(is_happy('xyy'))\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numerical_letter_grade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numerical_letter_grade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numerical_letter_grade = (grades) => {\n  const output = [];\n  const length = grades.length;\n  for (let i = 0; i < length; i++) {\n    const grade = grades[i];\n    const output_i = `${grade}`;\n    output.push(output_i);\n  }\n  return output;\n};\n\nexport default numerical_letter_grade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prime_length", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prime_length('Hello') == true\n  prime_length('abcdcba') == true\n  prime_length('kittens') == true\n  prime_length('orange') == false\n  */\nconst prime_length = (string) => {\n    return!isNaN(string.length) && string.length % 1!== 0 && string.length % 2!== 0 && string.length % 3!== 0 && string.length % 5!== 0 && string.length % 7!== 0 && string.length % 11!== 0 && string.length % 13!== 0 && string.length % 17!== 0 && string.length % 19!== 0 && string.length % 23!== 0 && string.length % 29!== 0 && string.length % 31!== 0 && string.length % 37!== 0 && string.length % 41!== 0 && string.length % 43!== 0 && string.length % 47!== 0 && string.length % 53!== 0 && string.length % 59!== 0 && string.length % 61!== 0 && string.length % 67!== 0 && string.length % 71!== 0 && string.length % 73!== 0 && string.length % 79!== 0 && string.length % 83!== 0 && string.length % 89!== 0 && string.length % 97!== 0 && string.length % 101!== 0 && string.length % 103!== 0 && string.length % 107!== 0 && string.length % 109!== 0 && string.length % 113!== 0 && string.length % 127!== 0 && string.length % 131!== 0 && string.length % 137!== 0 && string.length % 139!== 0 && string.length % 149!== 0 && string.length % 151!== 0 && string.length % 157!== 0 && string.length % 163!== 0 && string.length % 167!== 0 && string.length % 169!== 0 && string.length % 173!== 0 && string.length % 179!== 0 && string.length % 181!== 0 && string.length % 187!== 0 && string.length % 191!== 0 && string.length % 193!== 0 && string.length % 197!== 0 && string.length % 199!== 0 && string.length % 203!== 0 && string.length % 209!== 0 && string.length % 211!== 0 && string.length % 217!== 0 && string.length % 223!== 0 && string.length % 227!== 0 && string.length % 229!== 0 && string.length % 233!== 0 && string.length % 239!== 0 && string.length % 241!== 0 && string.length % 243!== 0 && string.length % 251!== 0 && string.length % 257!== 0 && string.length % 263!== 0 && string.length % 269!== 0 && string.length % 271!== 0 && string.length % 277!== 0 && string.length % 281!== 0 && string.length % 283!== 0 && string.length % 293!== 0 && string.length % 307!== 0 && string.length % 311!== 0 && string.length % 313!== 0 && string.length % 317!== 0 && string.length % 329!== 0 && string.length % 331!== 0 && string.length % 337!== 0 && string.length % 347!== 0 && string.length % 349!== 0 && string.length % 353!== 0 && string.length % 359!== 0 && string.length % 367!== 0 && string.length % 373!== 0 && string.length % 379!== 0 && string.length % 383!== 0 && string.length % 397!== 0 && string.length % 401!== 0 && string.length % 409!== 0 && string.length % 419!== 0 && string.length % 421!== 0 && string.length % 431!== 0 && string.length % 433!== 0 && string.length % 439!== 0 && string.length % 441!== 0 && string.length % 447!== 0 && string.length % 457!== 0 && string.length % 461!== 0 && string.length % 463!== 0 && string.length % 467!== 0 && string.length % 479!== 0 && string.length % 487!== 0 && string.length % 491!== 0 && string.length % 499!== 0 && string.length % 503!== 0 && string.length % 509!== 0 && string.length % 521!== 0 && string.length % 523!== 0 && string.length % 541!== 0 && string.length % 547!== 0 && string.length % 559!== 0 && string.length % 563!== 0 && string.length % 571!== 0 && string.length % 577!== 0 && string.length % 587!== 0 && string.length % 599!== 0 && string.length % 601!== 0 && string.length % 607!== 0 && string.length % 611!== 0 && string.length % 619!== 0 && string.length % 629!== 0 && string.length % 631!== 0 && string.length % 639!== 0 && string.length % 643!== 0 && string.length % 647!== 0 && string.length % 653!== 0 && string.length % 659!== 0 && string.length % 661!== 0 && string.length % 673!== 0 && string.length % 677!== 0 && string.length % 683!== 0 && string.length % 691!== 0 && string.length % 701!== 0 && string.length % 709!== 0 && string.length % 719!== 0 && string.length % 733!== 0 && string.length % 737!== 0 && string.length % 743!== 0 && string.length % 751!== 0 && string.length % 757!== 0 && string.length % 767!== 0 && string.length % 773!== 0 && string.length % 787!== 0 && string.length % 797!== 0 && string.length % 801!== 0 && string.length % 803!== 0 && string.length % 809!== 0 && string.length % 817!== 0 && string.length % 821!== 0 && string.length % 831!== 0 && string.length % 839!== 0 && string.length % 843!== 0 && string.length % 847!== 0 && string.length % 853!== 0 && string.length % 859!== 0 && string.length"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "starts_one_ends", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst starts_one_ends = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst is_palindrome = (str) => {\n  return str === str.split('').reverse().join('')\n}\n\nconst is_not_palindrome = (str) => {\n  return!is_palindrome(str)\n}\n\nconst is_palindrome_p = (str) => {\n  return is_palindrome(str)\n}\n\nconst is_not_palindrome_p = (str) => {\n  return is_not_palindrome(str)\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst ends_one_starts = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst starts_one_ends_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that end with 1.\n  */\nconst ends_one_starts_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst starts_one_ends_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that end with 1.\n  */\nconst ends_one_starts_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst starts_one_ends_p_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that end with 1.\n  */\nconst ends_one_starts_p_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_starts = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_ends = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_starts_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_ends_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_starts_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_ends_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_starts_p_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nconst count_one_ends_p_p_p = (n) => {\n  let sum = 0\n  for (let i = 1; i < n; i++) {\n    sum += (i === 1)? 1 : 0\n  }\n  return sum\n}\n\nmodule.exports = {\n  is_palindrome,\n  is_not_palindrome,\n  is_palindrome_p,\n  is_not_palindrome_p,\n  starts_one_ends,\n  ends_one_starts,\n  starts_one_ends_p,\n  ends_one_starts_p,\n  starts_one_ends_p_p,\n  ends_one_starts_p_p,\n  starts_one_ends_p_p_p,\n  ends_one_starts_p_p_p,\n  count_one_starts,\n  count_one_ends,\n  count_one_starts"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let str = N.toString();\n  let total = 0;\n  let strLength = str.length;\n  let lastDigit = str.charAt(strLength - 1);\n  let index = 0;\n  while (index < strLength) {\n    total = total + Number(lastDigit) * Math.pow(2, index);\n    index += 1;\n    lastDigit = str.charAt(index);\n  }\n  return total.toString();\n};\n\nconsole.log(solve(100));\nconsole.log(solve(1000));\nconsole.log(solve(1500));\nconsole.log(solve(1400));\nconsole.log(solve(1300));\nconsole.log(solve(1200));\nconsole.log(solve(1100));\nconsole.log(solve(1000));\nconsole.log(solve(100));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 10\n  */\nconst add = (lst) => {\n  let output = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    output += lst[i]\n  }\n  return output\n}\n\n/*Given a non-"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "anti_shuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  anti_shuffle('Hi') returns 'Hi'\n  anti_shuffle('hello') returns 'ehllo'\n  anti_shuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst anti_shuffle = (s) => {\n    let s = s.split(' ')\n    let s_o = []\n    for (let i = 0; i < s.length; i++) {\n        let tmp = []\n        for (let j = 0; j < s[i].length; j++) {\n            tmp.push(s[i][j])\n        }\n        s_o.push(tmp.sort().join(''))\n    }\n    return s_o.join(' ')\n}\n\nconsole.log(anti_shuffle('Hi')) // 'Hi'\nconsole.log(anti_shuffle('hello')) // 'ehllo'\nconsole.log(anti_shuffle('Hello World!!!')) // 'Hello!!!Wdlor'\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "get_row", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  get_row([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  get_row([], 1) == []\n  get_row([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst get_row = (lst, x) => {\n  if(!lst ||!lst[0] ||!lst[0][0]) {\n    return [];\n  }\n  const [n, m] = [lst[0].length, lst.length];\n  const result = [];\n  for(let i = 0; i < n; i++) {\n    let row = lst[i];\n    for(let j = 0; j < m; j++) {\n      if(row[j] === x) {\n        result.push([i, j]);\n      }\n    }\n  }\n  result.sort((a, b) => a[0] - b[0]);\n  result.sort((a, b) => b[1] - a[1]);\n  return result;\n}\n\nconsole.log(get_row([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sort_array([]) => []\n  * sort_array([5]) => [5]\n  * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sort_array = (array) => {\n  let sorted = array;\n  const length = array.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - i - 1; j++) {\n      if (sorted[j] > sorted[j + 1]) {\n        const tmp = sorted[j];\n        sorted[j] = sorted[j + 1];\n        sorted[j + 1] = tmp;\n      }\n    }\n  }\n  return sorted;\n};\n\nmodule.exports = sort_array;\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alpha = 'abcdefghijklmnopqrstuvwxyz';\n  let rotated = '';\n  for (let i = 0; i < alpha.length; i++) {\n    rotated += alpha[(alpha.indexOf(s.charAt(i)) + (i % 2)) % alpha.length];\n  }\n  return rotated;\n};\n\n//console.log(encrypt('hello'));\nconsole.log(encrypt('hello') === 'lm');\nconsole.log(encrypt('asdfghjkl') === 'ewhjklnop');\nconsole.log(encrypt('gf') === 'kj');\nconsole.log(encrypt('et') === 'ix');\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "next_smallest", "gc": "/*\n  You are given a list of integers.\n  Write a function next_smallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  next_smallest([1, 2, 3, 4, 5]) == 2\n  next_smallest([5, 1, 4, 3, 2]) == 2\n  next_smallest([]) == null\n  next_smallest([1, 1]) == null\n  */\nconst next_smallest = (lst) => {\n  if (lst.length === 0) return null;\n  let first = lst[0];\n  let last = lst[lst.length - 1];\n  if (first > last) {\n    return null;\n  }\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < first) {\n      first = lst[i];\n    }\n    if (lst[i] > last) {\n      last = lst[i];\n    }\n  }\n  return first;\n}\n\nconst next_smallest_test = t({\n  \n  'empty list': function(t) {\n    t.plan(2);\n    t.equal(next_smallest([]) === null, true);\n    t.equal(next_smallest([1, 1]) === null, true);\n    t.end();\n  },\n  \n  'list with two elements': function(t) {\n    t.plan(2);\n    t.equal(next_smallest([1, 2, 3]) === 2, true);\n    t.equal(next_smallest([5, 1, 4, 3, 2]) === 2, true);\n    t.end();\n  },\n  \n  'list with three elements': function(t) {\n    t.plan(2);\n    t.equal(next_smallest([1, 2, 3, 4]) === 4, true);\n    t.equal(next_smallest([5, 1, 4, 3, 2]) === 4, true);\n    t.end();\n  },\n  \n  'list with many elements': function(t) {\n    t.plan(2);\n    t.equal(next_smallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) === 8, true);\n    t.equal(next_smallest([5, 1, 4, 3, 2]) === 2, true);\n    t.end();\n  }\n});\n\nmodule.exports = next_smallest_test;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "is_bored", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> is_bored(\"Hello world\")\n  0\n  >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst is_bored = (S) => {\n  let n = 0\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] === \"I\") {\n      n += 1\n    }\n  }\n  return n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "any_int", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  any_int(5, 2, 7) ➞ true\n  any_int(3, 2, 2) ➞ false\n  any_int(3, -2, 1) ➞ true\n  any_int(3.6, -2.2, 2) ➞ false\n  */\nconst any_int = (x, y, z) => {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    return false;\n  }\n  if (!isInteger(x) ||!isInteger(y) ||!isInteger(z)) {\n    return false;\n  }\n  return (x === z + y || y === z + x || z === x + y);\n};\n\nexport default any_int;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toLowerCase() === letters[i].toUpperCase()) {\n      letters[i] = letters[i].toUpperCase();\n    } else {\n      letters[i] = letters[i].toLowerCase();\n    }\n  }\n  return letters.join('');\n};\n\nconst decode = (message) => {\n  let letters = message.split('');\n  for (let i = 0; i < letters.length; i++) {\n    if (letters[i].toLowerCase() === letters[i].toUpperCase()) {\n      letters[i] = letters[i].toLowerCase();\n    } else {\n      letters[i] = letters[i].toUpperCase();\n    }\n  }\n  return letters.join('');\n};\n\nconst test = () => {\n  let message = 'This is a message';\n  console.log(encode(message));\n  console.log(decode(encode(message)));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n    let max = 0;\n    lst.forEach((v) => {\n        if (v > max) {\n            max = v;\n        }\n    });\n    let sum = 0;\n    while (max!== 0) {\n        let i = 0;\n        while (i <= max) {\n            sum += (max - i) * parseInt(max / i);\n            i += 1;\n        }\n        max = sum;\n    }\n    return sum;\n}\nconsole.log(skjkasdkd([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(skjkasdkd([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(skjkasdkd([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(skjkasdkd([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(skjkasdkd([0,81,12,3,1,21]));\nconsole.log(skjkasdkd([0,8,1,2,1,7]));<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "check_dict_case", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst check_dict_case = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length;\n}\n\nconst check_dict_case_or_empty = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length || count === 0;\n}\n\nconst check_dict_size = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      count++;\n    }\n  });\n  return count === Object.keys(dict).length;\n}\n\nconst check_dict_size_or_empty = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      count++;\n    }\n  });\n  return count === Object.keys(dict).length || count === 0;\n}\n\nconst check_dict_case_and_size = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length && count === Object.keys(dict).length;\n}\n\nconst check_dict_case_and_size_or_empty = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length || count === 0;\n}\n\nconst check_dict_case_and_size_and_size = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length && count === Object.keys(dict).length;\n}\n\nconst check_dict_case_and_size_and_size_or_empty = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length || count === 0;\n}\n\nconst check_dict_case_and_size_and_size_and_size = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length && count === Object.keys(dict).length;\n}\n\nconst check_dict_case_and_size_and_size_and_size_or_empty = (dict) => {\n  let count = 0;\n  Object.keys(dict).forEach( (key) => {\n    let val = dict[key];\n    if (typeof val ==='string') {\n      if (key.toLowerCase() === key.toUpperCase()) {\n        count++;\n      }\n    }\n  });\n  return count === Object.keys(dict).length || count === 0;\n}\n\nexport { check_dict_case, check_dict_case_or_empty, check_dict_size, check_dict_size_or_empty, check_dict_case_and_size, check_dict_case_and_size_or_empty, check_dict_case_and_size_and_size, check_dict_case_and_size_and_size_or_empty, check_dict_case_and_size_and_size_and_size, check_dict_case_and_size_and_size_and_size_or_empty }<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "count_up_to", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  count_up_to(5) => [2,3]\n  count_up_to(11) => [2,3,5,7]\n  count_up_to(0) => []\n  count_up_to(20) => [2,3,5,7,11,13,17,19]\n  count_up_to(1) => []\n  count_up_to(18) => [2,3,5,7,11,13,17]\n  */\nconst count_up_to = (n) => {\n  let p = [], i = 1;\n  while (i <= n) {\n    if (is_prime(i)) {\n      p.push(i);\n    }\n    i++;\n  }\n  return p;\n};\n\nconst is_prime = (n) => {\n  let i = 1;\n  for (; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Implement a function that takes an array of numbers and returns the sum of the\n  numbers.\n  for example:\n  sum_of([2, 3, 4, 5]) => 15\n  sum_of([2, 3, 4, 5, 6]) => 21\n  sum_of([2, 3, 4, 5, 6, 7]) => 28\n  sum_of([2, 3, 4, 5, 6, 7, 8]) => 36\n  sum_of([2, 3, 4, 5, 6, 7, 8, 9]) => 45\n*/\nconst sum_of = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n[i];\n  }\n  return sum;\n};\n\n/*\n  Implement a function that takes an array of numbers and returns the number of\n  numbers in the array that are divisible by any number in the array.\n  for example:\n  count_divisible([2, 3, 4, 5]) => 3\n  count_divisible([2, 3, 4, 5, 6]) => 2\n  count_divisible([2, 3, 4, 5, 6, 7]) => 1\n  count_divisible([2, 3, 4, 5, 6, 7, 8]) => 0\n*/\nconst count_divisible = (n) => {\n  let count = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (n[i] % n[j] === 0) {\n        count++;\n      }\n    }\n  }\n  return count;\n};\n\n/*\n  Implement a function that takes an array of numbers and returns the product of\n  the numbers.\n  for example:\n  product([2, 3, 4, 5]) => 24\n  product([2, 3, 4, 5, 6]) => 720\n  product([2, 3, 4, 5, 6, 7]) => 5040\n  product([2, 3, 4, 5, 6, 7, 8]) => 5120\n*/\nconst product = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n[i];\n  }\n  return product;\n};\n\nconst main = () => {\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]));\n  console.log(sum_of([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  const sum = a + b;\n  let c = 0;\n  for (let i = 0; i < sum; i++) {\n    c += sum % 10;\n    sum = sum / 10;\n  }\n  return c;\n}\n\n/*\n  Complete the function that takes two strings and returns the string that has\n  the longest common subsequence (LCS) between the two.\n  Assume the input is always valid.\n  Examples:\n  LCS(\"great\", \"rattlers\") should return \"ratt\".\n  LCS(\"great\", \"greatest\") should return \"great\".\n  LCS(\"great\", \"gre\") should return \"gre\".\n  */\nconst longestCommonSubstring = (s1, s2) => {\n  const maxLen = 0;\n  let maxLoc = 0;\n  let len = 0;\n  let i = 0;\n  let j = 0;\n  const sub = \"\";\n  while (i < s1.length && j < s2.length) {\n    if (s1[i] === s2[j]) {\n      sub += s1[i];\n      i++;\n      j++;\n    } else if (s1[i] > s2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n    len = j - i;\n    if (maxLen < len) {\n      maxLen = len;\n      maxLoc = i;\n    }\n  }\n  return sub;\n}\n\n/*\n  Complete the function that takes a string and returns the index of the first\n  occurrence of the target substring.\n  Assume the input is always valid.\n  Examples:\n  indexOf(\"rat\", \"rat\") should return 0.\n  indexOf(\"rat\", \"car\") should return -1.\n  */\nconst indexOf = (s, target) => {\n  let i = 0;\n  while (s.indexOf(target, i)!== -1) {\n    i = s.indexOf(target, i + 1);\n  }\n  return i;\n}\n\n/*\n  Complete the function that takes a string and a string and returns the\n  string that contains all the characters of the input string that are also\n  present in the target string.\n  Assume the input is always valid.\n  Examples:\n  contains(\"rat\", \"rat\") should return \"rat\".\n  contains(\"rat\", \"car\") should return \"\".\n  */\nconst contains = (s, target) => {\n  let i = 0;\n  while (s.indexOf(target, i)!== -1) {\n    i = s.indexOf(target, i + 1);\n  }\n  return s.slice(i);\n}\n\n/*\n  Complete the function that takes two strings and returns the string that has\n  the longest common prefix of the two.\n  Assume the input is always valid.\n  Examples:\n  LCS(\"great\", \"rattlers\") should return \"g\".\n  LCS(\"great\", \"greatest\") should return \"g\".\n  LCS(\"great\", \"gre\") should return \"g\".\n  */\nconst longestCommonPrefix = (s1, s2) => {\n  const maxLen = 0;\n  let maxLoc = 0;\n  let len = 0;\n  let i = 0;\n  let j = 0;\n  const sub = \"\";\n  while (i < s1.length && j < s2.length) {\n    if (s1[i] === s2[j]) {\n      sub += s1[i];\n      i++;\n      j++;\n    } else if (s1[i] > s2[j]) {\n      j++;\n    } else {\n      i++;\n    }\n    len = j - i;\n    if (maxLen < len) {\n      maxLen = len;\n      maxLoc = i;\n    }\n  }\n  return sub;\n}\n\n/*\n  Complete the function that takes two strings and returns the string that has\n  the longest common suffix of the two.\n  Assume the input is always valid.\n  Examples:\n  LCS(\"great\", \"rattlers\") should return \"tlers\".\n  LCS(\"great\", \"greatest\") should return \"st\".\n  LCS(\"great\", \"gre\") should return \"re\".\n  */\nconst longestCommonSuffix = (s1, s2) => {\n  const maxLen = 0;\n  let maxLoc = 0;\n  let len = 0;\n  let i = 0;\n  let j = 0;\n  const sub = \"\";\n  while (i < s1.length && j < s2.length) {\n    if (s1[i] === s2[j]) {\n      sub += s1[i];\n      i++;\n      j++;\n    } else if (s1[i] > s2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n    len = j - i;\n    if (maxLen < len) {\n      maxLen = len;\n      maxLoc = i;\n    }\n  }\n  return sub;\n}\n\n/*\n  Complete the function that takes a string and returns the index of the first\n  occurrence of the target substring.\n  Assume the input is always valid.\n  Examples:\n  indexOf(\"rat\", \"rat\") should return 0.\n  indexOf(\"rat\", \"car\") should return -1.\n  */\nconst indexOfWithSubstring = (s, target) => {\n  let i = 0;\n  while (s.indexOf(target, i)!== -1) {\n    i = s.indexOf(target, i + 1);\n  }\n  return i;\n}\n\n/*\n  Complete the function that takes a string and a string and returns the\n  string that contains all the characters of the input string that are also\n  present in the target string.\n  Assume the input is always valid.\n  Examples:\n  contains(\"rat\", \"rat\") should return \"rat\".\n  contains(\"rat\", \"car\") should return \"rat\".\n  contains(\"rat"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "count_upper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  count_upper('aBCdEf') returns 1\n  count_upper('abcdefg') returns 0\n  count_upper('dBBE') returns 0\n  */\nconst count_upper = (s) => {\n    return s.split('').map((char, index) => {\n        if (index % 2 === 0) {\n            return char.toUpperCase();\n        } else {\n            return char;\n        }\n    }).join('');\n};\n\nconsole.log(count_upper('aBCdEf')); // 1\nconsole.log(count_upper('abcdefg')); // 0\nconsole.log(count_upper('dBBE')); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closest_integer", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closest_integer(\"10\")\n  10\n  >>> closest_integer(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closest_integer(\"14.5\") should\n  return 15 and closest_integer(\"-14.5\") should return -15.\n  */\nconst closest_integer = (value) => {\n  let closest_number = parseInt(value);\n  let target_number = closest_number + 1;\n  let target_distance = Math.abs(closest_number - target_number);\n  if (Math.abs(closest_number - target_number) < Math.abs(closest_number - target_number)) {\n    closest_number = closest_number - 1;\n  }\n  return closest_number;\n};\n\n/*\n  Given a list of numbers, return the first one that is closest to a given number\n  Example\n  >>> closest_number(10, [1, 2, 3])\n  1\n  >>> closest_number(10, [1, 2, 3, 4])\n  1\n  >>> closest_number(10, [1, 2, 3, 4])\n  1\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6])\n  1\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7])\n  1\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8])\n  1\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9])\n  1\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  10\n  >>> closest_number(10, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "make_a_pile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> make_a_pile(3)\n  [3, 5, 7]\n  */\nconst make_a_pile = (n) => {\n  let array = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      array.push(i)\n    } else {\n      array.push(i + 1)\n    }\n  }\n  return array\n}\n\nexport default make_a_pile\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "words_string", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words_string(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words_string = (s) => {\n  let split_array = s.split(/\\s+/);\n  return split_array;\n}\n\nconsole.log(words_string(\"One, two, three, four, five, six\"));<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "choose_num", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  choose_num(12, 15) = 14\n  choose_num(13, 12) = -1\n  */\nconst choose_num = (x, y) => {\n  const div = x / y;\n  const mod = x % y;\n  let ret = 0;\n  if (mod < 0) {\n    ret = (mod + y) % y;\n  } else {\n    ret = mod;\n  }\n  return ret;\n};\n\nconst is_palindrome = (str) => {\n  const len = str.length;\n  let i = 0;\n  let j = len - 1;\n  while (i < j) {\n    if (str[i]!== str[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\nconst find_num = (n) => {\n  for (let i = n; i > 0; i--) {\n    const num = i;\n    if (is_palindrome(num)) {\n      return num;\n    }\n  }\n  return -1;\n};\n\nconst main = () => {\n  const x = choose_num(12, 15);\n  const y = choose_num(13, 12);\n  const n = find_num(x);\n  if (y > n) {\n    console.log(y);\n  } else {\n    console.log(-1);\n  }\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "rounded_avg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  rounded_avg(1, 5) => \"0b11\"\n  rounded_avg(7, 5) => -1\n  rounded_avg(10, 20) => \"0b1111\"\n  rounded_avg(20, 33) => \"0b11010\"\n  */\nconst rounded_avg = (n, m) => {\n  let sum = 0;\n  for (let i = n; i <= m; i++) {\n    sum += i;\n  }\n  return Math.round(sum / (m - n + 1)) / 2;\n};\n\nconst test = [\n  {n: 1, m: 5, expected: \"0b11\"},\n  {n: 7, m: 5, expected: -1},\n  {n: 10, m: 20, expected: \"0b1111\"},\n  {n: 20, m: 33, expected: \"0b11010\"}\n];\n\ndescribe(\"#rounded_avg\", () => {\n  it(\"should return rounded average\", () => {\n    test.forEach(({n, m, expected}) => {\n      expect(rounded_avg(n, m)).toEqual(expected);\n    });\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unique_digits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unique_digits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unique_digits([152, 323, 1422, 10])\n  []\n  */\nconst unique_digits = (x) => {\n  let output = [];\n  for (let i = 0; i < x.length; i++) {\n    if (x[i] % 2!== 0) {\n      output.push(x[i]);\n    }\n  }\n  return output.sort();\n}\n\nmodule.exports = unique_digits;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "by_length", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst by_length = (arr) => {\n  return arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n .reverse()\n .map((e) => {\n    let int = e % 10\n    let str = \"\"\n    if (int > 0) {\n      str = \"One\"\n    } else if (int < 0) {\n      str = \"Nine\"\n    } else {\n      str = \"Eight\"\n    }\n    return str\n  })\n}\n\nexport default by_length\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const list = []\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      list.push(1)\n    } else {\n      list.push(i)\n    }\n  }\n  return list\n}\n\nexport default f\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "even_odd_palindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst even_odd_palindrome = (n) => {\n  const odd_even_palindrome = even_odd_palindrome_helper(n)\n\n  const odd_palindrome = odd_even_palindrome[0]\n  const even_palindrome = odd_even_palindrome[1]\n\n  return [odd_palindrome, even_palindrome]\n}\n\nconst even_odd_palindrome_helper = (n) => {\n  let odd_palindrome = 0\n  let even_palindrome = 0\n\n  const is_palindrome = (n) => {\n    return n === parseInt(n, 10)\n  }\n\n  for (let i = 1; i < n; i++) {\n    if (is_palindrome(i)) {\n      if (i % 2 === 0) {\n        odd_palindrome += 1\n      } else {\n        even_palindrome += 1\n      }\n    }\n  }\n\n  return [odd_palindrome, even_palindrome]\n}\n\nconst test = [3, 12, 15, 14, 11, 7, 3, 2, 1, 9, 7, 7, 5, 3, 2, 1, 1, 7, 6, 7, 8, 8, 4, 2, 2, 3, 5, 7, 5, 4, 3, 2, 2, 3, 2, 3, 5, 7, 7, 7, 4, 5, 8, 6, 8, 8, 7, 6, 5, 4, 2, 3, 3, 5, 7, 7, 5, 6, 7, 5, 3, 3, 5, 7, 7, 7, 5, 6, 8, 7, 8, 8, 5, 6, 6, 6, 4, 4, 5, 5, 5, 4, 6, 8, 8, 6, 6, 7, 8, 6, 6, 5, 4, 5, 5, 6, 7, 7, 6, 7, 7, 5, 5, 6, 7, 7, 7, 5, 5, 6, 7, 7, 7, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "count_nums", "gc": "/*\n  Write a function count_nums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> count_nums([]) == 0\n  >>> count_nums([-1, 11, -11]) == 1\n  >>> count_nums([1, 1, 2]) == 3\n  */\nconst count_nums = (arr) => {\n  let result = 0;\n\n  arr.forEach((item) => {\n    const value = parseInt(item);\n    if (value > 0) {\n      result += 1;\n    }\n  });\n\n  return result;\n};\n\nconsole.log(count_nums([-1, 11, -11]));\nconsole.log(count_nums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "move_one_ball", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  move_one_ball([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  move_one_ball([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst move_one_ball = (arr) => {\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  // console.log(arr);\n  for (let i = arr.length - 1; i >= 1; i--) {\n    if (arr[i] > arr[i - 1]) {\n      let x = arr[i - 1];\n      arr[i - 1] = arr[i];\n      arr[i] = x;\n      return move_one_ball(arr);\n    }\n  }\n  return true;\n}\n\nconsole.log(move_one_ball([3, 4, 5, 1, 2]));\nconsole.log(move_one_ball([3, 5, 4, 1, 2]));\nconsole.log(move_one_ball([3, 5, 4, 1, 2, 0]));\nconsole.log(move_one_ball([3, 5, 4, 1, 2, 0, 1, 2]));\nconsole.log(move_one_ball([3, 5, 4, 1, 2, 0, 1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchanged elements between lst1 and lst2.\n  If it is possible to exchange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchange = (lst1, lst2) => {\n  const lst1Length = lst1.length;\n  const lst2Length = lst2.length;\n  let i = 0;\n  let j = 0;\n\n  while (i < lst1Length && j < lst2Length) {\n    if (lst1[i] === lst2[j]) {\n      if (lst1[i] % 2 === 0) {\n        lst1.splice(i, 1, lst1[i] - 2);\n      } else {\n        lst2.splice(j, 1, lst2[j] - 2);\n      }\n      i += 1;\n      j += 1;\n    } else if (lst1[i] < lst2[j]) {\n      i += 1;\n    } else {\n      j += 1;\n    }\n  }\n  return (lst1.length === lst1Length && lst2.length === lst2Length)? \"YES\" : \"NO\";\n};\n\nmodule.exports = exchange;\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {}\n  const count = (str) => {\n    if(str === '') {\n      return 0\n    }\n    const letters = str.split('')\n    let index = 0\n    let max = 0\n    while(index < letters.length) {\n      if(letters[index] === letters[index + 1]) {\n        index += 2\n      } else {\n        if(result[letters[index]] === undefined) {\n          result[letters[index]] = 1\n        } else {\n          result[letters[index]] += 1\n        }\n        index++\n      }\n    }\n    return max\n  }\n\n  let max = 0\n  for(let i in result) {\n    if(result[i] > max) {\n      max = result[i]\n    }\n  }\n\n  return result\n}\n\n/*\n  Given a string representing a space separated number, return a dictionary\n  of the number with the most repetition and containing the corresponding count.\n  If several numbers have the same occurrence, return all of them.\n  \n  Example:\n  histogram('123 a a b') == {'123': 1, 'a': 1, 'b': 1}\n  histogram('123 b a b a') == {'123': 2, 'b': 2}\n  histogram('123 a b a') == {'123': 2}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {}\n  const count = (str) => {\n    if(str === '') {\n      return 0\n    }\n    const numbers = str.split('')\n    let index = 0\n    let max = 0\n    while(index < numbers.length) {\n      if(numbers[index] === numbers[index + 1]) {\n        index += 2\n      } else {\n        if(result[numbers[index]] === undefined) {\n          result[numbers[index]] = 1\n        } else {\n          result[numbers[index]] += 1\n        }\n        index++\n      }\n    }\n    return max\n  }\n\n  let max = 0\n  for(let i in result) {\n    if(result[i] > max) {\n      max = result[i]\n    }\n  }\n\n  return result\n}\n\n/*\n  Given a string representing a space separated letter, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b a c') == {'a': 3, 'b': 1, 'c': 1}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {}\n  const count = (str) => {\n    if(str === '') {\n      return 0\n    }\n    const letters = str.split('')\n    let index = 0\n    let max = 0\n    while(index < letters.length) {\n      if(letters[index] === letters[index + 1]) {\n        index += 2\n      } else {\n        if(result[letters[index]] === undefined) {\n          result[letters[index]] = 1\n        } else {\n          result[letters[index]] += 1\n        }\n        index++\n      }\n    }\n    return max\n  }\n\n  let max = 0\n  for(let i in result) {\n    if(result[i] > max) {\n      max = result[i]\n    }\n  }\n\n  return result\n}\n\n/*\n  Given a string representing a space separated number, return a dictionary\n  of the number with the most repetition and containing the corresponding count.\n  If several numbers have the same occurrence, return all of them.\n  \n  Example:\n  histogram('123 a a b') == {'123': 3, 'a': 1, 'b': 1}\n  histogram('123 b a b a') == {'123': 2, 'b': 2}\n  histogram('123 a b a') == {'123': 2}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let result = {}\n  const count = (str) => {\n    if(str === '') {\n      return 0\n    }\n    const numbers = str.split('')\n    let index = 0\n    let max = 0\n    while(index < numbers.length) {\n      if(numbers[index] === numbers[index + 1]) {\n        index += 2\n      } else {\n        if(result[numbers[index]] === undefined) {\n          result[numbers[index]] = 1\n        } else {\n          result[numbers[index]] += 1\n        }\n        index++\n      }\n    }\n    return max\n  }\n\n  let max = 0\n  for(let i in result) {\n    if(result[i] > max) {\n      max = result[i]\n    }\n  }\n\n  return result\n}\n\n/*\n  Given a string representing a number, return the most repeated one.\n  If several numbers have the same occurrence, return all of them.\n  \n  Example:\n  histogram('12 123 2') == '123'\n  histogram('12 a b 123') == '123'\n  histogram('123 b a') == '123'\n  histogram('123 2') == '123'\n  histogram('123 2 123') == '123'\n  histogram('2') == '2'\n  histogram('2 2') == '2'\n  histogram('2 2 2') == '2'\n  histogram('2 2 3') == '2'\n  histogram('2 2 2"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reverse_delete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reverse_delete = (s, c) => {\n    let i = 0;\n    let j = s.length - 1;\n    let result = [];\n    while (i <= j) {\n        while (i <= j && s[i] === c[j]) {\n            i++;\n        }\n        result.push(s[i]);\n        j--;\n        i++;\n    }\n    return [result.join(''), true];\n}\n\nconst reverse_delete_2 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    let j = len - 1;\n    while (i <= j) {\n        while (i <= j && c[i] === d[j]) {\n            i++;\n        }\n        j--;\n        i++;\n    }\n    return [d.slice(i, j + 1).join(''), true];\n}\n\nconst reverse_delete_3 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    let j = len - 1;\n    let k = 0;\n    while (i <= j) {\n        while (k < len && c[i] === d[k]) {\n            i++;\n        }\n        k++;\n        j--;\n        i++;\n    }\n    return [d.slice(k, j + 1).join(''), true];\n}\n\nconst reverse_delete_4 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    let j = len - 1;\n    let k = 0;\n    while (i <= j) {\n        while (k < len && c[j] === d[k]) {\n            j--;\n        }\n        k++;\n        i++;\n        j--;\n    }\n    return [d.slice(i, j + 1).join(''), true];\n}\n\nconst reverse_delete_5 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    let j = len - 1;\n    let k = 0;\n    while (i <= j) {\n        while (k < len && c[i] === d[k]) {\n            i++;\n        }\n        while (k < len && c[j] === d[k]) {\n            j--;\n        }\n        k++;\n        i++;\n        j--;\n    }\n    return [d.slice(i, j + 1).join(''), true];\n}\n\nconst reverse_delete_6 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    let j = len - 1;\n    let k = 0;\n    while (i <= j) {\n        while (k < len && c[i] === d[k]) {\n            i++;\n        }\n        j--;\n        k++;\n        j--;\n        i++;\n    }\n    return [d.slice(i, j + 1).join(''), true];\n}\n\nconst reverse_delete_7 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    let j = len - 1;\n    let k = 0;\n    while (i <= j) {\n        while (k < len && c[j] === d[k]) {\n            j--;\n        }\n        while (k < len && c[i] === d[k]) {\n            i++;\n        }\n        k++;\n        i++;\n        j--;\n    }\n    return [d.slice(i, j + 1).join(''), true];\n}\n\nconst reverse_delete_8 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    let j = len - 1;\n    let k = 0;\n    while (i <= j) {\n        while (k < len && c[j] === d[k]) {\n            j--;\n        }\n        while (k < len && c[i] === d[k]) {\n            i++;\n        }\n        k++;\n        i++;\n        j--;\n    }\n    return [d.slice(i, j + 1).join(''), true];\n}\n\nconst reverse_delete_9 = (s, c) => {\n    const len = s.length;\n    const d = new Array(len);\n    for (let i = 0; i < len; i++) {\n        d[i] = s[i];\n    }\n    let i = 0;\n    "}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odd_count", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odd_count(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odd_count(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odd_count = (lst) => {\n  const list = []\n  for (let i = 0; i < lst.length; i++) {\n    list.push(odd_digit(lst[i]))\n  }\n  return list\n}\n\nfunction odd_digit(str) {\n  const lst = []\n  let i = 0\n  while (i < str.length) {\n    const ch = str[i]\n    if (is_digit(ch)) {\n      const num = parseInt(ch)\n      if (num % 2 === 1) {\n        lst.push(num)\n      }\n    }\n    i++\n  }\n  return lst\n}\n\nfunction is_digit(ch) {\n  return ch >= '0' && ch <= '9'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "min_sub_array_sum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  min_sub_array_sum([2, 3, 4, 1, 2, 4]) == 1\n  min_sub_array_sum([-1, -2, -3]) == -6\n  */\nconst min_sub_array_sum = (nums) => {\n  const sorted_nums = sort(nums);\n\n  let sum = 0;\n  let index = 0;\n\n  for (let i = 0; i < sorted_nums.length; i++) {\n    if (index < sorted_nums.length - 1) {\n      sum += sorted_nums[index] + sorted_nums[index + 1];\n      index += 2;\n    } else {\n      sum += sorted_nums[index];\n    }\n  }\n\n  return sum;\n};\n\nexport default min_sub_array_sum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "max_fill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst max_fill = (grid, capacity) => {\n  if (grid.length === 1) return 0\n  const dp = grid.map((row, i) => row.reduce((x, c) => c? x + 1 : 0, 0))\n  const dp_next = grid.map((row, i) => row.reduce((x, c) => c? x + 1 : 0, 0))\n  const result = dp.filter(x => x!== dp_next.filter(x => x === 0).length).reduce((x, y) => x + y, 0)\n  return result > capacity? result - capacity : 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sort_array", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sort_array([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sort_array([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sort_array([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sort_array = (arr) => {\n  const sorted_arr = arr.sort((a, b) => {\n    if (a === 0 && b === 0) return 0;\n    else if (a === 0 && b!== 0) return 1;\n    else if (a!== 0 && b === 0) return -1;\n    else return b - a;\n  });\n  return sorted_arr;\n};\n\n// Test cases\nsort_array([1, 5, 2, 3, 4])[0] === 1;\nsort_array([-2, -3, -4, -5, -6])[0] === -6;\nsort_array([1, 0, 2, 3, 4])[0] === 1;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "select_words", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  select_words(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  select_words(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  select_words(\"simple white space\", 2) ==> []\n  select_words(\"Hello world\", 4) ==> [\"world\"]\n  select_words(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst select_words = (s, n) => {\n  const arr = s.split('')\n  const list = []\n\n  for (let i = 0; i < arr.length; i++) {\n    if (n === 1) {\n      if (arr[i] === 'a') {\n        list.push(arr[i])\n      }\n    } else if (n === 2) {\n      if (arr[i] === 'b' || arr[i] === 'c' || arr[i] === 'd' || arr[i] === 'e' || arr[i] === 'f' || arr[i] === 'g' || arr[i] === 'h' || arr[i] === 'i' || arr[i] === 'j' || arr[i] === 'k' || arr[i] === 'l' || arr[i] ==='m' || arr[i] === 'n' || arr[i] === 'o' || arr[i] === 'p' || arr[i] === 'q' || arr[i] === 'r' || arr[i] ==='s' || arr[i] === 't' || arr[i] === 'u' || arr[i] === 'v' || arr[i] === 'w' || arr[i] === 'x' || arr[i] === 'y' || arr[i] === 'z') {\n        list.push(arr[i])\n      }\n    } else if (n === 3) {\n      if (arr[i] === 'b' || arr[i] === 'c' || arr[i] === 'd' || arr[i] === 'e' || arr[i] === 'f' || arr[i] === 'g' || arr[i] === 'h' || arr[i] === 'i' || arr[i] === 'j' || arr[i] === 'k' || arr[i] === 'l' || arr[i] ==='m' || arr[i] === 'n' || arr[i] === 'o' || arr[i] === 'p' || arr[i] === 'q' || arr[i] === 'r' || arr[i] ==='s' || arr[i] === 't' || arr[i] === 'u' || arr[i] === 'v' || arr[i] === 'w' || arr[i] === 'x' || arr[i] === 'y' || arr[i] === 'z') {\n        list.push(arr[i])\n      }\n    } else if (n === 4) {\n      if (arr[i] === 'b' || arr[i] === 'c' || arr[i] === 'd' || arr[i] === 'e' || arr[i] === 'f' || arr[i] === 'g' || arr[i] === 'h' || arr[i] === 'i' || arr[i] === 'j' || arr[i] === 'k' || arr[i] === 'l' || arr[i] ==='m' || arr[i] === 'n' || arr[i] === 'o' || arr[i] === 'p' || arr[i] === 'q' || arr[i] === 'r' || arr[i] ==='s' || arr[i] === 't' || arr[i] === 'u' || arr[i] === 'v' || arr[i] === 'w' || arr[i] === 'x' || arr[i] === 'y' || arr[i] === 'z') {\n        list.push(arr[i])\n      }\n    } else if (n === 5) {\n      if (arr[i] === 'b' || arr[i] === 'c' || arr[i] === 'd' || arr[i] === 'e' || arr[i] === 'f' || arr[i] === 'g' || arr[i] === 'h' || arr[i] === 'i' || arr[i] === 'j' || arr[i] === 'k' || arr[i] === 'l' || arr[i] ==='m' || arr[i] === 'n' || arr[i] === 'o' || arr[i] === 'p' || arr[i] === 'q' || arr[i] === 'r' || arr[i] ==='s' || arr[i] === 't' || arr[i] === 'u' || arr[i] === 'v' || arr[i] === 'w' || arr[i] === 'x' || arr[i] === 'y' || arr[i] === 'z') {\n        list.push(arr[i])\n      }\n    }\n  }\n\n  return list\n}\n\n/*\nGiven a string s, return a list of the longest strings that can be formed \nby replacing a character in s with another character while still preserving \nthe value of s.\n  Example:\n  replace_chars(\"odd\", \"od\", [\"odd\", \"odd\", \"oddd\", \"odddd\", \"oddddd\", \"odddddd\"]) -> [\"oddddd\", \"oddddd\"]\n  replace_chars(\"odd\", \"od\", [\"odd\", \"oddd\", \"odddd\", \"oddddd\", \"odddddd\"]) -> [\"odddddd\"]\n  replace_chars(\"odd\", \"od\", [\"odd\", \"oddd\", \"odddd\", \"oddddd\", \"odddddd\", \"odddddd\"]) -> []\n  replace_chars(\"odd\", \"od\", [\"odd\", \"odddd\", \"oddddd\"]) -> [\"odddddd\"]\n  replace_chars(\"odd\", \"od\", [\"odd\", \"oddd\", \"odddd\", \"oddddd\", \"odddddd\", \"odddddd\"]) -> []\n  "}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "get_closest_vowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  get_closest_vowel(\"yogurt\") ==> \"u\"\n  get_closest_vowel(\"FULL\") ==> \"U\"\n  get_closest_vowel(\"quick\") ==> \"\"\n  get_closest_vowel(\"ab\") ==> \"\"\n  */\nconst get_closest_vowel = (word) => {\n    let word_len = word.length;\n    let vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'];\n    let word_chars = word.split('');\n    let index = word_chars.length - 1;\n    while (index >= 0) {\n        let char = word_chars[index];\n        let next_index = index - 1;\n        while (next_index >= 0) {\n            if (vowels.includes(word_chars[next_index])) {\n                word_chars.splice(index, 1);\n                index--;\n                break;\n            }\n            next_index--;\n        }\n        index--;\n    }\n    let closest_vowel = '';\n    let closest_vowel_distance = 0;\n    for (let i = 0; i < word_chars.length; i++) {\n        let char = word_chars[i];\n        if (vowels.includes(char)) {\n            let distance = Math.abs(i - word_len);\n            if (closest_vowel_distance < distance) {\n                closest_vowel = char;\n                closest_vowel_distance = distance;\n            }\n        }\n    }\n    return closest_vowel;\n};\n\nconsole.log(get_closest_vowel('yogurt'));\nconsole.log(get_closest_vowel('FULL'));\nconsole.log(get_closest_vowel('quick'));\nconsole.log(get_closest_vowel('ab'));<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "match_parens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  match_parens(['()(', ')']) == 'Yes'\n  match_parens([')', ')']) == 'No'\n  */\nconst match_parens = (lst) => {\n  let ret = ''\n  for (let i = 0; i < lst.length; i++) {\n    let p = lst[i]\n    if (p === ')') {\n      if (ret === '') return 'No'\n      else return 'Yes'\n    } else if (p === '(') {\n      if (ret === '') ret = p\n      else {\n        if (ret[0] === p) ret = ret.slice(1)\n        else ret = ret + p\n      }\n    } else {\n      ret = ret + p\n    }\n  }\n  return 'Yes'\n}\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximum = (arr, k) => {\n    let result = [];\n    let length = arr.length;\n    for (let i = 0; i < k; i++) {\n        result.push(arr[length - i - 1]);\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const len = lst.length;\n  let sum = 0;\n  for(let i = 0; i < len; i++) {\n    sum += lst[i] % 2 == 0? lst[i] : 0;\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1, 12]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "add_elements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst add_elements = (arr, k) => {\n  const sums = {};\n  for (let i = 0; i < k; i++) {\n    const n = arr[i];\n    if (sums[n] === undefined) {\n      sums[n] = 1;\n    } else {\n      sums[n]++;\n    }\n  }\n  const result = 0;\n  for (const [n, count] of Object.entries(sums)) {\n    result += count * n;\n  }\n  return result;\n};\n\nconst add_elements_two = (arr, k) => {\n  const sums = {};\n  for (let i = 0; i < k; i++) {\n    const n = arr[i];\n    if (sums[n] === undefined) {\n      sums[n] = 1;\n    } else {\n      sums[n]++;\n    }\n  }\n  const result = 0;\n  for (const [n, count] of Object.entries(sums)) {\n    result += count * n;\n  }\n  return result;\n};\n\nexport {\n  add_elements,\n  add_elements_two\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "get_odd_collatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  get_odd_collatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst get_odd_collatz = (n) => {\n  let odd_collatz = [n]\n  while (odd_collatz.length < n) {\n    let i = odd_collatz.length\n    let temp = odd_collatz[i-1]\n    if (temp % 2 == 0) {\n      odd_collatz[i] = temp / 2\n    } else {\n      odd_collatz[i] = 3 * temp + 1\n    }\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_n = (n) => {\n  let odd_collatz = [n]\n  while (odd_collatz.length < n) {\n    let i = odd_collatz.length\n    let temp = odd_collatz[i-1]\n    if (temp % 2 == 0) {\n      odd_collatz[i] = temp / 2\n    } else {\n      odd_collatz[i] = 3 * temp + 1\n    }\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_recursive = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = []\n  let i = n\n  while (i > 1) {\n    let temp = i\n    if (temp % 2 == 0) {\n      odd_collatz.push(temp / 2)\n    } else {\n      odd_collatz.push(3 * temp + 1)\n    }\n    i = temp\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_recursive_n = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = []\n  let i = n\n  while (i > 1) {\n    let temp = i\n    if (temp % 2 == 0) {\n      odd_collatz.push(temp / 2)\n    } else {\n      odd_collatz.push(3 * temp + 1)\n    }\n    i = temp\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_iterative = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = [n]\n  while (odd_collatz.length < n) {\n    let i = odd_collatz.length\n    let temp = odd_collatz[i-1]\n    if (temp % 2 == 0) {\n      odd_collatz[i] = temp / 2\n    } else {\n      odd_collatz[i] = 3 * temp + 1\n    }\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_iterative_n = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = [n]\n  while (odd_collatz.length < n) {\n    let i = odd_collatz.length\n    let temp = odd_collatz[i-1]\n    if (temp % 2 == 0) {\n      odd_collatz[i] = temp / 2\n    } else {\n      odd_collatz[i] = 3 * temp + 1\n    }\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_non_iterative = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = []\n  let i = n\n  while (i > 1) {\n    let temp = i\n    if (temp % 2 == 0) {\n      odd_collatz.push(temp / 2)\n    } else {\n      odd_collatz.push(3 * temp + 1)\n    }\n    i = temp\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_non_iterative_n = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = []\n  let i = n\n  while (i > 1) {\n    let temp = i\n    if (temp % 2 == 0) {\n      odd_collatz.push(temp / 2)\n    } else {\n      odd_collatz.push(3 * temp + 1)\n    }\n    i = temp\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_non_recursive = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = [n]\n  let i = n\n  while (i > 1) {\n    let temp = i\n    if (temp % 2 == 0) {\n      odd_collatz.push(temp / 2)\n    } else {\n      odd_collatz.push(3 * temp + 1)\n    }\n    i = temp\n  }\n  return odd_collatz\n}\n\nconst get_odd_collatz_non_recursive_n = (n) => {\n  if (n == 1) {\n    return [1]\n  }\n  let odd_collatz = [n]\n  let i = n\n  while (i > 1) {\n    let temp = i\n    if (temp % 2 == 0) {\n      odd_collatz.push(temp / 2)\n    } else {\n      odd_collatz.push(3 * temp + 1)\n    }\n"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valid_date", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valid_date('03-11-2000') => true\n\n  valid_date('15-01-2012') => false\n\n  valid_date('04-0-2040') => false\n\n  valid_date('06-04-2020') => true\n\n  valid_date('06/04/2020') => false\n  */\nconst valid_date = (date) => {\n  return!(/^$/.test(date) || /^[0-9]{1,2}-[0-9]{1,2}-[0-9]{4}$/.test(date) || /^[0-9]{1,2}/[0-9]{1,2}/[0-9]{4}$/.test(date));\n}\n\nconst add_days = (date, days) => {\n  if (valid_date(date) && days >= 1 && days <= 31) {\n    const date_obj = new Date(date);\n    const new_date = new Date(date_obj.getFullYear(), date_obj.getMonth(), date_obj.getDate() + days);\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst is_leap_year = (year) => {\n  if (year % 400 === 0) {\n    return true;\n  } else if (year % 100 === 0) {\n    return false;\n  } else if (year % 4 === 0) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst add_months = (date, months) => {\n  if (valid_date(date) && months >= 1 && months <= 12) {\n    const date_obj = new Date(date);\n    const new_date = new Date(date_obj.getFullYear(), date_obj.getMonth() + months, date_obj.getDate());\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst days_in_month = (month, year) => {\n  if (month === 2 && is_leap_year(year)) {\n    return 29;\n  } else {\n    return [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n  }\n}\n\nconst days_in_year = (year) => {\n  return [365, 366];\n}\n\nconst month_to_day = (month, year) => {\n  return days_in_month(month, year);\n}\n\nconst day_to_month = (day, year) => {\n  let month = -1;\n  for (let i = 0; i < 12; i++) {\n    if (month_to_day(i, year) > day) {\n      month = i;\n      break;\n    }\n  }\n  return month;\n}\n\nconst add_days_in_month = (date, months) => {\n  if (valid_date(date) && months >= 1 && months <= 12) {\n    const date_obj = new Date(date);\n    const new_date = new Date(date_obj.getFullYear(), date_obj.getMonth() + months, date_obj.getDate());\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst add_years = (date, years) => {\n  if (valid_date(date) && years >= 1 && years <= 30) {\n    const date_obj = new Date(date);\n    const new_date = new Date(date_obj.getFullYear() + years, date_obj.getMonth(), date_obj.getDate());\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst is_valid_date = (date) => {\n  if (valid_date(date)) {\n    return days_in_month(day_to_month(date.getDate(), date.getFullYear()), date.getFullYear()) > date.getDate();\n  } else {\n    return false;\n  }\n}\n\nconst add_years_to_date = (date, years) => {\n  if (is_valid_date(date)) {\n    const new_date = add_years(date, years);\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst add_days_to_date = (date, days) => {\n  if (is_valid_date(date)) {\n    const new_date = add_days(date, days);\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst add_months_to_date = (date, months) => {\n  if (is_valid_date(date)) {\n    const new_date = add_months(date, months);\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst add_days_and_months_to_date = (date, days, months) => {\n  if (is_valid_date(date)) {\n    const new_date = add_months(date, months);\n    new_date = add_days(new_date, days);\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst add_years_and_months_to_date = (date, years, months) => {\n  if (is_valid_date(date)) {\n    const new_date = add_months(date, months);\n    new_date = add_years(new_date, years);\n    return new_date;\n  } else {\n    return false;\n  }\n}\n\nconst is_valid_date_string = ("}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "split_words", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  split_words(\"abcdef\") == 3\n  */\nconst split_words = (txt) => {\n  const words = txt.split(/\\s+/);\n  return words;\n};\n\n/* Given a string, find the smallest string that contains every letter of the alphabet\n  Example:\n  contains_alpha(\"hello\") ➞ \"hello\"\n  contains_alpha(\"hleo\") ➞ \"hleo\"\n  contains_alpha(\"\") ➞ \"\"\n  */\nconst contains_alpha = (txt) => {\n  const letters = \"abcdefghijklmnopqrstuvwxyz\";\n  let words = txt.split(/\\s+/);\n  let result = words.find(word => {\n    let letter_words = word.split('');\n    let count = 0;\n    for (let letter of letter_words) {\n      count += letters.indexOf(letter)!== -1;\n    }\n    return count === 26;\n  });\n  if (result === undefined) {\n    return txt;\n  }\n  return result;\n};\n\n/* Given a string, return the index of the first occurrence of the first letter in the string\n  Example:\n  find_first_char(\"hello\") ➞ 0\n  find_first_char(\"hello world\") ➞ 0\n  find_first_char(\"hello world\") ➞ 5\n  */\nconst find_first_char = (txt) => {\n  const letters = \"abcdefghijklmnopqrstuvwxyz\";\n  let index = 0;\n  for (let letter of txt) {\n    index = letters.indexOf(letter);\n    if (index!== -1) {\n      break;\n    }\n  }\n  return index;\n};\n\n/* Given a string, return a string with all vowels removed\n  Example:\n  remove_vowels(\"hello\") ➞ \"hello\"\n  remove_vowels(\"hello world\") ➞ \"hello world\"\n  remove_vowels(\"hello world\") ➞ \"world\"\n  */\nconst remove_vowels = (txt) => {\n  let result = txt.replace(/[aeiou]/g, '');\n  return result;\n};\n\n/* Given a string, return a string with all consonants removed\n  Example:\n  remove_consonants(\"hello world\") ➞ \"hello world\"\n  remove_consonants(\"hello world\") ➞ \"hello world\"\n  remove_consonants(\"hello world\") ➞ \"hello world\"\n  */\nconst remove_consonants = (txt) => {\n  let result = txt.replace(/[bcdfghjklmnpqrstvwxyz]+/g, '');\n  return result;\n};\n\n/* Given a string, return a string with all the vowels replaced by consonants\n  Example:\n  vowel_to_consonant(\"hello world\") ➞ \"hello world\"\n  vowel_to_consonant(\"hello world\") ➞ \"hello world\"\n  vowel_to_consonant(\"hello world\") ➞ \"hello world\"\n  */\nconst vowel_to_consonant = (txt) => {\n  let result = txt.replace(/[aeiou]/g, 'bcdfghjklmnpqrstvwxyz');\n  return result;\n};\n\n/* Given a string, return a string with all the consonants replaced by vowels\n  Example:\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  */\nconst consonant_to_vowel = (txt) => {\n  let result = txt.replace(/bcdfghjklmnpqrstvwxyz/g, 'aeiou');\n  return result;\n};\n\n/* Given a string, return the string with all vowels replaced by consonants\n  Example:\n  vowel_to_consonant(\"hello world\") ➞ \"hello world\"\n  vowel_to_consonant(\"hello world\") ➞ \"hello world\"\n  vowel_to_consonant(\"hello world\") ➞ \"hello world\"\n  */\nconst vowel_to_consonant = (txt) => {\n  let result = txt.replace(/[aeiou]/g, 'bcdfghjklmnpqrstvwxyz');\n  return result;\n};\n\n/* Given a string, return a string with all the vowels replaced by consonants\n  Example:\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  */\nconst consonant_to_vowel = (txt) => {\n  let result = txt.replace(/[bcdfghjklmnpqrstvwxyz]/g, 'aeiou');\n  return result;\n};\n\n/* Given a string, return a string with all the consonants replaced by vowels\n  Example:\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  consonant_to_vowel(\"hello world\") ➞ \"hello world\"\n  */\nconst consonant_to_vowel = (txt) => {\n  let result = txt.replace(/[bcdfghjklmnpqrstvwxyz]/g, 'aeiou');\n  return"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "is_sorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  is_sorted([5]) ➞ true\n  is_sorted([1, 2, 3, 4, 5]) ➞ true\n  is_sorted([1, 3, 2, 4, 5]) ➞ false\n  is_sorted([1, 2, 3, 4, 5, 6]) ➞ true\n  is_sorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  is_sorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  is_sorted([1, 2, 2, 3, 3, 4]) ➞ true\n  is_sorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst is_sorted = (lst) => {\n  const unique_numbers = lst.filter(Number)\n   .sort()\n   .filter(n => n < 1)\n   .map(Number.parseFloat)\n   .filter(n => n > 0)\n  if (unique_numbers.length === 0) {\n    return true\n  }\n  return unique_numbers.every(n => n < unique_numbers[unique_numbers.length - 1])\n}\n\nconst is_sorted_list = (lst) => {\n  return lst.every(a => is_sorted(a))\n}\n\nmodule.exports = is_sorted_list\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1.start >= interval1.end || interval2.start >= interval2.end) return \"NO\";\n  return `${Math.floor((interval1.start + interval2.start) / 2)}`;\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection2 = (interval1, interval2) => {\n  let a = interval1.start,\n      b = interval1.end,\n      c = interval2.start,\n      d = interval2.end,\n      r = \"NO\";\n  if (a <= c && c <= b) r = `${Math.floor((c + b) / 2)}`;\n  if (a <= d && d <= b) r = `${r}${Math.floor((c + d) / 2)}`;\n  return r;\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection3 = (interval1, interval2) => {\n  let a = interval1.start,\n      b = interval1.end,\n      c = interval2.start,\n      d = interval2.end;\n  if (a <= c && c <= b) return `${Math.floor((c + b) / 2)}`;\n  if (a <= d && d <= b) return `${Math.floor((c + d) / 2)}`;\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection4 = (interval1, interval2) => {\n  let a = interval1.start,\n      b = interval1.end,\n      c = interval2.start,\n      d = interval2.end;\n  if (a <= c && c <= b) return `${Math.floor((c + b) / 2)}`;\n  if (a <= d && d <= b) return `${Math.floor((c + d) / 2)}`;\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection5 = (interval1, interval2) => {\n  let a = interval1.start,\n      b = interval1.end,\n      c = interval2.start,\n      d = interval2.end;\n  if (a <= c && c <= b) return `${Math.floor((c + b) / 2)}`;\n  if (a <= d && d <= b) return `${Math.floor((c + d) / 2)}`;\n};\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection6 = (interval1, interval2) => {\n  let a = interval1.start,\n      b = interval1.end,\n      c = interval2.start,\n      d = interval2.end;\n  if (a <= c && c <= b) return `${Math.floor((c + b) / 2)}`;\n  if (a <= d && d <= b) return `${Math.floor((c + d) / 2)}`;\n};\n\nconst test_intersection = () => {\n  const intersection = intersection1;\n  const intersection2 = intersection2;\n  const intersection3 = intersection3;\n  const intersection4 = intersection4;\n  const intersection5 = intersection5;\n  const intersection6 = intersection6;\n  const result = [\n    intersection(1, 2),\n    intersection2(1, 2),\n    intersection3(1, 2),\n    intersection4(1, 2),\n    intersection5(1, 2),\n    intersection6(1, 2),\n    intersection(1, 2),\n    intersection2(1, 2),\n    intersection3(1, 2),\n    intersection4(1, 2),\n    intersection5(1, 2),\n    intersection6(1, 2),\n    intersection(1, 2),\n    intersection2(1, 2),\n    intersection3(1, 2),\n    intersection4(1, 2),\n    intersection5(1, 2),\n    intersection6(1, 2),\n    intersection(1, 2),\n    intersection2(1, 2),\n    "}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prod_signs", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prod_signs([1, 2, 2, -4]) == -9\n  >>> prod_signs([0, 1]) == 0\n  >>> prod_signs([]) == null\n  */\nconst prod_signs = (arr) => {\n  const len = arr.length;\n  if (len === 0) return null;\n\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === 0) continue;\n    sum += Math.abs(arr[i]);\n  }\n\n  if (sum === 0) return null;\n\n  let res = 1;\n  for (let i = 0; i < len; i++) {\n    if (arr[i] === 0) continue;\n    res *= Math.abs(arr[i]);\n  }\n\n  return res * sum;\n};\n\nexport default prod_signs;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "min_path", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst min_path = (grid, k) => {\n  let len = grid.length\n  if (len < 2) return []\n  const row_lst = grid[0]\n  const col_lst = grid[0]\n  for (let i = 1; i < len; i++) {\n    row_lst = row_lst.concat(grid[i][0])\n    col_lst = col_lst.concat(grid[0][i])\n  }\n  const min_path_lst = []\n  for (let i = 1; i < k; i++) {\n    let min_index = 0\n    let min_val = row_lst[0]\n    for (let j = 1; j < len; j++) {\n      if (row_lst[j] < min_val) {\n        min_val = row_lst[j]\n        min_index = j\n      }\n    }\n    row_lst[min_index] = 0\n    min_path_lst.push(row_lst[min_index])\n  }\n  return min_path_lst\n}\n\nconst grid = [\n  [1, 2, 3],\n  [4, 5, 6],\n  [7, 8, 9]\n]\n\nconst k = 3\nconsole.log(min_path(grid, k))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let result = [1, 3, 2]\n  for (let i = 1; i <= n; i++) {\n    result.push(1 + result[i - 1] + result[i - 2])\n  }\n  return result\n}\n\nexport default tri<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      sum += i;\n    }\n  }\n  return sum;\n};\n\n// Tests\nconst tests = [\n  {\n    description: 'All digits are even',\n    input: 1,\n    output: 0\n  },\n  {\n    description: 'One digit',\n    input: 4,\n    output: 1\n  },\n  {\n    description: 'Two digits',\n    input: 235,\n    output: 15\n  }\n];\n\ntests.forEach((t) => {\n  it(`${t.description} => ${t.input}`, () => {\n    expect(digits(t.input)).toBe(t.output);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "is_nested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  is_nested('[[]]') ➞ true\n  is_nested('[]]]]]]][[[[[]') ➞ false\n  is_nested('[][]') ➞ false\n  is_nested('[]') ➞ false\n  is_nested('[[][]]') ➞ true\n  is_nested('[[]][[') ➞ true\n  */\nconst is_nested = (string) => {\n    let left_count = 0\n    let right_count = 0\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            left_count++\n        } else if (string[i] === ']') {\n            right_count++\n        }\n    }\n    return left_count > 0 && right_count > 0\n}\n\n/*\n  Given a string, write a function that removes the duplicates and returns the new string.\n  For example,\n  remove_duplicates('aa[aa]') ➞ 'aa'\n  remove_duplicates('aa[bb][cc]') ➞ 'aa[bb][cc]'\n  remove_duplicates('aa[bb][cc][cc]') ➞ 'aa[bb][cc]'\n  */\nconst remove_duplicates = (string) => {\n    let duplicates = []\n    let prev = ''\n    for (let i = 0; i < string.length; i++) {\n        if (string[i]!== prev) {\n            duplicates.push(string[i])\n            prev = string[i]\n        }\n    }\n    return duplicates.join('[')\n}\n\n/*\n  Write a function to find the longest substring in a string.\n  Example:\n  substring_max('aa[bb][cc][cc]') ➞ 'cc'\n  substring_max('aa[bb][cc][cc][cc]') ➞ 'cc'\n  substring_max('aa[bb][cc]') ➞ 'cc'\n  substring_max('aa[bb]') ➞ 'bb'\n  substring_max('aa') ➞ 'a'\n  substring_max('aa[bb[cc]') ➞ 'bb[cc]'\n  substring_max('aa[bb[cc][cc]') ➞ 'bb[cc]'\n  substring_max('aa[bb[cc][cc][cc]') ➞ 'bb[cc]'\n  substring_max('aa[bb[cc][cc][cc][cc]') ➞ 'bb[cc]'\n  */\nconst substring_max = (string) => {\n    let result = ''\n    let longest = 0\n    let i = 0\n    while (i < string.length) {\n        let index = string.indexOf('[', i)\n        if (index === -1) {\n            break\n        }\n        let start = index + 1\n        let end = string.indexOf(']', start)\n        if (end === -1) {\n            break\n        }\n        longest = end - start + 1\n        if (longest > longest) {\n            result = string.substring(start, end + 1)\n        }\n        i = end + 1\n    }\n    return result\n}\n\n/*\n  Given an array of integers, write a function to count the number of elements that are divisible by each integer.\n  Example:\n  [1, 2, 3, 4, 5]\n  divisible_count([1, 2, 3, 4, 5]) ➞ 3\n  divisible_count([1, 2, 3, 4, 5, 6]) ➞ 2\n  divisible_count([1, 2, 3, 4, 5, 6, 7]) ➞ 1\n  divisible_count([1, 2, 3, 4, 5, 6, 7, 8]) ➞ 3\n  */\nconst divisible_count = (array) => {\n    let result = 0\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 1; j < array.length; j++) {\n            if (array[i] % array[j] === 0) {\n                result++\n            }\n        }\n    }\n    return result\n}\n\n/*\n  Write a function to find the longest palindrome in a string.\n  A string is a palindrome if it reads the same forward and backward.\n  Example:\n  palindrome_max('aa') ➞ 'aa'\n  palindrome_max('aa[bb]') ➞ 'aa[bb]'\n  palindrome_max('aa[bb][cc]') ➞ 'aa[bb][cc]'\n  palindrome_max('aa[bb][cc][cc]') ➞ 'aa[bb][cc][cc]'\n  palindrome_max('aa[bb][cc][cc][cc]') ➞ 'aa[bb][cc][cc][cc]'\n  */\nconst palindrome_max = (string) => {\n    let result = ''\n    let i = 0\n    while (i < string.length) {\n        let j = string.length - 1\n        while (i < string.length && j >= 0 && string[i] === string[j]) {\n            i++\n            j--\n        }\n        if (i < string.length) {\n            result = string.substring(i, j + 1)\n            i++\n        }\n    }\n    return result\n}\n\n/*\n  Write a function to find the longest common prefix string in a string array.\n  For example:\n  longest_common_prefix(['aa', 'bb', 'cc']) ➞ 'aa'\n  longest_common_prefix(['aaa', 'bbb', 'cc']) ➞ 'aaa'\n  longest_common_prefix(['aaa', 'bbb', 'ccc']) ➞ 'aaa'\n  */\nconst longest_common_prefix = (array) => {\n    let result = ''\n    for (let i = 0; i < array.length; i++) {\n        let i_start = i\n        let j = i\n        while (j < array.length && array[j] === array"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sum_squares = (lst) => {\n  let l = lst.length;\n  let result = 0;\n  for (let i = 0; i < l; i++) {\n    result += Math.pow(lst[i], 2);\n  }\n  return result;\n};\n\n//console.log(sum_squares([1,2,3]));\nconsole.log(sum_squares([1,4,9]));\nconsole.log(sum_squares([1,3,5,7]));\nconsole.log(sum_squares([1.4,4.2,0]));\nconsole.log(sum_squares([-2.4,1,1]));<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "check_if_last_char_is_a_letter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  check_if_last_char_is_a_letter(\"apple pie\") ➞ false\n  check_if_last_char_is_a_letter(\"apple pi e\") ➞ true\n  check_if_last_char_is_a_letter(\"apple pi e \") ➞ false\n  check_if_last_char_is_a_letter(\"\") ➞ false\n  */\nconst check_if_last_char_is_a_letter = (txt) => {\n  let i = txt.length - 1;\n  let c = txt[i];\n\n  while (i >= 0) {\n    if (c.toLowerCase() === c.toUpperCase()) {\n      return false;\n    }\n\n    c = txt[--i];\n  }\n\n  return true;\n};\n\nexport default check_if_last_char_is_a_letter;\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "can_arrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  can_arrange([1,2,4,3,5]) = 3\n  can_arrange([1,2,3]) = -1\n  */\nconst can_arrange = (arr) => {\n  const sorted = arr.slice(0).sort()\n  const max = sorted.length - 1\n\n  let i = 0\n  while (i < max) {\n    if (sorted[i] <= sorted[i + 1]) {\n      return i\n    }\n    i++\n  }\n  return -1\n}\n\n//test\nconsole.log(can_arrange([1,2,3,4,5,6,7,8,9]))\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largest_smallest_integers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largest_smallest_integers([]) == (null, null)\n  largest_smallest_integers([0]) == (null, null)\n  */\nconst largest_smallest_integers = (lst) => {\n  const smallest = Math.min.apply(Math, lst);\n  const largest = Math.max.apply(Math, lst);\n  return largest > 0? largest : largest === 0? null : largest < 0? largest : null;\n};\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of positive integers, and 'b' is the smallest\n  of negative integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largest_smallest_integers([-1, -3, -2, -4, -5]) == (-5, 1)\n  largest_smallest_integers([-2, -4, -1, -3]) == (-2, -1)\n  largest_smallest_integers([0]) == (null, null)\n  largest_smallest_integers([1]) == (null, null)\n  largest_smallest_integers([2]) == (null, null)\n  */\nconst largest_smallest_integers_reverse = (lst) => {\n  const largest = Math.max.apply(Math, lst);\n  const smallest = Math.min.apply(Math, lst);\n  return largest > 0? largest : largest === 0? null : largest < 0? largest : null;\n};\n\nconst largest_smallest_integers = (lst) => {\n  if (lst.length === 0) {\n    return largest_smallest_integers_reverse(lst);\n  } else if (lst.length === 1) {\n    return largest_smallest_integers_reverse(lst);\n  }\n  return largest_smallest_integers(largest_smallest_integers_reverse(lst.reverse()));\n};\n\n// eslint-disable-next-line\nconst largest_smallest_integers_reverse = largest_smallest_integers(largest_smallest_integers_reverse);\n\nconst largest_smallest_integers = largest_smallest_integers(largest_smallest_integers_reverse);\n\nconst largest_smallest_integers = largest_smallest_integers(largest_smallest_integers_reverse);\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compare_one", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compare_one(1, 2.5) ➞ 2.5\n  compare_one(1, \"2,3\") ➞ \"2,3\"\n  compare_one(\"5,1\", \"6\") ➞ \"6\"\n  compare_one(\"1\", 1) ➞ null\n  */\nconst compare_one = (a, b) => {\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            if (a > b) {\n                return a\n            } else if (a < b) {\n                return b\n            } else {\n                return null\n            }\n        } else {\n            return null\n        }\n    } else if (typeof a ==='string') {\n        if (typeof b ==='string') {\n            if (a > b) {\n                return a\n            } else if (a < b) {\n                return b\n            } else {\n                return null\n            }\n        } else {\n            return null\n        }\n    } else {\n        return null\n    }\n}\n\n/*\n  Create a function that takes two real numbers, and returns the smaller of\n  the two.\n  Return null if the values are equal.\n\n  compare_two(1, 2.5) ➞ 1\n  compare_two(1, \"2,3\") ➞ 1\n  compare_two(\"5,1\", \"6\") ➞ 5\n  compare_two(\"1\", 1) ➞ null\n  */\nconst compare_two = (a, b) => {\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            if (a > b) {\n                return a\n            } else if (a < b) {\n                return b\n            } else {\n                return null\n            }\n        } else {\n            return null\n        }\n    } else if (typeof a ==='string') {\n        if (typeof b ==='string') {\n            if (a > b) {\n                return a\n            } else if (a < b) {\n                return b\n            } else {\n                return null\n            }\n        } else {\n            return null\n        }\n    } else {\n        return null\n    }\n}\n\nconst compare_three = (a, b) => {\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            if (a > b) {\n                if (a > b) {\n                    return a\n                } else {\n                    return b\n                }\n            } else {\n                if (a > b) {\n                    return b\n                } else {\n                    return a\n                }\n            }\n        } else {\n            return null\n        }\n    } else if (typeof a ==='string') {\n        if (typeof b ==='string') {\n            if (a > b) {\n                if (a > b) {\n                    return a\n                } else {\n                    return b\n                }\n            } else {\n                if (a > b) {\n                    return b\n                } else {\n                    return a\n                }\n            }\n        } else {\n            return null\n        }\n    } else {\n        return null\n    }\n}\n\n/*\n  Write a function that takes an array of numbers, and returns the largest number\n  in the array. Return null if the array is empty or the largest number is zero.\n\n  compare_three([1, 2, 3]) ➞ 3\n  compare_three([1, \"2,3\", 5]) ➞ 5\n  compare_three([1, 2, 3, 5]) ➞ 5\n  compare_three([1, 2, 3, 5, 1]) ➞ 5\n  */\nconst compare_four = (a) => {\n    if (a.length > 0) {\n        if (a[0] > 0) {\n            return a[0]\n        } else {\n            return null\n        }\n    } else {\n        return null\n    }\n}\n\nconst compare_five = (a) => {\n    if (a.length > 0) {\n        if (a[0] > 0) {\n            if (a[1] > 0) {\n                return a[0] + a[1]\n            } else {\n                return a[0]\n            }\n        } else {\n            return null\n        }\n    } else {\n        return null\n    }\n}\n\nconst compare_six = (a) => {\n    if (a.length > 0) {\n        if (a[0] > 0) {\n            if (a[1] > 0) {\n                if (a[2] > 0) {\n                    return a[0] + a[1] + a[2]\n                } else {\n                    return a[0] + a[1]\n                }\n            } else {\n                if (a[2] > 0) {\n                    return a[0] + a[2]\n                } else {\n                    return a[0]\n                }\n            }\n        } else {\n            if (a[1] > 0) {\n                if (a[2] > 0) {\n                    return a[1] + a[2]\n                } else {\n                    return a[1]\n                }\n            } else {\n                if (a[2] > 0) {\n                    return a[2]\n                } else {\n                    return null\n                }\n            }\n        }\n    } else {\n        return null\n    }\n}\n\n/*\n  Write a function that takes an array of numbers, and returns the smallest number\n  in the array. Return null if the array is empty or the largest number is zero.\n\n  compare_three([1, 2, 3]) ➞ 1\n  compare_three([1, \"2,3\", 5]) ➞ 1\n  compare_three([1, 2, 3, 5]) ➞ 1\n  compare_three([1, 2, 3, 5, 1]) ➞ 1\n  */\nconst compare_seven = (a) => {\n    if (a.length > 0) {\n        if (a[a"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "is_equal_to_sum_even", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  is_equal_to_sum_even(4) == false\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(8) == true\n  */\nconst is_equal_to_sum_even = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  is_equal_to_sum_even(6) == false\n  is_equal_to_sum_even(9) == false\n  is_equal_to_sum_even(12) == true\n  */\nconst is_equal_to_sum_even_p5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  Example\n  is_equal_to_sum_even(9) == true\n  is_equal_to_sum_even(15) == false\n  */\nconst is_equal_to_sum_even_p5_p1 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers and 1 positive odd number\n  Example\n  is_equal_to_sum_even(15) == false\n  is_equal_to_sum_even(17) == true\n  is_equal_to_sum_even(21) == true\n  */\nconst is_equal_to_sum_even_p5_p1_p5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers and 5 positive even numbers\n  Example\n  is_equal_to_sum_even(17) == true\n  is_equal_to_sum_even(21) == true\n  is_equal_to_sum_even(25) == false\n  */\nconst is_equal_to_sum_even_p5_p5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers and 1 positive even number\n  Example\n  is_equal_to_sum_even(21) == true\n  is_equal_to_sum_even(25) == true\n  is_equal_to_sum_even(29) == false\n  */\nconst is_equal_to_sum_even_p5_p1_p5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers and 5 positive even numbers\n  Example\n  is_equal_to_sum_even(25) == false\n  is_equal_to_sum_even(29) == false\n  is_equal_to_sum_even(33) == true\n  */\nconst is_equal_to_sum_even_p5_p5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers and 3 positive even numbers\n  Example\n  is_equal_to_sum_even(33) == true\n  is_equal_to_sum_even(45) == true\n  is_equal_to_sum_even(55) == false\n  */\nconst is_equal_to_sum_even_p5_p3 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers and 3 positive even numbers\n  Example\n  is_equal_to_sum_even(55) == false\n  is_equal_to_sum_even(65) == false\n  is_equal_to_sum_even(75) == true\n  */\nconst is_equal_to_sum_even_p5_p3 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 0;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers and 1 positive even number and 5 positive odd numbers\n  Example\n  is_equal_to_sum_even(75) == true\n  is_equal_to_sum_even(85) == true\n  is_equal_to_sum_even(95) == false\n  */\nconst is_equal_to_sum_even_p5_p1_p5 = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i += 2) {\n    sum += i;\n  }\n  return sum === n && sum % 2 === 1;\n};\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers and 1 positive even number and 5"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "special_factorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> special_factorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst special_factorial = (n) => {\n    if(n === 0) {\n        return 1;\n    }\n    return n * special_factorial(n - 1) * special_factorial(n - 2);\n}\n\n//TEST\n//>>> special_factorial(4)\n//288\n//>>> special_factorial(8)\n//40320\n//>>> special_factorial(20)\n//3628800\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fix_spaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fix_spaces(\"Example\") == \"Example\"\n  fix_spaces(\"Example 1\") == \"Example_1\"\n  fix_spaces(\" Example 2\") == \"_Example_2\"\n  fix_spaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fix_spaces = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s+/g, '_');\n}\n\nconst fix_quotes = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\"/g, \"'\");\n}\n\nconst fix_colons = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/:/g, '-');\n}\n\nconst fix_commas = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/,/g, '_');\n}\n\nconst fix_semicolons = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/;/g, '_');\n}\n\nconst fix_newlines = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\n/g, '_');\n}\n\nconst fix_equals = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/=/g, '_');\n}\n\nconst fix_and = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/&/g, '_');\n}\n\nconst fix_dash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/-/g, '_');\n}\n\nconst fix_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\//g, '_');\n}\n\nconst fix_colon = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/:/g, '_');\n}\n\nconst fix_period = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\./g, '_');\n}\n\nconst fix_space = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s/g, '_');\n}\n\nconst fix_double_quote = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\"/g, '`');\n}\n\nconst fix_single_quote = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/'/g, '`');\n}\n\nconst fix_dollar = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\$/g, '_');\n}\n\nconst fix_dollar_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\$/g, '_');\n}\n\nconst fix_period_dash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\.\\-/g, '_');\n}\n\nconst fix_period_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\.\\-/g, '_');\n}\n\nconst fix_dash_period = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/-\\./g, '_');\n}\n\nconst fix_dash_period_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/-\\./g, '_');\n}\n\nconst fix_period_period = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\.\\./g, '_');\n}\n\nconst fix_period_period_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\.\\./g, '_');\n}\n\nconst fix_space_dash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s\\-/g, '_');\n}\n\nconst fix_space_dash_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s\\-/g, '_');\n}\n\nconst fix_space_dash_slash_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s\\-/g, '_');\n}\n\nconst fix_space_dash_period = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s\\-/g, '_');\n}\n\nconst fix_space_dash_period_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s\\-/g, '_');\n}\n\nconst fix_space_dash_period_slash_slash = (text) => {\n  if (!text) {\n    return text;\n  }\n  \n  return text.replace(/\\s\\-/g, '_');\n}\n\nconst fix_space_dash_"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "file_name_check", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  file_name_check(\"example.txt\") # => 'Yes'\n  file_name_check(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst file_name_check = (file_name) => {\n  const illegal_chars = /[^a-zA-Z]/;\n  const invalid_name = /[0-9]/;\n  const invalid_ext = /^[^tTxtExeDll]/;\n  const illegal_ext = /[^tTxtExeDll]/;\n\n  if (file_name.length === 0) return 'No';\n  if (file_name.length > 3) return 'No';\n  if (file_name.match(invalid_name)) return 'No';\n  if (file_name.indexOf(\".\") === -1) return 'No';\n  if (file_name.indexOf(\".\") > 0) {\n    if (file_name.charAt(0)!== '.') return 'No';\n    if (file_name.indexOf(\".\") + 1 === file_name.length) return 'No';\n    if (file_name.indexOf(\".\") + 1 === file_name.length - 1) return 'No';\n    if (file_name.indexOf(\".\") + 1 > 1) {\n      if (file_name.charAt(file_name.length - 1)!== '.') return 'No';\n      if (file_name.charAt(file_name.length - 1)!== '.') return 'No';\n    }\n  }\n  if (file_name.indexOf(\".\") + 1 === file_name.length) return 'No';\n  if (file_name.charAt(file_name.length - 1)!== '.') return 'No';\n  if (file_name.charAt(file_name.length - 1)!== '.') return 'No';\n  if (file_name.charAt(file_name.length - 1)!== '.') return 'No';\n  if (file_name.indexOf(\".\") === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") + 1 === 0) return 'No';\n  if (file_name.indexOf(\".\") +"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sum_squares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sum_squares = (lst) => {\n  let result = 0;\n  for (let i of lst) {\n    if (i % 3 === 0) {\n      result += i * i;\n    } else if (i % 4 === 0) {\n      result += i * i * i;\n    }\n  }\n  return result;\n};\n\nlet result = sum_squares([1,2,3]);\n\nconsole.log(`The result is: ${result}`);\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "words_in_sentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence = (sentence) => {\n  const words = sentence.split(' ')\n  const new_words = []\n  words.forEach((word) => {\n    const length = word.length\n    const primes = generatePrime(length)\n    let prime_index = 0\n    while (prime_index < primes.length) {\n      const prime = primes[prime_index]\n      if (prime < length) {\n        const index = prime - 1\n        const new_word = `${word[index]}`\n        new_words.push(new_word)\n      }\n      prime_index++\n    }\n  })\n  return new_words.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_2 = (sentence) => {\n  const words = sentence.split(' ')\n  const new_words = []\n  const prime_length = 3\n  words.forEach((word) => {\n    let index = prime_length\n    while (index < word.length) {\n      const prime = generatePrime(index)\n      if (prime < word.length) {\n        new_words.push(word.substring(index, prime))\n      }\n      index += prime_length\n    }\n    new_words.push(word)\n  })\n  return new_words.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_3 = (sentence) => {\n  const words = sentence.split(' ')\n  const new_words = []\n  words.forEach((word) => {\n    let index = 1\n    while (index < word.length) {\n      const prime = generatePrime(index)\n      if (prime < word.length) {\n        new_words.push(word.substring(index, prime))\n      }\n      index += 1\n    }\n    new_words.push(word)\n  })\n  return new_words.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_4 = (sentence) => {\n  const words = sentence.split(' ')\n  const new_words = []\n  words.forEach((word) => {\n    let index = 1\n    while (index < word.length) {\n      const prime = generatePrime(index)\n      if (prime < word.length) {\n        new_words.push(word.substring(index, prime))\n      }\n      index += 1\n    }\n    new_words.push(word)\n  })\n  return new_words.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst words_in_sentence_5 = (sentence) => {\n  const words = sentence.split(' ')\n  const new_words = []\n  words.forEach((word) => {\n    let index = 1\n    while (index < word.length) {\n      const prime = generatePrime(index)\n      if (prime < word.length) {\n        new_words.push(word.substring(index, prime))\n      }\n      index += 1\n    }\n    new_words.push(word)\n  })\n  return new_words.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (x === 0) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 1) {\n    return true\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 2) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 3) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 4) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 5) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 6) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 7) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 8) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 9) {\n    return false\n  }\n  if (x === parseInt(x, 10) && parseInt(n, 10) === 10) {\n    return false\n  }\n  return (x * parseInt(n, 10) === parseInt(x, 10) * parseInt(n, 10))\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"2/1\"))\nconsole.log(simplify(\"7/10\", \"10/2\"))\nconsole.log(simplify(\"1/7\", \"7/1\"))\nconsole.log(simplify(\"3/8\", \"8/3\"))\nconsole.log(simplify(\"2/9\", \"9/2\"))\nconsole.log(simplify(\"4/9\", \"9/4\"))\nconsole.log(simplify(\"4/5\", \"5/1\"))\nconsole.log(simplify(\"3/5\", \"5/1\"))\nconsole.log(simplify(\"7/5\", \"5/1\"))\nconsole.log(simplify(\"10/2\", \"2/1\"))\nconsole.log(simplify(\"8/3\", \"3/1\"))\nconsole.log(simplify(\"7/5\", \"5/1\"))\nconsole.log(simplify(\"9/4\", \"4/1\"))\nconsole.log(simplify(\"4/5\", \"5/1\"))\nconsole.log(simplify(\"3/5\", \"5/1\"))\nconsole.log(simplify(\"9/2\", \"2/1\"))\nconsole.log(simplify(\"5/1\", \"1/1\"))\nconsole.log(simplify(\"10/1\", \"1/1\"))\nconsole.log(simplify(\"8/1\", \"1/1\"))\nconsole.log(simplify(\"5/1\", \"1/1\"))\nconsole.log(simplify(\"2/1\", \"1/1\"))\nconsole.log(simplify(\"9/1\", \"1/1\"))\nconsole.log(simplify(\"1/1\", \"1/1\"))\nconsole.log(simplify(\"8/1\", \"1/1\"))\nconsole.log(simplify(\"1/1\", \"1/1\"))\nconsole.log(simplify(\"7/1\", \"1/1\"))\nconsole.log(simplify(\"1/1\", \"1/1\"))\nconsole.log(simplify(\"10/1\", \"1/1\"))\nconsole.log(simplify(\"9/1\", \"1/1\"))\nconsole.log(simplify(\"4/1\", \"1/1\"))\nconsole.log(simplify(\"5/1\", \"1/1\"))\nconsole.log(simplify(\"3/1\", \"1/1\"))\nconsole.log(simplify(\"2/1\", \"1/1\"))\nconsole.log(simplify(\"1/1\", \"1/1\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "order_by_points", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> order_by_points([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> order_by_points([]) == []\n  */\nconst order_by_points = (nums) => {\n  return nums.sort((a, b) => {\n    if (a == b) {\n      return 0;\n    }\n\n    const diff = a - b;\n    if (Math.abs(diff) < 1) {\n      return a - b;\n    }\n\n    return diff;\n  });\n};\n\nconst is_even = (num) => {\n  return num % 2 === 0;\n};\n\nconst is_odd = (num) => {\n  return num % 2!== 0;\n};\n\nconst sum_of_digits = (num) => {\n  return num.toString().split('').reduce((sum, digit) => {\n    if (digit.length === 1) {\n      sum += digit;\n    } else if (digit.length === 3) {\n      sum += digit;\n    }\n\n    return sum;\n  }, 0);\n};\n\nconst is_digit = (num) => {\n  return /^[0-9]+$/.test(num);\n};\n\nconst is_number = (num) => {\n  return /^[0-9]+$/.test(num) || num.toString().length === 0;\n};\n\nconst is_not_digit = (num) => {\n  return!is_digit(num);\n};\n\nconst is_digit_only = (num) => {\n  return /^[0-9]+$/.test(num);\n};\n\nconst is_not_number = (num) => {\n  return!is_number(num);\n};\n\nconst is_not_even = (num) => {\n  return is_odd(num) &&!is_even(num);\n};\n\nconst is_not_odd = (num) => {\n  return!is_odd(num) &&!is_even(num);\n};\n\nconst is_between = (num, start, end) => {\n  return num >= start && num <= end;\n};\n\nconst is_not_between = (num, start, end) => {\n  return!is_between(num, start, end);\n};\n\nconst is_not_between_and_not_odd = (num, start, end) => {\n  return!is_between(num, start, end) &&!is_odd(num);\n};\n\nconst is_not_between_and_not_even = (num, start, end) => {\n  return!is_between(num, start, end) &&!is_even(num);\n};\n\nconst is_even_or_odd = (num) => {\n  return is_even(num) || is_odd(num);\n};\n\nconst is_not_even_or_odd = (num) => {\n  return!is_even(num) &&!is_odd(num);\n};\n\nconst is_less_than = (num, value) => {\n  return num < value;\n};\n\nconst is_less_than_or_equal = (num, value) => {\n  return num <= value;\n};\n\nconst is_greater_than = (num, value) => {\n  return num > value;\n};\n\nconst is_greater_than_or_equal = (num, value) => {\n  return num >= value;\n};\n\nconst is_not_greater_than_or_equal = (num, value) => {\n  return num > value;\n};\n\nconst is_not_less_than_or_equal = (num, value) => {\n  return num < value;\n};\n\nconst is_not_less_than = (num, value) => {\n  return num < value;\n};\n\nconst is_not_greater_than = (num, value) => {\n  return num > value;\n};\n\nconst is_not_between_and_not_less_than = (num, start, end) => {\n  return!is_between(num, start, end) &&!is_less_than(num, start);\n};\n\nconst is_not_between_and_not_greater_than = (num, start, end) => {\n  return!is_between(num, start, end) &&!is_greater_than(num, end);\n};\n\nconst is_not_between_and_not_greater_than_and_not_less_than = (num, start, end) => {\n  return!is_between(num, start, end) &&!is_greater_than(num, end) &&!is_less_than(num, start);\n};\n\nconst is_not_between_and_not_greater_than_and_not_less_than = (num, start, end) => {\n  return!is_between(num, start, end) &&!is_greater_than(num, end) &&!is_less_than(num, start);\n};\n\nconst is_between_and_not_greater_than_and_not_less_than = (num, start, end) => {\n  return is_between(num, start, end) &&!is_greater_than(num, end) &&!is_less_than(num, start);\n};\n\nconst is_between_and_not_greater_than_and_not_less_than = (num, start, end) => {\n  return is_between(num, start, end) &&!is_greater_than(num, end) &&!is_less_than(num, start);\n};\n\nconst is_between_and_not_greater_than_and_not_less_than = (num, start, end) => {\n  return is_between(num, start, end) &&!is_greater_than(num, end) &&!is_less_than(num, start);\n};\n\nconst is_not_between_and_not_greater_than_and_not_less_than = (num, start, end) => {\n  return!is_between("}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "special_filter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  special_filter([15, -73, 14, -15]) => 1 \n  special_filter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst special_filter = (nums) => {\n  const first_filter = (num) => {\n    const first_digit = num % 10;\n    return first_digit === 1 || first_digit === 3 || first_digit === 5 || first_digit === 7 || first_digit === 9;\n  }\n\n  const last_filter = (num) => {\n    const last_digit = num % 10;\n    return last_digit === 1 || last_digit === 3 || last_digit === 5 || last_digit === 7 || last_digit === 9;\n  }\n\n  const odd_filter = (num) => {\n    return first_filter(num) && last_filter(num);\n  }\n\n  return nums.filter((num) => odd_filter(num));\n}\n\nconsole.log(special_filter([15, -73, 14, -15, 33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "get_max_triples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst get_max_triples = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if (a[i] + a[j] + a[k] % 3 === 0) {\n          result += 1\n        }\n      }\n    }\n  }\n  return result\n}\n\n/*\n  You are given two positive integers n and m. Create an array of length n. For each i (1 ≤ i ≤ n), the value of a[i] = (i * i) - i + 1.\n      Then, sort the array using the selection sort algorithm.\n      For each i (1 ≤ i ≤ n), if a[i] < m, then swap a[i] and a[i + 1].\n      Return the number of elements of the array that are less than m.\n\n  Example:\n      Input: n = 5, m = 20\n      Output: 4\n      Explanation:\n      a = [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n  */\nconst get_greatest_element = (n, m) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    let min_idx = i\n    for (let j = i + 1; j < n; j++) {\n      if (a[j] < m) {\n        min_idx = j\n      }\n    }\n    if (a[i] < m) {\n      a[i] = a[min_idx]\n      a[min_idx] = a[i]\n      result += 1\n    }\n  }\n  return result\n}\n\n/*\n  You are given a positive integer n. Create an array of length n. For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Then, sort the array using the selection sort algorithm.\n      For each i (1 ≤ i ≤ n), if a[i] < m, then swap a[i] and a[i + 1].\n      Return the number of elements of the array that are less than m.\n\n  Example:\n      Input: n = 5, m = 20\n      Output: 4\n      Explanation:\n      a = [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n  */\nconst get_smallest_element = (n, m) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    let min_idx = i\n    for (let j = i + 1; j < n; j++) {\n      if (a[j] < m) {\n        min_idx = j\n      }\n    }\n    if (a[i] < m) {\n      a[i] = a[min_idx]\n      a[min_idx] = a[i]\n      result += 1\n    }\n  }\n  return result\n}\n\n/*\n  You are given an integer n. Create an array of length n. For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Then, sort the array using the selection sort algorithm.\n      For each i (1 ≤ i ≤ n), if a[i] > m, then swap a[i] and a[i + 1].\n      Return the number of elements of the array that are greater than m.\n\n  Example:\n      Input: n = 5, m = 20\n      Output: 4\n      Explanation:\n      a = [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n      Sorted: [1, 4, 8, 13, 21]\n  */\nconst get_greatest_element_in_range = (n, m) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i * i - i + 1)\n  }\n  let result = 0\n  for (let i = 0; i < n; i++) {\n    let max_idx = i\n    for (let j = i + 1; j < n; j++) {\n      if (a[j] > m) {\n        max_idx = j\n      }\n    }\n    if (a[i] > m) {\n      a[i] = a[max_idx]\n      a[max_idx] = a[i]\n      result += 1\n    }\n  }\n  return result\n}\n\n"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let array = [];\n  if (planet1 === planet2) {\n    return array;\n  }\n  if (planet1 === \"Mercury\" || planet2 === \"Mercury\") {\n    return array;\n  }\n  if (planet1 === \"Earth\" || planet2 === \"Earth\") {\n    return array;\n  }\n  if (planet1 === \"Jupiter\" || planet2 === \"Jupiter\") {\n    return array;\n  }\n  if (planet1 === \"Saturn\" || planet2 === \"Saturn\") {\n    return array;\n  }\n  if (planet1 === \"Uranus\" || planet2 === \"Uranus\") {\n    return array;\n  }\n  if (planet1 === \"Neptune\" || planet2 === \"Neptune\") {\n    return array;\n  }\n  if (planet1 === \"Mars\" || planet2 === \"Mars\") {\n    return array;\n  }\n  if (planet1 === \"Venus\" || planet2 === \"Venus\") {\n    return array;\n  }\n  if (planet1 === \"Pluto\" || planet2 === \"Pluto\") {\n    return array;\n  }\n  let index = 0;\n  let difference = 0;\n  while (index < array.length) {\n    difference = Math.abs(array[index].distance - Math.abs(planet1.distance));\n    if (difference >= Math.abs(planet2.distance)) {\n      break;\n    }\n    index++;\n  }\n  array.splice(index, 0, planet1);\n  array.splice(index + 1, 0, planet2);\n  return array;\n};\n\nlet array = bf(\"Jupiter\", \"Saturn\");\nconsole.log(array);\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorted_list_sum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorted_list_sum = (lst) => {\n    lst = lst.sort((a, b) => a.length - b.length);\n    let s = 0;\n    let result = [];\n    for (let i = 0; i < lst.length; i++) {\n        s += lst[i].length;\n        if (s % 2 === 1) {\n            result.push(lst[i]);\n            s--;\n        }\n    }\n    return result;\n};\nconsole.log(sorted_list_sum([\n    \"aa\",\n    \"a\",\n    \"aaa\",\n    \"ab\",\n    \"abc\",\n    \"abcd\",\n    \"ac\",\n    \"ad\",\n    \"ae\",\n    \"af\",\n    \"ag\",\n    \"ah\",\n    \"ai\",\n    \"aj\",\n    \"ak\",\n    \"al\",\n    \"am\",\n    \"an\",\n    \"ao\",\n    \"ap\",\n    \"aq\",\n    \"ar\",\n    \"as\",\n    \"at\",\n    \"au\",\n    \"av\",\n    \"aw\",\n    \"ax\",\n    \"ay\",\n    \"az\",\n    \"ba\",\n    \"bb\",\n    \"bc\",\n    \"bd\",\n    \"be\",\n    \"bf\",\n    \"bg\",\n    \"bh\",\n    \"bi\",\n    \"bj\",\n    \"bk\",\n    \"bl\",\n    \"bm\",\n    \"bn\",\n    \"bo\",\n    \"bp\",\n    \"bq\",\n    \"br\",\n    \"bs\",\n    \"bt\",\n    \"bu\",\n    \"bv\",\n    \"bw\",\n    \"bx\",\n    \"by\",\n    \"bz\",\n    \"ca\",\n    \"cb\",\n    \"cc\",\n    \"cd\",\n    \"ce\",\n    \"cf\",\n    \"cg\",\n    \"ch\",\n    \"ci\",\n    \"cj\",\n    \"ck\",\n    \"cl\",\n    \"cm\",\n    \"cn\",\n    \"co\",\n    \"cp\",\n    \"cq\",\n    \"cr\",\n    \"cs\",\n    \"ct\",\n    \"cu\",\n    \"cv\",\n    \"cw\",\n    \"cx\",\n    \"cy\",\n    \"cz\",\n    \"da\",\n    \"db\",\n    \"dc\",\n    \"dd\",\n    \"de\",\n    \"df\",\n    \"dg\",\n    \"dh\",\n    \"di\",\n    \"dj\",\n    \"dk\",\n    \"dl\",\n    \"dm\",\n    \"dn\",\n    \"do\",\n    \"dp\",\n    \"dq\",\n    \"dr\",\n    \"ds\",\n    \"dt\",\n    \"du\",\n    \"dv\",\n    \"dw\",\n    \"dx\",\n    \"dy\",\n    \"dz\",\n    \"ea\",\n    \"eb\",\n    \"ec\",\n    \"ed\",\n    \"ee\",\n    \"ef\",\n    \"eg\",\n    \"eh\",\n    \"ei\",\n    \"ej\",\n    \"ek\",\n    \"el\",\n    \"em\",\n    \"en\",\n    \"eo\",\n    \"ep\",\n    \"eq\",\n    \"er\",\n    \"es\",\n    \"et\",\n    \"eu\",\n    \"ev\",\n    \"ew\",\n    \"ex\",\n    \"ey\",\n    \"ez\",\n    \"fa\",\n    \"fb\",\n    \"fc\",\n    \"fd\",\n    \"fe\",\n    \"ff\",\n    \"fg\",\n    \"fh\",\n    \"fi\",\n    \"fj\",\n    \"fk\",\n    \"fl\",\n    \"fm\",\n    \"fn\",\n    \"fo\",\n    \"fp\",\n    \"fq\",\n    \"fr\",\n    \"fs\",\n    \"ft\",\n    \"fu\",\n    \"fv\",\n    \"fw\",\n    \"fx\",\n    \"fy\",\n    \"fz\",\n    \"ga\",\n    \"gb\",\n    \"gc\",\n    \"gd\",\n    \"ge\",\n    \"gf\",\n    \"gg\",\n    \"gh\",\n    \"gi\",\n    \"gj\",\n    \"gk\",\n    \"gl\",\n    \"gm\",\n    \"gn\",\n    \"go\",\n    \"gp\",\n    \"gq\",\n    \"gr\",\n    \"gs\",\n    \"gt\",\n    \"gu\",\n    \"gv\",\n    \"gw\",\n    \"gx\",\n    \"gy\",\n    \"gz\",\n    \"ha\",\n    \"hb\",\n    \"hc\",\n    \"hd\",\n    \"he\",\n    \"hf\",\n    \"hg\",\n    \"hh\",\n    \"hi\",\n    \"hj\",\n    \"hk\",\n    \"hl\",\n    \"hm\",\n    \"hn\",\n    \"ho\",\n    \"hp\",\n    \"hq\",\n    \"hr\",\n    \"hs\",\n    \"ht\",\n    \"hu\",\n    \"hv\",\n    \"hw\",\n    \"hx\",\n    \"hy\",\n    \"hz\",\n    \"ia\",\n    \"ib\",\n    \"ic\",\n    \"id\",\n    \"ie\",\n    \"if\",\n    \"ig\",\n    \"ih\",\n    \"ii\",\n    \"ij\",\n    \"ik\",\n    \"il\",\n    \"im\",\n    \"in\",\n    \"io\",\n    \"ip\",\n    \"iq\",\n    \"ir\",\n    \"is\",\n    \"it\",\n    \"iu\",\n    \"iv\","}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "x_or_y", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for x_or_y(7, 34, 12) == 34\n  for x_or_y(15, 8, 5) == 5\n  \n  */\nconst x_or_y = (n, x, y) => {\n    return (n % 2 === 0)? x : y;\n};\n\nconst get_prime_numbers = (n) => {\n    let prime_numbers = [];\n    let i = 1;\n    while (i <= n) {\n        if (prime_numbers.indexOf(i) === -1) {\n            prime_numbers.push(i);\n        }\n        i++;\n    }\n    return prime_numbers;\n};\n\nconst get_primes_in_a_range = (min, max) => {\n    let primes = [];\n    let i = min;\n    while (i <= max) {\n        if (primes.indexOf(i) === -1) {\n            primes.push(i);\n        }\n        i++;\n    }\n    return primes;\n};\n\nconst prime_numbers_in_range = (min, max) => {\n    let prime_numbers = [];\n    let i = min;\n    while (i <= max) {\n        if (prime_numbers.indexOf(i) === -1) {\n            prime_numbers.push(i);\n        }\n        i++;\n    }\n    return prime_numbers;\n};\n\nconst prime_numbers_in_range_of_primes = (min, max, primes) => {\n    let prime_numbers = [];\n    let i = min;\n    while (i <= max) {\n        if (prime_numbers.indexOf(i) === -1) {\n            prime_numbers.push(i);\n        }\n        i++;\n    }\n    return prime_numbers;\n};\n\nconst get_primes_in_a_range_of_numbers = (min, max, n) => {\n    let prime_numbers = [];\n    let i = min;\n    while (i <= max) {\n        if (prime_numbers.indexOf(i) === -1) {\n            prime_numbers.push(i);\n        }\n        i++;\n    }\n    return prime_numbers;\n};\n\nconst get_primes_in_a_range_of_numbers_in_order = (min, max, n, prime_numbers) => {\n    let i = min;\n    while (i <= max) {\n        if (prime_numbers.indexOf(i) === -1) {\n            prime_numbers.push(i);\n        }\n        i++;\n    }\n    return prime_numbers;\n};\n\nconst is_prime = (n) => {\n    let i = 2;\n    while (i <= n) {\n        if (n % i === 0) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst is_prime_of_n = (n, primes) => {\n    let i = 2;\n    while (i <= n) {\n        if (primes.indexOf(i) === -1) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst is_prime_in_primes = (n, primes) => {\n    let i = 2;\n    while (i <= n) {\n        if (primes.indexOf(i) === -1) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst is_prime_in_range_of_primes = (n, min, max, primes) => {\n    let i = min;\n    while (i <= max) {\n        if (primes.indexOf(i) === -1) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst is_prime_in_range_of_primes_of_numbers = (n, min, max, prime_numbers) => {\n    let i = min;\n    while (i <= max) {\n        if (prime_numbers.indexOf(i) === -1) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst is_prime_in_range_of_primes_of_numbers_in_order = (n, min, max, prime_numbers) => {\n    let i = min;\n    while (i <= max) {\n        if (prime_numbers.indexOf(i) === -1) {\n            return false;\n        }\n        i++;\n    }\n    return true;\n};\n\nconst sum_of_primes = (max) => {\n    let sum = 0;\n    for (let i = 1; i <= max; i++) {\n        if (is_prime(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n};\n\nconst sum_of_primes_in_range = (min, max) => {\n    let sum = 0;\n    for (let i = min; i <= max; i++) {\n        if (is_prime(i)) {\n            sum += i;\n        }\n    }\n    return sum;\n};\n\nconst sum_of_primes_in_range_of_numbers = (min, max, n) => {\n    let sum = 0;\n    for (let i = min; i <= max; i++) {\n        if (is_prime_in_range_of_numbers(n, i, max)) {\n            sum += i;\n        }\n    }\n    return sum;\n};\n\nconst sum_of_primes_in_range_of_numbers_in_order = (min, max, n, prime_numbers) => {\n    let sum = 0;\n    for (let i = min; i <= max; i++) {\n        if (is_prime_in_range_of_numbers_in_order(n, i, max, prime_numbers)) {\n            sum += i;\n        }\n    }\n    return sum;\n};\n\nconst sum_of_primes_in_range_of_primes = (min"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "double_the_difference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference = (lst) => {\n  if (lst.length === 0) return 0;\n  const diff = lst.reduce((acc, num) => {\n    const n = Math.abs(num);\n    if (n % 2) {\n      return acc + n;\n    } else {\n      return acc;\n    }\n  }, 0);\n  return diff;\n};\n\n/*\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference2 = (lst) => {\n  if (lst.length === 0) return 0;\n  let diff = 0;\n  for (const x of lst) {\n    diff += Math.abs(x);\n  }\n  return diff;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers in\n  the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference3 = (lst) => {\n  if (lst.length === 0) return 0;\n  let diff = 0;\n  for (const x of lst) {\n    diff += Math.pow(Math.abs(x), 2);\n  }\n  return diff;\n};\n\n/*\n  Given a list of numbers, return the sum of the squares of the numbers in\n  the list that are odd. Ignore numbers that are negative or not integers.\n  double_the_difference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  double_the_difference([-1, -2, 0]) == 0\n  double_the_difference([9, -2]) == 81\n  double_the_difference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst double_the_difference4 = (lst) => {\n  if (lst.length === 0) return 0;\n  let diff = 0;\n  for (const x of lst) {\n    diff += x * x;\n  }\n  return diff;\n};\n\nexport default {\n  double_the_difference,\n  double_the_difference2,\n  double_the_difference3,\n  double_the_difference4,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const score = game.map(score => score - guess[score])\n  const diffs = score.map(diff => Math.abs(diff))\n  return diffs\n}\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongest_extension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongest_extension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongest_extension = (class_name, extensions) => {\n  let extension_names = extensions.map(ext => ext.toLowerCase())\n  let extension_names_unique = extension_names.filter(ext => extension_names.indexOf(ext) === extension_names.lastIndexOf(ext))\n  let extension_names_sorted = extension_names_unique.sort(compare)\n  let extension_names_strength = extension_names_unique.map(ext => ext.length - ext.replace(/[^A-Z]/g, '').length)\n  let strongest_extension_name = extension_names_sorted[0]\n  return `${class_name}.${strongest_extension_name}`\n}\n\n/*\n  Function: compare\n  Compare two strings.\n  */\nconst compare = (str1, str2) => {\n  return str1.length - str2.length\n}\n\n/*\n  Function: get_extension\n  Returns the extension part of the given path.\n  */\nconst get_extension = (path) => {\n  return path.substring(path.lastIndexOf('.') + 1)\n}\n\n/*\n  Function: get_class\n  Returns the class name of the given path.\n  */\nconst get_class = (path) => {\n  return path.substring(0, path.lastIndexOf('.'))\n}\n\n/*\n  Function: get_package\n  Returns the package of the given path.\n  */\nconst get_package = (path) => {\n  return path.substring(0, path.lastIndexOf('.') - 1)\n}\n\n/*\n  Function: get_base_package\n  Returns the base package of the given path.\n  */\nconst get_base_package = (path) => {\n  return path.substring(0, path.lastIndexOf('.') - 2)\n}\n\n/*\n  Function: is_extension\n  Checks if the given path is an extension.\n  */\nconst is_extension = (path) => {\n  return path.indexOf('.') > -1\n}\n\n/*\n  Function: is_class\n  Checks if the given path is a class.\n  */\nconst is_class = (path) => {\n  return path.indexOf('.') == -1\n}\n\n/*\n  Function: is_package\n  Checks if the given path is a package.\n  */\nconst is_package = (path) => {\n  return path.indexOf('.') > -1\n}\n\n/*\n  Function: is_base_package\n  Checks if the given path is a base package.\n  */\nconst is_base_package = (path) => {\n  return path.indexOf('.') == -2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpattern_check", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpattern_check(\"abcd\",\"abd\") => false\n  cycpattern_check(\"hello\",\"ell\") => true\n  cycpattern_check(\"whassup\",\"psus\") => false\n  cycpattern_check(\"abab\",\"baa\") => true\n  cycpattern_check(\"efef\",\"eeff\") => false\n  cycpattern_check(\"himenss\",\"simen\") => true\n  */\nconst cycpattern_check = (a, b) => {\n    //const string = a.toLowerCase()\n    //const b = b.toLowerCase()\n    \n    let a_length = a.length\n    let b_length = b.length\n    let i = 0\n    let j = 0\n    \n    while (i < a_length && j < b_length) {\n        if (a.charAt(i) === b.charAt(j)) {\n            i++\n            j++\n        } else if (a.charAt(i) === a.charAt(i+1)) {\n            i++\n            j = 0\n        } else if (a.charAt(i) === a.charAt(i-1)) {\n            i--\n            j = b_length-1\n        } else if (a.charAt(i) === b.charAt(j-1)) {\n            j--\n            i = 0\n        } else if (a.charAt(i) === b.charAt(j+1)) {\n            j++\n            i = a_length-1\n        } else {\n            return false\n        }\n    }\n    return true\n}\n\n/*\nfunction is_substring_of_cyclic(a,b) {\n    var a_length = a.length\n    var b_length = b.length\n    var i = 0\n    var j = 0\n    var result = false\n    \n    while (i < a_length && j < b_length) {\n        if (a.charAt(i) === b.charAt(j)) {\n            i++\n            j++\n        } else if (a.charAt(i) === a.charAt(i+1)) {\n            i++\n            j = 0\n        } else if (a.charAt(i) === a.charAt(i-1)) {\n            i--\n            j = b_length-1\n        } else if (a.charAt(i) === b.charAt(j-1)) {\n            j--\n            i = 0\n        } else if (a.charAt(i) === b.charAt(j+1)) {\n            j++\n            i = a_length-1\n        } else {\n            return false\n        }\n    }\n    return result\n}\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "even_odd_count", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      even_odd_count(-12) ==> (1, 1)\n      even_odd_count(123) ==> (1, 2)\n  */\nconst even_odd_count = (num) => {\n  let count = 0\n  while (num > 0) {\n    if (num % 2 === 0) {\n      count += 1\n    } else {\n      count -= 1\n    }\n    num = Math.floor(num / 2)\n  }\n  return (count, num)\n}\n\nexport default even_odd_count\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "int_to_mini_roman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> int_to_mini_roman(19) == 'xix'\n  >>> int_to_mini_roman(152) == 'clii'\n  >>> int_to_mini_roman(426) == 'cdxxvi'\n  */\nconst int_to_mini_roman = (number) => {\n  if (number === 0) return '0'\n  let num = Math.floor(number)\n  let result = []\n  for (let i = 0; i < num; i++) result.push('i')\n  for (let i = 2; i <= num; i++) result.push(`${num - i}i`)\n  return result.join('')\n}\n\n/*\n  Given a roman numeral, return the number it represents as a positive integer.\n  For example:\n  Given xii, return 12.\n  Given cii, return 4.\n  Given xvii, return 26.\n  Given clii, return 5.\n  Given d, return 1.\n  Given v, return 5.\n  Restrictions: 1 <= input <= 3999.\n*/\nconst mini_to_int = (number) => {\n  let result = [1, 5, 10, 50, 100, 500, 1000, 5000, 10000, 50000, 100000, 500000, 1000000, 500000, 10000000, 5000000, 100000000, 50000000, 100000000, 500000000, 1000000000]\n  for (let i = 1; i < number; i++) result.unshift(result.pop() * 10)\n  return result.indexOf(number) + 1\n}\n\nexport { int_to_roman, mini_to_int }\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "right_angle_triangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  right_angle_triangle(3, 4, 5) == true\n  right_angle_triangle(1, 2, 3) == false\n  */\nconst right_angle_triangle = (a, b, c) => {\n  if (a + b > c) {\n    return false\n  }\n  return (Math.abs(Math.sin(Math.acos(1 - (c - a) / b))) === 0)\n}\n\nexport {\n  right_angle_triangle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "find_max", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  find_max([\"name\", \"of\", \"string\"]) === \"string\"\n  find_max([\"name\", \"enam\", \"game\"]) === \"enam\"\n  find_max([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst find_max = (words) => {\n  const map = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    const count = map.get(word);\n    map.set(word, count? count + 1 : 1);\n  }\n\n  let max = 0;\n  let max_index = 0;\n  for (let [key, value] of map) {\n    if (value > max) {\n      max = value;\n      max_index = words.indexOf(key);\n    }\n  }\n\n  return max_index;\n};\n\nconsole.log(find_max([\n  \"name\",\n  \"of\",\n  \"string\",\n  \"enam\",\n  \"game\",\n  \"aaaaaaa\",\n  \"bb\",\n  \"cc\"\n]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    if (number < need) {\n        return [remaining, 0];\n    }\n    return [number, need - number];\n};\n\nconst number = parseInt(process.argv[2]);\nconst need = parseInt(process.argv[3]);\nconst remaining = parseInt(process.argv[4]);\n\nconsole.log(eat(number, need, remaining));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "do_algebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst do_algebra = (operator, operand) => {\n    // if the operand list has more than one element,\n    // it is a basic algebra expression\n    if (operand.length > 1) {\n        return operator[operand[0]](operand.slice(1));\n    } else {\n        // if the operand list has only one element,\n        // it is a list of integers.\n        // this case is handled by the `eval` function\n        return eval(operator + '(' + operand + ')');\n    }\n}\n\n// evaluate the expression\nconst eval = (operand) => {\n    // if the expression is a basic algebra expression\n    if (typeof operand ==='string' && /[+-*/\\^\\(]/.test(operand)) {\n        // parse the basic algebra expression into an array\n        const op = operand.split('+');\n        const op1 = op[0].split('-');\n        const op2 = op[1].split('*');\n        const op3 = op[2].split('/');\n        const op4 = op[3].split('**');\n\n        // if the expression is `2+3*4-5`,\n        // the array will be [2, 3, 4, 5]\n        const operands = [...op1,...op2,...op3,...op4];\n\n        // if the expression is `2+3*4-5`,\n        // the `operands` array will be [2, 3, 4, 5]\n        // so the result is 9\n        return do_algebra(operands, operands);\n    } else {\n        // if the expression is a list of integers,\n        // the array will be [2, 3, 4, 5]\n        const operands = operand;\n\n        // the result is 2 + 3 * 4 - 5\n        return do_algebra(operands, operands);\n    }\n}\n\n// the main function\nconst main = () => {\n    let expr = '';\n    let op = '+';\n    let operands = [];\n    let result = eval(expr);\n\n    console.log(result);\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const {length} = s\n  let i = length - 1\n  let j = 0\n  while (i >= 0) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      s[j] = s[i]\n      i--\n    } else {\n      s[j] = s[i].toUpperCase()\n      s[i] = s[i].toLowerCase()\n      i--\n    }\n    j++\n  }\n  return s.slice(0, j + 1).join('')\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\nconsole.log(solve(\"abcd\"))\nconsole.log(solve(\"ABCD\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "string_to_md5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_md5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst string_to_md5 = (text) => {\n  const m = md5(text)\n  return m.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == '2c1cffd4a8d0e26b0d8f0a9b1e6c8a5c0d10a7a7'\n  */\nconst string_to_sha256 = (text) => {\n  const m = sha256(text)\n  return m.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '7a08b8b0fc54c7c7b7d1a2c5f5afb2c7d1b5a7a8a0dd4e5d08e8e3e'\n  */\nconst string_to_sha512 = (text) => {\n  const m = sha512(text)\n  return m.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '7a08b8b0fc54c7c7b7d1a2c5f5afb2c7d1b5a7a8a0dd4e5d08e8e3e'\n  */\nconst string_to_sha1 = (text) => {\n  const m = sha1(text)\n  return m.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha1('Hello world') == 'a0b0c3d4f7a7c4d5e6f7b8c9d0e'\n  */\nconst string_to_sha1_hex = (text) => {\n  const m = sha1(text)\n  return m.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha256('Hello world') == '2c1cffd4a8d0e26b0d8f0a9b1e6c8a5c0d10a7a7'\n  */\nconst string_to_sha256_hex = (text) => {\n  const m = sha256(text)\n  return m.digest('hex')\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> string_to_sha512('Hello world') == '7a08b8b0fc54c7c7b7d1a2c5f5afb2c7d1b5a7a8a0dd4e5d08e8e3e'\n  */\nconst string_to_sha512_hex = (text) => {\n  const m = sha512(text)\n  return m.digest('hex')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generate_integers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generate_integers(2, 8) => [2, 4, 6, 8]\n  generate_integers(8, 2) => [2, 4, 6, 8]\n  generate_integers(10, 14) => []\n  */\nconst generate_integers = (a, b) => {\n  const d = b - a + 1;\n  const result = new Array(d);\n\n  for (let i = 0; i < d; i++) {\n    result[i] = a + i;\n  }\n\n  return result;\n};\n\nconst generate_odd_integers = (a, b) => {\n  const d = b - a + 1;\n  const result = new Array(d);\n\n  for (let i = 0; i < d; i++) {\n    result[i] = a + i + 1;\n  }\n\n  return result;\n};\n\nmodule.exports = {\n  generate_integers,\n  generate_odd_integers\n};\n<|endoftext|>"}
