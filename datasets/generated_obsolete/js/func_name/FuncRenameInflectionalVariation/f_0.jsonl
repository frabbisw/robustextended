{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  let minDist = Number.MAX_VALUE\n   , closest = null\n   , index = null\n   , min = null\n   , max = null\n\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < minDist) {\n        closest = [numbers[i], numbers[j]]\n        minDist = Math.abs(numbers[i] - numbers[j])\n        index = [i, j]\n      } else if (Math.abs(numbers[i] - numbers[j]) === minDist) {\n        if (numbers[i] > numbers[j]) {\n          max = [numbers[i], numbers[j]]\n        } else {\n          min = [numbers[i], numbers[j]]\n        }\n      }\n    }\n  }\n\n  if (closest === null) {\n    return false\n  }\n\n  let diff = Math.abs(closest[0] - closest[1])\n  if (min === null) {\n    return diff < threshold\n  } else if (max === null) {\n    return diff > threshold\n  } else {\n    return Math.abs(max[0] - min[0]) < threshold &&\n      Math.abs(max[1] - min[1]) < threshold\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  const arr = paren_string.split('(');\n  const output = [];\n  const stack = [];\n  let prev = false;\n\n  for (let i = 0; i < arr.length; i++) {\n    const next = arr[i];\n    if (next === '(') {\n      stack.push(next);\n    } else if (next === ')') {\n      const top = stack.pop();\n      if (top === '(') {\n        output.push(arr[i]);\n      } else {\n        output.push(top);\n        output.push(arr[i]);\n      }\n    } else {\n      if (stack.length > 0) {\n        output.push(stack.pop());\n      }\n      output.push(arr[i]);\n    }\n  }\n\n  return output;\n};\n\n// Tests\nconsole.log(separateParenGroup('()()'));\nconsole.log(separateParenGroup('(()())'));\nconsole.log(separateParenGroup('(()()(()))'));\nconsole.log(separateParenGroup('(())'));\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n  let numberAsInt = Math.floor(number);\n  let numberAsDecimal = number - numberAsInt;\n\n  let decimals = Math.floor(numberAsDecimal * 100);\n  let int = numberAsInt - decimals;\n\n  return int;\n};\n\n/**\n  Return the truncated version of the number.\n\n  @param {number} number\n  @returns {string}\n  */\nconst truncate = (number) => {\n  let decimals = truncateNumber(number);\n\n  if (decimals === 0) {\n    return number + '.';\n  } else if (decimals === 1) {\n    return number + '.' + '0';\n  } else {\n    return number + '.' + decimals;\n  }\n};\n\nexport default truncate;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n  let balance = 0\n  const isBelowZero = (balance) => {\n    return balance < 0\n  }\n\n  for (let i = 0; i < operations.length; i++) {\n    balance = operations[i]\n    if (isBelowZero(balance)) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport { belowZeros }\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifferences = numbers.map( (number) => Math.abs(number - mean) );\n  return Math.mean(absoluteDifferences);\n}\n\n// mean absolute deviation with mean as center\nconst madd = (numbers) => {\n  const mean = mean(numbers);\n  const absoluteDifferences = numbers.map( (number) => Math.abs(number - mean) );\n  return Math.mean(absoluteDifferences);\n}\n\n// Mean Absolute Deviation for list\n// http://en.wikipedia.org/wiki/Mean_absolute_deviation\nconst mad = (numbers) => {\n  const absoluteDifferences = numbers.map( (number) => Math.abs(number - mean(numbers)) );\n  return Math.mean(absoluteDifferences);\n}\n\nconst mad2 = (numbers) => {\n  const absoluteDifferences = numbers.map( (number) => Math.abs(number - mean(numbers)) );\n  return Math.pow(\n    Math.mean(absoluteDifferences),\n    2\n  );\n}\n\nconst mean = (numbers) => {\n  const sum = numbers.reduce( (sum, element) => sum + element, 0);\n  return sum / numbers.length;\n}\n\nconst median = (numbers) => {\n  // http://en.wikipedia.org/wiki/Median\n  return (numbers.length - 1) / 2;\n}\n\nconst mode = (numbers) => {\n  // http://en.wikipedia.org/wiki/Mode_%28statistics%29\n  // https://www.geeksforgeeks.org/mode-in-python/\n  const max = (numbers) => {\n    let max = -Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n      }\n    }\n    return max;\n  }\n\n  const maxCount = (numbers) => {\n    let maxCount = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] === max(numbers)) {\n        maxCount++;\n      }\n    }\n    return maxCount;\n  }\n\n  return max(numbers).toString();\n}\n\nconst mode2 = (numbers) => {\n  // http://stackoverflow.com/questions/13582401/find-mode-of-an-array-in-javascript\n  let max = -Infinity;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      maxCount = 1;\n    } else if (numbers[i] === max) {\n      maxCount++;\n    }\n  }\n  return max.toString();\n}\n\nconst mode3 = (numbers) => {\n  // http://stackoverflow.com/questions/13582401/find-mode-of-an-array-in-javascript\n  const max = (numbers) => {\n    let max = -Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n      }\n    }\n    return max;\n  }\n  return max(numbers).toString();\n}\n\nconst mode4 = (numbers) => {\n  // http://stackoverflow.com/questions/13582401/find-mode-of-an-array-in-javascript\n  const max = (numbers) => {\n    let max = -Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n      }\n    }\n    return max;\n  }\n  const maxCount = (numbers) => {\n    let maxCount = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] === max(numbers)) {\n        maxCount++;\n      }\n    }\n    return maxCount;\n  }\n  return max(numbers).toString();\n}\n\nconst mode5 = (numbers) => {\n  // http://stackoverflow.com/questions/13582401/find-mode-of-an-array-in-javascript\n  const max = (numbers) => {\n    let max = -Infinity;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] > max) {\n        max = numbers[i];\n      }\n    }\n    return max;\n  }\n  const maxCount = (numbers) => {\n    let maxCount = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] === max(numbers)) {\n        maxCount++;\n      }\n    }\n    return maxCount;\n  }\n  const mode = (numbers) => {\n    let maxCount = 0;\n    for (let i = 0; i < numbers.length; i++) {\n      if (numbers[i] === max(numbers)) {\n        maxCount++;\n      }\n    }\n    return maxCount;\n  }\n  return max(numbers).toString();\n}\n\nmodule.exports = {\n  mean,\n  madd,\n  mad,\n  mad2,\n  median,\n  mode,\n  mode2,\n  mode3,\n  mode4,\n  mode5\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n    // If there is only one number in the list, return an empty list\n    if (numbers.length === 1) return [];\n\n    // Create an empty array to store the output\n    const output = [];\n\n    // Create a temporary variable to hold the current number\n    let currentNumber;\n\n    // Iterate over every two adjacent elements\n    for (let i = 0; i < numbers.length - 1; i += 2) {\n        // Add the current number to the output\n        output.push(numbers[i]);\n\n        // Add the delimeter to the output\n        output.push(delimeter);\n\n        // If there are still more elements, add the current number to the output\n        if (i + 1 < numbers.length) {\n            // Add the current number to the output\n            output.push(numbers[i + 1]);\n        }\n    }\n\n    // Add the last element to the output\n    output.push(numbers[numbers.length - 1]);\n\n    return output;\n};\n\n// Test\n\nlet result = intersperse([1, 2, 3], 4);\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  let current_level = 1,\n    start_index = 0,\n    curr_level = 0;\n  let result = [];\n  let current_level_result = [];\n  let str_to_search = paren_string.replace(/\\s/g, '');\n  let str_length = str_to_search.length;\n  while (start_index < str_length) {\n    let search_result = str_to_search.indexOf(str_to_search[start_index], start_index + 1);\n    if (search_result === -1) {\n      break;\n    }\n    let open_paren = paren_string[search_result - 1];\n    let close_paren = paren_string[search_result + 1];\n    if (open_paren === '(' && close_paren === ')') {\n      current_level++;\n    }\n    if (open_paren === ')' && close_paren === ')') {\n      curr_level--;\n    }\n    if (curr_level === current_level) {\n      if (open_paren === '(' && close_paren === ')') {\n        current_level_result.push(str_to_search.substring(start_index, search_result));\n      }\n    }\n    start_index = search_result + 1;\n  }\n  if (current_level_result.length > 0) {\n    result.push(current_level_result);\n  }\n  return result;\n};\n\n// https://www.nist.gov/dads/HTML/index.html#subset-4\nconst parseSubset = (input) => {\n  let groups = input.split(' ');\n  let output = [];\n  for (let group_id in groups) {\n    let sub_groups = parseNestParens(groups[group_id]);\n    if (sub_groups.length === 0) {\n      output.push(group_id);\n    } else {\n      output = output.concat(sub_groups);\n    }\n  }\n  return output;\n};\n\n// https://www.nist.gov/dads/HTML/index.html#subset-5\nconst parseSubsets = (input) => {\n  let groups = input.split(' ');\n  let output = [];\n  for (let group_id in groups) {\n    let subsets = parseNestParens(groups[group_id]);\n    if (subsets.length === 0) {\n      output.push(group_id);\n    } else {\n      output = output.concat(subsets);\n    }\n  }\n  return output;\n};\n\nconst main = () => {\n  let groups = parseNestParens('(()()) ((())) () ((())()())');\n  let subsets = parseSubset('(()()) ((())) () ((())()())');\n  let subsets_list = parseSubsets('(()()) ((())) () ((())()())');\n  console.log(groups);\n  console.log(subsets);\n  console.log(subsets_list);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  const newStrings = [];\n  strings.forEach((string) => {\n    if (string.indexOf(substring)!== -1) {\n      newStrings.push(string);\n    }\n  });\n  return newStrings;\n};\n\n/*\n  Given a string, returns a new string with all the lowercase letters replaced with upper case\n  >>> upperCaseAllLetters('')\n  ''\n  >>> upperCaseAllLetters('hello world')\n  'HELLO WORLD'\n  */\nconst upperCaseAllLetters = (string) => {\n  const newString = string.replace(/[a-z]/g, (match) => match.toUpperCase());\n  return newString;\n};\n\n/*\n  Given a string, returns a new string with all the uppercase letters replaced with lower case\n  >>> lowerCaseAllLetters('')\n  ''\n  >>> lowerCaseAllLetters('HELLO WORLD')\n  'hello world'\n  */\nconst lowerCaseAllLetters = (string) => {\n  const newString = string.replace(/[A-Z]/g, (match) => match.toLowerCase());\n  return newString;\n};\n\n/*\n  Given a string, returns a new string with all the vowels replaced with consonants\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>> replaceVowels('hello world')\n  'hello world'\n  >>>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n};\n\nexport default sumProducts;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let lastIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      lastIndex = i;\n      max = numbers[i];\n    }\n  }\n  return numbers.slice(lastIndex);\n};\n\nexport default rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const max = string.length;\n  const maxPostfix = max;\n  const maxPrefix = 0;\n  const postfix = [];\n  const prefix = [];\n  for (let i = 0; i < max; i++) {\n    let c = string[i];\n    if (isPalindrome(c)) {\n      postfix.push(c);\n    } else {\n      break;\n    }\n  }\n  for (let i = 0; i < max; i++) {\n    let c = string[i];\n    if (isPalindrome(c)) {\n      prefix.push(c);\n    } else {\n      break;\n    }\n  }\n  let result = '';\n  let resultPrefix = '';\n  let resultPostfix = '';\n  while (postfix.length > 0) {\n    let postfixStart = postfix[0];\n    let postfixEnd = postfix[postfix.length - 1];\n    let postfixLength = postfixEnd - postfixStart;\n    let postfixPrefix = string.slice(0, postfixStart);\n    let postfixSuffix = string.slice(postfixEnd);\n    postfixPrefix = postfixPrefix.split('').reverse().join('');\n    postfixSuffix = postfixSuffix.split('').join('');\n    result = postfixPrefix + result + postfixSuffix;\n    resultPrefix = postfixPrefix + resultPrefix;\n    resultPostfix = postfixSuffix + resultPostfix;\n    postfix.shift();\n  }\n  while (prefix.length > 0) {\n    let prefixStart = prefix[0];\n    let prefixEnd = prefix[prefix.length - 1];\n    let prefixLength = prefixEnd - prefixStart;\n    let prefixPrefix = string.slice(0, prefixStart);\n    let prefixSuffix = string.slice(prefixEnd);\n    prefixPrefix = prefixPrefix.split('').join('');\n    prefixSuffix = prefixSuffix.split('').join('');\n    resultPrefix = prefixPrefix + resultPrefix;\n    resultPostfix = prefixSuffix + resultPostfix;\n    prefix.shift();\n  }\n  return result;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string) => {\n  const max = string.length;\n  let i = 0;\n  let j = max - 1;\n  while (i < j) {\n    if (string[i]!= string[j]) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n}\n\n/* Test if a string is a palindrome */\nconst isPalindrome = (string)"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if(a === b) return a;\n  if(a.length!== b.length) return a;\n  let result = [];\n  for(let i = 0; i < a.length; i++){\n    result.push(a[i] ^ b[i]);\n  }\n  return result.join('');\n}\n\nmodule.exports = stringXor;\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  let len = 0\n  for (let str of strings) {\n    if (str.length > len) {\n      len = str.length\n    }\n  }\n  if (len === 0) {\n    return null\n  }\n  return strings[0]\n}\n\n/*\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'b'])\n  'a'\n  >>> longer(['a', 'b', 'c', 'd'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc', 'ddd'])\n  'bb'\n  >>> longer(['a', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  >>> longer(['aa', 'bb', 'ccc', 'ddd', 'eee'])\n  'eee'\n  >>> longer(['a', 'b', 'cc', 'dd'])\n  'cc'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee'])\n  'ee'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff'])\n  'ee'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg'])\n  'ee'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh'])\n  'fff'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii'])\n  'fff'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk'])\n  'fff'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll'])\n  'kkkk'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm'])\n  'kkkk'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn'])\n  'kkkk'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo'])\n  'kkkk'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp'])\n  'kkkk'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq', 'rrrr'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq', 'rrrr','ssss'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq', 'rrrr','ssss', 'tttt'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq', 'rrrr','ssss', 'tttt', 'uuuu'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq', 'rrrr','ssss', 'tttt', 'uuuu', 'vvvv'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq', 'rrrr','ssss', 'tttt', 'uuuu', 'vvvv', 'xxxx'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nnnn', 'oooo', 'pppp', 'qqqq', 'rrrr','ssss', 'tttt', 'uuuu', 'vvvv', 'xxxx', 'yyyy'])\n  'qqqq'\n  >>> longer(['a', 'b', 'cc', 'dd', 'ee', 'fff', 'ggg', 'hhh', 'iiii', 'kkkk', 'llll','mmmm', 'nn"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  if (a === 0) {\n    return b;\n  }\n  if (b === 0) {\n    return a;\n  }\n  return a > b? greaterCommonDivisors(a % b, b) : greaterCommonDivisors(b % a, a);\n};\n\n/**\n * Find the greatest common divisor of two integers a and b\n  >>> gcd(4, 8)\n  4\n  >>> gcd(30, 60)\n  30\n  */\nconst gcd = (a, b) => {\n  return (b === 0)? a : gcd(b, a % b);\n};\n\n/**\n * Find the least common multiple of two integers a and b\n  >>> lcm(3, 5)\n  15\n  >>> lcm(30, 60)\n  210\n  */\nconst lcm = (a, b) => {\n  return (a * b) / gcd(a, b);\n};\n\n/**\n * Return the number of the last digit of an integer\n  >>> lastDigit(100)\n  2\n  >>> lastDigit(99)\n  0\n  >>> lastDigit(1)\n  0\n  >>> lastDigit(0)\n  0\n  >>> lastDigit(-1)\n  0\n  >>> lastDigit(-100)\n  2\n  */\nconst lastDigit = n => {\n  return n % 10;\n};\n\nmodule.exports = {\n  greaterCommonDivisors,\n  gcd,\n  lcm,\n  lastDigit\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const result = [];\n  const chars = string.split('');\n  const length = chars.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = i; j < length; j++) {\n      result.push(chars.slice(i, j + 1));\n    }\n  }\n  return result;\n};\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const result = [];\n  const chars = string.split('');\n  const length = chars.length;\n  for (let i = length - 1; i >= 0; i--) {\n    for (let j = i; j < length; j++) {\n      result.push(chars.slice(j, i + 1));\n    }\n  }\n  return result;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'b', 'ab', 'ac', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const result = [];\n  const chars = string.split('');\n  const length = chars.length;\n  for (let i = 0; i < length; i++) {\n    for (let j = i; j < length; j++) {\n      result.push(chars.slice(j, i + 1));\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFrom0 = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(5)\n  '5 6 7 8 9 10'\n  >>> stringSequences(7)\n  '5 6 7 8 9 10 11 12 13 14 15 16'\n  */\nconst stringSequencesFrom5 = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFrom5toN = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(5)\n  '5 6 7 8 9 10'\n  >>> stringSequences(7)\n  '5 6 7 8 9 10 11 12 13 14 15 16'\n  */\nconst stringSequencesFromNto10 = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFromNtoN = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(5)\n  '5 6 7 8 9 10'\n  >>> stringSequences(7)\n  '5 6 7 8 9 10 11 12 13 14 15 16'\n  */\nconst stringSequencesFrom10toN = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFrom10to10 = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(5)\n  '5 6 7 8 9 10'\n  >>> stringSequences(7)\n  '5 6 7 8 9 10 11 12 13 14 15 16'\n  */\nconst stringSequencesFrom10toN = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFromNto10 = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFromNtoN = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto 10 inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFromNto10 = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequencesFromNtoN = (n) => {\n  const digits = Array.from(Array(n + 1).keys());\n  return digits.reduce((str, num) => `${str} ${num}`);\n};\n\n/* Return a string containing space-delimited numbers starting from n inclusive upto n inclusive."}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n  const char = string.toLowerCase()\n  const set = new Set(char)\n  return set.size\n}\n\n/**\n  * Given an array of strings, find out how many strings are unique\n  * @param {Array} stringArray - The array of strings\n  * @returns {number} The number of unique strings in the array\n  */\nconst countUniqueString = (stringArray) => {\n  return stringArray.reduce((previous, current) => {\n    return previous + (new Set(current)).size\n  }, 0)\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedCharacter = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    count = count + (string.indexOf(string[i], i + 1) > -1)\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedString = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    for (let j = i + 1; j < string.length; j++) {\n      count = count + (string.indexOf(string[j], i + 1) > -1)\n    }\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a string is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedStringInArray = (stringArray) => {\n  let count = 0\n  for (let i = 0; i < stringArray.length; i++) {\n    for (let j = i + 1; j < stringArray.length; j++) {\n      count = count + (stringArray[i] === stringArray[j])\n    }\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedStringInSet = (stringSet) => {\n  let count = 0\n  for (let i = 0; i < stringSet.length; i++) {\n    for (let j = i + 1; j < stringSet.length; j++) {\n      count = count + (stringSet.indexOf(stringSet[j], i + 1) > -1)\n    }\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedStringInMap = (stringMap) => {\n  let count = 0\n  for (let i = 0; i < stringMap.length; i++) {\n    for (let j = i + 1; j < stringMap.length; j++) {\n      count = count + (stringMap[stringMap[j]] === stringMap[j])\n    }\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedStringInObject = (object) => {\n  let count = 0\n  for (let i = 0; i < object.length; i++) {\n    for (let j = i + 1; j < object.length; j++) {\n      count = count + (object[object[j]] === object[j])\n    }\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedCharacterInArray = (stringArray) => {\n  let count = 0\n  for (let i = 0; i < stringArray.length; i++) {\n    for (let j = i + 1; j < stringArray.length; j++) {\n      count = count + (stringArray[i] === stringArray[j])\n    }\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedCharacterInSet = (stringSet) => {\n  let count = 0\n  for (let i = 0; i < stringSet.length; i++) {\n    for (let j = i + 1; j < stringSet.length; j++) {\n      count = count + (stringSet.indexOf(stringSet[j], i + 1) > -1)\n    }\n  }\n  return count\n}\n\n/**\n  * Given a string, find out how many times a character is repeated in it\n  * @param {string} string - The string to find the repetition count in\n  * @returns {number} The number of times a character is repeated in the string\n  */\nconst countRepeatedCharacterInMap = (stringMap) => {\n  let count = 0\n  for (let i = 0; i < stringMap.length; i++) {\n    for (let j = i + 1; j < stringMap.length"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  return music_list.map((note_string) => {\n    let note_list = note_string.split('|');\n    return note_list.map((note_value) => {\n      if (note_value === 'o') return 4;\n      if (note_value === 'o|') return 2;\n      if (note_value === '.') return 1;\n    });\n  });\n};\n\nconst parseMusic = (music_string) => {\n  const music_list = music_string.split(' ');\n  return music_list.map((note_string) => {\n    let note_list = note_string.split('|');\n    return note_list.map((note_value) => {\n      if (note_value === 'o') return 4;\n      if (note_value === 'o|') return 2;\n      if (note_value === '.') return 1;\n    });\n  });\n};\n\nexport default parseMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  if (string.length === 0 || substring.length === 0) {\n    return 0;\n  }\n\n  let result = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charAt(i) === substring.charAt(0)) {\n      result++;\n      for (let j = 1; j < substring.length; j++) {\n        if (string.charAt(i + j - 1)!== substring.charAt(j)) {\n          result++;\n          break;\n        }\n      }\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n  const nums = numbers.split(' ')\n  return sort(nums)\n}\n\n/*\n  Input is a space-delimited string of numerals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortsNumbers('nine three five')\n  'five three nine'\n  */\nconst sortsReverse = (numbers) => {\n  const nums = numbers.split(' ')\n  return sort(nums, true)\n}\n\nconst sort = (nums, reverse) => {\n  const len = nums.length\n  if (len <= 1) return nums\n  const half = Math.floor(len/2)\n  const left = nums.slice(0, half)\n  const right = nums.slice(half, len)\n  return sort(left, reverse) +'' + sort(right, reverse)\n}\n\nexport {\n  sortsNumbers,\n  sortsReverse,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const sorted = numbers.sort();\n  const min = sorted[0];\n  const max = sorted[sorted.length - 1];\n  const minDiff = Math.abs(min - max);\n  const maxDiff = Math.abs(min - max);\n\n  let closest = min;\n  let secondClosest = min;\n\n  let i = 0;\n  while (i < sorted.length) {\n    const element = sorted[i];\n    const diff = Math.abs(element - min);\n    if (diff < minDiff) {\n      secondClosest = min;\n      closest = element;\n      minDiff = diff;\n    } else if (diff < maxDiff) {\n      secondClosest = element;\n      maxDiff = diff;\n    }\n    i++;\n  }\n  return [closest, secondClosest];\n};\n\n/*\n  Return the index of the largest number in a list\n  >>> largestNumberIndex([2, 3, 4, 1, 6, 7, 2, 3, 8])\n  7\n  >>> largestNumberIndex([2, 3, 4, 1, 6, 7, 2, 3, 8, 9])\n  9\n  >>> largestNumberIndex([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  10\n  */\nconst largestNumberIndex = (numbers) => {\n  let largestNumber = -1;\n  let largestNumberIndex = -1;\n  let i = 0;\n  while (i < numbers.length) {\n    const number = numbers[i];\n    if (largestNumber < number) {\n      largestNumber = number;\n      largestNumberIndex = i;\n    }\n    i++;\n  }\n  return largestNumberIndex;\n};\n\n/*\n  Given a list of positive numbers, return a list of positive numbers such that sum is equal to the given sum\n  >>> numberSum([2, 4, 8, 9, 12])\n  [5, 6, 14]\n  >>> numberSum([2, 4, 8, 9, 12, 14])\n  [3, 5, 7, 9, 12, 14]\n  >>> numberSum([2, 4, 8, 9, 12, 14, 16])\n  [3, 5, 7, 9, 12, 14, 16]\n  >>> numberSum([2, 4, 8, 9, 12, 14, 16, 18])\n  [3, 5, 7, 9, 12, 14, 16, 18]\n  >>> numberSum([2, 4, 8, 9, 12, 14, 16, 18, 20])\n  [3, 5, 7, 9, 12, 14, 16, 18, 20]\n  */\nconst numberSum = (numbers) => {\n  const total = sum(numbers);\n  const numberLength = numbers.length;\n  const numbersToAdd = [];\n  let number = 0;\n  let i = 0;\n  while (i < numberLength) {\n    number = numbers[i];\n    while (numberToAdd(number, total)) {\n      number++;\n    }\n    numbersToAdd.push(number);\n    i++;\n  }\n  return numbersToAdd;\n};\n\n/*\n  Given a list of positive numbers, return the sum of all numbers.\n  >>> sum([2, 4, 8, 9, 12])\n  22\n  >>> sum([2, 4, 8, 9, 12, 14])\n  30\n  >>> sum([2, 4, 8, 9, 12, 14, 16])\n  34\n  >>> sum([2, 4, 8, 9, 12, 14, 16, 18])\n  40\n  >>> sum([2, 4, 8, 9, 12, 14, 16, 18, 20])\n  42\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n  const numberLength = numbers.length;\n  let i = 0;\n  while (i < numberLength) {\n    sum += numbers[i];\n    i++;\n  }\n  return sum;\n};\n\nexport default {\n  average,\n  averageInRange,\n  divide,\n  findClosestElements,\n  largestNumberIndex,\n  numberSum,\n  sum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const min = Math.min.apply(null, numbers)\n  const max = Math.max.apply(null, numbers)\n  return [min, min + (max - min) / 2.0, max - (max - min) / 2.0, max]\n}\n\n/**\n  @param {Number} a\n  @param {Number} b\n  @param {Number} c\n  @return {Number}\n  Given three numbers, find the area of the triangle made by them\n  >>> triangleArea([1, 2, 3])\n  2.0\n  >>> triangleArea([1, 2, 4])\n  0.0\n  >>> triangleArea([1, 3, 5])\n  0.0\n  */\nconst triangleArea = (a, b, c) => {\n  return ((a + b) * (c - a) / 2.0)\n}\n\n/**\n  @param {Number} a\n  @param {Number} b\n  @param {Number} c\n  @return {Number}\n  Given three numbers, find the perimeter of the triangle made by them\n  >>> trianglePerimeter([1, 2, 3])\n  5.0\n  >>> trianglePerimeter([1, 2, 4])\n  4.0\n  >>> trianglePerimeter([1, 3, 5])\n  4.0\n  */\nconst trianglePerimeter = (a, b, c) => {\n  return (a + b + c)\n}\n\n/**\n  @param {Number} a\n  @param {Number} b\n  @param {Number} c\n  @return {Number}\n  Given three numbers, find the length of the side of the triangle made by them\n  >>> triangleSide([1, 2, 3])\n  3.0\n  >>> triangleSide([1, 2, 4])\n  2.0\n  >>> triangleSide([1, 3, 5])\n  3.0\n  */\nconst triangleSide = (a, b, c) => {\n  return Math.sqrt(triangleArea(a, b, c))\n}\n\n/**\n  @param {Number} a\n  @param {Number} b\n  @param {Number} c\n  @return {Number}\n  Given three numbers, find the hypotenuse of the triangle made by them\n  >>> triangleHypotenuse([1, 2, 3])\n  3.0\n  >>> triangleHypotenuse([1, 2, 4])\n  2.0\n  >>> triangleHypotenuse([1, 3, 5])\n  3.0\n  */\nconst triangleHypotenuse = (a, b, c) => {\n  return Math.sqrt(Math.pow(triangleSide(a, b, c), 2) + Math.pow(triangleSide(a, c, b), 2))\n}\n\n/**\n  @param {Number} a\n  @param {Number} b\n  @param {Number} c\n  @return {Number}\n  Given three numbers, find the area of the triangle made by them\n  >>> triangleArea([1, 2, 3])\n  2.0\n  >>> triangleArea([1, 2, 4])\n  0.0\n  >>> triangleArea([1, 3, 5])\n  0.0\n  */\nconst triangleArea2 = (a, b, c) => {\n  return triangleArea(b, c, a)\n}\n\n/**\n  @param {Number} a\n  @param {Number} b\n  @param {Number} c\n  @return {Number}\n  Given three numbers, find the length of the side of the triangle made by them\n  >>> triangleSide([1, 2, 3])\n  3.0\n  >>> triangleSide([1, 2, 4])\n  2.0\n  >>> triangleSide([1, 3, 5])\n  3.0\n  */\nconst triangleSide2 = (a, b, c) => {\n  return triangleSide(b, c, a)\n}\n\n/**\n  @param {Number} a\n  @param {Number} b\n  @param {Number} c\n  @return {Number}\n  Given three numbers, find the hypotenuse of the triangle made by them\n  >>> triangleHypotenuse([1, 2, 3])\n  3.0\n  >>> triangleHypotenuse([1, 2, 4])\n  2.0\n  >>> triangleHypotenuse([1, 3, 5])\n  3.0\n  */\nconst triangleHypotenuse2 = (a, b, c) => {\n  return triangleHypotenuse(b, c, a)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(v => typeof v === 'number' && isInteger(v));\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {List} values\n  * @returns {List}\n  * @example\n  * // Filter given list of any python values only for strings\n  * const filterStrings = (values) => {\n  *   return values.filter(v => typeof v ==='string');\n  * }\n  */\nconst filterStrings = (values) => {\n  return values.filter(v => typeof v ==='string');\n};\n\n/**\n  * Returns true if the given value is an integer\n  * @param {*} value\n  * @returns {boolean}\n  */\nconst isInteger = (value) => {\n  return Number.isInteger(value);\n};\n\n/**\n  * Returns true if the given value is a float\n  * @param {*} value\n  * @returns {boolean}\n  */\nconst isFloat = (value) => {\n  return Number.isFinite(value);\n};\n\n/**\n  * Returns true if the given value is a number\n  * @param {*} value\n  * @returns {boolean}\n  */\nconst isNumber = (value) => {\n  return Number.isFinite(value);\n};\n\nmodule.exports = {\n  filterIntegers,\n  filterStrings,\n  isInteger,\n  isFloat,\n  isNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n    const len = string.length;\n    const idx = string.indexOf('\\0');\n    if (idx === -1) {\n        return len;\n    }\n    return len - idx - 1;\n};\n\n/**\n  * Return true if the given string is a valid IPv4 address\n  *\n  * @param string\n  * @return boolean\n  */\nconst isIPv4 = (string) => {\n    if (strlen(string)!= 8) {\n        return false;\n    }\n    return /^(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(string);\n};\n\n/**\n  * Return true if the given string is a valid IPv6 address\n  *\n  * @param string\n  * @return boolean\n  */\nconst isIPv6 = (string) => {\n    if (strlen(string)!= 18) {\n        return false;\n    }\n    return /^(([0-9A-F]{1,4}:){7,7}[0-9A-F]{1,4}|([0-9A-F]{1,4}:){1,7}:|([0-9A-F]{1,4}:){1,6}:[0-9A-F]{1,4}|([0-9A-F]{1,4}:){1,5}(:[0-9A-F]{1,4}){1,2}|([0-9A-F]{1,4}:){1,4}(:[0-9A-F]{1,4}){1,3}|([0-9A-F]{1,4}:){1,3}(:[0-9A-F]{1,4}){1,4}|([0-9A-F]{1,4}:){1,2}(:[0-9A-F]{1,4}){1,5}|[0-9A-F]{1,4}:((:[0-9A-F]{1,4}){1,6})|:((:[0-9A-F]{1,4}){1,7}|:)|fe80:(:[0-9A-F]{0,4}){0,4}%[0-9A-F]{1,4}%(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/.test(string);\n};\n\n/**\n  * Return true if the given string is a valid MAC address\n  *\n  * @param string\n  * @return boolean\n  */\nconst isMAC = (string) => {\n    if (strlen(string)!= 17) {\n        return false;\n    }\n    return /^([0-9A-F]{2}[:-]){5}([0-9A-F]{2})$/.test(string);\n};\n\n/**\n  * Return true if the given string is a valid port number\n  *\n  * @param string\n  * @return boolean\n  */\nconst isPort = (string) => {\n    const number = parseInt(string, 10);\n    return isFinite(number) && number >= 0 && number <= 65535;\n};\n\n/**\n  * Return true if the given string is a valid port range\n  *\n  * @param string\n  * @return boolean\n  */\nconst isPortRange = (string) => {\n    const port = parseInt(string, 10);\n    if (isFinite(port) && port >= 0 && port <= 65535) {\n        const first = parseInt(string.slice(0, -1), 10);\n        const last = parseInt(string.slice(-1), 10);\n        return first <= last && first >= 0 && last >= 0 && first <= last;\n    }\n    return false;\n};\n\n/**\n  * Return true if the given string is a valid IPv4 or IPv6 address\n  *\n  * @param string\n  * @return boolean\n  */\nconst isIP = (string) => {\n    return isIPv4(string) || isIPv6(string);\n};\n\nmodule.exports = {\n    isIP,\n    isPort,\n    isPortRange,\n    isMAC,\n    isIPv4,\n    isIPv6,\n    strlen,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  const l = Math.floor(n/2)\n  const r = n - l\n  const divisors = [l, r]\n  for (let i = 2; i <= l; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return Math.max(...divisors)\n}\n\n/*\n  For a given number n, find the largest number that divides n evenly, larger than n\n  >>> largerDivisors(15)\n  9\n  */\nconst largerDivisors2 = (n) => {\n  const l = Math.floor(n/2)\n  const r = n - l\n  const divisors = [l, r]\n  for (let i = 2; i <= r; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n  return Math.max(...divisors)\n}\n\nmodule.exports = {\n  largerDivisors,\n  largerDivisors2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  let factors = [];\n  let p = 2;\n  while (p * p <= n) {\n    while (n % p == 0) {\n      factors.push(p);\n      n = n / p;\n    }\n    p = p + 1;\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return factors;\n};\n\n/* Return the sum of factors of given number\n  >>> factorizeSum(8)\n  6\n  >>> factorizeSum(25)\n  30\n  >>> factorizeSum(70)\n  210\n  */\nconst factorizeSum = (n) => {\n  let sum = 0;\n  let factors = factorizes(n);\n  for (let i = 0; i < factors.length; i++) {\n    sum += factors[i];\n  }\n  return sum;\n};\n\n/* Return the product of factors of given number\n  >>> factorizeProduct(8)\n  64\n  >>> factorizeProduct(25)\n  6400\n  >>> factorizeProduct(70)\n  6400000\n  */\nconst factorizeProduct = (n) => {\n  let product = 1;\n  let factors = factorizes(n);\n  for (let i = 0; i < factors.length; i++) {\n    product *= factors[i];\n  }\n  return product;\n};\n\nmodule.exports = {\n  factorizes,\n  factorizeSum,\n  factorizeProduct\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  const unique = []\n  const duplicates = []\n  const uniqueNumbers = numbers.filter(num => {\n    if (unique.indexOf(num) === -1) {\n      unique.push(num)\n    } else {\n      duplicates.push(num)\n    }\n    return true\n  })\n  return uniqueNumbers.concat(duplicates)\n}\n\n/*\n  Given a list of lists, return a list of lists with every item in every list\n  appended together.\n  >>> appendLists([[1, 2], [3, 4]])\n  [1, 2, 3, 4]\n  >>> appendLists([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> appendLists([[1, 2], [3, 4, 5]])\n  [1, 2, 3, 4, 5]\n  */\nconst appendLists = (lists) => {\n  let newLists = []\n  for (let i = 0; i < lists.length; i++) {\n    newLists[i] = lists[i].concat(lists[i + 1])\n  }\n  return newLists\n}\n\n/*\n  Given a list of lists, return a list of lists with every item in every list\n  appended together.\n  >>> appendLists([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> appendLists([[1, 2], [3, 4, 5]])\n  [1, 2, 3, 4, 5]\n  >>> appendLists([[1, 2, 3], [4, 5]])\n  [1, 2, 3, 4, 5]\n  */\nconst appendListsInReverse = (lists) => {\n  let newLists = []\n  for (let i = lists.length - 1; i >= 0; i--) {\n    newLists[i] = lists[i].concat(lists[i - 1])\n  }\n  return newLists\n}\n\n/*\n  Given a list of lists, return a list of lists with every item in every list\n  appended together.\n  >>> appendLists([[1, 2], [3, 4, 5]])\n  [1, 2, 3, 4, 5]\n  >>> appendLists([[1, 2, 3], [4, 5]])\n  [1, 2, 3, 4, 5]\n  >>> appendLists([[1, 2], [3, 4, 5]])\n  [1, 2, 3, 4, 5]\n  */\nconst appendListsInReverseInReverse = (lists) => {\n  let newLists = []\n  for (let i = lists.length - 1; i >= 0; i--) {\n    newLists[i] = lists[i].concat(lists[i + 1])\n  }\n  return newLists\n}\n\n/*\n  Given a list of lists, return a list of lists with every item in every list\n  appended together.\n  >>> appendLists([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> appendLists([[1, 2], [3, 4, 5]])\n  [1, 2, 3, 4, 5]\n  >>> appendLists([[1, 2, 3], [4, 5]])\n  [1, 2, 3, 4, 5]\n  */\nconst appendListsInReverseInReverse = (lists) => {\n  let newLists = []\n  for (let i = lists.length - 1; i >= 0; i--) {\n    newLists[i] = lists[i].concat(lists[i - 1])\n  }\n  return newLists\n}\n\n/*\n  Given a list of lists, return a list of lists with every item in every list\n  appended together.\n  >>> appendLists([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> appendLists([[1, 2], [3, 4, 5]])\n  [1, 2, 3, 4, 5]\n  >>> appendLists([[1, 2, 3], [4, 5]])\n  [1, 2, 3, 4, 5]\n  */\nconst appendListsInReverseInReverseInReverse = (lists) => {\n  let newLists = []\n  for (let i = lists.length - 1; i >= 0; i--) {\n    newLists[i] = lists[i].concat(lists[i + 1])\n  }\n  return newLists\n}\n\nexport {\n  removeDuplicate,\n  appendLists,\n  appendListsInReverse,\n  appendListsInReverseInReverse,\n  appendListsInReverseInReverseInReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string.replace(/[a-z]/g, c => {\n    return String.fromCharCode(c.charCodeAt(0).toUpperCase());\n  });\n};\n\n/*\n  Convert a string to lowercase.\n  >>> toLowerCase('Hello')\n  'hello'\n  */\nconst toLowerCase = (string) => {\n  return string.toLowerCase();\n};\n\n/*\n  Convert a string to uppercase.\n  >>> toUpperCase('hello')\n  'HELLO'\n  */\nconst toUpperCase = (string) => {\n  return string.toUpperCase();\n};\n\n/*\n  Convert a string to titlecase.\n  >>> toTitleCase('Hello')\n  'Hello'\n  */\nconst toTitleCase = (string) => {\n  return string.replace(/[a-z]/g, c => {\n    return c.toUpperCase();\n  });\n};\n\n/*\n  Given a string, return the first word in the string.\n  >>> split('Hello')\n  ['Hello']\n  >>> split('Hello world')\n  ['Hello', 'world']\n  >>> split('Hello, world')\n  ['Hello', 'world']\n  >>> split('Hello World')\n  ['Hello', 'World']\n  >>> split('Hello World, Hello')\n  ['Hello', 'World', 'Hello']\n  >>> split('Hello World, Hello')\n  ['Hello', 'World', 'Hello']\n  >>> split('Hello World, Hello')\n  ['Hello', 'World', 'Hello']\n  */\nconst split = (string) => {\n  const words = string.split(' ');\n  return words[0];\n};\n\n/*\n  Given a string, return the last word in the string.\n  >>> split('Hello')\n  'Hello'\n  >>> split('Hello world')\n  'world'\n  >>> split('Hello world')\n  'world'\n  >>> split('Hello World')\n  'World'\n  >>> split('Hello World, Hello')\n  'World'\n  >>> split('Hello World, Hello')\n  'World'\n  >>> split('Hello World, Hello')\n  'World'\n  */\nconst last = (string) => {\n  const words = string.split(' ');\n  return words[words.length - 1];\n};\n\n/*\n  Given a string, return a string with all punctuation removed.\n  >>> cleanPunctuation('Hello')\n  'Hello'\n  >>> cleanPunctuation('Hello world')\n  'Hello world'\n  >>> cleanPunctuation('Hello world, Hello')\n  'Hello world, Hello'\n  >>> cleanPunctuation('Hello world, Hello!')\n  'Hello world, Hello!'\n  >>> cleanPunctuation('Hello world, Hello!?')\n  'Hello world, Hello!'\n  >>> cleanPunctuation('Hello World, Hello!?')\n  'Hello World, Hello!'\n  */\nconst cleanPunctuation = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '');\n};\n\n/*\n  Given a string, return a string with all punctuation and spaces removed.\n  >>> cleanSpace('Hello world')\n  'Hello world'\n  >>> cleanSpace('Hello world, Hello')\n  'Hello world, Hello'\n  >>> cleanSpace('Hello world, Hello!')\n  'Hello world, Hello!'\n  >>> cleanSpace('Hello world, Hello!?')\n  'Hello world, Hello!'\n  >>> cleanSpace('Hello World, Hello!?')\n  'Hello World, Hello!'\n  */\nconst cleanSpace = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '').replace(/[^a-zA-Z ]/g,'');\n};\n\n/*\n  Given a string, return a string with all non-alphabetic characters removed.\n  >>> cleanNonAlpha('Hello world')\n  'Hello world'\n  >>> cleanNonAlpha('Hello world, Hello')\n  'Hello world, Hello'\n  >>> cleanNonAlpha('Hello world, Hello!')\n  'Hello world, Hello!'\n  >>> cleanNonAlpha('Hello world, Hello!?')\n  'Hello world, Hello!'\n  >>> cleanNonAlpha('Hello World, Hello!?')\n  'Hello World, Hello!'\n  */\nconst cleanNonAlpha = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '');\n};\n\n/*\n  Given a string, return a string with all spaces and punctuation removed.\n  >>> cleanPunctuation('Hello world')\n  'Hello world'\n  >>> cleanPunctuation('Hello world, Hello')\n  'Hello world, Hello'\n  >>> cleanPunctuation('Hello world, Hello!')\n  'Hello world, Hello!'\n  >>> cleanPunctuation('Hello world, Hello!?')\n  'Hello world, Hello!'\n  >>> cleanPunctuation('Hello World, Hello!?')\n  'Hello World, Hello!'\n  */\nconst cleanPunctuation = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '').replace(/[^a-zA-Z ]/g,'');\n};\n\n/*\n  Given a string, return a string with all spaces removed.\n  >>> cleanSpace('Hello world')\n  'Hello world'\n  >>> cleanSpace('Hello world, Hello')\n  'Hello world, Hello'\n  >>> cleanSpace('Hello world, Hello!')\n  'Hello world, Hello!'\n  >>> cleanSpace('Hello World, Hello!')\n  'Hello World, Hello!'\n  */\nconst cleanSpace = (string) => {\n  return string.replace(/[^a-zA-Z ]/g, '');\n};\n\n/*\n  Given a string, return a string with all non-alphabetic characters removed.\n  >>> cleanNonAlpha('Hello world')\n  'Hello world'\n  >>> cleanNonAlpha('Hello world, Hello')\n  'Hello world, Hello'\n  >>> cleanNonAlpha('Hello world, Hello!')\n  'Hello world, Hello!'\n  >>> cleanNonAlpha('Hello world, Hello!?')\n  'Hello world, Hello!'\n  >>> cleanNonAlpha('Hello World, Hello"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((previous, current) => previous + current, '');\n};\n\n/*\n  >>> contains([], 'a')\n  false\n  >>> contains([], '')\n  true\n  >>> contains([], '', '')\n  true\n  >>> contains([], 'a', '')\n  false\n  >>> contains([], 'a', 'a')\n  true\n  */\nconst contains = (strings, value) => {\n  return strings.some(string => string === value);\n};\n\n/*\n  >>> contains_all([], [])\n  true\n  >>> contains_all([], [''])\n  false\n  >>> contains_all([], [''], [''])\n  true\n  >>> contains_all([], ['a', 'b'])\n  false\n  >>> contains_all([], ['a', 'b'], ['a', 'b'])\n  true\n  */\nconst contains_all = (strings, values) => {\n  return values.every(value => contains(strings, value));\n};\n\n/*\n  >>> contains_any([], [])\n  false\n  >>> contains_any([], [''])\n  true\n  >>> contains_any([], [''], [''])\n  true\n  >>> contains_any([], ['a', 'b'])\n  true\n  >>> contains_any([], ['a', 'b'], ['a', 'b'])\n  true\n  */\nconst contains_any = (strings, values) => {\n  return values.some(value => contains(strings, value));\n};\n\n/*\n  >>> index_of('abc', 'a')\n  0\n  >>> index_of('abc', 'z')\n  -1\n  >>> index_of('abc', '', 0)\n  0\n  >>> index_of('abc', '', 1)\n  -1\n  >>> index_of('abc', '', -1)\n  2\n  >>> index_of('abc', '', 2)\n  -1\n  >>> index_of('abc', '', 3)\n  -1\n  >>> index_of('abc', '', -2)\n  1\n  >>> index_of('abc', '', 3, -1)\n  1\n  >>> index_of('abc', '', 3, 0)\n  0\n  >>> index_of('abc', '', 3, 1)\n  1\n  >>> index_of('abc', '', 3, 2)\n  -1\n  >>> index_of('abc', '', 3, 3)\n  -1\n  >>> index_of('abc', '', 3, 4)\n  -1\n  >>> index_of('abc', '', 3, -2)\n  -1\n  >>> index_of('abc', '', 3, -3)\n  0\n  >>> index_of('abc', '', 3, -4)\n  -1\n  >>> index_of('abc', '', 3, -5)\n  -1\n  >>> index_of('abc', '', 3, -6)\n  -1\n  >>> index_of('abc', '', 3, -7)\n  -1\n  >>> index_of('abc', '', 3, -8)\n  -1\n  >>> index_of('abc', '', 3, -9)\n  -1\n  >>> index_of('abc', '', 3, -10)\n  -1\n  >>> index_of('abc', '', 3, -11)\n  -1\n  >>> index_of('abc', '', 3, -12)\n  -1\n  >>> index_of('abc', '', 3, -13)\n  -1\n  >>> index_of('abc', '', 3, -14)\n  -1\n  >>> index_of('abc', '', 3, -15)\n  -1\n  >>> index_of('abc', '', 3, -16)\n  -1\n  >>> index_of('abc', '', 3, -17)\n  -1\n  >>> index_of('abc', '', 3, -18)\n  -1\n  >>> index_of('abc', '', 3, -19)\n  -1\n  >>> index_of('abc', '', 3, -20)\n  -1\n  >>> index_of('abc', '', 3, -21)\n  -1\n  >>> index_of('abc', '', 3, -22)\n  -1\n  >>> index_of('abc', '', 3, -23)\n  -1\n  >>> index_of('abc', '', 3, -24)\n  -1\n  >>> index_of('abc', '', 3, -25)\n  -1\n  >>> index_of('abc', '', 3, -26)\n  -1\n  >>> index_of('abc', '', 3, -27)\n  -1\n  >>> index_of('abc', '', 3, -28)\n  -1\n  >>> index_of('abc', '', 3, -29)\n  -1\n  >>> index_of('abc', '', 3, -30)\n  -1\n  >>> index_of('abc', '', 3, -31)\n  -1\n  >>> index_of('abc', '', 3, -32)\n  -1\n  >>> index_of('abc', '', 3, -33)\n  -1\n  >>> index_of('abc', '', 3, -34)\n  -1\n  >>> index_of('abc', '', 3, -35)\n  -1\n  >>> index_of('abc', '', 3, -36)\n  -1\n  >>> index_of('abc', '', 3, -37)\n  -1\n  >>> index_of('abc', '', 3, -38)\n  -1\n  >>> index_of('abc', '', 3, -39)\n  -1\n  >>> index_of('abc', '', 3, -40)\n  -1\n  >>> index_of('abc', '', 3, -41)\n  -1\n  >>> index_of('abc', '', 3, -42)\n  -1\n  >>> index_of('abc', '', 3, -43)\n  -1\n  >>> index_of('abc', '', 3, -44)\n  -1\n  >>> index_of"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  if (strings.length === 0) {\n    return strings;\n  }\n  return strings.filter(str => str.startsWith(prefix));\n};\n\nexport default {\n  filterByPrefix,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = gottenPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) {\n    return false\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return false\n  }\n  const i = 3\n  while (i * i <= n) {\n    if (n % i === 0) {\n      return false\n    }\n    i += 2\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const half = xs.length / 2;\n  let x = xs[half];\n  let i = half + 1;\n  while (i < xs.length) {\n    x = xs[half] + xs[i] * x;\n    i += 2;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return x"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n    return l.filter((item, index) => {\n        return item % 3!= 0;\n    }).sort((item1, item2) => {\n        if (item1 % 3 == 0) {\n            return item2 % 3 == 0? item1 - item2 : item2 - item1;\n        } else {\n            return item1 - item2;\n        }\n    });\n};\n\nexport {sortsThird};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const lLength = l.length;\n  const sorted = l.slice().sort((a, b) => a - b);\n  const r = [];\n  for (let i = 0; i < lLength; i += 1) {\n    if (sorted.indexOf(l[i]) === -1) {\n      r.push(l[i]);\n    }\n  }\n  return r;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nexport default maxElements;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return (n % 2 === 0)? 1 : (n % 5 === 0)? 2 : (n % 3 === 0)? 1 : 3;\n};\n\nmodule.exports = fizzBuzzes;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n    return l.slice().sort((a, b) => a === b? 0 : a - b);\n};\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsOdd([1, 2, 3])\n  [1, 3, 2]\n  >>> sortsOdd([5, 6, 3, 4])\n  [3, 4, 5, 6]\n  */\nconst sortsOdd = (l) => {\n    return l.slice().sort((a, b) => a === b? 0 : a - b);\n};\n\nconst list = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]\n   .sort((a, b) => a - b)\n   .slice(1, -1)\n   .sort((a, b) => a - b);\n};\n\nconsole.log(list);\nconsole.log(sortsEven(list));\nconsole.log(sortsOdd(list));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic2 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic3 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic4 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic5 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic6 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic7 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic8 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic9 = (s) => {\n  const groups = s.split('');\n  const groups2 = [];\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(groups[groups.indexOf(group.slice(0, 1))] + group[1] + groups[groups.indexOf(group.slice(2, 3))]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n  const two = prime(2);\n  const three = prime(3);\n  const four = prime(4);\n  const five = prime(5);\n  const fib = fib(two);\n  const next = fib(three);\n  const result = next + next;\n  while (n > 0) {\n    if (prime(next)) {\n      result = next;\n      break;\n    }\n    next = fib(next);\n    n--;\n  }\n  return result;\n};\n\nexport default primeFibs;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  const len = l.length\n  const triples = []\n  for (let i = 0; i < len; i++) {\n    const sum = 0\n    for (let j = 0; j < len; j++) {\n      if (i == j) {\n        continue\n      }\n      sum += l[j]\n      if (sum === 0) {\n        triples.push([l[i], l[j], sum])\n      }\n    }\n  }\n  return triples.length === 3\n}\n\n/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToOne = (l) => {\n  const len = l.length\n  const triples = []\n  for (let i = 0; i < len; i++) {\n    const sum = 0\n    for (let j = 0; j < len; j++) {\n      if (i == j) {\n        continue\n      }\n      sum += l[j]\n      if (sum === 1) {\n        triples.push([l[i], l[j], sum])\n      }\n    }\n  }\n  return triples.length === 3\n}\n\n/*\n  triplesSummingToOne takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to one, and false otherwise.\n\n  >>> triplesSummingToOne([1, 3, 5, 0])\n  false\n  >>> triplesSummingToOne([1, 3, -2, 1])\n  true\n  >>> triplesSummingToOne([1, 2, 3, 7])\n  false\n  >>> triplesSummingToOne([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToOne([1])\n  false\n  */\nconst triplesSummingTo2 = (l) => {\n  const len = l.length\n  const triples = []\n  for (let i = 0; i < len; i++) {\n    const sum = 0\n    for (let j = 0; j < len; j++) {\n      if (i == j) {\n        continue\n      }\n      sum += l[j]\n      if (sum === 2) {\n        triples.push([l[i], l[j], sum])\n      }\n    }\n  }\n  return triples.length === 3\n}\n\n/*\n  triplesSummingTo2 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to two, and false otherwise.\n\n  >>> triplesSummingTo2([1, 3, 5, 0])\n  false\n  >>> triplesSummingTo2([1, 3, -2, 1])\n  true\n  >>> triplesSummingTo2([1, 2, 3, 7])\n  false\n  >>> triplesSummingTo2([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingTo2([1])\n  false\n  */\nconst triplesSummingTo3 = (l) => {\n  const len = l.length\n  const triples = []\n  for (let i = 0; i < len; i++) {\n    const sum = 0\n    for (let j = 0; j < len; j++) {\n      if (i == j) {\n        continue\n      }\n      sum += l[j]\n      if (sum === 3) {\n        triples.push([l[i], l[j], sum])\n      }\n    }\n  }\n  return triples.length === 3\n}\n\n/*\n  triplesSummingTo3 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to three, and false otherwise.\n\n  >>> triplesSummingTo3([1, 3, 5, 0])\n  false\n  >>> triplesSummingTo3([1, 3, -2, 1])\n  true\n  >>> triplesSummingTo3([1, 2, 3, 7])\n  false\n  >>> triplesSummingTo3([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingTo3([1])\n  false\n  */\nconst triplesSummingTo4 = (l) => {\n  const len = l.length\n  const triples = []\n  for (let i = 0; i < len; i++) {\n    const sum = 0\n    for (let j = 0; j < len; j++) {\n      if (i == j) {\n        continue\n      }\n      sum += l[j]\n      if (sum === 4) {\n        triples.push([l[i], l[j], sum])\n      }\n    }\n  }\n  return triples.length === 3\n}\n\n/*\n  triplesSummingTo4 takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to four, and false otherwise.\n\n  >>> triplesSummingTo4([1, 3, 5, 0])\n  false\n  >>> triplesSummingTo4([1, 3,"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  let carRates = {\n    left: 0,\n    right: 0\n  }\n\n  for (let i = 0; i < n; i++) {\n    carRates.left += Math.random() * 3\n    carRates.right += Math.random() * 3\n  }\n\n  let collisionCount = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      if (carRates.left > carRates.right) {\n        collisionCount += 1\n      }\n    }\n  }\n\n  return collisionCount\n}\n\n/*\n  A simple function to test the above function.\n  */\nconst testCarsRacesCollision = () => {\n  const result = carsRacesCollision(3)\n  console.log(result)\n}\n\ntestCarsRacesCollision()\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists2 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists3 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists4 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists5 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists6 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists7 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists8 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists9 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists10 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists11 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists12 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists13 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists14 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists15 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists16 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists17 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists18 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists19 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists20 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists21 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists22 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists23 = (l) => {\n  let list = [];\n  for (let i = 0; i < l.length; i++) {\n    list[i] = l[i] + 1;\n  }\n  return list;\n}\n\nconst incrLists24 = (l) => {\n  let list = [];\n  for (let i = 0;"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  const p = l.filter((x) => x % 2 === 0)\n  return p.length === 2 && p.every((x, i, arr) => x + arr[i + 1] === 0)\n}\n\n/*\n  sumToZero takes a list of integers as an input.\n  it returns true if all elements in the list sum to zero, and false otherwise.\n  >>> sumToZero([1, 3, 5, 0])\n  false\n  >>> sumToZero([1, 3, -2, 1])\n  false\n  >>> sumToZero([1, 2, 3, 7])\n  true\n  >>> sumToZero([2, 4, -5, 3, 5, 7])\n  false\n  >>> sumToZero([1])\n  false\n  */\nconst sumToZero = (l) => {\n  return l.every((x, i, arr) => x + arr[i + 1] === 0)\n}\n\n/*\n  sumToOne takes a list of integers as an input.\n  it returns true if all elements in the list sum to one, and false otherwise.\n  >>> sumToOne([1, 3, 5, 0])\n  false\n  >>> sumToOne([1, 3, -2, 1])\n  false\n  >>> sumToOne([1, 2, 3, 7])\n  false\n  >>> sumToOne([2, 4, -5, 3, 5, 7])\n  false\n  >>> sumToOne([1])\n  false\n  >>> sumToOne([1, 3, 4])\n  false\n  >>> sumToOne([1, 2, 3, 4, 7])\n  true\n  */\nconst sumToOne = (l) => {\n  return l.every((x, i, arr) => x + arr[i + 1] === 1)\n}\n\nmodule.exports = {\n  sumToZero,\n  sumToOne,\n  pairSumsToZero\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  const baseDigits = new Array(base).fill(0).map((_, index) => index + 1);\n  const numDigits = new Array(x).fill(0).map((_, index) => index + 1);\n  let result = '';\n  while (x > 0) {\n    const digit = x % base;\n    x = x / base;\n    result = numDigits[digit] + result;\n  }\n  return result;\n};\n\nconsole.log(changeBases(4, 2));\nconsole.log(changeBases(12, 2));\nconsole.log(changeBases(6, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  return (Math.pow(h, 2) - Math.pow(a, 2)) / 2\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nconst triangleArea = (a, b, c) => {\n  return Math.pow(a, 2) + Math.pow(b, 2) - 2 * Math.pow(b, 2) * c / 2\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst trianglePerimeter = (a, b) => {\n  return a + b + Math.pow(a, 2) / 2 + Math.pow(b, 2) / 2\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @return {number}\n */\nconst doubleTrianglePerimeter = (a, b) => {\n  return Math.pow(a, 2) + 2 * a * b + Math.pow(b, 2)\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nconst triangulationArea = (a, b, c) => {\n  return Math.pow(a + b + c, 2) / 6\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nconst doubleTriangulationArea = (a, b, c) => {\n  return Math.pow(a + b + c, 2) / 12\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @return {number}\n */\nconst tetrahedronVolume = (a, b, c, d) => {\n  return Math.pow(a, 2) * Math.pow(b, 2) * Math.pow(c, 2) * Math.pow(d, 2) / 24\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst tetrahedronPerimeter = (a, b, c, d) => {\n  return a + b + c + d + Math.pow(a, 2) / 2 + Math.pow(b, 2) / 2 + Math.pow(c, 2) / 2 + Math.pow(d, 2) / 2\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst doubleTetrahedronPerimeter = (a, b, c, d) => {\n  return Math.pow(a, 2) / 4 + Math.pow(b, 2) / 4 + Math.pow(c, 2) / 4 + Math.pow(d, 2) / 4 + a + b + c + d\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst doubleTetrahedronVolume = (a, b, c, d) => {\n  return Math.pow(a, 2) * Math.pow(b, 2) * Math.pow(c, 2) * Math.pow(d, 2) / 96\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst cubeVolume = (a, b, c, d) => {\n  return a * b * c * d\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst cubePerimeter = (a, b, c, d) => {\n  return a + b + c + d + Math.pow(a, 2) / 2 + Math.pow(b, 2) / 2 + Math.pow(c, 2) / 2 + Math.pow(d, 2) / 2\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst doubleCubePerimeter = (a, b, c, d) => {\n  return Math.pow(a, 2) / 4 + Math.pow(b, 2) / 4 + Math.pow(c, 2) / 4 + Math.pow(d, 2) / 4 + a + b + c + d\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst doubleCubeVolume = (a, b, c, d) => {\n  return Math.pow(a, 2) * Math.pow(b, 2) * Math.pow(c, 2) * Math.pow(d, 2) / 24\n}\n\n/**\n * @param {number} a\n * @param {number} b\n * @param {number} c\n * @param {number} d\n * @return {number}\n */\nconst cube = (a, b, c, d) => {\n  return a * b * c * d\n}\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let a = 0, b = 1, res = 0;\n  for (let i = 0; i < n; i++) {\n    res = a + b;\n    a = b;\n    b = res;\n  }\n  return res;\n};\n\nconst fib4_solution = (n) => {\n  let a = 0, b = 1, res = 0;\n  for (let i = 0; i < n; i++) {\n    res = a + b;\n    a = b;\n    b = res;\n  }\n  return res;\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n\nconsole.log(fib4_solution(5));\nconsole.log(fib4_solution(6));\nconsole.log(fib4_solution(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sortedList = l.sort();\n  const middle = Math.floor(sortedList.length / 2);\n  const lower = sortedList.slice(0, middle);\n  const upper = sortedList.slice(middle);\n  const size = lower.length + upper.length;\n  return (size % 2 === 0)? (sortedList[middle] + sortedList[middle + 1]) / 2 : sortedList[middle];\n};\n\n/*Return the average of the elements in the list l.\n  >>> average([3, 1, 2, 4, 5])\n  3.25\n  >>> average([-10, 4, 6, 1000, 10, 20])\n  9.0\n  */\nconst average = (l) => {\n  return l.reduce((total, current) => total + current) / l.length;\n};\n\n/*Return the sum of the elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  26\n  */\nconst sum = (l) => {\n  return l.reduce((total, current) => total + current);\n};\n\nexport {\n  min,\n  max,\n  median,\n  average,\n  sum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (!text) return false;\n    var chars = text.split('');\n    for (var i = 0, j = chars.length - 1; i < j; i++, j--) {\n        if (chars[i]!== chars[j]) return false;\n    }\n    return true;\n}\n\n/*\n  Checks if given string is a number\n  >>> isNumber('0')\n  true\n  >>> isNumber('1')\n  true\n  >>> isNumber('2')\n  true\n  >>> isNumber('3')\n  true\n  >>> isNumber('2.5')\n  true\n  >>> isNumber('a')\n  false\n  */\nconst isNumber = (text) => {\n    if (!text) return false;\n    var chars = text.split('');\n    for (var i = 0, j = chars.length - 1; i < j; i++, j--) {\n        if (parseInt(chars[i], 10) > parseInt(chars[j], 10)) return false;\n    }\n    return true;\n}\n\n/*\n  Checks if given string is a valid integer\n  >>> isInt('1')\n  true\n  >>> isInt('2')\n  true\n  >>> isInt('0')\n  true\n  >>> isInt('-2')\n  true\n  >>> isInt('1.5')\n  false\n  >>> isInt('0.1')\n  false\n  */\nconst isInt = (text) => {\n    if (!text) return false;\n    var chars = text.split('');\n    for (var i = 0, j = chars.length - 1; i < j; i++, j--) {\n        if (parseInt(chars[i], 10) > parseInt(chars[j], 10)) return false;\n    }\n    return true;\n}\n\n/*\n  Checks if given string is a valid float\n  >>> isFloat('1')\n  true\n  >>> isFloat('2')\n  true\n  >>> isFloat('0')\n  true\n  >>> isFloat('-2')\n  true\n  >>> isFloat('1.5')\n  true\n  >>> isFloat('0.1')\n  true\n  >>> isFloat('2.5')\n  false\n  >>> isFloat('a')\n  false\n  */\nconst isFloat = (text) => {\n    if (!text) return false;\n    var chars = text.split('');\n    for (var i = 0, j = chars.length - 1; i < j; i++, j--) {\n        if (parseFloat(chars[i]) > parseFloat(chars[j])) return false;\n    }\n    return true;\n}\n\n/*\n  Checks if given string is a valid alphanumeric\n  >>> isAlphaNum('1')\n  true\n  >>> isAlphaNum('2')\n  true\n  >>> isAlphaNum('a')\n  true\n  >>> isAlphaNum('1a')\n  false\n  >>> isAlphaNum('aa')\n  false\n  */\nconst isAlphaNum = (text) => {\n    if (!text) return false;\n    var chars = text.split('');\n    for (var i = 0, j = chars.length - 1; i < j; i++, j--) {\n        if (isAlpha(chars[i]) && isNum(chars[j])) return true;\n    }\n    return false;\n}\n\n/*\n  Checks if given string is a valid alpha\n  >>> isAlpha('a')\n  true\n  >>> isAlpha('1')\n  false\n  >>> isAlpha('2')\n  false\n  */\nconst isAlpha = (text) => {\n    if (!text) return false;\n    return (text.toLowerCase() === text);\n}\n\n/*\n  Checks if given string is a valid numeric\n  >>> isNum('1')\n  true\n  >>> isNum('2')\n  true\n  >>> isNum('0')\n  true\n  >>> isNum('-2')\n  true\n  >>> isNum('1.5')\n  true\n  >>> isNum('0.1')\n  true\n  >>> isNum('2.5')\n  false\n  */\nconst isNum = (text) => {\n    if (!text) return false;\n    return parseInt(text, 10) > 0;\n}\n\nexport default {\n    isPalindrome,\n    isNumber,\n    isInt,\n    isFloat,\n    isAlphaNum,\n    isAlpha\n}\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 0;\n  if (n < 0) return modp(-n, p);\n  if (n === p) return 1;\n  if (n % p === 0) return 0;\n  const t = modp(p, n);\n  if (t === 1) return n;\n  return n - t * p;\n};\n\n/**\n  * @param {Number} n\n  * @param {Number} p\n  * @return {Number}\n  * @description Return the sum of the first n positive integers.\n  * n >= 0.\n  *\n  * @example\n  *\n  *   sum(2, 3)\n  *   // => 6\n  *\n  *   sum(2, 5)\n  *   // => 10\n  *\n  *   sum(2, 7)\n  *   // => 14\n  */\nconst sum = (n, p) => {\n  if (n === 0) return 0;\n  if (n === 1) return 1;\n  if (n === 2) return 2;\n  return modp(n + p, n) - modp(n, n);\n};\n\nexport default {\n  modp,\n  sum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  const encodedString = encodeShift(s);\n  return encodedString.split(\"\").join(\"\");\n}\n\nconst encode = (s) => encodeShift(s);\nconst decode = decodeShift;\n\nexport { encode, decode };\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n  if(text === '') {\n    return ''\n  }\n  let temp = text.replace(/a/g, '')\n  let temp2 = temp.replace(/e/g, '')\n  let temp3 = temp2.replace(/i/g, '')\n  let temp4 = temp3.replace(/o/g, '')\n  let temp5 = temp4.replace(/u/g, '')\n  let temp6 = temp5.replace(/A/g, '')\n  let temp7 = temp6.replace(/E/g, '')\n  let temp8 = temp7.replace(/I/g, '')\n  let temp9 = temp8.replace(/O/g, '')\n  let temp10 = temp9.replace(/U/g, '')\n  return temp10\n}\n\n/*\n  isVowel is a function that takes string and returns boolean.\n  >>> isVowel('')\n  False\n  >>> isVowel(\"a\")\n  True\n  >>> isVowel(\"\")\n  False\n  >>> isVowel(\"A\")\n  False\n  >>> isVowel(\"\")\n  False\n  >>> isVowel(\"a\")\n  True\n  */\nconst isVowel = (text) => {\n  if(text === '') {\n    return false\n  }\n  if(/[AEIOU]/.test(text)) {\n    return true\n  }\n  return false\n}\n\n/*\n  replaceAllVowel is a function that takes string and returns string with all vowels removed.\n  >>> replaceAllVowel('')\n  ''\n  >>> replaceAllVowel(\"aBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllVowel(\"aAeE\")\n  'E'\n  >>> replaceAllVowel(\"aaBcD\")\n  'Bcd'\n  >>> replaceAllV"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  const n = l.length;\n  let i;\n  for (i = 0; i < n; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = belowThresholds;\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n}\n\n/*\n  * Add two numbers x and y\n  * @param {number} x - first number\n  * @param {number} y - second number\n  * @returns {number} result\n  *\n  * @example\n  * adding(2, 3)\n  * //=> 5\n  *\n  * @example\n  * adding(5, 7)\n  * //=> 12\n  * */\nconst adding2 = (x, y) => {\n  return x + y;\n}\n\nmodule.exports = {\n  addTwoNumbers,\n  adding,\n  adding2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) {\n    return false;\n  }\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nmodule.exports = sameChar;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  const a = 1, b = 1, c = 0;\n  for (let i = 0; i < n; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n  return c;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const brackets = brackets.split(\"\")\n\n  let bracketStack = [{}]\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"<\") {\n      bracketStack.push({\n        \"<\": i + 1\n      })\n    } else if (brackets[i] === \">\") {\n      const lastBracket = bracketStack.pop()\n      if (!lastBracket) {\n        return false\n      }\n      if (lastBracket.hasOwnProperty(\"<\")) {\n        bracketStack[lastBracket.left] = {\n          \">\": i + 1\n        }\n      }\n    }\n  }\n\n  return bracketStack.length === 1\n}\n\n/*\n  given a string, a bracket pattern, and a position in the string, returns\n  the index of the matching bracket, or -1 if there is no matching bracket.\n  brackets can be either \"<\" or \">\" or \"<>\"\n  \n  >>> correctBracketing(\"<>\", \"<>\", 0)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 1)\n  1\n  >>> correctBracketing(\"<>\", \"<>\", 2)\n  -1\n  >>> correctBracketing(\"<>\", \">\", 1)\n  2\n  >>> correctBracketing(\"<>\", \"<>\", 3)\n  -1\n  >>> correctBracketing(\"<>\", \">\", 2)\n  2\n  >>> correctBracketing(\"<>\", \"<>\", 5)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 6)\n  -1\n  >>> correctBracketing(\"<>\", \">\", 5)\n  2\n  >>> correctBracketing(\"<>\", \"<>\", 7)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 8)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 9)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 10)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 11)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 12)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 13)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 14)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 15)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 16)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 17)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 18)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 19)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 20)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 21)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 22)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 23)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 24)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 25)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 26)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 27)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 28)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 29)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 30)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 31)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 32)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 33)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 34)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 35)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 36)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 37)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 38)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 39)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 40)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 41)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 42)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 43)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 44)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 45)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 46)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 47)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 48)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 49)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 50)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 51)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 52)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 53)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 54)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 55)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 56)\n  -1\n  >>> correctBracketing(\"<>\", \"<>\", 57)\n  -1\n  >>> correctBracketing(\"<>\","}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n  const sorted = l.slice().sort();\n  const diff = sorted[0] - sorted[1];\n  return diff === 1 || diff === -1;\n};\n\nmodule.exports = monotonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const arr1 = l1.sort().filter(l => l!== '').map(Number);\n  const arr2 = l2.sort().filter(l => l!== '').map(Number);\n  let ret = [];\n  let i = 0;\n  let j = 0;\n\n  while (i < arr1.length && j < arr2.length) {\n    if (arr1[i] === arr2[j]) {\n      ret.push(arr1[i]);\n      i++;\n      j++;\n    } else if (arr1[i] < arr2[j]) {\n      i++;\n    } else {\n      j++;\n    }\n  }\n\n  return ret;\n};\n\nexport default common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  let factors = [];\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.max(...factors);\n};\n\n/*Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  >>> smallerPrimeFactor(13195)\n  29\n  >>> smallerPrimeFactor(2048)\n  2\n  */\nconst smallerPrimeFactor = (n) => {\n  let factors = [];\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      factors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    factors.push(n);\n  }\n  return Math.min(...factors);\n};\n\nmodule.exports = {\n  largerPrimeFactor,\n  smallerPrimeFactor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  let total = 0\n  while (total < n) {\n    total = total + 1\n  }\n  return total\n}\n\nconsole.log(sumsToN(10))\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const openingBracket = brackets[i];\n    if (openingBracket === \"(\" || openingBracket === \")\") {\n      stack.push(openingBracket);\n    } else if (stack.length > 0) {\n      if (stack[stack.length - 1]!== openingBracket) {\n        return false;\n      }\n      stack.pop();\n    }\n  }\n  return stack.length === 0;\n};\n\nmodule.exports = correctBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  if (xs.length === 1) {\n    return xs;\n  }\n  const dxs = [xs[1]];\n  for (let i = 2; i < xs.length; i++) {\n    dxs.push(xs[i] * dxs[i - 1]);\n  }\n  return dxs;\n};\n\nconst product = (xs) => {\n  const len = xs.length;\n  if (len === 1) {\n    return xs[0];\n  }\n  const result = xs[0];\n  for (let i = 1; i < len; i++) {\n    result *= xs[i];\n  }\n  return result;\n};\n\nconst sqrt = (x) => {\n  const n = x;\n  let r = n;\n  let i = 1;\n  while (r < n) {\n    r = n - i * i;\n    i++;\n  }\n  return i;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  for (let i = 2; i <= n; i++) {\n    result *= i;\n  }\n  return result;\n};\n\nconst fibonacci = (n) => {\n  if (n < 2) {\n    return n;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst sum = (xs) => {\n  let sum = 0;\n  for (let i = 0; i < xs.length; i++) {\n    sum += xs[i];\n  }\n  return sum;\n};\n\nmodule.exports = {\n  derivative,\n  product,\n  sqrt,\n  factorial,\n  fibonacci,\n  sum,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let a = 1, b = 2, c = 1;\n  for (let i = 3; i <= n; i++) {\n    let a_next = a + b;\n    let b_next = c;\n    c = a_next;\n    a = b_next;\n    b = a_next;\n  }\n  return c;\n};\n\nmodule.exports = fibfib;\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  if(s === \"\") return 0\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if(s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') count++\n  }\n  return count\n}\n\nexport default vowelCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n    let result = x.toString();\n    if (shift > result.length) {\n        let reversed = result.split('').reverse().join('');\n        return reversed;\n    }\n    let str = result.substr(0, shift);\n    let digits = result.substr(shift);\n    return str + digits;\n};\n\nconst circularShiftInt = (x, shift) => {\n    return parseInt(circularShift(x, shift), 10);\n};\n\nconst sumOfDigits = (x) => {\n    let sum = 0;\n    for (let i = 0; i < x.length; i++) {\n        sum += x.charCodeAt(i);\n    }\n    return sum;\n};\n\nconst sumOfDigitsInt = (x) => {\n    return parseInt(sumOfDigits(x), 10);\n};\n\nconst circularShiftSum = (x, shift) => {\n    let sum = sumOfDigitsInt(x);\n    let shifted = circularShiftInt(sum, shift);\n    return shifted;\n};\n\nconsole.log(circularShiftSum(12, 1));\nconsole.log(circularShiftSum(12, 2));\nconsole.log(circularShiftSum(12, 3));\nconsole.log(circularShiftSum(12, 4));\nconsole.log(circularShiftSum(12, 5));\nconsole.log(circularShiftSum(12, 6));\nconsole.log(circularShiftSum(12, 7));\nconsole.log(circularShiftSum(12, 8));\nconsole.log(circularShiftSum(12, 9));\nconsole.log(circularShiftSum(12, 10));\nconsole.log(circularShiftSum(12, 11));\nconsole.log(circularShiftSum(12, 12));\nconsole.log(circularShiftSum(12, 13));\nconsole.log(circularShiftSum(12, 14));\nconsole.log(circularShiftSum(12, 15));\nconsole.log(circularShiftSum(12, 16));\nconsole.log(circularShiftSum(12, 17));\nconsole.log(circularShiftSum(12, 18));\nconsole.log(circularShiftSum(12, 19));\nconsole.log(circularShiftSum(12, 20));\nconsole.log(circularShiftSum(12, 21));\nconsole.log(circularShiftSum(12, 22));\nconsole.log(circularShiftSum(12, 23));\nconsole.log(circularShiftSum(12, 24));\nconsole.log(circularShiftSum(12, 25));\nconsole.log(circularShiftSum(12, 26));\nconsole.log(circularShiftSum(12, 27));\nconsole.log(circularShiftSum(12, 28));\nconsole.log(circularShiftSum(12, 29));\nconsole.log(circularShiftSum(12, 30));\nconsole.log(circularShiftSum(12, 31));\nconsole.log(circularShiftSum(12, 32));\nconsole.log(circularShiftSum(12, 33));\nconsole.log(circularShiftSum(12, 34));\nconsole.log(circularShiftSum(12, 35));\nconsole.log(circularShiftSum(12, 36));\nconsole.log(circularShiftSum(12, 37));\nconsole.log(circularShiftSum(12, 38));\nconsole.log(circularShiftSum(12, 39));\nconsole.log(circularShiftSum(12, 40));\nconsole.log(circularShiftSum(12, 41));\nconsole.log(circularShiftSum(12, 42));\nconsole.log(circularShiftSum(12, 43));\nconsole.log(circularShiftSum(12, 44));\nconsole.log(circularShiftSum(12, 45));\nconsole.log(circularShiftSum(12, 46));\nconsole.log(circularShiftSum(12, 47));\nconsole.log(circularShiftSum(12, 48));\nconsole.log(circularShiftSum(12, 49));\nconsole.log(circularShiftSum(12, 50));\nconsole.log(circularShiftSum(12, 51));\nconsole.log(circularShiftSum(12, 52));\nconsole.log(circularShiftSum(12, 53));\nconsole.log(circularShiftSum(12, 54));\nconsole.log(circularShiftSum(12, 55));\nconsole.log(circularShiftSum(12, 56));\nconsole.log(circularShiftSum(12, 57));\nconsole.log(circularShiftSum(12, 58));\nconsole.log(circularShiftSum(12, 59));\nconsole.log(circularShiftSum(12, 60));\nconsole.log(circularShiftSum(12, 61));\nconsole.log(circularShiftSum(12, 62));\nconsole.log(circularShiftSum(12, 63));\nconsole.log(circularShiftSum(12, 64));\nconsole.log(circularShiftSum(12, 65));\nconsole.log(circularShiftSum(12, 66));\nconsole.log(circularShiftSum(12, 67));\nconsole.log(circularShiftSum(12, 68));\nconsole.log(circularShiftSum(12, 69));\nconsole.log(circularShiftSum(12, 70));\nconsole.log(circularShiftSum(12, 71));\nconsole.log(circularShiftSum(12, 72));\nconsole.log(circularShiftSum(12, 73));\nconsole.log(circularShiftSum(12, 74));\nconsole.log(circularShiftSum(12, 75));\nconsole.log(circularShiftSum(12, 76));\nconsole.log(circularShiftSum(12, 77));\nconsole.log(circularShiftSum(12, 78));\nconsole.log(circularShiftSum(12, 79));\nconsole.log(circularShiftSum(12, 80));\nconsole.log(circularShiftSum(12, 81));\nconsole.log(circularShiftSum(12, 82));\nconsole.log(circularShiftSum(12, 83));\nconsole.log(circularShiftSum(12, 84));\nconsole.log(circularShiftSum(12, 85));\nconsole.log(circularShiftSum"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  return s.split('').reduce((pre, cur) => {\n    return pre + cur.charCodeAt(0) - 97\n  }, 0)\n}\n\nexport default digitSums\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const numberOfApples = parseInt(s);\n  const numberOfOranges = parseInt(s.substr(numberOfApples + 1));\n  const numberOfMango = parseInt(s.substr(numberOfApples + numberOfOranges + 2));\n\n  return numberOfMango;\n}\n\nexport default fruitDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  let index = 0\n  let value = arr[index]\n  let plucked = [value, index]\n  let result = [plucked]\n  let even = arr.reduce((pre, curr, index) => {\n    if (curr % 2 === 0) {\n      if (value === 0) return false\n      if (value <= 0) return false\n      if (value === 1) return false\n      if (value === 2) return true\n      if (value > 2) return false\n      if (value < -1) return false\n      return value\n    }\n    return true\n  }, true)\n  while (!even) {\n    index++\n    if (index === arr.length) return []\n    value = arr[index]\n    plucked = [value, index]\n    result.push(plucked)\n    even = arr.reduce((pre, curr, index) => {\n      if (curr % 2 === 0) {\n        if (value === 0) return false\n        if (value <= 0) return false\n        if (value === 1) return false\n        if (value === 2) return true\n        if (value > 2) return false\n        if (value < -1) return false\n        return value\n      }\n      return true\n    }, true)\n  }\n  return result\n}\n\nconst arr = [1, 0, 3, 0, 4, 2]\nconsole.log(pluck(arr))\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let greatest = -1;\n  for (let x of lst) {\n    if (greatest < x) {\n      greatest = x;\n    }\n  }\n  return greatest;\n}\n\nconst search2 = (lst) => {\n  let greatest = -1;\n  for (let x of lst) {\n    if (greatest < x) {\n      greatest = x;\n    }\n  }\n  return greatest;\n}\n\nconst search3 = (lst) => {\n  let greatest = -1;\n  for (let x of lst) {\n    if (greatest < x) {\n      greatest = x;\n    }\n  }\n  return greatest;\n}\n\nconsole.log(search([4, 1, 2, 2, 3, 1])) // 2\nconsole.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])) // 3\nconsole.log(search([5, 5, 4, 4, 4])) // -1\nconsole.log(search2([4, 1, 2, 2, 3, 1])) // 2\nconsole.log(search2([1, 2, 2, 3, 3, 3, 4, 4, 4])) // 3\nconsole.log(search2([5, 5, 4, 4, 4])) // -1\nconsole.log(search3([4, 1, 2, 2, 3, 1])) // 2\nconsole.log(search3([1, 2, 2, 3, 3, 3, 4, 4, 4])) // 3\nconsole.log(search3([5, 5, 4, 4, 4])) // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  let current = 1;\n  let index = 0;\n  const result = [];\n  while (current < lst.length) {\n    if (lst[current - 1] < lst[current]) {\n      index = current - 1;\n      break;\n    }\n    if (lst[current] < lst[current + 1]) {\n      index = current + 1;\n      break;\n    }\n    current++;\n  }\n  while (current < lst.length) {\n    if (lst[current] < lst[current + 1]) {\n      index = current + 1;\n      break;\n    }\n    result.push(lst[current]);\n    current++;\n  }\n  return result;\n};\n\nmodule.exports = strangerSortsLists;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a < c && b < c) {\n    return (((a + b) + c) / 2).toFixed(2)\n  }\n  if (a > c && b > c) {\n    return (((a + b) + c) / 2).toFixed(2)\n  }\n  if (a > c && b < c) {\n    return (((a + b) + c) / 2).toFixed(2)\n  }\n  if (a < c && b > c) {\n    return (((a + b) + c) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the length of a side and the area of the triangle, return the\n  length of the opposite side.\n  */\nconst oppositeSide = (length, area) => {\n  return (length * (area / 2)).toFixed(2)\n}\n\n/*\n  Given the length of a side and the area of the triangle, return the\n  length of the longest side.\n  */\nconst longestSide = (length, area) => {\n  if (area === 0) {\n    return length\n  }\n  return (length * (area / 2)).toFixed(2)\n}\n\n/*\n  Given the lengths of the three sides of a triangle, return the area of the\n  triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  */\nconst area = (a, b, c) => {\n  if (a < c && b < c) {\n    return ((a + b + c) / 2).toFixed(2)\n  }\n  if (a > c && b > c) {\n    return ((a + b + c) / 2).toFixed(2)\n  }\n  if (a > c && b < c) {\n    return ((a + b + c) / 2).toFixed(2)\n  }\n  if (a < c && b > c) {\n    return ((a + b + c) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the area of a triangle and the length of one of the sides, return\n  the length of the opposite side.\n  */\nconst oppositeSide = (area, length) => {\n  return (area * (length / 2)).toFixed(2)\n}\n\n/*\n  Given the area of a triangle and the length of one of the sides, return\n  the length of the longest side.\n  */\nconst longestSide = (area, length) => {\n  return (area * (length / 2)).toFixed(2)\n}\n\n/*\n  Given the area of a triangle, return the area of the opposite triangle\n  rounded to 2 decimal points if the area of the opposite triangle is\n  a valid triangle. Otherwise return -1.\n  */\nconst oppositeTriangle = (area) => {\n  if (area > 0) {\n    return ((area * (oppositeSide(area, area))) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the area of a triangle, return the area of the opposite triangle\n  rounded to 2 decimal points if the area of the opposite triangle is\n  a valid triangle. Otherwise return -1.\n  */\nconst longestTriangle = (area) => {\n  if (area > 0) {\n    return ((area * (longestSide(area, area))) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the area of a triangle and the length of one of the sides, return\n  the area of the opposite triangle rounded to 2 decimal points if the area\n  of the opposite triangle is a valid triangle. Otherwise return -1.\n  */\nconst oppositeTriangle = (area, length) => {\n  if (area > 0) {\n    return ((area * (oppositeSide(area, length))) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the area of a triangle and the length of one of the sides, return\n  the area of the opposite triangle rounded to 2 decimal points if the area\n  of the opposite triangle is a valid triangle. Otherwise return -1.\n  */\nconst longestTriangle = (area, length) => {\n  if (area > 0) {\n    return ((area * (longestSide(area, length))) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the length of the opposite side, return the area of the opposite triangle\n  rounded to 2 decimal points if the area of the opposite triangle is a valid triangle.\n  Otherwise return -1.\n  */\nconst oppositeTriangle = (length, area) => {\n  if (area > 0) {\n    return ((area * (oppositeSide(length, area))) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the length of the longest side, return the area of the opposite triangle\n  rounded to 2 decimal points if the area of the opposite triangle is a valid triangle.\n  Otherwise return -1.\n  */\nconst longestTriangle = (length, area) => {\n  if (area > 0) {\n    return ((area * (longestSide(length, area))) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the length of the opposite side, return the area of the opposite triangle\n  rounded to 2 decimal points if the area of the opposite triangle is a valid triangle.\n  Otherwise return -1.\n  */\nconst oppositeTriangle = (length, area) => {\n  if (area > 0) {\n    return ((area * (oppositeSide(length, area))) / 2).toFixed(2)\n  }\n  return -1\n}\n\n/*\n  Given the length of the longest side, return the area of the opposite triangle\n  rounded to 2 decimal points if the area of the opposite triangle is a"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  const qn = q.slice(0, q.length / 2);\n  const wn = q.slice(q.length / 2);\n\n  const sum = qn.reduce((a, b) => a + b);\n\n  return sum <= w && qn.reduce((a, b) => a + b) % 2 === 0;\n};\n\nexport default willItFlied;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let change = 0;\n  let i = 0;\n  let j = arr.length - 1;\n\n  // If the array is a palindrome, return 0\n  if (arr.every((e, index) => arr[index] === arr[index + 1])) return 0;\n\n  // Check every other element for change\n  while (i < j) {\n    // If we are at the first element, then we are done\n    if (i === 0) {\n      // If the current element is not a palindrome, then increase change\n      if (arr[i]!== arr[i + 1]) {\n        change++;\n      }\n\n      // Move to the next element\n      i++;\n      j--;\n\n      // If the current element is a palindrome, then we are done\n      if (arr[j] === arr[j + 1]) return change;\n\n      // Move to the next element\n      continue;\n    }\n\n    // If the current element is not a palindrome, then increase change\n    if (arr[i]!== arr[i + 1]) {\n      change++;\n    }\n\n    // Move to the next element\n    i++;\n\n    // If the current element is a palindrome, then we are done\n    if (arr[j] === arr[j + 1]) {\n      return change;\n    }\n\n    // Move to the next element\n    j--;\n  }\n\n  // If we reach here, then the array is not a palindrome\n  return change;\n};\n\nexport default smallerChange;\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return lst1;\n  }\n\n  const totalLength = lst1.length + lst2.length;\n\n  let lst = [];\n\n  lst1.forEach(word => {\n    lst2.forEach(subword => {\n      if (word.length < subword.length) {\n        lst.push(word + subword);\n      }\n    });\n  });\n\n  return lst.length === totalLength? lst1 : lst;\n};\n\nexport default totalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  let aPrime = prime(a),\n    bPrime = prime(a * 3),\n    cPrime = prime(a * 5);\n\n  if (aPrime == null || bPrime == null || cPrime == null) return false;\n  else return aPrime === bPrime && bPrime === cPrime;\n};\n\nconst prime = (num) => {\n  let max = Math.sqrt(num),\n    i = 0;\n  while (i <= max) {\n    if (num % i === 0) return false;\n    i++;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  return x === Math.pow(n, Math.floor(Math.log(x) / Math.log(n)));\n};\n\nconsole.assert(isSimplePower(1, 4));\nconsole.assert(isSimplePower(2, 2));\nconsole.assert(isSimplePower(8, 2));\nconsole.assert(!isSimplePower(3, 2));\nconsole.assert(!isSimplePower(3, 1));\nconsole.assert(!isSimplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true\n  if (a === 1) return false\n  if (a % 2 === 0) return iscube(a / 2)\n  return (a * a * a) === a\n}\n\nconst is_cube = (a) => iscube(a)\n\nconsole.log(is_cube(0))\nconsole.log(is_cube(1))\nconsole.log(is_cube(2))\nconsole.log(is_cube(3))\nconsole.log(is_cube(4))\nconsole.log(is_cube(5))\nconsole.log(is_cube(6))\nconsole.log(is_cube(7))\nconsole.log(is_cube(8))\nconsole.log(is_cube(9))\nconsole.log(is_cube(10))\nconsole.log(is_cube(11))\nconsole.log(is_cube(12))\nconsole.log(is_cube(13))\nconsole.log(is_cube(14))\nconsole.log(is_cube(15))\nconsole.log(is_cube(16))\nconsole.log(is_cube(17))\nconsole.log(is_cube(18))\nconsole.log(is_cube(19))\nconsole.log(is_cube(20))\nconsole.log(is_cube(21))\nconsole.log(is_cube(22))\nconsole.log(is_cube(23))\nconsole.log(is_cube(24))\nconsole.log(is_cube(25))\nconsole.log(is_cube(26))\nconsole.log(is_cube(27))\nconsole.log(is_cube(28))\nconsole.log(is_cube(29))\nconsole.log(is_cube(30))\nconsole.log(is_cube(31))\nconsole.log(is_cube(32))\nconsole.log(is_cube(33))\nconsole.log(is_cube(34))\nconsole.log(is_cube(35))\nconsole.log(is_cube(36))\nconsole.log(is_cube(37))\nconsole.log(is_cube(38))\nconsole.log(is_cube(39))\nconsole.log(is_cube(40))\nconsole.log(is_cube(41))\nconsole.log(is_cube(42))\nconsole.log(is_cube(43))\nconsole.log(is_cube(44))\nconsole.log(is_cube(45))\nconsole.log(is_cube(46))\nconsole.log(is_cube(47))\nconsole.log(is_cube(48))\nconsole.log(is_cube(49))\nconsole.log(is_cube(50))\nconsole.log(is_cube(51))\nconsole.log(is_cube(52))\nconsole.log(is_cube(53))\nconsole.log(is_cube(54))\nconsole.log(is_cube(55))\nconsole.log(is_cube(56))\nconsole.log(is_cube(57))\nconsole.log(is_cube(58))\nconsole.log(is_cube(59))\nconsole.log(is_cube(60))\nconsole.log(is_cube(61))\nconsole.log(is_cube(62))\nconsole.log(is_cube(63))\nconsole.log(is_cube(64))\nconsole.log(is_cube(65))\nconsole.log(is_cube(66))\nconsole.log(is_cube(67))\nconsole.log(is_cube(68))\nconsole.log(is_cube(69))\nconsole.log(is_cube(70))\nconsole.log(is_cube(71))\nconsole.log(is_cube(72))\nconsole.log(is_cube(73))\nconsole.log(is_cube(74))\nconsole.log(is_cube(75))\nconsole.log(is_cube(76))\nconsole.log(is_cube(77))\nconsole.log(is_cube(78))\nconsole.log(is_cube(79))\nconsole.log(is_cube(80))\nconsole.log(is_cube(81))\nconsole.log(is_cube(82))\nconsole.log(is_cube(83))\nconsole.log(is_cube(84))\nconsole.log(is_cube(85))\nconsole.log(is_cube(86))\nconsole.log(is_cube(87))\nconsole.log(is_cube(88))\nconsole.log(is_cube(89))\nconsole.log(is_cube(90))\nconsole.log(is_cube(91))\nconsole.log(is_cube(92))\nconsole.log(is_cube(93))\nconsole.log(is_cube(94))\nconsole.log(is_cube(95))\nconsole.log(is_cube(96))\nconsole.log(is_cube(97))\nconsole.log(is_cube(98))\nconsole.log(is_cube(99))\nconsole.log(is_cube(100))\nconsole.log(is_cube(101))\nconsole.log(is_cube(102))\nconsole.log(is_cube(103))\nconsole.log(is_cube(104))\nconsole.log(is_cube(105))\nconsole.log(is_cube(106))\nconsole.log(is_cube(107))\nconsole.log(is_cube(108))\nconsole.log(is_cube(109))\nconsole.log(is_cube(110))\nconsole.log(is_cube(111))\nconsole.log(is_cube(112))\nconsole.log(is_cube(113))\nconsole.log(is_cube(114))\nconsole.log(is_cube(115))\nconsole.log(is_cube(116))\nconsole.log(is_cube(117))\nconsole.log(is_cube(118))\nconsole.log(is_cube(119))\nconsole.log(is_cube(120))\nconsole.log(is_cube(121))\nconsole.log(is_"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n  const nums = num.split('');\n  const arr = [];\n  nums.forEach(digit => {\n    const key = parseInt(digit, 16);\n    if(key>1 && key<256) {\n      arr.push(key);\n    }\n  });\n  return arr.reduce((a, b) => a+b);\n};\n\nconsole.log(hexesKeys('AB'));\nconsole.log(hexesKeys('1077E'));\nconsole.log(hexesKeys('ABED1A33'));\nconsole.log(hexesKeys('123456789ABCDEF0'));\nconsole.log(hexesKeys('2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  if(isNaN(decimal)){\n    throw new Error(\"Input must be a number\");\n  }\n  const num = decimal.toString(2);\n  let binary = \"\";\n  for(let i=num.length-1; i>=0; i--){\n    binary = binary + num[i];\n  }\n  binary = \"db\" + binary + \"db\";\n  return binary;\n};\n\n//Binary to decimals\nconst binaryToDecimals = (binary) => {\n  if(!isNaN(binary)){\n    throw new Error(\"Input must be a binary string\");\n  }\n  let decimals = \"\";\n  for(let i=0; i<binary.length-2; i++){\n    decimals = decimals + binary[i];\n  }\n  decimals = decimals + binary[binary.length-1];\n  return parseInt(decimals);\n};\n\n//Takes in a binary string and returns the decimal\nconst binaryToDecimal = (binary) => {\n  if(!isNaN(binary)){\n    throw new Error(\"Input must be a binary string\");\n  }\n  const decimals = binaryToDecimals(binary);\n  return decimals;\n};\n\n//Takes in a binary string and returns a decimal\nconst binaryToDecimal2 = (binary) => {\n  if(!isNaN(binary)){\n    throw new Error(\"Input must be a binary string\");\n  }\n  let decimals = \"\";\n  for(let i=0; i<binary.length-2; i++){\n    decimals = decimals + binary[i];\n  }\n  decimals = decimals + binary[binary.length-1];\n  return parseInt(decimals);\n};\n\nmodule.exports = {\n  decimalsToBinary,\n  binaryToDecimal,\n  binaryToDecimal2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  const length = s.length;\n  if (length < 3) {\n    return false;\n  }\n  const letters = s.split('');\n  const lastLetter = letters[length - 1];\n  const count = 0;\n  let current = 0;\n  for (let i = 0; i < length - 1; i++) {\n    const currentLetter = letters[i];\n    if (currentLetter === lastLetter) {\n      count++;\n      current++;\n      if (current === 3) {\n        if (count === 3) {\n          return true;\n        }\n      }\n    } else if (current === 0) {\n      count = 1;\n      current = 1;\n    } else {\n      count = 0;\n      current = 0;\n    }\n  }\n  return false;\n};\n\nconsole.log(isHappiest('a')); // false\nconsole.log(isHappiest('aa')); // false\nconsole.log(isHappiest('abcd')); // true\nconsole.log(isHappiest('aabb')); // false\nconsole.log(isHappiest('adb')); // true\nconsole.log(isHappiest('xyy')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const letterGrades = ['A+', 'B', 'C-', 'C', 'A-', 'B+', 'C', 'D', 'D-', 'E']\n  return grades.map(grade => {\n    const diff = grade - 3.3\n    if (diff >= 0) {\n      return 'B'\n    } else if (diff <= -0.2) {\n      return 'B-'\n    } else if (diff <= -0.7) {\n      return 'C-'\n    } else if (diff <= -1.2) {\n      return 'C'\n    } else if (diff <= -1.7) {\n      return 'C-'\n    } else if (diff <= -2.3) {\n      return 'D-'\n    } else if (diff <= -3.0) {\n      return 'D'\n    } else if (diff <= -3.7) {\n      return 'D-'\n    } else if (diff <= -4.0) {\n      return 'E'\n    } else {\n      return 'E-'\n    }\n  })\n}\n\n/*\n  Input: [4.0, 3, 1.7, 2, 3.5]\n  Output: ['A+', 'B', 'C-', 'C', 'A-']\n  Explanation:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |\n  |"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let isPrime = false;\n  for (let i = 2; i < string.length; i++) {\n    if (string.indexOf(i) === -1) {\n      return false;\n    }\n    for (let j = 2; j < i; j++) {\n      if (string.indexOf(i * j) === -1) {\n        return false;\n      }\n    }\n    isPrime = true;\n  }\n  return isPrime;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  const digits = n.toString().split(\"\").reverse().join(\"\");\n  const result = {};\n  result[1] = digits.length;\n  result[2] = 1;\n  for (let i = 3; i <= n; i++) {\n    const curDigits = digits.slice(0, i - 1).join(\"\");\n    if (curDigits.indexOf(\"1\") === 0) {\n      result[i] = 1 + result[i - 1];\n    }\n    if (curDigits.indexOf(\"1\") === digits.length - i) {\n      result[i] = result[i - 1] + 1;\n    }\n  }\n  return result;\n};\n\nmodule.exports = startOneEnds;\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  let sum = 0;\n  let digit = 0;\n  for (digit = N; digit > 0; digit--) {\n    sum += N % 2;\n    N /= 2;\n  }\n  return sum.toString();\n};\n\nconst test = () => {\n  const N = 1000;\n  console.log(solve(N));\n  const N = 1000;\n  console.log(solve(N));\n  const N = 150;\n  console.log(solve(N));\n  const N = 147;\n  console.log(solve(N));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n    const lst = Array.from(lst);\n    let i = 0;\n    while (i < lst.length) {\n        if (lst[i] % 2 === 1) {\n            lst.push(lst[i]);\n        }\n        i++;\n    }\n    return lst;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n  let result = s.replace(/\\s+/g, '')\n  let result_array = result.split(' ')\n  let result_ordered_array = []\n\n  for (let i = 0; i < result_array.length; i++) {\n    let value_array = []\n    for (let j = 0; j < result_array[i].length; j++) {\n      value_array.push(result_array[i].charCodeAt(j))\n    }\n    let value_array_sorted = value_array.sort()\n    let new_word = ''\n    for (let j = 0; j < value_array_sorted.length; j++) {\n      new_word += String.fromCharCode(value_array_sorted[j])\n    }\n    result_ordered_array.push(new_word)\n  }\n  return result_ordered_array.join(' ')\n}\n\n/*\n  Write a function that takes a string and returns a new string with all\n  the words reversed.\n  For example:\n  reverse('Hello World') returns 'dlrow olleH'\n  reverse('Hello World!!') returns 'dloH wrld!!'\n  reverse('Hello World!!!') returns 'dloH wdld!!!'\n  */\nconst reverse = (s) => {\n  let result = s.split(' ').reverse().join(' ')\n  return result\n}\n\n/*\n  Write a function that takes a string and returns a new string with all\n  the words reversed except for the first and last word.\n  For example:\n  reverse('Hello World!!!') returns 'dloH wdld!!!'\n  */\nconst reverse_except_first_last = (s) => {\n  let first_word = s.split(' ')[0]\n  let last_word = s.split(' ').pop()\n  let result = first_word + last_word\n  return result\n}\n\nmodule.exports = {\n  antisShuffles,\n  reverse,\n  reverse_except_first_last\n}\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  return lst.map(row => row.map(cell => ({row, cell})))\n   .sort((a, b) => a.row - b.row)\n   .sort((a, b) => b.cell - a.cell)\n   .map(coord => coord.map(cell => cell.row + ',' + cell.cell))\n   .slice(0, x)\n   .map(cell => cell.slice(1))\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer y, find integers y in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getColumns([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (1, 0), (1, 5), (2, 0)]\n  getColumns([], 1) == []\n  getColumns([[], [1], [1, 2, 3]], 3) == [(0, 1), (2, 3)]\n  */\nconst getColumns = (lst, y) => {\n  return lst.map(row => row.map(cell => ({row, cell})))\n   .sort((a, b) => a.cell - b.cell)\n   .sort((a, b) => a.row - b.row)\n   .map(coord => coord.map(cell => cell.row + ',' + cell.cell))\n   .slice(0, y)\n   .map(cell => cell.slice(1))\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers y in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getRowsAndColumns([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (0, 4), (1, 0), (1, 5), (2, 0)]\n  getRowsAndColumns([], 1) == []\n  getRowsAndColumns([[], [1], [1, 2, 3]], 3) == [(0, 1), (2, 3)]\n  */\nconst getRowsAndColumns = (lst, y) => {\n  return lst.map(row => row.map(cell => ({row, cell})))\n   .sort((a, b) => a.cell - b.cell)\n   .sort((a, b) => a.row - b.row)\n   .map(coord => coord.map(cell => cell.row + ',' + cell.cell))\n   .slice(0, y)\n   .map(cell => cell.slice(1))\n}\n\n/*\n  Given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers y in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by columns in ascending order.\n  Also, sort coordinates of the row by rows in descending order.\n  \n  Examples:\n  getRowsAndColumns([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 1), (0, 5), (1, 1), (1, 6), (2, 1)]\n  getRowsAndColumns([], 1) == []\n  getRowsAndColumns([[], [1], [1, 2, 3]], 3) == [(0, 2), (2, 3)]\n  */\nconst getRowsAndColumns2 = (lst, y) => {\n  return lst.map(row => row.map(cell => ({row, cell})))\n   .sort((a, b) => a.cell - b.cell)\n   .sort((a, b) => a.row - b.row)\n   .map(coord => coord.map(cell => cell.row + ',' + cell.cell))\n   .slice(0, y"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  const sortedArray = array.slice().sort(function (a, b) {\n    return a - b\n  })\n\n  if (sortedArray[0] % 2 === 0) {\n    return sortedArray\n  } else {\n    return sortedArray.reverse()\n  }\n}\n\nconsole.log(sortsArray([5, 4, 3, 0, 1, 2, 6]))\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  //TODO: Refactor this function\n  let encrypt = '';\n  let i = 0;\n  let j = 0;\n  for (i = 0; i < s.length; i++) {\n    let letter = s[i];\n    //console.log(letter);\n    //Rotate down by two\n    let rotate = letter;\n    if (letter.length === 1) {\n      rotate = '0' + letter;\n    }\n    //Rotate up by two\n    rotate = rotate.charAt(1) + rotate.charAt(0);\n    //Add to encrypt string\n    encrypt += rotate;\n    //console.log(rotate);\n  }\n  return encrypt;\n}\n\n// console.log(encrypt('gf'));\n// console.log(encrypt('asdfghjkl'));\n// console.log(encrypt('hi'));\n// console.log(encrypt('et'));\n// console.log(encrypt('pqrstuvwxyz'));\n// console.log(encrypt('abcdefghijklmnopqrstuvwxyz'));\n\n/*\nWrite a function to encrypt a message in the following format\n  encrypt(message, key)\nwhere message is a string and key is a string of the same length.\nFor example:\n  encrypt('hello world', 'hello') returns 'gw'\n  encrypt('hello world', 'world') returns 'jh'\n  encrypt('hello world', 'hello world') returns 'hq'\n*/\nconst encrypt = (s, k) => {\n  //TODO: Refactor this function\n  let encrypt = '';\n  let i = 0;\n  let j = 0;\n  for (i = 0; i < s.length; i++) {\n    let letter = s[i];\n    //Rotate down by two\n    let rotate = letter;\n    if (letter.length === 1) {\n      rotate = '0' + letter;\n    }\n    //Rotate up by two\n    rotate = rotate.charAt(1) + rotate.charAt(0);\n    //Add to encrypt string\n    encrypt += rotate;\n    //console.log(rotate);\n  }\n  for (j = 0; j < k.length; j++) {\n    //Add letter to encrypt string\n    encrypt += k[j];\n  }\n  return encrypt;\n}\n\n// console.log(encrypt('hello world', 'hello'));\n// console.log(encrypt('hello world', 'world'));\n// console.log(encrypt('hello world', 'hello world'));\n\n/*\nWrite a function to decrypt a message in the following format\n  decrypt(message, key)\nwhere message is a string and key is a string of the same length.\nFor example:\n  decrypt('hq', 'hello') returns 'hello world'\n  decrypt('jh', 'hello') returns 'hello world'\n  decrypt('gw', 'hello') returns 'hello world'\n*/\nconst decrypt = (s, k) => {\n  //TODO: Refactor this function\n  let decrypt = '';\n  let i = 0;\n  let j = 0;\n  for (i = 0; i < s.length; i++) {\n    let letter = s[i];\n    //Rotate down by two\n    let rotate = letter;\n    if (letter.length === 1) {\n      rotate = '0' + letter;\n    }\n    //Rotate up by two\n    rotate = rotate.charAt(1) + rotate.charAt(0);\n    //Add to encrypt string\n    decrypt += rotate;\n    //console.log(rotate);\n  }\n  for (j = 0; j < k.length; j++) {\n    //Add letter to encrypt string\n    decrypt += k[j];\n  }\n  return decrypt;\n}\n\n// console.log(decrypt('hq', 'hello'));\n// console.log(decrypt('jh', 'hello'));\n// console.log(decrypt('gw', 'hello'));\n\n/*\nWrite a function to encrypt a message using the following format\n  encrypt(message, key)\nwhere message is a string and key is a string of the same length.\nFor example:\n  encrypt('hello world', 'hello') returns 'gw'\n  encrypt('hello world', 'world') returns 'jh'\n  encrypt('hello world', 'hello world') returns 'hq'\n*/\nconst encrypt = (s, k) => {\n  //TODO: Refactor this function\n  let encrypt = '';\n  let i = 0;\n  let j = 0;\n  for (i = 0; i < s.length; i++) {\n    let letter = s[i];\n    //Rotate down by two\n    let rotate = letter;\n    if (letter.length === 1) {\n      rotate = '0' + letter;\n    }\n    //Rotate up by two\n    rotate = rotate.charAt(1) + rotate.charAt(0);\n    //Add to encrypt string\n    encrypt += rotate;\n    //console.log(rotate);\n  }\n  for (j = 0; j < k.length; j++) {\n    //Add letter to encrypt string\n    encrypt += k[j];\n  }\n  return encrypt;\n}\n\n// console.log(encrypt('hello world', 'hello'));\n// console.log(encrypt('hello world', 'world'));\n// console.log(encrypt('hello world', 'hello world'));\n\n/*\nWrite a function to decrypt a message using the following format\n  decrypt(message, key)\nwhere message is a string and key is a string of the same length.\nFor example:\n  decrypt('hq', 'hello') returns 'hello world'\n  decrypt('jh', 'hello') returns 'hello world'\n  decrypt('gw', 'hello')"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  const len = lst.length\n  if (len === 0) return null\n  let min = lst[0]\n  for (let i = 1; i < len; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n    }\n  }\n  return min\n}\n\nmodule.exports = nextSmallest\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n  let len = S.length;\n  let numOfBoredom = 0;\n  let word = S.substr(0, 1);\n  if (word === \"I\") {\n    numOfBoredom += 1;\n    word = S.substr(1, 1);\n  }\n  while (word!== undefined) {\n    if (word === \".\") {\n      len -= 2;\n      word = S.substr(len, 1);\n    } else if (word === \"?\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \"!\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \" \") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else {\n      word = S.substr(1, 1);\n    }\n  }\n  return numOfBoredom;\n};\n\n/*\n  Given a string S, count the number of '.', '?' or '!' in S.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBored = (S) => {\n  let len = S.length;\n  let numOfBoredom = 0;\n  let word = S.substr(0, 1);\n  while (word!== undefined) {\n    if (word === \".\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \"?\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \"!\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \" \") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else {\n      word = S.substr(1, 1);\n    }\n  }\n  return numOfBoredom;\n};\n\nconst isBored = (S) => {\n  let len = S.length;\n  let numOfBoredom = 0;\n  let word = S.substr(0, 1);\n  while (word!== undefined) {\n    if (word === \".\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \"?\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \"!\") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else if (word === \" \") {\n      len -= 1;\n      word = S.substr(len, 1);\n    } else {\n      word = S.substr(1, 1);\n    }\n  }\n  return numOfBoredom;\n};\n\nexport {isBored, isBored, isBored};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let total = x + y + z;\n  return x === total || y === total || z === total;\n};\n\nconst anyInt2 = (x, y, z) => {\n  return x === y + z;\n};\n\nconst anyInt3 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt4 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt5 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt6 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt7 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt8 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt9 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt10 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt11 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt12 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt13 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt14 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt15 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt16 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt17 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt18 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt19 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n\nconst anyInt20 = (x, y, z) => {\n  return x === y + z && x === z;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let charMap = {\n    'a': 'A',\n    'b': 'B',\n    'c': 'C',\n    'd': 'D',\n    'e': 'E',\n    'f': 'F',\n    'g': 'G',\n    'h': 'H',\n    'i': 'I',\n    'j': 'J',\n    'k': 'K',\n    'l': 'L',\n   'm': 'M',\n    'n': 'N',\n    'o': 'O',\n    'p': 'P',\n    'q': 'Q',\n    'r': 'R',\n   's': 'S',\n    't': 'T',\n    'u': 'U',\n    'v': 'V',\n    'w': 'W',\n    'x': 'X',\n    'y': 'Y',\n    'z': 'Z'\n  }\n  let messageArray = message.split('')\n  let encodedArray = []\n  for (let i = 0; i < messageArray.length; i++) {\n    if (charMap[messageArray[i]]) {\n      encodedArray.push(charMap[messageArray[i]])\n    } else {\n      encodedArray.push(messageArray[i])\n    }\n  }\n  return encodedArray.join('')\n}\n\nconsole.log(encode('This is a message'))\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  let prime = 0;\n  const primeArray = [2,3,5,7,11,13,17,19,23,29,31,37,41,43,47,53,59,61,67,71,73,79,83,89,97,101,103,107,109,113,127,131,137,139,149,151,157,163,167,173,179,181,191,193,197,199,211,223,227,229,233,239,241,251,257,263,269,271,277,281,283,293,307,311,313,317,331,337,347,349,353,359,367,373,379,383,389,397,401,409,419,421,431,433,439,443,449,457,461,463,467,479,487,491,499,503,509,521,523,541,547,557,563,569,571,577,587,593,599,601,607,613,617,619,631,641,643,647,653,659,661,673,677,683,691,701,709,719,727,733,739,743,751,757,761,769,773,787,797,809,811,821,823,827,829,839,853,857,859,863,877,881,883,887,907,911,919,929,937,941,947,953,967,971,977,983,991,997,1009,1013,1019,1021,1031,1033,1039,1049,1051,1061,1063,1069,1087,1091,1093,1097,1103,1109,1117,1123,1129,1151,1153,1163,1171,1181,1187,1193,1201,1213,1217,1223,1229,1231,1237,1249,1259,1277,1279,1283,1289,1291,1297,1301,1303,1307,1319,1321,1327,1361,1367,1373,1381,1399,1409,1423,1427,1429,1433,1439,1447,1451,1453,1459,1471,1481,1483,1487,1489,1493,1499,1511,1523,1531,1543,1549,1553,1559,1567,1571,1579,1583,1597,1601,1607,1609,1613,1619,1621,1627,1637,1657,1663,1667,1669,1693,1697,1699,1709,1721,1723,1733,1741,1747,1753,1759,1777,1783,1787,1789,1801,1811,1823,1831,1847,1861,1867,1871,1873,1877,1879,1889,1901,1907,1913,1931,1933,1949,1951,1973,1979,1987,1993,1997,1999,2003,2011,2017,2027,2029,2039,2053,2063,2069,2081,2083,2087,2089,2099,2111,2113,2129,2131,2137,2141,2143,2153,2161,2179,2203,2207,2213,2221,2237,2239,2243,2251,2267,2269,2273,2281,2287,2293,2297,2309,2311,2333,2339,2341,2347,2351,2357,2371,2377,2381,2383,2389,2393,2399,2411,2417,2423,2437,2441,2447,2459,2467,2473,2477,2503,2521,2531,2539,2543,2549,2551,2557,2579,2591,2593,2599,2603,2617,2621,2633,2647,2657,2659,2663,2671,2677,2683,2687,2689,2693,2699,2707,2711,2713,2719,2729,2731,2741,2749,2753,2767,2777,2789,2791,2797,2801,2803,2819,2833,2837,2843,2851,2857,2861,2879,2887,2897,2903,2909,2917,2927,2939,2953,2957,2963,2969,2971,2999,3001,3011,3019,3023,3037,3041,3049,3061,3067,3079,3083,3089,3109,3119,3121,3137,3163,3167,3169,3181,3187,3191,3203,3209,3217,3221,3229,3251,"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n  if (dict.length === 0) {\n    return false;\n  }\n  for (let k in dict) {\n    if (!isString(k)) {\n      return false;\n    }\n    if (k.toLowerCase()!== k) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isString = (s) => typeof s ==='string' || s instanceof String;\n\n/*\n  Given a string, return true if all characters are digits, else return false.\n  Examples:\n  isDigits(\"123\") should return true.\n  isDigits(\"123\") should return false.\n  isDigits(\"\") should return false.\n  isDigits(\"a\") should return false.\n  isDigits(\"a123\") should return true.\n  isDigits(\"a1b\") should return false.\n  isDigits(\"a123\") should return true.\n  isDigits(\"123\") should return true.\n  */\nconst isDigits = (s) => {\n  if (s === \"\") {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!isDigit(s[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isDigit = (s) => s >= '0' && s <= '9';\n\n/*\n  Given a string, return true if all characters are lower case letters, else return false.\n  Examples:\n  isLowerCase(\"ABC\") should return true.\n  isLowerCase(\"ABC\") should return false.\n  isLowerCase(\"\") should return false.\n  isLowerCase(\"a\") should return false.\n  isLowerCase(\"a\") should return true.\n  isLowerCase(\"a1b\") should return false.\n  isLowerCase(\"a123\") should return true.\n  isLowerCase(\"a1b\") should return true.\n  isLowerCase(\"a123\") should return true.\n  isLowerCase(\"123\") should return true.\n  */\nconst isLowerCase = (s) => {\n  if (s === \"\") {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!isLowerCase(s[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isLowerCase = (s) => s >= 'a' && s <= 'z';\n\nconst isLetter = (s) => isLowerCase(s) || isUpperCase(s);\n\nconst isUpperCase = (s) => s >= 'A' && s <= 'Z';\n\nconst isLetters = (s) => {\n  if (s === \"\") {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!isLetter(s[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isLetters = (s) => s.includes('');\n\nconst isAlphaNumeric = (s) => {\n  if (s === \"\") {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!isAlphaNumeric(s[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isAlphaNumeric = (s) => {\n  if (s === \"\") {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!isAlphaNumeric(s[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isAlphaNumeric = (s) => s.includes('');\n\nconst isDigits = (s) => {\n  if (s === \"\") {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!isDigit(s[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isDigits = (s) => s.includes('');\n\nconst isAlpha = (s) => {\n  if (s === \"\") {\n    return false;\n  }\n  for (let i = 0; i < s.length; i++) {\n    if (!isAlpha(s[i])) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isAlpha = (s) => s.includes('');\n\nconst isSpace = (s) => s ==='';\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes('');\n\nconst isSpace = (s) => s.includes(''"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n    const primes = []\n    const primesLessThanN = []\n    let i = 0\n    while (i < n) {\n        let x = Math.floor(Math.random() * n) + 1\n        if (isPrime(x)) {\n            primes.push(x)\n            if (x <= n) {\n                primesLessThanN.push(x)\n            }\n        }\n        i++\n    }\n    return primesLessThanN\n}\n\n// https://en.wikipedia.org/wiki/Prime_number\nconst isPrime = (n) => {\n    const sqrt = Math.sqrt(n)\n    for (let i = 2; i <= sqrt; i++) {\n        if (n % i === 0) {\n            return false\n        }\n    }\n    return true\n}\n\n// http://www.geeksforgeeks.org/write-a-program-to-print-all-the-prime-numbers-less-than-a-number/\nconst primeNumbersLessThanN = (n) => {\n    const primes = []\n    for (let i = 1; i < n; i++) {\n        if (isPrime(i)) {\n            primes.push(i)\n        }\n    }\n    return primes\n}\n\nconst printPrimes = (primes) => {\n    for (let i = 0; i < primes.length; i++) {\n        console.log(primes[i])\n    }\n}\n\n// const printPrimes = () => {\n//     const primes = primeNumbersLessThanN(0)\n//     printPrimes(primes)\n// }\n\nconst printPrimeNumbersLessThanN = (n) => {\n    const primes = primeNumbersLessThanN(n)\n    printPrimes(primes)\n}\n\n// const printPrimeNumbersLessThanN = (n) => {\n//     const primes = primeNumbersLessThanN(n)\n//     printPrimes(primes)\n// }\n\nconst main = () => {\n    printPrimeNumbersLessThanN(100)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let a1 = a.toString().charAt(0),\n    b1 = b.toString().charAt(0),\n    p = a1 * b1,\n    s = a1 + b1;\n  let a2 = a.toString().substring(1),\n    b2 = b.toString().substring(1);\n  let p2 = p * multiply(a2, b2);\n  let s2 = s + p2;\n  let c = parseInt(s2);\n  return c;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count += 1;\n        }\n    }\n    return count;\n};\n\nmodule.exports = countUpper;<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return ceil;\n  } else if (diff < 0) {\n    return floor;\n  } else {\n    return float;\n  }\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closestInteger = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return floor;\n  } else if (diff < 0) {\n    return ceil;\n  } else {\n    return float;\n  }\n};\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInteger(\"10\")\n  10\n  >>> closestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInteger(\"14.5\") should\n  return 15 and closestInteger(\"-14.5\") should return -15.\n  */\nconst closestInteger2 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return floor;\n  } else if (diff < 0) {\n    return ceil;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger3 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return ceil;\n  } else if (diff < 0) {\n    return floor;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger4 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return ceil;\n  } else if (diff < 0) {\n    return floor;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger5 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return floor;\n  } else if (diff < 0) {\n    return ceil;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger6 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return floor;\n  } else if (diff < 0) {\n    return ceil;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger7 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return ceil;\n  } else if (diff < 0) {\n    return floor;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger8 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return ceil;\n  } else if (diff < 0) {\n    return floor;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger9 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);\n\n  if (diff > 0) {\n    return floor;\n  } else if (diff < 0) {\n    return ceil;\n  } else {\n    return float;\n  }\n};\n\nconst closestInteger10 = (value) => {\n  const float = parseFloat(value);\n  const floor = Math.floor(float);\n  const ceil = Math.ceil(float);\n  const diff = (ceil - floor);"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  const odds = new Array(n + 1);\n  for (let i = 0; i <= n; i++) {\n    odds[i] = i % 2 === 0? i + 1 : i;\n  }\n  return odds;\n};\n\nmodule.exports = madeAPiles;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  return s.split(/[,\\s]+/);\n};\n\n/*\n  Split a comma-separated string into an array of strings.\n  \n  For example:\n  splitString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  splitString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst splitString = (s) => {\n  return s.split(/[,\\s]+/);\n};\n\n/*\n  Given a list of words, return a string with each word on a new line.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == \"Hi\\nmy\\nname\\nis\\nJohn\"\n  wordString(\"One, two, three, four, five, six\") == \"One\\ntwo\\nthree\\nfour\\nfive\\nsix\"\n  */\nconst wordString = (s) => {\n  return s.split(/[\\s,]+/).join(\"\\n\");\n};\n\n/*\n  Given a string of words, return a string with each word on a new line.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == \"Hi\\nmy\\nname\\nis\\nJohn\"\n  wordString(\"One, two, three, four, five, six\") == \"One\\ntwo\\nthree\\nfour\\nfive\\nsix\"\n  */\nconst splitString = (s) => {\n  return s.split(/[\\s,]+/).join(\"\\n\");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x >= y) return -1\n  let i = 0\n  while (x >= i * 2 && y >= i * 2) {\n    i += 1\n  }\n  return i\n}\n\n/*This function takes two positive numbers x and y and returns the\n  biggest odd integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 15\n  chooseNum(13, 12) = -1\n  */\nconst chooseOddNum = (x, y) => {\n  if (x >= y) return -1\n  let i = 0\n  while (x >= i * 2 + 1 && y >= i * 2 + 1) {\n    i += 1\n  }\n  return i\n}\n\nconst find_max_num = (x, y) => {\n  if (x >= y) return -1\n  const x_num = chooseNum(x, y)\n  const y_num = chooseNum(x, y)\n  const odd_num = chooseOddNum(x, y)\n\n  const max_num = Math.max(x_num, y_num)\n  const min_num = Math.min(x_num, y_num)\n  const odd_num = Math.max(odd_num, min_num)\n\n  return odd_num\n}\n\nconst test = () => {\n  let x = 10\n  let y = 20\n  console.log(find_max_num(x, y))\n  console.log(find_max_num(x + 1, y))\n  console.log(find_max_num(x, y + 1))\n  console.log(find_max_num(x + 1, y + 1))\n  console.log(find_max_num(x, y))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  const diff = Math.abs(m - n);\n  const start = Math.max(n, m);\n  const end = Math.min(n, m);\n  const total = (start + end) / 2;\n  const remainder = (end - n) % 2;\n  const avg = total + remainder;\n  const binary = (avg % 2).toString(2);\n  return binary;\n};\n\nconsole.log(roundingAvg(1, 5));\nconsole.log(roundingAvg(7, 5));\nconsole.log(roundingAvg(10, 20));\nconsole.log(roundingAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  let result = [];\n  let lastDigit = 0;\n  for(let i = 0; i < x; i++){\n    if(isNaN(x[i])) continue;\n    let digit = parseInt(x[i]);\n    if(digit % 2 == 0) continue;\n    if(result.length == 0) {\n      result.push(x[i]);\n      continue;\n    }\n    let digitIndex = result.indexOf(digit);\n    if(digitIndex == -1) {\n      result.push(x[i]);\n      continue;\n    }\n    if(digit > lastDigit) {\n      result.splice(digitIndex + 1, 0, x[i]);\n      continue;\n    }\n  }\n  return result;\n};\n\nconsole.log(uniqueDigit([15, 33, 1422, 1]));\nconsole.log(uniqueDigit([152, 323, 1422, 10]));<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    const digits = [...new Set(arr.map(x => x.toString(10))), '0']\n    let reverseArr = arr.slice().reverse()\n    reverseArr = reverseArr.filter((x, i) => x.length > 1)\n    \n    return reverseArr.map((x, i) => {\n        let reversedDigits = reverseArr[i].split('').reverse().join('')\n        let reversedDigits = reversedDigits.split('').reverse().join('')\n        let index = digits.indexOf(reversedDigits)\n        \n        return `${digits[index]}${reversedDigits}`\n    })\n}\n\nmodule.exports = byLength\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let a = [1];\n  for (let i = 2; i <= n; i++) {\n    a.push(a[i - 1] * i);\n  }\n  return a;\n};\n\nconst {find} = require('../../../dist/common.min.js');\n\nconst res = find(f(5));\n\nexpect(res).toEqual([1, 2, 6, 24, 15]);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let countEven = 0;\n  let countOdd = 0;\n  let evenCount = 0;\n  let oddCount = 0;\n  for (let i = 1; i <= n; i++) {\n    let palindrome = isPalindrome(i);\n    if (palindrome) {\n      if (palindrome.isEven) {\n        countEven++;\n      } else {\n        countOdd++;\n      }\n    }\n  }\n  return [countEven, countOdd];\n};\n\nexport default evenOdderPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const c = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      c += 1;\n    }\n  }\n  return c;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  let left = 0;\n  let right = arr.length - 1;\n  let mid = (left + right) / 2;\n\n  while (right > left) {\n    while (arr[mid] > arr[right]) {\n      arr[mid], arr[right] = arr[right], arr[mid];\n      --right;\n    }\n    if (arr[mid] > arr[left]) {\n      arr[left], arr[mid] = arr[mid], arr[left];\n      --mid;\n      --left;\n    } else {\n      return true;\n    }\n  }\n  return false;\n};\n\nconst test = (actual) => {\n  console.log(`Test ${actual}`);\n  console.log(`True => ${movingOneBalls(arr)}`);\n};\n\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('True => True');\ntest('"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  let result = 0\n  let i = 0\n  let j = 0\n  const len = lst1.length\n\n  for (i; i < len; i++) {\n    result = lst1[i]\n    for (j; j < len; j++) {\n      if (lst2[j] % 2 === 0) {\n        result = lst2[j]\n        break\n      }\n    }\n    if (result === lst1[i]) {\n      return \"YES\"\n    }\n  }\n  return \"NO\"\n}\n\nmodule.exports = exchanges\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let test = test.toLowerCase().split(' ').map((letter) => {\n    return {\n      letter: letter,\n      count: 0\n    }\n  });\n  let histogram = {};\n  let maxCount = 0;\n  for (let i = 0; i < test.length; i++) {\n    if (histogram[test[i].letter] === undefined) {\n      histogram[test[i].letter] = 0;\n    }\n    histogram[test[i].letter]++;\n    if (histogram[test[i].letter] > maxCount) {\n      maxCount = histogram[test[i].letter];\n    }\n  }\n  return histogram;\n};\n\nconsole.log(histograms('a b c'));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  const len = s.length\n  let i = 0\n  let j = len - 1\n  let isPalindrome = true\n  while (i < len && j >= 0) {\n    if (s[i] === c[j]) {\n      isPalindrome = false\n      j--\n    }\n    i++\n    j--\n  }\n  return [s.substr(i, len - i), isPalindrome]\n}\n\nexport default reversesDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let oddCount = 0\n  let i = 0\n  let s = \"\"\n\n  while (i < lst.length) {\n    s = lst[i]\n    for (let j = 0; j < s.length; j++) {\n      if (parseInt(s[j]) % 2!== 0) {\n        oddCount += 1\n      }\n    }\n    i += 1\n  }\n  return [`the number of odd elements ${oddCount} of the ${lst.length} input.`]\n}\n\nmodule.exports = odderCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const subSums = getSubSums(nums)\n  return Math.min(...subSums)\n}\n\nconst getSubSums = (nums) => {\n  let minSum = nums.reduce((a, b) => a + b)\n  let subSums = []\n  for (let i = 1; i < nums.length; i++) {\n    let subSum = nums[i] + minSum\n    if (subSum < minSum) {\n      subSums.push(subSum)\n      minSum = subSum\n    }\n  }\n  return subSums\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const wellLength = rows * cols;\n\n  const fill = (arr, row, col, capacity) => {\n    if (row === rows - 1 && col === cols - 1) {\n      return 1;\n    }\n\n    let left = 0;\n    let right = capacity - 1;\n    let mid = 0;\n    while (left <= right) {\n      mid = Math.floor((left + right) / 2);\n      if (arr[row * cols + col + mid] < mid) {\n        left = mid + 1;\n      } else if (arr[row * cols + col + mid] > mid) {\n        right = mid - 1;\n      } else {\n        return mid + 1;\n      }\n    }\n  };\n\n  let total = 0;\n  for (let i = 0; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      total += fill(grid[i], i, j, wellLength);\n    }\n  }\n  return total;\n};\n\nconst grid = [\n  [0, 0, 1, 0],\n  [0, 1, 0, 0],\n  [1, 1, 1, 1]\n];\nconst capacity = 1;\n\nconsole.log(fill(grid, 0, 0, wellLength));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n  const sortedArray = [];\n\n  for (let i = 0; i < arr.length; i++) {\n    let lastOne = 0;\n    for (let j = 0; j < 32; j++) {\n      if (arr[i] & 1 << j) {\n        lastOne = j;\n        break;\n      }\n    }\n\n    if (lastOne === 0) {\n      sortedArray.push(arr[i]);\n    } else {\n      let newArray = [];\n\n      while (lastOne) {\n        newArray.push(lastOne);\n        lastOne = (lastOne - 1) / 2;\n      }\n\n      newArray.push(arr[i]);\n\n      sortedArray.push(...newArray);\n    }\n  }\n\n  return sortedArray;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  if (s === '') return [];\n\n  let l = 0;\n  let words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (l === n) break;\n    if (s[i] ==='') {\n      words.push(s.substring(l, i));\n      l = i + 1;\n    }\n  }\n\n  words.push(s.substring(l, s.length));\n  return words;\n};\n\nconsole.log(selectWord('Mary had a little lamb', 3));\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let foundVowel = false;\n  let vowel = 'x';\n  let index = word.length - 1;\n  let prevChar = '';\n  let prevIndex = index - 1;\n  while (!foundVowel) {\n    if (index === -1 || prevIndex === -1) {\n      return '';\n    }\n    if (word[index] === prevChar) {\n      prevIndex--;\n    } else if (word[index] === 'a' || word[index] === 'e' || word[index] === 'i' || word[index] === 'o' || word[index] === 'u' || word[index] === 'y') {\n      vowel = word[index];\n      foundVowel = true;\n    } else {\n      index--;\n    }\n    prevChar = word[index];\n  }\n  return vowel;\n}\n\nconst getWord = (str) => {\n  let word = str.split(' ');\n  return word;\n}\n\nconst main = () => {\n  let word = getWord(process.argv[2]);\n  let vowel = gottenCloserVowel(word[0]);\n  console.log(vowel);\n}\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = []\n  return lst.reduce((acc, curr) => {\n    if (curr === '(') {\n      stack.push(curr)\n    } else if (curr === ')') {\n      while (stack.pop()!== '(') {\n        // do nothing\n      }\n    }\n    acc.push(curr)\n    return acc\n  }, []).length === 0\n}\n\nmodule.exports = matchParens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  const res = [];\n  let min = -999;\n  let max = 0;\n  for (let i = 0; i < k; i++) {\n    min = Math.min(arr[i], min);\n    max = Math.max(arr[i], max);\n    res.push(arr[i]);\n  }\n  if (max!= min) {\n    res.push(max);\n  }\n  return res;\n};\n\nexport default maximums;\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let result = 0;\n  lst.forEach((item) => {\n    if (item % 2 === 1) {\n      result += item;\n    }\n  });\n  return result;\n};\n\nconst solutions = (lst) => {\n  let result = 0;\n  lst.forEach((item) => {\n    if (item % 2 === 1) {\n      result += item;\n    }\n  });\n  return result;\n};<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given two non-empty array of integers arr1 and arr2, return\n  the sum of the elements with at most two digits from the first k elements of arr1 and the elements of arr2.\n\n  Example:\n\n      Input: arr1 = [111,21,3,4000,5,6,7,8,9], arr2 = [21,3,4000,5,6,7,8,9], k = 4\n      Output: 38 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr1) + len(arr2) <= 100\n      2. 1 <= k <= len(arr1) + len(arr2)\n  */\nconst addElementsWithTwoDigits = (arr1, arr2, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr1[i]\n  }\n  for (let i = k; i < len(arr1) + len(arr2); i++) {\n    sum += arr2[i - len(arr1)]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of digits, return the sum of the digits\n  in the first k elements of the array.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 9999 # sum of 111 + 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addDigits = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given two non-empty arrays of integers arr1 and arr2, return the\n  sum of the elements with at most two digits from the first k elements of arr1 and the elements of arr2.\n\n  Example:\n\n      Input: arr1 = [111,21,3,4000,5,6,7,8,9], arr2 = [21,3,4000,5,6,7,8,9], k = 4\n      Output: 38 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr1) + len(arr2) <= 100\n      2. 1 <= k <= len(arr1) + len(arr2)\n  */\nconst addElementsWithTwoDigitsWithTwoDigits = (arr1, arr2, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr1[i]\n  }\n  for (let i = k; i < len(arr1) + len(arr2); i++) {\n    sum += arr2[i - len(arr1)]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr, return the sum of the\n  elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsWithTwoDigits = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given two non-empty arrays of integers arr1 and arr2, return the sum\n  of the elements with at most two digits from the first k elements of arr1\n  and the elements of arr2.\n\n  Example:\n\n      Input: arr1 = [111,21,3,4000,5,6,7,8,9], arr2 = [21,3,4000,5,6,7,8,9], k = 4\n      Output: 38 # sum of 21 + 3 + 4000 + 5 + 6 + 7 + 8 + 9\n\n  Constraints:\n      1. 1 <= len(arr1) + len(arr2) <= 100\n      2. 1 <= k <= len(arr1) + len(arr2)\n  */\nconst addElementsWithTwoDigitsWithTwoDigits = (arr1, arr2, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr1[i]\n  }\n  for (let i = k; i < len(arr1) + len(arr2); i++) {\n    sum += arr2[i - len(arr1)]\n  }\n  return sum\n}\n\n/*\n  Given a non-empty array of integers arr, return the sum of the\n  elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElementsWithTwoDigits = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\n/*\n  Given two non-empty arrays of integers arr1 and arr2, return the sum\n  of the elements with at"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  let result = []\n  let number = n\n  while (number > 1) {\n    let remainder = number % 2\n    if (remainder === 0) {\n      number = number / 2\n      result.push(number)\n    } else {\n      number = 3 * number + 1\n      result.push(number)\n    }\n  }\n  return result.sort()\n}\n\n// test\nconst test = (got, expected) => {\n  if (got === expected) {\n    return 'ok'\n  } else {\n    return 'expected'+ expected +'but got'+ got\n  }\n}\n\nconsole.log('gotOdderCollatz(5) = ', test(gotOdderCollatz(5), [1, 5]))\nconsole.log('gotOdderCollatz(7) = ', test(gotOdderCollatz(7), [1, 3, 5, 7, 9, 11, 13, 15, 17, 19]))\nconsole.log('gotOdderCollatz(15) = ', test(gotOdderCollatz(15), [1, 3, 5, 7, 9, 11, 13, 15, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]))\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n  let months = [1,3,5,7,8,10,12];\n  let days = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30];\n  let daysInMonth = {\n    1: 31,\n    2: 29,\n    3: 31,\n    4: 30,\n    5: 31,\n    6: 30,\n    7: 31,\n    8: 31,\n    9: 30,\n    10: 31,\n    11: 30,\n    12: 31\n  };\n\n  if(!date) {\n    return false;\n  }\n\n  let monthsInt = parseInt(date.slice(0,2));\n  let daysInt = parseInt(date.slice(3,5));\n  let year = parseInt(date.slice(6,10));\n\n  if(monthsInt < 1 || monthsInt > 12) {\n    return false;\n  }\n\n  if(daysInt < 1 || daysInt > daysInMonth[monthsInt]) {\n    return false;\n  }\n\n  if(month < 1 || month > 12) {\n    return false;\n  }\n\n  if(year < 1900 || year > 2100) {\n    return false;\n  }\n\n  return true;\n}\n\nmodule.exports = validDates;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  if (txt.length === 0) {\n    return []\n  }\n\n  const words = txt.split(/(\\s|,)/)\n  return words\n}\n\nconst countLetters = (txt) => {\n  let letters = 0\n  for (let i = 0; i < txt.length; i++) {\n    let char = txt[i]\n    if (char.charCodeAt(0) >= 97 && char.charCodeAt(0) <= 122) {\n      letters++\n    }\n  }\n  return letters\n}\n\nconst countWords = (txt) => {\n  return txt.split(/\\s+/).length\n}\n\nconst getLetterCount = (txt) => {\n  const countLetters = (txt) => {\n    let letters = 0\n    for (let i = 0; i < txt.length; i++) {\n      let char = txt[i]\n      if (char.charCodeAt(0) >= 97 && char.charCodeAt(0) <= 122) {\n        letters++\n      }\n    }\n    return letters\n  }\n  return countLetters(txt)\n}\n\nconst countWords = (txt) => {\n  return txt.split(/\\s+/).length\n}\n\nmodule.exports = {\n  countLetters,\n  countWords,\n  splitWord,\n  getLetterCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  const arr = lst.slice(0);\n  let i, j;\n  const length = arr.length;\n  for (i = 0; i < length - 1; i++) {\n    for (j = i + 1; j < length; j++) {\n      if (arr[i] > arr[j]) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let [start1, end1] = interval1;\n  let [start2, end2] = interval2;\n\n  if (end1 < start2 || end2 < start1) {\n    return 'NO';\n  }\n\n  let [start3, end3] = [start1, start2];\n\n  while (start3 <= end2) {\n    if (start3 <= end3) {\n      start3 += 1;\n    }\n    if (end3 <= end1) {\n      end3 += 1;\n    }\n    if (start3 <= end1 && end3 <= end2) {\n      end3 += 1;\n    }\n  }\n\n  if (end3 === end1 + 1) {\n    return 'YES';\n  }\n  return 'NO';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr || arr.length === 0) return null\n  const product = 1\n  const sign = 1\n  return arr.reduce((result, value) => {\n    return result + (Math.abs(value) * product * sign)\n  }, 0)\n}\n\n/*\n  This method will return the sum of the digits of a number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(0) == 0\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigits = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + digit\n  }, 0)\n  return result\n}\n\n/*\n  This method will return the sum of the digits of a number\n  multiplied by sign of the number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigitsMultiplied = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + digit\n  }, 0)\n  return result * sign(num)\n}\n\n/*\n  This method will return the sum of the digits of a number multiplied by sign of the number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigitsMultiplied(12) == 3\n  >>> sumDigitsMultiplied(12) == null\n  >>> sumDigitsMultiplied(1234) == 9\n  */\nconst sumDigitsMultipliedSign = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + digit\n  }, 0)\n  return result * sign(num)\n}\n\n/*\n  This method will return the sum of the digits of a number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigitsBase10 = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + parseInt(digit, 10)\n  }, 0)\n  return result\n}\n\n/*\n  This method will return the sum of the digits of a number multiplied by sign of the number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigitsBase10Multiplied = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + parseInt(digit, 10)\n  }, 0)\n  return result * sign(num)\n}\n\n/*\n  This method will return the sum of the digits of a number multiplied by sign of the number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigitsBase10MultipliedSign = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + parseInt(digit, 10)\n  }, 0)\n  return result * sign(num)\n}\n\n/*\n  This method will return the sum of the digits of a number multiplied by sign of the number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigitsBase10MultipliedSignSum = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + parseInt(digit, 10)\n  }, 0)\n  return result * sign(num)\n}\n\n/*\n  This method will return the sum of the digits of a number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigitsBase10MultipliedSignSumSum = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + parseInt(digit, 10)\n  }, 0)\n  return result * sign(num)\n}\n\n/*\n  This method will return the sum of the digits of a number multiplied by sign of the number.\n  Note: return null for empty number.\n\n  Example:\n  >>> sumDigits(12) == 3\n  >>> sumDigits(12) == null\n  >>> sumDigits(1234) == 9\n  */\nconst sumDigitsBase10MultipliedSignSumSumSum = (num) => {\n  if (!num || num === 0) return null\n  const result = num.toString().split('').reduce((result, digit) => {\n    return result + parseInt(digit, 10)\n  }, 0)\n  return"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  if (rows == 0 || cols == 0) {\n    return []\n  }\n\n  const m = rows\n  const n = cols\n\n  const dp = Array(m + 1)\n  dp[0] = 1\n  dp[1] = 1\n\n  for (let i = 2; i <= m; i++) {\n    for (let j = 1; j <= n; j++) {\n      if (i == 1 && j == 1) {\n        continue\n      }\n      dp[i] += dp[i - 1]\n      if (k == 1) {\n        continue\n      }\n      let sum = 0\n      for (let k = 1; k <= n; k++) {\n        if (grid[i - 1][k - 1] > grid[i][j - 1]) {\n          sum += dp[i - 1]\n        }\n      }\n      dp[i] = Math.min(dp[i], sum)\n    }\n  }\n\n  return dp.reverse()\n}\n\nconsole.log(minPaths([[1,2,3],[4,5,6],[7,8,9]], 3))\nconsole.log(minPaths([[5,9,3],[4,1,6],[7,8,2]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  let tri = [1, 3, 2]\n  let temp = 3\n  while (tri.length < n) {\n    temp = tri[tri.length - 1] + tri[tri.length - 2] + tri[tri.length - 3]\n    tri.push(temp)\n  }\n  return tri\n}\n\nconsole.log(tri(3))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n /= 10;\n  }\n  return result % 2;\n};\n\nconst digitSum = (n) => {\n  return (n * n + n) % 10;\n};\n\nconst countDigits = (n) => {\n  return Math.floor(Math.log(n) / Math.log(10));\n};\n\nconst product = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result *= n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\nconst sum = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\nconst sumOdd = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result % 2;\n};\n\nconst odd = (n) => {\n  return n % 2 === 1;\n};\n\nmodule.exports = {\n  digitSum,\n  digit,\n  countDigits,\n  product,\n  sum,\n  sumOdd,\n  odd\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const len = string.length;\n  let left = 0;\n  let right = 0;\n  let stack = [];\n  let isNested = false;\n\n  for (let i = 0; i < len; i++) {\n    const ch = string[i];\n    if (ch === '[') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1]!== ']') {\n        stack.push(ch);\n      }\n      else {\n        stack.pop();\n      }\n    }\n    else if (ch === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      if (stack[stack.length - 1]!== '[') {\n        stack.push(ch);\n      }\n      else {\n        stack.pop();\n      }\n    }\n    else {\n      if (stack.length > 0) {\n        stack.push(ch);\n      }\n    }\n  }\n\n  return stack.length === 0;\n};\n\nconst string = '[[]]';\nconsole.log(isNest(string)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconsole.log(sumsSquares([1,2,3,4,5]));\nconsole.log(sumsSquares([1,4,9,9,9,9]));\nconsole.log(sumsSquares([1,3,5,7,9,9,9,9,9,9]));\nconsole.log(sumsSquares([1.4,4.2,0]));\nconsole.log(sumsSquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n    const chars = txt.split(\" \");\n    const lastChar = chars[chars.length - 1];\n    const isAlphabet = lastChar.match(/^[a-zA-Z]+$/);\n    return isAlphabet &&!isLastCharOfALetter(lastChar);\n}\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a capital letter, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsCapitalLetter(\"Apple pie\") ➞ false\n  checkIfLastCharsIsCapitalLetter(\"Apple pi e\") ➞ true\n  checkIfLastCharsIsCapitalLetter(\"Apple pi e \") ➞ false\n  checkIfLastCharsIsCapitalLetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsCapitalLetter = (txt) => {\n    const chars = txt.split(\" \");\n    const lastChar = chars[chars.length - 1];\n    const isCapitalLetter = lastChar.match(/^[A-Z]+$/);\n    return isCapitalLetter &&!isLastCharOfALetter(lastChar);\n}\n\n/*\n  Create a function that returns true if the last two characters\n  of a given string are both capital letters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastTwoCharsAreCapitalLetters(\"Apple pie\") ➞ false\n  checkIfLastTwoCharsAreCapitalLetters(\"Apple pi e\") ➞ true\n  checkIfLastTwoCharsAreCapitalLetters(\"Apple pi e \") ➞ false\n  checkIfLastTwoCharsAreCapitalLetters(\"\") ➞ false\n  */\nconst checkIfLastTwoCharsAreCapitalLetters = (txt) => {\n    const chars = txt.split(\" \");\n    const lastChar = chars[chars.length - 1];\n    const lastChar2 = chars[chars.length - 2];\n    const isCapitalLetter = lastChar.match(/^[A-Z]+$/) && lastChar2.match(/^[A-Z]+$/);\n    return isCapitalLetter &&!isLastCharOfALetter(lastChar) &&!isLastCharOfALetter(lastChar2);\n}\n\n/*\n  Create a function that returns true if the last three characters\n  of a given string are all capital letters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastThreeCharsAreCapitalLetters(\"Apple pie\") ➞ false\n  checkIfLastThreeCharsAreCapitalLetters(\"Apple pi e\") ➞ true\n  checkIfLastThreeCharsAreCapitalLetters(\"Apple pi e \") ➞ false\n  checkIfLastThreeCharsAreCapitalLetters(\"\") ➞ false\n  */\nconst checkIfLastThreeCharsAreCapitalLetters = (txt) => {\n    const chars = txt.split(\" \");\n    const lastChar = chars[chars.length - 1];\n    const lastChar2 = chars[chars.length - 2];\n    const lastChar3 = chars[chars.length - 3];\n    const isCapitalLetter = lastChar.match(/^[A-Z]+$/) && lastChar2.match(/^[A-Z]+$/) && lastChar3.match(/^[A-Z]+$/);\n    return isCapitalLetter &&!isLastCharOfALetter(lastChar) &&!isLastCharOfALetter(lastChar2) &&!isLastCharOfALetter(lastChar3);\n}\n\n/*\n  Create a function that returns true if the last four characters\n  of a given string are all capital letters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFourCharsAreCapitalLetters(\"Apple pie\") ➞ false\n  checkIfLastFourCharsAreCapitalLetters(\"Apple pi e\") ➞ true\n  checkIfLastFourCharsAreCapitalLetters(\"Apple pi e \") ➞ false\n  checkIfLastFourCharsAreCapitalLetters(\"\") ➞ false\n  */\nconst checkIfLastFourCharsAreCapitalLetters = (txt) => {\n    const chars = txt.split(\" \");\n    const lastChar = chars[chars.length - 1];\n    const lastChar2 = chars[chars.length - 2];\n    const lastChar3 = chars[chars.length - 3];\n    const lastChar4 = chars[chars.length - 4];\n    const isCapitalLetter = lastChar.match(/^[A-Z]+$/) && lastChar2.match(/^[A-Z]+$/) && lastChar3.match(/^[A-Z]+$/) && lastChar4.match(/^[A-Z]+$/);\n    return isCapitalLetter &&!isLastCharOfALetter(lastChar) &&!isLastCharOfALetter(lastChar2) &&!isLastCharOfALetter(lastChar3) &&!isLastCharOfALetter(lastChar4);\n}\n\n/*\n  Create a function that returns true if the last five characters\n  of a given string are all capital letters, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastFiveCharsAreCapitalLetters(\"Apple pie\") ➞ false\n  checkIfLastFiveCharsAreCapitalLetters(\"Apple pi e\") ➞ true\n  checkIfLastFiveCharsAreCapitalLetters(\"Apple pi e \") ➞ false\n  checkIfLastFiveCharsAreCapitalLetters(\"\") ➞ false\n  */\nconst checkIfLastFiveCharsAreCapitalLetters = (txt) => {\n    const chars = txt.split(\" \");\n    const"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  // The first element in the array will be the maximum element\n  // The last element in the array will be the minimum element\n  const left = arr.shift()\n  const right = arr.pop()\n  const middle = arr.shift()\n\n  // If left is smaller than right then return left\n  if (left < right) {\n    return left\n  }\n\n  // If right is smaller than left then return right\n  if (left > right) {\n    return right\n  }\n\n  // The elements are equal\n  if (left === middle) {\n    return -1\n  }\n\n  // The elements are not equal and neither are the left or right\n  return canArranging(arr)\n}\n\nconsole.log(canArranging([5,4,3,2,1]))\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  const largest = -Infinity;\n  const smallest = Infinity;\n  for (let i = 0; i < lst.length; i++) {\n    const x = lst[i];\n    if (x < 0) {\n      if (largest < x) largest = x;\n    } else if (x > 0) {\n      if (smallest > x) smallest = x;\n    }\n  }\n  if (largest < smallest) {\n    return [largest, smallest];\n  } else {\n    return [null, null];\n  }\n};\n\n/*\n  Create a function that returns the largest of three\n  integers.\n  Examples:\n  largestOfThree([2, 4, 1]) == 4\n  largestOfThree([2, 1, 4]) == 4\n  largestOfThree([2, 1, 2]) == 2\n  largestOfThree([2, 1, 1]) == 2\n  largestOfThree([2, 1, 0]) == 2\n  largestOfThree([0, 2, 1]) == 2\n  largestOfThree([0, 2, 2]) == 2\n  largestOfThree([0, 2, 0]) == 2\n  largestOfThree([0, 1, 2]) == 2\n  largestOfThree([0, 1, 1]) == 1\n  largestOfThree([0, 1, 0]) == 1\n  largestOfThree([0, 0, 1]) == 1\n  largestOfThree([0, 0, 2]) == 2\n  largestOfThree([1, 1, 1]) == 1\n  largestOfThree([1, 1, 2]) == 1\n  largestOfThree([1, 1, 0]) == 1\n  largestOfThree([1, 0, 1]) == 1\n  largestOfThree([1, 0, 2]) == 2\n  largestOfThree([2, 1, 1]) == 2\n  largestOfThree([2, 1, 0]) == 2\n  largestOfThree([2, 0, 1]) == 2\n  largestOfThree([2, 0, 2]) == 2\n  largestOfThree([2, 0, 0]) == 2\n  largestOfThree([0, 2, 1]) == 2\n  largestOfThree([0, 2, 2]) == 2\n  largestOfThree([0, 2, 0]) == 2\n  largestOfThree([0, 1, 2]) == 2\n  largestOfThree([0, 1, 1]) == 1\n  largestOfThree([0, 1, 0]) == 1\n  largestOfThree([0, 0, 2]) == 2\n  largestOfThree([1, 2, 2]) == 2\n  largestOfThree([1, 2, 1]) == 2\n  largestOfThree([1, 2, 0]) == 2\n  largestOfThree([1, 1, 2]) == 1\n  largestOfThree([1, 1, 1]) == 1\n  largestOfThree([1, 1, 0]) == 1\n  largestOfThree([1, 0, 2]) == 2\n  largestOfThree([2, 2, 2]) == 2\n  largestOfThree([2, 2, 1]) == 2\n  largestOfThree([2, 2, 0]) == 2\n  largestOfThree([2, 1, 2]) == 2\n  largestOfThree([2, 1, 1]) == 2\n  largestOfThree([2, 1, 0]) == 2\n  largestOfThree([2, 0, 2]) == 2\n  largestOfThree([2, 0, 1]) == 2\n  largestOfThree([2, 0, 0]) == 2\n  largestOfThree([0, 2, 2]) == 2\n  largestOfThree([0, 2, 1]) == 2\n  largestOfThree([0, 2, 0]) == 2\n  largestOfThree([0, 1, 2]) == 2\n  largestOfThree([0, 1, 1]) == 1\n  largestOfThree([0, 1, 0]) == 1\n  largestOfThree([0, 0, 2]) == 2\n  largestOfThree([1, 2, 2]) == 2\n  largestOfThree([1, 2, 1]) == 2\n  largestOfThree([1, 2, 0]) == 2\n  largestOfThree([1, 1, 2]) == 1\n  largestOfThree([1, 1, 1]) == 1\n  largestOfThree([1, 1, 0]) == 1\n  largestOfThree([1, 0, 2]) == 2\n  largestOfThree([2, 2, 2]) == 2\n  largestOfThree([2, 2, 1]) == 2\n  largestOfThree([2, 2, 0]) == 2\n  largestOfThree([2, 1, 2]) == 2\n  largestOfThree([2, 1, 1]) == 2\n  largestOfThree([2, 1, 0]) == 2\n  largestOfThree([2, 0, 2]) == 2\n  largestOfThree([2, 0, 1]) == 2\n  largestOfThree([2, 0, 0]) == 2\n  largestOfThree([0, 2, 2]) == 2\n  largestOfThree([0, 2, 1]) == 2\n  largestOfThree([0, 2, 0]) == 2\n  largestOfThree([0, 1, 2]) == 2\n  largestOfThree([0, 1, 1]) == 1\n  largestOfThree([0, 1, 0]) == 1\n  largestOfThree([0, 0, 2]) == 2\n  largestOfThree([1, 2, 2]) == 2\n  largestOfThree([1, 2, 1]) == 2\n  largestOfThree([1, 2, 0]) == 2\n  largestOfThree([1, 1, 2]) == 1\n  largestOfThree([1, 1, 1]) == 1\n  largestOfThree([1, 1, 0]) == 1\n  largestOfThree([1, 0, 2]) == 2\n  largestOfThree([2, 2, 2]) == 2\n  largestOfThree([2, 2, 1]) == 2\n  largestOfThree([2, 2, 0]) == 2\n  largestOfThree([2, 1, 2]) == 2\n  largestOfThree([2, 1, 1]) == 2\n  largestOfThree([2, 1, 0"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n    const aType = typeof a\n    const bType = typeof b\n    if (aType!== bType) {\n        if (aType === 'number') {\n            return a > b? b : a\n        }\n        if (bType === 'number') {\n            return a > b? a : b\n        }\n        if (aType ==='string') {\n            if (a === b) {\n                return null\n            }\n            return a > b? b : a\n        }\n        if (bType ==='string') {\n            if (a === b) {\n                return null\n            }\n            return a > b? a : b\n        }\n    }\n    return a\n}\n\n/*\n  Compare two strings, return true if they are the same\n*/\nconst compareStrings = (a, b) => {\n    return a === b\n}\n\n/*\n  Create a function that takes two integers, floats, or strings representing\n  real numbers, and returns the larger and smaller variable in their given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingTwo(1, 2.5) ➞ 1, 2.5\n  comparingTwo(1, \"2,3\") ➞ 1, \"2,3\"\n  comparingTwo(\"5,1\", \"6\") ➞ \"5,1\", \"6\"\n  comparingTwo(\"1\", 1) ➞ null\n  */\nconst comparingTwo = (a, b) => {\n    const aType = typeof a\n    const bType = typeof b\n    if (aType!== bType) {\n        if (aType === 'number') {\n            return compareStrings(a, b)? null : a > b? b : a\n        }\n        if (bType === 'number') {\n            return compareStrings(a, b)? null : a > b? a : b\n        }\n        if (aType ==='string') {\n            if (compareStrings(a, b)) {\n                return null\n            }\n            return a > b? b : a\n        }\n        if (bType ==='string') {\n            if (compareStrings(a, b)) {\n                return null\n            }\n            return a > b? a : b\n        }\n    }\n    return compareStrings(a, b)? null : a > b? b : a\n}\n\n/*\n  Create a function that takes a list of strings and returns the first string\n  that is greater than the second\n*/\nconst compare = (a, b) => {\n    const bIsNumber = typeof b === 'number'\n    if (bIsNumber) {\n        return a > b? b : a\n    }\n    if (typeof b ==='string') {\n        if (compareStrings(a, b)) {\n            return b\n        }\n        return a > b? a : b\n    }\n    return a > b? b : a\n}\n\n/*\n  Create a function that takes two lists of strings, and returns the larger list\n*/\nconst compareTwo = (a, b) => {\n    return a.length > b.length? a : b\n}\n\n/*\n  Create a function that takes two lists of strings, and returns the smaller list\n*/\nconst compareTwoReverse = (a, b) => {\n    return a.length < b.length? a : b\n}\n\n/*\n  Create a function that takes two lists of strings, and returns the lists\n  that are the same in length\n*/\nconst compareTwoLength = (a, b) => {\n    if (a.length === b.length) {\n        return a\n    }\n    return a.length > b.length? a : b\n}\n\n/*\n  Create a function that takes two lists of strings, and returns the lists\n  that are the same in length and the larger of the two lists\n*/\nconst compareTwoLengthReverse = (a, b) => {\n    if (a.length === b.length) {\n        return a\n    }\n    return a.length < b.length? a : b\n}\n\n/*\n  Create a function that takes two lists of strings, and returns the lists\n  that are the same in length and the smaller of the two lists\n*/\nconst compareTwoLengthReverse2 = (a, b) => {\n    if (a.length === b.length) {\n        return a\n    }\n    return a.length > b.length? b : a\n}\n\nconst main = () => {\n    console.log(comparingOne(1, 2.5))\n    console.log(comparingOne(1, \"2,3\"))\n    console.log(comparingOne(\"5,1\", \"6\"))\n    console.log(comparingOne(\"1\", 1))\n\n    console.log(comparingTwo(1, 2.5))\n    console.log(comparingTwo(1, \"2,3\"))\n    console.log(comparingTwo(\"5,1\", \"6\"))\n    console.log(comparingTwo(\"1\", 1))\n\n    console.log(compare(1, 2))\n    console.log(compare(1, \"2,3\"))\n    console.log(compare(\"5,1\", \"6\"))\n    console.log(compare(\"1\", 1))\n\n    console.log(compareTwo(1, 2))\n    console.log(compareTwo(1, \"2,3\"))\n    console.log(compareTwo(\"5,1\", \"6\"))\n    console.log(compareTwo(\"1\", 1))\n\n    console.log(compareTwoReverse(1, 2))\n    console.log(compareTwoReverse(1, \"2,3\"))\n    console.log(compareTwoReverse(\"5,"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return true\n  }\n  if (n === 2) {\n    return true\n  }\n  if (n % 2 === 0) {\n    return n - (n / 2) === 0\n  }\n  return false\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == false\n  isEqualToSummingOdd(8) == false\n  isEqualToSummingOdd(12) == true\n  */\nconst isEqualToSummingOdd = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return true\n  }\n  if (n === 2) {\n    return false\n  }\n  if (n % 2!== 1) {\n    return false\n  }\n  return n - (n / 2) === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  isEqualToSummingEven(12) == true\n  isEqualToSummingEven(16) == true\n  isEqualToSummingEven(20) == false\n  isEqualToSummingEven(24) == false\n  isEqualToSummingEven(30) == false\n  */\nconst isEqualToSummingEvenOrOdd = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return true\n  }\n  if (n === 2) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return n - (n / 2) === 0\n  }\n  return n - (n / 2) === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == false\n  isEqualToSummingOdd(8) == true\n  isEqualToSummingOdd(12) == true\n  isEqualToSummingOdd(16) == true\n  isEqualToSummingOdd(20) == false\n  isEqualToSummingOdd(24) == false\n  isEqualToSummingOdd(30) == false\n  */\nconst isEqualToSummingEvenOrOdd = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return true\n  }\n  if (n === 2) {\n    return false\n  }\n  if (n % 2!== 1) {\n    return false\n  }\n  return n - (n / 2) === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == true\n  isEqualToSummingEven(8) == false\n  isEqualToSummingEven(12) == true\n  isEqualToSummingEven(16) == true\n  isEqualToSummingEven(20) == true\n  isEqualToSummingEven(24) == false\n  isEqualToSummingEven(30) == false\n  */\nconst isEqualToSummingEvenOrOdd = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return true\n  }\n  if (n === 2) {\n    return false\n  }\n  if (n % 2 === 0) {\n    return n - (n / 2) === 0\n  }\n  return n - (n / 2) === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 6 positive odd numbers\n  Example\n  isEqualToSummingOdd(4) == false\n  isEqualToSummingOdd(6) == true\n  isEqualToSummingOdd(8) == false\n  isEqualToSummingOdd(12) == true\n  isEqualToSummingOdd(16) == true\n  isEqualToSummingOdd(20) == true\n  isEqualToSummingOdd(24) == false\n  isEqualToSummingOdd(30) == false\n  */\nconst isEqualToSummingEvenOrOdd = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return true\n  }\n  if (n === 2) {\n    return false\n  }\n  if (n % 2!== 1) {\n    return false\n  }\n  return n - (n / 2) === 0\n}\n\n/*Evaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == false\n  isEqualToSummingEven(12) == true\n  isEqualToSummingEven(16) == true\n  isEqualToSummingEven(20) == true\n  isEqualToSummingEven(24) == true\n  isEqualToSummingEven(30) == false\n  */\nconst isEqualToSummingEvenOrOdd = (n) => {\n  if (n === 0) {\n    return false\n  }\n  if (n === 1) {\n    return true\n  }\n  if (n"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n < 0) {\n    return 0;\n  }\n\n  if (n === 0) {\n    return 1;\n  }\n\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3);\n};\n\nexport default specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n  const regex = /\\s+/g;\n  return text.replace(regex, '_').replace(/-{2}/g, '-');\n};\n\n/*\n  Returns the word (or a substring) in the input string.\n  If the last word is not complete, then it will be trimmed.\n  If the first word is not complete, then it will be trimmed.\n  \n  findWord(\"This is a test\") == \"This\"\n  findWord(\"This is a test\") == \"This\"\n  findWord(\"This is a test\") == \"This is\"\n  findWord(\"This is a test\") == \"This is\"\n  findWord(\"This is a test\") == \"This is\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This is a\"\n  findWord(\"This is a test\") == \"This"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n  if(typeof file_name!=='string')\n    return false;\n  const dot_pos = file_name.indexOf(\".\");\n  if(dot_pos < 0)\n    return false;\n  const file_name_prefix = file_name.slice(0, dot_pos);\n  const file_name_suffix = file_name.slice(dot_pos+1);\n  if(file_name_prefix.length === 0 || file_name_prefix.length > 3)\n    return false;\n  const letters = [...file_name_prefix];\n  for(let i=0; i < letters.length; i++)\n    if(!(letters[i] >= 'a' && letters[i] <= 'z') &&!(letters[i] >= 'A' && letters[i] <= 'Z'))\n      return false;\n  const suffix_letters = [...file_name_suffix];\n  for(let i=0; i < suffix_letters.length; i++)\n    if(!(suffix_letters[i] >= 'a' && suffix_letters[i] <= 'z') &&!(suffix_letters[i] >= 'A' && suffix_letters[i] <= 'Z') &&!(suffix_letters[i] >= '0' && suffix_letters[i] <= '9'))\n      return false;\n  return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  let sum = 0;\n  let i = 0;\n  for (let element of lst) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += element * element;\n    }\n    i++;\n  }\n  return sum;\n};\n\nconsole.log(sumsSquares([1, 2, 3]));\nconsole.log(sumsSquares([]));\nconsole.log(sumsSquares([-1, -5, 2, -1, -5]));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  const words = sentence.split(' ')\n  const arr = words.map((word) => {\n    return [word, true]\n  })\n  const arr2 = []\n  const res = []\n\n  arr.forEach(([word, isPrime]) => {\n    if (isPrime) {\n      arr2.push(word)\n    }\n  })\n\n  arr2.forEach(([word, isPrime]) => {\n    if (isPrime) {\n      res.push(word)\n    }\n  })\n\n  return res.join(' ')\n}\n\nconsole.log(wordInSentences('This is a test'))\nconsole.log(wordInSentences('lets go for swimming'))\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  if (!x) return false\n  const [numerator, denominator] = x.split('/')\n  const numerator = parseInt(numerator)\n  const denominator = parseInt(denominator)\n  if (numerator > denominator) return false\n  if (numerator < denominator) return true\n  const product = numerator * denominator\n  return isInt(product)\n}\n\nexport default simplify\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  let sortedNums = [];\n  for (let i = 0; i < nums.length; i++) {\n    sortedNums.push([nums[i], i]);\n  }\n  sortedNums.sort(function (a, b) {\n    let sumA = a[0].toString().split('').reduce((x, y) => x * 10 + y);\n    let sumB = b[0].toString().split('').reduce((x, y) => x * 10 + y);\n    if (sumA === sumB) {\n      return a[1] - b[1];\n    } else {\n      return sumA - sumB;\n    }\n  });\n  return sortedNums;\n}\n\n// Test\nlet input = [3, 2, 7, 8, 9, 1, 3, 4, 6, 8, 7, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9, 1, 8, 3, 4, 7, 9, 8, 9, 7, 8, 9"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n    return nums.filter(n => n > 10 && (n % 2 === 1 || n % 2 === 0 && n % 3 === 1 || n % 3 === 0 && n % 5 === 1 || n % 5 === 0 && n % 7 === 1 || n % 7 === 0 && n % 9 === 1))\n}\n\nconsole.log(specialFilter([15, -73, 14, -15]))\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]))<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        sum += (a[i] + a[j] + a[k]) % 3\n      }\n    }\n  }\n  return sum\n}\n\nlet a = [1, 3, 7, 13, 21]\nconsole.log(gotMaxTriples(5))\nconsole.log(gotMaxTriples(4))\nconsole.log(gotMaxTriples(3))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planets = {\n    Mercury: 0, Venus: 1, Earth: 2, Mars: 3, Jupiter: 4, Saturn: 5, Uranus: 6, Neptune: 7\n  };\n  let result = [];\n  for (let i = 0; i < planets[planet1]; i++) {\n    let currentPlanet = planets[planet1].toString();\n    while (i < planets[planet2] && planets[planet2].toString() > currentPlanet) {\n      result.push(currentPlanet);\n      i++;\n    }\n  }\n  return result;\n};\n\nconst result = bf(\"Jupiter\", \"Neptune\");\nconsole.log(result);\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  const sort = (a, b) => {\n    if (a[1] < b[1]) {\n      return -1;\n    } else if (a[1] > b[1]) {\n      return 1;\n    } else {\n      return a[0] - b[0];\n    }\n  };\n  return lst.slice().sort(sort);\n};\n\nconst list_sort = (lst) => {\n  const sort = (a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n      return 1;\n    } else {\n      return a < b? -1 : 1;\n    }\n  };\n  return lst.slice().sort(sort);\n};\n\nconst sort_words = (lst) => {\n  const sort = (a, b) => {\n    return a[0] > b[0]? 1 : -1;\n  };\n  return lst.slice().sort(sort);\n};\n\nconst test_sort = (lst, sort) => {\n  assert.deepEqual(sortListsSums(lst), sort(lst, sortListsSums));\n  assert.deepEqual(sort_words(lst), sort(lst, sort_words));\n};\n\nconst lst = [\n  [\"aa\", \"a\"],\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"d\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"d\", \"e\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"d\", \"e\", \"f\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"d\", \"e\", \"f\", \"g\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"d\", \"e\", \"f\", \"g\", \"h\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\"]\n];\n\ntest_sort(lst, sortListsSums);\ntest_sort(lst, sort_words);\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nexport default xOrY;<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  const len = lst.length\n  if (len === 0) {\n    return 0\n  }\n  const diff = (x, y) => x - y\n  const add = (x, y) => x + y\n  const sum = (x, y) => x + y\n  const doubleDiff = (x, y) => add(add(x, y), add(x, y))\n\n  let sumSquared = 0\n  for (let i = 0; i < len; i++) {\n    const num = lst[i]\n    if (num % 2 === 1) {\n      sumSquared += diff(num, num)\n    }\n  }\n  return doubleDiff(sumSquared, sum(sumSquared, sumSquared))\n}\n\nconsole.log(doubleTheDifference([1, 3, 2, 0])) // => 10\nconsole.log(doubleTheDifference([-1, -2, 0])) // => 0\nconsole.log(doubleTheDifference([9, -2])) // => 81\nconsole.log(doubleTheDifference([0])) // => 0\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n    let result = [0, 0, 0, 0, 0, 0];\n    for (let i = 0; i < game.length; i++) {\n        if (game[i] === guess[i]) {\n            result[i] = 0;\n        } else {\n            result[i] = Math.abs(game[i] - guess[i]);\n        }\n    }\n    return result;\n}\n\n// console.log(compare([1,2,3,4,5,1],[1,2,3,4,2,-2]));\n// console.log(compare([0,5,0,0,0,4],[4,1,1,0,0,-2]));<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (!class_name) {\n    return ''\n  }\n  const strength = extensions.reduce((acc, ext) => {\n    const cap = ext.toUpperCase().length\n    const sm = ext.toLowerCase().length\n    return Math.floor((cap - sm) * 10)\n  }, -1)\n  const bestExtension = extensions.find(ext => strength > ext.strength)\n  if (!bestExtension) {\n    return class_name\n  }\n  return `${class_name}.${bestExtension}`\n}\n\nconst classToExtension = (class_name) => {\n  const ext_regex = /(\\.[^\\.]+)\\.(.+)/\n  const match = ext_regex.exec(class_name)\n  if (!match) {\n    return null\n  }\n  return match.slice(1).join('.')\n}\n\nmodule.exports = {\n  strengthenExtension,\n  classToExtension,\n  strongestExtension\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n  const first = a.split(\"\");\n  const second = b.split(\"\");\n  if (first.length!= second.length) return false;\n  for (let i = 0; i < first.length; i++) {\n    if (first[i]!= second[i] && first[i]!= second[first.length - i - 1]) return false;\n  }\n  return true;\n};\n\nconsole.log(cycpatternCheck(\"abcd\",\"abd\"));\nconsole.log(cycpatternCheck(\"hello\",\"ell\"));\nconsole.log(cycpatternCheck(\"whassup\",\"psus\"));\nconsole.log(cycpatternCheck(\"abab\",\"baa\"));\nconsole.log(cycpatternCheck(\"efef\",\"eeff\"));\nconsole.log(cycpatternCheck(\"himenss\",\"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  if (num === 0) {\n    return (0, 0);\n  }\n  let even = 0;\n  let odd = 0;\n  while (num > 0) {\n    if (num % 2 === 0) {\n      even++;\n    } else {\n      odd++;\n    }\n    num = num / 2;\n  }\n  return (even, odd);\n};\n\n// TEST\n// console.log(evenOdderCount(-12));\n// console.log(evenOdderCount(123));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  if(number <= 0 || number > 1000) {\n    return '';\n  }\n  let intToRoman = {\n    1: 'i',\n    4: 'iv',\n    5: 'v',\n    9: 'ix',\n    10: 'x',\n    40: 'xv',\n    50: 'l',\n    90: 'xc',\n    100: 'c',\n    400: 'cc',\n    500: 'd',\n    900:'mm'\n  };\n  let result = '';\n  let resultNumber = number;\n  let index = 0;\n  while(resultNumber > 0) {\n    result += intToRoman[resultNumber % 10] + intToRoman[(resultNumber - resultNumber % 10) / 10] + intToRoman[index];\n    resultNumber = resultNumber / 10;\n    index++;\n  }\n  return result.toLowerCase();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n  return ((Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) === 0)\n};\n\n/*\n Given the lengths of two sides of a right-angled triangle, find the length\n  of the third side.\n  Example:\n  findLengthOfThird(3, 4) == 5\n  findLengthOfThird(5, 4) == 4\n  findLengthOfThird(6, 4) == 8\n  */\nconst findLengthOfThird = (a, b) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)));\n};\n\n/*\n Given the lengths of the two sides of a right-angled triangle, find the length\n  of the shortest side.\n  Example:\n  findShortestSide(3, 4) == 3\n  findShortestSide(5, 4) == 5\n  findShortestSide(6, 4) == 6\n  */\nconst findShortestSide = (a, b) => {\n  return Math.min(a, b);\n};\n\n/*\n Given the lengths of two sides of a right-angled triangle, find the length\n  of the longest side.\n  Example:\n  findLongestSide(3, 4) == 5\n  findLongestSide(5, 4) == 5\n  findLongestSide(6, 4) == 6\n  */\nconst findLongestSide = (a, b) => {\n  return Math.max(a, b);\n};\n\n/*\n Given the length of one side of a right-angled triangle, find the length of\n  the other two sides.\n  Example:\n  findTwoSides(3) == 4\n  findTwoSides(5) == 8\n  findTwoSides(6) == 6\n  */\nconst findTwoSides = (a) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2)));\n};\n\n/*\n Given the length of one side of a right-angled triangle, find the length of\n  the other two sides.\n  Example:\n  findTwoSides(3) == 4\n  findTwoSides(5) == 8\n  findTwoSides(6) == 6\n  */\nconst findTwoSides2 = (a) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(a, 2) + Math.pow(a, 2)));\n};\n\n/*\n Given the lengths of two sides of a right-angled triangle, find the hypotenuse\n  length.\n  Example:\n  findHypotenuse(3, 4) == 5\n  findHypotenuse(5, 4) == 5\n  findHypotenuse(6, 4) == 6\n  */\nconst findHypotenuse = (a, b) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)));\n};\n\n/*\n Given the length of a side of a right-angled triangle, find the other two\n  sides.\n  Example:\n  findSides(3) == {3, 4}\n  findSides(5) == {5, 4}\n  findSides(6) == {6, 4}\n  */\nconst findSides = (a) => {\n  return {a, findTwoSides(a)};\n};\n\n/*\n Given the length of a side of a right-angled triangle, find the other two\n  sides.\n  Example:\n  findSides(3) == {3, 4}\n  findSides(5) == {5, 4}\n  findSides(6) == {6, 4}\n  */\nconst findSides2 = (a) => {\n  return {findTwoSides(a), a};\n};\n\n/*\n Given the length of one side of a right-angled triangle, find the other two\n  sides.\n  Example:\n  findSides(3) == {3, 4}\n  findSides(5) == {5, 4}\n  findSides(6) == {6, 4}\n  */\nconst findSides3 = (a) => {\n  return {findTwoSides2(a), a};\n};\n\n/*\n Given the lengths of two sides of a right-angled triangle, find the area.\n  Example:\n  findArea(3, 4) == 12\n  findArea(5, 4) == 20\n  findArea(6, 4) == 16\n  */\nconst findArea = (a, b) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2)) * 0.5);\n};\n\n/*\n Given the lengths of two sides of a right-angled triangle, find the hypotenuse\n  length.\n  Example:\n  findHypotenuse(3, 4) == 5\n  findHypotenuse(5, 4) == 5\n  findHypotenuse(6, 4) == 6\n  */\nconst findHypotenuse2 = (a, b) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(a, 2)));\n};\n\n/*\n Given the lengths of two sides of a right-angled triangle, find the area.\n  Example:\n  findArea(3, 4) == 12\n  findArea(5, 4) == 20\n  findArea(6, 4) == 16\n  */\nconst findArea2 = (a, b) => {\n  return (Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(a, 2)) * 0.5);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  const max = words.reduce((a, b) => {\n    const [c1, c2] = a.length > b.length? [a, b] : [b, a];\n    const result = [...c1,...c2];\n    return result;\n  });\n  return max[0].length;\n};\n\n/*Write a function that accepts a list of numbers.\n  The list contains different numbers. Return the number with maximum\n  number of digits. If multiple numbers have maximum number of digits,\n  return the one which comes first in lexicographical order.\n\n  foundMax([\"1\", \"10\", \"11\"]) === \"11\"\n  foundMax([\"1\", \"2\", \"10\", \"11\"]) === \"10\"\n  foundMax([\"2\", \"11\", \"10\", \"1\"]) === \"11\"\n  */\nconst foundMax = (words) => {\n  const max = words.reduce((a, b) => {\n    const [c1, c2] = a > b? [a, b] : [b, a];\n    const result = [...c1,...c2];\n    return result;\n  });\n  return max.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum\n  number of characters + number of digits. If multiple strings\n  have maximum number of characters + number of digits, return\n  the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"nameof\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"cc\"\n  */\nconst foundMax = (words) => {\n  const max = words.reduce((a, b) => {\n    const [c1, c2] = a.length + b.length > a.length + b.length? [a, b] : [b, a];\n    const result = [...c1,...c2];\n    return result;\n  });\n  return max[0];\n};\n\n/*Write a function that accepts a list of numbers.\n  The list contains different numbers. Return the number with maximum\n  number of digits. If multiple numbers have maximum number of digits,\n  return the one which comes first in lexicographical order.\n\n  foundMax([\"1\", \"10\", \"11\"]) === \"11\"\n  foundMax([\"1\", \"2\", \"10\", \"11\"]) === \"10\"\n  foundMax([\"2\", \"11\", \"10\", \"1\"]) === \"11\"\n  */\nconst foundMax = (words) => {\n  const max = words.reduce((a, b) => {\n    const [c1, c2] = a + b > a + b? [a, b] : [b, a];\n    const result = [...c1,...c2];\n    return result;\n  });\n  return max.length;\n};\n\n/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum\n  number of characters + number of digits. If multiple strings\n  have maximum number of characters + number of digits, return\n  the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"nameof\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  const max = words.reduce((a, b) => {\n    const [c1, c2] = a.length + b.length + a.length > a.length + b.length + a.length? [a, b] : [b, a];\n    const result = [...c1,...c2];\n    return result;\n  });\n  return max[0];\n};\n\n/*Write a function that accepts a list of numbers.\n  The list contains different numbers. Return the number with maximum\n  number of digits. If multiple numbers have maximum number of digits,\n  return the one which comes first in lexicographical order.\n\n  foundMax([\"1\", \"10\", \"11\"]) === \"11\"\n  foundMax([\"1\", \"2\", \"10\", \"11\"]) === \"10\"\n  foundMax([\"2\", \"11\", \"10\", \"1\"]) === \"11\"\n  */\nconst foundMax = (words) => {\n  const max = words.reduce((a, b) => {\n    const [c1, c2] = a + b > a + b? [a, b] : [b, a];\n    const result = [...c1,...c2];\n    return result;\n  });\n  return max.length;\n};\n\nconst words = [\"name\", \"of\", \"string\", \"game\"];\nconsole.log(foundMax(words));\n\nconst words = [\"1\", \"10\", \"11\"];\nconsole.log(foundMax(words));\n\nconst words = [\"aaaaaaa\", \"bb\", \"cc\"];\nconsole.log(foundMax(words));\n\nconst words = [\"1\", \"2\", \"10\", \"11\"];\nconsole.log(foundMax(words));\n\nconst words = [\"2\", \"11\", \"10\", \"1\"];\nconsole.log(foundMax(words));\n\nconst words = [\"1\", \"10\", \"11\", \"aaaaaaa\", \"bb\", \"cc\"];\nconsole.log(foundMax(words));\n\nconst words = [\"1\", \"2\", \"10\", \"11\", \"aaaaaaa\", \"bb\", \"cc\"];\nconsole.log(foundMax(words));\n\nconst words = [\"1\", \"2\", \"10\", \"11\", \"aaaaaaa\", \"bb\", \"cc\", \"11111111\"];\nconsole.log(foundMax(words));"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    // Your code here\n    return [number + remaining, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    // Your code here\n    return [number + remaining, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    // Your code here\n    return [number + remaining, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    // Your code here\n    return [number + remaining, remaining];\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                   the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n  \n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    // Your code here\n    return [number + remaining, remaining];\n}<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n    let operandLength = operand.length\n    let operatorLength = operator.length\n    let result = 0\n    let i = 0\n    let j = 0\n    let k = 0\n    let carry = 0\n\n    while (i < operandLength || j < operatorLength) {\n        if (i < operandLength) {\n            result += operand[i]\n            i += 1\n        }\n\n        if (j < operatorLength) {\n            result += operator[j] * (result / 10)\n            j += 1\n        }\n\n        carry = result % 10\n        result = result / 10\n\n        if (carry === 1) {\n            result += 1\n        }\n    }\n\n    return result\n}\n\nconst getOperand = (array) => {\n    let index = parseInt(prompt(\"Enter index of an element: \"))\n    let operand = array[index]\n    return operand\n}\n\nconst getOperator = () => {\n    let operator = \"\"\n    while (operator === \"\") {\n        let input = \"\"\n        prompt(\"Enter an operator: \")\n        input = prompt(\"\")\n        operator = input\n    }\n    return operator\n}\n\nconst getArray = () => {\n    let array = []\n    while (array.length < 2) {\n        let operand = getOperand(array)\n        let operator = getOperator()\n        array.push(operand)\n        array.push(operator)\n    }\n    return array\n}\n\nconst printArray = (array) => {\n    let length = array.length\n    for (let i = 0; i < length - 1; i++) {\n        console.log(array[i])\n    }\n    console.log(array[length - 1])\n}\n\nconst main = () => {\n    let array = getArray()\n    printArray(array)\n    let result = doAlgebra(array[0], array[1])\n    console.log(\"Result of algebraic expression is: \" + result)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let i = 0, len = s.length;\n  let tmp = \"\";\n  while (i < len) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      tmp += s[i].toLowerCase();\n    } else {\n      tmp += s[i].toUpperCase();\n    }\n    i++;\n  }\n  return tmp;\n}\n\nexport default solve;<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    const hash = crypto.createHash('md5');\n    if (text) {\n        return hash.update(text, 'utf8').digest('hex');\n    }\n    return null;\n};\n\n/**\n  Given an md5 hash string, return the original string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('3e25960a79dbc69b674cd4ec67a72c62') == 'Hello world'\n  */\nconst md5ToString = (text) => {\n    const hash = crypto.createHash('md5');\n    if (text) {\n        return hash.update(text, 'hex').digest('utf8');\n    }\n    return null;\n};\n\n/**\n  Given an array of strings, return an array of md5 hash strings.\n  If 'text' is an empty array, return null.\n\n  >>> [...stringToMd5(text)...]\n  */\nconst arrayToMd5 = (text) => {\n    const hash = crypto.createHash('md5');\n    if (text) {\n        return text.map((str) => hash.update(str, 'utf8').digest('hex'));\n    }\n    return null;\n};\n\nmodule.exports = {\n    stringToMd5,\n    md5ToString,\n    arrayToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const result = [];\n  for (let i = a; i <= b; i++) {\n    const currentNumber = i.toString(10);\n    if (currentNumber.length % 2 === 0) {\n      result.push(parseInt(currentNumber));\n    }\n  }\n  return result;\n};\n\nmodule.exports = generateIntegers;\n<|endoftext|>"}
