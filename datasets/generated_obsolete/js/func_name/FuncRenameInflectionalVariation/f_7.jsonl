{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hadClosestElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hadClosestElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hadClosestElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hadClosestElements = (numbers, threshold) => {\n  let closest = null\n  let distance = null\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i === j) {\n        continue\n      }\n      distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < threshold) {\n        if (closest === null || distance < closest) {\n          closest = distance\n          distance = null\n        }\n      }\n    }\n  }\n  return closest!== null\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGroup", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGroup('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGroup = (paren_string) => {\n  paren_string = paren_string.trim();\n  const stack = [];\n  const tokens = paren_string.split(/(\\(|\\)|\\(\\)|\\))/);\n  for (let i = 0; i < tokens.length; i += 1) {\n    let token = tokens[i].trim();\n    if (token === \"\") {\n      continue;\n    }\n    if (token === \"(\") {\n      stack.push(token);\n    } else if (token === \")\") {\n      if (stack.length === 0) {\n        throw new Error(\"Unbalanced parentheses\");\n      }\n      const current_token = stack.pop();\n      if (current_token!== \"(\" && current_token!== \")\") {\n        throw new Error(\"Unbalanced parentheses\");\n      }\n    }\n  }\n  if (stack.length!== 0) {\n    throw new Error(\"Unbalanced parentheses\");\n  }\n  return tokens;\n};\n\n// 3. If we have a string that can be interpreted as an int, we want to return that int.\n//    The string may be a valid int, or it may contain invalid characters.\n//    If the string cannot be interpreted as an int, then we want to return -1.\n//    We will implement this function in a way that works with all possible inputs.\n//    \n//    For example, the string \"1A2\" will be interpreted as the ints 1 and 2.\n//    The string \"AA2\" will be interpreted as the ints -1 and -1.\n//    The string \"A1A\" will be interpreted as the ints -1 and 1.\n//    The string \"1\" will be interpreted as the int 1.\n//    \n//    Your goal is to implement this function so that it will work with any string that can be interpreted as an int.\nconst interpretAsInt = (input) => {\n  const num = parseInt(input, 10);\n  if (isNaN(num)) {\n    return -1;\n  } else {\n    return num;\n  }\n};\n\n// 4. Your program should accept a string as input and print the sum of the digits in the string.\n//    The string may contain non-digits or spaces, so you will need to strip these out.\n//    The string may also contain multiple occurrences of the same digit, so you will need to remove duplicates.\n//    \n//    For example, the string \"1222\" will be interpreted as the sum of the digits 1, 2, and 2.\n//    The string \"2222\" will be interpreted as the sum of the digits 2, 2, and 2.\n//    The string \"2233\" will be interpreted as the sum of the digits 2, 3, and 3.\n//    \n//    Your goal is to implement this function so that it will work with any string that can be interpreted as a sum of digits.\nconst interpretAsSumOfDigits = (input) => {\n  const num = parseInt(input.trim(), 10);\n  return num;\n};\n\nconst main = () => {\n  // Your program should print the following.\n  //   - \"Hello, World!\"\n  //   - \"1222\"\n  //   - \"11\"\n  //   - \"2 2\"\n  //   - \"2 3 3 3\"\n  //   - \"1 A\"\n  //   - \"1 A 2\"\n  //   - \"1 A 2 3 A\"\n  //   - \"1 2 3 4\"\n  //   - \"1 2 3 4 5\"\n  //   - \"1 2 3 4 5 6\"\n  //   - \"1 2 3 4 5 6 7\"\n  //   - \"1 2 3 4 5 6 7 8\"\n  //   - \"1 2 3 4 5 6 7 8 9\"\n  //   - \"1 2 3 4 5 6 7 8 9 10\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28\"\n  //   - \"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29\"\n  //   - \"1 2 3 4 5 6 7 8"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNumber(3.5)\n  0.5\n  */\nconst truncateNumber = (number) => {\n    let integerPart = number;\n    let decimalPart = 0;\n    while (integerPart > 1) {\n        integerPart = integerPart - 1;\n        decimalPart = decimalPart + 1;\n    }\n    return decimalPart;\n};\n\nexport default truncateNumber;<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeros", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeros([1, 2, 3])\n  false\n  >>> belowZeros([1, 2, -4, 5])\n  true\n  */\nconst belowZeros = (operations) => {\n    if (!Array.isArray(operations)) {\n        throw new Error('operations should be an array.');\n    }\n\n    let prevBalance = 0;\n\n    operations.forEach(op => {\n        if (op === -1) {\n            prevBalance = prevBalance - 1;\n        } else if (op === 1) {\n            prevBalance = prevBalance + 1;\n        }\n    });\n\n    return prevBalance < 0;\n};\n\nmodule.exports = belowZeros;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanerAbsolutesDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanerAbsolutesDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanerAbsolutesDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const mad = numbers.map(number => Math.abs(number - mean))\n  return Math.mean(mad)\n}\n\n// For a given list of input numbers, calculate Standard Deviation\n// around the mean of this dataset.\n// Standard Deviation is the square root of the average absolute difference\n// between each element and a centerpoint (mean in this case):\n// SD = sqrt(MAD)\n// >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nconst standardDeviation = (numbers) => {\n  const mean = mean(numbers)\n  const mad = numbers.map(number => Math.abs(number - mean))\n  return Math.sqrt(Math.mean(mad))\n}\n\n// For a given list of input numbers, calculate Sum of Squares\n// around the mean of this dataset.\n// Sum of Squares is the average of the squares of each element minus the\n// square of the mean:\n// SS = (x_i - mean)^2\n// >>> sumSquares([1.0, 2.0, 3.0, 4.0])\n// 4.0\nconst sumSquares = (numbers) => {\n  const mean = mean(numbers)\n  const sss = numbers.map(number => Math.pow(number - mean, 2))\n  return Math.mean(sss)\n}\n\n// For a given list of input numbers, calculate the Pearson's Correlation\n// Coefficient.\n// Pearson's Correlation Coefficient is the sum of the products of the squares\n// of the differences between the input and mean divided by the sum of the\n// squares of the differences between the input and the mean:\n// (x_i - mean)^2 x (x_i - mean)^2\n// >>> pearsonCorrelation([1.0, 2.0, 3.0, 4.0])\n// 1.0\nconst pearsonCorrelation = (numbers) => {\n  const mean = mean(numbers)\n  const squaredDeviations = numbers.map(number => Math.pow(number - mean, 2))\n  return sumSquares(squaredDeviations) / sumSquares(numbers)\n}\n\n// For a given list of input numbers, calculate the Correlation Coefficient\n// around the mean of this dataset.\n// Correlation Coefficient is the sum of the products of the squares of the\n// differences between the input and mean divided by the sum of the squares\n// of the differences between the input and the mean:\n// (x_i - mean)^2 x (x_i - mean)^2\n// >>> correlationCoefficient([1.0, 2.0, 3.0, 4.0])\n// 1.0\nconst correlationCoefficient = (numbers) => {\n  const mean = mean(numbers)\n  const squaredDeviations = numbers.map(number => Math.pow(number - mean, 2))\n  return sumSquares(squaredDeviations) / sumSquares(numbers)\n}\n\n// For a given list of input numbers, calculate the Pearson's R Coefficient\n// around the mean of this dataset.\n// Pearson's R Coefficient is the sum of the products of the squares of the\n// differences between the input and mean divided by the sum of the squares of\n// the differences between the input and the mean:\n// (x_i - mean)^2 x (x_i - mean)^2\n// >>> pearsonRCoef([1.0, 2.0, 3.0, 4.0])\n// 1.0\nconst pearsonRCoef = (numbers) => {\n  const mean = mean(numbers)\n  const squaredDeviations = numbers.map(number => Math.pow(number - mean, 2))\n  return sumSquares(squaredDeviations) / sumSquares(numbers)\n}\n\n// For a given list of input numbers, calculate the Spearman's R Coefficient\n// around the mean of this dataset.\n// Spearman's R Coefficient is the sum of the products of the squares of the\n// differences between the input and mean divided by the sum of the squares of\n// the differences between the input and the mean:\n// (x_i - mean)^2 x (x_i - mean)^2\n// >>> spearmanRCoef([1.0, 2.0, 3.0, 4.0])\n// 1.0\nconst spearmanRCoef = (numbers) => {\n  const mean = mean(numbers)\n  const squaredDeviations = numbers.map(number => Math.pow(number - mean, 2))\n  return sumSquares(squaredDeviations) / sumSquares(numbers)\n}\n\n// For a given list of input numbers, calculate the Kolmogorov-Smirnov\n// statistic.\n// Kolmogorov-Smirnov statistic is the maximum difference between the\n// empirical distribution of the input and the cumulative distribution\n// of the input.\n// >>> ks([1.0, 2.0, 3.0, 4.0])\n// 0.0\nconst ks = (numbers) => {\n  const empirical = ks.empirical(numbers)\n  const cumulative = ks.cumulative(numbers)\n  return Math.max(empirical, cumulative)\n}\n\n// For a given list of input numbers, calculate the Kolmogorov-Smirnov\n// statistic.\n// Kolmogorov-Smirnov statistic is the maximum difference between the\n// empirical distribution of the input and the cumulative distribution\n// of the input.\n// >>> ks.empirical([1.0, 2.0, 3.0, 4.0])\n// 0.0\nconst ks.empirical = (numbers) => {\n  const empirical = empiricalDistribution(numbers)\n  const cumulative = cumulativeDistribution(numbers)\n  return Math.max(empirical, cumulative)\n}\n\n// For a given list of input numbers, calculate the Kolmogorov-Smirnov\n// statistic.\n// Kolmogorov-"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intersperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intersperse([], 4)\n  []\n  >>> intersperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intersperse = (numbers, delimeter) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n  }\n  newArray.push(delimeter)\n  for (let i = numbers.length - 1; i < numbers.length; i++) {\n    newArray.push(numbers[i])\n  }\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3], 2)\n  [1, 2, 3, 2, 3, 2]\n  */\nconst intersperseByNth = (numbers, delimeter, nth) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n    if (i % nth === 0) {\n      newArray.push(delimeter)\n    }\n  }\n  newArray.push(numbers[numbers.length - 1])\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3, 4, 5, 6], 3)\n  [1, 4, 7, 8, 9, 6, 7, 8, 9, 6]\n  */\nconst intersperseByNth2 = (numbers, delimeter, nth) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n    if (i % nth === 0) {\n      newArray.push(delimeter)\n    }\n  }\n  newArray.push(numbers[numbers.length - 1])\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3)\n  [1, 6, 7, 8, 9, 10, 6, 7, 8, 9, 10, 6, 7, 8, 9, 10]\n  */\nconst intersperseByNth3 = (numbers, delimeter, nth) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n    if (i % nth === 0) {\n      newArray.push(delimeter)\n    }\n  }\n  newArray.push(numbers[numbers.length - 1])\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 2)\n  [1, 5, 8, 9, 10, 8, 9, 10, 9, 10, 9, 10, 9, 10]\n  */\nconst intersperseByNth4 = (numbers, delimeter, nth) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n    if (i % nth === 0) {\n      newArray.push(delimeter)\n    }\n  }\n  newArray.push(numbers[numbers.length - 1])\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 3)\n  [1, 4, 7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10, 7, 8, 9, 10]\n  */\nconst intersperseByNth5 = (numbers, delimeter, nth) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n    if (i % nth === 0) {\n      newArray.push(delimeter)\n    }\n  }\n  newArray.push(numbers[numbers.length - 1])\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)\n  [1, 5, 8, 9, 10, 8, 9, 10, 9, 10, 9, 10, 9, 10]\n  */\nconst intersperseByNth6 = (numbers, delimeter, nth) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n    if (i % nth === 0) {\n      newArray.push(delimeter)\n    }\n  }\n  newArray.push(numbers[numbers.length - 1])\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 5)\n  [1, 5, 9, 10, 9, 10, 9, 10, 9, 10]\n  */\nconst intersperseByNth7 = (numbers, delimeter, nth) => {\n  let newArray = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    newArray.push(numbers[i])\n    if (i % nth === 0) {\n      newArray.push(delimeter)\n    }\n  }\n  newArray.push(numbers[numbers.length - 1])\n  return newArray\n}\n\n/* Return a new array with 'delimeter' inserted in every n-th position\n  >>> intersperse([1, 2, 3"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNestParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNestParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNestParens = (paren_string) => {\n  const maxDepth = (paren_string.length - 1) / 2;\n  const stack = [];\n  const max_depth = 0;\n  const nest_level = 0;\n  let depth = 0;\n  let paren_match = 0;\n  let str_index = 0;\n  let index = 0;\n  let str_len = paren_string.length;\n  let count = 0;\n\n  while (index < str_len) {\n    paren_match = paren_string.charAt(index);\n    if (paren_match === ')') {\n      if (stack.length > 0 && stack[stack.length - 1] === '(') {\n        stack.pop();\n      } else {\n        if (depth < max_depth) {\n          stack.push('(');\n          depth += 1;\n        }\n      }\n    } else if (paren_match === '(') {\n      if (stack.length > 0 && stack[stack.length - 1] === ')') {\n        stack.pop();\n      } else {\n        stack.push('(');\n        depth += 1;\n      }\n    } else if (paren_match === ')') {\n      if (stack.length > 0 && stack[stack.length - 1] === '(') {\n        stack.pop();\n      } else {\n        if (depth > 0) {\n          stack.push(')');\n          depth -= 1;\n        }\n      }\n    } else if (paren_match === '(') {\n      stack.push('(');\n      depth += 1;\n    }\n    index++;\n  }\n  return stack;\n};\n\n// TEST CODE\n\nconst test_cases = [\n  \"(((())))\",\n  \"((((())))\",\n  \"((()))\",\n  \"((()))\",\n  \"(())\",\n  \"(())\",\n  \"(()()\",\n  \"(()))\",\n  \"(()()\",\n  \"(()))\",\n  \"(()))\",\n  \"(()))\",\n  \"(())\",\n  \"((()()())\",\n  \"(()()))\",\n  \"(()))\",\n  \"(()))\",\n  \"(()))\",\n  \"(()))\",\n  \"(()))\",\n  \"(()))\",\n  \"(()))\",\n  \"(())\",\n  \"((()()()()()))\",\n  \"((()()()()())))\",\n  \"((()()()()()))\",\n  \"((()()()()())))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"((()()()()()))\",\n  \"(("}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filterBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstring = (strings, substring) => {\n  let newStrings = []\n\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      newStrings.push(string)\n    }\n  })\n\n  return newStrings\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithArgs = (strings, substring) => {\n  let newStrings = []\n\n  strings.forEach(string => {\n    if (string.indexOf(substring) > -1) {\n      newStrings.push(string)\n    }\n  })\n\n  return newStrings\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithArgsWithRegex = (strings, substring) => {\n  let newStrings = []\n\n  strings.forEach(string => {\n    if (string.match(new RegExp(substring, 'i'))) {\n      newStrings.push(string)\n    }\n  })\n\n  return newStrings\n}\n\n/*\n  >>> filterBySubstring([], 'a')\n  []\n  >>> filterBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filterBySubstringWithArgsAndRegex = (strings, substring) => {\n  let newStrings = []\n\n  strings.forEach(string => {\n    if (string.match(new RegExp(substring, 'i'))) {\n      newStrings.push(string)\n    }\n  })\n\n  return newStrings\n}\n\nmodule.exports = {\n  filterBySubstring,\n  filterBySubstringWithArgs,\n  filterBySubstringWithArgsWithRegex,\n  filterBySubstringWithArgsAndRegex\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProducts", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProducts([])\n  (0, 1)\n  >>> sumProducts([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProducts = (numbers, int) => {\n  const result = []\n\n  if (!numbers) {\n    return result\n  }\n\n  const last = numbers[numbers.length - 1]\n  numbers.forEach(num => {\n    const curr = last * num\n    result.push(curr)\n    last = curr\n  })\n\n  return result\n}\n\nexport default sumProducts\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let res = [];\n  let nums = numbers.slice();\n  let index = -1;\n  let max = numbers[0];\n  let maxIndex = 0;\n  while (++index < numbers.length) {\n    if (numbers[index] > max) {\n      max = numbers[index];\n      maxIndex = index;\n    }\n    res.push(max);\n    nums.splice(maxIndex, 1);\n  }\n  return res;\n};\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let longest = 0;\n  let postfix = 0;\n  while (string.length > longest) {\n    longest = string.length;\n    postfix = string.split('').reverse().join('');\n    if (isPalindrome(postfix)) {\n      return postfix;\n    }\n  }\n  return '';\n}\n\nmodule.exports = {\n  makePalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "stringXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> stringXor('010', '110')\n  '100'\n  */\nconst stringXor = (a, b) => {\n  if (a === b) return a;\n  if (a.length > b.length) {\n    return stringXor(b, a);\n  }\n\n  let i = 0;\n  let result = '';\n  let xor = 0;\n  for (i = 0; i < b.length; i++) {\n    xor = (xor << 1) | a[i] ^ b[i];\n    if (xor & 1) result += '1';\n    else result += '0';\n  }\n  return result;\n};\n\n/*\n  Find the longest palindrome in the string\n  >>> stringLongestPalindrome('abcd')\n  'abcd'\n  >>> stringLongestPalindrome('cba')\n  'cba'\n  >>> stringLongestPalindrome('bca')\n  'bc'\n  >>> stringLongestPalindrome('abc')\n  'abc'\n  >>> stringLongestPalindrome('a')\n  'a'\n  >>> stringLongestPalindrome('aaa')\n  'aaa'\n  >>> stringLongestPalindrome('')\n  ''\n  */\nconst stringLongestPalindrome = (s) => {\n  if (!s || s.length === 0) return '';\n\n  let l = 0;\n  let r = s.length - 1;\n  let result = '';\n  while (l <= r) {\n    while (l < s.length - 1 && s[l] === s[l + 1]) l++;\n    while (r >= 0 && s[r] === s[r - 1]) r--;\n    if (l <= r) {\n      result = s.slice(l, r + 1);\n      l++;\n      r--;\n    }\n  }\n  return result;\n};\n\n/*\n  Print the character frequency of the string\n  >>> stringFrequency('abc')\n  {'a': 2, 'b': 1, 'c': 3}\n  >>> stringFrequency('a')\n  {'a': 1}\n  >>> stringFrequency('b')\n  {'b': 1}\n  >>> stringFrequency('c')\n  {'c': 1}\n  >>> stringFrequency('cba')\n  {'c': 2, 'b': 1, 'a': 1}\n  >>> stringFrequency('a')\n  {'a': 1}\n  >>> stringFrequency('ab')\n  {'ab': 1}\n  >>> stringFrequency('')\n  {'': 1}\n  */\nconst stringFrequency = (s) => {\n  let frequency = {};\n  let l = 0;\n  for (l = 0; l < s.length; l++) {\n    if (!frequency[s[l]]) frequency[s[l]] = 0;\n    frequency[s[l]]++;\n  }\n  return frequency;\n};\n\n/*\n  Return the first occurrence of the word in the string\n  >>> stringFirstOccurrence('abc', 'c')\n  2\n  >>> stringFirstOccurrence('abc', 'd')\n  -1\n  >>> stringFirstOccurrence('abc', 'a')\n  0\n  >>> stringFirstOccurrence('abc', 'cba')\n  -1\n  >>> stringFirstOccurrence('abc', '')\n  0\n  */\nconst stringFirstOccurrence = (s, w) => {\n  let start = 0;\n  let l = 0;\n  let r = 0;\n  let index = 0;\n  while (l <= s.length - 1) {\n    while (l < s.length - 1 && s[l]!== w[index]) l++;\n    while (r >= 0 && s[r]!== w[index]) r--;\n    if (l <= r) {\n      start = l;\n      l++;\n      r--;\n      index++;\n    }\n  }\n  return start;\n};\n\n/*\n  Return the index of the first occurrence of the word in the string\n  >>> stringIndexOf('abc', 'c')\n  2\n  >>> stringIndexOf('abc', 'd')\n  -1\n  >>> stringIndexOf('abc', 'a')\n  0\n  >>> stringIndexOf('abc', 'cba')\n  -1\n  >>> stringIndexOf('abc', '')\n  0\n  */\nconst stringIndexOf = (s, w) => {\n  let start = 0;\n  let l = 0;\n  let r = 0;\n  let index = 0;\n  while (l <= s.length - 1) {\n    while (l < s.length - 1 && s[l]!== w[index]) l++;\n    while (r >= 0 && s[r]!== w[index]) r--;\n    if (l <= r) {\n      start = l;\n      l++;\n      r--;\n      index++;\n    }\n  }\n  return start;\n};\n\nmodule.exports = {\n  stringLongestPalindrome,\n  stringXor,\n  stringFrequency,\n  stringFirstOccurrence,\n  stringIndexOf\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longer", "gc": "/* Out of list of strings, return the longer one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer([])\n\n  >>> longer(['a', 'b', 'c'])\n  'a'\n  >>> longer(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longer = (strings) => {\n  if (strings.length === 0) return null\n\n  return strings.reduce((a, b) => {\n    if (a.length < b.length) {\n      return b\n    } else {\n      return a\n    }\n  })\n}\n\n/*\n  Returns the first string from the input list that is longer than the\n  length of the second string. Return the second string in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longer_than('', 'a')\n  'a'\n  >>> longer_than('a', 'a')\n  'a'\n  >>> longer_than('aa', 'a')\n  'aa'\n  >>> longer_than('aa', 'aa')\n  'aa'\n  >>> longer_than('aaa', 'aa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than('aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa', 'aaa')\n  'aaa'\n  >>> longer_than"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "greaterCommonDivisors", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> greaterCommonDivisors(3, 5)\n  1\n  >>> greaterCommonDivisors(25, 15)\n  5\n  */\nconst greaterCommonDivisors = (a, b) => {\n  const aArray = [];\n  const bArray = [];\n\n  while (a > 1) {\n    aArray.push(a);\n    a = a % b;\n  }\n\n  while (b > 1) {\n    bArray.push(b);\n    b = b % a;\n  }\n\n  let l = aArray.length - 1;\n  let r = bArray.length - 1;\n  let i = 0;\n  let j = 0;\n\n  while (i < l) {\n    while (j < r && aArray[i] % bArray[j]!== 0) {\n      j++;\n    }\n\n    if (j === r) {\n      return bArray[j];\n    }\n\n    let tmp = bArray[j];\n    bArray[j] = aArray[i];\n    aArray[i] = tmp;\n    i++;\n    j++;\n  }\n\n  return 1;\n};\n\nexport default greaterCommonDivisors;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const ret = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i + 1);\n    ret.push(prefix);\n  }\n  return ret;\n};\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const ret = [];\n  const length = string.length;\n  for (let i = 0; i < length; i++) {\n    const suffix = string.substring(length - i - 1);\n    ret.push(suffix);\n  }\n  return ret;\n};\n\n/* Return all of the combinations of the given string\n  >>> allCombinations('abc')\n  [[], ['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n  */\nconst allCombinations = (string) => {\n  const length = string.length;\n  const ret = [];\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i);\n    const suffix = string.substring(length - i - 1);\n    const sub = [prefix, suffix];\n    ret.push(sub);\n    for (let j = i + 1; j < length; j++) {\n      const sub1 = string.substring(i, j);\n      const sub2 = string.substring(length - j - 1);\n      const sub3 = [prefix, sub1, suffix, sub2];\n      ret.push(sub3);\n    }\n  }\n  return ret;\n};\n\n/* Return all of the permutations of the given string\n  >>> allPermutations('abc')\n  [[], ['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n  */\nconst allPermutations = (string) => {\n  const length = string.length;\n  const ret = [];\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i);\n    const suffix = string.substring(length - i - 1);\n    const sub = [prefix, suffix];\n    ret.push(sub);\n    for (let j = i + 1; j < length; j++) {\n      const sub1 = string.substring(i, j);\n      const sub2 = string.substring(length - j - 1);\n      const sub3 = [prefix, sub1, suffix, sub2];\n      ret.push(sub3);\n    }\n  }\n  return ret;\n};\n\n/* Return all of the permutations of the given string\n  >>> allPermutations('abc')\n  [[], ['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n  */\nconst allPermutations = (string) => {\n  const length = string.length;\n  const ret = [];\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i);\n    const suffix = string.substring(length - i - 1);\n    const sub = [prefix, suffix];\n    ret.push(sub);\n    for (let j = i + 1; j < length; j++) {\n      const sub1 = string.substring(i, j);\n      const sub2 = string.substring(length - j - 1);\n      const sub3 = [prefix, sub1, suffix, sub2];\n      ret.push(sub3);\n    }\n  }\n  return ret;\n};\n\n/* Return all of the permutations of the given string\n  >>> allPermutations('abc')\n  [[], ['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n  */\nconst allPermutations = (string) => {\n  const length = string.length;\n  const ret = [];\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i);\n    const suffix = string.substring(length - i - 1);\n    const sub = [prefix, suffix];\n    ret.push(sub);\n    for (let j = i + 1; j < length; j++) {\n      const sub1 = string.substring(i, j);\n      const sub2 = string.substring(length - j - 1);\n      const sub3 = [prefix, sub1, suffix, sub2];\n      ret.push(sub3);\n    }\n  }\n  return ret;\n};\n\n/* Return all of the permutations of the given string\n  >>> allPermutations('abc')\n  [[], ['a'], ['b'], ['c'], ['a', 'b'], ['a', 'c'], ['b', 'c'], ['a', 'b', 'c']]\n  */\nconst allPermutations = (string) => {\n  const length = string.length;\n  const ret = [];\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substring(0, i);\n    const suffix = string.substring(length - i - 1);\n    const sub = [prefix, suffix];\n    ret.push(sub);\n    for (let j = i + 1; j < length; j++) {\n      const sub1 = string.substring(i, j);\n      const sub2 = string.substring(length - j - 1);\n      const sub3 = [prefix, sub1, suffix, sub2];\n      ret.push(sub3);\n    }\n  }\n  return ret;\n};\n\nmodule.exports = {\n  allCombinations,\n  allPermutations,\n  allPrefixes,\n  allSuffixes,\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequences", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequences(0)\n  '0'\n  >>> stringSequences(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequences = (n) => {\n  let result = ''\n  for (let i = 0; i <= n; i++) {\n    result += `${i}`\n  }\n  return result\n}\n\n/* Return a string containing the first n chars of the string s.\n  >>> firstChars('hello world')\n  'hello'\n  >>> firstChars('helloworld')\n  'hell'\n  >>> firstChars('helloworld', 2)\n  'hell'\n  >>> firstChars('helloworld', 5)\n  'hellow'\n  >>> firstChars('helloworld', 6)\n  'helloword'\n  */\nconst firstChars = (s, n) => {\n  return s.substring(0, n)\n}\n\n/* Return a string containing all of the chars of the string s.\n  >>> chars('hello world')\n  'hello world'\n  >>> chars('helloworld')\n  'helloworld'\n  >>> chars('helloworld', 2)\n  'helloworld'\n  >>> chars('helloworld', 5)\n  'helloworld'\n  >>> chars('helloworld', 6)\n  'helloworld'\n  */\nconst chars = (s) => {\n  return s\n}\n\n/* Return a string containing the first n numbers of the string s.\n  >>> numberSequences(0)\n  '0'\n  >>> numberSequences(1)\n  '0'\n  >>> numberSequences(3)\n  '0 1 2'\n  >>> numberSequences(5)\n  '0 1 2 3 4'\n  >>> numberSequences(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst numberSequences = (n) => {\n  let result = ''\n  for (let i = 0; i <= n; i++) {\n    result += `${i}`\n  }\n  return result\n}\n\n/* Return a string containing the first n strings of the string s.\n  >>> stringSequences(0)\n  ''\n  >>> stringSequences(1)\n  ''\n  >>> stringSequences(3)\n  '0 1 2'\n  >>> stringSequences(5)\n  '0 1 2 3 4'\n  >>> stringSequences(10)\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequences = (n) => {\n  let result = ''\n  for (let i = 0; i <= n; i++) {\n    result += `${i}`\n  }\n  return result\n}\n\n/* Return a string containing the first n chars of each of the strings in s.\n  >>> firstCharsByString('hello world')\n  'hello world'\n  >>> firstCharsByString('helloworld')\n  'helloworld'\n  >>> firstCharsByString('helloworld', 2)\n  'helloworld'\n  >>> firstCharsByString('helloworld', 5)\n  'helloworld'\n  >>> firstCharsByString('helloworld', 6)\n  'helloworld'\n  */\nconst firstCharsByString = (s) => {\n  return s.split(' ').join(' ').substring(0, n)\n}\n\n/* Return a string containing the first n numbers of each of the strings in s.\n  >>> numberSequencesByString('0')\n  '0'\n  >>> numberSequencesByString('1')\n  '0'\n  >>> numberSequencesByString('3')\n  '0 1 2'\n  >>> numberSequencesByString('5')\n  '0 1 2 3 4'\n  >>> numberSequencesByString('10')\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst numberSequencesByString = (s) => {\n  return s.split(' ').join(' ').split('').join('').substring(0, n)\n}\n\n/* Return a string containing the first n strings of each of the strings in s.\n  >>> stringSequencesByString('')\n  ''\n  >>> stringSequencesByString('1')\n  ''\n  >>> stringSequencesByString('3')\n  '0 1 2'\n  >>> stringSequencesByString('5')\n  '0 1 2 3 4'\n  >>> stringSequencesByString('10')\n  '0 1 2 3 4 5 6 7 8 9'\n  */\nconst stringSequencesByString = (s) => {\n  return s.split(' ').join(' ').split('').join('').split('').join('').substring(0, n)\n}\n\nmodule.exports = {\n  firstChars,\n  firstCharsByString,\n  chars,\n  charsByString,\n  numberSequences,\n  numberSequencesByString,\n  stringSequences,\n  stringSequencesByString,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistincterCharacter", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistincterCharacter('xyzXYZ')\n  3\n  >>> countDistincterCharacter('Jerry')\n  4\n  */\nconst countDistincterCharacter = (string) => {\n    let result = 1\n    let len = string.length\n    let chars = []\n    for (let i = 0; i < len; i++) {\n        chars.push(string.charCodeAt(i))\n    }\n    chars.sort(() => {\n        return (a, b) => a - b\n    })\n    let current = chars[0]\n    let last = current\n    for (let i = 1; i < len; i++) {\n        if (chars[i]!== last) {\n            last = current\n            result++\n        }\n    }\n    return result\n}\n\n/*\n  Given a string, find out how many letters are in upper case and the rest are in lower case.\n  >>> countUppercaseLetter('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz123')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!@#$%^&*()_+`-={}[]|:;<,>.?/~')\n  26\n  >>> countUppercaseLetter('ABCDEFGHIJKLMNOPQRSTUVWXYZ!@#$')\n  26\n  >>> countUppercaseLetter('aBcDeFgHiJkLmNoPqRstUvWxYz!@#$')\n  26\n  >>> countUppercaseLetter('!"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const notes = [];\n  let note_type;\n  let note_length;\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o') {\n      note_type = 'whole';\n      note_length = 4;\n    } else if (music_string[i] === 'o|') {\n      note_type = 'half';\n      note_length = 2;\n    } else if (music_string[i] === '.') {\n      note_type = 'quarter';\n      note_length = 1;\n    }\n    notes.push({ note_type, note_length });\n  }\n  return notes;\n};\n\n/*\n  Input: A string representing musical notes in a special ASCII format.\n  Output: An integer.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> calculateDuration('o o|.| o| o|.|.|.|.| o o')\n  4\n  */\nconst calculateDuration = (music_string) => {\n  const notes = parseMusic(music_string);\n  let duration = 0;\n  for (let i = 0; i < notes.length; i++) {\n    duration += notes[i].note_length;\n  }\n  return duration;\n};\n\n/*\n  Input: A string representing musical notes in a special ASCII format.\n  Output: The number of beats in the music.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> calculateBeats('o o|.| o| o|.|.|.|.| o o')\n  4\n  */\nconst calculateBeats = (music_string) => {\n  return calculateDuration(music_string) / 4;\n};\n\n/*\n  Input: A string representing musical notes in a special ASCII format.\n  Output: The number of measures in the music.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> calculateMeasures('o o|.| o| o|.|.|.|.| o o')\n  2\n  */\nconst calculateMeasures = (music_string) => {\n  const beats = calculateBeats(music_string);\n  return beats / 4;\n};\n\n/*\n  Input: A string representing musical notes in a special ASCII format.\n  Output: The number of measures in the music.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> calculateMeasures('o o|.| o| o|.|.|.|.| o o')\n  2\n  */\nconst calculateMeasures2 = (music_string) => {\n  const beats = parseMusic(music_string);\n  return beats / 4;\n};\n\n/*\n  Input: A string representing musical notes in a special ASCII format.\n  Output: The number of beats in the music.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> calculateMeasures2('o o|.| o| o|.|.|.|.| o o')\n  4\n  */\n\nconst beat_to_measure = (music_string) => {\n  const beats = parseMusic(music_string);\n  const beats_per_measure = beats / 4;\n  return beats_per_measure;\n};\n\n/*\n  Input: A string representing musical notes in a special ASCII format.\n  Output: The number of beats in the music.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> beat_to_measure('o o|.| o| o|.|.|.|.| o o')\n  4\n  */\nconst beat_to_measure2 = (music_string) => {\n  const beats = parseMusic(music_string);\n  return beats;\n};\n\nconst beat_to_measure_array = (music_string) => {\n  const beats = parseMusic(music_string);\n  const beats_per_measure = beats / 4;\n  return beats_per_measure;\n};\n\nconst measures_to_beats = (measure_count) => {\n  const measures = parseMusic('o o|.| o| o|.|.|.|.| o o');\n  const beats = measures * 4;\n  return beats;\n};\n\nconst beat_to_measure_array2 = (music_string) => {\n  const beats = parseMusic(music_string);\n  return beats;\n};\n\nconst beat_to_measure_array3 = (music_string) => {\n  const beats = parseMusic(music_string);\n  return beats;\n};\n\nconst measure_to_beats = (measure_count) => {\n  const beats = parseMusic('o o|.| o| o|.|.|.|.| o o');\n  const measures = beats / 4;\n  return measures;\n};\n\nconst beats_to_measure = (beats) => {\n  const beats_per_measure = beats / 4;\n  return beats_per_measure;\n};\n\nconst beats_to"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTime", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTime('', 'a')\n  0\n  >>> howManyTime('aaa', 'a')\n  3\n  >>> howManyTime('aaaa', 'aa')\n  3\n  */\nconst howManyTime = (string, substring) => {\n  const result = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    const start = i;\n    let j = 0;\n    while (j < substring.length && string[j + start] === substring[j]) {\n      j++;\n    }\n    if (j === substring.length) {\n      result++;\n    }\n  }\n  return result;\n};\n\nexport default howManyTime;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortsNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortsNumbers('three one five')\n  'one three five'\n  */\nconst sortsNumbers = (numbers) => {\n    let numberals = [...numbers.split(' ').map((number) => parseInt(number, 10))];\n    numberals.sort((x, y) => x - y);\n    return numberals.join(' ');\n}\n\nlet sortTest = () => {\n    console.log(sortsNumbers('three one five'));\n};\n\nconsole.log(`\\n\\nTesting function \"sortsNumbers\".`);\nsortTest();\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "foundCloserElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> foundCloserElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst foundCloserElements = (numbers) => {\n  const distances = new Array(numbers.length).fill(0);\n\n  for (let i = 0; i < numbers.length; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      distances[i] += Math.pow(numbers[i] - numbers[j], 2);\n      distances[j] += Math.pow(numbers[i] - numbers[j], 2);\n    }\n  }\n\n  let result = [\n    Math.min.apply(null, distances),\n    Math.max.apply(null, distances)\n  ];\n\n  for (let i = 0; i < distances.length; i++) {\n    if (distances[i] === result[0]) {\n      result[0] = result[1];\n    }\n\n    if (distances[i] === result[1]) {\n      result[1] = result[0];\n    }\n  }\n\n  return result;\n};\n\nmodule.exports = foundCloserElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleToUnits", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleToUnits([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleToUnits = (numbers) => {\n  const scaled = [0, 0, 0, 0, 0];\n  for (let i = 0; i < numbers.length; i++) {\n    const num = numbers[i];\n    const unit = 1 / num;\n    scaled[i] = unit;\n  }\n  return scaled;\n};\n\nmodule.exports = rescaleToUnits;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filterIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filterIntegers(['a', 3.14, 5])\n  [5]\n  >>> filterIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterIntegers = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/* Filter given list of any python values only for floats\n  >>> filterFloats(['a', 3.14, 5])\n  []\n  >>> filterFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFloats = (values) => {\n  return values.filter(value => typeof value === 'number')\n}\n\n/* Filter given list of any python values only for strings\n  >>> filterStrings(['a', 3.14, 5])\n  ['a', 3.14, 5]\n  >>> filterStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterStrings = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for lists\n  >>> filterLists(['a', 3.14, 5])\n  []\n  >>> filterLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterLists = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for dictionaries\n  >>> filterDictionaries(['a', 3.14, 5])\n  []\n  >>> filterDictionaries([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filterDictionaries = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterNumbers = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterBooleans = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  []\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterSets = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterFunctions = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects2 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  []\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects3 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects4 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects5 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['a', 3.14, 5])\n  []\n  >>> filterBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects6 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for sets\n  >>> filterSets(['a', 3.14, 5])\n  []\n  >>> filterSets([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects7 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for functions\n  >>> filterFunctions(['a', 3.14, 5])\n  []\n  >>> filterFunctions([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects8 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for numbers\n  >>> filterNumbers(['a', 3.14, 5])\n  [5]\n  >>> filterNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filterObjects9 = (values) => {\n  return values\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filterBooleans(['"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  if (!string) return 0\n  return string.length\n}\n\n/**\n  * Return character at given index of given string\n  * @param {String} string\n  * @param {Number} index\n  * @return {String}\n  * @example\n  * strchar('')\n  * //=> ''\n  * strchar('abc')\n  * //=> 'a'\n  * strchar('abc', 1)\n  * //=> 'b'\n  * strchar('abc', 2)\n  * //=> 'c'\n  * strchar('abc', 3)\n  * //=> ''\n  */\nconst strchar = (string, index) => {\n  if (!string) return ''\n  return string.charAt(index)\n}\n\n/**\n  * Return last character of given string\n  * @param {String} string\n  * @return {String}\n  * @example\n  * strlastchar('')\n  * //=> ''\n  * strlastchar('abc')\n  * //=> 'c'\n  * strlastchar('abc', 1)\n  * //=> 'b'\n  * strlastchar('abc', 2)\n  * //=> 'c'\n  */\nconst strlastchar = (string) => {\n  if (!string) return ''\n  return string.charAt(string.length - 1)\n}\n\n/**\n  * Return last index of given character in given string\n  * @param {String} string\n  * @param {String} character\n  * @return {Number}\n  * @example\n  * strlastindexof('')\n  * //=> -1\n  * strlastindexof('abc')\n  * //=> 2\n  * strlastindexof('abc', 'a')\n  * //=> 0\n  * strlastindexof('abc', 'b')\n  * //=> 1\n  * strlastindexof('abc', 'c')\n  * //=> 2\n  * strlastindexof('abc', 'd')\n  * //=> -1\n  */\nconst strlastindexof = (string, character) => {\n  if (!string) return -1\n  let index = string.lastIndexOf(character)\n  if (index === -1) return -1\n  return index\n}\n\n/**\n  * Return index of given character in given string\n  * @param {String} string\n  * @param {String} character\n  * @return {Number}\n  * @example\n  * strindexof('')\n  * //=> -1\n  * strindexof('abc')\n  * //=> 1\n  * strindexof('abc', 'a')\n  * //=> 0\n  * strindexof('abc', 'b')\n  * //=> 1\n  * strindexof('abc', 'c')\n  * //=> 2\n  * strindexof('abc', 'd')\n  * //=> -1\n  */\nconst strindexof = (string, character) => {\n  if (!string) return -1\n  let index = string.indexOf(character)\n  if (index === -1) return -1\n  return index\n}\n\n/**\n  * Return index of given string in given string\n  * @param {String} string\n  * @param {String} sub\n  * @return {Number}\n  * @example\n  * strindex('')\n  * //=> -1\n  * strindex('abc')\n  * //=> -1\n  * strindex('abc', 'a')\n  * //=> 0\n  * strindex('abc', 'b')\n  * //=> 1\n  * strindex('abc', 'c')\n  * //=> 2\n  * strindex('abc', 'd')\n  * //=> -1\n  */\nconst strindex = (string, sub) => {\n  if (!string) return -1\n  let index = string.indexOf(sub)\n  if (index === -1) return -1\n  return index\n}\n\n/**\n  * Return substring of given string\n  * @param {String} string\n  * @param {Number} start\n  * @param {Number} length\n  * @return {String}\n  * @example\n  * strsub('')\n  * //=> ''\n  * strsub('abc')\n  * //=> 'abc'\n  * strsub('abc', 1)\n  * //=> 'bc'\n  * strsub('abc', 1, 2)\n  * //=> 'b'\n  */\nconst strsub = (string, start, length) => {\n  if (!string) return ''\n  let len = strlen(string)\n  if (start === undefined) {\n    start = 0\n  } else if (start < 0) {\n    start = len + start\n  }\n  if (length === undefined) {\n    length = len\n  }\n  if (start + length > len) {\n    length = len - start\n  }\n  return string.slice(start, start + length)\n}\n\n/**\n  * Return first index of given character in given string\n  * @param {String} string\n  * @param {String} character\n  * @return {Number}\n  * @example\n  * strlastindexof('')\n  * //=> -1\n  * strlastindexof('abc')\n  * //=> 2\n  * strlastindexof('abc', 'a')\n  * //=> 0\n  * strlastindexof('abc', 'b')\n  * //=> 1\n  * strlastindexof('abc', 'c')\n  * //=> 2\n  * strlastindexof('abc', 'd')\n  * //=> -1\n  */\nconst strlastindex = (string, character) => {\n  if (!string) return -1\n  let index = string.lastIndexOf(character)\n  if (index === -1) return -1\n  return index\n}\n\n/**\n  * Return last index of given character in given string\n  * @param {String} string\n  * @param {String} character\n  * @return {Number}\n  * @example\n  * strlastindexof('')\n  * //=> -1\n  * strlastindexof('abc')\n  * //=> 2\n  * strlastindexof('abc', 'a')\n  * //=> 0\n  * strlastindexof"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largerDivisors", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largerDivisors(15)\n  5\n  */\nconst largerDivisors = (n) => {\n  const nums = Array.from(Array(n)).map((_, i) => i);\n  const divisors = [1];\n\n  for (let i = 2; i < nums.length; i++) {\n    const num = nums[i];\n    if (nums.indexOf(num) === -1) continue;\n\n    for (let j = 1; j < divisors.length; j++) {\n      if (num % divisors[j] === 0) {\n        const diff = divisors[j] - nums[nums.indexOf(num)];\n        if (diff > 0 && diff < num) {\n          divisors.splice(j, 1, diff);\n        }\n      }\n    }\n  }\n\n  return divisors.sort()[0];\n};\n\nexport default largerDivisors;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorizes", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorizes(8)\n  [2, 2, 2]\n  >>> factorizes(25)\n  [5, 5]\n  >>> factorizes(70)\n  [2, 5, 7]\n  */\nconst factorizes = (n) => {\n  const factors = []\n  let p = 2\n  while (p * p <= n) {\n    if (n % p === 0) {\n      const count = n / p\n      factors.push(p)\n      for (let i = 0; i < count; i++) {\n        factors.push(p)\n      }\n    }\n    p++\n  }\n  return factors\n}\n\n/* Return the sum of the primes below the given number.\n  Input number should be equal to the sum of all prime factors.\n  >>> sumPrimes(1)\n  0\n  >>> sumPrimes(3)\n  2\n  >>> sumPrimes(10)\n  13\n  */\nconst sumPrimes = (n) => {\n  const s = 0\n  for (let p = 2; p <= n; p++) {\n    if (isPrime(p)) {\n      s += p\n    }\n  }\n  return s\n}\n\n/* Return the sum of all the primes below the given number.\n  Input number should be equal to the sum of all prime factors.\n  >>> sumAllPrimes(1)\n  0\n  >>> sumAllPrimes(3)\n  2\n  >>> sumAllPrimes(10)\n  13\n  */\nconst sumAllPrimes = (n) => {\n  const s = 0\n  for (let p = 2; p <= n; p++) {\n    if (isPrime(p)) {\n      s += p\n    }\n  }\n  return s\n}\n\n/* Return a number of prime numbers below given number.\n  Input number should be equal to the sum of all prime factors.\n  >>> countPrimes(1)\n  0\n  >>> countPrimes(3)\n  1\n  >>> countPrimes(10)\n  3\n  >>> countPrimes(15)\n  3\n  >>> countPrimes(100)\n  5\n  */\nconst countPrimes = (n) => {\n  const count = 0\n  for (let p = 2; p <= n; p++) {\n    if (isPrime(p)) {\n      count++\n    }\n  }\n  return count\n}\n\n/* Return a number of all prime numbers below given number.\n  Input number should be equal to the sum of all prime factors.\n  >>> countAllPrimes(1)\n  0\n  >>> countAllPrimes(3)\n  1\n  >>> countAllPrimes(10)\n  3\n  >>> countAllPrimes(15)\n  3\n  >>> countAllPrimes(100)\n  5\n  */\nconst countAllPrimes = (n) => {\n  const count = 0\n  for (let p = 2; p <= n; p++) {\n    if (isPrime(p)) {\n      count++\n    }\n  }\n  return count\n}\n\n/* Return true if the given number is prime, false otherwise.\n  Input number should be equal to the sum of all prime factors.\n  >>> isPrime(1)\n  false\n  >>> isPrime(3)\n  true\n  >>> isPrime(10)\n  false\n  >>> isPrime(15)\n  true\n  >>> isPrime(100)\n  false\n  */\nconst isPrime = (n) => {\n  if (n === 1) return false\n  const p = n\n  let p2 = 2\n  while (p2 <= n) {\n    if (n % p2 === 0) return false\n    p2 += 1\n  }\n  return true\n}\n\n/* Return the number of combinations of the given number of objects.\n  Input number should be equal to the sum of all prime factors.\n  >>> combinations(1)\n  0\n  >>> combinations(3)\n  1\n  >>> combinations(10)\n  3\n  >>> combinations(15)\n  3\n  >>> combinations(100)\n  5\n  >>> combinations(101)\n  6\n  >>> combinations(999)\n  8\n  >>> combinations(1000)\n  9\n  */\nconst combinations = (n) => {\n  let count = 1\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      count *= (i - 1)\n    }\n  }\n  return count\n}\n\n/* Return the sum of all the combinations of the given number of objects.\n  Input number should be equal to the sum of all prime factors.\n  >>> sumCombinations(1)\n  0\n  >>> sumCombinations(3)\n  6\n  >>> sumCombinations(10)\n  15\n  >>> sumCombinations(15)\n  15\n  >>> sumCombinations(100)\n  135\n  >>> sumCombinations(101)\n  146\n  >>> sumCombinations(999)\n  1326\n  >>> sumCombinations(1000)\n  1397\n  */\nconst sumCombinations = (n) => {\n  const sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += combinations(i)\n    }\n  }\n  return sum\n}\n\n/* Return the sum of all the combinations of the given number of objects.\n  Input number should be equal to the sum of all prime factors.\n  >>> sumAllCombinations(1)\n  0\n  >>> sumAllCombinations(3)\n  6\n  >>> sumAllCombinations(10)\n  15\n  >>> sumAllCombinations(15)\n  15\n  >>> sumAllCombinations(100)\n  135\n  >>> sumAllCombinations(101)\n  146\n  >>> sumAllCombinations(999)\n  1326\n  >>> sumAllCombinations(1000)\n  1397\n  */\nconst sumAllCombinations = (n) => {\n  const sum = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      sum += sumCombinations(i)\n    }\n  }\n  return sum\n}\n\n/* Return true if the given number is a prime, false otherwise.\n"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicate", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicate([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicate = (numbers) => {\n  if (!numbers || numbers.length === 0) {\n    return [];\n  }\n  const result = [];\n  const len = numbers.length;\n  let i = 0;\n  let j = i;\n  while (i < len) {\n    const number = numbers[i];\n    if (numbers.indexOf(number) === j) {\n      result.push(number);\n      j++;\n    } else {\n      i++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = removeDuplicate;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipsCases", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipsCases = (string) => {\n  return string.split('').map((character) => {\n    if (character >= 'a' && character <= 'z') {\n      return character.toUpperCase();\n    } else if (character >= 'A' && character <= 'Z') {\n      return character.toLowerCase();\n    } else {\n      return character;\n    }\n  }).join('');\n};\n\n/*\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipChars = (string) => {\n  return flipsCases(string.split('').reverse().join(''));\n};\n\n/*\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipChars2 = (string) => {\n  return flipsCases(string.split('').reverse().join('')).split('').reverse().join('');\n};\n\n/*\n  >>> flipsCases('Hello')\n  'hELLO'\n  */\nconst flipChars3 = (string) => {\n  return flipsCases(string.split('').reverse().join('')).split('').reverse().join('').split('').reverse().join('');\n};\n\nmodule.exports = {\n  flipCases,\n  flipChars,\n  flipChars2,\n  flipChars3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "concatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> concatenate([])\n  ''\n  >>> concatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => acc + cur, '');\n};\n\n/* Add a new string to a list of strings\n  >>> concatenate([])\n  []\n  >>> concatenate([])\n  []\n  >>> concatenate(['a'])\n  ['a']\n  >>> concatenate(['a'])\n  ['a']\n  >>> concatenate([''])\n  ['']\n  >>> concatenate([''])\n  ['']\n  >>> concatenate(['', 'a'])\n  ['a']\n  >>> concatenate(['', 'a'])\n  ['a']\n  >>> concatenate(['a', 'b'])\n  ['a', 'b']\n  >>> concatenate(['a', 'b'])\n  ['a', 'b']\n  >>> concatenate(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> concatenate(['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  */\nconst concatenate = (strings) => {\n  return strings.reduce((acc, cur) => [...acc, cur], []);\n};\n\nmodule.exports = {\n  concatenate\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filterByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filterByPrefix([], 'a')\n  []\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filterByPrefix = (strings, prefix) => {\n  return (strings || []).filter(string => string.startsWith(prefix));\n};\n\n/*\n  >>> filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  >>> filterByPrefix([], 'a')\n  []\n  */\nexport default filterByPrefix;\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "gottenPositive", "gc": "/*Return only positive numbers in the list.\n  >>> gottenPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> gottenPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst gottenPositive = (l) => {\n  return l.filter(i => i > 0)\n}\n\n/**\n  * Returns all the elements in the list that are equal to the given element.\n  * @param {Array} l\n  * @param {number} e\n  * @return {Array}\n  */\nconst gottenEqual = (l, e) => {\n  return l.filter(i => i === e)\n}\n\n/**\n  * Returns all the elements in the list that are not equal to the given element.\n  * @param {Array} l\n  * @param {number} e\n  * @return {Array}\n  */\nconst gottenNotEqual = (l, e) => {\n  return l.filter(i => i!== e)\n}\n\n/**\n  * Returns all the elements in the list that are less than the given element.\n  * @param {Array} l\n  * @param {number} e\n  * @return {Array}\n  */\nconst gottenLessThan = (l, e) => {\n  return l.filter(i => i < e)\n}\n\n/**\n  * Returns all the elements in the list that are less than or equal to the given element.\n  * @param {Array} l\n  * @param {number} e\n  * @return {Array}\n  */\nconst gottenLessThanOrEqual = (l, e) => {\n  return l.filter(i => i <= e)\n}\n\n/**\n  * Returns all the elements in the list that are greater than the given element.\n  * @param {Array} l\n  * @param {number} e\n  * @return {Array}\n  */\nconst gottenGreaterThan = (l, e) => {\n  return l.filter(i => i > e)\n}\n\n/**\n  * Returns all the elements in the list that are greater than or equal to the given element.\n  * @param {Array} l\n  * @param {number} e\n  * @return {Array}\n  */\nconst gottenGreaterThanOrEqual = (l, e) => {\n  return l.filter(i => i >= e)\n}\n\nmodule.exports = {\n  gottenPositive,\n  gottenEqual,\n  gottenNotEqual,\n  gottenLessThan,\n  gottenLessThanOrEqual,\n  gottenGreaterThan,\n  gottenGreaterThanOrEqual,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPrime(6)\n  false\n  >>> isPrime(101)\n  true\n  >>> isPrime(11)\n  true\n  >>> isPrime(13441)\n  true\n  >>> isPrime(61)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(1)\n  false\n  */\nconst isPrime = (n) => {\n  if (n < 2) {\n    return false;\n  }\n  if (n < 4) {\n    return true;\n  }\n  const d = n - 1;\n  if (d % 2 == 0) {\n    return false;\n  }\n  const m = Math.sqrt(n);\n  for (let i = 3; i <= m; i += 2) {\n    if (d % i == 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Return the number of prime numbers less than or equal to n.\n  >>> countPrimes(1)\n  1\n  >>> countPrimes(4)\n  2\n  >>> countPrimes(10)\n  5\n  >>> countPrimes(100)\n  12\n  >>> countPrimes(200)\n  21\n  >>> countPrimes(600)\n  37\n  >>> countPrimes(1000)\n  87\n  >>> countPrimes(2000)\n  172\n  >>> countPrimes(3000)\n  269\n  >>> countPrimes(5000)\n  475\n  >>> countPrimes(10000)\n  8812\n  >>> countPrimes(20000)\n  88121\n  >>> countPrimes(40000)\n  881221\n  */\nconst countPrimes = (n) => {\n  const res = [];\n  let nn = n;\n  let i = 0;\n  while (nn > 0) {\n    if (isPrime(nn)) {\n      res.push(nn);\n    }\n    nn--;\n    i++;\n  }\n  return res;\n};\n\nmodule.exports = {\n  countPrimes,\n  isPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const N = xs.length\n  if (N % 2 === 1) {\n    return -1;\n  }\n  const last = xs.pop();\n  let zero = 0;\n  for (let i = 0; i < N; i++) {\n    zero += xs[i] * Math.pow(last, i);\n  }\n  return zero;\n}\n\n/*\n  Given the coefficients of a polynomial p(x),\n  this function returns the coefficients of the derivative of p(x).\n  The order of derivative is n - 1, where n is the number of coefficients.\n  >>> round(derivative([1, 2]), 2) # f'(x) = 2x + 1\n  1.5\n  >>> round(derivative([1, 2]), 2) # f'(x) = 2x\n  2.0\n  >>> round(derivative([1, 2]), 2) # f'(x) = 1\n  1.0\n  >>> round(derivative([1, 2]), 2) # f'(x) = 0\n  0.0\n  >>> round(derivative([1, 2]), 2) # f'(x) = 0\n  0.0\n  */\nconst derivative = (xs, n) => {\n  const N = xs.length\n  if (N === 1) {\n    return 0;\n  }\n  const last = xs.pop();\n  let derivative = 0;\n  for (let i = 0; i < N - 1; i++) {\n    derivative += xs[i] * Math.pow(last, i);\n  }\n  return n * derivative;\n}\n\n/*\n  Given the coefficients of a polynomial p(x),\n  this function returns the coefficients of the antiderivative of p(x).\n  The order of antiderivative is n + 1, where n is the number of coefficients.\n  >>> round(antiderivative([1, 2]), 2) # f'(x) = 2x + 1\n  3.0\n  >>> round(antiderivative([1, 2]), 2) # f'(x) = 2x\n  4.0\n  >>> round(antiderivative([1, 2]), 2) # f'(x) = 1\n  2.0\n  >>> round(antiderivative([1, 2]), 2) # f'(x) = 0\n  0.0\n  >>> round(antiderivative([1, 2]), 2) # f'(x) = 0\n  0.0\n  */\nconst antiderivative = (xs, n) => {\n  const N = xs.length\n  if (N === 1) {\n    return 1;\n  }\n  const last = xs.pop();\n  let derivative = 1;\n  for (let i = 1; i < N; i++) {\n    derivative += xs[i] * Math.pow(last, i);\n  }\n  return n * derivative;\n}\n\nconst round = (x, dp) => {\n  return Math.round(x * Math.pow(10, dp)) / Math.pow(10, dp);\n}\n\nconst main = () => {\n  const xs = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  const N = xs.length;\n\n  console.log(findZero(xs));\n  console.log(derivative(xs, N - 1));\n  console.log(antiderivative(xs, N));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortsThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsThird = (l) => {\n  const len = l.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => {\n    if (a % 3 == b % 3) {\n      return a - b\n    }\n    return b - a\n  })\n  return sorted\n}\n\n// This tests the function sortsThird by itself and ensures it produces the correct output.\ntest('sortsThird', () => {\n  expect(sortsThird([1, 2, 3])).toEqual([1, 2, 3])\n  expect(sortsThird([5, 6, 3, 4, 8, 9, 2])).toEqual([2, 6, 3, 4, 8, 9, 5])\n})\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 5, while its values at the indicies that are divisible by 5 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsFifth([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> sortsFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortsFifth = (l) => {\n  const len = l.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => {\n    if (a % 5 == b % 5) {\n      return a - b\n    }\n    return b - a\n  })\n  return sorted\n}\n\n// This tests the function sortsFifth by itself and ensures it produces the correct output.\ntest('sortsFifth', () => {\n  expect(sortsFifth([1, 2, 3, 4])).toEqual([1, 2, 3, 4])\n  expect(sortsFifth([5, 6, 3, 4, 8, 9, 2])).toEqual([2, 6, 3, 4, 8, 9, 5])\n})\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 7, while its values at the indicies that are divisible by 7 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsSeventh([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sortsSeventh([7, 8, 3, 4, 5, 6])\n  [3, 4, 5, 6, 7, 8]\n  */\nconst sortsSeventh = (l) => {\n  const len = l.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => {\n    if (a % 7 == b % 7) {\n      return a - b\n    }\n    return b - a\n  })\n  return sorted\n}\n\n// This tests the function sortsSeventh by itself and ensures it produces the correct output.\ntest('sortsSeventh', () => {\n  expect(sortsSeventh([1, 2, 3, 4, 5])).toEqual([1, 2, 3, 4, 5])\n  expect(sortsSeventh([7, 8, 3, 4, 5, 6])).toEqual([3, 4, 5, 6, 7, 8])\n})\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 11, while its values at the indicies that are divisible by 11 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsEleven([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sortsEleven([7, 8, 3, 4, 5, 6, 7, 8])\n  [3, 4, 5, 6, 7, 8, 7, 8]\n  */\nconst sortsEleven = (l) => {\n  const len = l.length\n  const sorted = []\n  for (let i = 0; i < len; i++) {\n    sorted.push(l[i])\n  }\n  sorted.sort((a, b) => {\n    if (a % 11 == b % 11) {\n      return a - b\n    }\n    return b - a\n  })\n  return sorted\n}\n\n// This tests the function sortsEleven by itself and ensures it produces the correct output.\ntest('sortsEleven', () => {\n  expect(sortsEleven([1, 2, 3, 4, 5, 6])).toEqual([1, 2, 3, 4, 5, 6])\n  expect(sortsEleven([7, 8, 3, 4, 5, 6, 7, 8])).toEqual([3, 4, 5, 6, 7, 8, 7, 8])\n})\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 13, while its values at the indicies that are divisible by 13 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortsThirteen([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  >>> sortsThirteen([7, 8, 3, 4, 5, 6, 7, 8, 9, 10,"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return l.reduce((res, val) => {\n    if (res.indexOf(val) === -1) res.push(val);\n    return res;\n  }, []);\n};\n\nexport default unique;<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElements", "gc": "/*Return maximum element in the list.\n  >>> maxElements([1, 2, 3])\n  3\n  >>> maxElements([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElements = (l) => {\n  if (l.length === 0) {\n    return 0\n  }\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n// Exports\n\nmodule.exports = maxElements\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzzes", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzzes(50)\n  0\n  >>> fizzBuzzes(78)\n  2\n  >>> fizzBuzzes(79)\n  3\n  */\nconst fizzBuzzes = (n) => {\n  return _fizzBuzz(n, 11, 13);\n};\n\nexport default fizzBuzzes;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sortsEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sortsEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sortsEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sortsEven = (l) => {\n  let l2 = l.slice(1);\n  l2 = l2.sort((a, b) => a - b);\n  return [l[0],...l2];\n};\n\nconst add = (x, y) => x + y;\n\nconst sub = (x, y) => x - y;\n\nconst mul = (x, y) => x * y;\n\nconst div = (x, y) => x / y;\n\nconst mod = (x, y) => x % y;\n\nconst abs = (x) => x > 0? x : -x;\n\nconst min = (x, y) => x < y? x : y;\n\nconst max = (x, y) => x > y? x : y;\n\nconst maxIndex = (arr) => arr.reduce((max, i) => i > max? i : max, -Infinity);\n\nconst minIndex = (arr) => arr.reduce((min, i) => i < min? i : min, Infinity);\n\nconst floor = (x) => Math.floor(x);\n\nconst ceil = (x) => Math.ceil(x);\n\nconst round = (x) => Math.round(x);\n\nconst log = (x) => Math.log(x);\n\nconst sin = (x) => Math.sin(x);\n\nconst cos = (x) => Math.cos(x);\n\nconst tan = (x) => Math.tan(x);\n\nconst sqrt = (x) => Math.sqrt(x);\n\nconst square = (x) => x * x;\n\nconst cube = (x) => x * x * x;\n\nconst sum = (l) => l.reduce((a, b) => a + b);\n\nconst mean = (l) => sum(l) / l.length;\n\nconst median = (l) => {\n  let l2 = sortsEven(l);\n  let mid = l2.length / 2;\n  let a = l2[mid - 1];\n  let b = l2[mid];\n  return (a + b) / 2;\n};\n\nconst range = (x, y) => {\n  let z = (x - y) / (x - y);\n  return [x, x + z * (y - x)];\n};\n\nconst shuffle = (l) => {\n  let r = l.length;\n  let a = l.slice(0);\n  while (r) {\n    let r1 = Math.floor(Math.random() * r);\n    let r2 = Math.floor(Math.random() * r);\n    let t = a[r1];\n    a[r1] = a[r2];\n    a[r2] = t;\n    r--;\n  }\n  return a;\n};\n\nconst shuffleArray = (l) => shuffle(l);\n\nconst permutation = (l) => {\n  let r = l.length;\n  let a = l.slice(0);\n  let b = l.slice(0);\n  while (r) {\n    let r1 = Math.floor(Math.random() * r);\n    let r2 = Math.floor(Math.random() * r);\n    let t = a[r1];\n    a[r1] = a[r2];\n    a[r2] = t;\n    b[r2] = b[r1];\n    b[r1] = t;\n    r--;\n  }\n  return [a, b];\n};\n\nconst permutationArray = (l) => permutation(l);\n\nconst partition = (l, x) => {\n  let left = [];\n  let right = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < x) {\n      left.push(l[i]);\n    } else {\n      right.push(l[i]);\n    }\n  }\n  return [left, right];\n};\n\nconst partitionArray = (l, x) => partition(l, x);\n\nconst bubbleSort = (l) => {\n  let r = l.length;\n  while (r) {\n    let r1 = Math.floor(Math.random() * r);\n    let r2 = Math.floor(Math.random() * r);\n    let t = l[r1];\n    l[r1] = l[r2];\n    l[r2] = t;\n    r--;\n  }\n  return l;\n};\n\nconst bubbleSortArray = (l) => bubbleSort(l);\n\nconst selectionSort = (l) => {\n  let r = l.length;\n  while (r) {\n    let r1 = Math.floor(Math.random() * r);\n    let r2 = Math.floor(Math.random() * r);\n    let t = l[r1];\n    l[r1] = l[r2];\n    l[r2] = t;\n    r--;\n  }\n  return l;\n};\n\nconst selectionSortArray = (l) => selectionSort(l);\n\nconst quickSort = (l, x) => {\n  if (l.length === 0) {\n    return l;\n  }\n  let p = partitionArray(l, x);\n  let q = partitionArray(p[1], x);\n  return quickSort(q[0], x);\n};\n\nconst quickSortArray = (l, x) => quickSort(l, x);\n\nconst insertionSort = (l) => {\n  let r = l.length;\n  while (r) {\n    let r1 = Math.floor(Math.random() * r);\n    let r2 = Math.floor(Math.random() * r);\n    let t = l[r1];\n    let i = r1;\n    let j = r2;\n    while (i < j) {\n      while (i < j && l[j] >= t) {\n        j--"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 3), s.length), 3 * i + 3));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic_2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i + 3, Math.min((3 * i + 6), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encodedString = `${encodeCyclic('abcdefghijklmnopqrstuvwxyz')}`;\nconst decodedString = decodeCyclic(encodedString);\n\nconsole.log(`The encoded string is ${encodedString}`);\nconsole.log(`The decoded string is ${decodedString}`);\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFibs", "gc": "/*\n  primeFibs returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFibs(1)\n  2\n  >>> primeFibs(2)\n  3\n  >>> primeFibs(3)\n  5\n  >>> primeFibs(4)\n  13\n  >>> primeFibs(5)\n  89\n  */\nconst primeFibs = (n) => {\n    let f = 1;\n    let f2 = 2;\n    for (let i = 3; i <= n; i++) {\n        f = f2 + f;\n        f2 = f;\n    }\n    return f;\n};\n\nconsole.log(primeFibs(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSummingToZeroed", "gc": "/*\n  triplesSummingToZeroed takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSummingToZeroed([1, 3, 5, 0])\n  false\n  >>> triplesSummingToZeroed([1, 3, -2, 1])\n  true\n  >>> triplesSummingToZeroed([1, 2, 3, 7])\n  false\n  >>> triplesSummingToZeroed([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSummingToZeroed([1])\n  false\n  */\nconst triplesSummingToZeroed = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const index = [...sorted.slice(1, -1).filter(e => e === sorted[0])].indexOf(sorted[0]);\n  return sorted[index - 1] === sorted[index] && sorted[index + 1] === sorted[index];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carsRacesCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carsRacesCollision = (n) => {\n  const cars = [];\n  for (let i = 0; i < n; i++) {\n    cars.push({\n      left: Math.floor(Math.random() * (n + 1)),\n      right: n - Math.floor(Math.random() * (n + 1)),\n      speed: Math.random()\n    });\n  }\n  return cars.reduce((acc, car) => {\n    return acc + carsRacesCollision(car.left) + carsRacesCollision(car.right);\n  }, 0);\n}\n\nconsole.log(carsRacesCollision(2));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrLists", "gc": "/*Return list with elements incremented by 1.\n  >>> incrLists([1, 2, 3])\n  [2, 3, 4]\n  >>> incrLists([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrLists = (l) => {\n    return l.slice(1).reduce((a, b) => [a[0] + b, a[1] + 1]);\n};\n\nexport { incrLists };\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "pairSumsToZero", "gc": "/*\n  pairSumsToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> pairSumsToZero([1, 3, 5, 0])\n  false\n  >>> pairSumsToZero([1, 3, -2, 1])\n  false\n  >>> pairSumsToZero([1, 2, 3, 7])\n  false\n  >>> pairSumsToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumsToZero([1])\n  false\n  */\nconst pairSumsToZero = (l) => {\n  const length = l.length\n  let last = 0\n  let first = 0\n  for (let i = 1; i < length; i++) {\n    last += l[i]\n    if (last === 0) {\n      first = i\n      break\n    }\n  }\n  if (first === length - 1) return false\n  for (let i = first + 1; i < length; i++) {\n    const cur = l[i]\n    if (cur === 0) return false\n    if (cur!== last) return true\n  }\n  return false\n}\n\n/*\n  fibonacci takes two integers as an input and returns the\n  nth fibonacci number, where n is the input.\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(4)\n  5\n  >>> fibonacci(7)\n  13\n  >>> fibonacci(1)\n  1\n  >>> fibonacci(0)\n  1\n  >>> fibonacci(3)\n  3\n  >>> fibonacci(10)\n  55\n  */\nconst fibonacci = (n) => {\n  if (n === 0 || n === 1) return n\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*\n  fibonacciToArray takes a fibonacci number as an input and\n  returns an array of fibonacci numbers.\n  >>> fibonacciToArray(2)\n  [2, 1]\n  >>> fibonacciToArray(4)\n  [5, 4, 3, 2]\n  >>> fibonacciToArray(7)\n  [13, 11, 10, 9, 8, 7, 6, 5]\n  >>> fibonacciToArray(1)\n  [1]\n  >>> fibonacciToArray(0)\n  [1]\n  >>> fibonacciToArray(3)\n  [3, 2, 1]\n  >>> fibonacciToArray(10)\n  [55, 46, 37, 28, 20, 14, 11, 7, 4, 2]\n  */\nconst fibonacciToArray = (n) => {\n  const arr = []\n  if (n === 0 || n === 1) {\n    arr.push(n)\n  } else {\n    arr.push(fibonacci(n - 1))\n    arr.push(fibonacci(n - 2))\n  }\n  return arr\n}\n\n/*\n  fibonacciToString takes a fibonacci number as an input and\n  returns a string representation of the number.\n  >>> fibonacciToString(2)\n  '2'\n  >>> fibonacciToString(4)\n  '5 4 3 2'\n  >>> fibonacciToString(7)\n  '13 11 10 9 8 7 6 5 4 3 2'\n  >>> fibonacciToString(1)\n  '1'\n  >>> fibonacciToString(0)\n  '1'\n  >>> fibonacciToString(3)\n  '3 2 1'\n  >>> fibonacciToString(10)\n  '55 46 37 28 20 14 11 7 4 2'\n  */\nconst fibonacciToString = (n) => {\n  const arr = fibonacciToArray(n)\n  const str = arr.join(' ')\n  return str\n}\n\n/*\n  main takes two arguments, a list of integers and a fibonacci number.\n  it returns the sum of all elements in the list that add up to the\n  input fibonacci number.\n  >>> main(4, 5)\n  5\n  >>> main(4, 0)\n  4\n  >>> main(7, 8)\n  10\n  >>> main(10, 13)\n  27\n  >>> main(3, 2)\n  2\n  >>> main(0, 3)\n  0\n  >>> main(1, 2)\n  3\n  >>> main(2, 4)\n  7\n  >>> main(4, 8)\n  22\n  */\nconst main = (fibonacci, list) => {\n  let sum = 0\n  for (let i = 0; i < list.length; i++) {\n    if (fibonacciToArray(list[i]).includes(fibonacci)) {\n      sum += list[i]\n    }\n  }\n  return sum\n}\n\n/*\n  pairSum is the function that runs the main() function\n  and returns the result.\n  >>> pairSum([1, 3, 5, 0])\n  false\n  >>> pairSum([1, 3, -2, 1])\n  false\n  >>> pairSum([1, 2, 3, 7])\n  false\n  >>> pairSum([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSum([1])\n  false\n  */\nconst pairSum = (list) => {\n  return main(pairSumsToZero(list), list)\n}\n\n/*\n  pairSumToZero is the function that runs the main() function\n  and returns the result.\n  >>> pairSumToZero([1, 3, 5, 0])\n  false\n  >>> pairSumToZero([1, 3, -2, 1])\n  false\n  >>> pairSumToZero([1, 2, 3, 7])\n  false\n  >>> pairSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> pairSumToZero([1])\n  false\n  */\nconst pairSumToZero = (list) => {\n  return main(pairSumsToZero(list), list)\n}\n\n/*\n  fibonacciToArray is the function that runs the main() function\n  and returns the result.\n  >>> fibonacciToArray(2)\n  [2, 1]\n  >>> fibonacciToArray(4)\n"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBases", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBases(8, 3)\n  '22'\n  >>> changeBases(8, 2)\n  '1000'\n  >>> changeBases(7, 2)\n  '111'\n  */\nconst changeBases = (x, base) => {\n  // base numbers are less than 10.\n  const baseDigits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz'.split('').map((digit, i) => {\n    return (x % base) < 10? digit : '0';\n  });\n  return baseDigits.join('');\n};\n\n/*\n  Given a number x, print the string representation of the number in base 10.\n  >>> printBases(8, 2)\n  10\n  >>> printBases(8, 3)\n  101\n  >>> printBases(7, 2)\n  11\n  */\nconst printBases = (x, base) => {\n  return changeBases(x, base);\n};\n\nmodule.exports = {\n  changeBases,\n  printBases\n};\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> trianglesAreas(5, 3)\n  7.5\n  */\nconst trianglesAreas = (a, h) => {\n  return a * h / 2;\n};\n\n//# sourceMappingURL=triangleArea.js.map<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n <= 2) return n;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconst fib4_array = fib4(10);\n\nconsole.log(fib4_array);\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.slice().sort();\n  if (sorted.length % 2 === 1) {\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n  const middle = Math.floor(sorted.length / 2);\n  return (sorted[middle] + sorted[middle - 1]) / 2;\n};\n\n/*Return the median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medianInArray = (l) => {\n  const sorted = l.slice().sort();\n  if (sorted.length % 2 === 1) {\n    return sorted[Math.floor(sorted.length / 2)];\n  }\n  const middle = Math.floor(sorted.length / 2);\n  return (sorted[middle] + sorted[middle - 1]) / 2;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst mode = (l) => {\n  const sorted = l.slice().sort();\n  let mode = sorted[0];\n  let modeCount = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      modeCount++;\n    } else if (modeCount > 1) {\n      mode = sorted[i];\n      modeCount = 1;\n    }\n  }\n  return mode;\n};\n\n/*Return the mode of elements in the list l.\n  >>> mode([3, 1, 2, 4, 5])\n  3\n  >>> mode([-10, 4, 6, 1000, 10, 20])\n  -10\n  */\nconst modeInArray = (l) => {\n  const sorted = l.slice().sort();\n  let mode = sorted[0];\n  let modeCount = 1;\n  for (let i = 1; i < sorted.length; i++) {\n    if (sorted[i] === mode) {\n      modeCount++;\n    } else if (modeCount > 1) {\n      mode = sorted[i];\n      modeCount = 1;\n    }\n  }\n  return mode;\n};\n\n/* Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.25\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  10.0\n  */\nconst mean = (l) => {\n  const sum = l.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n  return sum / l.length;\n};\n\n/* Return the mean of elements in the list l.\n  >>> mean([3, 1, 2, 4, 5])\n  3.25\n  >>> mean([-10, 4, 6, 1000, 10, 20])\n  10.0\n  */\nconst meanInArray = (l) => {\n  const sum = l.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n  return sum / l.length;\n};\n\n/* Return the standard deviation of elements in the list l.\n  >>> standardDeviation([3, 1, 2, 4, 5])\n  2.0\n  >>> standardDeviation([-10, 4, 6, 1000, 10, 20])\n  4.5\n  */\nconst standardDeviation = (l) => {\n  let sum = 0;\n  l.forEach((element) => {\n    sum += element;\n  });\n  return Math.sqrt(sum / (l.length - 1));\n};\n\n/* Return the standard deviation of elements in the list l.\n  >>> standardDeviation([3, 1, 2, 4, 5])\n  2.0\n  >>> standardDeviation([-10, 4, 6, 1000, 10, 20])\n  4.5\n  */\nconst standardDeviationInArray = (l) => {\n  let sum = 0;\n  l.forEach((element) => {\n    sum += element;\n  });\n  return Math.sqrt(sum / (l.length - 1));\n};\n\n/* Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  41\n  */\nconst sum = (l) => {\n  return l.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n};\n\n/* Return the sum of elements in the list l.\n  >>> sum([3, 1, 2, 4, 5])\n  15\n  >>> sum([-10, 4, 6, 1000, 10, 20])\n  41\n  */\nconst sumInArray = (l) => {\n  return l.reduce((previousValue, currentValue) => previousValue + currentValue, 0);\n};\n\nmodule.exports = {\n  median,\n  medianInArray,\n  mode,\n  modeInArray,\n  mean,\n  meanInArray,\n  standardDeviation,\n  standardDeviationInArray,\n  sum,\n  sumInArray\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (text === null) return false;\n    return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given number is a palindrome\n  >>> isPalindrome(0)\n  true\n  >>> isPalindrome(3)\n  true\n  >>> isPalindrome(10000000000000)\n  true\n  >>> isPalindrome(-10000000000000)\n  true\n  >>> isPalindrome(5)\n  false\n  */\nconst isPalindromeNumber = (num) => {\n    return isPalindrome(num.toString());\n};\n\n/*\n  Sorts given array of numbers and checks if the result is a palindrome\n  >>> isPalindrome([1,2,3,4,5,6])\n  true\n  >>> isPalindrome([1,2,3,4,5,6,7])\n  true\n  >>> isPalindrome([1,2,3,4,5,6,7,8])\n  false\n  >>> isPalindrome([1,2,3,4,5,6,7,8,9])\n  false\n  */\nconst isPalindromeArray = (arr) => {\n    arr.sort((a, b) => {\n        if (a > b) return 1;\n        if (a < b) return -1;\n        return 0;\n    });\n    return isPalindrome(arr.join(''));\n};\n\n/*\n  Sorts given array of strings and checks if the result is a palindrome\n  >>> isPalindrome(['a','b','c','d','e','f','g','h'])\n  true\n  >>> isPalindrome(['a','b','c','d','e','f','g','h','i'])\n  true\n  >>> isPalindrome(['a','b','c','d','e','f','g','h','i','j'])\n  false\n  >>> isPalindrome(['a','b','c','d','e','f','g','h','i','j','k'])\n  false\n  */\nconst isPalindromeString = (arr) => {\n    arr.sort((a, b) => {\n        if (a > b) return 1;\n        if (a < b) return -1;\n        return 0;\n    });\n    return isPalindrome(arr.join(''));\n};\n\nmodule.exports = {\n    isPalindromeNumber,\n    isPalindromeArray,\n    isPalindromeString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return n % p\n}\n\n/* Return a prime number p less than n.\n  >>> primes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes = (n) => {\n  let p = 2\n  while (p*p <= n) {\n    if (n % p == 0) {\n      return false\n    }\n    p++\n  }\n  return [p]\n}\n\n/* Return a list of prime numbers less than n.\n  >>> primes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  */\nconst primes_iter = (n) => {\n  let p = 2\n  let p_list = []\n  while (p*p <= n) {\n    if (n % p == 0) {\n      p_list.push(p)\n    }\n    p++\n  }\n  return p_list\n}\n\n/* Return the number of divisors of n.\n  >>> divisors(2)\n  [1]\n  >>> divisors(4)\n  [1, 2]\n  >>> divisors(5)\n  [1, 5]\n  >>> divisors(10)\n  [1, 2, 5, 10]\n  >>> divisors(15)\n  [1, 3, 5, 15]\n  >>> divisors(20)\n  [1, 2, 4, 5, 10, 15, 20]\n  >>> divisors(1)\n  [1]\n  >>> divisors(0)\n  []\n  */\nconst divisors = (n) => {\n  const d = [1]\n  for (let i = 2; i <= n; i++) {\n    let j = 0\n    while (d[j] <= i) {\n      j += 1\n    }\n    d.push(i)\n  }\n  return d\n}\n\n/* Return the number of divisors of n.\n  >>> divisors(2)\n  [1]\n  >>> divisors(4)\n  [1, 2]\n  >>> divisors(5)\n  [1, 5]\n  >>> divisors(10)\n  [1, 2, 5, 10]\n  >>> divisors(15)\n  [1, 3, 5, 15]\n  >>> divisors(20)\n  [1, 2, 4, 5, 10, 15, 20]\n  >>> divisors(1)\n  [1]\n  >>> divisors(0)\n  []\n  */\nconst divisors_iter = (n) => {\n  const d = []\n  for (let i = 2; i <= n; i++) {\n    let j = 0\n    while (d[j] <= i) {\n      j += 1\n    }\n    d.push(i)\n  }\n  return d\n}\n\nmodule.exports = {\n  modp,\n  primes,\n  primes_iter,\n  divisors,\n  divisors_iter\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  encodes a string with encode_shift function.\n  */\nconst encode = (s) => {\n  return encodeShift(s.split(\"\").map(encodeShift).join(\"\"));\n}\n\n/*\n  decodes a string with decode_shift function.\n  */\nconst decode = (s) => {\n  return decodeShift(s.split(\"\").map(decodeShift).join(\"\"));\n}\n\n/*\n  returns an array of encoded strings for each element in the array.\n  */\nconst encodeArray = (arr) => {\n  return arr.map(encode);\n}\n\n/*\n  returns an array of decoded strings for each element in the array.\n  */\nconst decodeArray = (arr) => {\n  return arr.map(decode);\n}\n\n/*\n  encodes a string with encode_shift function.\n  */\nconst encodeByLength = (s) => {\n  return encodeShift(s.split(\"\").map(encodeShift).join(\"\"));\n}\n\n/*\n  decodes a string with decode_shift function.\n  */\nconst decodeByLength = (s) => {\n  return decodeShift(s.split(\"\").map(decodeShift).join(\"\"));\n}\n\n/*\n  returns an array of encoded strings for each element in the array.\n  */\nconst encodeByLengthArray = (arr) => {\n  return arr.map(encodeByLength);\n}\n\n/*\n  returns an array of decoded strings for each element in the array.\n  */\nconst decodeByLengthArray = (arr) => {\n  return arr.map(decodeByLength);\n}\n\n/*\n  returns a random string of specified length.\n  */\nconst generate = (l) => {\n  var s = \"\";\n  for (var i = 0; i < l; i++) {\n    s += String.fromCharCode(Math.floor(Math.random() * 26) + 97);\n  }\n  return s;\n}\n\n/*\n  returns a random string of specified length.\n  */\nconst generateArray = (l) => {\n  var s = \"\";\n  for (var i = 0; i < l; i++) {\n    s += generate(1);\n  }\n  return s;\n}\n\n/*\n  encodes a string with encode_shift function.\n  */\nconst generateEncoded = (l) => {\n  var s = \"\";\n  for (var i = 0; i < l; i++) {\n    s += encode(generate(1));\n  }\n  return s;\n}\n\n/*\n  decodes a string with decode_shift function.\n  */\nconst generateDecoded = (l) => {\n  var s = \"\";\n  for (var i = 0; i < l; i++) {\n    s += decode(generate(1));\n  }\n  return s;\n}\n\n/*\n  returns an array of encoded strings for each element in the array.\n  */\nconst generateEncodedArray = (l) => {\n  var s = \"\";\n  for (var i = 0; i < l; i++) {\n    s += generateEncoded(1);\n  }\n  return s;\n}\n\n/*\n  returns an array of decoded strings for each element in the array.\n  */\nconst generateDecodedArray = (l) => {\n  var s = \"\";\n  for (var i = 0; i < l; i++) {\n    s += generateDecoded(1);\n  }\n  return s;\n}\n\nexport default {\n  encode,\n  decode,\n  encodeArray,\n  decodeArray,\n  encodeByLength,\n  decodeByLength,\n  encodeByLengthArray,\n  decodeByLengthArray,\n  generate,\n  generateArray,\n  generateEncoded,\n  generateDecoded,\n  generateEncodedArray,\n  generateDecodedArray\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "removeVowel", "gc": "/*\n  removeVowel is a function that takes string and returns string without vowels.\n  >>> removeVowel('')\n  ''\n  >>> removeVowel(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> removeVowel('abcdef')\n  'bcdf'\n  >>> removeVowel('aaaaa')\n  ''\n  >>> removeVowel('aaBAA')\n  'B'\n  >>> removeVowel('zbcd')\n  'zbcd'\n  */\nconst removeVowel = (text) => {\n    return text.replace(/[aeiouyAEIOUY]/g, '');\n};\n\nmodule.exports = removeVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThresholds", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThresholds([1, 2, 4, 10], 100)\n  true\n  >>> belowThresholds([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst belowThresholds = (l, t) => {\n  for (let i = 0; i < l."}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Add two numbers x and y\n  >>> adding(2, 3)\n  5\n  >>> adding(5, 7)\n  12\n  */\nconst adding = (x, y) => {\n  return x + y;\n}\n\n/**\n  * @description Subtract two numbers x and y\n  * @param {number} x The first number\n  * @param {number} y The second number\n  * @returns {number} The subtracted number\n  * @example\n  * //Add two numbers x and y\n  * >>> subtracting(5, 7)\n  * 4\n  * >>> subtracting(9, 4)\n  * 13\n  */\nconst subtracting = (x, y) => {\n  return x - y;\n}\n\n/**\n  * @description Multiplies two numbers x and y\n  * @param {number} x The first number\n  * @param {number} y The second number\n  * @returns {number} The multiplied number\n  * @example\n  * //Add two numbers x and y\n  * >>> multiplying(5, 7)\n  * 35\n  * >>> multiplying(9, 4)\n  * 27\n  */\nconst multiplying = (x, y) => {\n  return x * y;\n}\n\n/**\n  * @description Divide two numbers x and y\n  * @param {number} x The first number\n  * @param {number} y The second number\n  * @returns {number} The divided number\n  * @example\n  * //Add two numbers x and y\n  * >>> dividing(9, 4)\n  * 3\n  * >>> dividing(9, 4)\n  * 3\n  */\nconst dividing = (x, y) => {\n  return x / y;\n}\n\n/**\n  * @description Converts a number to a string\n  * @param {number} x The number\n  * @returns {string} The number as a string\n  * @example\n  * //Convert number x to string\n  * >>> to_string(5)\n  * '5'\n  * >>> to_string(9)\n  * '9'\n  */\nconst to_string = x => {\n  return `${x}`;\n}\n\n/**\n  * @description Calculate the factorial of a number\n  * @param {number} n The number\n  * @returns {number} The factorial\n  * @example\n  * //Calculate the factorial of a number\n  * >>> factorial(1)\n  * 1\n  * >>> factorial(2)\n  * 2\n  * >>> factorial(3)\n  * 6\n  * >>> factorial(4)\n  * 24\n  */\nconst factorial = n => {\n  if(n === 1) {\n    return 1;\n  } else {\n    return n * factorial(n - 1);\n  }\n}\n\nmodule.exports = {\n  addition,\n  subtracting,\n  multiplying,\n  dividing,\n  to_string,\n  factorial\n}\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChar", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChar = (s0, s1) => {\n    return s0.toLowerCase().split('').every((c, i) => c === s1.toLowerCase().charAt(i));\n};\n\n/*\n  Check if two words have the same characters.\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChar('abcd', 'dddddddabc')\n  true\n  >>> sameChar('dddddddabc', 'abcd')\n  true\n  >>> sameChar('eabcd', 'dddddddabc')\n  false\n  >>> sameChar('abcd', 'dddddddabce')\n  false\n  >>> sameChar('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameWord = (s0, s1) => {\n    return s0.toLowerCase().split('').every((c, i) => c === s1.toLowerCase().charAt(i));\n};\n\nmodule.exports = {\n    sameChar,\n    sameWord\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fibs", "gc": "/*Return n-th Fibonacci number.\n  >>> fibs(10)\n  55\n  >>> fibs(1)\n  1\n  >>> fibs(8)\n  21\n  */\nconst fibs = (n) => {\n  return (n <= 1)? 1 : fibs(n-1) + fibs(n-2);\n};\n\nconsole.log(fibs(20));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"<\")\n  false\n  >>> correctBracketing(\"<>\")\n  false\n  >>> correctBracketing(\"<<><>>\")\n  false\n  >>> correctBracketing(\"><<>\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  // create a stack of brackets to check\n  const stack = []\n\n  for (let i = 0; i < brackets.length; i++) {\n    stack.push(brackets[i])\n  }\n\n  // keep track of the number of open brackets\n  let openBrackets = 0\n\n  // keep track of the number of closed brackets\n  let closedBrackets = 0\n\n  // while there are open brackets and open brackets\n  while (openBrackets > 0 && openBrackets < stack.length) {\n    // if the next element on the stack is the same as the current element\n    if (stack[openBrackets] === stack[openBrackets - 1]) {\n      // move the index to the next element\n      openBrackets++\n    } else {\n      // pop the current element from the stack\n      stack.pop()\n      // decrement the open brackets counter\n      openBrackets--\n    }\n\n    // decrement the closed brackets counter\n    closedBrackets++\n  }\n\n  // return the number of open brackets\n  return openBrackets\n}\n\n// return the string without the brackets\nconst bracketsRemoval = (brackets, bracketsRemoval) => {\n  for (let i = 0; i < bracketsRemoval.length; i++) {\n    // for each element in bracketsRemoval\n    for (let j = 0; j < brackets.length; j++) {\n      // if the current bracketsRemoval element equals the brackets\n      if (bracketsRemoval[i] === brackets[j]) {\n        // remove the current element\n        brackets.splice(j, 1)\n        // decrement the index\n        j--\n      }\n    }\n  }\n}\n\n// remove brackets from the string\nconst removeBrackets = (brackets, bracketsRemoval) => {\n  // create a stack of brackets\n  const stack = []\n\n  // for each element in brackets\n  for (let i = 0; i < brackets.length; i++) {\n    // push the element on the stack\n    stack.push(brackets[i])\n  }\n\n  // keep removing brackets from the stack until it is empty\n  while (stack.length > 0) {\n    // get the first element on the stack\n    let currentElement = stack[0]\n\n    // for each element in bracketsRemoval\n    for (let i = 0; i < bracketsRemoval.length; i++) {\n      // if the current element equals the current element in bracketsRemoval\n      if (currentElement === bracketsRemoval[i]) {\n        // remove the current element from the stack\n        stack.splice(0, 1)\n        // decrement the index\n        i--\n      }\n    }\n  }\n\n  // return the string without the brackets\n  return brackets\n}\n\n// get the correct bracketing of a string\nconst correctBrackets = (brackets, bracketsRemoval) => {\n  // calculate the number of open and closed brackets\n  let openBrackets = 0\n  let closedBrackets = 0\n\n  // for each element in brackets\n  for (let i = 0; i < brackets.length; i++) {\n    // if the brackets are a pair\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && bracketsRemoval.indexOf(\"<\") < 0) {\n      // increase the open brackets counter\n      openBrackets++\n    }\n\n    if (brackets[i] === \">\" && brackets[i - 1] === \"<\" && bracketsRemoval.indexOf(\">\") < 0) {\n      // increase the closed brackets counter\n      closedBrackets++\n    }\n  }\n\n  // return the correct brackets\n  return correctBracketing(brackets) === openBrackets? brackets : bracketsRemoval\n}\n\n// remove brackets from the string\nconst removeBrackets = (brackets, bracketsRemoval) => {\n  // calculate the number of open and closed brackets\n  let openBrackets = 0\n  let closedBrackets = 0\n\n  // for each element in brackets\n  for (let i = 0; i < brackets.length; i++) {\n    // if the brackets are a pair\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && bracketsRemoval.indexOf(\"<\") < 0) {\n      // increase the open brackets counter\n      openBrackets++\n    }\n\n    if (brackets[i] === \">\" && brackets[i - 1] === \"<\" && bracketsRemoval.indexOf(\">\") < 0) {\n      // increase the closed brackets counter\n      closedBrackets++\n    }\n  }\n\n  // return the string without the brackets\n  return bracketsRemoval\n}\n\n// get the correct bracketing of a string\nconst correctBrackets = (brackets, bracketsRemoval) => {\n  // calculate the number of open and closed brackets\n  let openBrackets = 0\n  let closedBrackets = 0\n\n  // for each element in brackets\n  for (let i = 0; i < brackets.length; i++) {\n    // if the brackets are a pair\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && bracketsRemoval.indexOf(\"<\") < 0) {\n      // increase the open brackets counter\n      openBrackets++\n    }\n\n    if (brackets[i] === \">\" && brackets[i - 1] === \"<\" && bracketsRemoval.indexOf(\">\") < 0) {\n      // increase the closed brackets counter\n      closedBrackets++\n    }\n  }\n\n  // return the correct brackets\n  return correctBracketing(brackets) === openBrackets? brackets : bracketsRemoval\n}\n\n// remove brackets from the string\nconst removeBrackets = (brackets, bracketsRemoval) => {\n  // calculate the number of open and closed brackets\n  let openBrackets = 0\n  let closedBrackets = 0\n\n  // for each element in brackets\n  for (let i = 0; i < brackets.length; i++) {\n    // if the brackets are a pair\n    if (brackets[i] === \"<\" && brackets[i + 1] === \">\" && bracketsRemoval.indexOf(\"<\") < 0) {\n      // increase the open brackets counter\n      openBrackets++"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monotonic", "gc": "/*Return true is list elements are monotonically increasing or decreasing.\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\nconst monotonic = (l) => {\n    return!(l.every((x) => x > l[0]) && l.every((x) => x < l[l.length - 1]))\n}\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst p1 = (n) => n > 0 && n % 2 === 0\nconst p2 = (n) => n < 0 && n % 2 === 1\n\nconst even = (n) => n % 2 === 0\nconst odd = (n) => n % 2 === 1\n\nconst isOdd = (n) => n % 2 === 1\nconst isEven = (n) => n % 2 === 0\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst p1_p2 = (n) => p1(n) && p2(n)\nconst p1_p2_odd = (n) => p1_p2(n) && isOdd(n)\nconst p1_p2_even = (n) => p1_p2(n) && isEven(n)\n\nconst p1_p2_odd_even = (n) => p1_p2_odd(n) && isEven(n)\nconst p1_p2_even_odd = (n) => p1_p2_even(n) && isOdd(n)\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst p1_p2_odd_even_odd = (n) => p1_p2_odd(n) && p1_p2_even(n) && isOdd(n)\nconst p1_p2_even_odd_even = (n) => p1_p2_even(n) && p1_p2_odd(n) && isEven(n)\n\nconst p1_p2_odd_even_odd_even = (n) => p1_p2_odd_even_odd(n) && isEven(n)\nconst p1_p2_even_odd_even_odd = (n) => p1_p2_even_odd_even(n) && isOdd(n)\n\nconst p1_p2_odd_even_odd_even_odd = (n) => p1_p2_odd_even_odd_even(n) && isEven(n)\nconst p1_p2_even_odd_even_odd_odd = (n) => p1_p2_even_odd_even_odd(n) && isOdd(n)\n\nconst p1_p2_odd_even_odd_even_odd = (n) => p1_p2_odd_even_odd_odd_even(n) && isEven(n)\nconst p1_p2_even_odd_even_odd_odd = (n) => p1_p2_even_odd_even_odd_odd_even(n) && isOdd(n)\n\n/*\n  >>> monotonic([1, 2, 4, 20])\n  true\n  >>> monotonic([1, 20, 4, 10])\n  false\n  >>> monotonic([4, 1, 0, -10])\n  true\n  */\n\nconst p1_p2_odd_even_odd_even_odd = (n) => p1_p2_odd_even_odd_odd_even_odd(n) && isEven(n)\nconst p1_p2_even_odd_even_odd_odd = (n) => p1_p2_even_odd_even_odd_odd_even_odd(n) && isOdd(n)\n\nconst p1_p2_odd_even_odd_even_odd_odd = (n) => p1_p2_odd_even_odd_odd_even_odd_odd(n) && isEven(n)\nconst p1_p2_even_odd_even_odd_odd_odd = (n) => p1_p2_even_odd_even_odd_odd_even_odd_odd(n) && isOdd(n)\n\nconst p1_p2_odd_even_odd_even_odd_odd_odd = (n) => p1_p2_odd_even_odd_odd_even_odd_odd_odd(n) && isEven(n)\nconst p1_p2_even_odd_even_odd_odd_odd_odd = (n) => p1_p2_even_odd_even_odd_odd_even_odd_odd_odd(n) && isOdd(n)\n\nconst p1_p2_odd_even_odd_even_odd_odd_odd_odd = (n) => p1_p2_odd_even_odd_odd_even_odd_odd_odd_odd(n) && isEven(n)\nconst p1_p2_even_odd_even_odd_odd_odd_odd_odd = (n) => p1_p2_even_odd_even_odd_odd_odd_even_odd_odd_odd(n) && isOdd(n)\n\nconst p1_p2_odd_even_odd_even_odd_odd_odd_odd_odd = (n) => p1_p2_odd_even_odd_odd_even_odd_odd_odd_odd_odd(n) && isEven(n)\nconst p1_p2_even_odd_even_odd_odd_odd_odd_odd_odd = (n) => p1_p2_even_odd_even_odd_odd_odd_even_odd_odd_odd_"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n    const sorted_l1 = sorted(l1);\n    const sorted_l2 = sorted(l2);\n    const result = [];\n    const last_element = sorted_l1.length - 1;\n    const last_element_2 = sorted_l2.length - 1;\n    for (let i = 0; i <= last_element; i++) {\n        if (sorted_l1[i] === sorted_l2[i]) {\n            result.push(sorted_l1[i]);\n        }\n    }\n    for (let j = 0; j <= last_element_2; j++) {\n        if (sorted_l1[last_element] === sorted_l2[j]) {\n            result.push(sorted_l1[last_element]);\n        }\n    }\n    return result;\n};\n\n/*Return number of common elements for two lists.\n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  3\n\n  >>> common_count([5, 3, 2, 8], [3, 2])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [])\n  0\n  \n  >>> common_count([], [])\n  0\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 2, 3, 4, 5, 6, 7, 8])\n  4\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 2, 5, 6, 7, 8])\n  0\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 4, 5, 6, 7, 8])\n  2\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6])\n  3\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 4, 5, 6, 7, 8, 1])\n  2\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 4, 5, 6, 7, 8, 1, 4])\n  2\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 4, 5, 6, 7, 8, 1, 4, 3])\n  3\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 4, 5, 6, 7, 8, 1, 4, 3, 34])\n  3\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 4, 5, 6, 7, 8, 1, 4, 3, 34, 653])\n  3\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [3, 4, 5, 6, 7, 8, 1, 4, 3, 34, 653, 2])\n  0\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8])\n  0\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4, 3])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4, 3, 34])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4, 3, 34, 653])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4, 3, 34, 653, 2])\n  0\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4, 3, 34, 653, 2, 5])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4, 3, 34, 653, 2, 5, 6])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6, 7, 8, 1, 4, 3, 34, 653, 2, 5, 6, 7])\n  1\n  \n  >>> common_count([1, 4, 3, 34, 653, 2, 5], [1, 4, 3, 34, 653, 2, 5, 6"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largerPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largerPrimeFactor(13195)\n  29\n  >>> largerPrimeFactor(2048)\n  2\n  */\nconst largerPrimeFactor = (n) => {\n  const primes = primesArray(n);\n  return primes[primes.length - 1];\n};\n\n/*\n  Return the smallest number that is a multiple of all prime numbers from 1 to n.\n  Assume n > 1 and is not a prime.\n  >>> findSmallestMultiple(13195)\n  2048\n  >>> findSmallestMultiple(2048)\n  1\n  >>> findSmallestMultiple(1)\n  1\n  */\nconst findSmallestMultiple = (n) => {\n  const primes = primesArray(n);\n  let i = 1;\n  let j = 0;\n  const p = primes[j];\n\n  while (i < n) {\n    j++;\n    const pPrime = primes[j];\n    while (i % pPrime === 0) {\n      i += pPrime;\n    }\n  }\n\n  return i;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  >>> largestPrimeFactor(1)\n  1\n  */\nconst largestPrimeFactor = (n) => {\n  const primes = primesArray(n);\n  return primes[0];\n};\n\n/*\n  Return the smallest number that is a multiple of all prime numbers from n to n+1.\n  Assume n > 0 and is not a prime.\n  >>> findSmallestMultiple(13195)\n  2048\n  >>> findSmallestMultiple(2048)\n  1\n  >>> findSmallestMultiple(1)\n  1\n  */\nconst findSmallestMultiple = (n) => {\n  const primes = primesArray(n);\n  let i = n;\n  let j = 0;\n  const p = primes[j];\n\n  while (i < n + 1) {\n    j++;\n    const pPrime = primes[j];\n    while (i % pPrime === 0) {\n      i += pPrime;\n    }\n  }\n\n  return i;\n};\n\n/*\n  Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largestPrimeFactor(13195)\n  29\n  >>> largestPrimeFactor(2048)\n  2\n  >>> largestPrimeFactor(1)\n  1\n  */\nconst largestPrimeFactor = (n) => {\n  const primes = primesArray(n);\n  return primes[primes.length - 1];\n};\n\nexport {\n  findSmallestMultiple,\n  largestPrimeFactor,\n  smallestPrimeFactor,\n  largerPrimeFactor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumsToN", "gc": "/*sumsToN is a function that sums numbers from 1 to n.\n  >>> sumsToN(30)\n  465\n  >>> sumsToN(100)\n  5050\n  >>> sumsToN(5)\n  15\n  >>> sumsToN(10)\n  55\n  >>> sumsToN(1)\n  1\n  */\nconst sumsToN = (n) => {\n  return (\n    n\n     .toString()\n     .split('.')\n     .map(x => x.replace(/\\d+$/, ''))\n     .reduce((s, x) => s + parseInt(x, 10), 0)\n  );\n};\n\nconst sumOfSquares = (n) => {\n  return (\n    sumsToN(n)\n     .map(x => x * x)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy3 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 3 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy5 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 5 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy7 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 7 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy9 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 9 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy11 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 11 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy13 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 13 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy17 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 17 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy19 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 19 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy23 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 23 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy25 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 25 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy37 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 37 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy41 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 41 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy43 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 43 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy47 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 47 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy53 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 53 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy57 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 57 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy59 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 59 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy61 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 61 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy71 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 71 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy73 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 73 === 0)\n     .reduce((s, x) => s + x, 0)\n  );\n};\n\nconst sumOfSquaresBy79 = (n) => {\n  return (\n    sumsToN(n)\n     .filter(x => x % 79 === 0)\n     .reduce((s, x) => s + x, 0)\n  "}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketing(\"(\")\n  false\n  >>> correctBracketing(\"()\")\n  true\n  >>> correctBracketing(\"(()())\")\n  true\n  >>> correctBracketing(\")(()\")\n  false\n  */\nconst correctBracketing = (brackets) => {\n  const stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i]\n    if (char === \"(\" || char === \")\") {\n      stack.push(char)\n    } else if (stack.length === 0) {\n      return false\n    } else {\n      const popped = stack.pop()\n      if (popped!== char) {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return []\n  }\n\n  const deriv = []\n  for (let i = 1; i < len; i++) {\n    deriv[i] = len - i\n  }\n\n  const d = xs[0]\n  for (let i = 1; i < len; i++) {\n    deriv[i] += xs[i] * d\n  }\n\n  return deriv\n}\n\nexport default derivative\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) {\n    return 0;\n  } else if (n === 1) {\n    return 0;\n  } else if (n === 2) {\n    return 1;\n  }\n  return (fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3));\n};\n\nconsole.log(fibfib(5));\nconsole.log(fibfib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelCount", "gc": "/*Write a function vowelCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelCount(\"abcde\")\n  2\n  >>> vowelCount(\"ACEDY\")\n  3\n  */\nconst vowelCount = (s) => {\n  const vowel = ['a', 'e', 'i', 'o', 'u']\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (vowel.includes(s[i])) {\n      count++\n    }\n  }\n  if (s.endsWith('y')) {\n    count++\n  }\n  return count\n}\n\nconst testVowelCount = (s, expected) => {\n  expect(vowelCount(s)).toEqual(expected)\n}\n\ntestVowelCount('abcde', 2)\ntestVowelCount('ACEDY', 3)\ntestVowelCount('hello', 0)\ntestVowelCount('heLLo', 1)\ntestVowelCount('HELLO', 1)\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularShift(12, 1)\n  \"21\"\n  >>> circularShift(12, 2)\n  \"12\"\n  */\nconst circularShift = (x, shift) => {\n  const length = x.length;\n  if (shift >= length) {\n    return x.split('').reverse().join('');\n  }\n  const shiftAsString = shift.toString();\n  const rightOfShift = x.slice(0, shift);\n  const leftOfShift = x.slice(shift);\n  return rightOfShift + leftOfShift.split('').reverse().join('');\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst gcd = (x, y) => {\n  while (y!== 0) {\n    const tmp = x % y;\n    x = y;\n    y = tmp;\n  }\n  return x;\n};\n\nconst getPrimeFactors = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i < n; i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n      while (n % i === 0) {\n        n /= i;\n      }\n    }\n  }\n  if (n > 1) {\n    primeFactors.push(n);\n  }\n  return primeFactors;\n};\n\n/**\n * @param {number} n\n * @return {Array}\n */\nconst getFactors = (n) => {\n  const factors = [];\n  let num;\n  while (n > 1) {\n    num = 2;\n    while (n % num === 0) {\n      factors.push(num);\n      n /= num;\n    }\n    num = 3;\n    while (n % num === 0) {\n      factors.push(num);\n      n /= num;\n    }\n    num = 5;\n    while (n % num === 0) {\n      factors.push(num);\n      n /= num;\n    }\n    num = 7;\n    while (n % num === 0) {\n      factors.push(num);\n      n /= num;\n    }\n  }\n  return factors;\n};\n\n/**\n * @param {number} n\n * @return {number}\n */\nconst getPrimeNumbers = (n) => {\n  const primeNumbers = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primeNumbers.push(i);\n    }\n  }\n  return primeNumbers;\n};\n\n/**\n * @param {number} n\n * @return {boolean}\n */\nconst isPrime = (n) => {\n  let i;\n  if (n === 1) {\n    return false;\n  }\n  if (n < 5) {\n    return true;\n  }\n  for (i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst mod = (x, y) => {\n  return (x % y + y) % y;\n};\n\n/**\n * @param {number} x\n * @param {number} y\n * @return {number}\n */\nconst modDiv = (x, y) => {\n  return (x % y + y) % y;\n};\n\nconst numberToBase = (n, base) => {\n  return String(n);\n};\n\nconst parseInt = (s, radix) => {\n  return parseInt(s, radix);\n};\n\nconst isNumber = (n) => {\n  return typeof n === 'number';\n};\n\nconst isString = (s) => {\n  return typeof s ==='string';\n};\n\nconst isInteger = (n) => {\n  return n % 1 === 0;\n};\n\nconst isPrime = (n) => {\n  return isInteger(n) && getPrimeFactors(n).length === 1;\n};\n\nconst isPrimeNumber = (n) => {\n  return isInteger(n) && getPrimeNumbers(n).length === 1;\n};\n\nconst isPermutation = (a, b) => {\n  const aArray = a.split('');\n  const bArray = b.split('');\n  if (aArray.length!== bArray.length) {\n    return false;\n  }\n  let i;\n  for (i = 0; i < aArray.length; i++) {\n    if (aArray[i]!== bArray[i]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst isPalindrome = (n) => {\n  return n === parseInt(n, 10).toString(10)\n   .split('').reverse().join('');\n};\n\nconst isPythagoreanTriple = (a, b, c) => {\n  return a * a + b * b === c * c;\n};\n\nconst isPythagoreanTriple = (a, b, c) => {\n  return a * a + b * b === c * c;\n};\n\nconst isPrime = (n) => {\n  return isInteger(n) && getPrimeFactors(n).length === 1;\n};\n\nconst isSquare = (n) => {\n  return isInteger(n) && n % 1 === 0 && n % n === 0;\n};\n\nconst isSquare = (n) => {\n  return isInteger(n) && n % 1 === 0 && n % n === 0;\n};\n\nconst isPrime = (n) => {\n  return isInteger(n) && getPrimeFactors(n).length === 1;\n};\n\nconst isPositive = (n) => {\n  return isInteger(n) && n >= 0;\n};\n\nconst isPositive = (n) => {\n  return isInteger(n) && n >= 0;\n};\n\nconst isNegative = (n) => {\n  return isInteger(n) && n <"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSums", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 131\n      digitSums(\"abcCd\") => 67\n      digitSums(\"helloE\") => 69\n      digitSums(\"woArBld\") => 131\n      digitSums(\"aAaaaXa\") => 153\n  */\nconst digitSums = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].charCodeAt(0) > 57) {\n      count += parseInt(s[i].charCodeAt(0) - 97);\n    }\n  }\n  return count;\n}\n\n/* Task\n  Write a function that takes a string as input and returns the number of the lower-case characters in the string.\n  Note that \"a\" is considered lower-case.\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 0\n      digitSums(\"abcCd\") => 2\n      digitSums(\"helloE\") => 1\n      digitSums(\"woArBld\") => 4\n      digitSums(\"aAaaaXa\") => 2\n  */\nconst digitCount = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/* Task\n  Write a function that takes a string as input and returns the sum of the lower-case characters in the string.\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 97\n      digitSums(\"abcCd\") => 64\n      digitSums(\"helloE\") => 97\n      digitSums(\"woArBld\") => 99\n      digitSums(\"aAaaaXa\") => 68\n  */\nconst lowerDigitSum = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i]) {\n      count += parseInt(s[i].charCodeAt(0) - 97);\n    }\n  }\n  return count;\n}\n\n/* Task\n  Write a function that takes a string as input and returns the number of upper-case characters in the string.\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 0\n      digitSums(\"abcCd\") => 1\n      digitSums(\"helloE\") => 0\n      digitSums(\"woArBld\") => 2\n      digitSums(\"aAaaaXa\") => 2\n  */\nconst upperDigitSum = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    }\n  }\n  return count;\n}\n\n/* Task\n  Write a function that takes a string as input and returns the number of uppercase characters and the number of lower-case\n  characters in the string.\n  Examples:\n      digitSums(\"\") => 0\n      digitSums(\"abAB\") => 2\n      digitSums(\"abcCd\") => 2\n      digitSums(\"helloE\") => 1\n      digitSums(\"woArBld\") => 3\n      digitSums(\"aAaaaXa\") => 3\n  */\nconst uppercaseDigitCount = (s) => {\n  let count = 0;\n  let count2 = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i]) {\n      count++;\n    } else if (s[i].toLowerCase() === s[i]) {\n      count2++;\n    }\n  }\n  return count + count2;\n}\n\nmodule.exports = {\n  digitCount,\n  digitSums,\n  lowerDigitSum,\n  upperDigitSum,\n  uppercaseDigitCount\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let numberOfApples = s.split(' ').filter(s => s.length > 0).length;\n  let numberOfOranges = s.split(' ').filter(s => s.length > 0).length;\n  let numberOfMango = 0;\n  let total = n;\n  if (numberOfApples === 0) {\n    numberOfApples = 1;\n  }\n  if (numberOfOranges === 0) {\n    numberOfOranges = 1;\n  }\n  total -= numberOfApples;\n  total -= numberOfOranges;\n  if (s.includes('apples')) {\n    numberOfMango = numberOfApples;\n  } else if (s.includes('oranges')) {\n    numberOfMango = numberOfOranges;\n  } else if (s.includes('mango')) {\n    numberOfMango = numberOfApples + numberOfOranges;\n  }\n  return total - numberOfMango;\n};\n\nconsole.log(fruitDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(fruitDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(fruitDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const [smallest_value, smallest_index] = find_smallest(arr)\n  return [smallest_value, smallest_index]\n}\n\nconst find_smallest = (arr) => {\n  let smallest_value = arr[0]\n  let smallest_index = 0\n  let index = 1\n  while (index < arr.length) {\n    if (arr[index] < smallest_value) {\n      smallest_value = arr[index]\n      smallest_index = index\n    }\n    index++\n  }\n  return [smallest_value, smallest_index]\n}\n\nexport default pluck<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const max = (arr, pos) => arr[pos + 1] > arr[pos]? arr[pos + 1] : arr[pos]\n  const maxFrequency = (arr, pos) => arr[pos + 1] > arr[pos]? arr[pos + 1] : arr[pos]\n  const last = lst.length - 1\n  return lst[last] > 0? maxFrequency(lst, last) : -1\n}\n\nconst main = () => {\n  const input = [4, 1, 2, 2, 3, 1]\n  console.log(search(input))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strangerSortsLists", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strangerSortsLists([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strangerSortsLists([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strangerSortsLists([]) == []\n  */\nconst strangerSortsLists = (lst) => {\n  let newList = [];\n  let min = lst[0];\n  let max = lst[0];\n  let n = lst.length;\n  let sorted = lst.slice(1);\n  let sortedIndex;\n  for (let i = 0; i < n; i++) {\n    if (min > lst[i]) {\n      min = lst[i];\n      sortedIndex = i;\n    }\n    if (max < lst[i]) {\n      max = lst[i];\n      sortedIndex = i;\n    }\n  }\n  newList = newList.concat(lst.slice(0, sortedIndex + 1));\n  newList = newList.concat(sorted);\n  newList = newList.concat(lst.slice(sortedIndex + 1));\n  return newList;\n}\n\nconst add = (x, y) => x + y;\n\n/*\n  Given list of pairs, return list with the smallest\n  sum for each pair.\n  If two pairs have the same sum, then choose\n  one at random.\n  */\nconst pairwiseSort = (pairs) => {\n  let sorted = pairs.slice(0);\n  let newSorted = [];\n  for (let i = 0; i < sorted.length - 1; i++) {\n    let sum = sorted[i].x + sorted[i].y;\n    let j = i + 1;\n    while (j < sorted.length && sum === sorted[j].x + sorted[j].y) {\n      j++;\n    }\n    newSorted = newSorted.concat(sorted.slice(i, j));\n    newSorted = newSorted.concat(sorted.slice(j));\n  }\n  return newSorted;\n}\n\n/*\n  Given list of integers, return list of pairs with\n  the smallest sum for each pair.\n  */\nconst pairwiseSortInt = (lst) => {\n  let pairs = [];\n  for (let i = 0; i < lst.length - 1; i++) {\n    let x = lst[i];\n    let y = lst[i + 1];\n    let sum = add(x, y);\n    pairs.push({ x: x, y: y, sum: sum });\n  }\n  return pairwiseSort(pairs);\n}\n\n/*\n  Given list of integers, return list of pairs with\n  the largest sum for each pair.\n  */\nconst pairwiseSortMax = (lst) => {\n  let sorted = lst.slice(0);\n  let newSorted = [];\n  for (let i = 0; i < sorted.length - 1; i++) {\n    let sum = sorted[i].x + sorted[i].y;\n    let j = i + 1;\n    while (j < sorted.length && sum === sorted[j].x + sorted[j].y) {\n      j++;\n    }\n    newSorted = newSorted.concat(sorted.slice(i, j));\n    newSorted = newSorted.concat(sorted.slice(j));\n  }\n  return newSorted;\n}\n\n/*\n  Given list of integers, return list of pairs with\n  the largest sum for each pair.\n  */\nconst pairwiseSortMaxInt = (lst) => {\n  let pairs = [];\n  for (let i = 0; i < lst.length - 1; i++) {\n    let x = lst[i];\n    let y = lst[i + 1];\n    let sum = add(x, y);\n    pairs.push({ x: x, y: y, sum: sum });\n  }\n  return pairwiseSortMax(pairs);\n}\n\nconst main = () => {\n  let lst = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n  console.log(strangerSortsLists(lst));\n  console.log(pairwiseSortInt(lst));\n  console.log(pairwiseSortMaxInt(lst));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "trianglesAreas", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  trianglesAreas(3, 4, 5) == 6.00\n  trianglesAreas(1, 2, 10) == -1\n  */\nconst trianglesAreas = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n  } else {\n    return -1\n  }\n}\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFlied", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFlied([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFlied([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFlied([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFlied([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFlied = (q, w) => {\n  let result = true;\n  for (let i = 0; i < q.length; i++) {\n    if (q[i] >= w && q[i] < q[i + 1]) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\n// const willItFlied = (q, w) => {\n//   let result = true;\n//   let sum = 0;\n//   for (let i = 0; i < q.length; i++) {\n//     sum += q[i];\n//   }\n//   if (sum > w) {\n//     result = false;\n//   }\n//   return result;\n// };\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smallerChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smallerChange([1,2,3,5,4,7,9,6]) == 4\n  smallerChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smallerChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smallerChange = (arr) => {\n  let len = arr.length;\n  let index = 0;\n  let min = 0;\n  let max = arr.length - 1;\n  let change;\n\n  while (index <= max) {\n    change = Math.min(Math.abs(arr[index] - arr[max]), Math.abs(arr[index] - arr[min]));\n    min += change;\n    max -= change;\n    index++;\n  }\n\n  return min;\n};\n\nconsole.log(smallerChange([1,2,3,5,4,7,9,6]));\nconsole.log(smallerChange([1, 2, 3, 2, 1]));\nconsole.log(smallerChange([1, 2, 3, 2, 1, 2, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totalMatch([], []) ➞ []\n  totalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totalMatch = (lst1, lst2) => {\n  let match = [];\n  let count = 0;\n  for (let i = 0; i < lst1.length; i++) {\n    for (let j = 0; j < lst2.length; j++) {\n      if (lst1[i] === lst2[j]) {\n        count++;\n        match.push(lst1[i]);\n        break;\n      }\n    }\n  }\n  if (count === lst1.length) {\n    return lst1;\n  } else if (count === lst2.length) {\n    return lst2;\n  } else {\n    return match;\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPrime = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i < Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isMultiplyPrime2 = (a) => {\n  if (a % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i < Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconst isMultiplyPrime3 = (a) => {\n  for (let i = 3; i < Math.sqrt(a); i += 2) {\n    if (a % i === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nconsole.log(isMultiplyPrime(30))\nconsole.log(isMultiplyPrime(15))\nconsole.log(isMultiplyPrime(12))\nconsole.log(isMultiplyPrime2(30))\nconsole.log(isMultiplyPrime2(15))\nconsole.log(isMultiplyPrime2(12))\nconsole.log(isMultiplyPrime3(30))\nconsole.log(isMultiplyPrime3(15))\nconsole.log(isMultiplyPrime3(12))\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePower(1, 4) => true\n  isSimplePower(2, 2) => true\n  isSimplePower(8, 2) => true\n  isSimplePower(3, 2) => false\n  isSimplePower(3, 1) => false\n  isSimplePower(5, 3) => false\n  */\nconst isSimplePower = (x, n) => {\n  if (x === 0) return false\n  if (x === 1) return true\n  let power = 1\n  while (power < n) {\n    if (x % n === 0) {\n      return true\n    }\n    power *= n\n  }\n  return false\n}\n\nmodule.exports = isSimplePower\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a <= 0) {\n    return false\n  }\n\n  const m = Math.sqrt(a)\n  for (let i = 1; i <= m; i++) {\n    if (a % i!== 0) {\n      return false\n    }\n  }\n\n  return true\n}\n\nconsole.log(iscube(3))\nconsole.log(iscube(16))\nconsole.log(iscube(18))\nconsole.log(iscube(9))\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexesKeys", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexesKeys = (num) => {\n    const keys = {\n        2: 1,\n        3: 1,\n        5: 1,\n        7: 1,\n        11: 1,\n        13: 1,\n        17: 1,\n        19: 1,\n        23: 1,\n        29: 1,\n        31: 1,\n        37: 1,\n        41: 1,\n        43: 1,\n        47: 1,\n        53: 1,\n        59: 1,\n        61: 1,\n        67: 1,\n        71: 1,\n        73: 1,\n        79: 1,\n        83: 1,\n        89: 1,\n        97: 1,\n        101: 1,\n        103: 1,\n        107: 1,\n        109: 1,\n        113: 1,\n        127: 1,\n        131: 1,\n        137: 1,\n        139: 1,\n        149: 1,\n        151: 1,\n        157: 1,\n        163: 1,\n        167: 1,\n        173: 1,\n        179: 1,\n        181: 1,\n        187: 1,\n        191: 1,\n        193: 1,\n        197: 1,\n        199: 1,\n        211: 1,\n        223: 1,\n        227: 1,\n        229: 1,\n        233: 1,\n        239: 1,\n        241: 1,\n        251: 1,\n        257: 1,\n        263: 1,\n        269: 1,\n        271: 1,\n        277: 1,\n        281: 1,\n        283: 1,\n        293: 1,\n        307: 1,\n        311: 1,\n        313: 1,\n        317: 1,\n        331: 1,\n        337: 1,\n        347: 1,\n        349: 1,\n        353: 1,\n        359: 1,\n        367: 1,\n        373: 1,\n        379: 1,\n        383: 1,\n        389: 1,\n        397: 1,\n        401: 1,\n        407: 1,\n        419: 1,\n        421: 1,\n        431: 1,\n        433: 1,\n        439: 1,\n        443: 1,\n        449: 1,\n        457: 1,\n        461: 1,\n        463: 1,\n        467: 1,\n        479: 1,\n        487: 1,\n        491: 1,\n        499: 1,\n        503: 1,\n        509: 1,\n        521: 1,\n        523: 1,\n        541: 1,\n        547: 1,\n        557: 1,\n        563: 1,\n        569: 1,\n        571: 1,\n        577: 1,\n        587: 1,\n        587: 1,\n        593: 1,\n        599: 1,\n        601: 1,\n        607: 1,\n        613: 1,\n        617: 1,\n        619: 1,\n        631: 1,\n        641: 1,\n        643: 1,\n        647: 1,\n        653: 1,\n        659: 1,\n        661: 1,\n        673: 1,\n        677: 1,\n        683: 1,\n        691: 1,\n        701: 1,\n        709: 1,\n        719: 1,\n        727: 1,\n        733: 1,\n        739: 1,\n        743: 1,\n        751: 1,\n        757: 1,\n        761: 1,\n        769: 1,\n        773: 1,\n        787: 1,\n        797: 1,\n        809: 1,\n        811: 1,\n        821: 1,\n        823: 1,\n        827: 1,\n        829: 1,\n        839: 1,\n        853: 1,\n        857: 1,\n        859: 1,\n        863: 1,\n        877: 1,\n        881: 1,\n        883: 1,\n        887: 1,\n        907: 1,\n        911: 1,\n        919: 1,\n        929: 1,\n        937: 1,\n        941: 1,\n        947: 1,\n        953: 1,\n        967: 1,\n        971: 1,\n        977: 1,\n        983: 1,\n        991: 1,\n        997: 1,\n        1009: 1,\n        1013: 1,\n        1019: 1,\n        1021: 1,\n        1031: 1,\n        1033: 1,\n        1039: 1,\n        1049: 1,\n        1051: 1,\n        1061: 1,\n        1063: 1,\n        1069: 1,\n        1087: 1,\n        1091: 1,\n        1093: 1,\n        1097: 1,\n        1103: 1,\n        1109: 1,\n        1117: 1,\n        1123: 1,\n        1129: 1,\n        1151: 1,\n        1153: 1,\n        1163: 1,\n        1171: 1"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalsToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalsToBinary(15)   # returns \"db1111db\"\n  decimalsToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalsToBinary = (decimal) => {\n  let binary = [];\n  for (let i = 0; i < decimal.length; i++) {\n    binary.push(decimal[i]? '1' : '0');\n  }\n  return 'db' + binary.join('') + 'db';\n};\n\nexport default decimalsToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappiest", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappiest(a) => false\n  isHappiest(aa) => false\n  isHappiest(abcd) => true\n  isHappiest(aabb) => false\n  isHappiest(adb) => true\n  isHappiest(xyy) => false\n  */\nconst isHappiest = (s) => {\n  if (!s) return false;\n  const len = s.length;\n  let isHappy = true;\n  for (let i = 0; i < len; i++) {\n    if (i % 3 === 0) {\n      isHappy = true;\n      for (let j = i + 1; j < len; j++) {\n        if (s[i] === s[j]) {\n          isHappy = false;\n          break;\n        }\n      }\n      if (!isHappy) {\n        break;\n      }\n    }\n    isHappy = isHappy && (s[i] >= 'a' && s[i] <= 'z' || s[i] >= 'A' && s[i] <= 'Z');\n  }\n  return isHappy;\n};\n\n// TEST\n[\n  'a',\n  'aa',\n  'abcd',\n  'aabb',\n  'adb',\n  'xyy'\n].forEach((s) => console.log(`${s} is ${isHappiest(s)}`));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numericalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numericalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numericalLetterGrade = (grades) => {\n  const average = (grades.length) / (grades.length + 1);\n  const standardDeviation = Math.sqrt(average * (1 - average) * (grades.length));\n\n  const d = grades.reduce((a, b, i) => (a + b), 0) / grades.length;\n  const p = d - average;\n  const q = standardDeviation * Math.sqrt(grades.length);\n  const r = p / q;\n\n  const letterGrade = ['A+', 'B', 'C-', 'C', 'A-'];\n\n  const sortedArray = grades.sort((a, b) => a - b);\n\n  if (p <= 0) {\n    return sortedArray.map((x, i) => {\n      if (r >= i) {\n        return letterGrade[0];\n      } else if (r < i) {\n        return letterGrade[5];\n      } else {\n        return letterGrade[4];\n      }\n    });\n  } else if (p > 0 && p < 3) {\n    return sortedArray.map((x, i) => {\n      if (r >= i) {\n        return letterGrade[1];\n      } else if (r < i) {\n        return letterGrade[2];\n      } else {\n        return letterGrade[3];\n      }\n    });\n  } else if (p >= 3 && p <= 5) {\n    return sortedArray.map((x, i) => {\n      if (r >= i) {\n        return letterGrade[2];\n      } else if (r < i) {\n        return letterGrade[3];\n      } else {\n        return letterGrade[4];\n      }\n    });\n  } else {\n    return sortedArray.map((x, i) => {\n      if (r >= i) {\n        return letterGrade[3];\n      } else if (r < i) {\n        return letterGrade[4];\n      } else {\n        return letterGrade[5];\n      }\n    });\n  }\n};\n\nexport { numericalLetterGrade };\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const len = string.length\n  const isPrime = (number) => {\n    const i = 2\n    const sqrt = Math.sqrt(number)\n    while (i < sqrt) {\n      if (number % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  if (len % 2 === 0) {\n    return false\n  }\n  for (let i = 3; i < len; i += 2) {\n    if (!isPrime(i)) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startOneEnds = (n) => {\n  if (n <= 0) return 0\n  const n_digit = n / 10\n  const count = n_digit === 1? 1 : 2 * (n_digit - 1) + 1\n  return count\n}\n\nconst count = (n) => {\n  let count = 0\n  while (n > 0) {\n    count += startOneEnds(n)\n    n = n / 10\n  }\n  return count\n}\n\nconsole.log(count(9))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const str = '';\n  for (let i = 1; i <= N; i++) {\n    str += Math.pow(2, N - i) > 9? '1' : '0';\n  }\n  return str;\n};\n\nconsole.log(solve(1000));\nconsole.log(solve(150));\nconsole.log(solve(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "adding", "gc": "/*Given a non-empty list of integers lst. adding the even elements that are at odd indices..\n\n\n  Examples:\n      adding([4, 2, 6, 7]) ==> 2 \n  */\nconst adding = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [6, 7] \n  */\nconst removing = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 6, 7] \n  */\nconst removing2 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst removing3 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [4, 2, 6, 7] \n  */\nconst removing4 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst removing5 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst removing6 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst removing7 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst removing8 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst removing9 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 0) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6, 7]) ==> [2, 6, 7] \n  */\nconst removing10 = (lst) => {\n  const new_lst = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      new_lst.push(lst[i]);\n    }\n  }\n  return new_lst;\n};\n\n/*\n  Given a non-empty list of integers lst. removing the even elements that are at odd indices.\n\n\n  Examples:\n      removing([4, 2, 6,"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antisShuffles", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antisShuffles('Hi') returns 'Hi'\n  antisShuffles('hello') returns 'ehllo'\n  antisShuffles('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antisShuffles = (s) => {\n    let result = s\n    let words = s.split(' ')\n    let charCount = {}\n    let wordCount = {}\n\n    words.forEach((w, i) => {\n        let chs = w.split('')\n        chs.forEach((c, j) => {\n            if (charCount[c] === undefined) {\n                charCount[c] = 0\n            }\n            charCount[c] += 1\n        })\n        wordCount[w] = i\n    })\n\n    words.forEach((w, i) => {\n        let chs = w.split('')\n        chs.forEach((c, j) => {\n            let charCount = charCount[c]\n            let wordCount = wordCount[w]\n            if (charCount > wordCount) {\n                let newWord = c + wordCount\n                chs.splice(j, 1, newWord)\n            }\n        })\n        let result = result.concat(chs.join(''))\n    })\n\n    return result\n}\n\nconsole.log(antisShuffles('Hi'))\nconsole.log(antisShuffles('hello'))\nconsole.log(antisShuffles('Hello World!!!'))\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRows", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRows([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRows([], 1) == []\n  getRows([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRows = (lst, x) => {\n  if(lst.length === 0) {\n    return []\n  }\n  return lst.map((row, i) => {\n    return lst.map(row => {\n      return (row.indexOf(x)!== -1)? [row.indexOf(x), i] : []\n    })\n  })\n .reduce((acc, next) => {\n    const acc1 = acc[0].map(x => [x, 0]).sort((a, b) => a[1] - b[1])\n    const acc2 = acc[1].map(x => [x, 0]).sort((a, b) => b[1] - a[1])\n    return acc1.concat(acc2)\n  }, [[] for i in range(lst.length)])\n .reduce((acc, next) => acc.concat(next), [])\n .sort((a, b) => a[0] - b[0])\n .sort((a, b) => b[1] - a[1])\n}\n\nconst getRows2 = (lst, x) => {\n  if(lst.length === 0) {\n    return []\n  }\n  return lst.map((row, i) => {\n    return lst.map(row => {\n      return row.indexOf(x)!== -1? [row.indexOf(x), i] : []\n    })\n  })\n .reduce((acc, next) => {\n    const acc1 = acc[0].map(x => [x, 0]).sort((a, b) => a[1] - b[1])\n    const acc2 = acc[1].map(x => [x, 0]).sort((a, b) => b[1] - a[1])\n    return acc1.concat(acc2)\n  }, [[] for i in range(lst.length)])\n .reduce((acc, next) => acc.concat(next), [])\n .sort((a, b) => a[0] - b[0])\n .sort((a, b) => b[1] - a[1])\n}\n\nconsole.log(getRows([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortsArray([]) => []\n  * sortsArray([5]) => [5]\n  * sortsArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortsArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortsArray = (array) => {\n  if (array.length === 0) {\n    return array;\n  }\n  const sortedArray = [];\n  let i;\n  let j;\n  let sum;\n  let n = array.length;\n  for (i = 0; i < n; i++) {\n    sum = array[i];\n    for (j = i + 1; j < n; j++) {\n      sum += array[j];\n      if (sum % 2 === 0) {\n        sortedArray.push(array[j]);\n        array.splice(j, 1);\n        n--;\n      } else if (sum % 2 === 1) {\n        sortedArray.push(array[i]);\n        array.splice(i, 1);\n        n--;\n      }\n    }\n  }\n  return sortedArray;\n};\n\nconsole.log(sortsArray([5, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n    return s.split('').reduce((s, c) => {\n        let n = s.charCodeAt(s.length - 1) + s.charCodeAt(s.length - 2) + (c.charCodeAt(0) * 2)\n        s += String.fromCharCode(n)\n        return s\n    }, '')\n}\n\nconsole.log(encrypt('hi'))\nconsole.log(encrypt('asdfghjkl'))\nconsole.log(encrypt('gf'))\nconsole.log(encrypt('et'))\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallest([1, 2, 3, 4, 5]) == 2\n  nextSmallest([5, 1, 4, 3, 2]) == 2\n  nextSmallest([]) == null\n  nextSmallest([1, 1]) == null\n  */\nconst nextSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  }\n\n  return lst[1];\n};\n\nexport default nextSmallest;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBore", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBore(\"Hello world\")\n  0\n  >>> isBore(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBore = (S) => {\n    const isBored = S.match(/^I/);\n    return isBored.length > 0;\n};\n\n//Test\nconsole.log(isBore(\"I am bored\"));\nconsole.log(isBore(\"I am not bored\"));\nconsole.log(isBore(\"I am a nerd\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  let int = x % 1 === 0;\n  int = int && y % 1 === 0;\n  int = int && z % 1 === 0;\n  return int;\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    const vowels = ['a','e','i','o','u']\n    const vowelIndices = [...vowels.map((v,i) => [v,i]),['z',0]]\n    let encoded = ''\n    for (let i = 0; i < message.length; i++) {\n        if (vowels.indexOf(message[i]) > -1) {\n            encoded += vowelIndices[1][vowels.indexOf(message[i])]\n        } else {\n            encoded += message[i].toLowerCase()\n        }\n    }\n    return encoded\n}\n\nconst test = () => {\n    assert.equal(encode('this is a message'),'tGSTKS C MGSSCGG')\n    assert.equal(encode('this is a message'),'tGSTKS C MGSSCGG')\n}\n\nconst question = (message) => {\n    assert.equal(encode(message),'tGSTKS C MGSSCGG')\n}\n\nmodule.exports = {\n    encode,\n    question,\n    test\n}<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjkasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjkasdkd = (lst) => {\n  const max = Math.max(...lst);\n  const prime = (n) => {\n    if (n > 1 && n % 2 === 0) {\n      return false;\n    }\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const res = 0;\n  for (let i = 0; i < lst.length; i++) {\n    const a = lst[i];\n    if (prime(a)) {\n      res += a;\n    }\n  }\n  return max + res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCases", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCases = (dict) => {\n    for (let key in dict) {\n        let keyVal = dict[key];\n        if (!isString(keyVal)) {\n            return false;\n        }\n        if (keyVal.toLowerCase()!== keyVal) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    for (let key in dict) {\n        let keyVal = dict[key];\n        if (!isString(keyVal)) {\n            return false;\n        }\n        if (keyVal.toUpperCase()!== keyVal.toLowerCase()) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictNoCase = (dict) => {\n    for (let key in dict) {\n        let keyVal = dict[key];\n        if (!isString(keyVal)) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCases({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return true.\n  checkDictCases({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCases({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCases({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCasesNoCase = (dict) => {\n    for (let key in dict) {\n        let keyVal = dict[key];\n        if (!isString(keyVal)) {\n            return false;\n        }\n    }\n    return true;\n};\n\nconst checkDict = (dict) => {\n    return checkDictCases(dict) && checkDictNoCase(dict);\n};\n\nconst checkDictNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictCases = (dict) => {\n    return checkDictCases(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictNoCase = (dict) => {\n    return checkDictNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictCases = (dict) => {\n    return checkDictCases(dict);\n};\n\nconst checkDictNoCase = (dict) => {\n    return checkDictNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictNoCase = (dict) => {\n    return checkDictNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictNoCase = (dict) => {\n    return checkDictNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictCasesNoCase = (dict) => {\n    return checkDictCasesNoCase(dict);\n};\n\nconst checkDictC"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let a = [];\n  for (let i = 1; i <= n; i++) {\n    a.push(i);\n  }\n  return a;\n};\n\nconsole.log(countUpTo(5)); // [2,3]\nconsole.log(countUpTo(11)); // [2,3,5,7]\nconsole.log(countUpTo(0)); // []\nconsole.log(countUpTo(20)); // [2,3,5,7,11,13,17,19]\nconsole.log(countUpTo(1)); // []\nconsole.log(countUpTo(18)); // [2,3,5,7,11,13,17]\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (isNaN(a) || isNaN(b)) return NaN\n  let aSign = a < 0? -1 : 1\n  let bSign = b < 0? -1 : 1\n  let aBits = getBits(a)\n  let bBits = getBits(b)\n  let aLength = aBits.length\n  let bLength = bBits.length\n  let aUnit = aBits.slice(aLength - 1, aLength)\n  let bUnit = bBits.slice(bLength - 1, bLength)\n  let product = 0\n  for (let i = 0; i < aLength; i++) {\n    let temp = bUnit[i] * aUnit[i]\n    product += temp\n  }\n  return aSign * product\n}\n\n// Get the number of bits of an integer\nconst getBits = (num) => {\n  let numLength = 0\n  let unit = 1\n  let temp = num\n  while (temp > 0) {\n    numLength++\n    temp = temp / unit\n  }\n  return num.toString(2).split('').reverse().map(x => x + '')\n}\n\n// Add a number to a string\nconst add = (a, b) => {\n  let aBits = getBits(a)\n  let bBits = getBits(b)\n  let aLength = aBits.length\n  let bLength = bBits.length\n  let sum = ''\n  for (let i = 0; i < aLength; i++) {\n    sum += aBits[i] + bBits[i]\n  }\n  return sum.split('').reverse().map(x => x + '').join('')\n}\n\n// Check if two numbers are equal\nconst equals = (a, b) => {\n  return (a + '') === (b + '')\n}\n\n// Compare two strings\nconst compare = (a, b) => {\n  return a + '' === b + ''\n}\n\n// Find the product of the digits of an integer\nconst findProduct = (num) => {\n  let numLength = 0\n  let unit = 1\n  let product = 0\n  while (num > 0) {\n    numLength++\n    product = product * num\n    num = num / unit\n  }\n  return product\n}\n\n// Find the number of digits of an integer\nconst findDigits = (num) => {\n  let numLength = 0\n  while (num > 0) {\n    numLength++\n    num = num / 10\n  }\n  return numLength\n}\n\n// Convert a string to an integer\nconst stringToInt = (str) => {\n  return parseInt(str, 2)\n}\n\n// Convert an integer to a string\nconst intToString = (num) => {\n  return num.toString(2)\n}\n\n// Convert a number to a string\nconst numberToString = (num) => {\n  let numberDigits = findDigits(num)\n  let numberLength = numberDigits.toString(10).length\n  let numberString = intToString(num)\n  let pad = new Array(numberDigits).fill(0)\n  pad.pop()\n  let padString = pad.join('')\n  let stringLength = numberString.length + padString.length\n  let string = numberString + padString\n  return string.substring(0, stringLength)\n}\n\n// Convert a string to a number\nconst stringToNumber = (str) => {\n  return parseInt(str, 2)\n}\n\n// Convert a number to a string\nconst numberToString = (num) => {\n  let numberDigits = findDigits(num)\n  let numberLength = numberDigits.toString(10).length\n  let numberString = numberToString(num)\n  let pad = new Array(numberDigits).fill(0)\n  pad.pop()\n  let padString = pad.join('')\n  let stringLength = numberString.length + padString.length\n  let string = numberString + padString\n  return string.substring(0, stringLength)\n}\n\n// Convert a string to a boolean\nconst stringToBoolean = (str) => {\n  return str === 'true' || str === '1'\n}\n\n// Convert a boolean to a string\nconst booleanToString = (boolean) => {\n  if (boolean === true) {\n    return 'true'\n  } else {\n    return 'false'\n  }\n}\n\n// Convert a number to a boolean\nconst numberToBoolean = (num) => {\n  return num === 1\n}\n\n// Convert a boolean to a number\nconst booleanToNumber = (boolean) => {\n  if (boolean === true) {\n    return 1\n  } else {\n    return 0\n  }\n}\n\n// Convert a string to a float\nconst stringToFloat = (str) => {\n  return parseFloat(str)\n}\n\n// Convert a float to a string\nconst floatToString = (num) => {\n  return num.toString()\n}\n\n// Convert a string to a float\nconst stringToFloat = (str) => {\n  return parseFloat(str)\n}\n\n// Convert a float to a string\nconst floatToString = (num) => {\n  return num.toString()\n}\n\n// Convert a string to a float\nconst stringToFloat = (str) => {\n  return parseFloat(str)\n}\n\n// Convert a float to a string\nconst floatToString = (num) => {\n  return num.toString()\n}\n\n// Convert a float to a string\nconst floatToString = (num) => {\n  return num.toString()\n}\n\n// Convert a string to a float\nconst stringToFloat = (str) => {\n  return parseFloat(str)\n}\n\n// Convert a float to a string\nconst floatToString = (num) => {\n  return num.toString()\n}\n\n// Convert a"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      count += 1;\n    }\n  }\n  return count;\n}\n\nexport default countUpper;\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closerIntegers", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10\")\n  10\n  >>> closerIntegers(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closerIntegers = (value) => {\n  const num = parseInt(value, 10)\n  const diff = Math.abs(num - Math.floor(num))\n  const half = Math.floor(num) / 2\n  const diff1 = Math.abs(num - half)\n  const diff2 = Math.abs(half - num)\n\n  if (diff1 < diff2) {\n    return half\n  } else {\n    return num\n  }\n}\n\n/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closerIntegers(\"10.3\")\n  10\n  >>> closerIntegers(\"15.5\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closerIntegers(\"14.5\") should\n  return 15 and closerIntegers(\"-14.5\") should return -15.\n  */\nconst closestIntegers = (value) => {\n  const num = parseInt(value, 10)\n  const half = Math.floor(num) / 2\n  const diff = Math.abs(num - half)\n  const diff1 = Math.abs(num - half)\n\n  if (diff1 < diff) {\n    return half\n  } else {\n    return num\n  }\n}\n\nexport default {\n  closestIntegers,\n  closerIntegers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "madeAPiles", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> madeAPiles(3)\n  [3, 5, 7]\n  */\nconst madeAPiles = (n) => {\n  let list = []\n  for (let i = 0; i < n; i += 2) {\n    list.push(i + 1)\n  }\n  if (n % 2 === 1) {\n    list.push(n)\n  }\n  return list\n}\n\nmodule.exports = madeAPiles\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordString = (s) => {\n  if (typeof s ==='string') {\n    let ret = s.split(/\\s*\\,\\s*/);\n    return ret.filter(e => e.length > 0);\n  } else {\n    return [];\n  }\n};\n\n/*\n  Returns an array of the unique words in the string, ignoring case.\n  \n  For example:\n  wordString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst uniqueWords = (s) => {\n  if (typeof s ==='string') {\n    let ret = s.split(/\\s*\\,\\s*/);\n    let words = [];\n    for (let i = 0; i < ret.length; i++) {\n      if (words.indexOf(ret[i]) === -1) {\n        words.push(ret[i]);\n      }\n    }\n    return words;\n  } else {\n    return [];\n  }\n};\n\nconst _main = async () => {\n  let s = await readline();\n  let words = wordString(s);\n  let uniqueWords = uniqueWords(s);\n  let result = words.filter(e => uniqueWords.indexOf(e) === -1);\n  console.log(result.join(', '));\n};\n\n_main();\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  }\n  if (x === y + 1) {\n    return x;\n  }\n  let half = Math.ceil(x / 2);\n  let r = half;\n  while (r < y) {\n    if (isEven(r)) {\n      return r;\n    }\n    r += half;\n  }\n  return -1;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundingAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundingAvg(1, 5) => \"0b11\"\n  roundingAvg(7, 5) => -1\n  roundingAvg(10, 20) => \"0b1111\"\n  roundingAvg(20, 33) => \"0b11010\"\n  */\nconst roundingAvg = (n, m) => {\n  let avg = 0;\n  while (n <= m) {\n    avg += n;\n    n++;\n  }\n  return avg / (m - n + 1);\n};\n\nconsole.log(roundingAvg(1, 5));\nconsole.log(roundingAvg(7, 5));\nconsole.log(roundingAvg(10, 20));\nconsole.log(roundingAvg(20, 33));\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigit", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigit([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigit([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigit = (x) => {\n  let res = [];\n  for(let i=0;i<x.length;i++){\n    let k = x[i];\n    while(!isInt(k) ||!isEven(k)){\n      let j = i+1;\n      while(j<x.length && isInt(x[j])){\n        k = x[j];\n        j++;\n      }\n      if(!isInt(k)){\n        break;\n      }\n      i = j;\n    }\n    if(!isInt(k)){\n      break;\n    }\n    res.push(k);\n  }\n  return res;\n}\n\nconst isInt = (x) => {\n  return typeof x === 'number' &&!isNaN(x) && isFinite(x);\n}\n\nconst isEven = (x) => {\n  return x % 2 === 0;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLength = (arr) => {\n    let sortedArr = arr.slice();\n    sortedArr.sort((a, b) => a.length - b.length);\n    sortedArr.reverse();\n    let names = [];\n    sortedArr.forEach((element, index) => {\n        if (index === sortedArr.length - 1) {\n            names.push(element);\n        } else {\n            names.push(`${element}`);\n        }\n    });\n    return names;\n};\n\n/*\n  Given an array of numbers, return a string containing the numbers and their names.\n  The names will appear in order.\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return \"Eight, Five, Four, Three, Two, Two, One, One\"\n\n    If the array is empty, return an empty string:\n    arr = []\n    return \"\"\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55]\n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = \"One\"\n  */\nconst byNumber = (arr) => {\n    let sortedArr = arr.slice();\n    sortedArr.sort((a, b) => a - b);\n    sortedArr.reverse();\n    let names = [];\n    sortedArr.forEach((element, index) => {\n        if (index === sortedArr.length - 1) {\n            names.push(element);\n        } else {\n            names.push(`${element}`);\n        }\n    });\n    return names.join(\", \");\n};\n\n/*\n  Given an array of numbers, return a string containing the numbers and their names.\n  The names will appear in order.\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]\n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8]\n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return \"Eight, Five, Four, Three, Two, Two, One, One\"\n\n    If the array is empty, return an empty string:\n    arr = []\n    return \"\"\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55]\n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = \"One\"\n  */\nconst byNumberAndLength = (arr) => {\n    let sortedArr = arr.slice();\n    sortedArr.sort((a, b) => a - b);\n    sortedArr.reverse();\n    let names = [];\n    sortedArr.forEach((element, index) => {\n        if (index === sortedArr.length - 1) {\n            names.push(element);\n        } else {\n            names.push(`${element}`);\n        }\n    });\n    return names.join(\", \");\n};\n\nmodule.exports = {\n    byLength,\n    byNumber,\n    byNumberAndLength\n};<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  return Array(n + 1).fill(1).map((_, i) => {\n    if (i % 2 === 0) {\n      return n;\n    } else {\n      return i * f(n - 1);\n    }\n  });\n};\n\nf(5);\n// [1, 2, 6, 24, 15]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOdderPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindrome = (n) => {\n  let counter = 0,\n    odd = 0,\n    even = 0;\n  while (n) {\n    if (n % 2 === 0) {\n      counter++;\n    } else {\n      odd++;\n    }\n    n = n / 2;\n  }\n  return [counter, odd];\n}\n\n/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOdderPalindromeBis = (n) => {\n  let counter = 0,\n    odd = 0,\n    even = 0;\n  while (n) {\n    if (n % 2 === 0) {\n      counter++;\n    }\n    if (n % 2!== 0) {\n      odd++;\n    }\n    n = n / 2;\n  }\n  return [counter, odd];\n}\n\nexport {\n  evenOdderPalindrome,\n  evenOdderPalindromeBis\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNums", "gc": "/*\n  Write a function countNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNums([]) == 0\n  >>> countNums([-1, 11, -11]) == 1\n  >>> countNums([1, 1, 2]) == 3\n  */\nconst countNums = (arr) => {\n  const res = 0;\n\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      res += countDigits(arr[i]);\n    }\n  }\n\n  return res;\n};\n\nconst countDigits = (num) => {\n  let res = 0;\n\n  while (num) {\n    res += (num % 10) > 0? 1 : 0;\n    num = Math.floor(num / 10);\n  }\n\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movingOneBalls", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movingOneBalls([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movingOneBalls([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movingOneBalls = (arr) => {\n  if (arr.length === 0) return true;\n  const sortedArr = arr.sort((a, b) => a - b);\n  for (let i = 1; i < arr.length; i++) {\n    if (sortedArr[i - 1] > sortedArr[i]) return false;\n  }\n  return true;\n}\n\n// test cases\n[\n  [\n    [4, 3, 1, 2],\n    [4, 3, 1, 2],\n    true\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 4, 1, 2],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 4, 2, 1],\n    true\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 4, 1, 2],\n    true\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 4, 2, 1],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 4, 2],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 2, 4, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 1, 4, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [1, 4, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 4, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 4, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [2, 3, 4, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 3, 4],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [1, 2, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 2, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 3, 2],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 3, 3, 2],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 3, 1],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 1, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [1, 4, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 3, 3, 3],\n    true\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 4, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 4, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 3, 4],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [2, 3, 4, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 3, 2],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [1, 2, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 2, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 3, 2],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 3, 3, 2],\n    true\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 3, 1],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 1, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [1, 4, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [4, 3, 3, 3],\n    true\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 4, 3, 3],\n    false\n  ],\n  [\n    [4, 3, 1, 2],\n    [3, 3, 4, 3],\n    false\n  ],\n  [\n    [4, 3,"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "exchanges", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an exchanges of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of exchangesd elements between lst1 and lst2.\n  If it is possible to exchanges elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  exchanges([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  exchanges([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst exchanges = (lst1, lst2) => {\n  let lst1copy = lst1.slice();\n  let lst2copy = lst2.slice();\n  const length = Math.min(lst1copy.length, lst2copy.length);\n  for (let i = 0; i < length; i++) {\n    if (lst1copy[i]!== lst2copy[i]) {\n      return 'NO';\n    }\n  }\n  return 'YES';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histograms", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histograms('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histograms('a b b a') == {'a': 2, 'b': 2}\n  histograms('a b c a b') == {'a': 2, 'b': 2}\n  histograms('b b b b a') == {'b': 4}\n  histograms('') == {}\n\n  */\nconst histograms = (test) => {\n  let count = {};\n  for (let i = 0; i < test.length; i++) {\n    let letter = test.charAt(i);\n    if (count[letter] === undefined) {\n      count[letter] = 1;\n    } else {\n      count[letter]++;\n    }\n  }\n  return count;\n};\n\n//console.log(histograms('a b c'));\nconsole.log(histograms('a b b a'));\nconsole.log(histograms('b b b b a'));\nconsole.log(histograms(''));\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reversesDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reversesDelete = (s, c) => {\n  const isPalindrome = s => s === s.split('').reverse().join('');\n  const reversed = s.split('').reverse().join('');\n\n  if (isPalindrome(s)) {\n    return [reversed, true];\n  }\n\n  let i = 0;\n  let j = 0;\n  while (i < s.length && j < c.length) {\n    if (s[i] === c[j]) {\n      i += 1;\n    }\n    j += 1;\n  }\n\n  return [s.slice(0, i), false];\n};\n\nmodule.exports = reversesDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "odderCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> odderCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> odderCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst odderCount = (lst) => {\n  let count = 0;\n  let index = 0;\n  const out = [];\n  while (index < lst.length) {\n    const c = lst[index];\n    if (c.indexOf('0')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('1')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('2')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('3')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('4')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('5')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('6')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('7')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('8')!== -1) {\n      count += 1;\n    }\n    if (c.indexOf('9')!== -1) {\n      count += 1;\n    }\n    index += 1;\n  }\n  out.push(`the number of odd elements ${count} of the ${lst.length} input.`);\n  return out;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubsArraySums", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubsArraySums([2, 3, 4, 1, 2, 4]) == 1\n  minSubsArraySums([-1, -2, -3]) == -6\n  */\nconst minSubsArraySums = (nums) => {\n  const result = [];\n  const minSum = [];\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    minSum.push(nums[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    const subSum = minSum.slice(0);\n    for (let j = i; j < len; j++) {\n      subSum.push(nums[j]);\n      const sum = subSum.reduce((a, b) => a + b);\n      if (sum < 0) {\n        result.push(sum);\n      }\n      if (sum === 0) {\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of integers nums, find the maximum sum of any non-empty sub-array\n  of nums.\n  Example\n  maxSubsArraySums([2, 3, 4, 1, 2, 4]) == 9\n  maxSubsArraySums([-1, -2, -3]) == -1\n  */\nconst maxSubsArraySums = (nums) => {\n  const result = [];\n  const maxSum = [];\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    maxSum.push(nums[i]);\n  }\n  for (let i = 0; i < len; i++) {\n    const subSum = maxSum.slice(0);\n    for (let j = i; j < len; j++) {\n      subSum.push(nums[j]);\n      const sum = subSum.reduce((a, b) => a + b);\n      if (sum > 0) {\n        result.push(sum);\n      }\n      if (sum === 0) {\n        break;\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given an array of non-negative integers, find the first missing positive integer.\n  Example\n  firstMissingPositive([1, 2, 0]) == 3\n  firstMissingPositive([3, 4, -1, 1]) == 2\n  firstMissingPositive([9, 8, 7, 6, 5, 4, 3, 2, 1]) == 6\n  firstMissingPositive([1, 2, 3, 4]) == 5\n  */\nconst firstMissingPositive = (nums) => {\n  const result = [];\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const index = nums.indexOf(i);\n    if (index === -1) {\n      result.push(i);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\n/*\n  Given an array of non-negative integers, find the first missing negative integer.\n  Example\n  firstMissingNegative([1, 2, 0]) == -1\n  firstMissingNegative([3, 4, -1, 1]) == -3\n  firstMissingNegative([9, 8, 7, 6, 5, 4, 3, 2, 1]) == -2\n  firstMissingNegative([1, 2, 3, 4]) == -4\n  */\nconst firstMissingNegative = (nums) => {\n  const result = [];\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    const index = nums.indexOf(i * -1);\n    if (index === -1) {\n      result.push(i * -1);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\n/*\n  Given an array of non-negative integers, find the sum of the even-indexed\n  elements.\n  Example\n  sumEven([2, 3, 4, 6, 8]) == 14\n  sumEven([2, 3, 4, 6]) == 12\n  sumEven([1, 2, 3, 4, 5]) == 10\n  sumEven([1, 2, 3]) == 6\n  */\nconst sumEven = (nums) => {\n  const result = [];\n  const len = nums.length;\n  for (let i = 0; i < len; i++) {\n    if (i % 2 === 0) {\n      result.push(nums[i]);\n    }\n  }\n  return result.reduce((a, b) => a + b);\n};\n\nmodule.exports = {\n  minSubsArraySums,\n  maxSubsArraySums,\n  firstMissingPositive,\n  firstMissingNegative,\n  sumEven\n};\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const gridLength = grid.length;\n  const gridRow = grid[0].length;\n  const max = grid[0][0] || 0;\n  const maxFill = 0;\n  const buckets = [];\n  for (let i = 0; i < gridLength; i++) {\n    for (let j = 0; j < gridRow; j++) {\n      if (grid[i][j] === 0) {\n        buckets.push(0);\n      } else if (grid[i][j] === 1) {\n        buckets.push(1);\n      } else {\n        throw new Error(`grid[i][j] should be 0 or 1`);\n      }\n    }\n  }\n\n  for (let i = 0; i < gridLength; i++) {\n    for (let j = 0; j < gridRow; j++) {\n      if (buckets[j] > 0) {\n        buckets[j]--;\n        if (buckets[j] === 0) {\n          for (let k = j; k < gridRow - 1; k++) {\n            buckets[k] = buckets[k + 1];\n          }\n          grid[i][j] = 0;\n          grid[i][gridRow - 1] = 0;\n          maxFill++;\n        } else {\n          grid[i][j] = 1;\n        }\n      }\n    }\n  }\n\n  return maxFill;\n};\n\nconsole.assert(maxFill(\n  [\n    [1, 0, 0, 0],\n    [1, 1, 0, 0],\n    [0, 0, 1, 0],\n    [0, 1, 1, 1],\n    [1, 0, 0, 0],\n  ],\n  1\n) === 6);\nconsole.assert(maxFill(\n  [\n    [1, 0, 0, 1, 0, 0],\n    [1, 1, 0, 1, 0, 0],\n    [0, 0, 1, 1, 0, 0],\n    [0, 1, 1, 1, 0, 0],\n    [0, 0, 0, 0, 1, 0],\n    [0, 0, 0, 0, 1, 1],\n  ],\n  2\n) === 5);\nconsole.assert(maxFill(\n  [\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n    [0, 0, 0, 0, 0, 0],\n  ],\n  5\n) === 0);\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortsArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortsArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortsArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortsArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortsArray = (arr) => {\n    const length = arr.length\n    const sortedArray = []\n    const zero = 0\n    const one = 1\n\n    for (let i = 0; i < length; i++) {\n        const binaryRepresentation = (arr[i] + one).toString(2)\n        const countOfOnes = binaryRepresentation.count(one)\n        const decimalValue = parseInt(binaryRepresentation, 2)\n\n        if (countOfOnes > zero) {\n            sortedArray.push(decimalValue)\n        } else {\n            sortedArray.push(arr[i])\n        }\n    }\n    return sortedArray\n}\n\nexport default sortsArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWord", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWord(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWord(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWord(\"simple white space\", 2) ==> []\n  selectWord(\"Hello world\", 4) ==> [\"world\"]\n  selectWord(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWord = (s, n) => {\n  if (s === '') {\n    return [];\n  }\n  let res = [];\n  let counter = 0;\n  let length = s.length;\n  let result = s.split(' ');\n  for (let i = 0; i < result.length; i++) {\n    let temp = result[i];\n    let length = temp.length;\n    for (let j = 0; j < length; j++) {\n      if (s[j] === temp[j]) {\n        counter++;\n      } else {\n        counter = 0;\n      }\n      if (counter === n) {\n        res.push(temp);\n      }\n    }\n  }\n  return res;\n}\n\nmodule.exports = selectWord;\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "gottenCloserVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  gottenCloserVowel(\"yogurt\") ==> \"u\"\n  gottenCloserVowel(\"FULL\") ==> \"U\"\n  gottenCloserVowel(\"quick\") ==> \"\"\n  gottenCloserVowel(\"ab\") ==> \"\"\n  */\nconst gottenCloserVowel = (word) => {\n  let consonant = '';\n  let vowel = '';\n  let start = 0;\n  let end = word.length - 1;\n  let mid = (start + end) / 2;\n  while (start <= end) {\n    consonant = word[mid];\n    vowel = getVowel(consonant);\n    if (vowel === '') {\n      return '';\n    }\n    if (vowel === consonant) {\n      start = mid + 1;\n    } else if (vowel < consonant) {\n      end = mid - 1;\n    } else {\n      return vowel;\n    }\n    mid = (start + end) / 2;\n  }\n  return '';\n};\n\nconst getVowel = (consonant) => {\n  const vowels = ['a', 'e', 'i', 'o', 'u', 'y'];\n  return vowels.find((v) => {\n    return v === consonant;\n  });\n};\n\nmodule.exports = gottenCloserVowel;\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  // We can't do anything for empty list\n  if (lst.length === 0) return false;\n\n  // Find the first open\n  const first = lst[0];\n\n  // If there's no open, return false\n  if (first.length === 1 && first[0] === '(') return false;\n\n  // If there's no close, return false\n  if (first.length === 1 && first[first.length - 1] === ')') return false;\n\n  // If there's no close, return false\n  if (first.length === 2 && first[0] === '(' && first[first.length - 1] === ')') return false;\n\n  // We have a good first open, and good first close\n  return true;\n};\n\nmodule.exports = matchParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maximums", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maximums k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maximums = (arr, k) => {\n  if (k === 0) {\n    return [];\n  }\n  const firstK = Math.floor(k / 2);\n  const left = maximums(arr, firstK);\n  const right = maximums(arr, k - firstK);\n  return [...left,...right,...arr.slice(0, k - firstK)];\n};\n\nconst main = () => {\n  const arr = [-3, -4, 5];\n  const k = 3;\n  const result = maximums(arr, k);\n  console.log(`maximums(${arr}, ${k}) = ${result}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solutions", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solutions([5, 8, 7, 1]) ==> 12\n  solutions([3, 3, 3, 3, 3]) ==> 9\n  solutions([30, 13, 24, 321]) ==>0\n  */\nconst solutions = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) sum += lst[i];\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    while (i < k) {\n        sum += arr[i];\n        i++;\n    }\n    return sum;\n};\n\nconst addElements = (arr, k) => {\n    let sum = 0;\n    let i = 0;\n    while (i < k) {\n        sum += arr[i];\n        i++;\n    }\n    return sum;\n};\n\nmodule.exports = addElements;<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "gottenOdderCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  gottenOdderCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst gottenOdderCollatz = (n) => {\n  const sorted = []\n  let count = 0\n  while (n > 0) {\n    const next = n % 2? n * 3 + 1 : n / 2\n    if (next === 1) {\n      sorted.push(count)\n    }\n    n = next\n    count++\n  }\n  return sorted\n}\n\n/*\n  Given a positive integer n, return a list of all of the primes contained in the list of primes.\n\n  The prime list is defined as:\n    1. primes[i] is a prime number in the range [2, n].\n    2. primes[i] is also contained in the list of primes[0],..., primes[i-1].\n\n  Note:\n    1. primes[0] is always 2.\n    2. returned list sorted in increasing order.\n\n  For example:\n  givenPrimes(15) returns [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  */\nconst givenPrimes = (n) => {\n  let primes = [2]\n  const i = 0\n  while (primes[i] * primes[i] <= n) {\n    let index = i\n    while (primes[index] * primes[index] <= n) {\n      index++\n    }\n    primes.splice(index, 0, primes[i])\n    i = index\n  }\n  return primes\n}\n\n/*\n  Given a positive integer n, return the length of the Collatz sequence starting at n.\n\n  The length of the sequence is defined as:\n    1. the length of the Collatz sequence starting at n.\n    2. the length of the Collatz sequence starting at the next term of the sequence.\n    3. the length of the Collatz sequence starting at the next term of the sequence,\n       until the next term of the sequence.\n\n  Note:\n    1. The length of the sequence starting at n is 1.\n    2. The length of the sequence starting at the next term of the sequence is 1.\n    3. The length of the sequence starting at the next term of the sequence, until the next term of the sequence, is 1.\n\n  For example:\n  getLength(16) returns 4, because the length of the Collatz sequence starting at 16 is 4,\n  and the length of the sequence starting at the next term of the sequence is 1.\n  */\nconst getLength = (n) => {\n  let count = 0\n  let next = n\n  while (next!== 1) {\n    next = next % 2? next * 3 + 1 : next / 2\n    count++\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the sum of the squares of all the odd numbers in the list of primes.\n\n  The sum of the squares of all the odd numbers in the list of primes is defined as:\n    1. the sum of the squares of all the odd numbers in the list of primes.\n    2. the sum of the squares of all the odd numbers in the list of primes,\n       until the next term of the sequence.\n\n  Note:\n    1. The sum of the squares of all the odd numbers in the list of primes is always 1.\n    2. The sum of the squares of all the odd numbers in the list of primes,\n       until the next term of the sequence, is always 1.\n\n  For example:\n  getSumOfSquares(16) returns 17, because the sum of the squares of all the odd numbers in the list of primes is 17,\n  and the sum of the squares of all the odd numbers in the list of primes,\n  until the next term of the sequence is 1.\n  */\nconst getSumOfSquares = (n) => {\n  let count = 0\n  let sumOfSquares = 0\n  const start = 0\n  const end = n\n  while (start < end) {\n    const current = n % 2? n * 3 + 1 : n / 2\n    count++\n    sumOfSquares += current % 2? current : current * current\n    n = current\n  }\n  return sumOfSquares\n}\n\nexport {\n  gottenOdderCollatz,\n  givenPrimes,\n  getLength,\n  getSumOfSquares\n}\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDates", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDates('03-11-2000') => true\n\n  validDates('15-01-2012') => false\n\n  validDates('04-0-2040') => false\n\n  validDates('06-04-2020') => true\n\n  validDates('06/04/2020') => false\n  */\nconst validDates = (date) => {\n    if (!date) {\n        return false;\n    }\n\n    const splitDate = date.split(\"-\");\n    const months = [1, 3, 5, 7, 8, 10, 12];\n    const days = [31, 30, 29];\n\n    if (splitDate.length === 3) {\n        const year = parseInt(splitDate[2], 10);\n        const month = months.indexOf(parseInt(splitDate[1], 10));\n        const day = parseInt(splitDate[0], 10);\n\n        if (year <= 2099 && month >= 1 && month <= 12 && day >= 1 && day <= days[month]) {\n            return true;\n        }\n    }\n\n    return false;\n};\n\nmodule.exports = validDates;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWord", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWord(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWord(\"abcdef\") == 3\n  */\nconst splitWord = (txt) => {\n  const words = txt.split(/\\s+/g);\n  return words.filter(w => w.length > 0);\n};\n\nexport default splitWord;\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSort", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSort([5]) ➞ true\n  isSort([1, 2, 3, 4, 5]) ➞ true\n  isSort([1, 3, 2, 4, 5]) ➞ false\n  isSort([1, 2, 3, 4, 5, 6]) ➞ true\n  isSort([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSort([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSort([1, 2, 2, 3, 3, 4]) ➞ true\n  isSort([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSort = (lst) => {\n  return lst.every(i => {\n    const i = parseInt(i, 10);\n    return lst.indexOf(i) === lst.lastIndexOf(i);\n  });\n};\n\nexport default isSort;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] >= interval2[1]) {\n    return 'NO';\n  }\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [s1, e1] = interval1;\n  const [s2, e2] = interval2;\n  const [m, n] = [Math.max(start1, start2), Math.min(end1, end2)];\n  const [t1, t2] = [Math.max(s1, s2), Math.min(e1, e2)];\n  const [p1, p2] = [Math.ceil(t1 / m), Math.floor(t2 / n)];\n  if (p1 * m === t1 && p2 * n === t2) {\n    return 'YES';\n  }\n  return 'NO';\n};\n\n//console.log(intersection((1, 2), (2, 3)));\n//console.log(intersection((-1, 1), (0, 4)));\n//console.log(intersection((-3, -1), (-5, 5)));\n\nconsole.log(intersection((-1, 1), (0, 4)));\nconsole.log(intersection((-3, -1), (-5, 5)));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodsSign", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodsSign([1, 2, 2, -4]) == -9\n  >>> prodsSign([0, 1]) == 0\n  >>> prodsSign([]) == null\n  */\nconst prodsSign = (arr) => {\n  if (!arr.length) return null;\n\n  const prods = arr.reduce((acc, curr) => {\n    const abs = Math.abs(curr);\n    if (curr > 0) acc += abs;\n    else if (curr < 0) acc -= abs;\n    return acc;\n  }, 0);\n\n  if (prods === 0) return 0;\n\n  const mags = arr.map(curr => Math.abs(curr));\n  return prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods * prods *"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPaths", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPaths = (grid, k) => {\n  const n = grid.length;\n  const m = grid[0].length;\n  const rows = [];\n  const cols = [];\n  const minPaths = [];\n  const visited = [];\n\n  for (let r = 0; r < n; r++) {\n    const row = grid[r];\n    rows.push(row);\n  }\n  for (let c = 0; c < m; c++) {\n    const col = grid[0][c];\n    cols.push(col);\n  }\n\n  for (let r = 0; r < n; r++) {\n    for (let c = 0; c < m; c++) {\n      const row = rows[r];\n      const col = cols[c];\n      const value = row[c];\n\n      if (r!== 0 && c!== 0) {\n        visited.push(value);\n      }\n\n      if (r!== 0) {\n        rows[r - 1][c] = value;\n      }\n      if (c!== 0) {\n        cols[c - 1][r] = value;\n      }\n\n      if (r!== 0 && c!== 0) {\n        if (value < visited[0]) {\n          visited[0] = value;\n        }\n        if (value > visited[1]) {\n          visited[1] = value;\n        }\n      }\n    }\n  }\n\n  let path = [];\n  for (let i = 0; i < visited.length; i++) {\n    path.push(visited[i]);\n  }\n\n  path.sort((a, b) => {\n    return a - b;\n  });\n\n  for (let i = 0; i < k; i++) {\n    if (path[i] === visited[0]) {\n      minPaths.push(path[i]);\n    }\n  }\n\n  return minPaths;\n};\n\nexport default minPaths;<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const arr = [1]\n  let i = 1\n  while (i <= n) {\n    arr.push(1)\n    i++\n  }\n  for (let i = 2; i <= n; i++) {\n    arr.push(arr[i - 2] + arr[i - 1] + arr[i])\n  }\n  return arr\n}\n\n// const tri = (n) => {\n//   const arr = []\n//   let i = 1\n//   while (i <= n) {\n//     arr.push(1)\n//     i++\n//   }\n//   for (let i = 2; i <= n; i++) {\n//     arr.push(arr[i - 1] + arr[i])\n//   }\n//   return arr\n// }\n\nconst tri = (n) => {\n  const arr = []\n  let i = 1\n  let j = 1\n  let t = 0\n  while (i <= n) {\n    arr.push(1)\n    i++\n  }\n  while (j <= n) {\n    if (i % 2 === 0) {\n      arr.push(arr[j - 1] + arr[j] + t)\n      j++\n    } else {\n      arr.push(t)\n      t = arr[j - 1] + arr[j]\n      j++\n    }\n    i++\n  }\n  return arr\n}\n\nconsole.log(tri(5))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digit", "gc": "/*Given a positive integer n, return the product of the odd digit.\n  Return 0 if all digit are even.\n  For example:\n  digit(1)  == 1\n  digit(4)  == 0\n  digit(235) == 15\n  */\nconst digit = (n) => {\n  if(n == 0) return 1\n  if(n%2 == 0) return 0\n  return n*digit(n-1)\n}\n\nconst product = (n) => {\n  return n*digit(n)\n}\n\nconst count = (n) => {\n  return Math.floor(Math.log(n)/Math.log(10))\n}\n\nconst max = (a, b) => {\n  return Math.max(a, b)\n}\n\nconst min = (a, b) => {\n  return Math.min(a, b)\n}\n\nconst round = (n, d) => {\n  return Math.round(n/d)*d\n}\n\nconst floor = (n, d) => {\n  return Math.floor(n/d)*d\n}\n\nconst ceil = (n, d) => {\n  return Math.ceil(n/d)*d\n}\n\nconst isPrime = (n) => {\n  for(var i = 2; i*i <= n; i++) {\n    if(n%i == 0) return false\n  }\n  return true\n}\n\nconst isPalindrome = (n) => {\n  return n == Math.floor(n*1/10)\n}\n\nconst isAnagram = (a, b) => {\n  return a.split('').sort().join('') == b.split('').sort().join('')\n}\n\nconst isPermutation = (a, b) => {\n  return a.split('').sort().join('') == b.split('').sort().join('')\n}\n\nconst isDivisible = (n, divisor) => {\n  return n%divisor === 0\n}\n\nconst isProbablePrime = (n) => {\n  return isPrime(n) || isDivisible(n, 3) || isDivisible(n, 5) || isDivisible(n, 7) || isDivisible(n, 11) || isDivisible(n, 13) || isDivisible(n, 17) || isDivisible(n, 19) || isDivisible(n, 23) || isDivisible(n, 29) || isDivisible(n, 31) || isDivisible(n, 37) || isDivisible(n, 41) || isDivisible(n, 43) || isDivisible(n, 47) || isDivisible(n, 53) || isDivisible(n, 59) || isDivisible(n, 61) || isDivisible(n, 67) || isDivisible(n, 71) || isDivisible(n, 73) || isDivisible(n, 79) || isDivisible(n, 83) || isDivisible(n, 89) || isDivisible(n, 97) || isDivisible(n, 101) || isDivisible(n, 103) || isDivisible(n, 107) || isDivisible(n, 109) || isDivisible(n, 113) || isDivisible(n, 127) || isDivisible(n, 131) || isDivisible(n, 137) || isDivisible(n, 139) || isDivisible(n, 149) || isDivisible(n, 151) || isDivisible(n, 157) || isDivisible(n, 163) || isDivisible(n, 167) || isDivisible(n, 173) || isDivisible(n, 179) || isDivisible(n, 181) || isDivisible(n, 191) || isDivisible(n, 193) || isDivisible(n, 197) || isDivisible(n, 199) || isDivisible(n, 211) || isDivisible(n, 223) || isDivisible(n, 227) || isDivisible(n, 229) || isDivisible(n, 233) || isDivisible(n, 239) || isDivisible(n, 241) || isDivisible(n, 251)\n}\n\nconst isPandigital = (n) => {\n  let t = 0\n  while(t < n) {\n    t += Math.pow(10, count(n))\n  }\n  return isPrime(n)\n}\n\nconst isPalindrome = (n) => {\n  return n == Math.floor(n/10)*10 || n == Math.floor(n/100)*100 || n == Math.floor(n/1000)*1000 || n == Math.floor(n/10000)*10000 || n == Math.floor(n/100000)*100000 || n == Math.floor(n/1000000)*1000000 || n == Math.floor(n/10000000)*10000000 || n == Math.floor(n/100000000)*100000000\n}\n\nconst isAnagram = (a, b) => {\n  return a.split('').sort().join('') == b.split('').sort().join('')\n}\n\nconst isProbablePrime = (n) => {\n  return isPrime(n) || isDivisible(n, 3) || isDivisible(n, 5) || isDivisible(n, 7) || isDivisible(n, 11) || isDivisible(n, 13) || isDivisible(n, 17) || isDivisible(n, 19) || isDivisible(n, 23) || isDivisible(n, 29) || isDivisible(n, 31) || isDivisible(n, 37) || isDivisible(n, 41) || isDivisible(n, 43) || isDivisible(n, 47) || isDivisible(n, 53) || isDivisible(n, 59) || isDivisible(n, 61) || isDivisible(n, 67) || isDivisible(n, 71) || isDivisible(n, 73) || isDivisible(n, 79) || isDivisible(n, 83) || isDivisible(n, 89) || isDivisible(n, 97) || isDivisible(n, 101) || isDivisible(n, 103) || isDivisible(n, 107) || isDivisible(n, 109) || isDivisible(n, 113) || isDivisible(n, 127) || isDivisible(n, 131) || isDivisible(n, 137) || isDivisible(n, 139) || isDivisible(n, 149) || isDivisible(n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNest", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNest('[[]]') ➞ true\n  isNest('[]]]]]]][[[[[]') ➞ false\n  isNest('[][]') ➞ false\n  isNest('[]') ➞ false\n  isNest('[[][]]') ➞ true\n  isNest('[[]][[') ➞ true\n  */\nconst isNest = (string) => {\n  const brackets = string.split('')\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '[') {\n      if (i + 1 < brackets.length && brackets[i + 1] === '[') {\n        i++\n      } else if (i + 1 < brackets.length && brackets[i + 1] === ']') {\n        return false\n      }\n    }\n    if (brackets[i] === ']') {\n      if (i + 1 < brackets.length && brackets[i + 1] === '[') {\n        return false\n      }\n    }\n  }\n  return true\n}\n\nconsole.log(isNest('[]'))\nconsole.log(isNest('[[]]'))\nconsole.log(isNest('[]]]]][[[[[]'))\nconsole.log(isNest('[][]'))\nconsole.log(isNest('[][]]'))\nconsole.log(isNest('[]]'))\nconsole.log(isNest('[[[]]'))\nconsole.log(isNest('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumsSquares = (lst) => {\n  return lst.map(function(num) {\n    return Math.round(num*num)\n  }).reduce(function(sum, num) {\n    return sum + num\n  }, 0)\n}\n\nconst main = (lst) => {\n  return sumsSquares(lst)\n}\n\n// console.log(main([1,2,3]))\n// // => 14\n// console.log(main([1,4,9]))\n// // => 98\n// console.log(main([1,3,5,7]))\n// // => 84\n// console.log(main([1.4,4.2,0]))\n// // => 29\n// console.log(main([-2.4,1,1]))\n// // => 6\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  For lst = [-1.4,1.4,1] the output should be 17\n  For lst = [-2.4,1,1] the output should be 6\n  For lst = [-1.4,1.4,1] the output should be 17\n  */\nconst sumsSquares = (lst) => {\n  return lst.map(function(num) {\n    return Math.round(num*num)\n  }).reduce(function(sum, num) {\n    return sum + num\n  }, 0)\n}\n\nconst main = (lst) => {\n  return sumsSquares(lst)\n}\n\n// console.log(main([1,2,3]))\n// // => 14\n// console.log(main([1,4,9]))\n// // => 98\n// console.log(main([1,3,5,7]))\n// // => 84\n// console.log(main([1.4,4.2,0]))\n// // => 29\n// console.log(main([-2.4,1,1]))\n// // => 6\n// console.log(main([-1.4,1.4,1]))\n// // => 17\n// console.log(main([-2.4,1,1]))\n// // => 6\n// console.log(main([-1.4,1.4,1]))\n// // => 17\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  For lst = [-1.4,1.4,1] the output should be 17\n  For lst = [-2.4,1,1] the output should be 6\n  For lst = [-1.4,1.4,1] the output should be 17\n  */\nconst sumsSquares = (lst) => {\n  return lst.map(function(num) {\n    return Math.round(num*num)\n  }).reduce(function(sum, num) {\n    return sum + num\n  }, 0)\n}\n\nconst main = (lst) => {\n  return sumsSquares(lst)\n}\n\n// console.log(main([1,2,3]))\n// // => 14\n// console.log(main([1,4,9]))\n// // => 98\n// console.log(main([1,3,5,7]))\n// // => 84\n// console.log(main([1.4,4.2,0]))\n// // => 29\n// console.log(main([-2.4,1,1]))\n// // => 6\n// console.log(main([-1.4,1.4,1]))\n// // => 17\n// console.log(main([-2.4,1,1]))\n// // => 6\n// console.log(main([-1.4,1.4,1]))\n// // => 17\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  For lst = [-1.4,1.4,1] the output should be 17\n  For lst = [-2.4,1,1] the output should be 6\n  For lst = [-1.4,1.4,1] the output should be 17\n  */\nconst"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharsIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharsIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharsIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharsIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharsIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharsIsALetter = (txt) => {\n  const len = txt.length\n  if (len > 0) {\n    const lastChar = txt[len - 1]\n    return (\n      isALetter(lastChar) &&\n     !isALetter(lastChar, true)\n    )\n  } else {\n    return false\n  }\n}\n\n/* Create a function that returns true if the first character\n  of a given string is a letter, and false otherwise.\n  Examples:\n  isAlpha(\"apple\") ➞ true\n  isAlpha(\"apple pie\") ➞ false\n  isAlpha(\"apple pi e \") ➞ true\n  isAlpha(\"\") ➞ false\n  */\nconst isAlpha = (txt) => {\n  const len = txt.length\n  if (len > 0) {\n    const firstChar = txt[0]\n    return (\n      isALetter(firstChar)\n    )\n  } else {\n    return false\n  }\n}\n\n/* Create a function that returns true if the first two characters\n  of a given string are alphabetical characters, and false otherwise.\n  Examples:\n  isAlphaNumeric(\"apple\") ➞ true\n  isAlphaNumeric(\"apple pie\") ➞ false\n  isAlphaNumeric(\"apple pi e \") ➞ true\n  isAlphaNumeric(\"\") ➞ false\n  */\nconst isAlphaNumeric = (txt) => {\n  const len = txt.length\n  if (len > 0) {\n    const firstChar = txt[0]\n    const secondChar = txt[1]\n    return (\n      isALetter(firstChar) &&\n      isALetter(secondChar)\n    )\n  } else {\n    return false\n  }\n}\n\n/* Create a function that returns true if the last two characters\n  of a given string are alphabetical characters, and false otherwise.\n  Examples:\n  isAlphaNumeric(\"apple\") ➞ false\n  isAlphaNumeric(\"apple pie\") ➞ true\n  isAlphaNumeric(\"apple pi e \") ➞ false\n  isAlphaNumeric(\"\") ➞ false\n  */\nconst isAlphaNumericLastTwo = (txt) => {\n  const len = txt.length\n  if (len > 0) {\n    const lastChar = txt[len - 1]\n    const secondToLastChar = txt[len - 2]\n    return (\n      isALetter(lastChar) &&\n      isALetter(secondToLastChar)\n    )\n  } else {\n    return false\n  }\n}\n\n/* Create a function that returns true if the first three characters\n  of a given string are alphabetical characters, and false otherwise.\n  Examples:\n  isAlphaNumeric(\"apple\") ➞ false\n  isAlphaNumeric(\"apple pie\") ➞ false\n  isAlphaNumeric(\"apple pi e \") ➞ true\n  isAlphaNumeric(\"\") ➞ false\n  */\nconst isAlphaNumericLastThree = (txt) => {\n  const len = txt.length\n  if (len > 0) {\n    const firstChar = txt[0]\n    const secondToLastChar = txt[len - 2]\n    const lastChar = txt[len - 1]\n    return (\n      isALetter(firstChar) &&\n      isALetter(secondToLastChar) &&\n      isALetter(lastChar)\n    )\n  } else {\n    return false\n  }\n}\n\n/* Create a function that returns true if the first four characters\n  of a given string are alphabetical characters, and false otherwise.\n  Examples:\n  isAlphaNumeric(\"apple\") ➞ false\n  isAlphaNumeric(\"apple pie\") ➞ false\n  isAlphaNumeric(\"apple pi e \") ➞ false\n  isAlphaNumeric(\"\") ➞ false\n  */\nconst isAlphaNumericLastFour = (txt) => {\n  const len = txt.length\n  if (len > 0) {\n    const firstChar = txt[0]\n    const secondToLastChar = txt[len - 2]\n    const lastChar = txt[len - 1]\n    const secondLastToLastChar = txt[len - 3]\n    return (\n      isALetter(firstChar) &&\n      isALetter(secondToLastChar) &&\n      isALetter(lastChar) &&\n      isALetter(secondLastToLastChar)\n    )\n  } else {\n    return false\n  }\n}\n\n/* Create a function that returns true if the first five characters\n  of a given string are alphabetical characters, and false otherwise.\n  Examples:\n  isAlphaNumeric(\"apple\") ➞ false\n  isAlphaNumeric(\"apple pie\") ➞ false\n  isAlphaNumeric(\"apple pi e \") ➞ false\n  isAlphaNumeric(\"\") ➞ false\n  */\nconst isAlphaNumericLastFive = (txt) => {\n  const len = txt.length\n  if (len > 0) {\n    const firstChar = txt[0]\n    const secondToLastChar = txt[len - 2]\n    const lastChar = txt[len - 1]\n    const secondLastToLastChar = txt[len - 3]\n    const thirdLastToLastChar = txt[len - 4]\n    return (\n      isALetter(firstChar) &&\n      isALetter(secondToLastChar) &&\n      isALetter(lastChar) &&\n      isALetter(secondLastToLastChar) &&\n      isALetter(thirdLastToLastChar)\n    )\n  } else {\n    return false\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArranging", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArranging([1,2,4,3,5]) = 3\n  canArranging([1,2,3]) = -1\n  */\nconst canArranging = (arr) => {\n  let max = 0;\n  let start = -1;\n  arr.forEach((item, index) => {\n    if (item >= arr[index + 1] && index > max) {\n      max = index;\n      start = index;\n    }\n  });\n  if (max === -1) {\n    return -1;\n  } else {\n    return start;\n  }\n};\n\nmodule.exports = canArranging;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "largerSmallerIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  largerSmallerIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  largerSmallerIntegers([]) == (null, null)\n  largerSmallerIntegers([0]) == (null, null)\n  */\nconst largerSmallerIntegers = (lst) => {\n  let max = null;\n  let min = null;\n\n  lst.forEach(num => {\n    if (max === null || num > max) {\n      max = num;\n    }\n    if (min === null || num < min) {\n      min = num;\n    }\n  });\n\n  if (min === null || max === null) {\n    return null;\n  } else {\n    return [max, min];\n  }\n};\n\n/*\n  This function returns the sum of a list.\n  The list must be an array.\n  Examples:\n  sum([1, 2, 3, 4]) == 15\n  sum([]) == 0\n  sum([1, 2, 3, 4, 5]) == 16\n  sum([1, 2, 3]) == 6\n  */\nconst sum = (lst) => {\n  let sum = 0;\n\n  lst.forEach(num => {\n    sum += num;\n  });\n\n  return sum;\n};\n\n/*\n  This function returns the product of a list.\n  The list must be an array.\n  Examples:\n  product([1, 2, 3, 4]) == 24\n  product([]) == 1\n  product([1, 2, 3, 4, 5]) == 120\n  product([1, 2, 3]) == 6\n  */\nconst product = (lst) => {\n  let product = 1;\n\n  lst.forEach(num => {\n    product *= num;\n  });\n\n  return product;\n};\n\n/*\n  This function returns the largest of a list.\n  The list must be an array.\n  Examples:\n  max([1, 2, 3, 4]) == 4\n  max([]) == null\n  max([1, 2, 3, 4, 5]) == 5\n  max([1, 2, 3]) == 3\n  */\nconst max = (lst) => {\n  let max = null;\n\n  lst.forEach(num => {\n    if (max === null || num > max) {\n      max = num;\n    }\n  });\n\n  return max;\n};\n\n/*\n  This function returns the smallest of a list.\n  The list must be an array.\n  Examples:\n  min([1, 2, 3, 4]) == 1\n  min([]) == null\n  min([1, 2, 3, 4, 5]) == 1\n  min([1, 2, 3]) == 1\n  */\nconst min = (lst) => {\n  let min = null;\n\n  lst.forEach(num => {\n    if (min === null || num < min) {\n      min = num;\n    }\n  });\n\n  return min;\n};\n\n/*\n  This function returns the mean of a list.\n  The list must be an array.\n  Examples:\n  mean([1, 2, 3, 4]) == 2.5\n  mean([]) == null\n  mean([1, 2, 3, 4, 5]) == 3.0\n  mean([1, 2, 3]) == 2.0\n  */\nconst mean = (lst) => {\n  let sum = 0;\n  let count = 0;\n\n  lst.forEach(num => {\n    sum += num;\n    count += 1;\n  });\n\n  return sum / count;\n};\n\n/*\n  This function returns the median of a list.\n  The list must be an array.\n  Examples:\n  median([1, 2, 3, 4]) == 2.5\n  median([]) == null\n  median([1, 2, 3, 4, 5]) == 3.0\n  median([1, 2, 3]) == 2.0\n  */\nconst median = (lst) => {\n  let sortedList = sortedArray(lst);\n  let middle = Math.floor(sortedList.length / 2);\n\n  if (sortedList.length % 2 === 0) {\n    return (sortedList[middle - 1] + sortedList[middle]) / 2;\n  } else {\n    return sortedList[middle];\n  }\n};\n\n/*\n  This function returns the mode of a list.\n  The list must be an array.\n  Examples:\n  mode([1, 2, 3, 4]) == 3\n  mode([]) == null\n  mode([1, 2, 3, 4, 5]) == 4\n  mode([1, 2, 3]) == 2\n  */\nconst mode = (lst) => {\n  let modes = [];\n\n  lst.forEach(num => {\n    let mode = modes.find(mode => num === mode);\n\n    if (mode === null) {\n      modes.push(num);\n    }\n  });\n\n  if (modes.length === 0) {\n    return null;\n  } else {\n    return modes[0];\n  }\n};\n\n/*\n  This function returns the sum of the squares of a list.\n  The list must be an array.\n  Examples:\n  squareSum([1, 2, 3, 4]) == 25\n  squareSum([]) == 0\n  squareSum([1, 2, 3, 4, 5]) == 41\n  squareSum([1, 2, 3]) == 9\n  */\nconst squareSum = (lst) => {\n  let sum = 0;\n\n  lst.forEach(num => {\n    sum += num * num;\n  });\n\n  return sum;\n};\n\n/*\n  This function returns the sum of the squares of the differences of a list.\n  The list must be an array.\n  Examples:\n  diffSum([1, 2, 3, 4]) == 4\n  diffSum([]) == 0\n  diffSum([1, 2, 3, 4, 5]) == 11\n  diffSum([1, 2, 3]) == 9\n  */\nconst diffSum = (lst) => {\n  let sum = 0;\n\n  lst.forEach(num => {\n    sum += Math.pow"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comparingOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comparingOne(1, 2.5) ➞ 2.5\n  comparingOne(1, \"2,3\") ➞ \"2,3\"\n  comparingOne(\"5,1\", \"6\") ➞ \"6\"\n  comparingOne(\"1\", 1) ➞ null\n  */\nconst comparingOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b\n  } else if (a === b) {\n    return null\n  }\n}\n\nconsole.log(comparingOne(1, 2.5))\nconsole.log(comparingOne(1, \"2,3\"))\nconsole.log(comparingOne(\"5,1\", \"6\"))\nconsole.log(comparingOne(\"1\", 1))\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSummingEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSummingEven(4) == false\n  isEqualToSummingEven(6) == false\n  isEqualToSummingEven(8) == true\n  */\nconst isEqualToSummingEven = (n) => {\n  if (n % 2 === 0) {\n    if (n === 2) {\n      return true\n    }\n    if (n === 4) {\n      return true\n    }\n    if (n === 6) {\n      return true\n    }\n    return false\n  }\n  return false\n}\n\nexport {isEqualToSummingEven}\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1\n  while (n > 1) {\n    factorial *= n\n    n -= 1\n  }\n  return factorial\n}\n\nconsole.log(specialFactorial(4))\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixesSpace", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixesSpace(\"Example\") == \"Example\"\n  fixesSpace(\"Example 1\") == \"Example_1\"\n  fixesSpace(\" Example 2\") == \"_Example_2\"\n  fixesSpace(\" Example   3\") == \"_Example-3\"\n  */\nconst fixesSpace = (text) => {\n    let words = text.split(' ')\n    let newWords = []\n    for(let word of words){\n        let lastSpace = word.lastIndexOf(' ')\n        let firstSpace = word.indexOf(' ')\n        if(lastSpace > -1 && firstSpace > -1 && lastSpace > firstSpace){\n            let spaces = word.substring(firstSpace, lastSpace)\n            let replacement = word.substring(0, firstSpace) + '_' + word.substring(lastSpace+1)\n            newWords.push(replacement)\n        }\n        else if(lastSpace > -1){\n            let spaces = word.substring(lastSpace)\n            let replacement = word.substring(0, lastSpace) + '_' + spaces\n            newWords.push(replacement)\n        }\n        else{\n            newWords.push(word)\n        }\n    }\n    return newWords.join(' ')\n}\n\n/*\n  Given a string text, replace all - in the string with spaces,\n  and if a string has more than 2 consecutive -,\n  then replace all consecutive - with -\n  \n  fixesHyphen(\"Example\") == \"Example\"\n  fixesHyphen(\"Example 1\") == \"Example_1\"\n  fixesHyphen(\" Example 2\") == \"Example 2\"\n  fixesHyphen(\" Example-3\") == \"Example-3\"\n  */\nconst fixesHyphen = (text) => {\n    let words = text.split('-')\n    let newWords = []\n    for(let word of words){\n        let lastHyphen = word.lastIndexOf('-')\n        let firstHyphen = word.indexOf('-')\n        if(lastHyphen > -1 && firstHyphen > -1 && lastHyphen > firstHyphen){\n            let hyphens = word.substring(firstHyphen, lastHyphen)\n            let replacement = word.substring(0, firstHyphen) +'' + word.substring(lastHyphen+1)\n            newWords.push(replacement)\n        }\n        else if(lastHyphen > -1){\n            let hyphens = word.substring(lastHyphen)\n            let replacement = word.substring(0, lastHyphen) +'' + hyphens\n            newWords.push(replacement)\n        }\n        else{\n            newWords.push(word)\n        }\n    }\n    return newWords.join(' ')\n}\n\n/*\n  Given a string text, remove all spaces from the string,\n  and if a string has more than 2 consecutive spaces,\n  then remove all consecutive spaces.\n  \n  fixesNoSpace(\"Example\") == \"Example\"\n  fixesNoSpace(\"Example 1\") == \"Example_1\"\n  fixesNoSpace(\" Example 2\") == \"Example_2\"\n  fixesNoSpace(\" Example   3\") == \"Example_3\"\n  */\nconst fixesNoSpace = (text) => {\n    let words = text.split(' ')\n    let newWords = []\n    for(let word of words){\n        let lastSpace = word.lastIndexOf(' ')\n        let firstSpace = word.indexOf(' ')\n        if(lastSpace > -1 && firstSpace > -1 && lastSpace > firstSpace){\n            let spaces = word.substring(firstSpace, lastSpace)\n            newWords.push(word.substring(0, firstSpace) + word.substring(lastSpace+1))\n        }\n        else{\n            newWords.push(word)\n        }\n    }\n    return newWords.join(' ')\n}\n\n/*\n  Given a string text, remove all - from the string,\n  and if a string has more than 2 consecutive -,\n  then remove all consecutive -.\n  \n  fixesNoHyphen(\"Example\") == \"Example\"\n  fixesNoHyphen(\"Example 1\") == \"Example_1\"\n  fixesNoHyphen(\" Example 2\") == \"Example_2\"\n  fixesNoHyphen(\" Example-3\") == \"Example_3\"\n  */\nconst fixesNoHyphen = (text) => {\n    let words = text.split('-')\n    let newWords = []\n    for(let word of words){\n        let lastHyphen = word.lastIndexOf('-')\n        let firstHyphen = word.indexOf('-')\n        if(lastHyphen > -1 && firstHyphen > -1 && lastHyphen > firstHyphen){\n            let hyphens = word.substring(firstHyphen, lastHyphen)\n            newWords.push(word.substring(0, firstHyphen) + word.substring(lastHyphen+1))\n        }\n        else{\n            newWords.push(word)\n        }\n    }\n    return newWords.join(' ')\n}\n\n/*\n  Given a string text, remove all spaces from the string,\n  and if a string has more than 2 consecutive spaces,\n  then remove all consecutive spaces.\n  \n  fixesNoSpace(\"Example\") == \"Example\"\n  fixesNoSpace(\"Example 1\") == \"Example_1\"\n  fixesNoSpace(\" Example 2\") == \"Example_2\"\n  fixesNoSpace(\" Example   3\") == \"Example_3\"\n  */\nconst fixesNoSpaceNoHyphen = (text) => {\n    let words = text.split(' ')\n    let newWords = []\n    for(let word of words){\n        let lastSpace = word.lastIndexOf(' ')\n        let firstSpace = word.indexOf(' ')\n        if(lastSpace > -1 && firstSpace > -1 && lastSpace > firstSpace){\n            let spaces = word.substring(firstSpace, lastSpace)\n            newWords.push(word.substring(0, firstSpace) + word.substring(lastSpace+1))\n        }\n        else{\n            newWords.push(word)\n        }\n    }\n    return newWords.join(' ')\n}\n\n/*\n  Given a string text, remove all - and - from the string,\n  and if a string has more than 2 consecutive - and -"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filesNamesCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filesNamesCheck(\"example.txt\") # => 'Yes'\n  filesNamesCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filesNamesCheck = (file_name) => {\n    let check = file_name.split(\".\");\n    if (check.length!= 2) {\n        return 'No';\n    }\n    let file_name_check = check[0];\n    let extension = check[1];\n    if (file_name_check.length > 3) {\n        return 'No';\n    }\n    if (file_name_check.length < 1) {\n        return 'No';\n    }\n    if (!(file_name_check.match(/^[a-zA-Z]+$/)) &&!(file_name_check.match(/^[a-zA-Z]+\\./))) {\n        return 'No';\n    }\n    if (!(extension === 'txt' || extension === 'exe' || extension === 'dll')) {\n        return 'No';\n    }\n    return 'Yes';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumsSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquares = (lst) => {\n  var result = 0;\n  lst.forEach((num) => {\n    if ((num % 3) === 0) {\n      result += num * num;\n    }\n    if ((num % 4) === 0) {\n      result += num * num * num;\n    }\n  });\n  return result;\n};\n\n/*\"\n  This function will take a list of numbers. For all entries in the list, the function shall square the number if its index is a \n  multiple of 3 and will cube the number if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsCubes = (lst) => {\n  var result = 0;\n  lst.forEach((num) => {\n    if ((num % 3) === 0) {\n      result += num * num * num;\n    }\n    if ((num % 4) === 0) {\n      result += num * num * num * num;\n    }\n  });\n  return result;\n};\n\n// console.log(sumsSquares([1,2,3]));\n// console.log(sumsCubes([1,2,3]));\n\n/*\"\n  This function will take a list of numbers. For all entries in the list, the function shall square the number if its index is a \n  multiple of 3 and will cube the number if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumsSquaresCubes = (lst) => {\n  var result = 0;\n  lst.forEach((num) => {\n    if ((num % 3) === 0) {\n      result += num * num * num;\n    }\n    if ((num % 4) === 0) {\n      result += num * num * num * num;\n    }\n  });\n  return result;\n};\n\nconsole.log(sumsSquaresCubes([1,2,3]));<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wordInSentences", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wordInSentences = (sentence) => {\n  let words = sentence.split(\" \")\n  let newSentence = \"\"\n  let currLength = 0\n  let nextLength = 0\n\n  for (let i = 0; i < words.length; i++) {\n    if (currLength === 0) {\n      currLength = words[i].length\n    }\n    nextLength = words[i].length\n\n    if (currLength === nextLength) {\n      newSentence += words[i]\n      currLength = 0\n    } else {\n      newSentence += words[i].substring(0, nextLength)\n      currLength = 0\n    }\n  }\n\n  return newSentence\n}\n\nexport default wordInSentences\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simplify", "gc": "/*Your task is to implement a function that will simplify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simplify(\"1/5\", \"5/1\") = true\n  simplify(\"1/6\", \"2/1\") = false\n  simplify(\"7/10\", \"10/2\") = false\n  */\nconst simplify = (x, n) => {\n  let x_split = x.split('/')\n  let x_len = x_split.length\n  let x_num = parseInt(x_split[0])\n  let x_den = parseInt(x_split[1])\n\n  let n_split = n.split('/')\n  let n_len = n_split.length\n  let n_num = parseInt(n_split[0])\n  let n_den = parseInt(n_split[1])\n\n  if (x_len!= 2 || n_len!= 2) {\n    return false\n  }\n\n  if (n_num!= 1) {\n    return false\n  }\n\n  if (x_num!= n_den) {\n    return false\n  }\n\n  if (n_num < 0) {\n    return false\n  }\n\n  return true\n}\n\nconsole.log(simplify(\"1/5\", \"5/1\"))\nconsole.log(simplify(\"1/6\", \"2/1\"))\nconsole.log(simplify(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "orderByPoint", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> orderByPoint([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> orderByPoint([]) == []\n  */\nconst orderByPoint = (nums) => {\n  const sorted = nums.sort((a, b) => a - b);\n  const map = {};\n  sorted.forEach(num => map[num] = num);\n  const sortedList = [];\n  Object.keys(map).forEach(n => sortedList.push(map[n]));\n  return sortedList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && nums[i] % 2 === 1 && nums[i] % 10 === 1) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); //1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); //2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "gottenMaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst gottenMaxTriples = (n) => {\n    const numOfPairs = (n * (n - 1) / 2);\n    const pairs = Array.from({ length: numOfPairs }).map((_, index) => [index, index + 1]);\n    const pairsLength = pairs.length;\n    const triples = [];\n    for (let i = 0; i < pairsLength; i++) {\n        const a = pairs[i][0];\n        const b = pairs[i][1];\n        const c = pairs[i][2];\n        if (a + b + c === n && a + b + c % 3 === 0) {\n            triples.push([a, b, c]);\n        }\n    }\n    return triples.length;\n};\n\nmodule.exports = gottenMaxTriples;<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const result = [];\n  const isPlanet1 = planet1.toLowerCase() === planet1.toUpperCase();\n  const isPlanet2 = planet2.toLowerCase() === planet2.toUpperCase();\n  if (!isPlanet1 ||!isPlanet2) {\n    return [];\n  }\n  const a = planet1.charCodeAt(0);\n  const b = planet2.charCodeAt(0);\n  let count = 0;\n  while (count < 8) {\n    if (a < b && (count === 0 || count === 3 || count === 6 || count === 7)) {\n      result.push(planet1);\n      ++count;\n    }\n    if (a > b && (count === 1 || count === 4 || count === 5 || count === 8)) {\n      result.push(planet2);\n      ++count;\n    }\n    a = a + 1;\n    b = b + 1;\n  }\n  return result;\n};\n\nbf(\"Jupiter\", \"Neptune\") ===> (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") ===> (\"Venus\")\nbf(\"Mercury\", \"Uranus\") ===> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\") ===> (\"Venus\")\nbf(\"Jupiter\", \"Mercury\") ===> (\"Venus\")\nbf(\"Mercury\", \"Mercury\") ===> (\"Mercury\")\nbf(\"Mercury\", \"Mercury\") ===> (\"Mercury\")\nbf(\"Mercury\", \"Mercury\") ===> (\"Mercury\")\nbf(\"Mercury\", \"Mercury\") ===> (\"Mercury\")\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortListsSums", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortListsSums = (lst) => {\n  const lst = Array.from(lst);\n  const lstSums = lst.reduce((a, b) => a + b, 0);\n  const lstLengths = lst.map(s => s.length);\n  const sortedLst = lst.sort((a, b) => lstLengths[a] - lstLengths[b]);\n  return sortedLst.map(s => s.slice(0, -1));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nxOrY(7, 34, 12);\nxOrY(15, 8, 5);\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doubleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doubleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doubleTheDifference([-1, -2, 0]) == 0\n  doubleTheDifference([9, -2]) == 81\n  doubleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doubleTheDifference = (lst) => {\n  if (lst.length === 0) {\n    return 0;\n  }\n\n  return lst.reduce((acc, curr) => {\n    if (curr < 0 ||!isInteger(curr)) {\n      return acc;\n    }\n\n    return acc + (curr * curr);\n  }, 0);\n};\n\nconst doubleTheDifference.displayName = 'doubleTheDifference';\n\nexport default doubleTheDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let wrong = 0;\n  const score = game.map(x => x[1]);\n  const guess = guess.map(x => x[1]);\n\n  for (let i = 0; i < score.length; i++) {\n    if (score[i]!= guess[i]) {\n      wrong++;\n    }\n  }\n\n  return wrong;\n};\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const cap = class_name.split(\".\").map((x) => x.charAt(0).toUpperCase()).join(\"\")\n  const strength = extensions.reduce((s1, s2) => {\n    if (s1 === -1) {\n      return s2\n    }\n    const s1c = cap.charAt(s1).toUpperCase()\n    const s2c = cap.charAt(s2).toUpperCase()\n    return s1c === s2c? s1 + 1 : -1\n  }, 0)\n  return `${class_name}.${cap.slice(0, strength).join(\"\")}`\n}\n\nmodule.exports = strongestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycpatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycpatternCheck(\"abcd\",\"abd\") => false\n  cycpatternCheck(\"hello\",\"ell\") => true\n  cycpatternCheck(\"whassup\",\"psus\") => false\n  cycpatternCheck(\"abab\",\"baa\") => true\n  cycpatternCheck(\"efef\",\"eeff\") => false\n  cycpatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycpatternCheck = (a, b) => {\n    const b1 = b.split('');\n    const b2 = a.split('');\n    let b1Len = b1.length;\n    let b2Len = b2.length;\n    for (let i = 0; i < b1Len; i++) {\n        if (b1[i] === b2[0]) {\n            if (b1Len === b2Len) return true;\n            else if (b1[i] === b2[b2Len - 1]) return true;\n            else if (b1Len < b2Len) return false;\n            else {\n                if (b1[i] === b2[b1Len - 1]) return true;\n                else if (b1[i] === b2[i]) return false;\n            }\n        }\n        if (b1[i] === b2[b2Len - 1]) {\n            if (b1Len === b2Len) return true;\n            else if (b1[i] === b2[i]) return true;\n            else if (b1[i] === b2[0]) return false;\n        }\n        if (b1[i] === b2[0]) {\n            if (b1Len === b2Len) return true;\n            else if (b1[i] === b2[b2Len - 1]) return true;\n            else if (b1[i] === b2[0]) return false;\n        }\n    }\n    return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOdderCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOdderCount(-12) ==> (1, 1)\n      evenOdderCount(123) ==> (1, 2)\n  */\nconst evenOdderCount = (num) => {\n  let count = 0;\n  let total = 0;\n  let numDigits = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    let digit = parseInt(num.toString().charAt(i));\n    if (digit % 2 === 0) {\n      count++;\n    } else {\n      total++;\n    }\n    numDigits++;\n  }\n  return (count, total);\n};\n\n/*\n Given two arrays that contain integers. \n The arrays will contain the same number of elements. \n Each element of the first array will be larger than the corresponding element in the second array.\n\nReturn an array of tuples that contains the numbers of the even and odd numbers of the array.\n\nExample:\n  evenOdderCount([1, 3, 4, 5, 7, 8]) ==> [[1, 1], [2, 1], [3, 0], [4, 0], [5, 1], [7, 0]]\n  evenOdderCount([2, 5, 7, 8, 9]) ==> [[2, 1], [5, 1], [7, 0], [8, 1], [9, 0]]\n  evenOdderCount([2, 7, 8, 9]) ==> [[2, 1], [7, 1], [8, 0], [9, 1]]\n*/\nconst evenOdderCount = (array1, array2) => {\n  let even = [];\n  let odd = [];\n  for (let i = 0; i < array1.length; i++) {\n    let oddOrEven = evenOdderCount(array1[i], array2[i]);\n    if (oddOrEven[0] % 2 === 0) {\n      even.push(oddOrEven[0]);\n    } else {\n      odd.push(oddOrEven[0]);\n    }\n    if (oddOrEven[1] % 2 === 0) {\n      even.push(oddOrEven[1]);\n    } else {\n      odd.push(oddOrEven[1]);\n    }\n  }\n  return [even, odd];\n};\n\nconst evenOdderCount_Solution = (array1, array2) => {\n  let odd = [];\n  let even = [];\n  for (let i = 0; i < array1.length; i++) {\n    let oddOrEven = evenOdderCount(array1[i], array2[i]);\n    if (oddOrEven[0] % 2 === 0) {\n      even.push(oddOrEven[0]);\n    } else {\n      odd.push(oddOrEven[0]);\n    }\n    if (oddOrEven[1] % 2 === 0) {\n      even.push(oddOrEven[1]);\n    } else {\n      odd.push(oddOrEven[1]);\n    }\n  }\n  return [even, odd];\n};\n\nmodule.exports = evenOdderCount_Solution;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMiniRoman(19) == 'xix'\n  >>> intToMiniRoman(152) == 'clii'\n  >>> intToMiniRoman(426) == 'cdxxvi'\n  */\nconst intToMiniRoman = (number) => {\n  const N = 1000;\n  const M = N;\n  let result = '';\n  let i = 0;\n\n  do {\n    if (number >= N) {\n      number = number - N;\n      result = result + 'v';\n      i++;\n    } else {\n      if (number >= M) {\n        number = number - M;\n        result = result + 'x';\n        i++;\n      } else {\n        if (number >= 9) {\n          number = number - 9;\n          result = result + 'ix';\n          i++;\n        } else {\n          if (number >= 5) {\n            number = number - 5;\n            result = result + 'v';\n            i++;\n          } else {\n            number = number - 1;\n            result = result + 'i';\n            i++;\n          }\n        }\n      }\n    }\n  } while (number > 0);\n\n  return result;\n};\n\n/*\n  Given a string, return the corresponding integer value.\n\n  >>> intFromRoman('V')\n  >>> 19\n  >>> intFromRoman('L')\n  >>> 100\n  >>> intFromRoman('XC')\n  >>> 2000\n  */\nconst intFromRoman = (string) => {\n  let result = 0;\n  let counter = 0;\n\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    if (char === 'i') {\n      counter = counter + 1;\n    } else if (char === 'v') {\n      counter = counter + 5;\n    } else if (char === 'x') {\n      counter = counter + 9;\n    } else if (char === 'c') {\n      counter = counter + 4;\n    } else if (char === 'd') {\n      counter = counter + 1;\n    } else if (char ==='m') {\n      counter = counter + 2;\n    }\n  }\n\n  result = result + (counter * N);\n  return result;\n};\n\n// TEST CODE\n\n/*\n  >>> intFromRoman('V')\n  >>> 19\n  >>> intFromRoman('L')\n  >>> 100\n  >>> intFromRoman('XC')\n  >>> 2000\n  >>> intFromRoman('LCCCCVX')\n  >>> 'LVCCCV'\n  >>> intFromRoman('LLVCCCV')\n  >>> 'LXVCXC'\n  >>> intFromRoman('MDCCCC')\n  >>> 'MCMCD'\n  >>> intFromRoman('CCL')\n  >>> 'CCCX'\n  >>> intFromRoman('CCCXII')\n  >>> 'CCCLII'\n  >>> intFromRoman('MCMLXXIV')\n  >>> 'MMMLXXXV'\n  >>> intFromRoman('MCMLXX')\n  >>> 'MMMXX'\n  >>> intFromRoman('MCCCC')\n  >>> 'MCCCD'\n  >>> intFromRoman('DCCCC')\n  >>> 'DCMCD'\n  >>> intFromRoman('DCCCD')\n  >>> 'DCMCD'\n  >>> intFromRoman('DCCCDCCCXLIX')\n  >>> 'DCMCDCCCLII'\n  >>> intFromRoman('MCCCCD')\n  >>> 'MCCCD'\n  >>> intFromRoman('CCCL')\n  >>> 'CCCX'\n  >>> intFromRoman('CCXC')\n  >>> 'CCCCX'\n  >>> intFromRoman('CCXCCCXLIX')\n  >>> 'CCXLIX'\n  >>> intFromRoman('XCXC')\n  >>> 'XCXX'\n  >>> intFromRoman('XCXCCC')\n  >>> 'XCXCCC'\n  >>> intFromRoman('XCXC')\n  >>> 'XCXC'\n  >>> intFromRoman('IX')\n  >>> 'IX'\n  >>> intFromRoman('L')\n  >>> 'L'\n  >>> intFromRoman('V')\n  >>> 'V'\n  >>> intFromRoman('X')\n  >>> 'X'\n  >>> intFromRoman('C')\n  >>> 'C'\n  >>> intFromRoman('D')\n  >>> 'D'\n  >>> intFromRoman('M')\n  >>> 'M'\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngleTriangles", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngleTriangles(3, 4, 5) == true\n  rightAngleTriangles(1, 2, 3) == false\n  */\nconst rightAngleTriangles = (a, b, c) => {\n    let angleAB = Math.PI - (Math.acos(a / b));\n    let angleBC = Math.PI - (Math.acos(b / c));\n    return angleAB + angleBC <= Math.PI * 0.5;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n  triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 6.0\n  areaOfTriangle(1, 2, 3) == 0.0\n  */\nconst areaOfTriangle = (a, b, c) => {\n    return (a + b + c) / 2 * Math.sqrt(2)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15.0\n  perimeterOfTriangle(1, 2, 3) == 6.0\n  */\nconst perimeterOfTriangle = (a, b, c) => {\n    return (a + b + c)\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15.0\n  perimeterOfTriangle(1, 2, 3) == 6.0\n  */\nconst perimeterOfTriangle2 = (a, b, c) => {\n    return a + b + c\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 6.0\n  areaOfTriangle(1, 2, 3) == 0.0\n  */\nconst areaOfTriangle2 = (a, b, c) => {\n    return (a * b) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the area of the\n triangle.\n  Example:\n  areaOfTriangle(3, 4, 5) == 6.0\n  areaOfTriangle(1, 2, 3) == 0.0\n  */\nconst areaOfTriangle3 = (a, b, c) => {\n    return Math.sqrt(a * b * c) / 2\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15.0\n  perimeterOfTriangle(1, 2, 3) == 6.0\n  */\nconst perimeterOfTriangle3 = (a, b, c) => {\n    return a + b + c\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15.0\n  perimeterOfTriangle(1, 2, 3) == 6.0\n  */\nconst perimeterOfTriangle4 = (a, b, c) => {\n    return a + b + c\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15.0\n  perimeterOfTriangle(1, 2, 3) == 6.0\n  */\nconst perimeterOfTriangle5 = (a, b, c) => {\n    return a + b + c\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15.0\n  perimeterOfTriangle(1, 2, 3) == 6.0\n  */\nconst perimeterOfTriangle6 = (a, b, c) => {\n    return a + b + c\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return the perimeter of the\n triangle.\n  Example:\n  perimeterOfTriangle(3, 4, 5) == 15.0\n  perimeterOfTriangle(1, 2, 3) == 6.0\n  */\nconst perimeterOfTriangle7 = (a, b, c) => {\n    return a + b + c\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "foundMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  foundMax([\"name\", \"of\", \"string\"]) === \"string\"\n  foundMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  foundMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst foundMax = (words) => {\n  const d = new Map();\n  words.forEach((str) => d.set(str.toLowerCase(), str));\n  let max = words[0];\n  for (let i = 1; i < words.length; i++) {\n    let len = words[i].length;\n    let maxLen = max.length;\n    if (len > maxLen) {\n      max = words[i];\n      maxLen = len;\n    }\n    const maxSet = new Set(words[i].split('').map((s) => s.toLowerCase()));\n    const maxSetLen = new Set(max.split('').map((s) => s.toLowerCase()));\n    if (maxSet.size > maxSetLen.size) {\n      max = words[i];\n      maxLen = len;\n    }\n    if (maxSet.size === maxSetLen.size) {\n      for (const s of maxSet) {\n        if (d.get(s)!== max) {\n          max = words[i];\n          maxLen = len;\n        }\n      }\n    }\n  }\n  return max;\n};\n\nconsole.log(foundMax([\"name\", \"of\", \"string\"]));\nconsole.log(foundMax([\"name\", \"enam\", \"game\"]));\nconsole.log(foundMax([\"aaaaaaa\", \"bb\", \"cc\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const result = [];\n  let eaten = number;\n  let left = remaining;\n  let remain = number;\n  while (left >= need) {\n    remain -= need;\n    left -= need;\n    eaten += need;\n  }\n  if (remain > 0) {\n    eaten += remain;\n    left -= remain;\n  }\n  result.push(eaten);\n  result.push(left);\n  return result;\n};\n\nexport {eat};\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let operands = operand.map(operand => parseInt(operand));\n  let operators = operator.map(operator => parseInt(operator));\n  let result = operands[0];\n  for (let i = 1; i < operands.length - 1; i++) {\n    result = operators[i - 1] + result + operands[i + 1];\n  }\n  return result;\n};\n\nconsole.log(doAlgebra(['+', '*', '-'], ['2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  if (s.length === 0) {\n    return ''\n  }\n  const buffer = []\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      buffer.push(s[i].toLowerCase())\n    } else {\n      buffer.push(s[i].toUpperCase())\n    }\n  }\n  return buffer.join('')\n}\n\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (!text) {\n    return null;\n  }\n\n  let md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/**\n  Given an array 'array', return its md5 hash equivalent string.\n  If 'array' is an empty array, return null.\n\n  >>> stringToMd5([1,2,3]) == 'f5c8b7e85ae6d5b1fccb7ec4e8f0ddb4'\n  */\nconst arrayToMd5 = (array) => {\n  if (!array) {\n    return null;\n  }\n\n  let md5 = crypto.createHash('md5');\n  for (let i = 0; i < array.length; i++) {\n    md5.update(String(array[i]));\n  }\n  return md5.digest('hex');\n};\n\n/**\n  Given a string 'text', return the md5 hash of the string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nexport default (text) => {\n  if (!text) {\n    return null;\n  }\n\n  return stringToMd5(text);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let arr = []\n  for (let i = a; i <= b; i += 2) {\n    arr.push(i)\n  }\n  return arr\n}\n\n/*\n  Given an array of positive integers and an integer k, return the kth largest\n  number in the array.\n\n  For example:\n  kthLargest(arr, k) => 6\n  kthLargest(arr, 4) => 8\n  kthLargest(arr, 2) => 10\n  */\nconst kthLargest = (arr, k) => {\n  let largest = arr[0]\n  let index = 0\n  let count = 1\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > largest) {\n      largest = arr[i]\n      index = i\n      count = 1\n    } else if (arr[i] == largest) {\n      count += 1\n      if (count == k) {\n        largest = arr[i]\n        index = i\n      }\n    }\n  }\n  return largest\n}\n\n/*\n  Given an array of strings, return a new array of the same length where\n  each string in the array has been truncated to 10 characters, with an\n  ellipsis appended to the end if the string length is longer than 10.\n\n  For example:\n  truncateStrings([\"this is a long string\", \"another long string\"]) =>\n    [\"this is a long string\", \"another long string\"]\n  truncateStrings([\"this is a long string\", \"another long string\", \"a\", \"long\", \"string\"])\n    => [\"this is a long string\", \"another long string\", \"a long string\"]\n  */\nconst truncateStrings = (arr) => {\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].substring(0, 10))\n  }\n  return newArr\n}\n\n/*\n  Given an array of strings, return a new array of the same length where\n  each string in the array has been truncated to 10 characters, with a\n  period appended to the end if the string length is longer than 10.\n\n  For example:\n  truncateStrings([\"this is a long string\", \"another long string\", \"a\", \"long\", \"string\"])\n    => [\"this is a long string\", \"another long string\", \"a long string\"]\n  truncateStrings([\"this is a long string\", \"another long string\", \"a long string\"])\n    => [\"this is a long string\", \"another long string\", \"a long string\"]\n  */\nconst truncateStringsWithPeriod = (arr) => {\n  let newArr = []\n  for (let i = 0; i < arr.length; i++) {\n    newArr.push(arr[i].substring(0, 10) + '.')\n  }\n  return newArr\n}\n\nmodule.exports = {\n  generateIntegers,\n  kthLargest,\n  truncateStrings,\n  truncateStringsWithPeriod\n}\n<|endoftext|>"}
