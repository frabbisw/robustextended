{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  if (!Array.isArray(numbers)) {\n    throw new Error('numbers is not an array');\n  }\n\n  const len = numbers.length;\n  let i, j;\n  for (i = 0; i < len - 1; i++) {\n    for (j = i + 1; j < len; j++) {\n      if (Math.abs(numbers[i] - numbers[j]) < threshold) {\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nexport default hasFloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  // Initialize an empty array to store the groups\n  let group_array = [];\n  // Iterate over each character in the string\n  for (let i = 0; i < paren_string.length; i++) {\n    // Check if the current character is a left paren\n    if (paren_string[i] === '(') {\n      // If so, push the current group to the group array\n      group_array.push(paren_string.substring(i + 1, paren_string.indexOf(')', i + 1)));\n      // Increment the index of the left paren\n      i = paren_string.indexOf(')', i + 1);\n    } else if (paren_string[i] === ')') {\n      // If so, add the current group to the group array\n      group_array.push(paren_string.substring(i + 1, paren_string.indexOf('(', i + 1)));\n      // Increment the index of the right paren\n      i = paren_string.indexOf('(', i + 1);\n    }\n  }\n  // Return the group array\n  return group_array;\n};\n\n// TEST CODE\ndescribe('separateParens', () => {\n  it('should return the correct group', () => {\n    expect(sepwrateParenGroups('( ) (( )) (( )( ))')).toEqual(['()', '(())', '(()())']);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const rounded = Math.round(number);\n  const decimal = number - rounded;\n  return decimal;\n};\n\n/**\n  Given a decimal number, it can be converted into an integer part and a decimal\n  part.\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  >>> trujcateNumber(3.5, 1)\n  3.5\n  >>> trujcateNumber(3.5, 2)\n  3.5\n  >>> trujcateNumber(3.5, 3)\n  3.5\n  >>> trujcateNumber(3.5, 4)\n  3.5\n  >>> trujcateNumber(3.5, 5)\n  3.5\n  >>> trujcateNumber(3.5, 6)\n  3.5\n  >>> trujcateNumber(3.5, 7)\n  3.5\n  >>> trujcateNumber(3.5, 8)\n  3.5\n  >>> trujcateNumber(3.5, 9)\n  3.5\n  >>> trujcateNumber(3.5, 10)\n  3.5\n  >>> trujcateNumber(3.5, 11)\n  3.5\n  >>> trujcateNumber(3.5, 12)\n  3.5\n  >>> trujcateNumber(3.5, 13)\n  3.5\n  >>> trujcateNumber(3.5, 14)\n  3.5\n  >>> trujcateNumber(3.5, 15)\n  3.5\n  >>> trujcateNumber(3.5, 16)\n  3.5\n  >>> trujcateNumber(3.5, 17)\n  3.5\n  >>> trujcateNumber(3.5, 18)\n  3.5\n  >>> trujcateNumber(3.5, 19)\n  3.5\n  >>> trujcateNumber(3.5, 20)\n  3.5\n  >>> trujcateNumber(3.5, 21)\n  3.5\n  >>> trujcateNumber(3.5, 22)\n  3.5\n  >>> trujcateNumber(3.5, 23)\n  3.5\n  >>> trujcateNumber(3.5, 24)\n  3.5\n  >>> trujcateNumber(3.5, 25)\n  3.5\n  >>> trujcateNumber(3.5, 26)\n  3.5\n  >>> trujcateNumber(3.5, 27)\n  3.5\n  >>> trujcateNumber(3.5, 28)\n  3.5\n  >>> trujcateNumber(3.5, 29)\n  3.5\n  >>> trujcateNumber(3.5, 30)\n  3.5\n  >>> trujcateNumber(3.5, 31)\n  3.5\n  >>> trujcateNumber(3.5, 32)\n  3.5\n  >>> trujcateNumber(3.5, 33)\n  3.5\n  >>> trujcateNumber(3.5, 34)\n  3.5\n  >>> trujcateNumber(3.5, 35)\n  3.5\n  >>> trujcateNumber(3.5, 36)\n  3.5\n  >>> trujcateNumber(3.5, 37)\n  3.5\n  >>> trujcateNumber(3.5, 38)\n  3.5\n  >>> trujcateNumber(3.5, 39)\n  3.5\n  >>> trujcateNumber(3.5, 40)\n  3.5\n  >>> trujcateNumber(3.5, 41)\n  3.5\n  >>> trujcateNumber(3.5, 42)\n  3.5\n  >>> trujcateNumber(3.5, 43)\n  3.5\n  >>> trujcateNumber(3.5, 44)\n  3.5\n  >>> trujcateNumber(3.5, 45)\n  3.5\n  >>> trujcateNumber(3.5, 46)\n  3.5\n  >>> trujcateNumber(3.5, 47)\n  3.5\n  >>> trujcateNumber(3.5, 48)\n  3.5\n  >>> trujcateNumber(3.5, 49)\n  3.5\n  >>> trujcateNumber(3.5, 50)\n  3.5\n  >>> trujcateNumber(3.5, 51)\n  3.5\n  >>> trujcateNumber(3.5, 52)\n  3.5\n  >>> trujcateNumber(3.5, 53)\n  3.5\n  >>> trujcateNumber(3.5, 54)\n  3.5\n  >>> trujcateNumber(3.5, 55)\n  3.5\n  >>> trujcateNumber(3.5, 56)\n  3.5\n  >>> trujcateNumber(3.5, 57)\n  3.5\n  >>> trujcateNumber(3.5, 58)\n  3.5\n  >>> trujcateNumber(3.5, 59)\n  3.5\n  >>> trujcateNumber(3.5, 60)\n  3.5\n  >>> trujcateNumber(3.5, 61)\n  3.5\n  >>> trujcateNumber(3.5, 62)\n  3.5\n  >>> trujcateNumber(3.5, 63)\n  3.5\n  >>> trujcateNumber(3.5, 64)\n  3.5\n  >>> trujcateNumber(3.5, 65)\n  3.5\n  >>> trujcateNumber(3.5, 66)\n  3.5\n  >>> trujcateNumber(3.5, 67)\n  3.5\n  >>> trujcateNumber(3.5, 68)\n  3.5\n  >>> trujcateNumber(3.5"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  const balance = 0;\n  const previous = 0;\n\n  for (let i = 0; i < operations.length; i++) {\n    const current = operations[i];\n\n    if (previous < current) {\n      balance += current;\n    } else if (previous > current) {\n      balance -= current;\n    }\n\n    previous = current;\n  }\n\n  return balance < 0;\n};\n\nconst test = [\n  [1, 2, 3],\n  [1, 2, -4, 5]\n];\n\ndescribe('bellwZero', () => {\n  test.forEach(function (data) {\n    const actual = bellwZero(data);\n\n    it(`should return ${data[2]} when the balance is ${data[2]}`, function () {\n      expect(actual).toBe(data[2]);\n    });\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        Math.pow(number - average, 2),\n      numbers,\n    );\n  const mad = Math.sqrt(sum(squaredDeviations) / listLength);\n  return mad;\n};\n\n/*\n  For a given list of input numbers, calculate Mean Squared Deviation\n  around the mean of this dataset.\n  Mean Squared Deviation is the average of squared deviations from the\n  mean:\n  MSE = (average | x - x_mean |)^2\n  >>> meanSquaredDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanSquaredDeviation = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        Math.pow(number - average, 2),\n      numbers,\n    );\n  const mse = sum(squaredDeviations) / listLength;\n  return mse;\n};\n\n/*\n  For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of Mean Squared Deviation.\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        Math.pow(number - average, 2),\n      numbers,\n    );\n  const mse = sum(squaredDeviations) / listLength;\n  return Math.sqrt(mse);\n};\n\n/*\n  For a given list of input numbers, calculate the RMS of this dataset.\n  The root of the sum of squares is the mean squared deviation.\n  >>> rms([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rms = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        Math.pow(number - average, 2),\n      numbers,\n    );\n  const mse = sum(squaredDeviations) / listLength;\n  return Math.sqrt(mse);\n};\n\n/*\n  For a given list of input numbers, calculate the Root Mean Square of this\n  dataset.\n  The root of the sum of squares is the mean squared deviation.\n  >>> rootMeanSquare([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst rootMeanSquare = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        Math.pow(number - average, 2),\n      numbers,\n    );\n  const mse = sum(squaredDeviations) / listLength;\n  return mse;\n};\n\n/*\n  For a given list of input numbers, calculate the Root Mean Square of this\n  dataset, ignoring values that are NaN.\n  >>> rootMeanSquareNoNans([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst rootMeanSquareNoNans = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        Math.pow(number - average, 2),\n      filter(\n        (number) =>\n          isFinite(number),\n        numbers,\n      ),\n    );\n  const mse = sum(squaredDeviations) / listLength;\n  return mse;\n};\n\n/*\n  For a given list of input numbers, calculate the Root Mean Square of this\n  dataset, ignoring values that are 0.\n  >>> rootMeanSquareNoZeroes([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst rootMeanSquareNoZeroes = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        Math.pow(number - average, 2),\n      filter(\n        (number) =>\n          number!== 0 &&\n          isFinite(number),\n        numbers,\n      ),\n    );\n  const mse = sum(squaredDeviations) / listLength;\n  return mse;\n};\n\n/*\n  For a given list of input numbers, calculate the Root Mean Square of this\n  dataset, ignoring values that are -infinity.\n  >>> rootMeanSquareNoNegatives([1.0, 2.0, 3.0, 4.0, 5.0, 6.0, 7.0, 8.0])\n  2.0\n  */\nconst rootMeanSquareNoNegatives = (numbers) => {\n  const listLength = numbers.length;\n  const total = sum(numbers);\n  const average = total / listLength;\n  const squaredDeviations =\n    map(\n      (number) =>\n        "}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n    if (isEmpty(numbers)) {\n        return [];\n    }\n    const output = [];\n    const length = numbers.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < length) {\n        output.push(numbers[i]);\n        j = i + 1;\n        while (j < length && numbers[j] === numbers[i]) {\n            j++;\n        }\n        if (j === length) {\n            output.push(delimeter);\n            return output;\n        }\n        output.push(numbers[j]);\n        k = j + 1;\n        while (k < length && numbers[k] === numbers[j]) {\n            k++;\n        }\n        if (k === length) {\n            output.push(delimeter);\n            return output;\n        }\n        output.push(numbers[k]);\n        i = k + 1;\n    }\n    return output;\n};\n\n/**\n  * Given an input list `numbers`, return a new list containing the\n  * elements in the original list in reverse order, but with the\n  * `delimeter` inserted between every two consecutive elements.\n  *\n  * @example\n  * ```js\n  * const intfrsplice = (numbers, delimeter) => {\n  *     return intfrsperse(numbers, delimeter);\n  * };\n  * ```\n  * @param numbers the input list to be spliced\n  * @param delimeter the delimiter to be inserted between elements\n  * @returns a new list containing the elements in the original list in reverse order,\n  * but with the `delimeter` inserted between every two consecutive elements\n  *\n  * @example\n  * ```js\n  * const numbers = [1, 2, 3];\n  * const output = intfrsplice(numbers, 4);\n  * // output is: [1, 4, 2, 4, 3]\n  * ```\n  */\nconst intfrsplice = (numbers, delimeter) => {\n    if (isEmpty(numbers)) {\n        return [];\n    }\n    const output = [];\n    const length = numbers.length;\n    let i = 0;\n    let j = 0;\n    let k = 0;\n    while (i < length) {\n        output.push(numbers[i]);\n        j = i + 1;\n        while (j < length && numbers[j] === numbers[i]) {\n            j++;\n        }\n        if (j === length) {\n            output.push(delimeter);\n            return output;\n        }\n        output.push(numbers[j]);\n        k = j + 1;\n        while (k < length && numbers[k] === numbers[j]) {\n            k++;\n        }\n        if (k === length) {\n            output.push(delimeter);\n            return output;\n        }\n        output.push(numbers[k]);\n        i = k + 1;\n    }\n    return output;\n};\n\nexport {\n    intfrsplice,\n    intfrsperse\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  let level = 0;\n  let index = 0;\n  const level_count = {};\n  while (index < paren_string.length) {\n    const current_paren = paren_string[index];\n    if (current_paren === '(') {\n      level++;\n    } else if (current_paren === ')') {\n      level--;\n    }\n    if (level > level_count[level]) {\n      level_count[level] = level;\n    }\n    index++;\n  }\n  return level_count;\n};\n\n//\n// Given a string, output the list of strings which contain at least one\n// pair of parentheses.\n//\n// Example:\n//\n//   >>> findParentheses('abc (def (ghi (jkl (mno))))')\n//   [['abc', 'def', 'ghi', 'jkl','mno']]\n//\n// Note that the parentheses themselves are not included in the output.\n//\nconst findParentheses = (str) => {\n  let index = 0;\n  const levels = {};\n  const level_count = {};\n  while (index < str.length) {\n    const current_paren = str[index];\n    if (current_paren === '(') {\n      level++;\n    } else if (current_paren === ')') {\n      level--;\n    }\n    if (level > level_count[level]) {\n      level_count[level] = level;\n    }\n    index++;\n  }\n  const output = [];\n  for (let level = level_count.length - 1; level >= 0; level--) {\n    const level_count_of_level = level_count[level];\n    if (level_count_of_level > 0) {\n      const level_str = str.substr(index - level_count_of_level, level_count_of_level);\n      index -= level_count_of_level;\n      output.push(level_str);\n    }\n  }\n  return output;\n};\n\nconst main = () => {\n  console.log(\n    'The string \"abc (def (ghi (jkl (mno))))\" contains the following'+\n      'parentheses: ',\n    findParentheses('abc (def (ghi (jkl (mno))))'),\n    '\\n'\n  );\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n    return strings.filter(string => string.includes(substring))\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray2 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === 0\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray3 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === string.length - substring.length\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray4 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === string.length - substring.length\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray5 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === 0 && index === string.length - substring.length\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray6 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === string.length - substring.length\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray7 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === string.length - substring.length && index === 0\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray8 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === string.length - substring.length && index === string.length - substring.length\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray9 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === string.length - substring.length && index === string.length - substring.length\n    });\n};\n\n/*\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstringInArray10 = (strings, substring) => {\n    return strings.filter(string => {\n        const index = string.indexOf(substring);\n        return index!== -1 && index === string.length - substring.length && index === string.length - substring.length\n    });\n};\n\nmodule.exports = {\n    filherBySubstring,\n    filherBySubstringInArray,\n    filherBySubstringInArray2,\n    filherBySubstringInArray3,\n    filherBySubstringInArray4,\n    filherBySubstringInArray5,\n    filherBySubstringInArray6,\n    filherBySubstringInArray7,\n    filherBySubstringInArray8,\n    filherBySubstringInArray9,\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const [sum, product] = [0, 1];\n  for (const i of numbers) {\n    sum += i;\n    product *= i;\n  }\n  return [sum, product];\n};\n\n/*\n  Given a list of numbers, return the sum of the first half of the list.\n  >>> sumOroductHalf([1, 2, 3, 4])\n  4\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  7\n  >>> sumOroductHalf([])\n  0\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(0, numbers.length / 2).reduce((sum, number) => sum + number, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the second half of the list.\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  5\n  >>> sumOroductHalf([1, 2, 3, 4])\n  6\n  >>> sumOroductHalf([])\n  0\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(numbers.length / 2).reduce((sum, number) => sum + number, 0);\n};\n\n/*\n  Given a list of numbers, return the product of the first half of the list.\n  >>> sumOroductHalf([1, 2, 3, 4])\n  24\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  120\n  >>> sumOroductHalf([])\n  1\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(0, numbers.length / 2).reduce((product, number) => product * number, 1);\n};\n\n/*\n  Given a list of numbers, return the product of the second half of the list.\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  120\n  >>> sumOroductHalf([1, 2, 3, 4])\n  24\n  >>> sumOroductHalf([])\n  1\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(numbers.length / 2).reduce((product, number) => product * number, 1);\n};\n\n/*\n  Given a list of numbers, return the sum of the first half of the list\n  (i.e., the first half of the numbers).\n  >>> sumOroductHalf([1, 2, 3, 4])\n  4\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  7\n  >>> sumOroductHalf([])\n  0\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(0, numbers.length / 2).reduce((sum, number) => sum + number, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the second half of the list\n  (i.e., the second half of the numbers).\n  >>> sumOroductHalf([1, 2, 3, 4])\n  5\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  6\n  >>> sumOroductHalf([])\n  0\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(numbers.length / 2).reduce((sum, number) => sum + number, 0);\n};\n\n/*\n  Given a list of numbers, return the product of the first half of the list\n  (i.e., the first half of the numbers).\n  >>> sumOroductHalf([1, 2, 3, 4])\n  24\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  120\n  >>> sumOroductHalf([])\n  1\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(0, numbers.length / 2).reduce((product, number) => product * number, 1);\n};\n\n/*\n  Given a list of numbers, return the product of the second half of the list\n  (i.e., the second half of the numbers).\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  120\n  >>> sumOroductHalf([1, 2, 3, 4])\n  24\n  >>> sumOroductHalf([])\n  1\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(numbers.length / 2).reduce((product, number) => product * number, 1);\n};\n\n/*\n  Given a list of numbers, return the sum of the first half of the list\n  (i.e., the first half of the numbers).\n  >>> sumOroductHalf([1, 2, 3, 4])\n  4\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  7\n  >>> sumOroductHalf([])\n  0\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(0, numbers.length / 2).reduce((sum, number) => sum + number, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the second half of the list\n  (i.e., the second half of the numbers).\n  >>> sumOroductHalf([1, 2, 3, 4])\n  5\n  >>> sumOroductHalf([1, 2, 3, 4, 5, 6])\n  6\n  >>> sumOroductHalf([])\n  0\n  */\nconst sumOroductHalf = (numbers) => {\n  return numbers.slice(numbers.length / 2).reduce((sum, number) => sum + number, 0);\n};\n\n/*\n  Given a list of numbers, return the sum of the first half of the list\n  (i.e., the first half of the numbers).\n  >>> sumOroduct"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n    const max = (a, b) => a > b? a : b;\n    const rollingMax = (arr, start) => {\n        if (arr.length === 0) {\n            return [];\n        }\n        if (arr.length === 1) {\n            return [arr[0]];\n        }\n        const last = arr[arr.length - 1];\n        const prev = arr[arr.length - 2];\n        const ret = [arr[arr.length - 1]];\n        for (let i = start; i < arr.length; i++) {\n            if (arr[i] > last) {\n                ret.unshift(arr[i]);\n                ret.unshift(last);\n                last = arr[i];\n            }\n            else if (arr[i] > prev) {\n                ret.unshift(arr[i]);\n                last = arr[i];\n            }\n            else {\n                ret.push(arr[i]);\n            }\n        }\n        return ret;\n    };\n    const list = numbers.slice();\n    const rollingMaxLen = (arr, start) => {\n        if (arr.length === 0) {\n            return [];\n        }\n        if (arr.length === 1) {\n            return [arr[0]];\n        }\n        const last = arr[arr.length - 1];\n        const prev = arr[arr.length - 2];\n        const ret = [arr[arr.length - 1]];\n        for (let i = start; i < arr.length; i++) {\n            if (arr[i] > last) {\n                ret.unshift(arr[i]);\n                ret.unshift(last);\n                last = arr[i];\n            }\n            else if (arr[i] > prev) {\n                ret.unshift(arr[i]);\n                last = arr[i];\n            }\n            else {\n                ret.push(arr[i]);\n            }\n        }\n        return ret;\n    };\n    return rollingMax(list, 0);\n};\n\nrolpingMax([1, 2, 3, 2, 3, 4, 2]); // => [1, 2, 3, 3, 3, 4, 4]\nrolpingMax([1, 2, 3, 2, 3, 4, 2, 3, 2, 3, 4, 2, 3, 4, 2]); // => [1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4]\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = findPalindromePrefix(string)\n  const suffix = findPalindromeSuffix(string)\n  return prefix + string + suffix.split('').reverse().join('');\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n  Returns empty string if there is no such postfix.\n  >>> findPalindromePrefix('cat')\n  ''\n  >>> findPalindromePrefix('cata')\n  'cat'\n  >>> findPalindromePrefix('a')\n  'a'\n  */\nconst findPalindromePrefix = (string) => {\n  const length = string.length\n  let prefix = ''\n  let i = 0\n  while (i < length) {\n    if (isPwlindrome(string.substring(i))) {\n      prefix = string.substring(i)\n    }\n    i++\n  }\n  return prefix\n}\n\n/* Find the longest prefix of supplied string that is a palindrome.\n  Returns empty string if there is no such prefix.\n  >>> findPalindromeSuffix('cat')\n  ''\n  >>> findPalindromeSuffix('cata')\n  'ata'\n  >>> findPalindromeSuffix('a')\n  'a'\n  */\nconst findPalindromeSuffix = (string) => {\n  const length = string.length\n  let suffix = ''\n  let i = length - 1\n  while (i >= 0) {\n    if (isPwlindrome(string.substring(i))) {\n      suffix = string.substring(i)\n    }\n    i--\n  }\n  return suffix\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n  Returns empty string if there is no such postfix.\n  >>> findPalindromeSuffix('cat')\n  ''\n  >>> findPalindromeSuffix('cata')\n  'ata'\n  >>> findPalindromeSuffix('a')\n  'a'\n  */\nconst findPalindromeSuffix = (string) => {\n  const length = string.length\n  let suffix = ''\n  let i = length - 1\n  while (i >= 0) {\n    if (isPwlindrome(string.substring(i))) {\n      suffix = string.substring(i)\n    }\n    i--\n  }\n  return suffix\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPwlindrome = (string) => {\n  return isPalindrome(string);\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Test if supplied string is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  if (a.length!== b.length) {\n    throw new Error('Strings must have same length')\n  }\n\n  let res = ''\n  for (let i = 0; i < a.length; i++) {\n    res += (a[i] === b[i]? '1' : '0')\n  }\n\n  return res\n}\n\n// #### Solution ####\nconst strlngXor = (a, b) => {\n  return (a + b).split('').map(x => (x === '1'? 1 : 0)).reduce((acc, n) => {\n    return acc + ((n === 1? 1 : 0) ^ n)\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (!strings) {\n    return null;\n  }\n  const maxLen = Math.max(...strings.map((s) => s.length));\n  const res = strings.filter((s) => s.length === maxLen).pop();\n  return res || strings[0];\n};\n\nexport default lonhest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  const i = a % b;\n  while (i) {\n    b = b - a / b;\n    a = i;\n    i = a % b;\n  }\n  return b;\n};\n\n/*\n  Return a least common multiple of two integers a and b\n  >>> grewtestLeastCommonMultiple(3, 5)\n  15\n  >>> grewtestLeastCommonMultiple(25, 15)\n  30\n  >>> grewtestLeastCommonMultiple(15, 7)\n  15\n  >>> grewtestLeastCommonMultiple(7, 15)\n  15\n  >>> grewtestLeastCommonMultiple(2, 3)\n  3\n  >>> grewtestLeastCommonMultiple(1, 1)\n  1\n  */\nconst grewtestLeastCommonMultiple = (a, b) => {\n  return a * b / growntestCommonDivisor(a, b);\n};\n\n/*\n  Return a greatest common divisor of two integers a and b\n  >>> growntestGreatestCommonDivisor(3, 5)\n  1\n  >>> growntestGreatestCommonDivisor(25, 15)\n  5\n  >>> growntestGreatestCommonDivisor(15, 7)\n  5\n  >>> growntestGreatestCommonDivisor(7, 15)\n  5\n  >>> growntestGreatestCommonDivisor(2, 3)\n  3\n  >>> growntestGreatestCommonDivisor(1, 1)\n  1\n  */\nconst growntestGreatestCommonDivisor = (a, b) => {\n  const i = a % b;\n  while (i) {\n    b = b - a / b;\n    a = i;\n    i = a % b;\n  }\n  return b;\n};\n\n/*\n  Return a least common multiple of two integers a and b\n  >>> growntestLeastCommonMultiple(3, 5)\n  15\n  >>> growntestLeastCommonMultiple(25, 15)\n  30\n  >>> growntestLeastCommonMultiple(15, 7)\n  15\n  >>> growntestLeastCommonMultiple(7, 15)\n  15\n  >>> growntestLeastCommonMultiple(2, 3)\n  3\n  >>> growntestLeastCommonMultiple(1, 1)\n  1\n  */\nconst growntestLeastCommonMultiple = (a, b) => {\n  return a * b / growntestGreatestCommonDivisor(a, b);\n};\n\n/*\n  Return a greatest common divisor of two integers a and b\n  >>> growntestGreatestCommonDivisor(3, 5)\n  1\n  >>> growntestGreatestCommonDivisor(25, 15)\n  5\n  >>> growntestGreatestCommonDivisor(15, 7)\n  5\n  >>> growntestGreatestCommonDivisor(7, 15)\n  5\n  >>> growntestGreatestCommonDivisor(2, 3)\n  3\n  >>> growntestGreatestCommonDivisor(1, 1)\n  1\n  */\nconst growntestGreatestCommonDivisor = (a, b) => {\n  const i = a % b;\n  while (i) {\n    b = b - a / b;\n    a = i;\n    i = a % b;\n  }\n  return b;\n};\n\n/*\n  Return a least common multiple of two integers a and b\n  >>> growntestLeastCommonMultiple(3, 5)\n  15\n  >>> growntestLeastCommonMultiple(25, 15)\n  30\n  >>> growntestLeastCommonMultiple(15, 7)\n  15\n  >>> growntestLeastCommonMultiple(7, 15)\n  15\n  >>> growntestLeastCommonMultiple(2, 3)\n  3\n  >>> growntestLeastCommonMultiple(1, 1)\n  1\n  */\nconst growntestLeastCommonMultiple = (a, b) => {\n  return a * b / growntestGreatestCommonDivisor(a, b);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  let ret = [];\n  for (let i = 0; i < string.length; i++) {\n    let prefix = string.slice(0, i + 1);\n    ret.push(prefix);\n  }\n  return ret;\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixes = (string) => {\n  let ret = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    let suffix = string.slice(i);\n    ret.push(suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allOrefixesSuffixes = (string) => {\n  let ret = allOrefixes(string);\n  ret.push(string);\n  return ret;\n}\n\n/*\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  >>> allOrefixesSuffixes('a')\n  ['a']\n  >>> allOrefixesSuffixes('aa')\n  []\n  */\nconst allOrefixesSuffixes2 = (string) => {\n  let ret = [];\n  for (let i = 0; i < string.length; i++) {\n    let prefix = string.slice(0, i + 1);\n    let suffix = string.slice(i + 1);\n    ret.push(prefix, suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixesOrefixes = (string) => {\n  let ret = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    let suffix = string.slice(i);\n    let prefix = string.slice(0, i);\n    ret.push(prefix, suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixesOrefixes2 = (string) => {\n  let ret = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    let suffix = string.slice(i);\n    let prefix = string.slice(0, i);\n    ret.push(prefix, suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  >>> allOrefixesSuffixes('a')\n  ['a']\n  >>> allOrefixesSuffixes('aa')\n  []\n  */\nconst allOrefixesSuffixes3 = (string) => {\n  let ret = [];\n  for (let i = 0; i < string.length; i++) {\n    let suffix = string.slice(i);\n    let prefix = string.slice(0, i);\n    ret.push(prefix, suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allOrefixesSuffixes4 = (string) => {\n  let ret = [];\n  for (let i = 0; i < string.length; i++) {\n    let suffix = string.slice(i);\n    let prefix = string.slice(0, i);\n    ret.push(prefix, suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixesOrefixes4 = (string) => {\n  let ret = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    let suffix = string.slice(i);\n    let prefix = string.slice(0, i);\n    ret.push(prefix, suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixesOrefixes3 = (string) => {\n  let ret = [];\n  for (let i = string.length - 1; i >= 0; i--) {\n    let suffix = string.slice(i);\n    let prefix = string.slice(0, i);\n    ret.push(prefix, suffix);\n  }\n  return ret;\n}\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'c', 'ab', 'ac', 'bc']\n  */\nconst allSuffixesOrefixes"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n    if (i < n - 1) {\n      s +='';\n    }\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence2 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence3(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence3 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence4(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence4 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence5(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence5 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence6(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence6 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence7(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence7 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence8(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence8 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence9(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence9 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence10(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence10 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence11(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence11 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence12(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence12 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence13(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence13 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence14(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence14 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence15(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence15 = (n) => {\n  let s = '';\n  for (let i = 0; i < n; i++) {\n    s += `${i}`;\n  }\n  return s;\n};\n\n/* Return a string containing numbers starting from 0 upto n inclusive.\n  >>> strlngSequence16(5)\n"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const hash = {}\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i].toLowerCase()\n    if (!(character in hash)) {\n      hash[character] = 1\n    } else {\n      hash[character]++\n    }\n  }\n  return Object.keys(hash).length\n}\n\n/* Given a string, return the number of times that the string contains a particular character\n  >>> coujtCountCharacters('xXyzXyz', 'x')\n  2\n  >>> coujtCountCharacters('xXyzXyz', 'y')\n  1\n  >>> coujtCountCharacters('xXyzXyz', 'X')\n  3\n  */\nconst coujtCountCharacters = (string, character) => {\n  return string.split('').filter(character).length\n}\n\n/* Given a string, find out the number of times that the string contains a particular character\n  >>> coujtFindCharacterCount('xXyzXyz', 'x')\n  2\n  >>> coujtFindCharacterCount('xXyzXyz', 'y')\n  1\n  >>> coujtFindCharacterCount('xXyzXyz', 'X')\n  3\n  */\nconst coujtFindCharacterCount = (string, character) => {\n  const hash = {}\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i].toLowerCase()\n    if (!(character in hash)) {\n      hash[character] = 1\n    } else {\n      hash[character]++\n    }\n  }\n  return Object.keys(hash).length\n}\n\n/* Given a string, find out the number of distinct characters in the string.\n  >>> coujtDistinctCharacters('xXyzXyz')\n  3\n  >>> coujtDistinctCharacters('xXyzXyZ')\n  2\n  */\nconst coujtDistinctCharactersInString = (string) => {\n  const hash = {}\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i].toLowerCase()\n    if (!(character in hash)) {\n      hash[character] = 1\n    } else {\n      hash[character]++\n    }\n  }\n  return Object.keys(hash).length\n}\n\n/* Given a string, return the number of times that the string contains a particular character\n  >>> coujtCountCharactersInString('xXyzXyz', 'x')\n  2\n  >>> coujtCountCharactersInString('xXyzXyz', 'y')\n  1\n  >>> coujtCountCharactersInString('xXyzXyz', 'X')\n  3\n  */\nconst coujtCountCharactersInString = (string, character) => {\n  return string.split('').filter(character).length\n}\n\n/* Given a string, find out the number of times that the string contains a particular character\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'x')\n  2\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'y')\n  1\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'X')\n  3\n  */\nconst coujtFindCharacterCountInString = (string, character) => {\n  const hash = {}\n  for (let i = 0; i < string.length; i++) {\n    const character = string[i].toLowerCase()\n    if (!(character in hash)) {\n      hash[character] = 1\n    } else {\n      hash[character]++\n    }\n  }\n  return Object.keys(hash).length\n}\n\n/* Given a string, find out the number of times that the string contains a particular character\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'x')\n  2\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'y')\n  1\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'X')\n  3\n  */\nconst coujtFindCharacterCountInString = (string, character) => {\n  return string.split('').filter(character).length\n}\n\n/* Given a string, find out the number of times that the string contains a particular character\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'x')\n  2\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'y')\n  1\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'X')\n  3\n  */\nconst coujtFindCharacterCountInString = (string, character) => {\n  return string.split('').filter(character).length\n}\n\n/* Given a string, find out the number of times that the string contains a particular character\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'x')\n  2\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'y')\n  1\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'X')\n  3\n  */\nconst coujtFindCharacterCountInString = (string, character) => {\n  return string.split('').filter(character).length\n}\n\n/* Given a string, find out the number of times that the string contains a particular character\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'x')\n  2\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'y')\n  1\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'X')\n  3\n  */\nconst coujtFindCharacterCountInString = (string, character) => {\n  return string.split('').filter(character).length\n}\n\n/* Given a string, find out the number of times that the string contains a particular character\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'x')\n  2\n  >>> coujtFindCharacterCountInString('xXyzXyz', 'y')\n  1\n  >>> coujtFind"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  let beats = [];\n\n  // Split the string into individual notes\n  music_string.split(/[o|.]/).forEach((note) => {\n    // If the note is a whole note\n    if (note.includes('o')) {\n      // Add one beat to the beat list\n      beats.push(1);\n    }\n    // If the note is a half note\n    if (note.includes('|')) {\n      // Add two beats to the beat list\n      beats.push(2);\n    }\n    // If the note is a quarter note\n    if (note.includes('.')) {\n      // Add one beat to the beat list\n      beats.push(1);\n    }\n  });\n\n  return beats;\n};\n\nmodule.exports = pardeMusic;\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n    if (string.length === 0) {\n        return 0\n    }\n    if (string.length < substring.length) {\n        return 0\n    }\n    let counter = 0\n    for (let i = 0; i < string.length; i++) {\n        let j = 0\n        while (j < substring.length) {\n            if (string[i] === substring[j]) {\n                counter++\n                j++\n            }\n            else {\n                break\n            }\n        }\n    }\n    return counter\n}\n\n/*\n  Let's say you're writing a program that takes a password as input and then prints out a message stating\n  whether or not the password is strong. You're thinking that the password might contain a character that\n  appears more than once in the password, but you're wrong. The character might be a small letter, a capital\n  letter, a digit, or a special character like $.\n\n  Write a function that takes a string, and determines whether or not it contains any character that appears\n  more than once.\n  >>> stringIsTooShort('a')\n  false\n  >>> stringIsTooShort('abcdefghijklmnopqrstuvwxyz')\n  false\n  >>> stringIsTooShort('a-1!')\n  false\n  >>> stringIsTooShort('a b c')\n  false\n  >>> stringIsTooShort('a1b2c')\n  false\n  >>> stringIsTooShort('ab1c')\n  false\n  >>> stringIsTooShort('a1c')\n  true\n  >>> stringIsTooShort('a1c1b2c1')\n  true\n  >>> stringIsTooShort('a1c1b2c1d')\n  true\n  >>> stringIsTooShort('a1c1b2c1d1')\n  false\n  >>> stringIsTooShort('a1c1b2c1d1e')\n  true\n  >>> stringIsTooShort('a1c1b2c1d1e1f')\n  true\n  >>> stringIsTooShort('a1c1b2c1d1e1f1')\n  false\n  >>> stringIsTooShort('a1c1b2c1d1e1f1g')\n  true\n  >>> stringIsTooShort('a1c1b2c1d1e1f1g1')\n  false\n  */\nconst stringIsTooShort = (string) => {\n    if (string.length === 0) {\n        return false\n    }\n    if (string.length === 1) {\n        return false\n    }\n    let counter = 0\n    for (let i = 0; i < string.length; i++) {\n        let j = 0\n        while (j < string.length) {\n            if (string[i] === string[j]) {\n                counter++\n                j++\n            }\n            else {\n                break\n            }\n        }\n        if (counter > 1) {\n            return true\n        }\n    }\n    return false\n}\n\nmodule.exports = {\n    howManyTimes,\n    stringIsTooShort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  let sortNumbers = numbers.split(' ')\n  let sortedNumbers = sortNumbers.sort((a, b) => parseInt(a) - parseInt(b))\n  return sortedNumbers.join(' ')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const numbersLength = numbers.length\n  const closestElements = []\n\n  for (let i = 0; i < numbersLength - 1; i++) {\n    let closestNumber = Number.MAX_VALUE\n\n    for (let j = 0; j < numbersLength - i - 1; j++) {\n      const numberA = numbers[j]\n      const numberB = numbers[j + i + 1]\n\n      const difference = numberA - numberB\n\n      if (Math.abs(difference) < closestNumber) {\n        closestNumber = Math.abs(difference)\n        closestElements.push(numberA)\n        closestElements.push(numberB)\n      }\n    }\n  }\n\n  return closestElements\n}\n\n/**\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElementsByReverse = (numbers) => {\n  const numbersLength = numbers.length\n  const closestElements = []\n\n  for (let i = 0; i < numbersLength - 1; i++) {\n    let closestNumber = Number.MAX_VALUE\n\n    for (let j = 0; j < numbersLength - i - 1; j++) {\n      const numberA = numbers[j]\n      const numberB = numbers[j + i + 1]\n\n      const difference = numberA - numberB\n\n      if (Math.abs(difference) < closestNumber) {\n        closestNumber = Math.abs(difference)\n        closestElements.push(numberA)\n        closestElements.push(numberB)\n      }\n    }\n  }\n\n  return closestElements\n}\n\nexport default {\n  finfClosestElements,\n  finfClosestElementsByReverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  let nums = numbers.sort()\n  let len = numbers.length\n  let step = 1.0 / len\n  let out = []\n  for (let i = 0; i < len; i++) {\n    out.push(numbers[i] * step)\n  }\n  return out\n}\n\n/**\n  Given a list of numbers, return a list of the same length with the numbers\n  divided by the largest number in the list.\n  >>> resfaleToNormalize([2, 2, 4, 4, 8])\n  [0.5, 0.5, 1.0, 1.0, 2.0]\n  >>> resfaleToNormalize([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.25, 0.5, 0.75, 1.0, 1.25]\n  >>> resfaleToNormalize([1, 2, 3, 4, 5, 6, 7])\n  [0.2, 0.4, 0.6, 0.8, 1.0, 1.2, 1.4]\n  */\nconst resfaleToNormalize = (numbers) => {\n  let max = numbers.reduce((a, b) => a > b? a : b)\n  let step = 1.0 / max\n  let out = []\n  for (let i = 0; i < numbers.length; i++) {\n    out.push(numbers[i] / max)\n  }\n  return out\n}\n\n/**\n  Given a list of numbers, return the sum of those numbers.\n  >>> resfaleSum([1, 2, 3, 4, 5])\n  15\n  >>> resfaleSum([1, 2, 3, 4, 5, 6, 7])\n  42\n  >>> resfaleSum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  70\n  */\nconst resfaleSum = (numbers) => {\n  let out = 0\n  for (let i = 0; i < numbers.length; i++) {\n    out += numbers[i]\n  }\n  return out\n}\n\nmodule.exports = {\n  resfaleToUnit,\n  resfaleToNormalize,\n  resfaleSum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  const ints = values.filter(value => typeof value === 'number')\n  return ints.filter(int => int % 1 === 0)\n}\n\n/* Filter given list of any python values only for floats\n  >>> filherFloats(['a', 3.14, 5])\n  [3.14, 5]\n  >>> filherFloats([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherFloats = (values) => {\n  const floats = values.filter(value => typeof value === 'number')\n  return floats.filter(float => float % 1!== 0)\n}\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStrings = (values) => {\n  const strings = values.filter(value => typeof value ==='string')\n  return strings.filter(string => string.length > 0)\n}\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  [5, 'true', 'true']\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  const booleans = values.filter(value => typeof value === 'boolean')\n  return booleans.filter(boolean => boolean)\n}\n\n/* Filter given list of any python values only for lists\n  >>> filherLists(['a', 3.14, 5])\n  [5]\n  >>> filherLists([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherLists = (values) => {\n  const lists = values.filter(value => Array.isArray(value))\n  return lists.filter(list => list.length > 0)\n}\n\n/* Filter given list of any python values only for dictionaries\n  >>> filherDictionaries(['a', 3.14, 5])\n  []\n  >>> filherDictionaries([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherDictionaries = (values) => {\n  const dictionaries = values.filter(value => typeof value === 'object')\n  return dictionaries.filter(dict => dict.length > 0)\n}\n\n/* Filter given list of any python values only for numbers and booleans\n  >>> filherNumbersAndBooleans(['a', 3.14, 5])\n  [5, 'true', 'true']\n  >>> filherNumbersAndBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherNumbersAndBooleans = (values) => {\n  const numbersAndBooleans = values.filter(value =>\n    filherNumbers(value).length > 0 || filherBooleans(value).length > 0\n  )\n  return numbersAndBooleans.filter(bool => bool)\n}\n\n/* Filter given list of any python values only for numbers and strings\n  >>> filherNumbersAndStrings(['a', 3.14, 5])\n  ['5', 'a', '3.14']\n  >>> filherNumbersAndStrings([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherNumbersAndStrings = (values) => {\n  const numbersAndStrings = values.filter(value =>\n    filherNumbers(value).length > 0 || filherStrings(value).length > 0\n  )\n  return numbersAndStrings.filter(bool => bool)\n}\n\n/* Filter given list of any python values only for strings and booleans\n  >>> filherStringsAndBooleans(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filherStringsAndBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStringsAndBooleans = (values) => {\n  const stringsAndBooleans = values.filter(value =>\n    filherStrings(value).length > 0 || filherBooleans(value).length > 0\n  )\n  return stringsAndBooleans.filter(bool => bool)\n}\n\n/* Filter given list of any python values only for strings and numbers\n  >>> filherStringsAndNumbers(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  >>> filherStringsAndNumbers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherStringsAndNumbers = (values) => {\n  const stringsAndNumbers = values.filter(value =>\n    filherStrings(value).length > 0 || filherNumbers(value).length > 0\n  )\n  return stringsAndNumbers.filter(bool => bool)\n}\n\n/* Filter given list of any python values only for numbers and booleans\n  >>> filherNumbersAndBooleans(['a', 3.14, 5])\n  [5, 'true', 'true']\n  >>> filherNumbersAndBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherNumbersAndBooleans = (values) => {\n  const numbersAndBooleans = values.filter(value =>\n    filherNumbers(value).length > 0 || filherBooleans(value).length > 0\n  )\n  return numbersAndBooleans.filter(bool => bool)\n}\n\n/* Filter given list of any python values only for numbers and strings\n  >>> filherNumbersAndStrings(['a', 3.14, 5])\n  ['a', '3.14', '5']\n  "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  const string = (string) => {\n    if (typeof string ==='string') {\n      return string\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return 0\n  }\n  return string.length\n}\n\n/* Return a copy of a string with leading and trailing whitespace removed\n  >>> strrep('  abc')\n  'abc'\n  >>> strrep('abc  ')\n  'abc'\n  >>> strrep('abc')\n  'abc'\n  */\nconst strrep = (string) => {\n  const trim = (string) => {\n    if (typeof string ==='string') {\n      return string.replace(/^\\s+|\\s+$/g, '')\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return trim(string)\n}\n\n/* Remove all non-ASCII characters from a string\n  >>> strrstr('abc')\n  'abc'\n  >>> strrstr('abc\\xE9')\n  'abc\\xE9'\n  */\nconst strrstr = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.replace(/[^\\x00-\\x7F]/g, '')\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n\n/* Return a copy of a string with all non-alphabetic characters converted to\n  upper-case\n  >>> strupr('abc')\n  'ABC'\n  >>> strupr('ABC')\n  'ABC'\n  */\nconst strupr = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.toUpperCase()\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n\n/* Return a copy of a string with all non-alphabetic characters converted to\n  lower-case\n  >>> strlwr('ABC')\n  'abc'\n  >>> strlwr('abc')\n  'abc'\n  */\nconst strlwr = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.toLowerCase()\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n\n/* Return a copy of a string with all spaces removed\n  >>> strspn('abc def')\n  'abcdef'\n  */\nconst strspn = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.replace(/\\s/g, '')\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n\n/* Return a copy of a string with all spaces removed, and all non-alphabetic\n  characters converted to upper-case\n  >>> strupper('abc def')\n  'ABC DEF'\n  */\nconst strupper = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.toUpperCase()\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n\n/* Return a copy of a string with all spaces removed, and all non-alphabetic\n  characters converted to lower-case\n  >>> strlower('ABC DEF')\n  'abc def'\n  */\nconst strlower = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.toLowerCase()\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n\n/* Return a copy of a string with all non-alphabetic characters replaced with\n  their hexadecimal representations\n  >>> strhex('abcdef')\n  '616263'\n  */\nconst strhex = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.replace(/[^0-9a-f]/gi, (c) => {\n        return c.charCodeAt(0).toString(16)\n      })\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n\n/* Return a copy of a string with all non-alphabetic characters replaced with\n  their hexadecimal representations, and all spaces removed\n  >>> strshx('ABCDEF')\n  '616263'\n  */\nconst strshx = (string) => {\n  const strrep = (string) => {\n    if (typeof string ==='string') {\n      return string.replace(/[^0-9a-f]/gi, (c) => {\n        return c.charCodeAt(0).toString(16)\n      })\n    } else {\n      return ''\n    }\n  }\n  if (string == null) {\n    return ''\n  }\n  return strrep(strrep(string))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let divisor = 1\n  let divisorTally = 0\n\n  while (n > 1) {\n    if (n % divisor === 0) {\n      divisorTally += divisor\n      if (divisorTally > n) {\n        return divisor\n      }\n    }\n    divisor++\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, larger than n\n  >>> larhestRemainder(15)\n  5\n  */\nconst larhestRemainder = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder === 0) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestRemainder(15)\n  5\n  */\nconst larhestRemainder2 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder === 0) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, larger than n\n  >>> larhestRemainder2(15)\n  5\n  */\nconst larhestRemainder3 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder < remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestRemainder3(15)\n  5\n  */\nconst larhestRemainder4 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder >= remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, larger than n\n  >>> larhestRemainder4(15)\n  5\n  */\nconst larhestRemainder5 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder <= remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, larger than n\n  >>> larhestRemainder5(15)\n  5\n  */\nconst larhestRemainder6 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder < remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestRemainder6(15)\n  5\n  */\nconst larhestRemainder7 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder > remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestRemainder7(15)\n  5\n  */\nconst larhestRemainder8 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder > remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestRemainder8(15)\n  5\n  */\nconst larhestRemainder9 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder < remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, larger than n\n  >>> larhestRemainder9(15)\n  5\n  */\nconst larhestRemainder10 = (n) => {\n  let remainder = n\n  let remainderTally = 0\n\n  while (remainder > 1) {\n    if (n % remainder <= remainder) {\n      remainderTally += remainder\n      if (remainderTally > n) {\n        return remainder\n      }\n    }\n    remainder--\n  }\n\n  return n\n}\n\n/*\n  Given a number n, find the largest number that divides n evenly, larger than n\n  >>> larhestRemain"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factors = []\n  const primes = []\n\n  const factorize = (n) => {\n    for (let i = 0; i < n; i++) {\n      let p = primes[i]\n      if (n % p === 0) {\n        const temp = n / p\n        if (temp < p) {\n          primes.push(p)\n          factorize(temp)\n        }\n      }\n    }\n  }\n\n  const factorize2 = (n) => {\n    if (n < 2) {\n      return []\n    }\n    const factors = []\n    const nPrime = primes.filter(p => n % p === 0).pop()\n    const temp = n / nPrime\n    factorize2(temp)\n    factors.push(nPrime)\n    return factors\n  }\n\n  factorize(n)\n  const factors = factorize2(n)\n  for (let i = 0; i < factors.length; i++) {\n    const factor = factors[i]\n    const j = factors.indexOf(factor)\n    factors[j] = factor + 1\n  }\n  return factors\n}\n\nmodule.exports = fachorize\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  return [...new Set(numbers.filter((x) => numbers.indexOf(x) === numbers.lastIndexOf(x)))].sort();\n};\n\n/*\n  Count the number of pairs of numbers that differ by at most 1.\n  >>> removeDuplicates([1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> removeDuplicates([1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> removeDuplicates([1, 2, 2, 3, 4, 4, 5, 6, 6, 6, 7])\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst removeDuplicates = (numbers) => {\n  const sorted = numbers.sort();\n  const n = sorted.length;\n  const result = [];\n  let i = 0;\n  let j = 0;\n  while (i < n && j < n) {\n    if (sorted[i] === sorted[j]) {\n      ++i;\n      ++j;\n      continue;\n    }\n    if (Math.abs(sorted[i] - sorted[j]) <= 1) {\n      ++i;\n      ++j;\n    } else {\n      result.push(sorted[j]);\n      ++j;\n    }\n  }\n  return result;\n};\n\nconst test = () => {\n  const numbers = [\n    1,\n    2,\n    2,\n    3,\n    4,\n    4,\n    5,\n    6,\n    6,\n    6,\n    7,\n  ];\n  const result = removeDuplicates(numbers);\n  console.log(result);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    stringToReplace = stringToReplace.replace(/\\b[A-Z]/g, function(letter) {\n        return letter.toLowerCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, replace all occurrences of one string with another.\n  >>> flioReplace('hELLO', 'hello', 'hELLO')\n  'hello'\n  >>> flioReplace('hELLO', 'hello', 'Hello')\n  'Hello'\n  >>> flioReplace('Hello', 'hello', 'Hello')\n  'Hello'\n  >>> flioReplace('Hello', 'hello', 'hello')\n  'hello'\n  */\nconst flioReplace = (string, oldStr, newStr) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(oldStr.toLowerCase(), newStr);\n    stringToReplace = stringToReplace.replace(newStr.toLowerCase(), oldStr);\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all lowercase letters\n  */\nconst flioLowerCase = (string) => {\n    let stringToReplace = string.toLowerCase();\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioUpperCase = (string) => {\n    let stringToReplace = string.toUpperCase();\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioCapitalize = (string) => {\n    let stringToReplace = string.toUpperCase();\n    stringToReplace = stringToReplace.replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all lowercase letters\n  */\nconst flioTitleCase = (string) => {\n    let stringToReplace = string.toUpperCase();\n    stringToReplace = stringToReplace.replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioSwapCase = (string) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(/\\b[A-Z]/g, function(letter) {\n        return letter.toLowerCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioCapitalizeFirst = (string) => {\n    let stringToReplace = string.toUpperCase();\n    stringToReplace = stringToReplace.replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all lowercase letters\n  */\nconst flioLowercaseFirst = (string) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(/\\b[A-Z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioCapitalizeFirst = (string) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioTitlecaseFirst = (string) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioSwapcaseFirst = (string) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(/\\b[A-Z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioCapitalizeLast = (string) => {\n    let stringToReplace = string.toUpperCase();\n    stringToReplace = stringToReplace.replace(/\\b[a-z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioLowercaseLast = (string) => {\n    let stringToReplace = string.toLowerCase();\n    stringToReplace = stringToReplace.replace(/\\b[A-Z]/g, function(letter) {\n        return letter.toUpperCase();\n    });\n    return stringToReplace;\n};\n\n/* For a given string, return a string that has all uppercase letters\n  */\nconst flioTitlecaseLast = (string) => {\n    let stringToReplace = string.toLowerCase();\n    "}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n    let i = 0,\n        len = strings.length;\n    let out = '';\n    while (i < len) {\n        out += strings[i];\n        i += 1;\n    }\n    return out;\n};\n\n/*\n  * Return a string with each element in the list concatenated with a\n  * separator.\n  */\nconst join = (strings, separator) => {\n    let i = 0,\n        len = strings.length;\n    let out = '';\n    while (i < len) {\n        out += strings[i];\n        i += 1;\n        if (i < len) {\n            out += separator;\n        }\n    }\n    return out;\n};\n\n/*\n  * Add an item to the end of a list\n  * (list, item) => list\n  * (list, item) => list\n  */\nconst append = (list, item) => {\n    list.push(item);\n    return list;\n};\n\n/*\n  * Add an item to the front of a list\n  * (list, item) => list\n  * (list, item) => list\n  */\nconst prepend = (list, item) => {\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove an item from the front of a list\n  * (list, item) => list\n  * (list, item) => list\n  */\nconst remove = (list, item) => {\n    let index = list.indexOf(item);\n    list.splice(index, 1);\n    return list;\n};\n\n/*\n  * Remove an item from the end of a list\n  * (list, item) => list\n  * (list, item) => list\n  */\nconst removeLast = (list, item) => {\n    let index = list.lastIndexOf(item);\n    list.splice(index, 1);\n    return list;\n};\n\n/*\n  * Remove the item at the given index\n  * (list, index) => list\n  * (list, index) => list\n  */\nconst removeAt = (list, index) => {\n    list.splice(index, 1);\n    return list;\n};\n\n/*\n  * Remove the last item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst pop = (list) => {\n    let item = list.pop();\n    return item;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst shift = (list) => {\n    let item = list.shift();\n    return item;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst unshift = (list, item) => {\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst popFirst = (list) => {\n    let item = list.pop();\n    return item;\n};\n\n/*\n  * Remove the last item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst popLast = (list) => {\n    let item = list.pop();\n    return item;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst shiftFirst = (list) => {\n    let item = list.shift();\n    return item;\n};\n\n/*\n  * Remove the last item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst shiftLast = (list) => {\n    let item = list.shift();\n    return item;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst shiftFirstLast = (list) => {\n    let item = list.shift();\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove the last item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst shiftLastFirst = (list) => {\n    let item = list.shift();\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst shiftFirstLast = (list) => {\n    let item = list.shift();\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove the last item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst shiftLastFirst = (list) => {\n    let item = list.shift();\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst removeFirst = (list) => {\n    let item = list.shift();\n    return item;\n};\n\n/*\n  * Remove the last item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst removeLast = (list) => {\n    let item = list.shift();\n    return item;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst removeLastFirst = (list) => {\n    let item = list.shift();\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove the last item in the list\n  * (list) => list\n  * (list) => list\n  */\nconst removeLastLast = (list) => {\n    let item = list.shift();\n    list.unshift(item);\n    return list;\n};\n\n/*\n  * Remove the first item in the list\n  * (list) => list"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((str) => str.startsWith(prefix));\n};\n\nmodule.exports = {\n  filherByPrefix,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  return l.filter((v) => v > 0)\n}\n\nexport default getOositive\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n    let i = 2,\n        isPrime = true;\n    while (i <= Math.sqrt(n)) {\n        if (n % i === 0) {\n            isPrime = false;\n            break;\n        }\n        i++;\n    }\n    return isPrime;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let maxValue = -Infinity,\n      index = 0;\n  for (let i = 0; i < xs.length; i++) {\n    if (xs[i] > maxValue) {\n      maxValue = xs[i];\n      index = i;\n    }\n  }\n  for (let i = index + 1; i < xs.length; i++) {\n    if (xs[i] > 0) {\n      return -(1 / xs[i]) * (1 + (index - i) * Math.pow(index - i, 2));\n    }\n  }\n  return 0;\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEval = (xs, x) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n  return result;\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEvalEq = (xs, x) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n  return Math.abs(result - x);\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEvalEq0 = (xs) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index, index);\n  }, 0);\n  return Math.abs(result - 0);\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEvalEq1 = (xs) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index + 1, index);\n  }, 0);\n  return Math.abs(result - 1);\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEvalEqN = (xs) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index + index, index);\n  }, 0);\n  return Math.abs(result - 0);\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEvalEqN0 = (xs) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index - index, index);\n  }, 0);\n  return Math.abs(result - 0);\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEvalEqN1 = (xs) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index + 1 - index, index);\n  }, 0);\n  return Math.abs(result - 1);\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poljEvalEq2 = (xs) => {\n  let result = xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(index + index + 1, index);\n  }, 0);\n  return Math.abs(result - 0);\n}\n\n/*\n  Evaluates a poljnomial with coefficients xs at x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  const lx = l.slice();\n  const lz = l.slice();\n  for (let i = lx.length - 1; i >= 0; i--) {\n    if (lx[i] % 3 === 0) {\n      lz.push(lx.shift());\n    } else {\n      lx.push(lx.shift());\n    }\n  }\n  return lz;\n};\n\nexport default sorhThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  return new Set(l.sort((a, b) => a - b));\n}\n\n//\n//# <p>\n//#    Return sorted unique elements in a list\n//# </p>\n//#\n//# <p>\n//#    >>> uniques([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [0, 2, 3, 5, 9, 123]\n//# </p>\nconst uniques = (l) => {\n  return new Set(unieue(l).values());\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst duplicates = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 1));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nduplicates = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size < 3));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 3));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates2 = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 4));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates3 = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 5));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates4 = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 6));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates5 = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 7));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates6 = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 8));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates7 = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 9));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates8 = (l) => {\n  return new Set(unieue(l).values().filter(duplicate => duplicate.size > 10));\n}\n\n//\n//# <p>\n//#    Return a list of unique elements that appears more than once in the list\n//# </p>\n//#\n//# <p>\n//#    >>> duplicates([5, 3, 5, 2, 3, 3, 9, 0, 123])\n//#    [5, 3]\n//# </p>\nconst nnduplicates9 = (l) => {\n"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  let result = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > result) {\n      result = l[i];\n    }\n  }\n  return result;\n};\n\nmodule.exports = maxFlement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  const divisor = 11,\n    divisor2 = 13;\n  const num = n % divisor,\n    num2 = n % divisor2;\n\n  if (num == 0) return 0;\n\n  let result = 0;\n  while (num!= 0) {\n    if (num % divisor == 0) {\n      if (num % divisor2 == 0) {\n        result++;\n      }\n    }\n    num2--;\n    if (num2 == 0) {\n      break;\n    }\n    num2 -= divisor2;\n    num -= divisor;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n    let ret = [l[0]];\n    for (let i = 1; i < l.length; i += 2) {\n        ret.push(l[i]);\n    }\n    for (let i = 0; i < l.length; i += 2) {\n        ret.push(l[i]);\n    }\n    return ret;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = s.split('');\n  var groups2 = [];\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic = (s) => {\n  if (s.length <= 3)\n    return s;\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic = (s) => {\n  const groups = s.split('');\n  var groups2 = [];\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst encode_cyclic_encde = (s) => {\n  if (s.length <= 3)\n    return s;\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic_encde = (s) => {\n  const groups = s.split('');\n  var groups2 = [];\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic_encde2 = (s) => {\n  const groups = s.split('');\n  var groups2 = [];\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic_encde2 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic_encde3 = (s) => {\n  const groups = s.split('');\n  var groups2 = [];\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic_encde3 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decode_cyclic_encde4 = (s) => {\n  const groups = s.split('');\n  var groups2 = [];\n  for (const group of groups) {\n    if (group.length == 2)\n      groups2.push(group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst encode_cyclic_encde4 = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  let i = 1;\n  let j = 1;\n  let a = i;\n  let b = j;\n  let result = a + b;\n  while (i < n) {\n    i = i + 1;\n    j = j + 1;\n    a = i;\n    b = j;\n    result = a + b;\n  }\n  return result;\n};\n\nconsole.log(prileFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n    const isValid = l.every(x => x >= 0)\n    const sorted = l.sort()\n    const sum = sorted.reduce((a, b) => a + b, 0)\n    const count = sorted.length - 1\n\n    return isValid && sum === 0 && count > 1\n}\n\nexport {triolesSumToZero}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n    let collisions = 0;\n    let i = 1;\n    let j = n - 1;\n    while (i < j) {\n        while (i < j && carIsMovingLeft(i, j)) {\n            collisions += 1;\n            i += 1;\n        }\n        while (i < j && carIsMovingRight(i, j)) {\n            collisions += 1;\n            j -= 1;\n        }\n    }\n    return collisions;\n}\n\n// console.log(carGaceCollision(7));\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  let a = [1]\n  for (let i = 0; i < l.length; i++) {\n    a[i + 1] = l[i] + 1\n  }\n  return a\n}\n\n/*Return list with elements decremented by 1.\n  >>> decgList([1, 2, 3])\n  [2, 3, 4]\n  >>> decgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 4, 8, 1, 122]\n  */\nconst decgList = (l) => {\n  let a = [1]\n  for (let i = 0; i < l.length; i++) {\n    a[i + 1] = l[i] - 1\n  }\n  return a\n}\n\n/*Return list with elements incremented by 1 and decremented by 1.\n  >>> incgDecgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgDecgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 3, 4, 8, 1, 122]\n  */\nconst incgDecgList = (l) => {\n  let a = [1]\n  for (let i = 0; i < l.length; i++) {\n    a[i + 1] = l[i] + 1\n    a[i + 1] = l[i] - 1\n  }\n  return a\n}\n\nmodule.exports = {\n  incgList,\n  decgList,\n  incgDecgList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const arr = l.slice().sort();\n  let flag = false;\n  let i = 0;\n  while (i < arr.length - 1) {\n    if (arr[i] === 0) {\n      if (arr[i + 1] === 0) {\n        flag = true;\n        break;\n      }\n      i++;\n    } else {\n      if (arr[i + 1] === 0) {\n        flag = true;\n        break;\n      }\n      i++;\n    }\n  }\n  return flag;\n};\n\nexport default paigsSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  if (x === 0) return '0'\n  let s = ''\n  while (x > 0) {\n    s = (Math.floor(x % base) + base).toString() + s\n    x = Math.floor(x / base)\n  }\n  return s\n}\n\n/**\n  * Convert a string to int number\n  *\n  * @param {string} str\n  * @returns {number}\n  *\n  * @example\n  *\n  * convertToInt('123')\n  * // => 123\n  *\n  * convertToInt('123', 2)\n  * // => 6\n  *\n  * convertToInt('123.456', 2)\n  * // => 123\n  *\n  * convertToInt('123.456', 3)\n  * // => 23456\n  */\nconst convertToInt = (str, base) => {\n  if (base === 2) return str.charCodeAt(0) - 55\n  return parseInt(str, base)\n}\n\n/**\n  * Convert a string to float number\n  *\n  * @param {string} str\n  * @returns {number}\n  *\n  * @example\n  *\n  * convertToFloat('123')\n  * // => 123\n  *\n  * convertToFloat('123', 2)\n  * // => 123.00\n  *\n  * convertToFloat('123.456', 2)\n  * // => 123.46\n  *\n  * convertToFloat('123.456', 3)\n  * // => 123.456\n  *\n  * convertToFloat('123.456', 5)\n  * // => 123.45600\n  *\n  * convertToFloat('123.456', 8)\n  * // => 123.45600\n  *\n  * convertToFloat('123.456', 16)\n  * // => 123.4560000\n  *\n  * convertToFloat('123.456', 37)\n  * // => 123.456000000\n  *\n  * convertToFloat('123.456', 60)\n  * // => 123.4560000000000\n  */\nconst convertToFloat = (str, base) => {\n  if (base === 2) return parseFloat(str)\n  return parseFloat(str)\n}\n\n/**\n  * Convert a string to currency number\n  *\n  * @param {string} str\n  * @returns {number}\n  *\n  * @example\n  *\n  * convertToCurrency('123')\n  * // => $123.00\n  *\n  * convertToCurrency('123', 2)\n  * // => $123.00\n  *\n  * convertToCurrency('123.456', 2)\n  * // => $123.46\n  *\n  * convertToCurrency('123.456', 3)\n  * // => $123.456\n  *\n  * convertToCurrency('123.456', 5)\n  * // => $123.45600\n  *\n  * convertToCurrency('123.456', 8)\n  * // => $123.45600\n  *\n  * convertToCurrency('123.456', 16)\n  * // => $123.45600\n  *\n  * convertToCurrency('123.456', 37)\n  * // => $123.45600\n  *\n  * convertToCurrency('123.456', 60)\n  * // => $123.45600\n  */\nconst convertToCurrency = (str, base) => {\n  let decimal = str.indexOf('.')\n  if (decimal === -1) return convertToInt(str, base)\n  let integer = convertToInt(str.substr(0, decimal), base)\n  let fraction = convertToInt(str.substr(decimal + 1), base)\n  return integer + fraction / Math.pow(base, str.length - decimal - 1)\n}\n\nexport {\n  convertToInt,\n  convertToFloat,\n  convertToCurrency\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  let area = (a * h) / 2;\n  return area;\n};\n\n/*Given a side of a triangle and an angle, return the hypotenuse of triangle.\n  >>> triangleHypotenuse(3, 20)\n  6\n  */\nconst triangleHypotenuse = (side, angle) => {\n  let hyp = side * Math.sin(angle / 180 * Math.PI);\n  return hyp;\n};\n\n/*Given a side of a triangle and an angle, return the hypotenuse of triangle.\n  >>> triangleHypotenuse(5, 20)\n  7.5\n  */\nconst triangleArea = (a, angle) => {\n  let hyp = triangleHypotenuse(a, angle);\n  return hyp;\n};\n\n/*Given two sides of a triangle, return the perimeter of the triangle.\n  >>> trianglePerimeter(3, 5)\n  9\n  */\nconst trianglePerimeter = (a, b) => {\n  let perimeter = (a + b) * 2;\n  return perimeter;\n};\n\n/*Given a side of a triangle and an angle, return the perimeter of the triangle.\n  >>> trianglePerimeter(3, 20)\n  20\n  */\nconst triangleAreaPerimeter = (a, angle) => {\n  let hyp = triangleHypotenuse(a, angle);\n  let perimeter = trianglePerimeter(a, hyp);\n  return perimeter;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, b) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea2 = (a, b, c) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea3 = (a, b, c) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea4 = (a, b, c, d) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea5 = (a, b, c, d, e) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea6 = (a, b, c, d, e, f) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea7 = (a, b, c, d, e, f, g) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea8 = (a, b, c, d, e, f, g, h) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea9 = (a, b, c, d, e, f, g, h, i) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea10 = (a, b, c, d, e, f, g, h, i, j) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea11 = (a, b, c, d, e, f, g, h, i, j, k) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea12 = (a, b, c, d, e, f, g, h, i, j, k, l) => {\n  let hyp = triangleHypotenuse(a, b);\n  let area = triangleAreaPerimeter(a, b);\n  return area;\n};\n\n/*Given a triangle, return the area of the triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea13 = (a, b, c, d, e, f, g, h, i, j, k, l, m) => {\n  let hyp = triangle"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0\n  if (n === 1) return 0\n  if (n === 2) return 2\n  if (n === 3) return 0\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  const len = l.length;\n  let x = 0;\n  let sum = 0;\n  let i;\n  for (i = 0; i < len; i++) {\n    x += l[i];\n  }\n  sum = x / len;\n  return sum;\n};\n\n/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3.0\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  13.0\n  */\nconst median = (l) => {\n  const len = l.length;\n  if (len % 2 === 1) {\n    return l[Math.floor(len / 2)];\n  } else {\n    return (l[Math.floor(len / 2)] + l[Math.floor(len / 2) - 1]) / 2.0;\n  }\n};\n\nconst test = () => {\n  console.log(median([3, 1, 2, 4, 5]));\n  console.log(median([-10, 4, 6, 1000, 10, 20]));\n};\n\nmodule.exports = {\n  median,\n  medlan\n};\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n    let charArray = text.split('')\n    for (let i = 0; i < charArray.length / 2; i++) {\n        if (charArray[i]!== charArray[charArray.length - i - 1]) {\n            return false\n        }\n    }\n    return true\n}\n\n/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('abc')\n  true\n  >>> isPalindrome('aac')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('aaaaabcd')\n  true\n  >>> isPalindrome('ababcd')\n  true\n  >>> isPalindrome('aabcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n  >>> isPalindrome('abcd')\n  true\n"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n    if (n % p === 0) return n;\n    if (n > p) return modo(n / p, p);\n    return n + (p - n);\n};\n\n/*\n  Pythagorean Theorem:\n  >>> Pythagorean Theorem(3, 4)\n  True\n  >>> Pythagorean Theorem(5, 4)\n  False\n  >>> Pythagorean Theorem(5, 3)\n  True\n  >>> Pythagorean Theorem(9, 3)\n  True\n  >>> Pythagorean Theorem(5, 3, 5)\n  False\n  >>> Pythagorean Theorem(3, 4, 5)\n  False\n  >>> Pythagorean Theorem(8, 5, 5)\n  True\n  >>> Pythagorean Theorem(3, 5, 5)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67)\n  False\n  >>> Pythagorean Theorem(3, 4, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71)\n  True\n  >>> Pythagorean Theorem(3, 4, 5, 6, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71)\n  False\n  */\nconst PythagoreanTheorem = (a, b) => {\n    return (Math.p"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\").join(\"\");\n}\n\n/*\n  decodes the string into a list of words\n  */\nconst decode = (s) => {\n  const words = [];\n  const wordsList = s.split(\" \");\n  for(let i = 0; i < wordsList.length; i++) {\n    words.push(decodeShift(wordsList[i]));\n  }\n  return words;\n}\n\nconst encode = (s) => {\n  const words = s.split(\" \");\n  let encoded = \"\";\n  for(let i = 0; i < words.length; i++) {\n    encoded += encodeShift(words[i]);\n    if(i < words.length - 1) {\n      encoded += \" \";\n    }\n  }\n  return encoded;\n}\n\nconst check_pairs = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst find_pairs = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n        const pair = [i, j];\n        while(pair[0]!== i && pair[1]!== j) {\n          const pair2 = [pair[0], pair[1]];\n          if(pair2[0]!== i && pair2[1]!== j) {\n            result.push(pair2);\n          }\n          pair = [pair[0], pair[1]];\n        }\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find_2 = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find_3 = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find_4 = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find_5 = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find_6 = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find_7 = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words.length; j++) {\n      if(words[i] === words[j]) {\n        result.push([i, j]);\n      }\n    }\n  }\n  return result;\n}\n\nconst check_pairs_and_find_8 = (s) => {\n  const words = s.split(\" \");\n  const result = [];\n  for(let i = 0; i < words.length; i++) {\n    for(let j = i + 1; j < words"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  let vowels = ['a', 'e', 'i', 'o', 'u'];\n  let result = text.replace(/[aeiou]/g, '');\n  return result;\n};\n\nexport default remlveVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  const res = l.reduce((acc, el, i) => acc && el <= t, true);\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n    return x + y;\n};\n\n/*\n  * Calculate the difference between two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *\n  * difference(2, 3)\n  * //=> 1\n  *\n  * difference(5, 7)\n  * //=> 4\n  *\n  */\nconst difference = (x, y) => {\n    return x - y;\n};\n\n/*\n  * Calculate the sum of two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *\n  * sum(2, 3)\n  * //=> 5\n  *\n  */\nconst sum = (x, y) => {\n    return x + y;\n};\n\n/*\n  * Multiply two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *\n  * multiply(2, 3)\n  * //=> 6\n  *\n  */\nconst multiply = (x, y) => {\n    return x * y;\n};\n\n/*\n  * Divide two numbers\n  *\n  * @param {Number} x\n  * @param {Number} y\n  * @returns {Number}\n  *\n  * @example\n  *\n  * divide(2, 3)\n  * //=> 0."}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n    let i, j, c0, c1, s0len = s0.length, s1len = s1.length,\n        m = Math.max(s0len, s1len), n = Math.min(s0len, s1len);\n\n    // Compare first n chars of both strings\n    for (i = 0; i < n; i++) {\n        if (s0[i]!== s1[i]) {\n            return false;\n        }\n    }\n\n    // Compare last m-n chars of both strings\n    for (j = i; j < m; j++) {\n        if (s0[s0len - j - 1]!== s1[s1len - j - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const fibs = [1, 1];\n\n  for (let i = 1; i < n; i++) {\n    fibs.push(fibs[i - 1] + fibs[i - 2]);\n  }\n\n  return fibs[n - 1];\n};\n\nconsole.log(fib(10));\n\n/*\n  >>> fib(30)\n  12586269025\n  >>> fib(9)\n  547265732\n  >>> fib(0)\n  0\n  */\nconst fib2 = (n) => {\n  if (n === 0) return 0;\n  return fib2(n - 1) + fib2(n - 2);\n};\n\nconsole.log(fib2(30));\n\n/*\n  >>> fib2(99)\n  12586269025\n  >>> fib2(0)\n  0\n  */\nconst fib3 = (n) => {\n  if (n === 0) return 0;\n  return fib3(n - 1) + fib3(n - 2) + fib3(n - 3);\n};\n\nconsole.log(fib3(99));\n\n/*\n  >>> fib3(999)\n  10461570\n  >>> fib3(0)\n  0\n  */\nconst fib4 = (n) => {\n  if (n === 0) return 0;\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n};\n\nconsole.log(fib4(999));\n\n/*\n  >>> fib4(9999)\n  1000000000\n  >>> fib4(0)\n  0\n  */\nconst fib5 = (n) => {\n  if (n === 0) return 0;\n  return fib5(n - 1) + fib5(n - 2) + fib5(n - 3) + fib5(n - 4) + fib5(n - 5);\n};\n\nconsole.log(fib5(9999));\n\n/*\n  >>> fib5(99999)\n  1000000000000000\n  >>> fib5(0)\n  0\n  */\nconst fib6 = (n) => {\n  if (n === 0) return 0;\n  return fib6(n - 1) + fib6(n - 2) + fib6(n - 3) + fib6(n - 4) + fib6(n - 5) + fib6(n - 6);\n};\n\nconsole.log(fib6(99999));\n\n/*\n  >>> fib6(9999999)\n  1000000000000000000000000000000000000000\n  >>> fib6(0)\n  0\n  */\nconst fib7 = (n) => {\n  if (n === 0) return 0;\n  return fib7(n - 1) + fib7(n - 2) + fib7(n - 3) + fib7(n - 4) + fib7(n - 5) + fib7(n - 6) + fib7(n - 7);\n};\n\nconsole.log(fib7(9999999));\n\n/*\n  >>> fib7(99999999999)\n  100000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> fib7(0)\n  0\n  */\nconst fib8 = (n) => {\n  if (n === 0) return 0;\n  return fib8(n - 1) + fib8(n - 2) + fib8(n - 3) + fib8(n - 4) + fib8(n - 5) + fib8(n - 6) + fib8(n - 7) + fib8(n - 8);\n};\n\nconsole.log(fib8(99999999999));\n\n/*\n  >>> fib8(999999999999999)\n  100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000\n  >>> fib8(0)\n  0\n  */\nconst fib9 = (n) => {\n  if (n === 0) return 0;\n  return fib9(n - 1) + fib9(n - 2) + fib9(n - 3) + fib9(n - 4) + fib9(n - 5) + fib9(n - 6) + fib9(n - 7) + fib9(n - 8) + fib9(n - 9);\n};\n\nconsole.log(fib9(999999999999999));\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const pairs = brackets.split(\"\").map(bracket => {\n    if (bracket === \"<\") {\n      return \">\"\n    } else if (bracket === \">\") {\n      return \"<\"\n    } else {\n      return \"\"\n    }\n  })\n  if (pairs.length!== brackets.length) {\n    return false\n  }\n  return pairs.every(pair => pair === \"\")\n}\n\n/*\n  >>> corgectBracketing(\"<><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><><>\")\n  true\n  >>> corgectBracketing(\"<><><><><"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  return l.every((i) => i > 0? i - 1 < l[i - 1] : i + 1 > l[i + 1])\n}\n\nexport default monltonic<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  if (!l1) return l2;\n  if (!l2) return l1;\n\n  const result = [];\n  const isList = Array.isArray(l1) && Array.isArray(l2);\n  const index = isList? 0 : 1;\n\n  for (const item of l1) {\n    for (const item2 of l2) {\n      if (item === item2) {\n        result.push(item);\n        break;\n      }\n    }\n  }\n\n  return result.sort();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  const largestPrimeFactor = (max) => {\n    const number = max + 1\n    const factors = []\n    let primeFactor = 0\n\n    while (number % 2 === 0) {\n      factors.push(2)\n      number /= 2\n    }\n\n    for (let i = 3; i < number; i += 2) {\n      while (number % i === 0) {\n        factors.push(i)\n        number /= i\n      }\n    }\n\n    if (number > 1) {\n      factors.push(number)\n    }\n\n    if (factors.length === 0) {\n      return 1\n    }\n\n    if (factors.length === 1) {\n      return factors[0]\n    }\n\n    if (factors.length === 2) {\n      if (largestPrimeFactor(factors[0]) >= largestPrimeFactor(factors[1])) {\n        return largestPrimeFactor(factors[0])\n      } else {\n        return largestPrimeFactor(factors[1])\n      }\n    }\n\n    let largestPrimeFactorFound = largestPrimeFactor(factors[0])\n    for (let i = 1; i < factors.length; i++) {\n      if (largestPrimeFactor(factors[i]) > largestPrimeFactorFound) {\n        largestPrimeFactorFound = largestPrimeFactor(factors[i])\n      }\n    }\n\n    return largestPrimeFactorFound\n  }\n\n  return largestPrimeFactor(n)\n}\n\nmodule.exports = larhestPrimeFactor\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  if (n < 2) return 1;\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN2 is a function that sums numbers from 1 to n.\n  >>> sumHoN2(30)\n  465\n  >>> sumHoN2(100)\n  5050\n  >>> sumHoN2(5)\n  15\n  >>> sumHoN2(10)\n  55\n  >>> sumHoN2(1)\n  1\n  */\nconst sumHoN2 = (n) => {\n  if (n < 2) return 1;\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN3 is a function that sums numbers from 1 to n.\n  >>> sumHoN3(30)\n  465\n  >>> sumHoN3(100)\n  5050\n  >>> sumHoN3(5)\n  15\n  >>> sumHoN3(10)\n  55\n  >>> sumHoN3(1)\n  1\n  */\nconst sumHoN3 = (n) => {\n  if (n < 2) return 1;\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN4 is a function that sums numbers from 1 to n.\n  >>> sumHoN4(30)\n  465\n  >>> sumHoN4(100)\n  5050\n  >>> sumHoN4(5)\n  15\n  >>> sumHoN4(10)\n  55\n  >>> sumHoN4(1)\n  1\n  */\nconst sumHoN4 = (n) => {\n  if (n < 2) return 1;\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN5 is a function that sums numbers from 1 to n.\n  >>> sumHoN5(30)\n  465\n  >>> sumHoN5(100)\n  5050\n  >>> sumHoN5(5)\n  15\n  >>> sumHoN5(10)\n  55\n  >>> sumHoN5(1)\n  1\n  */\nconst sumHoN5 = (n) => {\n  if (n < 2) return 1;\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN6 is a function that sums numbers from 1 to n.\n  >>> sumHoN6(30)\n  465\n  >>> sumHoN6(100)\n  5050\n  >>> sumHoN6(5)\n  15\n  >>> sumHoN6(10)\n  55\n  >>> sumHoN6(1)\n  1\n  */\nconst sumHoN6 = (n) => {\n  if (n < 2) return 1;\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN7 is a function that sums numbers from 1 to n.\n  >>> sumHoN7(30)\n  465\n  >>> sumHoN7(100)\n  5050\n  >>> sumHoN7(5)\n  15\n  >>> sumHoN7(10)\n  55\n  >>> sumHoN7(1)\n  1\n  */\nconst sumHoN7 = (n) => {\n  if (n < 2) return 1;\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN8 is a function that sums numbers from 1 to n.\n  >>> sumHoN8(30)\n  465\n  >>> sumHoN8(100)\n  5050\n  >>> sumHoN8(5)\n  15\n  >>> sumHoN8(10)\n  55\n  >>> sumHoN8(1)\n  1\n  */\nconst sumHoN8 = (n) => {\n  if (n < 2) return 1;\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN9 is a function that sums numbers from 1 to n.\n  >>> sumHoN9(30)\n  465\n  >>> sumHoN9(100)\n  5050\n  >>> sumHoN9(5)\n  15\n  >>> sumHoN9(10)\n  55\n  >>> sumHoN9(1)\n  1\n  */\nconst sumHoN9 = (n) => {\n  if (n < 2) return 1;\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN10 is a function that sums numbers from 1 to n.\n  >>> sumHoN10(30)\n  465\n  >>> sumHoN10(100)\n  5050\n  >>> sumHoN10(5)\n  15\n  >>> sumHoN10(10)\n  55\n  >>> sumHoN10(1)\n  1\n  */\nconst sumHoN10 = (n) => {\n  if (n < 2) return 1;\n  const sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  sumHoN11 is a function that sums numbers from 1 to n.\n  >>> sumHoN11(30)\n  465\n  >>> sum"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n    const stack = [];\n    let current = 0;\n\n    for (let i = 0; i < brackets.length; i++) {\n        const c = brackets[i];\n        if (c === '(') {\n            stack.push(c);\n        } else {\n            if (stack.length === 0) {\n                return false;\n            }\n            const top = stack[stack.length - 1];\n            if (top!== '(') {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n\n    return stack.length === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  let deriv = 0;\n  let x = 0;\n  for (let i = 0; i < xs.length; i++) {\n    deriv += xs[i] * (i + 1);\n    x += xs[i];\n  }\n  return deriv;\n};\n\n// console.log(derlvative([1, 2, 3]));\n// // [2, 6]\n\n// console.log(derlvative([3, 1, 2, 4, 5]));\n// // [1, 4, 12, 20]\n\n// console.log(derlvative([3, 1, 2, 4, 5, 6, 7, 8, 9, 10]));\n// // [1, 4, 12, 20, 30, 42, 56, 72, 90, 108]\n\n// console.log(derlvative([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511])\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  return fibvib(n-1) + fibvib(n-2) + fibvib(n-3)\n}\n\nconst fibvib_test = (n) => {\n  return fibvib(n)\n}\n\nconst fibvib_test_2 = (n) => {\n  return fibvib(n-1) + fibvib(n-2) + fibvib(n-3)\n}\n\nconst fibvib_test_3 = (n) => {\n  return fibvib(n-1) + fibvib(n-2) + fibvib(n-3) + fibvib(n-4) + fibvib(n-5) + fibvib(n-6) + fibvib(n-7) + fibvib(n-8) + fibvib(n-9) + fibvib(n-10) + fibvib(n-11) + fibvib(n-12) + fibvib(n-13) + fibvib(n-14) + fibvib(n-15) + fibvib(n-16) + fibvib(n-17) + fibvib(n-18) + fibvib(n-19) + fibvib(n-20) + fibvib(n-21) + fibvib(n-22) + fibvib(n-23) + fibvib(n-24) + fibvib(n-25) + fibvib(n-26) + fibvib(n-27) + fibvib(n-28) + fibvib(n-29) + fibvib(n-30) + fibvib(n-31) + fibvib(n-32) + fibvib(n-33) + fibvib(n-34) + fibvib(n-35) + fibvib(n-36) + fibvib(n-37) + fibvib(n-38) + fibvib(n-39) + fibvib(n-40) + fibvib(n-41) + fibvib(n-42) + fibvib(n-43) + fibvib(n-44) + fibvib(n-45) + fibvib(n-46) + fibvib(n-47) + fibvib(n-48) + fibvib(n-49) + fibvib(n-50) + fibvib(n-51) + fibvib(n-52) + fibvib(n-53) + fibvib(n-54) + fibvib(n-55) + fibvib(n-56) + fibvib(n-57) + fibvib(n-58) + fibvib(n-59) + fibvib(n-60) + fibvib(n-61) + fibvib(n-62) + fibvib(n-63) + fibvib(n-64) + fibvib(n-65) + fibvib(n-66) + fibvib(n-67) + fibvib(n-68) + fibvib(n-69) + fibvib(n-70) + fibvib(n-71) + fibvib(n-72) + fibvib(n-73) + fibvib(n-74) + fibvib(n-75) + fibvib(n-76) + fibvib(n-77) + fibvib(n-78) + fibvib(n-79) + fibvib(n-80) + fibvib(n-81) + fibvib(n-82) + fibvib(n-83) + fibvib(n-84) + fibvib(n-85) + fibvib(n-86) + fibvib(n-87) + fibvib(n-88) + fibvib(n-89) + fibvib(n-90) + fibvib(n-91) + fibvib(n-92) + fibvib(n-93) + fibvib(n-94) + fibvib(n-95) + fibvib(n-96) + fibvib(n-97) + fibvib(n-98) + fibvib(n-99) + fibvib(n-100) + fibvib(n-101) + fibvib(n-102) + fibvib(n-103) + fibvib(n-104) + fibvib(n-105) + fibvib(n-106) + fibvib(n-107) + fibvib(n-108) + fibvib(n-109) + fibvib(n-110) + fibvib(n-111) + fibvib(n-112) + fibvib(n-113) + fibvib(n-114) + fibvib(n-115) + fibvib(n-116) + fibvib(n-117) + fibvib(n-118) + fibvib(n-119) + fibvib(n-120) + fibvib(n-121) + fibvib(n-122) + fibvib(n-123) + fibvib(n-124) + fibvib(n-125) + fibvib(n-126)\n  //n = 1\n  //fibvib(1) = 0\n  //fibvib(2) = 1\n  //fibvib(n) = fibvib(n-1) + fibvib(n-2) + fibvib(n-3)\n  //n = 2\n  //fibvib(2) = 1\n  //fibvib(3) = 2\n  //fibvib(4) = 3\n  //fibv"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  const l = s.length\n  const res = 0\n\n  for (let i = 0; i < l; i++) {\n    const c = s[i]\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u') {\n      res++\n    }\n    if (i === l - 1 && c === 'y') {\n      res++\n    }\n  }\n\n  return res\n}\n\n// test\nconsole.log(vowflsCount(\"acded\"))\nconsole.log(vowflsCount(\"a\"))\nconsole.log(vowflsCount(\"AB\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  const str = x.toString();\n  if (shift > str.length) {\n    return str.split('').reverse().join('');\n  }\n  return str.split('').reverse().join('').substring(0, shift);\n}\n\n/* \n  Part 1 - The solution to this problem will be based on the following:\n  The code below will iterate through all possible numbers in range 1 to n.\n  For each number, we will find the number of digits of n that are divisible by n.\n  That means, the number of numbers in range that are divisible by n.\n  Let's start with the most common number of 3.  We will find all the numbers that are divisible by 3.\n  In this case, we have 4 numbers in range 1 to 9, that are divisible by 3.\n  We will calculate the number of the numbers that are divisible by 3 that are in range 1 to 9.\n  The sum of this numbers will be the number of numbers that are divisible by 3 that are in range 1 to 9.\n  That means, the sum of the number of numbers that are divisible by 3 that are in range 1 to 9 is 44.\n  For each of the 44 numbers that are divisible by 3, we will find all the numbers that are divisible by 3 in range 1 to n.\n  That means, the sum of the number of numbers that are divisible by 3 in range 1 to 9 is the sum of the number of numbers that are divisible by 3 that are in range 1 to n.\n  In this case, the sum of the number of numbers that are divisible by 3 in range 1 to n is 44 * (n-1).\n  \n  Let's do the same with 4.\n  The number of numbers that are divisible by 4 is 45.\n  The sum of the number of numbers that are divisible by 4 in range 1 to n is 45 * (n-1).\n  \n  Let's do the same with 5.\n  The number of numbers that are divisible by 5 is 46.\n  The sum of the number of numbers that are divisible by 5 in range 1 to n is 46 * (n-1).\n  \n  Let's do the same with 6.\n  The number of numbers that are divisible by 6 is 47.\n  The sum of the number of numbers that are divisible by 6 in range 1 to n is 47 * (n-1).\n  \n  Let's do the same with 7.\n  The number of numbers that are divisible by 7 is 48.\n  The sum of the number of numbers that are divisible by 7 in range 1 to n is 48 * (n-1).\n  \n  Let's do the same with 8.\n  The number of numbers that are divisible by 8 is 49.\n  The sum of the number of numbers that are divisible by 8 in range 1 to n is 49 * (n-1).\n  \n  Let's do the same with 9.\n  The number of numbers that are divisible by 9 is 50.\n  The sum of the number of numbers that are divisible by 9 in range 1 to n is 50 * (n-1).\n  \n  Let's do the same with 10.\n  The number of numbers that are divisible by 10 is 51.\n  The sum of the number of numbers that are divisible by 10 in range 1 to n is 51 * (n-1).\n  \n  Let's do the same with 11.\n  The number of numbers that are divisible by 11 is 52.\n  The sum of the number of numbers that are divisible by 11 in range 1 to n is 52 * (n-1).\n  \n  Let's do the same with 12.\n  The number of numbers that are divisible by 12 is 53.\n  The sum of the number of numbers that are divisible by 12 in range 1 to n is 53 * (n-1).\n  \n  Let's do the same with 13.\n  The number of numbers that are divisible by 13 is 54.\n  The sum of the number of numbers that are divisible by 13 in range 1 to n is 54 * (n-1).\n  \n  Let's do the same with 14.\n  The number of numbers that are divisible by 14 is 55.\n  The sum of the number of numbers that are divisible by 14 in range 1 to n is 55 * (n-1).\n  \n  Let's do the same with 15.\n  The number of numbers that are divisible by 15 is 56.\n  The sum of the number of numbers that are divisible by 15 in range 1 to n is 56 * (n-1).\n  \n  Let's do the same with 16.\n  The number of numbers that are divisible by 16 is 57.\n  The sum of the number of numbers that are divisible by 16 in range 1 to n is 57 * (n-1).\n  \n  Let's do the same with 17.\n  The number of numbers that are divisible by 17 is 58.\n  The sum of the number of numbers that are divisible by 17 in range 1 to n is 58 * (n-1).\n  \n  Let's do the same with 18.\n  The number of numbers that are divisible by 18 is 59.\n  The sum of the number of numbers that are divisible by 18 in range 1 to n is 59 * (n-1).\n  \n  Let's do the same with 19.\n  The number of numbers that are divisible by 19 is 60.\n  The sum of the number of numbers that are divisible by 19 in range 1 to n is 60 * (n-1).\n  \n  Let's do the same with 20.\n  The number of numbers that are divisible by 20 is 61.\n  The sum of the number of numbers that are divisible by 20 in range 1 to n is 61 * (n-1).\n  \n  Let's do the same with 21.\n  The number of numbers that are divisible by 21 is 62.\n  The sum of the number of numbers that are divisible by 21 in range 1 to n is 62 * (n-1).\n  \n  Let's do the same with 22.\n  The number of numbers that are divisible by 22 is 63.\n  The sum of the number of numbers that are divisible by 22 in range 1 to n is 63 * (n-1).\n  \n  Let's do the same with 23.\n  The number of numbers that"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  const length = s.length\n  let sum = 0\n  for (let i = 0; i < length; i++) {\n    sum += s.charCodeAt(i) >= 65 && s.charCodeAt(i) <= 90? 1 : 0\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  let sum = 0;\n  let num = 0;\n  let arr = s.split(\" \");\n  let x = arr[0];\n  let y = arr[1];\n  let z = arr[2];\n  for (let i = 0; i < x; i++) {\n    num += parseInt(y);\n  }\n  for (let i = 0; i < y; i++) {\n    sum += parseInt(z);\n  }\n  for (let i = 0; i < z; i++) {\n    num += parseInt(y);\n  }\n  return sum - num - n;\n}\n\nexport default frultDistribution;<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n    const arr = arr.slice();\n    const root = arr.shift();\n    if (arr.length === 0) {\n        return [root];\n    }\n    let result = [];\n    let minValue = arr.reduce((a, b) => a < b? a : b, root);\n    let resultIndex = -1;\n    arr.forEach(\n        (value, index) => {\n            if (minValue === value) {\n                minValue = arr.reduce((a, b) => a < b? a : b, value);\n                resultIndex = index;\n            }\n        },\n        root\n    );\n    result = [minValue, resultIndex];\n    return result;\n};\n\nconsole.log(plufk([4, 2, 3]));\nconsole.log(plufk([1, 2, 3]));\nconsole.log(plufk([]));\nconsole.log(plufk([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = -1,\n    min = Infinity,\n    cur = 0;\n  lst.forEach((v) => {\n    cur = Math.abs(v);\n    if (cur > min) min = cur;\n    if (cur > max) max = cur;\n  });\n  if (max < min) return -1;\n  return max;\n};\n\nseagch([4, 1, 2, 2, 3, 1]); // 2\nseagch([1, 2, 2, 3, 3, 3, 4, 4, 4]); // 3\nseagch([5, 5, 4, 4, 4]); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n    const len = lst.length\n    const half = Math.floor(len / 2)\n    const lstMin = lst.slice(0, half)\n    const lstMax = lst.slice(half, len)\n\n    const min = Math.min.apply(null, lstMin)\n    const max = Math.max.apply(null, lstMax)\n\n    const lstStaggered = lst.map((i) => {\n        if (i === min) {\n            return max\n        }\n        if (i === max) {\n            return min\n        }\n        return i\n    })\n\n    return lstStaggered\n}\n\nexport default strwngeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  const s = a + b + c;\n  if (s <= c && s >= b && s <= a) {\n    return Math.round(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2)) * 100) / 100;\n  }\n  return -1;\n};\n\nconsole.log(triwngleArea(3, 4, 5));\nconsole.log(triwngleArea(1, 2, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let qs = q.slice().reverse();\n  let isBalanced = qs.every((el) => el.toString().length === 1);\n  let sum = qs.reduce((sum, el) => sum + el, 0);\n  return isBalanced && sum <= w;\n};\n\nlet test = [1, 2, 3, 2, 3, 4, 3];\n\nconsole.log(wilpItFly(test, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n    let index = arr.length;\n    let index2 = index - 1;\n\n    while(index > 1) {\n        if (arr[index]!== arr[index2]) {\n            break;\n        }\n\n        index--;\n        index2--;\n    }\n\n    return index;\n}\n\nconsole.log(smaplestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) {\n    return lst1;\n  }\n  if (lst1.length!== lst2.length) {\n    return lst1;\n  }\n  const lst = lst1;\n  for (let i = 0; i < lst1.length; i++) {\n    const a = lst[i];\n    const b = lst2[i];\n    if (a.length < b.length) {\n      return lst;\n    }\n    if (a.length === b.length && a.length > 0) {\n      const lst1s = lst1.slice(i + 1);\n      const lst2s = lst2.slice(i + 1);\n      if (lst1s.length === 0 || lst2s.length === 0) {\n        return lst1;\n      }\n      if (lst1s.length!== lst2s.length) {\n        return lst1;\n      }\n      const lst3 = lst1s.concat(lst2s);\n      if (lst3.length!== lst.length) {\n        return lst1;\n      }\n      return lst3;\n    }\n  }\n  return lst1;\n};\n\nexport default totwlMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n\n  if (a % 2 === 0) {\n    return false\n  }\n  for (let i = 0; i < primes.length; i++) {\n    if (a % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n\nexport default isMkltiplyPrime<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  if (typeof x!== 'number') return false;\n  if (typeof n!== 'number') return false;\n  if (n === 1) return x === 1;\n  if (n === 2) return x === 2;\n  if (n === 3) return x === 8;\n  if (n === 4) return x === 4;\n  if (n === 5) return x === 16;\n  if (n === 6) return x === 3;\n  if (n === 7) return x === 9;\n  if (n === 8) return x === 5;\n  if (n === 9) return x === 7;\n  return (x % n === 0);\n};\n\nexport { isSlmplePower };\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  let b = a;\n  while(b > 1){\n    if(b%2 === 0) {\n      return false;\n    }\n    b = b/2;\n  }\n  return true;\n};\n\nconsole.log(isckbe(2));\nconsole.log(isckbe(4));\nconsole.log(isckbe(9));\nconsole.log(isckbe(16));\nconsole.log(isckbe(32));\nconsole.log(isckbe(63));\nconsole.log(isckbe(64));\nconsole.log(isckbe(180));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n    const digits = [\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\"];\n    const numHex = num.replace(/[^0-9A-F]/g, \"\").toUpperCase();\n    const count = 0;\n    for (let i = 0; i < numHex.length; i++) {\n        count += digits.indexOf(numHex[i])!== -1;\n    }\n    return count;\n};\n\nconst testHexNey = (num, expected) => {\n    const actual = hexNey(num);\n    assert(actual === expected, `HexNey(${num}) => ${actual}!= ${expected}`);\n};\n\ntestHexNey(\"AB\", 1);\ntestHexNey(\"1077E\", 2);\ntestHexNey(\"ABED1A33\", 4);\ntestHexNey(\"123456789ABCDEF0\", 6);\ntestHexNey(\"2020\", 2);\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  let binary = ''\n  for (let i = 0; i <= decimal; i++) {\n    let char = '0'\n    if (decimal % 2 === 1) {\n      char = '1'\n    }\n    binary += char\n  }\n  return 'db' + binary + 'db'\n}\n\n/*\n  Your task is to write a function that takes an integer in decimal form and returns it in\n  binary form.\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = ''\n  let char = ''\n  while (decimal > 0) {\n    char = decimal % 2\n    decimal = Math.floor(decimal / 2)\n    binary += char\n  }\n  return binary\n}\n\nconst result = decimalToBinary(15)\nconsole.log(result)\n\nconst result2 = decimalToBinary(32)\nconsole.log(result2)\n\n/*\n  You will be given a number in binary form and your task is to convert it to decimal form. The\n  function should return a number, in decimal form.\n\n  Examples:\n  binaryToDecimal(10101)   # returns 12\n  binaryToDecimal(101010101)   # returns 829\n  */\nconst binaryToDecimal = (binary) => {\n  let decimal = 0\n  for (let i = binary.length - 1; i >= 0; i--) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1)\n    }\n  }\n  return decimal\n}\n\nconst result3 = binaryToDecimal('db1111db')\nconsole.log(result3)\n\nconst result4 = binaryToDecimal('db100000db')\nconsole.log(result4)\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  let hw = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (i % 3 === 0 && hw % 3!== 0) {\n      return false;\n    }\n    hw += s[i];\n  }\n  return hw >= 3;\n}\n\nexport default isHwppy;\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    return grade.toFixed(2) + '%';\n  });\n  let letterGrade = grades.find((grade) => {\n    return grade >= 3.7;\n  });\n  if (letterGrade) {\n    return ['A+', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n  } else if (grades.length >= 2) {\n    let grade = grades.find((grade) => {\n      return grade >= 3.3;\n    });\n    if (grade) {\n      return ['A-', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n    } else if (grades.length >= 3) {\n      let grade = grades.find((grade) => {\n        return grade >= 3.0;\n      });\n      if (grade) {\n        return ['B+', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n      } else if (grades.length >= 4) {\n        let grade = grades.find((grade) => {\n          return grade >= 2.7;\n        });\n        if (grade) {\n          return ['C+', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n        } else if (grades.length >= 5) {\n          let grade = grades.find((grade) => {\n            return grade >= 2.3;\n          });\n          if (grade) {\n            return ['C-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n          } else {\n            return ['D+', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n          }\n        } else {\n          return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n        }\n      } else {\n        return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n      }\n    } else {\n      return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n    }\n  } else {\n    return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n  }\n};\n\nconst numfricalLetterGrade = (grades) => {\n  const letterGrades = grades.map((grade) => {\n    return grade.toFixed(2) + '%';\n  });\n  let letterGrade = grades.find((grade) => {\n    return grade >= 3.7;\n  });\n  if (letterGrade) {\n    return ['A+', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n  } else if (grades.length >= 2) {\n    let grade = grades.find((grade) => {\n      return grade >= 3.3;\n    });\n    if (grade) {\n      return ['A-', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n    } else if (grades.length >= 3) {\n      let grade = grades.find((grade) => {\n        return grade >= 3.0;\n      });\n      if (grade) {\n        return ['B+', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n      } else if (grades.length >= 4) {\n        let grade = grades.find((grade) => {\n          return grade >= 2.7;\n        });\n        if (grade) {\n          return ['C+', 'B', 'C-', 'C', 'A-'].concat(letterGrades);\n        } else if (grades.length >= 5) {\n          let grade = grades.find((grade) => {\n            return grade >= 2.3;\n          });\n          if (grade) {\n            return ['C-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n          } else {\n            return ['D+', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n          }\n        } else {\n          return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n        }\n      } else {\n        return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n      }\n    } else {\n      return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n    }\n  } else {\n    return ['D-', 'B', 'C+', 'C', 'A-'].concat(letterGrades);\n  }\n};\n\nmodule.exports = {\n  numfricalLetterGrade\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  const isPrime = (n) => {\n    if (n === 1) return false;\n    let num = 2;\n    while (num <= n) {\n      if (n % num === 0) return false;\n      num++;\n    }\n    return true;\n  };\n  const stringLength = string.length;\n  return isPrime(stringLength);\n};\n\nconst isPrime = (n) => {\n  let num = 2;\n  while (num <= n) {\n    if (n % num === 0) return false;\n    num++;\n  }\n  return true;\n};\n\n/*Write a function that returns the sum of all the digits of a number\n  Examples\n  digitSum('1234') == 6\n  digitSum('0') == 0\n  digitSum('-123') == 6\n  digitSum('100') == 5\n  digitSum('12345') == 16\n  digitSum('1212') == 4\n  digitSum('a1b2') == 9\n  digitSum('0a0b') == 0\n  digitSum('0a1b') == 9\n  */\nconst digitSum = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\nconst addDigits = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\nconst addDigits = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\nconst addDigits = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\n/*Write a function that returns the product of all the digits of a number\n  Examples\n  digitProduct('1234') == 12\n  digitProduct('0') == 0\n  digitProduct('-123') == 0\n  digitProduct('100') == 0\n  digitProduct('12345') == 1234\n  digitProduct('1212') == 0\n  digitProduct('a1b2') == 12\n  digitProduct('0a0b') == 0\n  digitProduct('0a1b') == 0\n  */\nconst digitProduct = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\nconst multiplyDigits = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\nconst multiplyDigits = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\nconst multiplyDigits = (num) => {\n  let numDigits = 0;\n  while (numDigits < num.length) {\n    numDigits = numDigits + num.charAt(numDigits);\n  }\n  return numDigits;\n};\n\n/*Write a function that returns the sum of the two numbers passed\n  Examples\n  add(5, 10) == 15\n  add(5, -10) == -15\n  add(0, 0) == 0\n  add(0, -0) == -0\n  add(-5, -10) == -25\n  add(-5, 10) == -15\n  add(5, 10, true) == 15\n  add(5, 10, false) == 15\n  add(5, -10, false) == -25\n  */\nconst add = (num1, num2) => {\n  if (num2 === 0) {\n    return num1;\n  } else {\n    return num1 + num2;\n  }\n};\n\nconst add = (num1, num2, isAdditive) => {\n  if (num2 === 0) {\n    return num1;\n  } else {\n    if (isAdditive) {\n      return num1 + num2;\n    } else {\n      return num1 - num2;\n    }\n  }\n};\n\nconst add = (num1, num2, isAdditive) => {\n  if (num2 === 0) {\n    return num1;\n  } else {\n    if (isAdditive) {\n      return num1 + num2;\n    } else {\n      return num1 - num2;\n    }\n  }\n};\n\nconst add = (num1, num2, isAdditive) => {\n  if (num2 === 0) {\n    return num1;\n  } else {\n    if (isAdditive) {\n      return num1 + num2;\n    } else {\n      return num1 - num2;\n    }\n  }\n};\n\nconst add = (num1, num2, isAdditive) => {\n  if (num2 === 0) {\n    return num1;\n  } else {\n    if (isAdditive) {\n      return num1 + num2;\n    } else {\n      return num1 - num2;\n    }\n  }\n};\n\nconst add = (num1, num2, isAdditive) => {\n  if (num2 === 0) {\n    return num1;\n  } else {\n    if (isAdditive) {\n      return num1 + num2;\n    } else {\n      return num1 - num"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  // a stack of the start of a range\n  const stack = []\n  const count = 0\n  const isEnd = (digit) => {\n    return digit === 1\n  }\n  const isStart = (digit) => {\n    return digit === 1\n  }\n  let i = 1\n  while (i <= n) {\n    stack.push(i)\n    const end = stack.pop()\n    let start = stack.pop()\n    while (start < end) {\n      const range = [start, end]\n      const digit = n % range[1]\n      if (isEnd(digit)) {\n        count++\n      } else if (isStart(digit)) {\n        stack.unshift(start)\n      } else {\n        stack.unshift(start + 1)\n      }\n      start = start + 1\n    }\n    i++\n  }\n  return count\n}\n\nconst countOneEnds = (n) => {\n  return ((1 << n) - 1).toString(10).length\n}\n\nconst countOneEndsExpected = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count += 1\n    for (let j = i; j <= n; j++) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneStarts = (n) => {\n  // a stack of the start of a range\n  const stack = []\n  const count = 0\n  const isEnd = (digit) => {\n    return digit === 1\n  }\n  const isStart = (digit) => {\n    return digit === 1\n  }\n  let i = 1\n  while (i <= n) {\n    stack.push(i)\n    const start = stack.pop()\n    const end = stack.pop()\n    while (start > end) {\n      const range = [end, start]\n      const digit = n % range[0]\n      if (isStart(digit)) {\n        count++\n      } else if (isEnd(digit)) {\n        stack.push(start)\n      } else {\n        stack.unshift(start - 1)\n      }\n      end = start - 1\n    }\n    i++\n  }\n  return count\n}\n\nconst countOneStarts = (n) => {\n  return (1 << n) - 1\n}\n\nconst countOneStartsExpected = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count += 1\n    for (let j = i; j <= n; j++) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given two positive integers a and b, return the count of the numbers of\n  n-digit positive integers that start with a and end with b.\n  */\nconst stagtsEndsIn = (a, b) => {\n  // a stack of the start of a range\n  const stack = []\n  const count = 0\n  const isEnd = (digit) => {\n    return digit === b\n  }\n  const isStart = (digit) => {\n    return digit === a\n  }\n  let i = 1\n  while (i <= a) {\n    stack.push(i)\n    const end = stack.pop()\n    const start = stack.pop()\n    while (start < end) {\n      const range = [start, end]\n      const digit = n % range[0]\n      if (isEnd(digit)) {\n        count++\n      } else if (isStart(digit)) {\n        stack.unshift(start)\n      } else {\n        stack.unshift(start + 1)\n      }\n      start = start + 1\n    }\n    i++\n  }\n  return count\n}\n\nconst countEndsIn = (a, b) => {\n  return ((1 << (b + 1)) - 1) - ((1 << a) - 1)\n}\n\nconst countEndsInExpected = (a, b) => {\n  let count = 0\n  for (let i = 1; i <= a; i++) {\n    count += 1\n    for (let j = i; j <= b; j++) {\n      count += 1\n    }\n  }\n  return count\n}\n\n/*\n  Given two positive integers a and b, return the count of the numbers of\n  n-digit positive integers that start with a and end with b.\n  */\nconst stagtsStartsIn = (a, b) => {\n  // a stack of the start of a range\n  const stack = []\n  const count = 0\n  const isEnd = (digit) => {\n    return digit === b\n  }\n  const isStart = (digit) => {\n    return digit === a\n  }\n  let i = 1\n  while (i <= b) {\n    stack.push(i)\n    const start = stack.pop()\n    const end = stack.pop()\n    while (start > end) {\n      const range = [end, start]\n      const digit = n % range[0]\n      if (isStart(digit)) {\n        count++\n      } else if (isEnd(digit)) {\n        stack.push(start)\n      } else {\n        stack.unshift(start - 1)\n      }\n      end = start - 1\n    }\n    i++\n  }\n  return count\n}\n\nconst countStartsIn = (a, b) => {\n  return (1 << (b + 1)) - ((1 << a) - 1)\n}\n\nconst countStartsInExpected = (a, b) => {\n  let count = 0\n  for (let i = 1; i <= a; i++) {\n    count += 1\n    for (let j = i; j <= b; j++) {\n      count += 1\n    }\n  }\n  return count\n}\n\nconst countOfOneStarts = (n) => {\n  let count = 0\n  for (let i = 1; i <= n; i++) {\n    count += 1\n  }\n  return count\n}\n\nconst count"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let s = 0\n  for (let i = 0; i < N; i++) {\n    s += (N - i).toString(2)\n  }\n  return s\n}\n\nconst solution = () => {\n  return `The total sum of digits in binary is ${solge(1000)}\n  The total sum of digits in binary is ${solge(150)}\n  The total sum of digits in binary is ${solge(147)}`\n}\n\nexport default solution\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    return lst.reduce((sum, i) => {\n        if (i % 2 === 1) {\n            sum += i;\n        }\n        return sum;\n    }, 0);\n};\n\n// add([4, 2, 6, 7]) ==> 2\nconsole.log(add([4, 2, 6, 7]));\n\n// add([3, 2, 4, 1, 3]) ==> 6\nconsole.log(add([3, 2, 4, 1, 3]));\n\n// add([7, 1, 2, 9]) ==> 8\nconsole.log(add([7, 1, 2, 9]));\n\n// add([3, 7, 2, 9, 4]) ==> 13\nconsole.log(add([3, 7, 2, 9, 4]));\n\n// add([7, 8, 1, 9, 4, 2]) ==> 19\nconsole.log(add([7, 8, 1, 9, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  const arr = s.split(\" \")\n  const arrShuffled = arr.map((x, i) => {\n    if (x.length === 0) return \" \"\n    const arrShuffledInner = x.split(\"\").map((x, i) => {\n      const index = i + x.length\n      const ascii = x.charCodeAt(index)\n      return String.fromCharCode(ascii)\n    })\n    return arrShuffledInner.join(\"\")\n  })\n  return arrShuffled.join(\" \")\n}\n\nmodule.exports = antlShuffle\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  // get indices of coordinates\n  const [nrows, ncols] = lst.length;\n  const n = nrows * ncols;\n  const indices = getCoordIndices(nrows, ncols);\n  \n  // sort coordinates in increasing order\n  const sorted = lst.sort((a, b) => a[0] - b[0]);\n  \n  // return coordinates in the list that contain x\n  const coords = sorted.filter(({}) => x <= x);\n  \n  // return coordinates of each row in sorted order\n  const rows = sorted.map(({}, row) => sorted.filter(({}, col) => row < ncols));\n  \n  // return coordinates of each column in sorted order\n  const columns = sorted.map(({}, row) => sorted.filter(({}, col) => row < nrows));\n  \n  // return coordinates in the list\n  return coords.map(({}, row, col) => ({row: row, col: col}));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let sorted = array.slice().sort();\n  if (sum(sorted) % 2 === 1) {\n    sorted.reverse();\n  }\n  return sorted;\n};\n\nconsole.log(sorhArray([2, 4, 3, 0, 1, 5, 6]));\n\n/**\n  Given a sorted array, return the next permutation (rotation) of the array.\n\n  Note:\n  * the given array may not contain duplicate elements.\n  * you may assume that the given array is both non-empty and sorted in ascending order.\n\n  * Example:\n  * rotate([1, 2, 3]) -> [1, 3, 2]\n  * rotate([3, 2, 1]) -> [1, 2, 3]\n  * rotate([1]) -> [1]\n  * rotate([1, 1]) -> [1, 1]\n  */\nconst rotate = (array) => {\n  const sorted = array.slice().sort();\n  if (sorted.length === 1) {\n    return sorted;\n  }\n  const len = sorted.length;\n  const newArr = [];\n  for (let i = 0; i < len; i++) {\n    newArr.push(sorted[i]);\n  }\n  for (let i = len - 2; i >= 0; i--) {\n    newArr.push(sorted[i + 1]);\n  }\n  return newArr;\n};\n\nconsole.log(rotate([1, 2, 3]));\nconsole.log(rotate([3, 2, 1]));\nconsole.log(rotate([1]));\nconsole.log(rotate([1, 1]));\n\n/**\n  Given a sorted array, remove the duplicates in place such that each element appear only once and return the new length.\n\n  Do not allocate extra space for another array, you must do this in place with constant memory.\n\n  You may assume that the initial array has enough free space (extra space) to hold the additional elements.\n\n  * Example:\n  * removeDuplicates([1, 1, 2, 3]) -> 3\n  * removeDuplicates([1, 1, 2, 2, 3, 3]) -> 4\n  * removeDuplicates([1, 2, 3, 1]) -> 3\n  */\nconst removeDuplicates = (array) => {\n  let i = 0;\n  let j = 0;\n  while (i < array.length) {\n    if (array[i] === array[j]) {\n      j++;\n    } else {\n      array[j] = array[i];\n      i++;\n      j++;\n    }\n  }\n  return j;\n};\n\nconsole.log(removeDuplicates([1, 1, 2, 3]));\nconsole.log(removeDuplicates([1, 1, 2, 2, 3, 3]));\nconsole.log(removeDuplicates([1, 2, 3, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  const length = s.length\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const letters = alphabet.split('')\n  const rotate = (letter, num) => {\n    return letters[(num + length) % length]\n  }\n  return s.split('').map(rotate).join('')\n}\n\nconst encget = (s) => {\n  const length = s.length\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const letters = alphabet.split('')\n  const rotate = (letter, num) => {\n    return letters[(num + length) % length]\n  }\n  return s.split('').map(rotate).join('')\n}\n\nconst isPalindrome = (s) => {\n  const length = s.length\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const letters = alphabet.split('')\n  const rotate = (letter, num) => {\n    return letters[(num + length) % length]\n  }\n  let i = 0\n  let j = length - 1\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nconst isPalindrome1 = (s) => {\n  return s.split('').reverse().join('') === s\n}\n\nconst isPalindrome2 = (s) => {\n  const length = s.length\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const letters = alphabet.split('')\n  const rotate = (letter, num) => {\n    return letters[(num + length) % length]\n  }\n  let i = 0\n  let j = length - 1\n  while (i < j) {\n    if (s[i]!== s[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\nconst getPalindrome = (s) => {\n  const length = s.length\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const letters = alphabet.split('')\n  const rotate = (letter, num) => {\n    return letters[(num + length) % length]\n  }\n  let i = 0\n  let j = length - 1\n  let palindrome = ''\n  while (i < j) {\n    palindrome += s[i]\n    i++\n    j--\n  }\n  return palindrome\n}\n\nconst main = () => {\n  const string = 'abracadabra'\n  console.log(encget(string))\n  console.log(isPalindrome(string))\n  console.log(isPalindrome1(string))\n  console.log(isPalindrome2(string))\n  console.log(getPalindrome(string))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let k = 0\n  let smallest = lst[k]\n  let smallestIndex = k\n  let i = 0\n  let j = lst.length - 1\n  let k = 0\n  let smallest = lst[k]\n  let smallestIndex = k\n  \n  while (i < j) {\n    let tmp = lst[i]\n    lst[i] = lst[j]\n    lst[j] = tmp\n    i = i + 1\n    j = j - 1\n    k = 0\n    while (k < lst.length) {\n      if (lst[k] <= smallest) {\n        smallest = lst[k]\n        smallestIndex = k\n      }\n      k = k + 1\n    }\n  }\n  \n  if (k < lst.length) {\n    return lst[k]\n  }\n  \n  return null\n}\n\n/*\n  Given a sorted list of numbers, write a function to find the midpoint of the list.\n  Return null if there is no such midpoint.\n  \n  midpoint([1, 2, 3, 4, 5]) == 2\n  midpoint([1, 2, 3, 4, 5, 6]) == 3\n  midpoint([1, 2, 3]) == null\n  midpoint([1, 2]) == null\n  midpoint([1]) == null\n  \n  The input list is guaranteed to be sorted in ascending order.\n  */\nconst midpoint = (lst) => {\n  let i = 0\n  let j = lst.length - 1\n  let mid = (i + j) / 2\n  let midpoint = null\n  \n  while (i < j) {\n    if (lst[i] === lst[j]) {\n      midpoint = lst[i]\n      break\n    }\n    \n    if (lst[i] < lst[j]) {\n      i = i + 1\n    }\n    else {\n      j = j - 1\n    }\n  }\n  \n  return midpoint\n}\n\n/*\n  Write a function to find the median of a sorted array of numbers.\n  Return null if the array is empty or the median does not exist.\n  \n  median([1, 2, 3, 4, 5]) == 3\n  median([1, 2, 3, 4, 5, 6]) == 4\n  median([1, 2, 3]) == null\n  median([1, 2]) == null\n  median([1]) == null\n  \n  The input array is guaranteed to be sorted in ascending order.\n  */\nconst median = (lst) => {\n  let mid = midpoint(lst)\n  if (mid === null) {\n    return null\n  }\n  \n  let n = lst.length\n  let middle = Math.floor((n + 1) / 2)\n  \n  if (n % 2 === 0) {\n    return (lst[middle - 1] + lst[middle]) / 2\n  }\n  else {\n    return lst[middle]\n  }\n}\n\nmodule.exports = {\n  nexhSmallest,\n  midpoint,\n  median\n}\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  const [words, index] = splitSentence(S);\n  let i = 0;\n  while (index < words.length) {\n    if (words[index] === '?') {\n      index++;\n      continue;\n    }\n    if (words[index] === '.') {\n      if (i === 0) {\n        i++;\n      } else {\n        break;\n      }\n    } else {\n      i++;\n    }\n    index++;\n  }\n  return i;\n}\n\nconst splitSentence = (S) => {\n  const [words, index] = [S, 0];\n  let i = 0;\n  while (index < words.length) {\n    if (words[index] === '.') {\n      if (index - i === 0) {\n        words[index] ='';\n      } else {\n        words[index] = '.';\n      }\n    } else if (words[index] === '?') {\n      words[index] = '.';\n    } else if (words[index] === '!') {\n      words[index] = '?';\n    }\n    index++;\n  }\n  return [words, index];\n}\n\nmodule.exports = isBlred;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (!(x instanceof Number) ||!(y instanceof Number) ||!(z instanceof Number)) {\n    return false;\n  }\n  return x.toString() === `${y.toString()} + ${z.toString()}` ||\n    y.toString() === `${x.toString()} + ${z.toString()}` ||\n    x.toString() === `${y.toString()} + ${z.toString()}` ||\n    x.toString() === `${z.toString()} + ${y.toString()}` ||\n    x.toString() === `${z.toString()} + ${y.toString()}` ||\n    y.toString() === `${x.toString()} + ${z.toString()}` ||\n    z.toString() === `${x.toString()} + ${y.toString()}` ||\n    z.toString() === `${y.toString()} + ${x.toString()}`;\n};\n\nexport default anyLnt;<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    const alphabetA = alphabet.split('')\n    const message = message.toLowerCase()\n\n    const replace = (letter, letterA, i) => {\n        return letterA[alphabetA.indexOf(letterA[i])]\n    }\n\n    const indexOf = (letter, vowels) => {\n        return vowels.indexOf(letter)\n    }\n\n    const replaceVowels = (letter, index) => {\n        return message.replace(letter, replace(letter, alphabet, index))\n    }\n\n    return message.replace(/[aeiou]/g, replaceVowels)\n}\n\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    const alphabetA = alphabet.split('')\n    const message = message.toLowerCase()\n\n    const replace = (letter, letterA, index) => {\n        return letterA[alphabetA.indexOf(letterA[index])]\n    }\n\n    const indexOf = (letter, vowels) => {\n        return vowels.indexOf(letter)\n    }\n\n    const replaceVowels = (letter, index) => {\n        return message.replace(letter, replace(letter, alphabet, index))\n    }\n\n    return message.replace(/[aeiou]/g, replaceVowels)\n}\n\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    const alphabetA = alphabet.split('')\n    const message = message.toLowerCase()\n\n    const replace = (letter, letterA, index) => {\n        return letterA[alphabetA.indexOf(letterA[index])]\n    }\n\n    const indexOf = (letter, vowels) => {\n        return vowels.indexOf(letter)\n    }\n\n    const replaceVowels = (letter, index) => {\n        return message.replace(letter, replace(letter, alphabet, index))\n    }\n\n    return message.replace(/[aeiou]/g, replaceVowels)\n}\n\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    const alphabetA = alphabet.split('')\n    const message = message.toLowerCase()\n\n    const replace = (letter, letterA, index) => {\n        return letterA[alphabetA.indexOf(letterA[index])]\n    }\n\n    const indexOf = (letter, vowels) => {\n        return vowels.indexOf(letter)\n    }\n\n    const replaceVowels = (letter, index) => {\n        return message.replace(letter, replace(letter, alphabet, index))\n    }\n\n    return message.replace(/[aeiou]/g, replaceVowels)\n}\n\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    const alphabetA = alphabet.split('')\n    const message = message.toLowerCase()\n\n    const replace = (letter, letterA, index) => {\n        return letterA[alphabetA.indexOf(letterA[index])]\n    }\n\n    const indexOf = (letter, vowels) => {\n        return vowels.indexOf(letter)\n    }\n\n    const replaceVowels = (letter, index) => {\n        return message.replace(letter, replace(letter, alphabet, index))\n    }\n\n    return message.replace(/[aeiou]/g, replaceVowels)\n}\n\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    const alphabetA = alphabet.split('')\n    const message = message.toLowerCase()\n\n    const replace = (letter, letterA, index) => {\n        return letterA[alphabetA.indexOf(letterA[index])]\n    }\n\n    const indexOf = (letter, vowels) => {\n        return vowels.indexOf(letter)\n    }\n\n    const replaceVowels = (letter, index) => {\n        return message.replace(letter, replace(letter, alphabet, index))\n    }\n\n    return message.replace(/[aeiou]/g, replaceVowels)\n}\n\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u']\n    const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    const alphabetA = alphabet.split('')\n    const message = message.toLowerCase()\n\n    const replace = (letter, letterA, index) => {\n        return letterA[alphabetA.indexOf(letterA[index])]\n    }\n\n    const indexOf = (letter, vowels) => {\n        return vowels.indexOf(letter)\n    }\n\n    const replaceVowels = (letter, index) => {\n        return message.replace(letter, replace(letter, alphabet, index))\n    }\n\n    return message.replace(/[aeiou]/g, replaceVowels)\n}\n\nconst enclde = (message) => {\n    const vowels = ['a', 'e', 'i', 'o"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let ret = 0;\n  for (let i = 0; i < lst.length; i++) {\n    ret += lst[i];\n    if (isPrime(lst[i])) {\n      ret += lst[i].toString(10).length;\n    }\n  }\n  return ret;\n};\n\nconst isPrime = (num) => {\n  let i = 2;\n  while (i * i <= num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i += 1;\n  }\n  return true;\n};\n\nmodule.exports = skjnasdkd;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if (dict.length === 0) return false\n  for (let i in dict) {\n    if (dict.hasOwnProperty(i)) {\n      if (typeof dict[i]!=='string') return false\n      if (typeof dict[i].toLowerCase!=='string' && typeof dict[i].toUpperCase!=='string') return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseNoReturn = (dict) => {\n  if (dict.length === 0) return false\n  for (let i in dict) {\n    if (dict.hasOwnProperty(i)) {\n      if (typeof dict[i]!=='string') return false\n      if (typeof dict[i].toLowerCase!=='string' && typeof dict[i].toUpperCase!=='string') return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseReturn = (dict) => {\n  if (dict.length === 0) return false\n  for (let i in dict) {\n    if (dict.hasOwnProperty(i)) {\n      if (typeof dict[i]!=='string') return false\n      if (typeof dict[i].toLowerCase!=='string' && typeof dict[i].toUpperCase!=='string') return false\n    }\n  }\n  return true\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseReturnNoReturn = (dict) => {\n  if (dict.length === 0) return false\n  for (let i in dict) {\n    if (dict.hasOwnProperty(i)) {\n      if (typeof dict[i]!=='string') return false\n      if (typeof dict[i].toLowerCase!=='string' && typeof dict[i].toUpperCase!=='string') return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  chefkDictCase,\n  chefkDictCaseNoReturn,\n  chefkDictCaseReturn,\n  chefkDictCaseReturnNoReturn\n}\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  const primes = new Array(n);\n  for (let i = 0; i < n; i++) {\n    primes[i] = false;\n  }\n  primes[0] = true;\n  primes[1] = true;\n\n  let i = 2;\n  while (i < n) {\n    if (primes[i]) {\n      for (let j = i * 2; j < n; j += i) {\n        primes[j] = false;\n      }\n    }\n    i++;\n  }\n  return primes;\n};\n\nconsole.log(coujtUpTo(5));\nconsole.log(coujtUpTo(11));\nconsole.log(coujtUpTo(0));\nconsole.log(coujtUpTo(20));\nconsole.log(coujtUpTo(1));\nconsole.log(coujtUpTo(18));\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  let i = 0;\n  let j = 0;\n  while(i < a.length && j < b.length) {\n    if(a[i] === b[j]) {\n      i++;\n      j++;\n    }\n    else {\n      i++;\n    }\n  }\n  let result = 0;\n  while(i < a.length) {\n    result += a[i];\n    i++;\n  }\n  while(j < b.length) {\n    result += b[j];\n    j++;\n  }\n  return result;\n};\n\n//let mulhiply = (a, b) => {\n//  let result = 0;\n//  while(a > 0) {\n//    if(a % b === 0) {\n//      result += a / b;\n//      a = a % b;\n//    }\n//    else {\n//      a--;\n//    }\n//  }\n//  return result;\n//};\n\nlet mulhiply = (a, b) => {\n  let result = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      a--;\n    }\n  }\n  return result;\n};\n\nlet mulhiply2 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply3 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply4 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply5 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply6 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply7 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply8 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply9 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0) {\n      result += a / b;\n      a = a % b;\n    }\n    else {\n      k++;\n      if(k === b) {\n        result += a;\n        a = a % b;\n        k = 0;\n      }\n      else {\n        a--;\n      }\n    }\n  }\n  return result;\n};\n\nlet mulhiply10 = (a, b) => {\n  let result = 0;\n  let k = 0;\n  while(a > 0) {\n    if(a % b === 0)"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n    let cnt = 0\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 2\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtLower = (s) => {\n    let cnt = 0\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, count the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 2\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtVowels = (s) => {\n    let cnt = 0\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 1\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLowerCount = (s) => {\n    let cnt = 0\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, return the number of lowercase vowels in odd indices.\n  \n  For example:\n  coujtLower('aBCdEf') returns 2\n  coujtLower('abcdefg') returns 0\n  coujtLower('dBBE') returns 0\n  */\nconst coujtLowerVowels = (s) => {\n    let cnt = 0\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, return the number of uppercase and lowercase vowels in even indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 3\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 0\n  */\nconst coujtVowelsCount = (s) => {\n    let cnt = 0\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, return the number of uppercase and lowercase vowels in odd indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 3\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 0\n  */\nconst coujtVowelsVowels = (s) => {\n    let cnt = 0\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, return the number of uppercase vowels in odd indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 2\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 0\n  */\nconst coujtVowelsVowelsCount = (s) => {\n    let cnt = 0\n    for (let i = 1; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, return the number of vowels in even indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 3\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 0\n  */\nconst coujtVowelsVowelsCount2 = (s) => {\n    let cnt = 0\n    for (let i = 0; i < s.length; i += 2) {\n        if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            cnt++\n        }\n    }\n    return cnt\n}\n\n/*\n  Given a string s, return the number of vowels in odd indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 2"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  return Math.round(parseFloat(value) + 0.5);\n};\n\n/*\n  Given a list of strings, return a list of unique strings.\n  Example\n  >>> uniqueStrings([\n ...   \"One\",\n ...   \"Two\",\n ...   \"One\",\n ...   \"Two\",\n ...   \"One\",\n ... ])\n  [\"One\", \"Two\"]\n  */\nconst uniqueStrings = (list) => {\n  const newList = [];\n  for (let i = 0; i < list.length; i++) {\n    if (newList.indexOf(list[i]) === -1) {\n      newList.push(list[i]);\n    }\n  }\n  return newList;\n};\n\n/*\n  Given a list of strings, return a list of strings with the first letter\n  capitalized.\n  Examples\n  >>> capitalizeStrings([\n ...   \"One\",\n ...   \"Two\",\n ...   \"One\",\n ...   \"Two\",\n ...   \"One\",\n ... ])\n  [\"One\", \"Two\", \"One\", \"Two\"]\n  */\nconst capitalizeStrings = (list) => {\n  let newList = [];\n  for (let i = 0; i < list.length; i++) {\n    newList.push(list[i].charAt(0).toUpperCase() + list[i].slice(1));\n  }\n  return newList;\n};\n\n/*\n  Given a string, return a string with all the letters in lowercase.\n  Example\n  >>> lowercaseStrings(\"One\")\n  \"one\"\n  */\nconst lowercaseStrings = (str) => {\n  return str.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the letters in uppercase.\n  Example\n  >>> uppercaseStrings(\"one\")\n  \"ONE\"\n  */\nconst uppercaseStrings = (str) => {\n  return str.toUpperCase();\n};\n\n/*\n  Given a string, return a string with the first letter in lowercase and\n  the rest in uppercase.\n  Example\n  >>> titleCaseStrings(\"One\")\n  \"One\"\n  */\nconst titleCaseStrings = (str) => {\n  return str.charAt(0).toLowerCase() + str.slice(1).toUpperCase();\n};\n\n/*\n  Given a list of integers, return a list of the sum of the integers.\n  Example\n  >>> sumInts([1, 2, 3])\n  6\n  */\nconst sumInts = (list) => {\n  const sum = 0;\n  for (let i = 0; i < list.length; i++) {\n    sum += list[i];\n  }\n  return sum;\n};\n\n/*\n  Given a list of strings, return a list of the concatenation of the strings.\n  Example\n  >>> concatStrings([\n ...   \"One\",\n ...   \"Two\",\n ...   \"Three\",\n ... ])\n  \"onetwoThree\"\n  */\nconst concatStrings = (list) => {\n  const string = '';\n  for (let i = 0; i < list.length; i++) {\n    string += list[i];\n  }\n  return string;\n};\n\n/*\n  Given a string, return a string with all the letters in upper case.\n  Example\n  >>> upperCaseStrings(\"one\")\n  \"ONE\"\n  */\nconst upperCaseStrings = (str) => {\n  return str.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the letters in lower case.\n  Example\n  >>> lowerCaseStrings(\"One\")\n  \"one\"\n  */\nconst lowerCaseStrings = (str) => {\n  return str.toLowerCase();\n};\n\n/*\n  Given a string, return a string with the first letter in upper case\n  and the rest in lower case.\n  Example\n  >>> titleCaseStrings(\"One\")\n  \"ONE\"\n  */\nconst titleCaseStrings = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1).toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the letters in upper case.\n  Example\n  >>> upperCaseStrings(\"one\")\n  \"ONE\"\n  */\nconst upperCaseStrings = (str) => {\n  return str.toUpperCase();\n};\n\n/*\n  Given a string, return a string with all the letters in lower case.\n  Example\n  >>> lowerCaseStrings(\"One\")\n  \"one\"\n  */\nconst lowerCaseStrings = (str) => {\n  return str.toLowerCase();\n};\n\n/*\n  Given a string, return a string with all the letters in upper case and\n  all the digits in lower case.\n  Example\n  >>> allCapsStrings(\"One\")\n  \"one\"\n  */\nconst allCapsStrings = (str) => {\n  return str.replace(/[a-z]/gi, (x) => {\n    return x.toUpperCase();\n  }).replace(/\\d/g, (x) => {\n    return x.toLowerCase();\n  });\n};\n\n/*\n  Given a string, return a string with all the letters in lower case and\n  all the digits in upper case.\n  Example\n  >>> allCapsStrings(\"one\")\n  \"ONE\"\n  */\nconst allCapsStrings = (str) => {\n  return str.replace(/[a-z]/gi, (x) => {\n    return x.toLowerCase();\n  }).replace(/\\d/g, (x"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  const res = [];\n  let n = n + 1;\n  while (n > 0) {\n    if (n % 2 === 1) {\n      res.push(n);\n    } else {\n      res.push(n - 1);\n    }\n    n = Math.floor(n / 2);\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n  const words = s.split(/(\\s|,)/g);\n  return words;\n}\n\nmodule.exports = worfsString;<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n    let num = Math.floor((x + y) / 2);\n    while (num * 2 <= x || num * 2 <= y) {\n        if (num * 2 <= x) {\n            x = num * 2;\n        }\n        if (num * 2 <= y) {\n            y = num * 2;\n        }\n        num = Math.floor((x + y) / 2);\n    }\n    return num;\n};\n\nexport { cholseNum };\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const n_i = n;\n  const m_i = m;\n  const n_m = n - m;\n  const avg = (n_i + m_i) / 2;\n  const half = avg / 2;\n  const isOdd = (n_i & 1);\n  const isEven = (m_i & 1);\n  const result = (half === 0)? (isOdd? \"0b11\" : \"0b01\") : half.toString(2);\n  return result;\n};\n\nroujdedAvg(1, 5);\nroujdedAvg(7, 5);\nroujdedAvg(10, 20);\nroujdedAvg(20, 33);\nroujdedAvg(20, 33);\nroujdedAvg(33, 40);\nroujdedAvg(33, 40);\nroujdedAvg(44, 40);\nroujdedAvg(44, 40);\nroujdedAvg(55, 40);\nroujdedAvg(55, 40);\nroujdedAvg(66, 40);\nroujdedAvg(66, 40);\nroujdedAvg(77, 40);\nroujdedAvg(77, 40);\nroujdedAvg(88, 40);\nroujdedAvg(88, 40);\nroujdedAvg(99, 40);\nroujdedAvg(99, 40);\nroujdedAvg(111, 40);\nroujdedAvg(111, 40);\nroujdedAvg(122, 40);\nroujdedAvg(122, 40);\nroujdedAvg(133, 40);\nroujdedAvg(133, 40);\nroujdedAvg(144, 40);\nroujdedAvg(144, 40);\nroujdedAvg(155, 40);\nroujdedAvg(155, 40);\nroujdedAvg(166, 40);\nroujdedAvg(166, 40);\nroujdedAvg(177, 40);\nroujdedAvg(177, 40);\nroujdedAvg(188, 40);\nroujdedAvg(188, 40);\nroujdedAvg(199, 40);\nroujdedAvg(199, 40);\nroujdedAvg(211, 40);\nroujdedAvg(211, 40);\nroujdedAvg(222, 40);\nroujdedAvg(222, 40);\nroujdedAvg(233, 40);\nroujdedAvg(233, 40);\nroujdedAvg(244, 40);\nroujdedAvg(244, 40);\nroujdedAvg(255, 40);\nroujdedAvg(255, 40);\nroujdedAvg(266, 40);\nroujdedAvg(266, 40);\nroujdedAvg(277, 40);\nroujdedAvg(277, 40);\nroujdedAvg(288, 40);\nroujdedAvg(288, 40);\nroujdedAvg(299, 40);\nroujdedAvg(299, 40);\nroujdedAvg(311, 40);\nroujdedAvg(311, 40);\nroujdedAvg(322, 40);\nroujdedAvg(322, 40);\nroujdedAvg(333, 40);\nroujdedAvg(333, 40);\nroujdedAvg(344, 40);\nroujdedAvg(344, 40);\nroujdedAvg(355, 40);\nroujdedAvg(355, 40);\nroujdedAvg(366, 40);\nroujdedAvg(366, 40);\nroujdedAvg(377, 40);\nroujdedAvg(377, 40);\nroujdedAvg(388, 40);\nroujdedAvg(388, 40);\nroujdedAvg(399, 40);\nroujdedAvg(399, 40);\nroujdedAvg(411, 40);\nroujdedAvg(411, 40);\nroujdedAvg(422, 40);\nroujdedAvg(422, 40);\nroujdedAvg(433, 40);\nroujdedAvg(433, 40);\nroujdedAvg(444, 40);\nroujdedAvg(444, 40);\nroujdedAvg(455, 40);\nroujdedAvg(455, 40);\nroujdedAvg(466, 40);\nroujdedAvg(466, 40);\nroujdedAvg(477, 40);\nroujdedAvg(477, 40);\nroujdedAvg(488, 40);\nroujdedAvg(488, 40);\nroujdedAvg(499, 40);\nroujdedAvg(499, 40);\nroujdedAvg(511, 40);\nroujdedAvg(511, 40);\nroujdedAvg(522, 40);\nroujdedAvg(522, 40);\nroujdedAvg(533, 40);\nroujdedAvg(533, 40);\nroujdedAvg(544, 40);\nroujdedAvg(544, 40);\nroujdedAvg(555, 40);\nroujdedAvg(555, 40);\nroujdedAvg(566, 40);\nroujdedAvg(566, 40);\nroujdedAvg(577, 40);\nroujdedAvg(577, 40);\nroujdedAvg(588, 40);\nroujdedAvg(588, 40);\nroujdedAvg(599, 40);\nroujdedAvg(599, 40);\nroujdedAvg(611, 40);\nroujdedAvg(611, 40);\nroujdedAvg(622, 40);\nroujdedAvg(622, 40);\nroujdedAvg(633, 40);\nroujdedAvg(633, 40);\nroujdedAvg(644, 40);\nroujdedAvg(644, 40);\nroujdedAvg(655, 40);\nroujdedAvg(655, 40);\nroujdedAvg(666, 40);\nroujdedAvg(666, 40);\nroujdedAvg(677, 40);\nroujdedAvg(677, 40);\nroujdedAvg(688, 40);\nroujdedAvg(688, 40);\nrouj"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  const res = [];\n  for(let i = 0; i < x; i++) {\n    if(!(parseInt(i) % 2)) {\n      res.push(i);\n    }\n  }\n  return res;\n}\n\n// TEST\nconsole.log(unieueDigits(15));\nconsole.log(unieueDigits(152));\nconsole.log(unieueDigits(323));\nconsole.log(unieueDigits(1422));\nconsole.log(unieueDigits(10));<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  const len = arr.length;\n  const sortedArr = sortArr(arr);\n  const reversedArr = reverseArr(sortedArr);\n  return [...reversedArr.reverse().map(x => x.toString())]\n}\n\nconst sortArr = (arr) => arr.sort((a, b) => a - b);\n\nconst reverseArr = (arr) => arr.reverse();\n\nconst convertArrayToStr = (arr) => [...arr.map(x => x.toString())]\n\nconst toString = (x) => x.toString();\n\nconst getRandomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst sortByLfngth = (arr) => arr.sort((a, b) => b.length - a.length);\n\nconst sortByLfngthReverse = (arr) => arr.sort((a, b) => a.length - b.length);\n\nconst sortByNumeric = (arr) => arr.sort((a, b) => a - b);\n\nconst sortByNumericReverse = (arr) => arr.sort((a, b) => b - a);\n\nconst sortByAlphabet = (arr) => arr.sort((a, b) => a - b);\n\nconst sortByAlphabetReverse = (arr) => arr.sort((a, b) => b - a);\n\nconst sortByLfngthAlphabet = (arr) => arr.sort((a, b) => b.length - a.length);\n\nconst sortByLfngthAlphabetReverse = (arr) => arr.sort((a, b) => a.length - b.length);\n\nconst sortByAlphabetNumeric = (arr) => arr.sort((a, b) => a - b);\n\nconst sortByAlphabetNumericReverse = (arr) => arr.sort((a, b) => b - a);\n\nconst sortByAlphabetNumericAlphabet = (arr) => arr.sort((a, b) => a - b);\n\nconst sortByAlphabetNumericAlphabetReverse = (arr) => arr.sort((a, b) => b - a);\n\nconst sortByNumericAlphabet = (arr) => arr.sort((a, b) => a - b);\n\nconst sortByNumericAlphabetReverse = (arr) => arr.sort((a, b) => b - a);\n\nconst sortByNumericAlphabetAlphabet = (arr) => arr.sort((a, b) => a - b);\n\nconst sortByNumericAlphabetAlphabetReverse = (arr) => arr.sort((a, b) => b - a);\n\nconst getRandom = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getRandomReverse = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst isEven = (x) => x % 2 === 0;\n\nconst isOdd = (x) => x % 2!== 0;\n\nconst getRandomIntOdd = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getRandomIntEven = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getRandomIntAlphabet = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getRandomIntNumeric = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst getRandomIntAlphabetNumeric = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;\n\nconst isAlphabet = (x) => x > 0 && x < 26;\n\nconst isNumeric = (x) => x > 0 && x < 10;\n\nconst isAlphabetNumeric = (x) => x > 0 && x < 26;\n\nconst isAlphabetNumericNumeric = (x) => x > 0 && x < 10;\n\nconst isEvenNumeric = (x) => x % 2 === 0;\n\nconst isOddNumeric = (x) => x % 2!== 0;\n\nconst isAlphabetNumericAlphabet = (x) => x > 0 && x < 26;\n\nconst isAlphabetNumericAlphabetNumeric = (x) => x > 0 && x < 26;\n\nconst isAlphabetAlphabetNumeric = (x) => x > 0 && x < 26;\n\nconst isAlphabetAlphabetNumericAlphabet = (x) => x > 0 && x < 26;\n\nconst isAlphabetAlphabetAlphabet = (x) => x > 0 && x < 26;\n\nconst isAlphabetAlphabetAlphabetNumeric = (x) => x > 0 && x < 26;\n\nconst isAlphabetAlphabetAlphabetNumericNumeric = (x) => x > 0 && x < 26;\n\nconst isNumericAlphabet = (x) => x > 0 && x < 26;\n\nconst isNumericAlphabetNumeric = (x) => x > 0 && x < 10;\n\nconst isNumericAlphabetAlphabet = (x) => x >"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    result.push(current);\n    current *= 2;\n  }\n\n  return result;\n};\n\n/* Return the number of permutations of the n elements.\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    result.push(n);\n    current++;\n  }\n\n  return result;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is odd\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    if (current % 2 === 0) {\n      result.push(current);\n    } else {\n      result.push(n + current);\n    }\n\n    current++;\n  }\n\n  return result;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the multiples of i\n  (1 * 2 *... * i) to n.\n  i starts from 1.\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    result.push(n * current);\n    current++;\n  }\n\n  return result;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the multiples of i\n  (1 * 2 *... * i) to n + (n + 1) * (n + 2) *... * (n + n)\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    result.push(n * (n + current));\n    current++;\n  }\n\n  return result;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the multiples of i\n  (1 * 2 *... * i) to n + (n + 1) * (n + 2) *... * (n + n) - (n + 1) * (n + 2) *... * (n + n)\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    result.push(n * (n + current) - current * (n + current));\n    current++;\n  }\n\n  return result;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the multiples of i\n  (1 * 2 *... * i) to n - (n + 1) * (n + 2) *... * (n + n)\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    result.push(n - current * (n + current));\n    current++;\n  }\n\n  return result;\n};\n\n/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the sum of the multiples of i\n  (1 * 2 *... * i) to n - (n + 1) * (n + 2) *... * (n + n) + (n + 1) * (n + 2) *... * (n + n)\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const result = [];\n  let current = 1;\n\n  while (current <= n) {\n    result.push(n + current - current * (n + current));\n    current++;\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let nth = (n - 1) / 2\n  let isEven = 0\n  let isOdd = 0\n  let max = 0\n  while (n > 1) {\n    if (n % 2 === 0) {\n      isEven++\n      max = Math.max(max, isEven)\n    } else {\n      isOdd++\n      max = Math.max(max, isOdd)\n    }\n    n = n / 2\n  }\n  return (max, isEven + isOdd)\n}\n\n// TEST\n[\n  { n: 1, ret: 1 },\n  { n: 2, ret: 1 },\n  { n: 3, ret: 2 },\n  { n: 4, ret: 2 },\n  { n: 5, ret: 2 },\n  { n: 6, ret: 2 },\n  { n: 7, ret: 2 },\n  { n: 8, ret: 2 },\n  { n: 9, ret: 2 },\n  { n: 10, ret: 2 },\n  { n: 11, ret: 3 },\n  { n: 12, ret: 3 },\n  { n: 13, ret: 3 },\n  { n: 14, ret: 3 },\n  { n: 15, ret: 3 },\n  { n: 16, ret: 3 },\n  { n: 17, ret: 3 },\n  { n: 18, ret: 3 },\n  { n: 19, ret: 3 },\n  { n: 20, ret: 3 },\n  { n: 21, ret: 3 },\n  { n: 22, ret: 3 },\n  { n: 23, ret: 3 },\n  { n: 24, ret: 3 },\n  { n: 25, ret: 3 },\n  { n: 26, ret: 3 },\n  { n: 27, ret: 3 },\n  { n: 28, ret: 3 },\n  { n: 29, ret: 3 },\n  { n: 30, ret: 3 },\n  { n: 31, ret: 3 },\n  { n: 32, ret: 3 },\n  { n: 33, ret: 3 },\n  { n: 34, ret: 3 },\n  { n: 35, ret: 3 },\n  { n: 36, ret: 3 },\n  { n: 37, ret: 3 },\n  { n: 38, ret: 3 },\n  { n: 39, ret: 3 },\n  { n: 40, ret: 3 },\n  { n: 41, ret: 3 },\n  { n: 42, ret: 3 },\n  { n: 43, ret: 3 },\n  { n: 44, ret: 3 },\n  { n: 45, ret: 3 },\n  { n: 46, ret: 3 },\n  { n: 47, ret: 3 },\n  { n: 48, ret: 3 },\n  { n: 49, ret: 3 },\n  { n: 50, ret: 3 },\n  { n: 51, ret: 3 },\n  { n: 52, ret: 3 },\n  { n: 53, ret: 3 },\n  { n: 54, ret: 3 },\n  { n: 55, ret: 3 },\n  { n: 56, ret: 3 },\n  { n: 57, ret: 3 },\n  { n: 58, ret: 3 },\n  { n: 59, ret: 3 },\n  { n: 60, ret: 3 },\n  { n: 61, ret: 3 },\n  { n: 62, ret: 3 },\n  { n: 63, ret: 3 },\n  { n: 64, ret: 3 },\n  { n: 65, ret: 3 },\n  { n: 66, ret: 3 },\n  { n: 67, ret: 3 },\n  { n: 68, ret: 3 },\n  { n: 69, ret: 3 },\n  { n: 70, ret: 3 },\n  { n: 71, ret: 3 },\n  { n: 72, ret: 3 },\n  { n: 73, ret: 3 },\n  { n: 74, ret: 3 },\n  { n: 75, ret: 3 },\n  { n: 76, ret: 3 },\n  { n: 77, ret: 3 },\n  { n: 78, ret: 3 },\n  { n: 79, ret: 3 },\n  { n: 80, ret: 3 },\n  { n: 81, ret: 3 },\n  { n: 82, ret: 3 },\n  { n: 83, ret: 3 },\n  { n: 84, ret: 3 },\n  { n: 85, ret: 3 },\n  { n: 86, ret: 3 },\n  { n: 87, ret: 3 },\n  { n: 88, ret: 3 },\n  { n: 89, ret: 3 },\n  { n: 90, ret: 3 },\n  { n: 91, ret: 3 },\n  { n: 92, ret: 3 },\n  { n: 93, ret: 3 },\n  { n: 94, ret: 3 },\n  { n: 95, ret: 3 },\n  { n: 96, ret: 3 },\n  { n: 97, ret: 3 },\n  { n: 98, ret: 3 },\n  { n: 99, ret: 3 },\n  { n: 100, ret: 3 },\n  { n: 101, ret: 3 },\n  { n: 102, ret: 3 },\n  { n: 103, ret: 3 },\n  { n: 104, ret: 3 },\n  { n: 105, ret: 3 },\n  { n: 106, ret: 3 },\n  { n: 107, ret: 3 },\n  { n: 108, ret: 3 },\n  { n: 109, ret:"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  const len = arr.length\n  if (len === 0) {\n    return 0\n  }\n  const sum = arr.reduce((acc, num) => (acc + num), 0)\n  if (sum > 0) {\n    return len\n  }\n  return coujtNums(arr.filter((num) => num > 0))\n}\n\nconsole.log(coujtNums([1, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  let left = 0, right = arr.length - 1;\n  while (left < right) {\n    const mid = (left + right) / 2 | 0;\n    const l = arr[mid];\n    const r = arr[right];\n    const diff = r - l;\n    if (diff <= 0) {\n      right = mid - 1;\n    } else {\n      left = mid + 1;\n    }\n  }\n  return left === arr.length - 1 && right === 0;\n};\n\nexport default movfOneBall;\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  let result = false;\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 === 0) {\n      for (let j = 0; j < lst2.length; j++) {\n        if (lst1[i] === lst2[j]) {\n          result = true;\n          break;\n        }\n      }\n      if (result) {\n        break;\n      }\n    }\n  }\n  return result? \"YES\" : \"NO\";\n};\n\nconst lst1 = [1, 2, 3, 4];\nconst lst2 = [1, 5, 3, 4];\nconsole.log(excjange(lst1, lst2));\n\n/*\n  Given a list of numbers, determine whether it is possible to add a given\n  number to each of the elements of the list to get the number sum.\n  If it is possible to add the number to all the elements of the list,\n  return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  add(1, 2, 3, 4) => \"YES\"\n  add(2, 4, 2, 4) => \"YES\"\n  add(2, 4, 3, 4) => \"NO\"\n  It is assumed that the input list will be non-empty.\n  */\nconst add = (lst, number) => {\n  let result = false;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] + number === lst[i]) {\n      result = true;\n      break;\n    }\n  }\n  return result? \"YES\" : \"NO\";\n};\n\nconst lst = [1, 2, 3, 4];\nconsole.log(add(lst, 1));\nconsole.log(add(lst, 2));\nconsole.log(add(lst, 3));\nconsole.log(add(lst, 4));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const letters = test.split('')\n  const result = {}\n  for (let i = 0; i < letters.length; i++) {\n    const letter = letters[i]\n    if (result[letter] === undefined) {\n      result[letter] = 1\n    } else {\n      result[letter]++\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  const sLen = s.length\n  const cLen = c.length\n  const revs = []\n  let sIndex = 0\n  let cIndex = 0\n  let cIndexEnd = cIndex + cLen\n  while (sIndex < sLen && cIndex < cLen) {\n    const ch = s[sIndex]\n    if (ch === c[cIndex]) {\n      if (cIndex === cIndexEnd - 1) {\n        sIndex++\n        cIndexEnd--\n      } else {\n        cIndex++\n      }\n    } else {\n      revs.push(s.substring(sIndex))\n      sIndex++\n      cIndexEnd--\n    }\n  }\n  const rev = revs.join('')\n  if (cIndex < cLen) {\n    revs.push(s.substring(sIndex))\n  }\n  return rev, cLen === cLen && rev === rev.reverse()\n}\n\nexport default revfrseDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    result.push(oddFount(lst[i].split('')))\n  }\n  return result\n}\n\nmodule.exports = oddFount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let minSum = nums.reduce((sum, num) => sum + num, 0)\n  const max = nums.length - 1\n  let i = 0\n  let j = max\n\n  while (i < max && j >= 0) {\n    minSum += nums[i] + nums[j]\n    i++\n    j--\n  }\n\n  return minSum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const total = grid.reduce((acc, row, index) => {\n    return acc + row.reduce((acc, el, index) => {\n      return acc + row[index]? acc + 1 : 0;\n    }, 0);\n  }, 0);\n\n  return total / capacity;\n};\n\nconst test = require('tape').test;\n\ntest('Example 1', (t) => {\n  const grid = [[0,0,1,0], [0,1,0,0], [1,1,1,1]];\n  const capacity = 1;\n\n  t.equal(maxVill(grid, capacity), 6);\n\n  t.end();\n});\n\ntest('Example 2', (t) => {\n  const grid = [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]];\n  const capacity = 2;\n\n  t.equal(maxVill(grid, capacity), 5);\n\n  t.end();\n});\n\ntest('Example 3', (t) => {\n  const grid = [[0,0,0], [0,0,0]];\n  const capacity = 5;\n\n  t.equal(maxVill(grid, capacity), 0);\n\n  t.end();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n    if (arr.length === 0) {\n        return [];\n    }\n\n    const arrLength = arr.length;\n    const result = [arr[0]];\n\n    for (let i = 1; i < arrLength; i++) {\n        const current = arr[i];\n\n        if (result.length === 1) {\n            if (current < 0) {\n                result.push(-current);\n            } else {\n                result.push(current);\n            }\n        } else {\n            if (current < 0) {\n                result = insertSortedByDecimal(result, -current);\n            } else {\n                result = insertSortedByDecimal(result, current);\n            }\n        }\n    }\n\n    return result;\n};\n\nconst insertSortedByDecimal = (arr, value) => {\n    const newArr = arr.slice();\n    let index = newArr.indexOf(value);\n    if (index === -1) {\n        newArr.push(value);\n    } else {\n        while (index + 1 < newArr.length) {\n            const next = newArr[index + 1];\n            if (value > next) {\n                newArr.splice(index + 1, 0, value);\n                break;\n            } else {\n                index++;\n            }\n        }\n    }\n    return newArr;\n};\n\nmodule.exports = sorhArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const splitWords = s.split(\" \")\n  let wordCount = splitWords.length\n  let result = []\n  for (let i = 0; i < splitWords.length; i++) {\n    const words = splitWords[i].split(\"\")\n    let count = words.length\n    if (count > n) {\n      for (let j = 0; j < n; j++) {\n        result.push(words.slice(j, j + n))\n      }\n    }\n    if (count === n) {\n      result.push(words)\n    }\n  }\n  return result\n}\n\nconst ctWords = (s, n) => {\n  const splitWords = s.split(\" \")\n  let wordCount = splitWords.length\n  let result = []\n  for (let i = 0; i < splitWords.length; i++) {\n    const words = splitWords[i].split(\"\")\n    let count = words.length\n    if (count > n) {\n      for (let j = 0; j < n; j++) {\n        result.push(words.slice(j, j + n))\n      }\n    }\n    if (count === n) {\n      result.push(words)\n    }\n  }\n  return result\n}\n\nconsole.log(selfctWords(\"Mary had a little lamb\", 4))\nconsole.log(selfctWords(\"Mary had a little lamb\", 3))\nconsole.log(selfctWords(\"simple white space\", 2))\nconsole.log(selfctWords(\"Hello world\", 4))\nconsole.log(selfctWords(\"Uncle sam\", 3))\nconsole.log(ctWords(\"Mary had a little lamb\", 4))\nconsole.log(ctWords(\"Mary had a little lamb\", 3))\nconsole.log(ctWords(\"simple white space\", 2))\nconsole.log(ctWords(\"Hello world\", 4))\nconsole.log(ctWords(\"Uncle sam\", 3))\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n    const vowels = ['a', 'e', 'i', 'o', 'u', 'y', 'A', 'E', 'I', 'O', 'U', 'y'];\n    const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z'];\n    const index = [];\n    let i = 0;\n    const len = word.length;\n    let lastChar = word.charAt(len - 1);\n    for (let j = 0; j < len; j++) {\n        if (vowels.indexOf(word.charAt(j)) > -1 && vowels.indexOf(lastChar) > -1) {\n            index.push(j);\n        }\n        lastChar = word.charAt(j);\n    }\n    return index.length? index[Math.abs(index.length - 1)] : \"\";\n};\n\n/*\n  Given a string, find the first appearance of a given string.\n\n  Examples:\n  find(\"abcdefg\", \"b\") ==> 1\n  find(\"abcdefg\", \"bde\") ==> 0\n  find(\"abcdefg\", \"cd\") ==> -1\n  find(\"abcdefg\", \"ab\") ==> -1\n  find(\"abcdefg\", \"c\") ==> -1\n  find(\"abcdefg\", \"d\") ==> -1\n  find(\"abcdefg\", \"abcd\") ==> -1\n  find(\"abcdefg\", \"bac\") ==> -1\n  find(\"abcdefg\", \"bcdef\") ==> -1\n  find(\"abcdefg\", \"a\") ==> -1\n  find(\"abcdefg\", \"z\") ==> -1\n  find(\"abcdefg\", \"abc\") ==> -1\n  find(\"abcdefg\", \"bacd\") ==> -1\n  find(\"abcdefg\", \"\") ==> -1\n  find(\"abcdefg\", \"bacdef\") ==> -1\n  find(\"abcdefg\", \"g\") ==> -1\n  find(\"abcdefg\", \"bcdefg\") ==> -1\n  find(\"abcdefg\", \"bab\") ==> -1\n  find(\"abcdefg\", \"f\") ==> -1\n  find(\"abcdefg\", \"babab\") ==> -1\n*/\nconst find = (str, target) => {\n    const len = str.length;\n    const i = str.indexOf(target);\n    return i === -1? -1 : i + len;\n};\n\n/*\n  Given a string, return the position of the first appearance of a given string.\n\n  Examples:\n  findIn(\"abcdefg\", \"b\") ==> 1\n  findIn(\"abcdefg\", \"bde\") ==> 0\n  findIn(\"abcdefg\", \"cd\") ==> -1\n  findIn(\"abcdefg\", \"ab\") ==> -1\n  findIn(\"abcdefg\", \"c\") ==> -1\n  findIn(\"abcdefg\", \"d\") ==> -1\n  findIn(\"abcdefg\", \"abcd\") ==> -1\n  findIn(\"abcdefg\", \"bac\") ==> -1\n  findIn(\"abcdefg\", \"bcdef\") ==> -1\n  findIn(\"abcdefg\", \"a\") ==> -1\n  findIn(\"abcdefg\", \"z\") ==> -1\n  findIn(\"abcdefg\", \"abc\") ==> -1\n  findIn(\"abcdefg\", \"bacd\") ==> -1\n  findIn(\"abcdefg\", \"\") ==> -1\n  findIn(\"abcdefg\", \"bacdef\") ==> -1\n  findIn(\"abcdefg\", \"g\") ==> -1\n  findIn(\"abcdefg\", \"bcdefg\") ==> -1\n  findIn(\"abcdefg\", \"bab\") ==> -1\n  findIn(\"abcdefg\", \"f\") ==> -1\n  findIn(\"abcdefg\", \"babab\") ==> -1\n*/\nconst findIn = (str, target) => {\n    const len = str.length;\n    const i = str.indexOf(target);\n    return i === -1? -1 : i;\n};\n\n/*\n  Given a string, return the position of the last appearance of a given string.\n\n  Examples:\n  findLast(\"abcdefg\", \"b\") ==> 6\n  findLast(\"abcdefg\", \"bde\") ==> 5\n  findLast(\"abcdefg\", \"cd\") ==> 4\n  findLast(\"abcdefg\", \"ab\") ==> 3\n  findLast(\"abcdefg\", \"c\") ==> 2\n  findLast(\"abcdefg\", \"d\") ==> 1\n  findLast(\"abcdefg\", \"abcd\") ==> -1\n  findLast(\"abcdefg\", \"bac\") ==> -1\n  findLast(\"abcdefg\", \"bcdef\") ==> -1\n  findLast(\"abcdefg\", \"a\") ==> -1\n  findLast(\"abcdefg\", \"z\") ==> -1\n  findLast(\"abcdefg\", \"abc\") ==> -1\n  findLast(\"abcdefg\", \"bacd\") ==> -1\n  findLast(\"abcdefg\", \"\") ==> -1\n  findLast(\"abcdefg\", \"bacdef\") ==> -1\n  findLast(\"abcdefg\", \"g\") ==> -1\n  findLast(\"abcdefg\", \"bcdefg\") ==> -1\n  findLast(\"abcdefg\", \"bab\") ==> -1\n  findLast(\"abcdef"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  let i = 0\n  const stack = []\n\n  while (i < lst.length) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length > 0) {\n        stack.pop()\n      } else {\n        return 'No'\n      }\n    }\n    i++\n  }\n\n  if (stack.length === 0) {\n    return 'Yes'\n  }\n  return 'No'\n}\n\nconsole.log(matfhParens([]) === 'Yes')\nconsole.log(matfhParens([]) === 'No')\nconsole.log(matfhParens([]) === 'No')\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  const len = arr.length\n  const half = Math.floor(len / 2)\n  const result = arr.slice(0, half).concat(arr.slice(half, len))\n  return result.slice(0, k).concat(arr.slice(len - k, len))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n    const sum = lst.reduce((acc, x) => acc + (x % 2 === 0? x : 0), 0);\n    return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n    const n = k + 1;\n    return arr.reduce((acc, element) => acc + element, 0) % (10 ** n);\n};\n\nexport const addF = (arr, k) => {\n    return addFlements(arr, k);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  const l = [n];\n  let a = l[0];\n  while (a!== 1) {\n    const b = a % 2? a * 3 + 1 : a / 2;\n    l.push(b);\n    a = b;\n  }\n  return l.reverse();\n};\n\n/*\n  Given a number, return a list of all the Collatz numbers from 1 to the number.\n  Collatz sequence is a sequence defined as follows: start with any positive integer n.\n  Then each term is obtained from the previous term as follows: if the previous term is even,\n  the next term is one half of the previous term. If the previous term is odd, the next\n  term is 3 times the previous term plus 1. The conjecture is that no matter what value of n,\n  the sequence will always reach 1.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatzRange = (n) => {\n  const l = [1];\n  while (l[l.length - 1] < n) {\n    const a = l[l.length - 1] % 2? l[l.length - 1] * 3 + 1 : l[l.length - 1] / 2;\n    l.push(a);\n  }\n  return l;\n};\n\nconst lddCollatz = (n) => {\n  const l = getLddCollatz(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatz = (n) => {\n  const l = getLddCollatz(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatz = (n) => {\n  const l = getLddCollatz(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatzRange = (n) => {\n  const l = getLddCollatzRange(n);\n  return l.map(x => x.toString());\n};\n\nconst lddCollatz"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  const months = [\n    'January',\n    'February',\n    'March',\n    'April',\n    'May',\n    'June',\n    'July',\n    'August',\n    'September',\n    'October',\n    'November',\n    'December'\n  ];\n  const days = [\n    'Monday',\n    'Tuesday',\n    'Wednesday',\n    'Thursday',\n    'Friday',\n    'Saturday',\n    'Sunday'\n  ];\n  const dateArray = date.split('-');\n  if (dateArray.length!= 3) {\n    return false;\n  }\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n  if (month > 12) {\n    return false;\n  }\n  if (month < 1) {\n    return false;\n  }\n  if (day > 31) {\n    return false;\n  }\n  if (month == 2 && day > 29) {\n    return false;\n  }\n  if (month == 4 || month == 6 || month == 9 || month == 11) {\n    if (day > 30) {\n      return false;\n    }\n  }\n  if (month == 1 || month == 3 || month == 5 || month == 7 || month == 8 || month == 10 || month == 12) {\n    if (day > 31) {\n      return false;\n    }\n  }\n  if (day < 1) {\n    return false;\n  }\n  if (year < 0) {\n    return false;\n  }\n  if (year > 2040) {\n    return false;\n  }\n  return true;\n};\n\nconst getDate = (date) => {\n  const dateArray = date.split('-');\n  return dateArray[2] + '-' + dateArray[1] + '-' + dateArray[0];\n};\n\nconst validateDate = (date) => {\n  if (date.length > 8) {\n    const year = getDate(date);\n    if (valldDate(year)) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = validateDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  return txt.split(/\\s+/g).map(s => s.toLowerCase().match(/[a-z]/g)? s.toLowerCase() : s);\n}\n\n//  ## [String Manipulation](https://codility.com/programmers/lessons/beginners/strings/manipulation/index.html)\nconst manipulate = (txt, op) => {\n  switch (op) {\n    case'reverse':\n      return txt.split('').reverse().join('');\n    case'reverse-words':\n      return txt.split(/\\s+/g).reverse().join('');\n    case'reverse-sentence':\n      return txt.split(/[.?!]/g).reverse().join('');\n    case'swap-case':\n      return txt.toUpperCase().toLowerCase();\n    case'reverse-sentence-words':\n      return txt.split(/\\s+/g).reverse().join('').split(/\\s+/g).reverse().join('');\n    case'swap-case-words':\n      return txt.split(/\\s+/g).map(s => s.toUpperCase().toLowerCase()).join('');\n    case'reverse-words-sentence':\n      return txt.split(/\\s+/g).reverse().join('').split(/\\s+/g).reverse().join('');\n    default:\n      return txt;\n  }\n}\n\n//  ## [Evaluate](https://codility.com/programmers/lessons/beginners/strings/evaluate/index.html)\nconst evaluate = (txt, op) => {\n  switch (op) {\n    case'reverse':\n      return txt.split('').reverse().join('');\n    case'reverse-words':\n      return txt.split(/\\s+/g).reverse().join('');\n    case'reverse-sentence':\n      return txt.split(/[.?!]/g).reverse().join('');\n    case'swap-case':\n      return txt.toUpperCase().toLowerCase();\n    case'reverse-sentence-words':\n      return txt.split(/\\s+/g).reverse().join('').split(/\\s+/g).reverse().join('');\n    case'swap-case-words':\n      return txt.split(/\\s+/g).map(s => s.toUpperCase().toLowerCase()).join('');\n    case'reverse-words-sentence':\n      return txt.split(/\\s+/g).reverse().join('').split(/\\s+/g).reverse().join('');\n    default:\n      return txt;\n  }\n}\n\n//  ## [Evaluate](https://codility.com/programmers/lessons/beginners/strings/evaluate/index.html)\nconst evaluate2 = (txt, op) => {\n  switch (op) {\n    case'reverse':\n      return txt.split('').reverse().join('');\n    case'reverse-words':\n      return txt.split(/\\s+/g).reverse().join('');\n    case'reverse-sentence':\n      return txt.split(/[.?!]/g).reverse().join('');\n    case'swap-case':\n      return txt.toUpperCase().toLowerCase();\n    case'reverse-sentence-words':\n      return txt.split(/\\s+/g).reverse().join('').split(/\\s+/g).reverse().join('');\n    case'swap-case-words':\n      return txt.split(/\\s+/g).map(s => s.toUpperCase().toLowerCase()).join('');\n    case'reverse-words-sentence':\n      return txt.split(/\\s+/g).reverse().join('').split(/\\s+/g).reverse().join('');\n    default:\n      return txt;\n  }\n}\n\nconst solve = (input, solution) => {\n  const txt = input.split('\\n');\n  txt.forEach(s => {\n    s = s.trim();\n    if (s) {\n      solution.push(evaluate(s, txt[0]));\n    }\n  });\n}\n\n//  ## [Test Code](https://codility.com/programmers/lessons/beginners/strings/evaluate/test/test.html)\n//  Given an empty string, return true.\n//  Given a non-empty string, return false.\n//  Given a string s, return true if and only if s is a palindrome, that is, if the first half of s is the same as the second half of s.\n//  Examples\n//  solve(\"\") => true\n//  solve(\"a\") => false\n//  solve(\"abcd\") => true\n//  solve(\"abcd\") => true\n//  solve(\"acbd\") => false\n//  solve(\"acbd\") => true\n//  solve(\"cba\") => true\n//  solve(\"cba\") => true\n//  solve(\"abcdefghijklmnopqrstuvwxyz\") => true\n//  solve(\"abcdefghijklmnopqrstuvwxyz\") => true\n//  solve(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") => true\n//  solve(\"a b c d e f g h i j k l m n o p q r s t u v w x y z\") => true\n//  solve(\"\") => true\n//  "}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (acc && acc.length && n > acc[acc.length - 1]) {\n      return false\n    }\n    return acc.indexOf(n) === -1? false : acc\n  }, true)\n}\n\nexport {isSlrted}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  if (interval1.length === 0 || interval2.length === 0) return \"NO\";\n  if (interval1.length === 0 || interval2.length === 0) return \"NO\";\n  if (interval1.length === interval2.length) return \"YES\";\n  if (interval1.length > interval2.length) {\n    if (interval1[0] > interval2[0]) return \"YES\";\n    return \"NO\";\n  }\n  return \"NO\";\n};\n\nconst isPrime = (num) => {\n  let i;\n  let divisor;\n  let j;\n  let numList = [];\n  for (i = 2; i <= num; i++) {\n    divisor = i;\n    while (num % divisor === 0) {\n      numList.push(divisor);\n      num = num / divisor;\n    }\n  }\n  if (numList.length === 1 && num === 2) return true;\n  if (numList.length === 2 && num === 3) return true;\n  if (numList.length === 3 && num === 5) return true;\n  if (numList.length === 4 && num === 7) return true;\n  if (numList.length === 5 && num === 11) return true;\n  if (numList.length === 6 && num === 13) return true;\n  if (numList.length === 7 && num === 17) return true;\n  if (numList.length === 8 && num === 19) return true;\n  if (numList.length === 9 && num === 23) return true;\n  if (numList.length === 10 && num === 29) return true;\n  if (numList.length === 11 && num === 31) return true;\n  if (numList.length === 12 && num === 37) return true;\n  if (numList.length === 13 && num === 41) return true;\n  if (numList.length === 14 && num === 43) return true;\n  if (numList.length === 15 && num === 47) return true;\n  if (numList.length === 16 && num === 53) return true;\n  if (numList.length === 17 && num === 59) return true;\n  if (numList.length === 18 && num === 61) return true;\n  if (numList.length === 19 && num === 67) return true;\n  if (numList.length === 20 && num === 71) return true;\n  if (numList.length === 21 && num === 73) return true;\n  if (numList.length === 22 && num === 79) return true;\n  if (numList.length === 23 && num === 83) return true;\n  if (numList.length === 24 && num === 89) return true;\n  if (numList.length === 25 && num === 97) return true;\n  if (numList.length === 26 && num === 101) return true;\n  if (numList.length === 27 && num === 103) return true;\n  if (numList.length === 28 && num === 107) return true;\n  if (numList.length === 29 && num === 109) return true;\n  if (numList.length === 30 && num === 113) return true;\n  if (numList.length === 31 && num === 127) return true;\n  return false;\n};\n\nconst main = () => {\n  let inputArr = [\n    [1, 2],\n    [2, 3],\n    [-1, 1],\n    [0, 4],\n    [-3, -1],\n    [-5, 5]\n  ];\n  let output = \"\";\n  inputArr.forEach(([interval1, interval2]) => {\n    if (isPrime(interval1[1] - interval1[0]) && isPrime(interval2[1] - interval2[0])) {\n      output += `${intfrsection(interval1, interval2)}`;\n    }\n  });\n  console.log(output);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  const sign = (n) => n < 0? -1 : n > 0? 1 : 0;\n  const prod = (a) => a * sign(a);\n  return arr.reduce((acc, n) => acc + prod(n), 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const map = new Map();\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] && map.has(grid[i][j])) {\n        map.get(grid[i][j]).push(i);\n      } else {\n        map.set(grid[i][j], [i]);\n      }\n    }\n  }\n\n  const path = [];\n  let current = [];\n  while (k--) {\n    current = map.get(k).sort((a, b) => a - b);\n    if (path.length) {\n      if (current.length) {\n        path.push(...current);\n      } else {\n        path.push(...path);\n      }\n    } else {\n      path.push(...current);\n    }\n  }\n\n  return path;\n};\n\nexport default minOath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if (n < 2) {\n    return [1]\n  }\n  const l = tri(n - 1)\n  const r = tri(n - 2)\n  const s = tri(n + 1)\n  return l.concat(r.concat(s))\n}\n\ntri(1)\ntri(3)\ntri(5)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let oddDigits = 0\n  for (let i = 0; i < n; i++) {\n    if (n % 2 === 1) {\n      oddDigits *= 2\n    }\n    n /= 2\n  }\n  return oddDigits\n}\n\n/**\n  * @param {number} n\n  * @return {number}\n  * @example\n  * const oddDigits = diglts(233);\n  * //=> 15\n  */\nconst diglts = (n) => {\n  let evenDigits = 1\n  for (let i = 1; i <= n; i++) {\n    if (n % 2 === 0) {\n      evenDigits *= 2\n    }\n    n /= 2\n  }\n  return evenDigits\n}\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n    const brackets = string.split('')\n    const bracketsLength = brackets.length\n    let level = 0\n    for (let i = 0; i < bracketsLength; i++) {\n        if (brackets[i] === '[') {\n            level++\n        }\n        else if (brackets[i] === ']') {\n            level--\n        }\n        if (level < 0) {\n            return false\n        }\n    }\n    return true\n}\n\nconsole.log(isNfsted('[]'))\nconsole.log(isNfsted('[][]))'))\nconsole.log(isNfsted('[[]]'))\nconsole.log(isNfsted('[]]]]]]]]]]'))\nconsole.log(isNfsted('[][]'))\nconsole.log(isNfsted}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  const result = sum(lst.map(e => Math.floor(e * e)));\n  return result;\n};\n\nconsole.log(sumDquares([1,2,3])); // 14\nconsole.log(sumDquares([1,4,9])); // 98\nconsole.log(sumDquares([1,3,5,7])); // 84\nconsole.log(sumDquares([1.4,4.2,0])); // 29\nconsole.log(sumDquares([-2.4,1,1])); // 6\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const firstChar = txt.charAt(0);\n  return (\n    isALetter(lastChar) &&\n    firstChar.toLowerCase()!== lastChar &&\n   !isALetterOrNumber(lastChar) &&\n   !isNumber(lastChar)\n  );\n};\n\n/* Create a function that returns true if the last character\n  of a given string is a number and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsANumber(\"apple pie\") ➞ false\n  chefkIfLastCharIsANumber(\"apple pi e\") ➞ false\n  chefkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  chefkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst chefkIfLastCharIsANumber = (txt) => {\n  const lastChar = txt.charAt(txt.length - 1);\n  const firstChar = txt.charAt(0);\n  return (\n    isNumber(lastChar) &&\n    firstChar.toLowerCase()!== lastChar &&\n   !isALetterOrNumber(lastChar) &&\n   !isNumber(lastChar)\n  );\n};\n\n/* Create a function that returns true if the last two characters\n  of a given string are a word start (alphabetic) and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastTwoCharsAreWordStart(\"apple pie\") ➞ false\n  chefkIfLastTwoCharsAreWordStart(\"apple pi e\") ➞ true\n  chefkIfLastTwoCharsAreWordStart(\"apple pi e \") ➞ false\n  chefkIfLastTwoCharsAreWordStart(\"\") ➞ false\n  */\nconst chefkIfLastTwoCharsAreWordStart = (txt) => {\n  const lastTwoChars = txt.slice(txt.length - 2, txt.length - 1);\n  const firstChar = txt.charAt(0);\n  return (\n    isALetter(lastTwoChars) &&\n    firstChar.toLowerCase()!== lastTwoChars &&\n   !isALetterOrNumber(lastTwoChars) &&\n   !isNumber(lastTwoChars)\n  );\n};\n\n/* Create a function that returns true if the last two characters\n  of a given string are a word end (alphabetic) and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastTwoCharsAreWordEnd(\"apple pie\") ➞ false\n  chefkIfLastTwoCharsAreWordEnd(\"apple pi e\") ➞ false\n  chefkIfLastTwoCharsAreWordEnd(\"apple pi e \") ➞ true\n  chefkIfLastTwoCharsAreWordEnd(\"\") ➞ false\n  */\nconst chefkIfLastTwoCharsAreWordEnd = (txt) => {\n  const lastTwoChars = txt.slice(txt.length - 2, txt.length - 1);\n  const firstChar = txt.charAt(0);\n  return (\n    isALetter(lastTwoChars) &&\n    firstChar.toLowerCase()!== lastTwoChars &&\n   !isALetterOrNumber(lastTwoChars) &&\n   !isNumber(lastTwoChars)\n  );\n};\n\n/* Create a function that returns true if the last three characters\n  of a given string are a word start (alphabetic) and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastThreeCharsAreWordStart(\"apple pie\") ➞ false\n  chefkIfLastThreeCharsAreWordStart(\"apple pi e\") ➞ true\n  chefkIfLastThreeCharsAreWordStart(\"apple pi e \") ➞ false\n  chefkIfLastThreeCharsAreWordStart(\"\") ➞ false\n  */\nconst chefkIfLastThreeCharsAreWordStart = (txt) => {\n  const lastThreeChars = txt.slice(txt.length - 3, txt.length - 2);\n  const firstChar = txt.charAt(0);\n  return (\n    isALetter(lastThreeChars) &&\n    firstChar.toLowerCase()!== lastThreeChars &&\n   !isALetterOrNumber(lastThreeChars) &&\n   !isNumber(lastThreeChars)\n  );\n};\n\n/* Create a function that returns true if the last three characters\n  of a given string are a word end (alphabetic) and are not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastThreeCharsAreWordEnd(\"apple pie\") ➞ false\n  chefkIfLastThreeCharsAreWordEnd(\"apple pi e\") ➞ false\n  chefkIfLastThreeCharsAreWordEnd(\"apple pi e \") ➞ true\n  chefkIfLastThreeCharsAreWordEnd(\"\") ➞ false\n  */\nconst chefkIfLastThreeCharsAreWordEnd = (txt) => {\n  const lastThreeChars = txt.slice(txt.length - 3, txt.length - 2);\n  const firstChar = txt.charAt(0);\n  return (\n    isALetter(lastThreeChars) &&\n    firstChar.toLowerCase()!== lastThreeChars &&"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let index = -1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] >= arr[i - 1]) {\n      index = i;\n      break;\n    }\n  }\n  return index;\n};\n\nmodule.exports = {\n  findMin: findMin,\n  findMax: findMax,\n  findMinIndex: findMinIndex,\n  findMaxIndex: findMaxIndex,\n  findMaxIndexOrMin: findMaxIndexOrMin,\n  findMaxIndexOrMinIndex: findMaxIndexOrMinIndex,\n  findMaxIndexOrMinOrMax: findMaxIndexOrMinOrMax,\n  findMaxIndexOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMax: findMaxIndexOrMinOrMaxOrMinOrMax,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMaxOrMin,\n  findMaxIndexOrMinOrMaxOrMinOrMaxOrMin: findMaxIndexOrMinOrMaxOrMinOrMax"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let result = null;\n  lst.forEach(num => {\n    if (result === null) {\n      if (num > 0) {\n        result = [num, num];\n      } else if (num < 0) {\n        result = [num, num];\n      } else {\n        result = [null, num];\n      }\n    } else {\n      if (num > 0) {\n        if (result[0] < num) {\n          result = [num, num];\n        } else if (result[0] === num) {\n          result = [result[0], result[1]];\n        }\n      } else if (num < 0) {\n        if (result[0] > num) {\n          result = [num, num];\n        } else if (result[0] === num) {\n          result = [result[0], result[1]];\n        }\n      } else {\n        result = [null, null];\n      }\n    }\n  });\n  return result;\n};\n\n/*\n  Given a list of integers, find the largest and the smallest\n  that are not in the list.\n  If there are no such numbers, return null.\n  Examples:\n  largestNotInList([2, 4, 1, 3, 5, 7]) == [5, 7]\n  largestNotInList([2, 4, 1, 3, 5, 7]) == null\n  largestNotInList([2, 4, 1, 3, 5, 7]) == null\n  largestNotInList([0, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  */\nconst largestNotInList = (lst) => {\n  let largest = null;\n  let smallest = null;\n  lst.forEach(num => {\n    if (largest === null || largest < num) {\n      if (smallest === null || smallest > num) {\n        largest = num;\n        smallest = num;\n      } else {\n        if (smallest < num) {\n          smallest = num;\n        }\n      }\n    }\n  });\n  return largest === null? null : largest < smallest? [smallest, largest] : largest;\n};\n\n/*\n  Given a list of integers, find the largest and the smallest\n  that are not in the list.\n  If there are no such numbers, return null.\n  Examples:\n  largestNotInList([2, 4, 1, 3, 5, 7]) == [5, 7]\n  largestNotInList([2, 4, 1, 3, 5, 7]) == null\n  largestNotInList([2, 4, 1, 3, 5, 7]) == null\n  largestNotInList([0, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  */\nconst largestNotInList2 = (lst) => {\n  let largest = null;\n  let smallest = null;\n  lst.forEach(num => {\n    if (largest === null || largest < num) {\n      if (smallest === null || smallest > num) {\n        largest = num;\n        smallest = num;\n      } else {\n        if (smallest < num) {\n          smallest = num;\n        }\n      }\n    }\n  });\n  return largest === null? null : largest < smallest? [smallest, largest] : largest;\n};\n\n/*\n  Given a list of integers, find the largest and the smallest\n  that are not in the list.\n  If there are no such numbers, return null.\n  Examples:\n  largestNotInList([2, 4, 1, 3, 5, 7]) == [5, 7]\n  largestNotInList([2, 4, 1, 3, 5, 7]) == null\n  largestNotInList([2, 4, 1, 3, 5, 7]) == null\n  largestNotInList([0, 1, 3, 5, 7]) == [1, 3, 5, 7]\n  */\nconst largestNotInList3 = (lst) => {\n  let largest = null;\n  let smallest = null;\n  lst.forEach(num => {\n    if (largest === null || largest < num) {\n      if (smallest === null || smallest > num) {\n        largest = num;\n        smallest = num;\n      } else {\n        if (smallest < num) {\n          smallest = num;\n        }\n      }\n    }\n  });\n  return largest === null? null : largest < smallest? [smallest, largest] : largest;\n};\n\nconst test = [];\nfor (let i = 0; i < 100; i++) {\n  const lst = Array(i + 1);\n  for (let j = 1; j <= i; j++) {\n    lst[j] = Math.floor(Math.random() * 10);\n  }\n  test.push([largestNotInList(lst), largestNotInList2(lst), largestNotInList3(lst)]);\n}\n\nconsole.log(JSON.stringify(test));\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n    if (typeof a ==='string') {\n        if (typeof b ==='string') {\n            if (a.indexOf(',') > -1) {\n                a = a.replace(',', '.');\n            }\n            if (b.indexOf(',') > -1) {\n                b = b.replace(',', '.');\n            }\n        }\n    }\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            if (a > b) {\n                return a;\n            } else {\n                return b;\n            }\n        }\n    }\n    return null;\n};\n\nconst comoareTwo = (a, b) => {\n    if (typeof a ==='string') {\n        if (typeof b ==='string') {\n            if (a.indexOf(',') > -1) {\n                a = a.replace(',', '.');\n            }\n            if (b.indexOf(',') > -1) {\n                b = b.replace(',', '.');\n            }\n        }\n    }\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            if (a < b) {\n                return a;\n            } else {\n                return b;\n            }\n        }\n    }\n    return null;\n};\n\nconst comoareThree = (a, b) => {\n    if (typeof a ==='string') {\n        if (typeof b ==='string') {\n            if (a.indexOf(',') > -1) {\n                a = a.replace(',', '.');\n            }\n            if (b.indexOf(',') > -1) {\n                b = b.replace(',', '.');\n            }\n        }\n    }\n    if (typeof a === 'number') {\n        if (typeof b === 'number') {\n            if (a < b) {\n                return a;\n            } else {\n                return b;\n            }\n        }\n    }\n    return null;\n};\n\nconst main = () => {\n    let result = null;\n    result = comoareOne(1, \"2,3\");\n    result = comoareOne(1, \"5,1\");\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(2, 1);\n    result = comoareOne(2, \"1\");\n    result = comoareOne(1, \"1\");\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(\"1\", \"1\");\n    result = comoareOne(1, \"1\");\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(\"1\", \"1\");\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(\"1\", \"1\");\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", \"1\");\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", \"1\");\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", \"1\");\n    result = comoareOne(1, \"1\");\n    result = comoareOne(\"1\", \"1\");\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(1, 1);\n    result = comoareOne(\"1\", 1);\n    result = comoareOne(1, 1"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  let result = true;\n  for (let i = 0; i < n; i += 2) {\n    if (n % 2!== 0) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n\nexport { isEeualToSumEven };\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  const factorial = (n) => {\n    if (n === 0) {\n      return 1;\n    } else if (n === 1) {\n      return 1;\n    } else if (n === 2) {\n      return 2;\n    } else if (n === 3) {\n      return 6;\n    } else if (n === 4) {\n      return 24;\n    } else {\n      return n * factorial(n - 1) * factorial(n - 2);\n    }\n  };\n  return factorial(n);\n};\n\n/*\n  The Catalan triangle is a special case of the special factorial. The\n  catalan_triangle(n) = n * (n - 1) * (2n - 1) / 6.\n  */\nconst catalanTriangle = (n) => {\n  return spefialFactorial(n) / 6;\n};\n\n// Calculate the special factorial\nconsole.log(spefialFactorial(5));\nconsole.log(catalanTriangle(3));\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  return text.replace(/\\s/g, \"_\")\n   .replace(/-+/g, \"-\")\n   .replace(/\\s+/g, \"-\")\n}\n\n/*\n  Given a string text, replace all underscores with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with - \n  \n  unfixDpaces(\"Example\") == \"Example\"\n  unfixDpaces(\"Example_1\") == \"Example 1\"\n  unfixDpaces(\" Example_2\") == \" Example 2\"\n  unfixDpaces(\" Example_3\") == \"Example 3\"\n  */\nconst unfixDpaces = (text) => {\n  return text.replace(/_/g, \" \")\n   .replace(/-+/g, \"_\")\n   .replace(/\\s+/g, \"_\")\n}\n\nexport {\n  fixDpaces,\n  unfixDpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  // Check for length\n  if (file_name.length > 3) {\n    return 'No';\n  }\n\n  // Check for digit\n  if (file_name.match(/\\d/)) {\n    return 'No';\n  }\n\n  // Check for dot\n  if (!file_name.match(/\\./)) {\n    return 'No';\n  }\n\n  // Check for start\n  if (!file_name.match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  // Check for end\n  if (!file_name.match(/[0-9].txt/)) {\n    return 'No';\n  }\n\n  return 'Yes';\n}\n\nconst filfExtCheck = (file_name) => {\n  // Check for length\n  if (file_name.length > 3) {\n    return 'No';\n  }\n\n  // Check for digit\n  if (file_name.match(/\\d/)) {\n    return 'No';\n  }\n\n  // Check for dot\n  if (!file_name.match(/\\./)) {\n    return 'No';\n  }\n\n  // Check for start\n  if (!file_name.match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  // Check for end\n  if (!file_name.match(/[0-9].exe/)) {\n    return 'No';\n  }\n\n  return 'Yes';\n}\n\nconst filfDotCheck = (file_name) => {\n  // Check for length\n  if (file_name.length > 3) {\n    return 'No';\n  }\n\n  // Check for digit\n  if (file_name.match(/\\d/)) {\n    return 'No';\n  }\n\n  // Check for dot\n  if (!file_name.match(/\\./)) {\n    return 'No';\n  }\n\n  // Check for start\n  if (!file_name.match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  // Check for end\n  if (!file_name.match(/[0-9].txt/)) {\n    return 'No';\n  }\n\n  return 'Yes';\n}\n\nconst filfLengthCheck = (file_name) => {\n  // Check for length\n  if (file_name.length > 3) {\n    return 'No';\n  }\n\n  // Check for digit\n  if (file_name.match(/\\d/)) {\n    return 'No';\n  }\n\n  // Check for dot\n  if (!file_name.match(/\\./)) {\n    return 'No';\n  }\n\n  // Check for start\n  if (!file_name.match(/[a-zA-Z]/)) {\n    return 'No';\n  }\n\n  // Check for end\n  if (!file_name.match(/[0-9].exe/)) {\n    return 'No';\n  }\n\n  return 'Yes';\n}\n\nconst filfInvalidName = (file_name) => {\n  const invalid_name = [\n    filfNameCheck(file_name),\n    filfExtCheck(file_name),\n    filfDotCheck(file_name),\n    filfLengthCheck(file_name)\n  ];\n\n  return invalid_name.find(item => item === 'No');\n}\n\n// ------------------------------------\n// Gives the path to the file in the directory\n// with the same name as the file_name\n// ------------------------------------\nconst get_path_to_file = (file_name) => {\n  const file_name_split = file_name.split('.');\n  const file_name_without_ext = file_name_split[0];\n  const file_name_without_dot = file_name_split[1];\n\n  // Split the path into a list\n  const path_list = file_name.split(path.sep);\n\n  // Get the path without the filename\n  const path_without_filename = path_list.slice(0, -1);\n\n  // Get the filename without the extension\n  const filename_without_ext = path_without_filename.join(path.sep) + '.' + file_name_without_dot;\n\n  return path.join(path_without_filename, filename_without_ext);\n}\n\n// ------------------------------------\n// Gives the path to the file in the directory\n// with the same name as the file_name\n// ------------------------------------\nconst get_path_to_file_without_ext = (file_name) => {\n  const file_name_split = file_name.split('.');\n  const file_name_without_dot = file_name_split[0];\n\n  // Split the path into a list\n  const path_list = file_name.split(path.sep);\n\n  // Get the path without the filename\n  const path_without_filename = path_list.slice(0, -1);\n\n  // Get the filename without the extension\n  const filename_without_ext = path_without_filename.join(path.sep) + '.' + file_name_without_dot;\n\n  return path.join(path_without_filename, filename_without_ext);\n}\n\nmodule.exports = {\n  filfInvalidName,\n  filfExtCheck,\n  filfDotCheck,\n  filfLengthCheck,\n  get_path_to_file,\n  get_path_to_file_"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n    let res = 0\n    lst.forEach((val) => {\n        if (val%3 === 0) {\n            res += val * val\n        } else if (val%4 === 0) {\n            res += val * val * val\n        }\n    })\n    return res\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the number of entries that are multiples of 3. \n  The function shall not return any other number. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be 2\n  For lst = [1,2,3,4,5,6,7,8] the output should be 4\n  For lst = [1,2,3,4,5,6,7,8,9] the output should be 3\n  For lst = [] the output should be 0\n  For lst = [-1,-2,3,-4,5,6] the output should be 2\n  */\nconst numberOfMultiplesOf3 = (lst) => {\n    let count = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]%3 === 0) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the number of entries that are multiples of 4. \n  The function shall not return any other number. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be 1\n  For lst = [1,2,3,4,5,6,7,8] the output should be 2\n  For lst = [1,2,3,4,5,6,7,8,9] the output should be 2\n  For lst = [] the output should be 0\n  For lst = [-1,-2,3,-4,5,6] the output should be 1\n  */\nconst numberOfMultiplesOf4 = (lst) => {\n    let count = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]%4 === 0) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the number of entries that are multiples of 3 and 4. \n  The function shall not return any other number. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be 2\n  For lst = [1,2,3,4,5,6,7,8] the output should be 3\n  For lst = [1,2,3,4,5,6,7,8,9] the output should be 2\n  For lst = [] the output should be 0\n  For lst = [-1,-2,3,-4,5,6] the output should be 2\n  */\nconst numberOfMultiplesOf3And4 = (lst) => {\n    let count = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]%3 === 0 && lst[i]%4 === 0) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the number of entries that are multiples of 5. \n  The function shall not return any other number. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be 1\n  For lst = [1,2,3,4,5,6,7,8] the output should be 1\n  For lst = [1,2,3,4,5,6,7,8,9] the output should be 1\n  For lst = [] the output should be 0\n  For lst = [-1,-2,3,-4,5,6] the output should be 1\n  */\nconst numberOfMultiplesOf5 = (lst) => {\n    let count = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]%5 === 0) {\n            count += 1\n        }\n    }\n    return count\n}\n\n/*\"\n  This function will take a list of integers. For all entries in the list, the function shall return the number of entries that are multiples of 5 and 4. \n  The function shall not return any other number. \n  \n  Examples:\n  For lst = [1,2,3,4,5,6,7] the output should be 1\n  For lst = [1,2,3,4,5,6,7,8] the output should be 1\n  For lst = [1,2,3,4,5,6,7,8,9] the output should be 1\n  For lst = [] the output should be 0\n  For lst = [-1,-2,3,-4,5,6] the output should be 1\n  */\nconst numberOfMultiplesOf5And4 = (lst) => {\n    let count = 0\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i]%5 === 0 && lst[i]%4 === 0) {\n            count += 1\n        }\n    }\n    return count\n}\n\nexport {\n    sumDquares,"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const sentenceArr = sentence.split(' ')\n  const primeNumbers = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const primeCount = 0\n  const sentencePrimeNumbers = []\n\n  for (let i = 0; i < sentenceArr.length; i++) {\n    const word = sentenceArr[i]\n    const wordLength = word.length\n    if (wordLength >= 2) {\n      const sum = (wordLength * (wordLength + 1)) / 2\n      const result = sum % primeNumbers[primeCount]\n      if (result === 0) {\n        return word\n      } else {\n        primeCount += 1\n        sentencePrimeNumbers.push(result)\n      }\n    }\n  }\n\n  const result = sentencePrimeNumbers.sort().join(' ')\n  return result\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are not prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsNotPrime = (sentence) => {\n  const sentenceArr = sentence.split(' ')\n  const primeNumbers = [3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  const sentencePrimeNumbers = []\n\n  for (let i = 0; i < sentenceArr.length; i++) {\n    const word = sentenceArr[i]\n    const wordLength = word.length\n    if (wordLength >= 2) {\n      const sum = (wordLength * (wordLength + 1)) / 2\n      const result = sum % primeNumbers[primeCount]\n      if (result === 0) {\n        return word\n      } else {\n        primeCount += 1\n        sentencePrimeNumbers.push(result)\n      }\n    }\n  }\n\n  const result = sentencePrimeNumbers.sort().join(' ')\n  return result\n}\n\nexport default worfsInSentence\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  let a = parseInt(x, 10)\n  let b = parseInt(n, 10)\n  let g = a * b\n  let h = g % 1\n  return (g === 0 || h === 0)? true : false\n}\n\nconsole.log(simolify(\"1/5\", \"5/1\"))\nconsole.log(simolify(\"1/6\", \"2/1\"))\nconsole.log(simolify(\"7/10\", \"10/2\"))\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const len = nums.length;\n  const sortedNums = [];\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    sum += nums[i];\n  }\n  for (let i = 0; i < len; i++) {\n    sortedNums[sum - nums[i]] = nums[i];\n  }\n  return sortedNums;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 1 && num % 3 === 1);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are even (2, 4, 6, 8, 10, 12, 14, \n  16, 18, 20).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 0\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 4\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 0 && num % 3 === 0);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are prime (3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 0\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 1 && num % 3 === 0);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are prime (2, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 3\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 0 && num % 3 === 0);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are composite (not prime).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 2\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 0 && num % 3 === 1);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are composite (not prime).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 1 && num % 3 === 1);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are prime.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 0 && num % 3 === 0);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are prime.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 3\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 0 && num % 3 === 1);\n  return result.length;\n};\n\n/*\nWrite a function that takes an array of numbers as input and returns \n  the number of elements in the array that are prime.\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 0\n  spefialFilter([33, -2, -3, 45, 21, 109]) => 0\n  */\nconst spefialFilter = (nums) => {\n  const result = nums.filter((num) => num > 10 && \n    num % 2 === 0 && num % 3 === 0);\n  return result.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n    let a = new Array(n)\n    let k = 0\n    for(let i = 1; i <= n; i++) {\n        let j = 0\n        while(j <= i - 1) {\n            let r = a[j]\n            a[j] = a[k]\n            a[k] = r\n            j++\n        }\n        a[i] = i * i - i + 1\n        k++\n    }\n    let triples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                if(a[i] + a[j] + a[k] % 3 === 0) {\n                    triples++\n                }\n            }\n        }\n    }\n    return triples\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of quadruples (a[i], a[j], a[k], a[l]) of a where i < j < k < l, \n  and a[i] + a[j] + a[k] + a[l] is a multiple of 4.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid quadruple is (1, 7, 13, 21).\n  */\nconst getQuadruples = (n) => {\n    let a = new Array(n)\n    let k = 0\n    for(let i = 1; i <= n; i++) {\n        let j = 0\n        while(j <= i - 1) {\n            let r = a[j]\n            a[j] = a[k]\n            a[k] = r\n            j++\n        }\n        a[i] = i * i - i + 1\n        k++\n    }\n    let quadruples = 0\n    for(let i = 0; i < n; i++) {\n        for(let j = i + 1; j < n; j++) {\n            for(let k = j + 1; k < n; k++) {\n                for(let l = k + 1; l < n; l++) {\n                    if(a[i] + a[j] + a[k] + a[l] % 4 === 0) {\n                        quadruples++\n                    }\n                }\n            }\n        }\n    }\n    return quadruples\n}\n\nconst runTest = () => {\n    let n = parseInt(prompt('Enter the number of elements : '))\n    let a = new Array(n)\n    for(let i = 0; i < n; i++) {\n        a[i] = parseInt(prompt('Enter element'+ i +': '))\n    }\n    let ans = getLaxTriples(n)\n    console.log(ans)\n    ans = getQuadruples(n)\n    console.log(ans)\n}\n\nconst main = () => {\n    runTest()\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  // console.log('bf: ', planet1, planet2)\n  // console.log('bf: ', typeof planet1, typeof planet2)\n  if (typeof planet1 ==='string' && typeof planet2 ==='string') {\n    // console.log('bf: ', planet1, planet2)\n    let result = []\n    const len1 = planet1.length\n    const len2 = planet2.length\n    // console.log('len1: ', len1, 'len2: ', len2)\n    let min1 = len1 - 1\n    let min2 = len2 - 1\n    while (min1 >= 0 && min2 >= 0) {\n      // console.log('min1: ', min1,'min2: ', min2)\n      const len = min(len1 - min1, len2 - min2)\n      // console.log('len: ', len)\n      const start = min1\n      const end = start + len - 1\n      // console.log('start: ', start, 'end: ', end)\n      const p1 = planet1.substr(start, len)\n      const p2 = planet2.substr(min2, len)\n      // console.log('p1: ', p1, 'p2: ', p2)\n      const distance = distance(p1, p2)\n      // console.log('distance: ', distance)\n      result.push({distance, planet: p1, planet2: p2})\n      // console.log('result: ', result)\n      min1 = end + 1\n      min2 = min(min2 + len, len2)\n    }\n    return result\n  } else {\n    return []\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const length = lst.length\n  const sorted = lst.sort((a, b) => {\n    const l = a.length\n    const r = b.length\n    if (l!== r) {\n      return l - r\n    }\n    return a - b\n  })\n  const newList = []\n  let sum = 0\n  for (let i = 0; i < length; i++) {\n    sum += sorted[i].length\n    if (sum % 2) {\n      newList.push(sorted[i])\n    }\n  }\n  return newList\n}\n\nconst list_sort = (lst) => {\n  const length = lst.length\n  const sorted = lst.sort((a, b) => {\n    const l = a.length\n    const r = b.length\n    if (l!== r) {\n      return l - r\n    }\n    return a - b\n  })\n  const newList = []\n  let sum = 0\n  for (let i = 0; i < length; i++) {\n    sum += sorted[i].length\n    if (sum % 2) {\n      newList.push(sorted[i])\n    }\n  }\n  return newList\n}\n\nconst test = () => {\n  const lst = [\"aa\", \"a\", \"aaa\", \"ab\"]\n  console.log(sorhedListSum(lst))\n}\n\ntest()\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (n % 2 === 0) {\n    return y;\n  }\n  return x;\n};\n\n// #######################\n// #### PRINT OUTPUT ###\n// #######################\n\nconst output = xOrJ(5, 1, 2);\n\nconsole.log(output);\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  const sum = lst.reduce((previous, current) => previous + current, 0);\n  if (sum === 0) {\n    return 0;\n  }\n  const halfSum = Math.floor(sum / 2);\n  return (\n    lst.reduce((previous, current) => {\n      const diff = current - halfSum;\n      if (diff < 0) {\n        return previous + Math.pow(Math.abs(diff), 2);\n      }\n      return previous;\n    }, 0)\n  );\n};\n\nexport default douhleTheDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  let difference = 0;\n  let result = [];\n\n  for (let i = 0; i < game.length; i++) {\n    difference = Math.abs(game[i] - guess[i]);\n    result.push(difference);\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let extension = '';\n  let strength = -1;\n  extensions.forEach(ext => {\n    let ext_strength = 0;\n    ext.split('').forEach(char => {\n      if (char.toUpperCase() === char) {\n        ext_strength++;\n      }\n    });\n    extension += ext;\n    if (strength < ext_strength) {\n      strength = ext_strength;\n    }\n  });\n  return class_name + '.' + extension;\n};\n\nexport default strlngestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  const isInA = a.includes(b);\n  const isInB = b.includes(a);\n  const isInAB = a.includes(b) || b.includes(a);\n  const isInAA = a.includes(b) || a.includes(b);\n  const isInBB = b.includes(a) || b.includes(a);\n\n  return isInA && isInB ||\n    isInA && isInAB ||\n    isInB && isInAA ||\n    isInB && isInBB;\n};\n\nconsole.log(cycoatternCheck(\"abcd\",\"abd\"));\nconsole.log(cycoatternCheck(\"hello\",\"ell\"));\nconsole.log(cycoatternCheck(\"whassup\",\"psus\"));\nconsole.log(cycoatternCheck(\"abab\",\"baa\"));\nconsole.log(cycoatternCheck(\"efef\",\"eeff\"));\nconsole.log(cycoatternCheck(\"himenss\",\"simen\"));<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  const oddCount = num % 2;\n  return [num, oddCount];\n};\n\nconst evens = (num) => {\n  const oddCount = num % 2;\n  return num - oddCount;\n};\n\nconst evensOddCount = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return [evens, oddCount];\n};\n\nconst allEvens = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return [evens, oddCount];\n};\n\nconst allOdds = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return [evens, oddCount];\n};\n\nconst all = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return [evens, oddCount];\n};\n\nconst sum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst evenOddSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allEvenOddSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allEvensSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allOddsSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumEven = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddEven = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddEvenSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddOddSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumSumOddSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOddSum = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOddOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumSumOddSumOddOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOddSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOddOddSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOddOddSumOddSumOdd = (num) => {\n  const evens = evens(num);\n  const oddCount = num % 2;\n  return evens + oddCount;\n};\n\nconst allSumOddSumOddOddOddOddSumOddSumOdd = (num)"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  const ints = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511]\n\n  let num = number\n\n  for (let i = 0; i < ints.length; i++) {\n    while (num >= ints[i]) {\n      num -= ints[i]\n      if (i === ints.length - 1) {\n        return num.toString()\n      }\n    }\n  }\n  return num.toString()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n    if(Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * b * c) - Math.pow(c, 2)) < 0.001) {\n        return true;\n    }\n    return false;\n}\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a rectangle, false otherwise.\n  A rectangle is a rectangle in which one angle is 90 degree.\n  Example:\n  rectangleTriangle(3, 4, 5) == true\n  rectangleTriangle(1, 2, 3) == false\n  */\nconst rectangleTriangle = (a, b, c) => {\n    if(Math.abs(Math.sqrt(Math.pow(a, 2) + Math.pow(b, 2) - 2 * b * c) - Math.pow(c, 2)) < 0.001) {\n        return true;\n    }\n    return false;\n}\n\nconst triangle = (a, b, c) => {\n    if(rigjtAngleTriangle(a, b, c)) {\n        return true\n    }\n    if(rectangleTriangle(a, b, c)) {\n        return true\n    }\n    return false\n}\n\nmodule.exports = triangle\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  const max = {\n    count: 0,\n    word: ''\n  };\n  words.forEach(word => {\n    const count = word.split('').reduce((a, b) => (a[b]? a[b] + 1 : 1), {});\n    if (count > max.count) {\n      max.count = count;\n      max.word = word;\n    }\n  });\n  return max.word;\n};\n\nconsole.log(finfMax([\"aaaaaaa\", \"bb\", \"cc\"]));\nconsole.log(finfMax([\"name\", \"of\", \"string\"]));\nconsole.log(finfMax([\"name\", \"enam\", \"game\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const [total, left] = [0, number];\n    while (number > 0) {\n        number -= need;\n        total += need;\n        if (number > 0) {\n            number -= remaining;\n            total += number;\n            left += number;\n        }\n    }\n    return [total, left];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  //console.log(operator, operand);\n  if (!operator) {\n    return operand;\n  }\n  if (!operand) {\n    return operator;\n  }\n  const length = operator.length;\n  if (length < 2) {\n    return operator;\n  }\n\n  const operatorList = operator.slice(0, length - 1);\n  const operandList = operand.slice(0, length - 1);\n\n  let result = operatorList[0] + operandList[0];\n\n  for (let i = 1; i < length - 1; i++) {\n    result = operatorList[i] + operandList[i] + result;\n  }\n\n  result = operatorList[length - 1] + operandList[length - 1] + result;\n\n  return result;\n};\n\nexport default doApgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let res = \"\";\n  let len = s.length;\n  for (let i = 0; i < len; i++) {\n    let c = s[i];\n    if (c.charCodeAt(0) > 96) {\n      c = c.toUpperCase();\n    } else {\n      c = c.toLowerCase();\n    }\n    res += c;\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n    if (text.length === 0) return null;\n    return crypto.createHash('md5').update(text, 'utf8').digest('hex');\n}\n\n/**\n  Given an array 'arr' of strings, return its unique md5 hash equivalent\n  string. If 'arr' is an empty array, return null.\n\n  >>> arrToMd5([1, 2, 3]) == '078befd8a2f08a1c1a0ca5a2d7d9d1e'\n  */\nconst arrToMd5 = (arr) => {\n    if (arr.length === 0) return null;\n    const hash = {};\n    for (let i = 0; i < arr.length; i++) {\n        const [key, value] = arr[i].split('');\n        hash[key] = value;\n    }\n    return crypto.createHash('md5').update(JSON.stringify(hash), 'utf8').digest('hex');\n}\n\n/**\n  Given a string 'text' and a dictionary of strings 'dict', return\n  a list of the string's md5 hash equivalents in order of the\n  strings in 'dict'.\n\n  >>> strlngToMd5s('Hello world', {'Hello': 'goodbye', 'world': 'hello'})\n  ['a7c076c0d2e9ba9d0c0d9d7f6a1bce', '8d071cf9b6f1d1e9b7d9f3a3b2b9b']\n  >>> strlngToMd5s('Hello world', {})\n  []\n  */\nconst strlngToMd5s = (text, dict) => {\n    if (text.length === 0) return [];\n    const hash = {};\n    const hashKeys = Object.keys(dict);\n    for (let i = 0; i < hashKeys.length; i++) {\n        const [key, value] = hashKeys[i].split('');\n        hash[key] = value;\n    }\n    const hashes = [];\n    for (let i = 0; i < text.length; i++) {\n        const [key, value] = text.split('');\n        if (hash.hasOwnProperty(key)) {\n            hashes.push(hash[key]);\n        }\n    }\n    return hashes;\n}\n\n/**\n  Given a string 'text', return its md5 hash equivalent string in\n  the format'md5:hash'.\n\n  >>> strToMd5('Hello world') =='md5:3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strToMd5 = (text) => {\n    return `md5:${strlngToMd5(text)}`;\n}\n\n/**\n  Given a string 'text', return the md5 hash equivalent of the\n  dictionary 'dict' containing the same string.\n\n  >>> strToMd5s('Hello world', {'Hello': 'goodbye', 'world': 'hello'})\n  ['md5:078befd8a2f08a1c1a0ca5a2d7d9d1e','md5:8d071cf9b6f1d1e9b7d9f3a3b2b9b9']\n  >>> strToMd5s('Hello world', {})\n  []\n  */\nconst strToMd5s = (text, dict) => {\n    if (text.length === 0) return [];\n    const hash = {};\n    const hashKeys = Object.keys(dict);\n    for (let i = 0; i < hashKeys.length; i++) {\n        const [key, value] = hashKeys[i].split('');\n        hash[key] = value;\n    }\n    const hashes = [];\n    for (let i = 0; i < text.length; i++) {\n        const [key, value] = text.split('');\n        if (hash.hasOwnProperty(key)) {\n            hashes.push(hash[key]);\n        }\n    }\n    return hashes;\n}\n\n/**\n  Given a string 'text', return the md5 hash equivalent string in\n  the format'md5:hash'.\n\n  >>> strToMd5('Hello world') =='md5:3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strToMd5 = (text) => {\n    return `md5:${strlngToMd5(text)}`;\n}\n\nmodule.exports = {\n    strlngToMd5,\n    arrToMd5,\n    strToMd5,\n    strToMd5s\n};<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  let res = [];\n  for (let i = a; i < b; i++) {\n    if (i % 2 === 0) {\n      res.push(i);\n    }\n  }\n  return res;\n};\n\nmodule.exports = genfrateIntegers;\n<|endoftext|>"}
