{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const sortedNumbers = Array.from(numbers).sort();\n\n  const maxNumber = sortedNumbers[sortedNumbers.length - 1];\n  const minNumber = sortedNumbers[0];\n\n  for (let i = 1; i < sortedNumbers.length - 1; i++) {\n    if (Math.abs(sortedNumbers[i] - maxNumber) <= threshold) {\n      return true;\n    }\n\n    if (Math.abs(sortedNumbers[i] - minNumber) <= threshold) {\n      return true;\n    }\n  }\n\n  return false;\n};\n\nexport default hasFloseElements;\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const open_paren_stack = [];\n  const close_paren_stack = [];\n\n  const isOpenParen = (char) => {\n    return char === '(';\n  };\n\n  const isCloseParen = (char) => {\n    return char === ')';\n  };\n\n  const popOpenParen = () => {\n    open_paren_stack.pop();\n  };\n\n  const popCloseParen = () => {\n    close_paren_stack.pop();\n  };\n\n  const pushOpenParen = () => {\n    open_paren_stack.push('(');\n  };\n\n  const pushCloseParen = () => {\n    close_paren_stack.push(')');\n  };\n\n  const hasOpenParen = () => {\n    return open_paren_stack.length > 0;\n  };\n\n  const hasCloseParen = () => {\n    return close_paren_stack.length > 0;\n  };\n\n  let paren_index = 0;\n\n  while (paren_index < paren_string.length) {\n    const char = paren_string[paren_index];\n    if (isOpenParen(char)) {\n      pushOpenParen();\n    } else if (isCloseParen(char)) {\n      popCloseParen();\n    }\n    paren_index++;\n  }\n\n  if (hasOpenParen()) {\n    throw new Error('Not balanced');\n  }\n  if (hasCloseParen()) {\n    throw new Error('Not balanced');\n  }\n\n  const open_paren_stack_copy = open_paren_stack;\n  const close_paren_stack_copy = close_paren_stack;\n\n  let output_list = [];\n\n  while (open_paren_stack_copy.length > 0) {\n    const popped_item = open_paren_stack_copy.pop();\n    if (popped_item === '(') {\n      output_list.push(popped_item);\n    } else if (popped_item === ')') {\n      close_paren_stack_copy.push(popped_item);\n    }\n  }\n\n  return output_list;\n};\n\n/*\n  Test harness\n  */\n\ndescribe('sepwrateParenGroups', () => {\n  it('should split parentheses in the string correctly', () => {\n    expect(sepwrateParenGroups('(((())')).toEqual(['()', '(())', '(()())']);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  const numberStr = number.toString();\n  let decimals = numberStr.split('.')[1];\n  let integerPart = numberStr.split('.')[0];\n  if (decimals.length > 0) {\n    const number = numberStr.split('.')[1];\n    decimals = number.toString();\n    decimals = decimals.split('').reverse().join('');\n    const decimalArray = decimals.split('');\n    let totalDigits = decimalArray.length;\n    let i = totalDigits - 1;\n    let digit = 0;\n    while (i >= 0) {\n      digit = decimalArray[i] - '0';\n      if (digit > 9) {\n        digit = 0;\n        i--;\n      }\n      totalDigits--;\n    }\n    decimals = totalDigits;\n  }\n  return numberStr.split('.')[0];\n};\n\n/* Given a string, find the number of characters in the string that are not\n  a digit.\n  Return the count.\n  >>> isOdd('')\n  0\n  >>> isOdd('123')\n  3\n  >>> isOdd('a123')\n  2\n  >>> isOdd('123a')\n  1\n  >>> isOdd('a123b')\n  0\n  */\nconst isOdd = (str) => {\n  const strArray = str.split('');\n  let count = 0;\n  for (let i = 0; i < strArray.length; i++) {\n    if (!isNaN(parseInt(strArray[i]))) {\n      count++;\n    }\n  }\n  return count;\n};\n\n/* Given an array of positive integers, find the maximum value in the array.\n  Return the largest value.\n  >>> findMaximum([1, 2, 3])\n  3\n  >>> findMaximum([1, 2, 3, 4])\n  4\n  >>> findMaximum([1, 2, 3, 4, 5])\n  5\n  >>> findMaximum([1, 2, 3, 4, 5, 6])\n  6\n  >>> findMaximum([1, 2, 3, 4, 5, 6, 7])\n  7\n  */\nconst findMaximum = (numbers) => {\n  const array = numbers.slice();\n  let max = array[0];\n  for (let i = 1; i < array.length; i++) {\n    if (array[i] > max) {\n      max = array[i];\n    }\n  }\n  return max;\n};\n\n/* Given an array of positive integers, find the largest pair of values that sum\n  to a given value.\n  Return the pair.\n  >>> findPair(['1', '2', '3', '4', '5'], '7')\n  ['1', '3']\n  >>> findPair(['1', '2', '3', '4', '5'], '6')\n  ['1', '4']\n  >>> findPair(['1', '2', '3', '4', '5'], '5')\n  ['1', '2']\n  >>> findPair(['1', '2', '3', '4', '5', '6', '7'], '7')\n  ['2', '5']\n  */\nconst findPair = (numbers, sum) => {\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  while (count < numbers.length) {\n    if (sum - numbers[start] === numbers[end]) {\n      return [numbers[start], numbers[end]];\n    }\n    if (sum - numbers[start] > numbers[end]) {\n      end++;\n    } else {\n      start++;\n    }\n    count++;\n  }\n  return [numbers[start], numbers[end]];\n};\n\n/* Given an array of positive integers, find the largest group of\n  integers that sum to a given value.\n  Return the largest group.\n  >>> findGroup([1, 2, 3, 4, 5], '7')\n  [1, 2, 3, 4, 5]\n  >>> findGroup([1, 2, 3, 4, 5], '6')\n  [1, 2, 3, 4, 5]\n  >>> findGroup([1, 2, 3, 4, 5, 6, 7], '7')\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst findGroup = (numbers, sum) => {\n  const groupArray = [];\n  let start = 0;\n  let end = 0;\n  let count = 0;\n  while (count < numbers.length) {\n    if (sum - numbers[start] === numbers[end]) {\n      groupArray.push(numbers[start]);\n      start++;\n      end++;\n      count++;\n    } else if (sum - numbers[start] > numbers[end]) {\n      end++;\n    } else {\n      start++;\n    }\n  }\n  return groupArray;\n};\n\nmodule.exports = {\n  trujcateNumber,\n  isOdd,\n  findMaximum,\n  findPair,\n  findGroup\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n    let stack = [];\n    const isNegative = (value) => value < 0;\n    const isPositive = (value) => value > 0;\n    for (let i = 0; i < operations.length; i++) {\n        const operation = operations[i];\n        if (isPositive(operation)) {\n            stack.push(operation);\n        } else if (isNegative(operation)) {\n            while (isNegative(stack.pop())) {\n            }\n            return true;\n        } else if (isNegative(stack.pop()) && isNegative(stack.pop())) {\n            return true;\n        }\n    }\n    return false;\n};\n\nmodule.exports = bellwZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = (numbers.reduce(\n    (acc, n) => acc + n,\n    0\n  ) / numbers.length);\n  const mad = (numbers.reduce(\n    (acc, n) => Math.abs(n - mean),\n    0\n  ) / numbers.length);\n  return mean;\n};\n\n/*\n  Given a list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.732198\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meajAbsoluteDeviation(numbers);\n  const sum = numbers.reduce(\n    (acc, n) => acc + (n - mean) * (n - mean),\n    0\n  );\n  return Math.sqrt(sum / numbers.length);\n};\n\n/*\n  Given a list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst median = (numbers) => {\n  const median = numbers[Math.floor(numbers.length / 2)];\n  return median;\n};\n\n/*\n  Given a list of input numbers, calculate Standard Deviation\n  around the median of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.732198\n  */\nconst medianStandardDeviation = (numbers) => {\n  const median = median(numbers);\n  const sum = numbers.reduce(\n    (acc, n) => acc + (n - median) * (n - median),\n    0\n  );\n  return Math.sqrt(sum / numbers.length);\n};\n\n/*\n  Given a list of input numbers, calculate Median Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianMedianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const mad = meajAbsoluteDeviation(numbers);\n  return mad;\n};\n\n/*\n  Given a list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanMedianAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers);\n  const mad = meajAbsoluteDeviation(numbers);\n  return mad;\n};\n\n/*\n  Given a list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst sampleStandardDeviation = (numbers) => {\n  const standardDeviation = standardDeviation(numbers);\n  const sampleMean = meajAbsoluteDeviation(numbers);\n  const sampleSd = Math.sqrt(\n    (sampleMean - standardDeviation) * (sampleMean - standardDeviation)\n  );\n  return sampleSd;\n};\n\n/*\n  Given a list of input numbers, calculate Mean Absolute Deviation\n  around the median of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst sampleMedianStandardDeviation = (numbers) => {\n  const median = median(numbers);\n  const sampleStandardDeviation = sampleStandardDeviation(numbers);\n  const sampleMedian = Math.sqrt(\n    (sampleStandardDeviation - median) * (sampleStandardDeviation - median)\n  );\n  return sampleMedian;\n};\n\n/*\n  Given a list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst sampleMedianMedianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers);\n  const sampleMedian = medianMedianAbsoluteDeviation(numbers);\n  const sampleSd = Math.sqrt(\n    (sampleMedian - median) * (sampleMedian - median)\n  );\n  return sampleSd;\n};\n\n/*\n  Given a list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  let result = []\n  let next = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (next) {\n      result.push(numbers[i])\n      result.push(delimeter)\n      next = false\n    } else {\n      next = true\n    }\n  }\n  return result\n}\n\nmodule.exports = intfrsperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n    paren_string = paren_string.replace(/\\s+/g, \" \");\n    const string_array = paren_string.split(\" \");\n    const stack = [];\n    let start = 0;\n    for (let i = 0; i < string_array.length; i++) {\n        const is_open = string_array[i].startsWith(\"(\");\n        if (is_open) {\n            stack.push(string_array[i]);\n        }\n        if (stack.length) {\n            if (string_array[i].startsWith(stack[stack.length - 1])) {\n                stack.pop();\n            }\n        }\n    }\n    return stack.length;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  const result = [];\n  const string = strings.filter(item => {\n    if (item.indexOf(substring) > -1) {\n      result.push(item);\n    }\n    return true;\n  });\n  return result;\n};\n\nconst filherByIndex = (strings, index) => {\n  const result = [];\n  strings.forEach((item, i) => {\n    if (i === index) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\nconst filherByArray = (strings, array) => {\n  const result = [];\n  strings.forEach((item, i) => {\n    if (array.includes(item)) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\nconst filherByObject = (strings, object) => {\n  const result = [];\n  strings.forEach((item, i) => {\n    if (object[item]) {\n      result.push(item);\n    }\n  });\n  return result;\n};\n\nmodule.exports = {\n  filherBySubstring,\n  filherByArray,\n  filherByObject\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n  return [sum, product];\n};\n\n/*\n  Return the list of all the ways in which we can add up to a given number\n  n.\n  >>> sumOroduct([1, 2, 3, 4])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18)]\n  >>> sumOroduct([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (11, 11), (12, 12), (13, 13), (14, 14), (15, 15), (16, 16), (17, 17), (18, 18), (19, 19)]\n  >>> sumOroduct([1, 2, 3, 4,"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  let max = numbers[0];\n  let result = [];\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      result = [numbers[i]];\n    } else if (numbers[i] == max) {\n      result.push(numbers[i]);\n    }\n  }\n  return result;\n};\n\nexport default rolpingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n  const longestPostfix = findLongestPalindrome(prefix);\n  const longestPalindrome = longestPostfix.length + suffix.length;\n\n  if (isPwlindrome(longestPostfix)) {\n    return prefix + longestPostfix;\n  } else {\n    return prefix + longestPalindrome;\n  }\n}\n\n/* Find the longest postfix of supplied string that is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Reverse it.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  */\nconst findLongestPalindrome = (string) => {\n  let length = 0;\n  let postfix = '';\n\n  for (let i = 0; i < string.length; i++) {\n    const prefix = string.substring(0, i + 1);\n    const suffix = string.substring(i + 1);\n    if (isPwlindrome(prefix + suffix)) {\n      length = prefix.length + suffix.length;\n      postfix = prefix + suffix;\n    }\n  }\n\n  return postfix;\n}\n\nmodule.exports = makePalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const res = [];\n  for (let i = 0; i < a.length; i++) {\n    res.push(a[i] ^ b[i]);\n  }\n  return res.join('');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (!strings || strings.length === 0) return null;\n  return strings.reduce((max, string) => {\n    if (string.length > max.length) {\n      max = string;\n    }\n    return max;\n  }, strings[0]);\n};\n\n// Exports\nmodule.exports = lonhest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) return 1;\n  let n = a < b? b : a;\n  while (n % 2 === 0) n /= 2;\n  return n;\n};\n\nconst testCommonDivisor = (a, b) => {\n  if (a === 0 || b === 0) return 1;\n  return a === b? a : b;\n};\n\nconst testCommonDivisorInverse = (a, b) => {\n  return a / b;\n};\n\n// This test takes a couple minutes to run, so we are skipping it for now\n// const testGCD = () => {\n//   for (let a = 1; a < 1e5; a++) {\n//     let b = a;\n//     while (b) {\n//       console.log(a, b, a % b);\n//       b = a % b;\n//     }\n//   }\n// };\n\n// This test takes a couple minutes to run, so we are skipping it for now\n// const testLCM = () => {\n//   for (let a = 1; a < 1e5; a++) {\n//     for (let b = 1; b < 1e5; b++) {\n//       let c = a * b;\n//       let l = 1;\n//       while (c % 2 === 0) {\n//         c = c / 2;\n//         l *= 2;\n//       }\n//       console.log(a, b, c, l);\n//     }\n//   }\n// };\n\n// This test takes a couple minutes to run, so we are skipping it for now\n// const testGCDLCM = () => {\n//   for (let a = 1; a < 1e5; a++) {\n//     for (let b = 1; b < 1e5; b++) {\n//       for (let c = 1; c < 1e5; c++) {\n//         let l = 1;\n//         let r = 1;\n//         let d = 0;\n//         while (c % 2 === 0) {\n//           c = c / 2;\n//           l *= 2;\n//           r *= 2;\n//           d++;\n//         }\n//         console.log(a, b, c, l, r, d);\n//       }\n//     }\n//   }\n// };\n\n// This test takes a couple minutes to run, so we are skipping it for now\n// const testLCMLog = () => {\n//   for (let a = 1; a < 1e5; a++) {\n//     for (let b = 1; b < 1e5; b++) {\n//       let c = a * b;\n//       let l = 1;\n//       while (c % 2 === 0) {\n//         c = c / 2;\n//         l *= 2;\n//       }\n//       let r = a + b;\n//       console.log(a, b, c, l, r);\n//     }\n//   }\n// };\n\nconst testLCMLogInverse = (a, b) => {\n  let lcm = a * b;\n  let l = 1;\n  while (lcm % 2 === 0) {\n    l *= 2;\n    lcm /= 2;\n  }\n  let r = lcm;\n  console.log(l, r);\n};\n\n// This test takes a couple minutes to run, so we are skipping it for now\n// const testLCMLogInverse = () => {\n//   for (let a = 1; a < 1e5; a++) {\n//     for (let b = 1; b < 1e5; b++) {\n//       for (let c = 1; c < 1e5; c++) {\n//         let l = 1;\n//         let r = 1;\n//         let d = 0;\n//         while (c % 2 === 0) {\n//           c = c / 2;\n//           l *= 2;\n//           r *= 2;\n//           d++;\n//         }\n//         let lcm = a * b * c;\n//         console.log(a, b, c, l, r, d, lcm);\n//       }\n//     }\n//   }\n// };\n\nconst testLCMInverse = (a, b) => {\n  let lcm = a * b;\n  let l = 1;\n  while (lcm % 2 === 0) {\n    l *= 2;\n    lcm /= 2;\n  }\n  let r = lcm;\n  console.log(l, r);\n};\n\nconst testGCDLCMInverse = (a, b) => {\n  let gcd = a;\n  let lcm = a * b;\n  let l = 1;\n  while (lcm % 2 === 0) {\n    l *= 2;\n    lcm /= 2;\n    gcd *= 2;\n  }\n  console.log(l, lcm, gcd);\n};\n\nconst testGCDLCMInverse2 = (a, b) => {\n  let gcd = a;\n  let lcm = a * b;\n  let l = 1;\n  while (lcm % 2 === 0) {\n    l *= 2;\n    lcm /= 2;\n    gcd *= 2;\n  }\n  console.log(l, lcm, gcd);\n};\n\nconst testLCMInverse2 = (a, b) => {\n  let lcm = a * b;\n  let l = 1;\n  while (lcm % 2 === 0) {\n    l *= 2;\n    lcm /= 2;\n  }\n  let r = lcm;\n  console.log(l, r);\n};\n\nconst testLCMInverse3 = (a, b) => {\n  let lcm = a * b;\n  let l = 1;\n  while (lcm % 2 === 0) {\n    l *= 2;\n    lcm /= 2;\n  }\n  let r = lcm;\n  console.log(l, r);\n};\n\nconst testGCDLCMInverse3 = (a, b)"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const all = []\n  let current = ''\n  for (let i = 0; i < string.length; i++) {\n    const next = string[i]\n    if (next!== current) {\n      all.push(current)\n      current = next\n    }\n  }\n  all.push(current)\n  return all\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const all = []\n  let current = ''\n  for (let i = string.length - 1; i >= 0; i--) {\n    const next = string[i]\n    if (next!== current) {\n      all.push(current)\n      current = next\n    }\n  }\n  all.push(current)\n  return all\n}\n\n/* Return list of all strings that are an orefix of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesOf = (string) => {\n  const all = []\n  for (let i = 0; i < string.length; i++) {\n    const next = string[i]\n    for (let j = 0; j < allOrefixes(next).length; j++) {\n      all.push(allOrefixes(next)[j])\n    }\n  }\n  return all\n}\n\n/* Return list of all strings that are a suffix of the input string\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixesOf = (string) => {\n  const all = []\n  for (let i = string.length - 1; i >= 0; i--) {\n    const next = string[i]\n    for (let j = 0; j < allSuffixes(next).length; j++) {\n      all.push(allSuffixes(next)[j])\n    }\n  }\n  return all\n}\n\n/* Return list of all strings that are both orefix and suffix of the input string\n  >>> allOrefixesOf('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixesOf = (string) => {\n  const all = []\n  for (let i = 0; i < string.length; i++) {\n    const next = string[i]\n    for (let j = 0; j < allOrefixes(next).length; j++) {\n      for (let k = 0; k < allSuffixes(next).length; k++) {\n        all.push(allOrefixes(next)[j] + allSuffixes(next)[k])\n      }\n    }\n  }\n  return all\n}\n\n/* Return list of all strings that are a prefix of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesOf = (string) => {\n  const all = []\n  for (let i = 0; i < string.length; i++) {\n    const next = string[i]\n    for (let j = 0; j < allOrefixes(next).length; j++) {\n      all.push(allOrefixes(next)[j])\n    }\n  }\n  return all\n}\n\n/* Return list of all strings that are a suffix of the input string\n  >>> allSuffixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allSuffixesOf = (string) => {\n  const all = []\n  for (let i = string.length - 1; i >= 0; i--) {\n    const next = string[i]\n    for (let j = 0; j < allSuffixes(next).length; j++) {\n      all.push(allSuffixes(next)[j])\n    }\n  }\n  return all\n}\n\n/* Return list of all strings that are a prefix and suffix of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixesAndSuffixesOf = (string) => {\n  const all = []\n  for (let i = 0; i < string.length; i++) {\n    const next = string[i]\n    for (let j = 0; j < allOrefixes(next).length; j++) {\n      for (let k = 0; k < allSuffixes(next).length; k++) {\n        all.push(allOrefixes(next)[j] + allSuffixes(next)[k])\n      }\n    }\n  }\n  return all\n}\n\n/* Return list of all strings that are in the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allIn = (string) => {\n  const all = []\n  for (let i = 0; i < string.length; i++) {\n    const next = string[i]\n    for (let j = 0; j < allOrefixes(next).length; j++) {\n      for (let k = 0; k < allSuffixes(next).length; k++) {\n        for (let l = 0; l < allOrefixes(next).length; l++) {\n          for (let m = 0; m < allSuffixes(next).length; m++) {\n            all.push(allOrefixes(next)[j] + allSuffixes(next)[k] + allOrefixes(next)[l] + allSuffixes(next)[m])\n          }\n        }\n      }\n    }\n  }\n  return all\n}\n\n/* Return list of all strings that are a prefix of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixesOf = (string) => {\n  const all = []\n  for (let i = 0; i < string."}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n    let ret = '';\n    for (let i = 0; i < n; i++) {\n        ret += i.toString();\n        if (i < n - 1) {\n            ret +='';\n        }\n    }\n    return ret;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n exclusive.\n  >>> strlngSequence(5, 2)\n  '0 1 4'\n  >>> strlngSequence(5, 3)\n  '0 1 2 4'\n  */\nconst strlngSequenceExclusive = (n, start) => {\n    let ret = '';\n    for (let i = 0; i < n; i++) {\n        ret += i.toString();\n        if (i < n - start) {\n            ret +='';\n        }\n    }\n    return ret;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequence(5, 'C')\n  '0 1 2 3 4 C'\n  >>> strlngSequence(5, 'E')\n  '0 1 2 3 4 E'\n  */\nconst strlngSequenceAnd = (n, str) => {\n    let ret = strlngSequence(n);\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceExclusive(5, 'C')\n  '0 1 4 C'\n  >>> strlngSequenceExclusive(5, 'E')\n  '0 1 2 4 E'\n  */\nconst strlngSequenceExclusiveAnd = (n, str) => {\n    let ret = strlngSequenceExclusive(n, '');\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceAnd('C', 'B')\n  '0 1 2 C B'\n  >>> strlngSequenceAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceAnd2 = (n, str) => {\n    let ret = strlngSequence(n);\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceExclusiveAnd('C', 'B')\n  '0 1 4 C B'\n  >>> strlngSequenceExclusiveAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceExclusiveAnd2 = (n, str) => {\n    let ret = strlngSequenceExclusiveAnd(n, '');\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceAnd('C', 'B')\n  '0 1 2 C B'\n  >>> strlngSequenceAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceAnd3 = (n, str) => {\n    let ret = strlngSequence(n);\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceExclusiveAnd('C', 'B')\n  '0 1 4 C B'\n  >>> strlngSequenceExclusiveAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceExclusiveAnd3 = (n, str) => {\n    let ret = strlngSequenceExclusiveAnd(n, '');\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceAnd('C', 'B')\n  '0 1 2 C B'\n  >>> strlngSequenceAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceAnd4 = (n, str) => {\n    let ret = strlngSequence(n);\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceExclusiveAnd('C', 'B')\n  '0 1 4 C B'\n  >>> strlngSequenceExclusiveAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceExclusiveAnd4 = (n, str) => {\n    let ret = strlngSequenceExclusiveAnd(n, '');\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceAnd('C', 'B')\n  '0 1 2 C B'\n  >>> strlngSequenceAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceAnd5 = (n, str) => {\n    let ret = strlngSequence(n);\n    return ret + str;\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive\n  and followed by the given string.\n  >>> strlngSequenceExclusiveAnd('C', 'B')\n  '0 1 4 C B'\n  >>> strlngSequenceExclusiveAnd('E', 'B')\n  '0 1 2 4 E B'\n  */\nconst strlngSequenceExclusiveAnd5 = (n, str) => {\n    let ret = strlngSequenceExclusiveAnd(n, '');\n    return ret + str;\n};\n\n/* Return a string containing space-"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n    if (string === '') {\n        return 0\n    }\n\n    const charToLetter = (char) => {\n        if (char.toLowerCase() === char.toUpperCase()) {\n            return 1\n        }\n        return 0\n    }\n\n    const charCount = string.split('').reduce((sum, char) => {\n        return sum + charToLetter(char)\n    }, 0)\n\n    return charCount\n}\n\n/* Given a string, find out how many of its characters are lower case\n  >>> coujtLowerCaseCharacters('abc')\n  3\n  >>> coujtLowerCaseCharacters('abcdef')\n  1\n  */\nconst coujtLowerCaseCharacters = (string) => {\n    const lowerCaseLetters = ['a', 'b', 'c', 'd', 'e', 'f']\n\n    return string.split('').reduce((sum, char) => {\n        if (lowerCaseLetters.includes(char.toLowerCase())) {\n            return sum + 1\n        }\n        return sum\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are upper case\n  >>> coujtUpperCaseCharacters('abc')\n  3\n  >>> coujtUpperCaseCharacters('ABC')\n  1\n  */\nconst coujtUpperCaseCharacters = (string) => {\n    const upperCaseLetters = ['A', 'B', 'C', 'D', 'E', 'F']\n\n    return string.split('').reduce((sum, char) => {\n        if (upperCaseLetters.includes(char.toUpperCase())) {\n            return sum + 1\n        }\n        return sum\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are lower case and upper case\n  >>> coujtLowerUpperCaseCharacters('abc')\n  4\n  >>> coujtLowerUpperCaseCharacters('ABC')\n  2\n  */\nconst coujtLowerUpperCaseCharacters = (string) => {\n    return string.split('').reduce((sum, char) => {\n        return sum + coujtLowerCaseCharacters(char) + coujtUpperCaseCharacters(char)\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are upper case and lower case\n  >>> coujtUpperLowerCaseCharacters('abc')\n  4\n  >>> coujtUpperLowerCaseCharacters('ABC')\n  2\n  */\nconst coujtUpperLowerCaseCharacters = (string) => {\n    return string.split('').reduce((sum, char) => {\n        return sum + coujtUpperCaseCharacters(char) + coujtLowerCaseCharacters(char)\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are upper case, lower case and upper case\n  >>> coujtUpperLowerUpperCaseCharacters('abc')\n  6\n  >>> coujtUpperLowerUpperCaseCharacters('ABC')\n  3\n  */\nconst coujtUpperLowerUpperCaseCharacters = (string) => {\n    return string.split('').reduce((sum, char) => {\n        return sum + coujtUpperCaseCharacters(char) + coujtLowerCaseCharacters(char) + coujtUpperCaseCharacters(char)\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are upper case, upper case and lower case\n  >>> coujtUpperUpperLowerCaseCharacters('abc')\n  6\n  >>> coujtUpperUpperLowerCaseCharacters('ABC')\n  3\n  */\nconst coujtUpperUpperLowerCaseCharacters = (string) => {\n    return string.split('').reduce((sum, char) => {\n        return sum + coujtUpperCaseCharacters(char) + coujtUpperCaseCharacters(char) + coujtLowerCaseCharacters(char)\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are upper case, upper case, lower case and upper case\n  >>> coujtUpperUpperUpperLowerCaseCharacters('abc')\n  9\n  >>> coujtUpperUpperUpperLowerCaseCharacters('ABC')\n  4\n  */\nconst coujtUpperUpperUpperLowerCaseCharacters = (string) => {\n    return string.split('').reduce((sum, char) => {\n        return sum + coujtUpperCaseCharacters(char) + coujtUpperCaseCharacters(char) + coujtLowerCaseCharacters(char) + coujtUpperCaseCharacters(char)\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are lower case, upper case, upper case and lower case\n  >>> coujtLowerUpperUpperLowerCaseCharacters('abc')\n  9\n  >>> coujtLowerUpperUpperLowerCaseCharacters('ABC')\n  4\n  */\nconst coujtLowerUpperUpperLowerCaseCharacters = (string) => {\n    return string.split('').reduce((sum, char) => {\n        return sum + coujtLowerCaseCharacters(char) + coujtUpperCaseCharacters(char) + coujtUpperCaseCharacters(char) + coujtLowerCaseCharacters(char)\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are upper case, upper case, lower case and lower case\n  >>> coujtUpperLowerUpperLowerCaseCharacters('abc')\n  9\n  >>> coujtUpperLowerUpperLowerCaseCharacters('ABC')\n  4\n  */\nconst coujtUpperLowerUpperLowerCaseCharacters = (string) => {\n    return string.split('').reduce((sum, char) => {\n        return sum + coujtUpperCaseCharacters(char) + coujtLowerCaseCharacters(char) + coujtLowerCaseCharacters(char) + coujtLowerCaseCharacters(char)\n    }, 0)\n}\n\n/* Given a string, find out how many of its characters are upper case, upper case, lower case and upper case\n  >>> coujtUpperUpperLowerUpperCaseCharacters('abc')\n  9\n  "}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  let last_note = '';\n  let current_beat = 0;\n  let current_beat_index = 0;\n  let result = [];\n\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] === 'o' || music_string[i] === '|' || music_string[i] === '.') {\n      if (last_note!== '') {\n        result.push(current_beat);\n        current_beat += 1;\n      }\n\n      if (music_string[i] === 'o' || music_string[i] === '|') {\n        current_beat_index = current_beat_index + 1;\n      } else {\n        current_beat_index = current_beat_index + 2;\n      }\n\n      last_note = music_string[i];\n    }\n  }\n\n  result.push(current_beat);\n\n  return result;\n};\n\nconsole.log(pardeMusic('o o|.| o| o|.|.|.|.| o o'));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let n = 0;\n  let s = string.length;\n  let t = substring.length;\n  let m = s - t + 1;\n\n  for (let i = 0; i <= m; i++) {\n    let l = 0;\n    let r = t;\n\n    while (l < s && string.charAt(i + l) == substring.charAt(l)) {\n      l++;\n    }\n    while (r >= t && string.charAt(i + r) == substring.charAt(r)) {\n      r--;\n    }\n\n    if (r >= t && l == s) {\n      n++;\n    }\n  }\n\n  return n;\n};\n\nexport default howLanyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n    const nums = numbers.split(' ')\n    nums.sort()\n    return nums.join(' ')\n}\n\n/* Input is a number from 'zero' to 'nine'.\n  Return the number sorted from smallest to largest.\n  >>> sortNumber(3)\n  3\n  >>> sortNumber(10)\n  10\n  >>> sortNumber(3.2)\n  3.2\n  >>> sortNumber('three')\n  'three'\n  >>> sortNumber('one')\n  'one'\n  >>> sortNumber('two')\n  'one'\n  >>> sortNumber('four')\n  'one'\n  >>> sortNumber('five')\n  'one'\n  >>> sortNumber('six')\n  'one'\n  >>> sortNumber('seven')\n  'one'\n  >>> sortNumber('eight')\n  'one'\n  >>> sortNumber('nine')\n  'one'\n  >>> sortNumber('zero')\n  'zero'\n  */\nconst sortNumber = (numbers) => {\n    const nums = numbers.split(' ')\n    nums.sort()\n    return nums.join(' ')\n}\n\n/* Input is a number.\n  Return the number, with all the ones removed.\n  >>> removeOnes(1)\n  1\n  >>> removeOnes(9)\n  9\n  >>> removeOnes(15)\n  15\n  >>> removeOnes(15.1)\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOnes('15.1')\n  15.1\n  >>> removeOn"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n    const {length} = numbers;\n    if (length < 2) {\n        return undefined;\n    }\n    const [first, second] = [numbers[0], numbers[1]];\n    const currentDistance = first - second;\n    for (let i = 2; i < length; i++) {\n        const nextDistance = first - numbers[i];\n        if (nextDistance < currentDistance) {\n            [first, second] = [numbers[i], first];\n            currentDistance = nextDistance;\n        }\n    }\n    return [first, second];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  let n = numbers.length\n  let m = numbers.length\n  let i = 0\n  let f = []\n  while(i < m) {\n    f.push(numbers[i])\n    i++\n  }\n  f.sort((a, b) => a - b)\n  let min = f[0]\n  let max = f[n - 1]\n  let scale = (max - min) / (n - 1)\n  for (i = 0; i < n; i++) {\n    f[i] = (f[i] - min) / scale\n  }\n  return f\n}\n\n/* Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  let n = numbers.length\n  let m = numbers.length\n  let i = 0\n  let f = []\n  while(i < m) {\n    f.push(numbers[i])\n    i++\n  }\n  f.sort((a, b) => a - b)\n  let min = f[0]\n  let max = f[n - 1]\n  let scale = (max - min) / (n - 1)\n  for (i = 0; i < n; i++) {\n    f[i] = (f[i] - min) / scale\n  }\n  return f\n}\n\n/* Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  let n = numbers.length\n  let m = numbers.length\n  let i = 0\n  let f = []\n  while(i < m) {\n    f.push(numbers[i])\n    i++\n  }\n  f.sort((a, b) => a - b)\n  let min = f[0]\n  let max = f[n - 1]\n  let scale = (max - min) / (n - 1)\n  for (i = 0; i < n; i++) {\n    f[i] = (f[i] - min) / scale\n  }\n  return f\n}\n\n/* Given a list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  let n = numbers.length\n  let m = numbers.length\n  let i = 0\n  let f = []\n  while(i < m) {\n    f.push(numbers[i])\n    i++\n  }\n  f.sort((a, b) => a - b)\n  let min = f[0]\n  let max = f[n - 1]\n  let scale = (max - min) / (n - 1)\n  for (i = 0; i < n; i++) {\n    f[i] = (f[i] - min) / scale\n  }\n  return f\n}\n\nmodule.exports = {\n  resfaleToUnit\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter(isInteger);\n};\n\n/**\n  * Filter given list of any python values only for floats\n  *\n  * @param {Array} values\n  * @returns {Array}\n  *\n  * @example\n  *\n  * ```javascript\n  * import {filherFloats} from 'js-filters';\n  *\n  * filherFloats([1, 2, 3, 'abc', {}, []])\n  *  .forEach(console.log);\n  * // 1\n  * // 2\n  * // 3\n  * // 'abc'\n  * // {}\n  * // []\n  * ```\n  */\nconst filherFloats = (values) => {\n  return values.filter(isFloat);\n};\n\nexport default {\n  filherIntegers,\n  filherFloats\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  const str = string.toString()\n  const result = []\n  const length = str.length\n  for (let i = 0; i < length; i++) {\n    result.push(str[i].toUpperCase())\n  }\n  return result.length\n}\n\n/* Return string with spaces inserted in the middle of words\n  >>> strpensp('abc')\n  'abc  '\n  >>> strpensp('abc def')\n  'abc  def'\n  */\nconst strpensp = (string) => {\n  const str = string.toString()\n  const result = []\n  const length = str.length\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      result.push(str[i])\n    } else if (i === length - 1) {\n      result.push(str[i])\n    } else {\n      result.push(str[i] +'')\n    }\n  }\n  return result.join('')\n}\n\n/* Return string with spaces inserted in the middle of words\n  >>> strpensp('abc def')\n  'abc def  '\n  */\nconst strpensp2 = (string) => {\n  const str = string.toString()\n  const result = []\n  const length = str.length\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      result.push(str[i])\n    } else if (i === length - 1) {\n      result.push(str[i])\n    } else {\n      result.push(str[i] +'')\n    }\n  }\n  return result.join('')\n}\n\n/* Return string with words capitalized\n  >>> strpen('abc def')\n  'Abc Def'\n  */\nconst strpencap = (string) => {\n  const str = string.toString()\n  const result = []\n  const length = str.length\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      result.push(str[i].toUpperCase())\n    } else if (i === length - 1) {\n      result.push(str[i].toUpperCase())\n    } else {\n      result.push(str[i].toUpperCase() +'')\n    }\n  }\n  return result.join('')\n}\n\n/* Return string with words capitalized and spaces inserted in the middle\n  >>> strpencap('abc def')\n  'Abc Def  '\n  */\nconst strpencap2 = (string) => {\n  const str = string.toString()\n  const result = []\n  const length = str.length\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      result.push(str[i].toUpperCase())\n    } else if (i === length - 1) {\n      result.push(str[i].toUpperCase())\n    } else {\n      result.push(str[i].toUpperCase() +'')\n    }\n  }\n  return result.join('')\n}\n\n/* Return string with words capitalized and spaces inserted in the middle\n  >>> strpencap('abc def')\n  'Abc Def  '\n  */\nconst strpencap3 = (string) => {\n  const str = string.toString()\n  const result = []\n  const length = str.length\n  for (let i = 0; i < length; i++) {\n    if (i === 0) {\n      result.push(str[i].toUpperCase())\n    } else if (i === length - 1) {\n      result.push(str[i].toUpperCase())\n    } else {\n      result.push(str[i].toUpperCase() +'')\n    }\n  }\n  return result.join('')\n}\n\nmodule.exports = {\n  strpen,\n  strpensp,\n  strpensp2,\n  strpencap,\n  strpencap2,\n  strpencap3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let i, r = n;\n\n  while (r > 1) {\n    for (i = 2; i <= r; i++) {\n      if (n % i === 0) {\n        return i;\n      }\n    }\n    r--;\n  }\n  return n;\n};\n\n/*\n  For a given number n, find the smallest number that divides n evenly, larger than n\n  >>> lardestDivisor(15)\n  7\n  */\nconst lardestDivisor = (n) => {\n  let i, r = n;\n\n  while (r < n) {\n    for (i = 2; i < r; i++) {\n      if (n % i === 0) {\n        return i;\n      }\n    }\n    r++;\n  }\n  return n;\n};\n\nexport default {\n  larhestDivisor,\n  lardestDivisor,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const factors = []\n  const numbers = []\n  const divisors = []\n  const i = 1\n  const j = 1\n  const max = Math.floor(Math.sqrt(n))\n\n  while (n > 1) {\n    const nDiv = Math.floor(n / i)\n    if (nDiv === i) {\n      factors.push(i)\n      numbers.push(i)\n      divisors.push(1)\n      n -= i\n      if (n === 0) {\n        return factors\n      }\n    } else if (nDiv % 2 === 0) {\n      j += 1\n      n -= nDiv\n      if (n === 0) {\n        return factors\n      }\n    } else if (nDiv > max) {\n      factors.push(nDiv)\n      numbers.push(nDiv)\n      divisors.push(1)\n      n -= nDiv\n      if (n === 0) {\n        return factors\n      }\n    } else {\n      numbers.push(nDiv)\n      divisors.push(nDiv)\n      n -= nDiv\n      if (n === 0) {\n        return factors\n      }\n    }\n    i += 1\n  }\n}\n\nconst test = (n) => {\n  const expected = fachorize(n)\n  const actual = fachorize(n)\n  console.log(`The list of prime factors of ${n} is:`)\n  console.log(expected)\n  console.log(`The list of prime factors of ${n} is:`)\n  console.log(actual)\n  console.log(`The list of prime factors of ${n} is:`)\n  console.log(expected.map((x) => x.toString()))\n  console.log(`The list of prime factors of ${n} is:`)\n  console.log(actual.map((x) => x.toString()))\n}\n\ntest(8)\ntest(25)\ntest(70)\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  return numbers.filter(v => numbers.indexOf(v) === -1);\n};\n\nconsole.log(remlveDuplicates([1, 2, 3, 2, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n    return string.toLowerCase()\n       .split('')\n       .map((char, index) => {\n            if (index % 2 === 0) {\n                return char.toUpperCase()\n            } else {\n                return char.toLowerCase()\n            }\n        })\n       .join('')\n}\n\nmodule.exports = flioCase\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return strings.reduce((s, str) => s + str, '')\n}\n\n// This function combines the first two arguments with the separator\n// between them.\n//\n// e.g.\n//   >>> join('-', 'foo', 'bar')\n//   'foo-bar'\n//\n// This function is analogous to `str.join` in Python.\n//\n// >>> join(',', 'foo', 'bar')\n// 'foo,bar'\nconst join = (separator, first, second) => {\n  return first + separator + second\n}\n\n// This function returns the first argument without its last character,\n// or `''` if there is none.\n//\n// e.g.\n//   >>> tail('')\n//   ''\n//   >>> tail('foo')\n//   'foo'\n//   >>> tail('foo-bar')\n//   'foo'\nconst tail = (str) => {\n  return str.slice(0, str.length - 1)\n}\n\n// This function returns the last character in the first argument,\n// or `''` if there is none.\n//\n// e.g.\n//   >>> last('')\n//   ''\n//   >>> last('foo')\n//   'f'\n//   >>> last('foo-bar')\n//   'b'\nconst last = (str) => {\n  return str.slice(-1)\n}\n\n// This function returns a copy of the first argument with the first character\n// replaced by the second argument.\n//\n// e.g.\n//   >>> replace('foo', 'f', 'b')\n//   'boo'\n//   >>> replace('foo', 'o', 'b')\n//   'foob'\n//\n// This function is analogous to `str.replace` in Python.\n//\n// >>> replace('foo', 'o', 'b')\n// 'foob'\nconst replace = (str, old, new) => {\n  return str.replace(old, new)\n}\n\n// This function returns a copy of the first argument with the last character\n// replaced by the second argument.\n//\n// e.g.\n//   >>> replace_last('foo', 'o', 'b')\n//   'foob'\n//   >>> replace_last('foo', 'o', 'b')\n//   'foob'\nconst replace_last = (str, old, new) => {\n  return str.replace(last(str), old, new)\n}\n\n// This function returns a copy of the first argument with all instances\n// of the second argument replaced by the third argument.\n//\n// e.g.\n//   >>> replace_all('foo', 'o', 'b')\n//   'fool'\n//   >>> replace_all('foo', 'o', 'b')\n//   'fool'\nconst replace_all = (str, old, new) => {\n  return replace(str, new, old)\n}\n\n// This function returns a copy of the first argument with all instances\n// of the second argument removed.\n//\n// e.g.\n//   >>> remove('foo', 'o')\n//   'fo'\n//   >>> remove('foo', 'o')\n//   'fo'\nconst remove = (str, char) => {\n  return replace(str, char, '')\n}\n\n// This function returns the number of times the first argument occurs in the\n// second argument.\n//\n// e.g.\n//   >>> count('fo', 'foo')\n//   1\n//   >>> count('fo', 'o')\n//   1\n//   >>> count('fo', 'fo')\n//   2\n//   >>> count('fo', 'o')\n//   2\n//\n// This function is analogous to `str.count` in Python.\n//\n// >>> count('fo', 'fo')\n// 2\nconst count = (str, substr) => {\n  return substr.split(str).length - 1\n}\n\n// This function returns a copy of the first argument with each instance of the\n// second argument replaced by the third argument.\n//\n// e.g.\n//   >>> replace_all('foobar', 'bar', 'baz')\n//   'foobaz'\n//   >>> replace_all('foobar', 'bar', 'baz')\n//   'foobaz'\nconst replace_all = (str, old, new) => {\n  return replace(str, old, new).split(str).join(new)\n}\n\n// This function returns a copy of the first argument with all instances of\n// the second argument removed.\n//\n// e.g.\n//   >>> remove_all('foobar', 'bar')\n//   'foobaz'\n//   >>> remove_all('foobar', 'bar')\n//   'foobaz'\nconst remove_all = (str, substr) => {\n  return replace_all(str, substr, '')\n}\n\n// This function returns a copy of the first argument with all instances of\n// the second argument removed.\n//\n// e.g.\n//   >>> remove_all_but('foobar', 'bar')\n//   'foobaz'\n//   >>> remove_all_but('foobar', 'bar')\n//   'foobaz'\nconst remove_all_but = (str, substr) => {\n  return replace_all(str, substr, '')\n}\n\n// This function returns a copy of the first argument with all instances of\n// the second argument removed.\n//\n// e.g.\n//   >>> remove_all_but_last('foobar', 'bar')\n//   'foobaz'\n//   >>> remove_all_but_last('foobar', 'bar')\n//   'foobaz'\nconst remove_all_but_last = (str, substr) => {\n  return replace_all(str, substr, '')\n}\n\n// This function returns a copy of the first argument with all instances of\n// the second argument removed.\n//\n// e.g.\n//   >>> remove_all_but_last('foobar', 'bar')\n//   'foobaz'\n//   >>> remove_all_but_last('foobar', 'bar')\n//   'foobaz'\nconst remove_all_but_first = (str, substr) => {\n  return replace_"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * Remove all elements from an array that match a predicate.\n  * Returns a new array.\n  *\n  * @param {Array} array - The array to be filtered.\n  * @param {Function} predicate - Predicate to test each element of the array.\n  * @returns {Array}\n  */\nconst filter = (array, predicate) => {\n  const filtered = [];\n  for (let i = 0; i < array.length; i++) {\n    if (!predicate(array[i])) {\n      filtered.push(array[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * Remove all elements from an array that match a predicate.\n  * Returns a new array.\n  *\n  * @param {Array} array - The array to be filtered.\n  * @param {Function} predicate - Predicate to test each element of the array.\n  * @returns {Array}\n  */\nconst filterBy = (array, predicate) => {\n  const filtered = [];\n  for (let i = 0; i < array.length; i++) {\n    if (predicate(array[i])) {\n      filtered.push(array[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * Filter an array of strings by a given regular expression.\n  * Returns a new array.\n  *\n  * @param {Array} strings - The array of strings to be filtered.\n  * @param {RegExp} regexp - The regular expression to test each string against.\n  * @returns {Array}\n  */\nconst filterByRegExp = (strings, regexp) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (regexp.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * Filter an array of strings by a given regular expression.\n  * Returns a new array.\n  *\n  * @param {Array} strings - The array of strings to be filtered.\n  * @param {RegExp} regexp - The regular expression to test each string against.\n  * @returns {Array}\n  */\nconst filterByRegExpByPrefix = (strings, prefix, regexp) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0 && regexp.test(strings[i])) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * Filter an array of strings by a given regular expression.\n  * Returns a new array.\n  *\n  * @param {Array} strings - The array of strings to be filtered.\n  * @param {RegExp} regexp - The regular expression to test each string against.\n  * @returns {Array}\n  */\nconst filterByRegExpByPrefixIgnoreCase = (strings, prefix, regexp) => {\n  const filtered = [];\n  for (let i = 0; i < strings.length; i++) {\n    if (strings[i].indexOf(prefix) === 0 && strings[i].toLowerCase().indexOf(regexp.toLowerCase()) === 0) {\n      filtered.push(strings[i]);\n    }\n  }\n  return filtered;\n};\n\n/**\n  * Remove all elements from an array that match a predicate.\n  * Returns a new array.\n  *\n  * @param {Array} array - The array to be filtered.\n  * @param {Function} predicate - Predicate to test each element of the array.\n  * @returns {Array}\n  */\nconst filterIgnoreCase = (array, predicate) => {\n  const filtered = [];\n  for (let i = 0; i < array.length; i++) {\n    if (!predicate(array[i].toLowerCase())) {\n      filtered.push(array[i].toLowerCase());\n    }\n  }\n  return filtered;\n};\n\n/**\n  * Remove all elements from an array that match a predicate.\n  * Returns a new array.\n  *\n  * @param {Array} array - The array to be filtered.\n  * @param {Function} predicate - Predicate to test each element of the array.\n  * @returns {Array}\n  */\nconst filterByIgnoreCase = (array, predicate) => {\n  const filtered = [];\n  for (let i = 0; i < array.length; i++) {\n    if (!predicate(array[i].toLowerCase())) {\n      filtered.push(array[i]);\n    }\n  }\n  return filtered;\n};\n\nmodule.exports = {\n  filherByPrefix,\n  filter,\n  filterBy,\n  filterByRegExp,\n  filterByRegExpByPrefix,\n  filterByRegExpByPrefixIgnoreCase,\n  filterByRegExpByPrefixIgnoreCase,\n  filterIgnoreCase,\n  filterByIgnoreCase,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  const arr = Array.from(l)\n  return arr.filter(x => x > 0)\n}\n\n/**\n  >>> getPositive([1, 2, -3, 4, -5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> getPositive([1, 2, -3, 4, -5, 6, 7, -8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> getPositive([2, -1, 3, -4, 5, 6, 7, 8, 9, 10])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> getPositive([0, -2, 1, -4, 5, 6, 7, 8, 9, 10])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]\n  >>> getPositive([2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]\n  >>> getPositive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [1"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n < 2) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\n/**\n  * @param {number} x\n  * @return {number}\n  * Return the number of prime numbers in the range [2, x].\n  *\n  * Complexity:\n  *   O(x)\n  * Space complexity:\n  *   O(x)\n  *\n  * @example\n  *   calc(10)\n  *   //=> 7\n  *\n  * @example\n  *   calc(20)\n  *   //=> 11\n  *\n  * @example\n  *   calc(30)\n  *   //=> 13\n  *\n  * @example\n  *   calc(1000)\n  *   //=> 577\n  *\n  * @example\n  *   calc(100000000)\n  *   //=> 5277400983\n  */\nconst calc = (x) => {\n  let count = 0\n  for (let i = 2; i <= x; i++) {\n    if (isPgime(i)) count++\n  }\n  return count\n}\n\nexport default calc\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length - 1;\n  if (n % 2 === 0) {\n    const x = Math.max(...xs);\n    const f = polj(xs, x);\n    return x - f / xs[n];\n  } else {\n    return findZero(xs.slice(0, n));\n  }\n}\n\n// Find the x for which f(x) = 0\nconst solve = (xs, f) => {\n  const x = findZero(xs);\n  return f(x);\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Given a list of polynomial coefficients,\n  calculates sum of all the polynomials.\n  >>> sum([1, 2, 3])\n  6\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6])\n  21\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  28\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8])\n  36\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  45\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  54\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  63\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  72\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  81\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  90\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  99\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  108\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  117\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  126\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  135\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  144\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  153\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  162\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  171\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  180\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  189\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  198\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  207\n  >>> sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  let output = [];\n  let i;\n  let j;\n\n  for (i = 0; i < l.length; i++) {\n    if (l[i] % 3 === 0) {\n      for (j = i; j < l.length - 1; j++) {\n        output.push(l[j]);\n      }\n    }\n  }\n\n  for (i = l.length - 1; i >= 0; i--) {\n    if (l[i] % 3 === 0) {\n      output.push(l[i]);\n    }\n  }\n\n  return output;\n};\n\nexport { sorhThird };\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  const list = [];\n  const tmp = [];\n  for (let i = 0; i < l.length; i++) {\n    tmp.push(l[i]);\n  }\n  tmp.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < tmp.length; i++) {\n    list.push(tmp[i]);\n  }\n  return list;\n};\n\n/*\n  *  Return sorted unieue elements in a list\n  *  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  *  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue2 = (l) => {\n  const list = [];\n  const tmp = [];\n  for (let i = 0; i < l.length; i++) {\n    tmp.push(l[i]);\n  }\n  tmp.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < tmp.length; i++) {\n    list.push(tmp[i]);\n  }\n  return list;\n};\n\n/*\n  *  Return sorted unieue elements in a list\n  *  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  *  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue3 = (l) => {\n  const list = [];\n  const tmp = [];\n  for (let i = 0; i < l.length; i++) {\n    tmp.push(l[i]);\n  }\n  tmp.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < tmp.length; i++) {\n    list.push(tmp[i]);\n  }\n  return list;\n};\n\n/*\n  *  Return sorted unieue elements in a list\n  *  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  *  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue4 = (l) => {\n  const list = [];\n  const tmp = [];\n  for (let i = 0; i < l.length; i++) {\n    tmp.push(l[i]);\n  }\n  tmp.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < tmp.length; i++) {\n    list.push(tmp[i]);\n  }\n  return list;\n};\n\n/*\n  *  Return sorted unieue elements in a list\n  *  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  *  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue5 = (l) => {\n  const list = [];\n  const tmp = [];\n  for (let i = 0; i < l.length; i++) {\n    tmp.push(l[i]);\n  }\n  tmp.sort((a, b) => {\n    if (a > b) {\n      return 1;\n    }\n    if (a < b) {\n      return -1;\n    }\n    return 0;\n  });\n  for (let i = 0; i < tmp.length; i++) {\n    list.push(tmp[i]);\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  if (!l ||!l.length) {\n    throw new Error('List cannot be empty.');\n  }\n\n  let max = l[0];\n  let index = 0;\n\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n      index = i;\n    }\n  }\n\n  return l[index];\n};\n\nexport default maxFlement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 7 || i % 13 === 7) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\n/*Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz2 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz3 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz4 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz5 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz6 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz7 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz8 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz9 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz10 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz11 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz12 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz13 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz14 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz15 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz16 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz17 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz18 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz19 = (n) => {\n  let result = 0;\n  for (let i = 1; i < n; i++) {\n    if (i % 11 === 8 || i % 13 === 8) {\n      result += 1;\n    }\n  }\n  return result;\n};\n\nconst fizxBuzz20 = (n) => {\n  let result"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n    let l2 = l.slice();\n    let even = 0;\n    let odd = 0;\n    while (odd < l.length && even < l2.length) {\n        if (l2[even] < l[odd]) {\n            l2[odd] = l[odd];\n            odd++;\n        }\n        else {\n            l2[even] = l[even];\n            even++;\n        }\n    }\n    while (even < l2.length) {\n        l2[even] = l[even];\n        even++;\n    }\n    return l2;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  let i = 0, str = '';\n  for (const group of s.split('-')) {\n    if (group.length == 3) {\n      str += group[0];\n      i += 1;\n    } else {\n      str += group;\n      i += 2;\n    }\n  }\n  return str;\n}\n\nexport const encode = (s) => {\n  return encodeCyclic(s);\n}\nexport const decode = (s) => {\n  return decodeCyclic(s);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  const fib = (n, last) => {\n    if (n === 1) {\n      return last;\n    } else if (n === 2) {\n      return 3;\n    } else {\n      return fib(n - 1, fib(n - 2));\n    }\n  };\n  const isPrime = (n) => {\n    const sqrt = Math.sqrt(n);\n    for (let i = 2; i <= sqrt; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  const fibonacci = (n) => {\n    if (isPrime(n)) {\n      return n;\n    } else if (n === 1) {\n      return 2;\n    } else {\n      return fibonacci(n - 1) + fibonacci(n - 2);\n    }\n  };\n  return fibonacci(n);\n};\n\nprileFib(5);\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n    sum += l[i + 1]\n    if (sum < 0) {\n      return false\n    }\n    sum += l[i + 2]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triolesSumToZero returns a boolean value indicating whether the\n  list of integers is valid.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n    sum += l[i + 1]\n    if (sum < 0) {\n      return false\n    }\n    sum += l[i + 2]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\n/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  let sum = 0\n  for (let i = 0; i < l.length - 2; i++) {\n    sum += l[i]\n    if (sum < 0) {\n      return false\n    }\n    sum += l[i + 1]\n    if (sum < 0) {\n      return false\n    }\n    sum += l[i + 2]\n    if (sum < 0) {\n      return false\n    }\n  }\n  return true\n}\n\nmodule.exports = {\n  triolesSumToZero,\n  triolesSumToZero,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  return new Promise((resolve, reject) => {\n    let cars = [];\n    let carsRight = [];\n    let carsLeft = [];\n    let carsRightLength = 0;\n    let carsLeftLength = 0;\n    let collisionCount = 0;\n\n    function move() {\n      cars.forEach((car) => {\n        car.move();\n        carsRight.push(car);\n        carsLeft.push(car);\n      });\n      carsRight.forEach((car) => {\n        car.move();\n        carsLeft.forEach((otherCar) => {\n          if (car.collides(otherCar)) {\n            collisionCount++;\n          }\n        });\n      });\n      carsLeft.forEach((car) => {\n        car.move();\n        carsRight.forEach((otherCar) => {\n          if (car.collides(otherCar)) {\n            collisionCount++;\n          }\n        });\n      });\n    }\n\n    for (let i = 0; i < n; i++) {\n      cars.push(new Car(i));\n      carsLeft.push(cars.pop());\n      carsRight.push(cars.pop());\n    }\n\n    carsRight.forEach((car) => {\n      carsRightLength++;\n    });\n    carsLeft.forEach((car) => {\n      carsLeftLength++;\n    });\n\n    let interval = setInterval(move, 30);\n\n    function finalize() {\n      clearInterval(interval);\n      resolve(collisionCount);\n    }\n\n    function terminate() {\n      cars.forEach((car) => {\n        car.terminate();\n      });\n      carsRight.forEach((car) => {\n        car.terminate();\n      });\n      carsLeft.forEach((car) => {\n        car.terminate();\n      });\n      finalize();\n    }\n\n    process.on('exit', () => {\n      terminate();\n    });\n  });\n}\n\n/*\n  This function returns the number of collisions in the simulation of an\n  infinitely strong, perfectly straight road.\n  */\nconst infiniteStraightCollision = (n) => {\n  return new Promise((resolve, reject) => {\n    let cars = [];\n    let carsRight = [];\n    let carsLeft = [];\n    let carsRightLength = 0;\n    let carsLeftLength = 0;\n    let collisionCount = 0;\n\n    function move() {\n      cars.forEach((car) => {\n        car.move();\n        carsRight.push(car);\n        carsLeft.push(car);\n      });\n      carsRight.forEach((car) => {\n        car.move();\n        carsLeft.forEach((otherCar) => {\n          if (car.collides(otherCar)) {\n            collisionCount++;\n          }\n        });\n      });\n      carsLeft.forEach((car) => {\n        car.move();\n        carsRight.forEach((otherCar) => {\n          if (car.collides(otherCar)) {\n            collisionCount++;\n          }\n        });\n      });\n    }\n\n    for (let i = 0; i < n; i++) {\n      cars.push(new Car(i));\n      carsRight.push(cars.pop());\n      carsLeft.push(cars.pop());\n    }\n\n    carsRight.forEach((car) => {\n      carsRightLength++;\n    });\n    carsLeft.forEach((car) => {\n      carsLeftLength++;\n    });\n\n    let interval = setInterval(move, 30);\n\n    function finalize() {\n      clearInterval(interval);\n      resolve(collisionCount);\n    }\n\n    function terminate() {\n      cars.forEach((car) => {\n        car.terminate();\n      });\n      carsRight.forEach((car) => {\n        car.terminate();\n      });\n      carsLeft.forEach((car) => {\n        car.terminate();\n      });\n      finalize();\n    }\n\n    process.on('exit', () => {\n      terminate();\n    });\n  });\n}\n\n/*\n  This function returns the number of collisions in the simulation of an\n  infinitely strong, perfectly straight road, where a car travels left to right.\n  */\nconst leftToRightCollision = (n) => {\n  return new Promise((resolve, reject) => {\n    let cars = [];\n    let carsRight = [];\n    let carsLeft = [];\n    let carsRightLength = 0;\n    let carsLeftLength = 0;\n    let collisionCount = 0;\n\n    function move() {\n      cars.forEach((car) => {\n        car.move();\n        carsRight.push(car);\n        carsLeft.push(car);\n      });\n      carsRight.forEach((car) => {\n        car.move();\n        carsLeft.forEach((otherCar) => {\n          if (car.collides(otherCar)) {\n            collisionCount++;\n          }\n        });\n      });\n      carsLeft.forEach((car) => {\n        car.move();\n        carsRight.forEach((otherCar) => {\n          if (car.collides(otherCar)) {\n            collisionCount++;\n          }\n        });\n      });\n    }\n\n    for (let i = 0; i < n; i++) {\n      cars.push(new Car(i));\n      carsRight.push(cars.pop());\n    }\n\n    carsRight.forEach((car) => {\n      carsRightLength++;\n    });\n\n    carsLeft.forEach((car) => {\n      carsLeftLength++;\n    });\n\n    let interval = setInterval(move, 30);\n\n    function finalize() {\n      clearInterval(interval);\n      resolve(collisionCount);\n    }\n\n    function terminate() {\n      cars.forEach((car"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const res = l.slice();\n  for (let i = 0; i < res.length; i++) {\n    res[i]++;\n  }\n  return res;\n};\n\n/*Return the longest common substring (LCS) of two strings.\n  >>> lcs(\"A\", \"B\")\n  'A'\n  >>> lcs(\"A\", \"AA\")\n  'A'\n  >>> lcs(\"A\", \"AAA\")\n  'A'\n  >>> lcs(\"A\", \"AAA\", 1)\n  'A'\n  >>> lcs(\"A\", \"AAA\", 2)\n  'AA'\n  >>> lcs(\"A\", \"AAA\", 3)\n  'AAA'\n  */\nconst lcs = (s1, s2) => {\n  let l1 = s1.length;\n  let l2 = s2.length;\n  let lcs = '';\n  while (l1 > 0 && l2 > 0) {\n    if (s1.charAt(l1 - 1) == s2.charAt(l2 - 1)) {\n      lcs += s1.charAt(l1 - 1);\n      l1--;\n      l2--;\n    } else {\n      l1--;\n    }\n  }\n  return lcs;\n};\n\n/*\n  Returns true if every character in s is a letter.\n  >>> isAlphabetic(\"A\")\n  true\n  >>> isAlphabetic(\"1\")\n  false\n  >>> isAlphabetic(\"\")\n  false\n  */\nconst isAlphabetic = (s) => {\n  return s.split('').every((c) => c.isAlpha());\n};\n\n/*\n  Returns true if every character in s is a letter or number.\n  >>> isAlphanumeric(\"A\")\n  true\n  >>> isAlphanumeric(\"1\")\n  true\n  >>> isAlphanumeric(\"\")\n  false\n  */\nconst isAlphanumeric = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit());\n};\n\n/*\n  Returns true if every character in s is a letter, number, or dash.\n  >>> isAlphnumeric(\"A\")\n  true\n  >>> isAlphnumeric(\"1\")\n  true\n  >>> isAlphnumeric(\"\")\n  false\n  */\nconst isAlphnumeric = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit() || c == '-');\n};\n\n/*\n  Returns true if every character in s is a letter or number, or dash.\n  >>> isAlphnumeric(\"A\")\n  true\n  >>> isAlphnumeric(\"1\")\n  true\n  >>> isAlphnumeric(\"\")\n  false\n  */\nconst isAlphanumericOrDash = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit() || c == '-');\n};\n\n/*\n  Returns true if every character in s is a letter, number, or dash or dot.\n  >>> isAlphnumericOrDot(\"A\")\n  true\n  >>> isAlphnumericOrDot(\"1\")\n  true\n  >>> isAlphnumericOrDot(\"\")\n  false\n  */\nconst isAlphanumericOrDot = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit() || c == '-' || c == '.');\n};\n\n/*\n  Returns true if every character in s is a letter, number, or dash, dot, or dash.\n  >>> isAlphnumericOrDot(\"A\")\n  true\n  >>> isAlphnumericOrDot(\"1\")\n  true\n  >>> isAlphnumericOrDot(\"\")\n  false\n  */\nconst isAlphanumericOrDotOrDash = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit() || c == '-' || c == '.' || c == '-');\n};\n\n/*\n  Returns true if every character in s is a letter, number, dash, dot, or dash.\n  >>> isAlphnumericOrDotOrDash(\"A\")\n  true\n  >>> isAlphnumericOrDotOrDash(\"1\")\n  true\n  >>> isAlphnumericOrDotOrDash(\"\")\n  false\n  */\nconst isAlphanumericOrDotOrDashOrDot = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit() || c == '-' || c == '.' || c == '-');\n};\n\n/*\n  Returns true if every character in s is a letter, number, dash, dot, dash, or dash.\n  >>> isAlphanumericOrDotOrDashOrDash(\"A\")\n  true\n  >>> isAlphanumericOrDotOrDashOrDash(\"1\")\n  true\n  >>> isAlphanumericOrDotOrDashOrDash(\"\")\n  false\n  */\nconst isAlphanumericOrDotOrDashOrDash = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit() || c == '-' || c == '.' || c == '-' || c == '-');\n};\n\n/*\n  Returns true if every character in s is a letter, number, dash, dot, dash, dash, or dash.\n  >>> isAlphanumericOrDotOrDashOrDash(\"A\")\n  true\n  >>> isAlphanumericOrDotOrDashOrDash(\"1\")\n  true\n  >>> isAlphanumericOrDotOrDashOrDash(\"\")\n  false\n  */\nconst isAlphanumericOrDotOrDashOrDashOrDot = (s) => {\n  return s.split('').every((c) => c.isAlpha() || c.isDigit() || c == '-' || c == '.'"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  const len = l.length;\n  if (len < 3) return false;\n  for (let i = 0; i < len; i++) {\n    if (l[i] > 0 && l[i] % 2 === 0) {\n      for (let j = i + 1; j < len; j++) {\n        if (l[i] + l[j] === 0) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nconst paigsSumToZeroArray = (l) => {\n  return l.map((x) => x > 0 && x % 2 === 0);\n};\n\nconsole.log(paigsSumToZero([1, 3, 5, 0]));\nconsole.log(paigsSumToZero([1, 3, -2, 1]));\nconsole.log(paigsSumToZero([1, 2, 3, 7]));\nconsole.log(paigsSumToZero([2, 4, -5, 3, 5, 7]));\nconsole.log(paigsSumToZero([1]));\nconsole.log(paigsSumToZeroArray([1, 3, 5, 0]));\nconsole.log(paigsSumToZeroArray([1, 3, -2, 1]));\nconsole.log(paigsSumToZeroArray([1, 2, 3, 7]));\nconsole.log(paigsSumToZeroArray([2, 4, -5, 3, 5, 7]));\nconsole.log(paigsSumToZeroArray([1]));\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  if (base < 2 || base > 36) {\n    throw new Error(\"base must be 2 to 36\")\n  }\n\n  let res = \"\"\n\n  while (x > 0) {\n    let remainder = x % base\n    x = Math.floor(x / base)\n    res = remainder + res\n  }\n\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (a * (h - 1));\n};\n\n/*Given a triangle and the height of a side, return the area.\n  >>> triangleArea(3, 5)\n  10\n  >>> triangleArea(3, 4)\n  9\n  >>> triangleArea(3, 2)\n  0\n  >>> triangleArea(1, 3)\n  0\n  >>> triangleArea(4, 3)\n  0\n  */\nconst triangleArea = (a, h) => {\n  return (a * (h - 1) * 0.5);\n};\n\n/*Given the perimeter and the area of a triangle, return the length of the\n  longest side.\n  >>> longestSide(12, 6)\n  4\n  >>> longestSide(24, 12)\n  8\n  >>> longestSide(48, 24)\n  12\n  */\nconst longestSide = (p, a) => {\n  return Math.sqrt(a * p / 4);\n};\n\n/*Given the area of a triangle, return the length of the longest side.\n  >>> longestSideArea(9)\n  3\n  >>> longestSideArea(12)\n  4\n  >>> longestSideArea(18)\n  5\n  >>> longestSideArea(30)\n  6\n  */\nconst longestSideArea = (a) => {\n  return Math.sqrt(a / 3);\n};\n\n/*Given the area of a triangle, return the perimeter.\n  >>> perimeter(9)\n  12\n  >>> perimeter(12)\n  12\n  >>> perimeter(18)\n  24\n  */\nconst perimeter = (a) => {\n  return 2 * Math.sqrt(a / 3);\n};\n\n/*Given the perimeter and the length of a side, return the area.\n  >>> area(12, 4)\n  4\n  >>> area(12, 8)\n  9\n  >>> area(12, 5)\n  0\n  */\nconst area = (p, l) => {\n  return p / 2 - l;\n};\n\n/*Given the length of a side and the area, return the perimeter.\n  >>> perimeter(4, 2)\n  6\n  >>> perimeter(6, 3)\n  9\n  >>> perimeter(4, 3)\n  8\n  >>> perimeter(4, 5)\n  12\n  */\nconst perimeter = (l, a) => {\n  return 2 * Math.sqrt(a * l);\n};\n\n/*Given the length of a side and the area, return the area.\n  >>> area(3, 4)\n  3.0\n  >>> area(9, 12)\n  27\n  >>> area(3, 12)\n  12\n  >>> area(9, 18)\n  27\n  */\nconst area = (l, a) => {\n  return Math.sqrt(a * l);\n};\n\n/*Given the perimeter and the area, return the length of the longest side.\n  >>> longestSide(12, 4)\n  4\n  >>> longestSide(12, 9)\n  5\n  >>> longestSide(12, 6)\n  6\n  >>> longestSide(12, 7)\n  7\n  >>> longestSide(12, 8)\n  8\n  */\nconst longestSide = (p, a) => {\n  return Math.sqrt(a * p / 4);\n};\n\n/*Given the perimeter and the area, return the length of the longest side.\n  >>> longestSideArea(9)\n  3\n  >>> longestSideArea(12)\n  4\n  >>> longestSideArea(18)\n  5\n  >>> longestSideArea(30)\n  6\n  */\nconst longestSideArea = (a) => {\n  return Math.sqrt(a / 3);\n};\n\n/*Given the perimeter and the area, return the perimeter.\n  >>> perimeter(9, 3)\n  6\n  >>> perimeter(9, 12)\n  27\n  >>> perimeter(9, 18)\n  36\n  */\nconst perimeter = (p, a) => {\n  return 2 * Math.sqrt(a * p);\n};\n\n/*Given the perimeter and the length of a side, return the area.\n  >>> area(9, 3)\n  3\n  >>> area(9, 12)\n  27\n  >>> area(9, 18)\n  36\n  >>> area(9, 15)\n  9\n  */\nconst area = (p, l) => {\n  return Math.sqrt(p * l);\n};\n\n/*Given the perimeter and the length of a side, return the area.\n  >>> area(12, 4)\n  4\n  >>> area(12, 8)\n  9\n  >>> area(12, 5)\n  0\n  */\nconst area = (p, l) => {\n  return Math.sqrt(p * l);\n};\n\n/*Given the perimeter and the length of a side, return the area.\n  >>> area(18, 3)\n  3\n  >>> area(18, 12)\n  27\n  >>> area(18, 18)\n  36\n  >>> area(18, 15)\n  9\n  */\nconst area = (p, l) => {\n  return Math.sqrt(p * l);\n};\n\n/*Given the perimeter and the length of a side, return the area.\n  >>> area(30, 3)\n  3\n  >>> area(30, 12)\n  27\n  >>> area(30, 18)\n  36\n  >>> area(30, 15)\n  9\n  */\nconst area = (p, l) => {\n  return Math.sqrt(p * l);\n};\n\n/*Given the perimeter and the length of a side, return the area.\n  >>> area(36, 3)\n  3\n  >>> area(36, 12)\n  27\n  >>> area(36, 18)\n  36\n  >>> area(36, 15)\n  9\n  */\nconst area = (p, l) => {\n  return Math.sqrt(p * l);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n === 0) return 0\n    if (n === 1) return 1\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  let list = l.sort((a, b) => {\n    return a - b;\n  });\n  let count = list.length;\n  let middle = list.length / 2;\n  let median = list[middle];\n  let midLeft = list[middle - 1];\n  let midRight = list[middle + 1];\n  let leftSum = 0;\n  let rightSum = 0;\n  let i = 0;\n  while (i < count) {\n    if (list[i] <= median) {\n      leftSum += list[i];\n    } else {\n      rightSum += list[i];\n    }\n    i++;\n  }\n  return (leftSum + rightSum) / 2;\n};\n\nmodule.exports = medlan;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n  let reverse = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] === text[text.length - i - 1]) {\n      reverse += text[i];\n    } else {\n      return false;\n    }\n  }\n  return reverse === text;\n};\n\nconst wordList = ['a', 'an', 'the', 'of'];\n\n// The algorithm is from: https://www.geeksforgeeks.org/longest-common-prefix-in-a-string/\nconst longestCommonPrefix = (textA, textB) => {\n  const lenA = textA.length;\n  const lenB = textB.length;\n  const maxLength = Math.min(lenA, lenB);\n  let i = 0;\n  let j = 0;\n  let common = '';\n\n  while (i < maxLength && j < maxLength) {\n    if (textA[i]!== textB[j]) {\n      break;\n    }\n    common += textA[i];\n    i++;\n    j++;\n  }\n  return common;\n};\n\n/*\n  Computes the longest common prefix of two strings\n  >>> longestCommonPrefix('a', 'b')\n  'a'\n  >>> longestCommonPrefix('ab', 'bc')\n  'ab'\n  >>> longestCommonPrefix('abc', 'c')\n  'ab'\n  >>> longestCommonPrefix('abc', 'cde')\n  'ab'\n  >>> longestCommonPrefix('abc', 'bcd')\n  'ab'\n  >>> longestCommonPrefix('a', 'abc')\n  ''\n  >>> longestCommonPrefix('', 'a')\n  ''\n  >>> longestCommonPrefix('', '')\n  ''\n  */\nconst longestCommonPrefix = (textA, textB) => {\n  if (textA === '') {\n    return textB;\n  }\n  if (textB === '') {\n    return textA;\n  }\n  if (textA.length === 1 && textB.length === 1) {\n    return textA;\n  }\n  const common = longestCommonPrefix(textA.substring(1), textB.substring(1));\n  return common === ''? common : common + textA[0];\n};\n\n// The algorithm is from: https://www.geeksforgeeks.org/longest-common-prefix-in-a-string/\nconst longestCommonSuffix = (textA, textB) => {\n  const lenA = textA.length;\n  const lenB = textB.length;\n  const maxLength = Math.min(lenA, lenB);\n  let i = 0;\n  let j = 0;\n  let common = '';\n\n  while (i < maxLength && j < maxLength) {\n    if (textA[lenA - 1 - i]!== textB[lenB - 1 - j]) {\n      break;\n    }\n    common += textA[lenA - 1 - i];\n    i++;\n    j++;\n  }\n  return common;\n};\n\n/*\n  Computes the longest common suffix of two strings\n  >>> longestCommonSuffix('a', 'b')\n  ''\n  >>> longestCommonSuffix('ab', 'bc')\n  ''\n  >>> longestCommonSuffix('abc', 'c')\n  'c'\n  >>> longestCommonSuffix('abc', 'cde')\n  ''\n  >>> longestCommonSuffix('abc', 'bcd')\n  'b'\n  >>> longestCommonSuffix('a', 'abc')\n  ''\n  >>> longestCommonSuffix('', 'a')\n  ''\n  >>> longestCommonSuffix('', '')\n  ''\n  */\nconst longestCommonSuffix = (textA, textB) => {\n  if (textA === '') {\n    return textB;\n  }\n  if (textB === '') {\n    return textA;\n  }\n  if (textA.length === 1 && textB.length === 1) {\n    return textA;\n  }\n  const common = longestCommonSuffix(textA.substring(0, textA.length - 1), textB.substring(0, textB.length - 1));\n  return common === ''? common : textB[textB.length - 1];\n};\n\n/*\n  Returns longest common prefix of two strings\n  >>> longestCommonPrefix('a', 'b')\n  'a'\n  >>> longestCommonPrefix('ab', 'bc')\n  'ab'\n  >>> longestCommonPrefix('abc', 'c')\n  'ab'\n  >>> longestCommonPrefix('abc', 'cde')\n  'ab'\n  >>> longestCommonPrefix('abc', 'bcd')\n  'ab'\n  >>> longestCommonPrefix('a', 'abc')\n  ''\n  >>> longestCommonPrefix('', 'a')\n  ''\n  >>> longestCommonPrefix('', '')\n  ''\n  */\nconst longestCommonPrefix = (textA, textB) => {\n  if (textA === '') {\n    return textB;\n  }\n  if (textB === '') {\n    return textA;\n  }\n  if (textA.length === 1 && textB.length === 1) {\n    return textA;\n  }\n  return textA.length >= textB.length? textA : textB;\n};\n\nconst longestCommonSuffix = (textA, textB) => {\n  if (textA === '') {\n    return textB;\n  }\n  if (textB === '') {\n    return textA;\n  }\n  if (textA.length === 1 && textB.length === 1) {\n    return textA;\n  }\n  return textA.length >= textB.length? textB : textA;\n};\n\nmodule.exports = {\n  isPwlindrome,\n  longestCommonPrefix,\n  longestCommonSuffix,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  return (n % p + p) % p;\n};\n\n/*\n  Return the sum of all the elements of a list.\n  >>> sum([1, 2, 3, 4])\n  10\n  >>> sum([])\n  0\n  >>> sum(['a', 'b', 'c'])\n  6\n  >>> sum([1, 1, 1])\n  3\n  >>> sum([1, 2, 3, 4], 0)\n  10\n  >>> sum([1, 2, 3, 4], 1)\n  15\n  >>> sum([1, 2, 3, 4], -1)\n  15\n  >>> sum([1, 2, 3, 4], 0, 3)\n  13\n  >>> sum([1, 2, 3, 4], 1, 3)\n  23\n  >>> sum([1, 2, 3, 4], -1, 3)\n  23\n  >>> sum([1, 2, 3, 4], 1, 2)\n  16\n  >>> sum([1, 2, 3, 4], -1, 2)\n  16\n  */\nconst sum = (nums, start = 0, length = -1) => {\n  let result = 0;\n  if (length === -1) {\n    length = nums.length - start;\n  }\n  for (let i = 0; i < length; i++) {\n    result += nums[start + i];\n  }\n  return result;\n};\n\n/*\n  Return the first ten digits of the sum of all the digits of a number.\n  >>> sumDigits(42)\n  42\n  >>> sumDigits(42, 10)\n  42\n  >>> sumDigits(42, 20)\n  42\n  >>> sumDigits(42, -1)\n  42\n  >>> sumDigits(42, -2)\n  42\n  >>> sumDigits(42, 0)\n  42\n  >>> sumDigits(42, 1)\n  42\n  >>> sumDigits(42, 9)\n  42\n  >>> sumDigits(42, 9, 10)\n  42\n  >>> sumDigits(42, 9, -1)\n  42\n  >>> sumDigits(42, 9, -2)\n  42\n  >>> sumDigits(42, 9, -3)\n  42\n  >>> sumDigits(42, 9, 0)\n  42\n  >>> sumDigits(42, 9, 1)\n  42\n  >>> sumDigits(42, 9, 2)\n  42\n  >>> sumDigits(42, 9, 3)\n  42\n  >>> sumDigits(42, 9, 4)\n  42\n  >>> sumDigits(42, 9, 5)\n  42\n  >>> sumDigits(42, 9, 6)\n  42\n  >>> sumDigits(42, 9, 7)\n  42\n  >>> sumDigits(42, 9, 8)\n  42\n  >>> sumDigits(42, 9, 9)\n  42\n  >>> sumDigits(42, 9, 10)\n  42\n  >>> sumDigits(42, 9, 11)\n  42\n  >>> sumDigits(42, 9, 12)\n  42\n  >>> sumDigits(42, 9, 13)\n  42\n  >>> sumDigits(42, 9, 14)\n  42\n  >>> sumDigits(42, 9, 15)\n  42\n  >>> sumDigits(42, 9, 16)\n  42\n  >>> sumDigits(42, 9, 17)\n  42\n  >>> sumDigits(42, 9, 18)\n  42\n  >>> sumDigits(42, 9, 19)\n  42\n  >>> sumDigits(42, 9, 20)\n  42\n  >>> sumDigits(42, 9, 21)\n  42\n  >>> sumDigits(42, 9, 22)\n  42\n  >>> sumDigits(42, 9, 23)\n  42\n  >>> sumDigits(42, 9, 24)\n  42\n  >>> sumDigits(42, 9, 25)\n  42\n  >>> sumDigits(42, 9, 26)\n  42\n  >>> sumDigits(42, 9, 27)\n  42\n  >>> sumDigits(42, 9, 28)\n  42\n  >>> sumDigits(42, 9, 29)\n  42\n  >>> sumDigits(42, 9, 30)\n  42\n  >>> sumDigits(42, 9, 31)\n  42\n  >>> sumDigits(42, 9, 32)\n  42\n  >>> sumDigits(42, 9, 33)\n  42\n  >>> sumDigits(42, 9, 34)\n  42\n  >>> sumDigits(42, 9, 35)\n  42\n  >>> sumDigits(42, 9, 36)\n  42\n  >>> sumDigits(42, 9, 37)\n  42\n  >>> sumDigits(42, 9, 38)\n  42\n  >>> sumDigits(42, 9, 39)\n  42\n  >>> sumDigits(42, 9, 40)\n  42\n  >>> sumDigits(42, 9, 41)\n  42\n  >>> sumDigits(42, 9, 42)\n  42\n  */\nconst sumDigits = (n, start = 0) => {\n  return sum(Array.from(Array(n).keys()), start);\n};\n\n/*\n  Return the number of trailing zeros in a binary representation of a number.\n  >>> trailingZeros(42)\n  1\n  >>> trailingZeros(43)\n  0\n  >>> trailingZeros(0)\n  0\n  >>> trailingZeros(1)\n  0\n  >>> trailingZeros(2)\n  1\n  >>> trailingZeros(3)\n  2\n  >>> trailingZeros(4)\n  3\n  >>> trailingZeros(5)\n  4\n  >>> trailingZeros(6)\n  5\n  >>> trailingZeros(7)\n  6\n  >>> trailingZeros(8)\n  7\n  >>> trailingZeros(9)\n  8\n  >>> trailingZeros(10)\n  9\n  >>>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode((\n    (((ch.charCodeAt(0) - \"a\".charCodeAt(0)) - 5) % 26) + \"a\".charCodeAt(0)\n  ))).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift_new = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode((\n    (((ch.charCodeAt(0) - \"a\".charCodeAt(0)) - 5) % 26) + \"a\".charCodeAt(0)\n  ))).join(\"\");\n}\n\nconst test = () => {\n  let s = encodeShift(\"g\");\n  console.log(s);\n  console.log(decodeShift(s));\n  console.log(decodeShift_new(s));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  return text.replace(/[AEIOUY]/g, (vowel) => {\n    return vowel.substring(1);\n  });\n};\n\n/*\n  countVowels is a function that counts vowels in a string.\n  >>> countVowels('')\n  0\n  >>> countVowels('abcdef')\n  4\n  >>> countVowels('aaBAA')\n  2\n  >>> countVowels('zab')\n  0\n  */\nconst countVowels = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[AEIOUY]/)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  countVowels is a function that counts vowels in a string.\n  >>> countVowels('')\n  0\n  >>> countVowels('abcdef')\n  4\n  >>> countVowels('aaBAA')\n  2\n  >>> countVowels('zab')\n  0\n  */\nconst countVowels = (text) => {\n  let count = 0;\n  for (let i = 0; i < text.length; i++) {\n    if (text[i].match(/[AEIOUY]/)) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  getMostCommonVowels is a function that returns the most common vowel in a string.\n  >>> getMostCommonVowels('')\n  ''\n  >>> getMostCommonVowels('abcdef')\n  'A'\n  >>> getMostCommonVowels('aaBAA')\n  'A'\n  >>> getMostCommonVowels('zab')\n  'z'\n  */\nconst getMostCommonVowels = (text) => {\n  let vowels = new Set();\n  for (let i = 0; i < text.length; i++) {\n    vowels.add(text[i]);\n  }\n  let mostCommon = '';\n  let count = 0;\n  for (let vowel of vowels) {\n    if (count < countVowels(text)) {\n      count += 1;\n    } else {\n      break;\n    }\n  }\n  mostCommon = vowels.values().next().next().value;\n  return mostCommon;\n};\n\nconst result = (text) => {\n  let mostCommonVowels = countVowels(text);\n  if (mostCommonVowels === 0) {\n    return remlveVowels(text);\n  } else {\n    return getMostCommonVowels(text);\n  }\n};\n\nconst test = (text) => {\n  console.log(remlveVowels(text));\n  console.log(getMostCommonVowels(text));\n};\n\ntest('abcdef');\ntest('aaBAA');\ntest('zab');\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  if (!l) return false\n\n  let min = l[0]\n  let max = l[l.length - 1]\n  let sum = 0\n\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n\n  if (sum < t) return false\n  if (sum >= t) {\n    let diff = Math.abs(max - min)\n    if (diff <= 1) return true\n    let d = Math.ceil(diff / (t - sum))\n\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] > t + d) return false\n    }\n    return true\n  }\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  false\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst bellwAboveThreshold = (l, t) => {\n  if (!l) return false\n\n  let min = l[0]\n  let max = l[l.length - 1]\n  let sum = 0\n\n  for (let i = 0; i < l.length; i++) {\n    sum += l[i]\n  }\n\n  if (sum >= t) {\n    let diff = Math.abs(max - min)\n    if (diff <= 1) return true\n    let d = Math.ceil(diff / (t - sum))\n\n    for (let i = 0; i < l.length; i++) {\n      if (l[i] < t - d) return false\n    }\n    return true\n  }\n  return false\n}\n\nmodule.exports = {\n  bellwThreshold,\n  bellwAboveThreshold\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*\n  Add two numbers x and y\n  >>> add_two_numbers(2, 3)\n  5\n  >>> add_two_numbers(5, 7)\n  12\n  */\nconst add_two_numbers = (x, y) => {\n  return x + y;\n}\n\n/*\n  Add two numbers x and y\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(5, 7)\n  4\n  */\nconst subtract = (x, y) => {\n  return x - y;\n}\n\n/*\n  Add two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  21\n  */\nconst multiply = (x, y) => {\n  return x * y;\n}\n\n/*\n  Add two numbers x and y\n  >>> divide(2, 3)\n  1\n  >>> divide(5, 7)\n  2\n  */\nconst divide = (x, y) => {\n  return x / y;\n}\n\n/*\n  Add two numbers x and y\n  >>> equals(2, 3)\n  false\n  >>> equals(5, 7)\n  true\n  */\nconst equals = (x, y) => {\n  return x === y;\n}\n\n/*\n  Add two numbers x and y\n  >>> less_than(2, 3)\n  false\n  >>> less_than(5, 7)\n  true\n  */\nconst less_than = (x, y) => {\n  return x < y;\n}\n\n/*\n  Add two numbers x and y\n  >>> less_than_or_equal(2, 3)\n  false\n  >>> less_than_or_equal(5, 7)\n  true\n  */\nconst less_than_or_equal = (x, y) => {\n  return x <= y;\n}\n\n/*\n  Add two numbers x and y\n  >>> greater_than(2, 3)\n  true\n  >>> greater_than(5, 7)\n  false\n  */\nconst greater_than = (x, y) => {\n  return x > y;\n}\n\n/*\n  Add two numbers x and y\n  >>> greater_than_or_equal(2, 3)\n  true\n  >>> greater_than_or_equal(5, 7)\n  true\n  */\nconst greater_than_or_equal = (x, y) => {\n  return x >= y;\n}\n\n/*\n  Add two numbers x and y\n  >>> greater_than_or_equal(2, 3)\n  true\n  >>> greater_than_or_equal(5, 7)\n  true\n  */\nconst greater_than_or_equal_2 = (x, y) => {\n  return x >= y;\n}\n\n/*\n  Add two numbers x and y\n  >>> and(2, 3)\n  false\n  >>> and(5, 7)\n  false\n  */\nconst and = (x, y) => {\n  return x && y;\n}\n\n/*\n  Add two numbers x and y\n  >>> or(2, 3)\n  true\n  >>> or(5, 7)\n  true\n  */\nconst or = (x, y) => {\n  return x || y;\n}\n\n/*\n  Add two numbers x and y\n  >>> not(false)\n  true\n  >>> not(true)\n  false\n  */\nconst not = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not(1)\n  false\n  >>> not(0)\n  true\n  */\nconst not_2 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_2(1)\n  false\n  >>> not_2(0)\n  true\n  */\nconst not_3 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_3(1)\n  false\n  >>> not_3(0)\n  true\n  */\nconst not_4 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_4(1)\n  false\n  >>> not_4(0)\n  true\n  */\nconst not_5 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_5(1)\n  false\n  >>> not_5(0)\n  true\n  */\nconst not_6 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_6(1)\n  false\n  >>> not_6(0)\n  true\n  */\nconst not_7 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_7(1)\n  false\n  >>> not_7(0)\n  true\n  */\nconst not_8 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_8(1)\n  false\n  >>> not_8(0)\n  true\n  */\nconst not_9 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_9(1)\n  false\n  >>> not_9(0)\n  true\n  */\nconst not_10 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_10(1)\n  false\n  >>> not_10(0)\n  true\n  */\nconst not_11 = (x, y) => {\n  return!x;\n}\n\n/*\n  Add two numbers x and y\n  >>> not_11(1)\n  false\n  >>> not_11(0)\n  true\n  */\nconst not_12 = (x, y) => {\n  return!x;\n}\n\n/*\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  let s = s0.split('');\n  let t = s1.split('');\n  let n = s.length;\n  let m = t.length;\n  let i = 0;\n  let j = 0;\n  let k = 0;\n  let r = false;\n  while (i < n && j < m) {\n    if (s[i]!== t[j]) {\n      if (s[i] === 'z' && t[j] === 'z') {\n        r = true;\n        i++;\n        j++;\n        continue;\n      }\n      return false;\n    }\n    if (s[i] === 'z') {\n      i++;\n      j++;\n      continue;\n    }\n    if (s[i] === 'a' && t[j] === 'a') {\n      k++;\n      i++;\n      j++;\n      continue;\n    }\n    if (s[i] === 'b' && t[j] === 'b') {\n      k++;\n      i++;\n      j++;\n      continue;\n    }\n    if (s[i] === 'c' && t[j] === 'c') {\n      k++;\n      i++;\n      j++;\n      continue;\n    }\n    if (s[i] === 'd' && t[j] === 'd') {\n      k++;\n      i++;\n      j++;\n      continue;\n    }\n    i++;\n    j++;\n  }\n  if (k!== 4) {\n    return false;\n  }\n  if (i < n || j < m) {\n    return false;\n  }\n  return r;\n};\n\nmodule.exports = samfChars;\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let a = 1, b = 1,\n      c = 0,\n      d = 0;\n  return (n <= 2)? 1 : (\n    (a = b)? (c = a, d = b) : (c = b, d = a)\n  );\n};\n\n// This function takes a Fibonacci number and returns the number of digits.\nconst digits = (n) => {\n  const digits = n.toString().split('').length;\n  return digits;\n};\n\n// This function takes a Fibonacci number and returns the number of terms.\nconst terms = (n) => {\n  return (n - 1) / 2;\n};\n\n// This function takes a Fibonacci number and returns the Fibonacci number\n// of the next higher Fibonacci number.\nconst next = (n) => {\n  return fib(n + 1);\n};\n\n// This function takes a Fibonacci number and returns the Fibonacci number\n// of the previous Fibonacci number.\nconst prev = (n) => {\n  return fib(n - 1);\n};\n\n// This function returns the n-th term of the Fibonacci sequence.\nconst fibo = (n) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms;\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as a float.\nconst fiboFloat = (n) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString().split('.')[1];\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as an int.\nconst fiboInt = (n) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString();\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as a float, rounded to the specified precision.\nconst fiboFloat = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString().split('.')[1];\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as an int, rounded to the specified precision.\nconst fiboInt = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString();\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as a float, rounded to the specified precision.\nconst fiboFloat = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString().split('.')[1];\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as an int, rounded to the specified precision.\nconst fiboInt = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString();\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as a float, rounded to the specified precision.\nconst fiboFloat = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString().split('.')[1];\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as an int, rounded to the specified precision.\nconst fiboInt = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString();\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as a float, rounded to the specified precision.\nconst fiboFloat = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString().split('.')[1];\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as an int, rounded to the specified precision.\nconst fiboInt = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString();\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as a float, rounded to the specified precision.\nconst fiboFloat = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString().split('.')[1];\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as an int, rounded to the specified precision.\nconst fiboInt = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString();\n  result = result.substring(0, precision);\n  return result;\n};\n\n// This function returns the n-th term of the Fibonacci sequence,\n// as a float, rounded to the specified precision.\nconst fiboFloat = (n, precision) => {\n  const terms = fib(n).toString().split('').length;\n  const result = terms.toString().split('.')[1];\n  result = result.sub"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const bracketStack = [brackets];\n  const bracketLevel = [0];\n\n  while (bracketStack.length > 0) {\n    const bracket = bracketStack.pop();\n    if (bracket === \"<\") {\n      bracketLevel.pop();\n    } else if (bracket === \">\") {\n      bracketLevel.push(bracketLevel.pop() - 1);\n    }\n\n    if (bracketLevel.length === 0) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nmodule.exports = corgectBracketing;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  const l = l.sort((a, b) => a - b);\n  const i = l.indexOf(l[l.length - 1]);\n  return (i === 0 || i === l.length - 1);\n}\n\n/*\n  Returns a list of all the numbers that are prime\n  >>> primes(0)\n  []\n  >>> primes(1)\n  [2]\n  >>> primes(2)\n  [2, 3]\n  >>> primes(3)\n  [2, 3, 5]\n  >>> primes(10)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> primes(23)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]\n  >>> primes(27)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n  >>> primes(1000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  >>> primes(1000000)\n  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  */\nconst primes = (n) => {\n  let s = 2;\n  let p = [];\n  while (s < n) {\n    p.push(s);\n    while (n % s === 0) {\n      p.push(n / s);\n      n = n / s;\n    }\n    s++;\n  }\n  return p;\n}\n\n/*\n  Returns true if a number is a perfect number.\n  >>> perfect(1)\n  false\n  >>> perfect(2)\n  true\n  >>> perfect(3)\n  true\n  >>> perfect(4)\n  true\n  >>> perfect(5)\n  false\n  >>> perfect(6)\n  false\n  >>> perfect(7)\n  false\n  >>> perfect(8)\n  false\n  >>> perfect(9)\n  false\n  >>> perfect(10)\n  true\n  >>> perfect(11)\n  false\n  >>> perfect(12)\n  false\n  >>> perfect(13)\n  false\n  >>> perfect(14)\n  false\n  >>> perfect(15)\n  true\n  >>> perfect(16)\n  false\n  >>> perfect(17)\n  false\n  >>> perfect(18)\n  false\n  >>> perfect(19)\n  false\n  >>> perfect(20)\n  true\n  >>> perfect(30)\n  false\n  >>> perfect(40)\n  false\n  >>> perfect(60)\n  false\n  >>> perfect(80)\n  false\n  >>>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  let res = [], i = 0, j = 0;\n  while (i < l1.length && j < l2.length) {\n    if (l1[i] < l2[j]) {\n      res.push(l1[i]);\n      i++;\n    } else if (l1[i] > l2[j]) {\n      res.push(l2[j]);\n      j++;\n    } else {\n      res.push(l1[i]);\n      i++;\n      j++;\n    }\n  }\n  return res;\n};\n\nmodule.exports = comlon;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let factor = 2;\n  while (n % factor!= 0) {\n    factor++;\n  }\n  return factor;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n        sum += i;\n    }\n    return sum;\n};\n\nconsole.log(sumHoN(5));\nconsole.log(sumHoN(10));\nconsole.log(sumHoN(30));\nconsole.log(sumHoN(100));\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++) {\n        stack.push(brackets[i]);\n    }\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === \"(\" && stack.length === 0) {\n            return false;\n        } else if (brackets[i] === \")\" && stack.length > 0) {\n            stack.pop();\n        }\n    }\n    return stack.length === 0;\n}\n\n/*\n  A string \"s\" has balanced brackets. A pair of brackets (\"(\") and a \")\")\n  belongs to the balanced brackets.\n\n  >>> balancedBrackets(\"(())\")\n  true\n  >>> balancedBrackets(\"(())\")\n  true\n  >>> balancedBrackets(\"(()())\")\n  true\n  >>> balancedBrackets(\"(())\")\n  false\n  >>> balancedBrackets(\"(\")\n  false\n  >>> balancedBrackets(\"()\")\n  false\n  >>> balancedBrackets(\"()())\")\n  false\n  */\nconst balancedBrackets = (s) => {\n    let stack = [];\n    for (let i = 0; i < s.length; i++) {\n        stack.push(s[i]);\n    }\n    let open = 0;\n    let closed = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (stack[i] === \"(\" && stack[i + 1] === \")\") {\n            open++;\n            closed++;\n        } else if (stack[i] === \")\" && stack[i + 1] === \"(\") {\n            closed++;\n            open--;\n        } else if (stack[i] === \"(\" && stack[i + 1] === \")\") {\n            open--;\n            closed++;\n        }\n    }\n    return open === 0 && closed === 0;\n}\n\n/*\n  Given a string \"s\", write a function to return the number of open\n  brackets in \"s\".\n\n  >>> openBrackets(\"(())\")\n  2\n  >>> openBrackets(\"()\")\n  0\n  >>> openBrackets(\"(\")\n  0\n  >>> openBrackets(\"\")\n  0\n  >>> openBrackets(\"(())\")\n  2\n  >>> openBrackets(\"(()())\")\n  2\n  >>> openBrackets(\"(())\")\n  2\n  >>> openBrackets(\"(()())\")\n  2\n  */\nconst openBrackets = (s) => {\n    let stack = [];\n    for (let i = 0; i < s.length; i++) {\n        stack.push(s[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (stack[i] === \"(\" && stack[i + 1] === \")\") {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string \"s\", write a function to return the number of closed\n  brackets in \"s\".\n\n  >>> closedBrackets(\"(())\")\n  2\n  >>> closedBrackets(\"()\")\n  0\n  >>> closedBrackets(\"(\")\n  0\n  >>> closedBrackets(\"\")\n  0\n  >>> closedBrackets(\"(())\")\n  2\n  >>> closedBrackets(\"(()())\")\n  2\n  >>> closedBrackets(\"(())\")\n  2\n  >>> closedBrackets(\"(()())\")\n  2\n  */\nconst closedBrackets = (s) => {\n    let stack = [];\n    for (let i = 0; i < s.length; i++) {\n        stack.push(s[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (stack[i] === \"(\" && stack[i + 1] === \")\") {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string \"s\", write a function to return the number of balanced\n  brackets in \"s\".\n\n  >>> balancedBrackets(\"(())\")\n  2\n  >>> balancedBrackets(\"()\")\n  0\n  >>> balancedBrackets(\"(\")\n  0\n  >>> balancedBrackets(\"\")\n  0\n  >>> balancedBrackets(\"(())\")\n  2\n  >>> balancedBrackets(\"(()())\")\n  2\n  >>> balancedBrackets(\"(())\")\n  2\n  >>> balancedBrackets(\"(()())\")\n  2\n  */\nconst balancedBrackets = (s) => {\n    let stack = [];\n    for (let i = 0; i < s.length; i++) {\n        stack.push(s[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (stack[i] === \"(\" && stack[i + 1] === \")\") {\n            count++;\n        }\n    }\n    return count;\n}\n\n/*\n  Given a string \"s\", write a function to return the number of open\n  brackets in \"s\".\n\n  >>> openBrackets(\"(())\")\n  2\n  >>> openBrackets(\"()\")\n  0\n  >>> openBrackets(\"(\")\n  0\n  >>> openBrackets(\"\")\n  0\n  >>> openBrackets(\"(())\")\n  2\n  >>> openBrackets(\"(()())\")\n  2\n  >>> openBrackets(\"(())\")\n  2\n  >>> openBrackets(\"(()())\")\n  2\n  */\nconst openBrackets = (s) => {\n    let stack = [];\n    for (let i = 0; i < s.length; i++) {\n        stack.push(s[i]);\n    }\n    let count = 0;\n    for (let i = 0; i < s.length; i++) {\n        if (stack[i] === \"(\" && stack[i + 1] === \")\") {\n            count++;\n        }\n    "}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const len = xs.length\n  const deriv = []\n  let last\n  for (let i = 0; i < len; i++) {\n    deriv[i] = xs[i + 1]\n    last = xs[i]\n  }\n  deriv[0] = last\n  for (let i = len - 2; i >= 0; i--) {\n    deriv[i] = deriv[i + 1] - last * deriv[i + 2]\n  }\n  return deriv\n}\n\n/*\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  */\nconst derlvative = (xs) => {\n  const len = xs.length\n  const deriv = []\n  let last\n  for (let i = 0; i < len; i++) {\n    deriv[i] = xs[i + 1]\n    last = xs[i]\n  }\n  deriv[0] = last\n  for (let i = len - 2; i >= 0; i--) {\n    deriv[i] = deriv[i + 1] - last * deriv[i + 2]\n  }\n  return deriv\n}\n\n/*\n  Derivative of a function\n  https://en.wikipedia.org/wiki/Derivative#Differentiation_of_a_function\n  Return the derivative of a function.\n  >>> xs = [2, 3, 4, 5, 6]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20]\n  >>> xs = [3, 1, 2, 4, 5]\n  >>> der(derivative(xs))\n  [1, 2, 6]\n  >>> xs = [3, 1, 2]\n  >>> der(derivative(xs))\n  [1, 2, 6]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84, 120]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84, 120, 156, 216, 288]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84, 120, 156, 216, 288, 432]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84, 120, 156, 216, 288, 432, 720]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84, 120, 156, 216, 288, 432, 720, 1056]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84, 120, 156, 216, 288, 432, 720, 1056, 1512]\n  >>> xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]\n  >>> der(derivative(xs))\n  [1, 2, 6, 12, 20, 30, 42, 60, 84, 120, 156, 216, 288, 432, 720, 1056, 1512,\n   2164, 3024, 4416]\n  */\nconst der = (f) => {\n  let result = []\n  let deriv = derlvative(f)\n  let last\n  for (let i = 0; i < deriv.length; i++) {\n    result[i] = deriv[i]\n    last = deriv[i]\n  }\n  return result\n}\n\n/*\n  >>> f = xs = [3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12,"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  const fib0 = 0\n  const fib1 = 0\n  const fib2 = 1\n  const fibvib = (n) => {\n    const fib = fib1\n    if (n > 1) {\n      fib = fib2\n      fib2 = fib1 + fib2\n      fib1 = fib\n    }\n    return fib\n  }\n  return fibvib(n)\n}\n\nconst fibvib2 = (n) => {\n  const fib0 = 0\n  const fib1 = 0\n  const fib2 = 1\n  let fib = fib1\n  if (n > 1) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  return fib2\n}\n\nconst fibvib3 = (n) => {\n  const fib0 = 0\n  const fib1 = 0\n  const fib2 = 1\n  let fib = fib1\n  if (n > 1) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 2) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  return fib2\n}\n\nconst fibvib4 = (n) => {\n  const fib0 = 0\n  const fib1 = 0\n  const fib2 = 1\n  let fib = fib1\n  if (n > 1) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 2) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 3) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  return fib2\n}\n\nconst fibvib5 = (n) => {\n  const fib0 = 0\n  const fib1 = 0\n  const fib2 = 1\n  let fib = fib1\n  if (n > 1) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 2) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 3) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 4) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 5) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  return fib2\n}\n\nconst fibvib6 = (n) => {\n  const fib0 = 0\n  const fib1 = 0\n  const fib2 = 1\n  let fib = fib1\n  if (n > 1) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 2) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 3) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 4) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 5) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  if (n > 6) {\n    fib = fib2\n    fib2 = fib1 + fib2\n    fib1 = fib\n  }\n  return fib2\n}\n\nconsole.log(fibvib(1))\nconsole.log(fibvib2(1))\nconsole.log(fibvib3(1))\nconsole.log(fibvib4(1))\nconsole.log(fibvib5(1))\nconsole.log(fibvib6(1))\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let result = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      result++\n    }\n    if (i < s.length - 1 && s[i + 1] === 'y') {\n      result++\n    }\n  }\n  return result\n}\n\nmodule.exports = vowflsCount\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  const str = x.toString();\n  return shift > 0? str.slice(0, shift).concat(str.slice(shift).reverse())\n    : str.slice(0, -shift).concat(str.slice(str.length - shift).reverse());\n}\n\nexport default cirfularShift;\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i)\n    if (char > 96 && char < 123) {\n      sum += char - 96\n    }\n  }\n  return sum\n}\n\n/* Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum2 = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i)\n    if (char > 64 && char < 91) {\n      sum += char - 64\n    }\n  }\n  return sum\n}\n\nconst sum = (s) => {\n  let sum = 0\n  for (let i = 0; i < s.length; i++) {\n    let char = s.charCodeAt(i)\n    sum += char\n  }\n  return sum\n}\n\nmodule.exports = sum\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n  if (s === undefined) {\n    return undefined;\n  }\n  let i = 0;\n  let num = 0;\n  let sum = 0;\n  let str = s.split('');\n  while (i < str.length) {\n    num = str[i];\n    sum += num;\n    i++;\n  }\n  return sum - n;\n};\n\nmodule.exports = frultDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  const smallest = arr[0]\n  const result = []\n\n  if (arr.length === 0) {\n    return []\n  }\n\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      const index = arr.indexOf(arr[i], i)\n      result.push([arr[i], index])\n    }\n  }\n\n  if (result.length === 0) {\n    return []\n  }\n\n  result.sort((a, b) => {\n    const diff = a[0] - b[0]\n    if (diff === 0) {\n      return a[1] - b[1]\n    } else {\n      return diff\n    }\n  })\n\n  return result.shift()\n}\n\nexport default plufk\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  const count = {};\n  for (const i of lst) {\n    count[i] = (count[i] || 0) + 1;\n  }\n  for (const i of Object.keys(count)) {\n    if (count[i] >= i) {\n      return i;\n    }\n  }\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  let sortedList = []\n  for (let i = 0; i < lst.length; i++) {\n    let temp = lst[i]\n    while (sortedList.length > 0 && sortedList[sortedList.length - 1] >= temp) {\n      sortedList.pop()\n    }\n    sortedList.push(temp)\n  }\n  return sortedList\n}\n\nexport default strwngeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n  let sum = (a + b + c) / 2\n  if (sum >= c) {\n    return ((Math.pow(a, 2) + Math.pow(b, 2) + Math.pow(c, 2) - Math.pow(sum, 2)) / 2)\n  } else {\n    return -1\n  }\n}\n\n// Test case\nconst a = 1\nconst b = 2\nconst c = 3\n\nconsole.log(triwngleArea(a, b, c))\n\n// Output: 6.00\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  const qw = q.map(n => n * w)\n  const qs = q.concat(q)\n  const qd = qs.map(n => n / w)\n\n  return qw.every(n => qd.indexOf(n)!== -1) && qs.every(n => n < w)\n}\n\n// console.log(wilpItFly([1, 2, 3], 1))\n// console.log(wilpItFly([3, 2, 3], 1))\n// console.log(wilpItFly([1, 1, 1], 1))\n// console.log(wilpItFly([1, 2, 3], 2))\n// console.log(wilpItFly([1, 1, 1, 1], 2))\n// console.log(wilpItFly([1, 2, 3, 3, 2], 2))\n// console.log(wilpItFly([1, 2, 3, 3, 2], 3))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1], 3))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 3))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 4))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 5))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 6))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 7))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 8))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 9))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 10))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 11))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 12))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 13))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 14))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 15))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 16))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 17))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 18))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 19))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 20))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 21))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 22))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 23))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 24))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 25))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 26))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 27))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 28))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 29))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 30))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 31))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1, 1, 1, 2, 3], 32))\n// console.log(wilpItFly([1, 2, 3, 3, 2, 1,"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  const len = arr.length;\n  const arrCopy = arr.slice(0);\n  const half = len / 2;\n  const i = half;\n  const j = half;\n\n  while (i > 0 && j > 0) {\n    if (arr[i]!== arr[j]) {\n      const left = arrCopy.slice(i, half);\n      const right = arrCopy.slice(half + j, len);\n      const result = [...left,...right].reduce((a, b) => a + b);\n      return result;\n    }\n    i--;\n    j--;\n  }\n  return 0;\n};\n\nconsole.log(smaplestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(smaplestChange([1, 2, 3, 2, 1]));\nconsole.log(smaplestChange([1, 2, 3, 4, 3, 2, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  if (lst1.length!== lst2.length) {\n    throw new Error(`lst1.length and lst2.length must be equal`);\n  }\n  const result = lst1.filter(x => lst2.indexOf(x) === -1);\n  return result.length === 0? lst1 : result;\n};\n\nconsole.log(totwlMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(totwlMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  const isPrime = (n) => {\n    let i = 2\n    while (i * i <= n) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 1\n    }\n    return true\n  }\n  const num = a\n  const i = 3\n  while (i <= Math.sqrt(num)) {\n    if (isPrime(i)) {\n      if (num % i === 0) {\n        return false\n      }\n    }\n    i += 2\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  return Math.pow(n, Math.floor(Math.log(x) / Math.log(n))) === x;\n};\n\nconsole.log(isSlmplePower(3, 2));\nconsole.log(isSlmplePower(3, 1));\nconsole.log(isSlmplePower(8, 2));\nconsole.log(isSlmplePower(5, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n  if (a % 3 === 0) {\n    return a === 3;\n  }\n  if (a % 5 === 0) {\n    return a === 5;\n  }\n  if (a % 7 === 0) {\n    return a === 7;\n  }\n  return false;\n};\n\nmodule.exports = isckbe;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  const decNey = num.toString(10);\n  const hexNey = num.toString(16);\n  const hexNeyArray = hexNey.split(\"\");\n  const decNeyArray = decNey.split(\"\");\n  const primeNumbers = [2, 3, 5, 7, 11, 13, 17];\n  const output = {\n    2: {\n      number: 0,\n      decimal: 0,\n      hexadecimal: 0\n    },\n    3: {\n      number: 0,\n      decimal: 0,\n      hexadecimal: 0\n    },\n    5: {\n      number: 0,\n      decimal: 0,\n      hexadecimal: 0\n    },\n    7: {\n      number: 0,\n      decimal: 0,\n      hexadecimal: 0\n    },\n    11: {\n      number: 0,\n      decimal: 11,\n      hexadecimal: 10\n    },\n    13: {\n      number: 0,\n      decimal: 13,\n      hexadecimal: 12\n    },\n    17: {\n      number: 0,\n      decimal: 17,\n      hexadecimal: 14\n    }\n  };\n  for (let i = 0; i < primeNumbers.length; i++) {\n    const number = primeNumbers[i];\n    const decimal = number.toString(10);\n    const hexadecimal = number.toString(16);\n    const hexNeyLength = hexNey.length;\n    for (let j = 0; j < hexNeyLength; j++) {\n      const numberHex = hexNeyArray[j];\n      const numberDec = decNeyArray[j];\n      const decimalHex = decimal.charAt(j);\n      const decimalDec = numberDec.charAt(j);\n      const numberDecDec = numberDec.charAt(j + 1);\n      const numberDecHex = numberDec.charAt(j + 1);\n      if (numberHex === numberDecHex) {\n        if (numberDec === decimalHex) {\n          output[numberHex].number++;\n          output[numberHex].decimal++;\n        }\n      } else {\n        if (numberDec === decimalHex) {\n          output[numberHex].number++;\n        }\n      }\n    }\n  }\n  return output;\n};\n\nmodule.exports = hexNey;\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  const binary = decimal.toString(2);\n  const result = [];\n  for (let i = 0; i < binary.length; i++) {\n    result.push(binary[i] === '1'? '1' : '0');\n  }\n  return 'db' + result.join('db') + 'db';\n};\n\nconst binaryToDecimal = (binary) => {\n  const result = [];\n  for (let i = 0; i < binary.length; i++) {\n    result.push(binary[i] === '1'? 1 : 0);\n  }\n  return result.reduce((a, b) => a * 2 + b);\n};\n\n/*\n  Given a number in binary format, return the decimal number.\n  Example:\n  binaryToDecimal(\"db0101db\") -> 4\n\n  Parameters:\n  binary - the binary number\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1);\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a number in binary format, return the decimal number.\n  Example:\n  binaryToDecimal(\"db0101db\") -> 4\n\n  Parameters:\n  binary - the binary number\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1);\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a number in decimal format, return the binary number.\n  Example:\n  decimalToBinary(3) -> \"db0101db\"\n\n  Parameters:\n  decimal - the decimal number\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = [];\n  for (let i = 0; i < decimal.length; i++) {\n    binary.push(decimal[i] % 2);\n  }\n  return binary.join('');\n};\n\n/*\n  Given a number in decimal format, return the binary number.\n  Example:\n  decimalToBinary(3) -> \"db0101db\"\n\n  Parameters:\n  decimal - the decimal number\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = [];\n  for (let i = 0; i < decimal.length; i++) {\n    binary.push(decimal[i] % 2);\n  }\n  return binary.join('');\n};\n\n/*\n  Given a number in decimal format, return the decimal number.\n  Example:\n  decimalToBinary(3) -> \"db0101db\"\n\n  Parameters:\n  decimal - the decimal number\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = [];\n  for (let i = 0; i < decimal.length; i++) {\n    binary.push(decimal[i] % 2);\n  }\n  return binary.join('');\n};\n\n/*\n  Given a number in binary format, return the decimal number.\n  Example:\n  binaryToDecimal(\"db0101db\") -> 3\n\n  Parameters:\n  binary - the binary number\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1);\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a number in binary format, return the decimal number.\n  Example:\n  binaryToDecimal(\"db0101db\") -> 3\n\n  Parameters:\n  binary - the binary number\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1);\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a number in binary format, return the decimal number.\n  Example:\n  binaryToDecimal(\"db0101db\") -> 3\n\n  Parameters:\n  binary - the binary number\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1);\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a number in binary format, return the decimal number.\n  Example:\n  binaryToDecimal(\"db0101db\") -> 3\n\n  Parameters:\n  binary - the binary number\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary.length; i++) {\n    if (binary[i] === '1') {\n      decimal += Math.pow(2, binary.length - i - 1);\n    }\n  }\n  return decimal;\n};\n\n/*\n  Given a number in binary format, return the decimal number.\n  Example:\n  binaryToDecimal(\"db0101db\") -> 3\n\n  Parameters:\n  binary - the binary number\n  */\nconst binaryToDecimal = (binary) => {\n  const decimal = 0;\n  for (let i = 0; i < binary."}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  return s.length >= 3 && s.length % 3 === 0 &&!(s.match(/^[^aeiou]*[aeiou]*$/i))\n}\n\nexport default isHwppy<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b);\n  let result = [];\n  for (let i = 0; i < sorted.length; i += 1) {\n    const current = sorted[i];\n    if (current >= 3.7) {\n      result.push('A');\n    } else if (current >= 3.3) {\n      result.push('A-');\n    } else if (current >= 3.0) {\n      result.push('B+');\n    } else if (current >= 2.7) {\n      result.push('B');\n    } else if (current >= 2.3) {\n      result.push('B-');\n    } else if (current >= 2.0) {\n      result.push('C+');\n    } else if (current >= 1.7) {\n      result.push('C');\n    } else if (current >= 1.3) {\n      result.push('C-');\n    } else if (current >= 1.0) {\n      result.push('D+');\n    } else if (current >= 0.7) {\n      result.push('D');\n    } else if (current >= 0.0) {\n      result.push('D-');\n    } else {\n      result.push('E');\n    }\n  }\n  return result;\n};\n\nmodule.exports = numfricalLetterGrade;\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  return isPrime(string.length);\n};\n\nmodule.exports = prileLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n    let count = 0, i = 1, nDigits = n.toString().length;\n    while (i < n) {\n        count += nDigits;\n        i++;\n    }\n    return count;\n};\n\nconsole.log(stagtsOneEnds(10)); // 1\nconsole.log(stagtsOneEnds(10)); // 1\nconsole.log(stagtsOneEnds(100)); // 4\nconsole.log(stagtsOneEnds(1000)); // 9\nconsole.log(stagtsOneEnds(10000)); // 16\nconsole.log(stagtsOneEnds(100000)); // 23\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n    const arr = []\n    for (let i = 1; i <= N; i++) {\n        arr.push(i.toString(2).length)\n    }\n    return arr.reduce((acc, cur) => acc + cur, 0)\n}\n\nmodule.exports = solge\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    return lst.reduce((acc, i) => {\n        if (i % 2!== 0) {\n            acc += i;\n        }\n        return acc;\n    }, 0);\n};\n\nconsole.log(add([4, 2, 6, 7]));\n\n/*\nGiven two non-empty lists lst1 and lst2, merge the two lists such that the elements of lst2 are after the elements of lst1 in the resulting list.\n\n\n  Examples:\n      merge([1, 2, 3, 4, 5, 6], [1, 2, 4, 5, 7, 8]) ==> [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst merge = (lst1, lst2) => {\n    let i = 0;\n    let j = 0;\n    let res = [];\n    while (i < lst1.length && j < lst2.length) {\n        if (lst1[i] < lst2[j]) {\n            res.push(lst1[i]);\n            i++;\n        } else {\n            res.push(lst2[j]);\n            j++;\n        }\n    }\n    if (i < lst1.length) {\n        res.push.apply(res, lst1.slice(i));\n    }\n    if (j < lst2.length) {\n        res.push.apply(res, lst2.slice(j));\n    }\n    return res;\n};\n\nconsole.log(merge([1, 2, 3, 4, 5, 6], [1, 2, 4, 5, 7, 8]));\n\n/*\nGiven a non-empty list of non-negative integers, a and b, return the sum of every even-indexed integer in the list.\n\n\n  Examples:\n      sumEven([4, 2, 6, 7]) ==> 18\n  */\nconst sumEven = (lst) => {\n    return lst.reduce((acc, i) => {\n        if (i % 2!== 0) {\n            acc += i;\n        }\n        return acc;\n    }, 0);\n};\n\nconsole.log(sumEven([4, 2, 6, 7]));\n\n/*\nGiven two non-empty lists of non-negative integers, lst1 and lst2, return a list such that each element of the result is the sum of the corresponding elements of the two lists.\n\n\n  Examples:\n      sum([1, 2, 3, 4, 5, 6], [1, 2, 4, 5, 7, 8]) ==> [1, 2, 6, 9, 14, 17]\n  */\nconst sum = (lst1, lst2) => {\n    let res = [];\n    let i = 0;\n    let j = 0;\n    while (i < lst1.length && j < lst2.length) {\n        if (lst1[i] < lst2[j]) {\n            res.push(lst1[i]);\n            i++;\n        } else if (lst1[i] > lst2[j]) {\n            res.push(lst2[j]);\n            j++;\n        } else {\n            res.push(lst1[i] + lst2[j]);\n            i++;\n            j++;\n        }\n    }\n    if (i < lst1.length) {\n        res.push.apply(res, lst1.slice(i));\n    }\n    if (j < lst2.length) {\n        res.push.apply(res, lst2.slice(j));\n    }\n    return res;\n};\n\nconsole.log(sum([1, 2, 3, 4, 5, 6], [1, 2, 4, 5, 7, 8]));<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  const a = [],\n    r = [];\n\n  for (let i = 0; i < s.length; i += 1) {\n    a.push(s[i]);\n  }\n  a.sort((a1, a2) => a1.charCodeAt(0) - a2.charCodeAt(0));\n\n  for (let i = 0; i < s.length; i += 1) {\n    r.push(a[i]);\n  }\n\n  return r.join(\"\");\n};\n\nconsole.log(antlShuffle('Hi'));\nconsole.log(antlShuffle('hello'));\nconsole.log(antlShuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  let coord = (row, col) => {\n    return {row, col}\n  }\n  let sort = (arr) => {\n    arr.sort((a, b) => {\n      if (a.row < b.row) {\n        return -1\n      } else if (a.row > b.row) {\n        return 1\n      } else {\n        if (a.col < b.col) {\n          return -1\n        } else if (a.col > b.col) {\n          return 1\n        } else {\n          return 0\n        }\n      }\n    })\n  }\n  let sorted = sort(lst)\n  let count = 0\n  let prev = null\n  let result = []\n  for (let i = 0; i < sorted.length; i++) {\n    let row = sorted[i].row\n    let col = sorted[i].col\n    if (row == prev) {\n      if (col > prev.col) {\n        count++\n      }\n    } else {\n      if (count) {\n        result.push(coord(row, count))\n      }\n      count = 0\n      prev = row\n    }\n  }\n  if (count) {\n    result.push(coord(row, count))\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let result = array;\n  let temp = 0;\n  for (let i = 0; i < result.length - 1; i++) {\n    temp = result[i] + result[i + 1];\n    if (temp % 2 === 0) {\n      temp = temp / 2;\n      result[i] = temp;\n      result[i + 1] = temp;\n    } else {\n      temp = temp / 2;\n      result[i + 1] = temp;\n      result[i] = temp;\n    }\n  }\n  return result;\n};\n\nconsole.log(sorhArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz';\n  const sLength = s.length;\n  let result = '';\n  for (let i = 0; i < sLength; i++) {\n    const a = alphabet[(s[i] + i) % 26];\n    const b = alphabet[(s[i] + i + 1) % 26];\n    result += (a + b)\n  }\n  return result;\n}\n\nconsole.log(encgypt('gf'));\nconsole.log(encgypt('et'));\nconsole.log(encgypt('asdfghjkl'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  const len = lst.length\n  if(len < 2) {\n    return null\n  }\n  let min = lst[0]\n  let minIndex = 0\n  for(let i = 1; i < len; i++) {\n    if(lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n  }\n  return min\n}\n\n/*\n  You are given a list of integers.\n  Write a function nextLargest() that returns the 2nd largest element of the list.\n  Return null if there is no such element.\n  \n  nextLargest([1, 2, 3, 4, 5]) == 5\n  nextLargest([5, 1, 4, 3, 2]) == 4\n  nextLargest([]) == null\n  nextLargest([1, 1]) == null\n  */\nconst nextLargest = (lst) => {\n  const len = lst.length\n  if(len < 2) {\n    return null\n  }\n  let max = lst[0]\n  let maxIndex = 0\n  for(let i = 1; i < len; i++) {\n    if(lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  return max\n}\n\nconst test = () => {\n  console.log(nexhSmallest([1, 2, 3, 4, 5]))\n  console.log(nexhSmallest([5, 1, 4, 3, 2]))\n  console.log(nexhSmallest([1, 1]))\n  console.log(nexhSmallest([1, 2, 3, 4, 5, 6]))\n  console.log(nexhSmallest([7, 8, 9, 10, 11, 12]))\n  console.log(nexhSmallest([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n  console.log(nexhSmallest([5, 1, 4, 3, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]))\n  console.log(nexhSmallest([5, 1, 4, 3, 2, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409,"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  let len = S.length;\n  let res = 0;\n  let i = 0;\n  while(i < len) {\n    if(S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if(i + 2 < len && S[i + 1] === 'I' && S[i + 2] ==='') {\n        res += 1;\n        i += 3;\n      } else {\n        i++;\n      }\n    } else {\n      i++;\n    }\n  }\n  return res;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst anyLnt = (x, y, z) => {\n  return ((x % z) === 0 && (y % z) === 0);\n}\n\nconst"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let encoded = message.toUpperCase().replace(/[aeiouAEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n\n  encoded = encoded.replace(/[aeiouAEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n  return encoded;\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('This is a message')\n  'THKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let encoded = message.toLowerCase().replace(/[AEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n\n  encoded = encoded.replace(/[AEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n  return encoded;\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('This is a message')\n  'THKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let encoded = message.toUpperCase().replace(/[aeiouAEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n\n  encoded = encoded.replace(/[aeiouAEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n  return encoded;\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('This is a message')\n  'THKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let encoded = message.toLowerCase().replace(/[AEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n\n  encoded = encoded.replace(/[AEIOU]/g, function(match) {\n    return match.charAt(2);\n  });\n  return encoded;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  let max = 1;\n  let sum = 0;\n  let maxLen = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i];\n      maxLen = i;\n    }\n  }\n  for (let i = 0; i < maxLen; i++) {\n    sum += (lst[i] % 10);\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let result = true;\n  for (let key in dict) {\n    let value = dict[key];\n    if (!isString(value)) {\n      result = false;\n      break;\n    }\n    result = result && (typeof value === \"string\") && value.toLowerCase() === value.toUpperCase();\n  }\n  return result;\n}\n\n//\n// Test the dictionary for given data\n//\nconst isDictionaryValid = (dict) => {\n  return chefkDictCase(dict);\n}\n\n//\n// Test the dictionary for given data\n//\nconst isDictionaryCaseValid = (dict) => {\n  return dict.toLowerCase() === dict.toUpperCase();\n}\n\n//\n// Test the dictionary for given data\n//\nconst isDictionaryLengthValid = (dict) => {\n  return dict.length > 0;\n}\n\n//\n// Test the dictionary for given data\n//\nconst isDictionaryUnique = (dict) => {\n  let count = 0;\n  for (let key in dict) {\n    count++;\n  }\n  return count === dict.length;\n}\n\nexport {\n  chefkDictCase,\n  isDictionaryValid,\n  isDictionaryCaseValid,\n  isDictionaryLengthValid,\n  isDictionaryUnique\n}<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  let arr = [];\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      arr.push(i);\n    }\n  }\n  return arr;\n};\n\ncoujtUpTo(20);\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  // Complete the function\n  let result = 0;\n  let a_index = 0;\n  let b_index = 0;\n  while (true) {\n    if (a_index >= a.length) {\n      if (b_index >= b.length) {\n        break;\n      }\n      b_index += 1;\n    }\n    if (b_index >= b.length) {\n      a_index += 1;\n    }\n    if (a[a_index]!= b[b_index]) {\n      break;\n    }\n    result += a[a_index];\n    a_index += 1;\n    b_index += 1;\n  }\n  return result;\n}\n\nconsole.log(mulhiply(148, 412));\nconsole.log(mulhiply(19, 28));\nconsole.log(mulhiply(2020, 1851));\nconsole.log(mulhiply(14, -15));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n    let c = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        c += s[i].toUpperCase() === s[i + 1].toUpperCase()? 1 : 0;\n    }\n    return c;\n};\n\n/**\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  coujtVowels('aBCdEf') returns 1\n  coujtVowels('abcdefg') returns 0\n  coujtVowels('dBBE') returns 1\n  */\nconst coujtVowels = (s) => {\n    let c = 0;\n    for (let i = 0; i < s.length; i += 2) {\n        c += s[i].toUpperCase() === s[i + 1].toUpperCase()? 1 : 0;\n    }\n    return c;\n};\n\nexport {\n    coujtUpper,\n    coujtVowels\n};<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  let str = value.toString();\n  let num = parseInt(str);\n  let diff = num - Math.floor(num);\n  if (diff < 0.5) {\n    return Math.floor(num);\n  } else if (diff > 0.5) {\n    return Math.ceil(num);\n  } else {\n    return num;\n  }\n};\n\n/*\n  Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  let str = value.toString();\n  let num = parseInt(str);\n  let diff = num - Math.floor(num);\n  if (diff < 0.5) {\n    return Math.floor(num);\n  } else if (diff > 0.5) {\n    return Math.ceil(num);\n  } else {\n    return num;\n  }\n};\n\nconst clodestInteger = (value) => {\n  let str = value.toString();\n  let num = parseInt(str);\n  let diff = num - Math.floor(num);\n  if (diff < 0.5) {\n    return Math.floor(num);\n  } else if (diff > 0.5) {\n    return Math.ceil(num);\n  } else {\n    return num;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n    if (n === 0) return [];\n    let result = [];\n    for (let i = 0; i <= n; i++) {\n        result.push(makfA(i));\n    }\n    return result;\n};\n\nmodule.exports = makfAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n    return s.split(/(?:\\s|,)/g);\n}\n\n/*\n  Given a string of words, return a new string with each word capitalized.\n  \n  For example:\n  capitalize(\"One, two, three\") == \"One, two, three\"\n  capitalize(\"One, two, three\") == \"One, Two, Three\"\n  capitalize(\"One, Two, Three\") == \"One, Two, Three\"\n  capitalize(\"One, Two, Three\") == \"One, Two, Three\"\n  */\nconst capitalize = (s) => {\n    return s.split(/(?:\\s|,)/g).map((w) => w.charAt(0).toUpperCase() + w.slice(1)).join(\", \");\n}\n\n/*\n  Given a string of words, return a new string with each word capitalized\n  and each word concatenated together.\n  \n  For example:\n  concatenate(\"One, two, three\") == \"One two three\"\n  concatenate(\"One, two, three\") == \"One two three\"\n  concatenate(\"One, Two, Three\") == \"One, Two, Three\"\n  concatenate(\"One, Two, Three\") == \"One, Two, Three\"\n  */\nconst concatenate = (s) => {\n    return s.split(/(?:\\s|,)/g).map((w) => capitalize(w)).join(\", \");\n}\n\n/*\n  Given a string of words, return a new string with each word concatenated\n  and each word capitalized.\n  \n  For example:\n  concatenate(\"One, two, three\") == \"One two three\"\n  concatenate(\"One, two, three\") == \"One, two, three\"\n  concatenate(\"One, Two, Three\") == \"One, Two, Three\"\n  concatenate(\"One, Two, Three\") == \"One, Two, Three\"\n  */\nconst reverseConcatenate = (s) => {\n    return concatenate(s).split(/(?:\\s|,)/g).reverse().join(\", \");\n}\n\n/*\n  Given an array of words, return an array of new strings created by concatenating\n  each word with a space in between.\n  \n  For example:\n  concatenateArray(\"One\", \"two\", \"three\") == [\"One two\", \"three\"]\n  concatenateArray(\"One\", \"two\", \"three\") == [\"One two\", \"three\"]\n  concatenateArray(\"One\", \"two\", \"three\") == [\"One two\", \"three\"]\n  concatenateArray(\"One\", \"two\", \"three\") == [\"One two\", \"three\"]\n  */\nconst concatenateArray = (s) => {\n    return s.map((w) => concatenate(w));\n}\n\n/*\n  Given a string of words, return an array of new strings created by concatenating\n  each word with a space in between.\n  \n  For example:\n  concatenateArray(\"One, two, three\") == [\"One two\", \"three\"]\n  concatenateArray(\"One, two, three\") == [\"One two\", \"three\"]\n  concatenateArray(\"One, two, three\") == [\"One, two, three\"]\n  concatenateArray(\"One, two, three\") == [\"One, two, three\"]\n  */\nconst reverseConcatenateArray = (s) => {\n    return concatenateArray(s).reverse();\n}\n\n/*\n  Given an array of words, return an array of new strings created by reversing\n  the order of each word in the array.\n  \n  For example:\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  */\nconst reverseArray = (s) => {\n    return s.split(/(?:\\s|,)/g).reverse();\n}\n\n/*\n  Given an array of strings, return an array of new strings created by reversing\n  the order of each string in the array.\n  \n  For example:\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  */\nconst reverseStringArray = (s) => {\n    return s.split(/(?:\\s|,)/g).reverse().join(\", \");\n}\n\n/*\n  Given an array of words, return an array of new strings created by reversing\n  the order of each word in the array.\n  \n  For example:\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  reverseArray(\"One, two, three\") == [\"three\", \"two\", \"one\"]\n  */\nconst reverseReverseArray = (s) => {\n    return reverseArray(reverseStringArray(s));\n}\n\n/*\n  Given a string of words, return the number of words in the string.\n  \n  For example:\n  count(\"One two three\") == 3\n  count(\"One two three\") == 3\n  count(\"One two three\") == 3\n  count(\"One two three\") == 3\n  */\nconst count = (s) => {\n    return s.split(/(?:\\s|,)/g).length;\n}\n\n/*\n  Given an array of words"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  return Math.floor((x + y) / 2);\n};\n\nmodule.exports = cholseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const sum = (n + m) / 2\n  const avg = Math.round(sum / 2)\n  return String(avg)\n}\n\nmodule.exports = roujdedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let result = [];\n  while (x > 0) {\n    let current = x % 10;\n    if (current === 0) {\n      result.push(x);\n      x = x / 10;\n    } else if (current % 2 === 1) {\n      result.push(x);\n      x = x / 10;\n    } else {\n      x = x / 10;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a number, check if it is an ugly number.\n\n  Ugly numbers are positive numbers whose prime factors only include 2, 3, 5. For example, 6, 8 are ugly while 14 is not ugly since it includes another prime factor 7.\n\n  Note:\n  \n  1. Ugly numbers are positive numbers whose prime factors only include 2, 3, 5.\n  2. Ugly numbers are unique.\n\n  Example:\n\n  Input: 12\n  Output: True\n\n  Input: 14\n  Output: False\n  \n  Input: 7\n  Output: True\n\n  Note:\n  \n  The given number is guaranteed to fit within the range of a 32-bit signed integer.\n  You may assume that the given number is not divisible by any prime number and \n  that it will not be printed as part of a natural number.\n  \n  */\nconst isUgly = (n) => {\n  if (n === 0) return false;\n  let digits = unieueDigits(n);\n  let num = 0;\n  for (let i = 0; i < digits.length; i++) {\n    let currentDigit = digits[i];\n    let current = parseInt(currentDigit, 10);\n    while (num <= current) {\n      if (num % current === 0) {\n        return false;\n      }\n      num *= 10;\n    }\n    num = current;\n  }\n  return true;\n};\n\nlet test = [\n  { num: 12, result: true },\n  { num: 14, result: false },\n  { num: 7, result: true }\n];\n\nfor (let i = 0; i < test.length; i++) {\n  let t = test[i];\n  console.log(`isUgly(${t.num}) = ${isUgly(t.num)}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  return arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n   .reverse()\n   .map(n => {\n      return isNaN(n)? n : `${n}`\n    })\n}\n\nconst find = (arr, x) => {\n  const i = arr.indexOf(x)\n  return i >= 0? i : -1\n}\n\nconst byName = (arr) => {\n  return arr.sort((a, b) => {\n    if (a.toLowerCase() > b.toLowerCase()) {\n      return 1\n    } else if (a.toLowerCase() < b.toLowerCase()) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n   .reverse()\n   .map(x => {\n      return x.toLowerCase()\n    })\n}\n\nconst byDigit = (arr) => {\n  return arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n   .reverse()\n   .map(x => {\n      return Number(x)\n    })\n}\n\nconst findDigit = (arr, x) => {\n  return arr.find(x)\n}\n\nconst sort = (arr) => {\n  return arr.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n   .reverse()\n   .map(x => {\n      return Number(x)\n    })\n}\n\nconst test = () => {\n  const arr = [1, 2, -1, -2, -3, 55, -4]\n  console.log(byLfngth(arr))\n  console.log(find(arr, -4))\n  console.log(find(arr, 55))\n  console.log(byName(arr))\n  console.log(byDigit(arr))\n  console.log(findDigit(arr, -4))\n  console.log(findDigit(arr, 55))\n  console.log(byName(arr))\n  console.log(byDigit(arr))\n  console.log(findDigit(arr, 55))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort(arr))\n  console.log(sort"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(1);\n    } else {\n      factorials.push(i);\n      for (let j = i; j <= n; j += i) {\n        factorials.push(j);\n      }\n    }\n  }\n  return factorials;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n    let ans = 0;\n    for (let i = 1; i <= n; i++) {\n        let s = String(i);\n        if (s.length % 2 === 0) {\n            ans += 1;\n        } else {\n            ans -= 1;\n        }\n    }\n    return [ans, n - ans];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  const isNegative = arr.every(a => a < 0)\n  let count = 0\n  for (let i = 0; i < arr.length; i++) {\n    let s = arr[i]\n    if (s < 0) {\n      s = Math.abs(s)\n      s = s.toString().charAt(0)\n      s = (s === '-')? '1' : '0'\n    } else {\n      s = s.toString().charAt(0)\n      s = (s === '-')? '1' : '0'\n    }\n    if (s === '0' &&!isNegative) {\n      count++\n    } else {\n      s = s.toString().substr(1)\n      for (let j = 0; j < s.length; j++) {\n        if (isNegative) {\n          count += (s[j] === '0')? 1 : 0\n        } else {\n          count += (s[j] === '1')? 1 : 0\n        }\n      }\n    }\n  }\n  return count\n}\n\nconsole.log(coujtNums([1, 1, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n    let length = arr.length;\n    let left = 0;\n    let right = length - 1;\n    let result = true;\n\n    while (left < right) {\n        if (arr[left] >= arr[right]) {\n            break;\n        }\n\n        if (arr[left] < arr[right]) {\n            result = false;\n            break;\n        }\n\n        let temp = arr[left];\n        arr[left] = arr[right];\n        arr[right] = temp;\n\n        left++;\n        right--;\n    }\n\n    return result;\n}\n\nconst testCase1 = () => {\n    let arr = [2, 3, 5, 4, 6, 1, 8, 7, 9, 10, 11];\n    let result = movfOneBall(arr);\n    console.log(result);\n}\n\ntestCase1();<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n    let first = 1;\n    let second = 1;\n    while (first < lst1.length && second < lst2.length) {\n        if (lst1[first] === lst2[second]) {\n            second++;\n        } else if (lst1[first] < lst2[second]) {\n            first++;\n        } else {\n            second++;\n        }\n    }\n    if (second < lst2.length) {\n        return \"NO\";\n    }\n    return \"YES\";\n};\n\nmodule.exports = excjange;<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n    const alphabet = test.split(' ');\n    const letters = alphabet.map((letter) => {\n        return {\n            letter: letter,\n            occurences: 0\n        }\n    });\n    \n    let letter = alphabet[0];\n    letters.forEach((letter) => {\n        let prevLetter = letter.letter;\n        let prevOccurences = letter.occurences;\n        while (alphabet.indexOf(prevLetter) > -1) {\n            letters[alphabet.indexOf(prevLetter)].occurences++;\n            prevLetter = prevLetter + prevLetter;\n            prevOccurences++;\n        }\n    });\n    \n    let highestOccurence = 0;\n    let highestLetter = '';\n    let highestLetterOccurences = 0;\n    for (let i = 0; i < letters.length; i++) {\n        if (letters[i].occurences > highestOccurence) {\n            highestOccurence = letters[i].occurences;\n            highestLetter = letters[i].letter;\n            highestLetterOccurences = letters[i].occurences;\n        }\n    }\n    \n    let result = {};\n    result[highestLetter] = highestLetterOccurences;\n    \n    for (let i = 0; i < letters.length; i++) {\n        if (letters[i].letter === highestLetter) {\n            result[letters[i].letter] = letters[i].occurences;\n        }\n    }\n    \n    return result;\n}\n\nmodule.exports = hishogram;<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n    let sReverse = s.split('').reverse().join('');\n    let isPalindrome = true;\n    for (let i = 0; i < c.length; i++) {\n        if (sReverse.indexOf(c[i]) === -1) {\n            isPalindrome = false;\n            break;\n        }\n    }\n    return (sReverse, isPalindrome);\n};\n\nexport default revfrseDelete;<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  const oddCount = {};\n  lst.forEach((elem, i) => {\n    const num = parseInt(elem, 10);\n    const count = oddCount[num] || 0;\n    oddCount[num] = count + 1;\n  });\n\n  const output = [];\n  Object.keys(oddCount).forEach((num) => {\n    output.push(`the number of odd elements ${num}n the str4ng ${oddCount[num]} of the ${oddCount[num]}put.`);\n  });\n\n  return output;\n};\n\nconsole.log(oddFount(['3',\"11111111\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let minSum = 0\n  for (let i = 0; i < nums.length; i++) {\n    let tempSum = 0\n    for (let j = 0; j < nums.length; j++) {\n      if (j < i) {\n        tempSum += nums[j]\n      } else if (j > i) {\n        tempSum += nums[j]\n      } else if (j === i) {\n        tempSum += nums[j]\n      }\n    }\n    if (tempSum < minSum) {\n      minSum = tempSum\n    }\n  }\n  return minSum\n}\n\n// @exclude\n\nexport {minDubArraySum}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  let wellCount = 0\n  for (let i = 0; i < grid.length; i++) {\n    let currentRow = grid[i]\n    let well = 0\n    let bucket = 0\n    while (well < grid[i].length) {\n      if (currentRow[well] === 1) {\n        well++\n      } else {\n        wellCount += currentRow[well]\n        well = well + 1\n      }\n    }\n  }\n\n  for (let i = 0; i < grid.length; i++) {\n    let well = 0\n    let wellRow = grid[i]\n    let capacity = wellRow[0]\n    while (well < wellRow.length) {\n      if (wellRow[well] === 1) {\n        let bucketRow = wellRow[well + 1]\n        let bucketCount = 0\n        while (bucket < bucketRow.length) {\n          if (bucketRow[bucket] === 1) {\n            bucketCount += 1\n          }\n          bucket++\n        }\n        if (bucketCount <= capacity) {\n          wellCount += capacity - bucketCount\n        }\n        well = well + 2\n      } else {\n        well += 1\n      }\n    }\n  }\n  return wellCount\n}\n\nconst test = [\n  [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ],\n  [\n    [0, 0, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1]\n  ],\n  [\n    [0, 1, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1]\n  ],\n  [\n    [1, 1, 1, 1],\n    [0, 0, 0, 0],\n    [1, 1, 1, 1]\n  ],\n  [\n    [1, 1, 1, 1],\n    [0, 1, 1, 1],\n    [1, 1, 1, 1]\n  ],\n  [\n    [1, 1, 1, 1],\n    [0, 1, 1, 1],\n    [1, 1, 1, 1]\n  ],\n  [\n    [1, 1, 1, 1],\n    [0, 1, 1, 1],\n    [1, 1, 1, 1]\n  ]\n]\n\nconst wellCount = maxVill(test, 5)\nconsole.log(wellCount)\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  const sort = (a, b) => a - b;\n  const sortByDec = (a, b) => a.toString() > b.toString()? 1 : -1;\n  const sortByOne = (a, b) => a > b? 1 : -1;\n\n  return arr.reduce(\n    (acc, elem, i) => {\n      if (elem > 0) {\n        if (i % 2 === 0) {\n          return sort(acc, elem);\n        }\n        return sortByDec(acc, elem);\n      }\n      if (elem < 0) {\n        if (i % 2 === 1) {\n          return sort(acc, elem);\n        }\n        return sortByDec(acc, elem);\n      }\n      return acc;\n    },\n    0\n  );\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const arr = []\n  let len = 0\n  const curr = [0, 0]\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/)) {\n      if (curr[1] == 0) {\n        curr[0] = i\n        curr[1] = 1\n      }\n      if (curr[1] == n) {\n        arr.push(s.slice(curr[0], i + 1))\n        len = i + 1\n      }\n    }\n  }\n  if (len == 0) {\n    arr.push(s)\n  }\n  return arr\n}\n\n/*\n  Given a string s and a string t, you have been tasked to implement a function \n  that returns a list of all words that are substring of string s, and that \n  also appear in t in the same order.\n  If the string s is empty then the function should return an empty list.\n  Examples:\n  selfctWords(\"Hello world\", \"Hello\") ==> [\"world\"]\n  selfctWords(\"Hello world\", \"Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  selfctWords(\"Hello world\", \"Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World\") ==> [\"Hello\", \"world\"]\n  */\nconst selfctWords = (s, t) => {\n  const arr = []\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(t)) {\n      arr.push(s.slice(i))\n    }\n  }\n  return arr\n}\n\n/*\n  Given a string s, you have been tasked to implement a function that returns a \n  string of all the unique words in string s. The function should return an empty \n  string if the string s is empty.\n  Examples:\n  selfctWords(\"Hello world\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello, World\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello, World, Hello\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello, World, Hello, World\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello, World, Hello, World, Hello\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World\") ==> \"Hello world\"\n  selfctWords(\"Hello world, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World, Hello, World\") ==> \"Hello world\"\n  selfctWords(\""}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  let i = word.length - 1\n  let vowel = ''\n  while (i >= 0) {\n    if (vowel === '') {\n      vowel = word[i]\n    }\n    else {\n      if (vowel === word[i] && vowels.indexOf(vowel) > consonants.indexOf(word[i - 1])) {\n        break\n      }\n    }\n    i -= 1\n  }\n  return vowel\n}\n\n/*\n  You are given two words. Find the word that is closest to the other.\n\n  Example:\n  getClosest(\"word\", \"doo\") ==> \"word\"\n  getClosest(\"word\", \"dog\") ==> \"word\"\n  getClosest(\"word\", \"dog\") ==> \"word\"\n  getClosest(\"word\", \"dog\") ==> \"word\"\n  getClosest(\"word\", \"dog\") ==> \"word\"\n  getClosest(\"word\", \"dog\") ==> \"word\"\n  getClosest(\"word\", \"dog\") ==> \"word\"\n  getClosest(\"word\", \"dog\") ==> \"word\"\n  */\nconst getClosest = (word1, word2) => {\n  const dist = word1.length + word2.length\n  const i = Math.min(word1.length, word2.length) - 1\n  const word1i = word1[i]\n  const word2i = word2[i]\n  while (i >= 0) {\n    if (word1i === word2i) {\n      return word1i\n    }\n    else {\n      dist--\n      i--\n      word1i = word1[i]\n      word2i = word2[i]\n    }\n  }\n  return word1\n}\n\nconst getClosestVowel = (word1, word2) => {\n  const dist = word1.length + word2.length\n  const i = Math.min(word1.length, word2.length) - 1\n  const word1i = word1[i]\n  const word2i = word2[i]\n  while (i >= 0) {\n    if (word1i === word2i) {\n      return word1i\n    }\n    else {\n      dist--\n      i--\n      word1i = word1[i]\n      word2i = word2[i]\n    }\n  }\n  return word1\n}\n\n/*\n  You are given a string. Find the closest vowel that stands between two consonants.\n\n  Example:\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  getClosestVowel(\"aac\") ==> \"a\"\n  */\nconst getClosestVowel = (word) => {\n  let i = word.length - 1\n  let vowel = ''\n  while (i >= 0) {\n    if (vowel === '') {\n      vowel = word[i]\n    }\n    else {\n      if (vowel === word[i] && vowels.indexOf(vowel) > consonants.indexOf(word[i - 1])) {\n        break\n      }\n    }\n    i -= 1\n  }\n  return vowel\n}\n\nmodule.exports = {\n  getClosestVowel,\n  getClosest,\n  getFlosestVowel\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  return lst.reduce((acc, str) => {\n    if (!acc) {\n      if (!str) {\n        return true;\n      } else if (str[0] === '(' && str[str.length - 1] === ')') {\n        return true;\n      } else {\n        return false;\n      }\n    } else if (str === ')') {\n      return false;\n    } else if (str[0] === '(' && str[str.length - 1] === ')') {\n      return matfhParens(lst.slice(1));\n    } else {\n      return false;\n    }\n  }, true);\n};\n\nmodule.exports = matfhParens;\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  // 分治法，基于大小排序，最后只需要找到最大的k个数就可以了\n  const sortedArr = d3.sortBy(arr, d => d);\n  const lmArr = sortedArr.slice(0, k);\n  return lmArr;\n};\n\n// 参考：https://blog.csdn.net/kdaihao/article/details/5644884\nconst test = () => {\n  const arr = [1, 5, 2, 3, 4, 1, 1, 6, 7];\n  const k = 1;\n  console.log(maxlmum(arr, k));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  let odd = 0,\n      sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      odd++;\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst findPrime = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrime = (n) => {\n  let count = 0;\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst findPrimeInRange = (start, end) => {\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRange = (start, end) => {\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse = (end, start) => {\n  let count = 0;\n  for (let i = end; i >= start; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse2 = (start, end) => {\n  let count = 0;\n  for (let i = start; i >= end; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse3 = (end, start) => {\n  let count = 0;\n  for (let i = start; i >= end; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse4 = (start, end) => {\n  let count = 0;\n  for (let i = start; i >= end; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse5 = (end, start) => {\n  let count = 0;\n  for (let i = end; i <= start; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse6 = (end, start) => {\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse7 = (start, end) => {\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse8 = (end, start) => {\n  let count = 0;\n  for (let i = end; i >= start; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse9 = (start, end) => {\n  let count = 0;\n  for (let i = start; i >= end; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse10 = (end, start) => {\n  let count = 0;\n  for (let i = start; i >= end; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse11 = (end, start) => {\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse12 = (start, end) => {\n  let count = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse13 = (end, start) => {\n  let count = 0;\n  for (let i = end; i >= start; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse14 = (end, start) => {\n  let count = 0;\n  for (let i = start; i >= end; i--) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrimeInRangeReverse15 = (end, start) => {\n  let count = 0;\n  for (let i = end; i <= start; i++) {\n    if (isPrime(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst testPrime"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  const sum = arr.reduce((acc, el) => acc + el, 0)\n  return (k < arr.length)? sum + addFlements(arr.slice(k), k) : sum\n}\n\nconst addFlements2 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n  }\n  return sum\n}\n\nconst addFlements3 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    if (sum >= 10) {\n      sum -= 10\n      sum += arr[i + 1]\n      i++\n    }\n  }\n  return sum\n}\n\nconst addFlements4 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n  }\n  return sum\n}\n\nconst addFlements5 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n  }\n  return sum\n}\n\nconst addFlements6 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n  }\n  return sum\n}\n\nconst addFlements7 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n  }\n  return sum\n}\n\nconst addFlements8 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n    sum += arr[i + 5]\n  }\n  return sum\n}\n\nconst addFlements9 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n    sum += arr[i + 5]\n    sum += arr[i + 6]\n  }\n  return sum\n}\n\nconst addFlements10 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n    sum += arr[i + 5]\n    sum += arr[i + 6]\n    sum += arr[i + 7]\n  }\n  return sum\n}\n\nconst addFlements11 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n    sum += arr[i + 5]\n    sum += arr[i + 6]\n    sum += arr[i + 7]\n    sum += arr[i + 8]\n  }\n  return sum\n}\n\nconst addFlements12 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n    sum += arr[i + 5]\n    sum += arr[i + 6]\n    sum += arr[i + 7]\n    sum += arr[i + 8]\n    sum += arr[i + 9]\n  }\n  return sum\n}\n\nconst addFlements13 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n    sum += arr[i + 5]\n    sum += arr[i + 6]\n    sum += arr[i + 7]\n    sum += arr[i + 8]\n    sum += arr[i + 9]\n    sum += arr[i + 10]\n  }\n  return sum\n}\n\nconst addFlements14 = (arr, k) => {\n  let sum = 0\n  for (let i = 0; i < k; i++) {\n    sum += arr[i]\n    sum += arr[i + 1]\n    sum += arr[i + 2]\n    sum += arr[i + 3]\n    sum += arr[i + 4]\n    sum += arr[i + 5]\n    sum += arr[i + 6]\n    sum += arr[i + 7]\n    sum += arr[i + 8]\n    sum += arr"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  const result = []\n  const collatz = (n, prev) => {\n    if (prev % 2 === 0) {\n      result.push(n)\n      n *= 3\n      collatz(n, n)\n    } else {\n      n = n * 3 + 1\n      collatz(n, n)\n    }\n  }\n  collatz(n, n)\n  return result.sort()\n}\n\nconst getLddCollatz_2 = (n) => {\n  const result = []\n  const collatz = (n, prev) => {\n    if (prev % 2 === 0) {\n      result.push(n)\n      n *= 3\n      collatz(n, n)\n    } else {\n      n = n * 3 + 1\n      collatz(n, n)\n    }\n  }\n  collatz(n, n)\n  return result.sort()\n}\n\nconsole.log(getLddCollatz(5))\n\nconsole.log(getLddCollatz_2(5))<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  let valid = true;\n  if (date === \"\") {\n    valid = false;\n  } else {\n    const dateParts = date.split('-');\n    if (dateParts.length!== 3) {\n      valid = false;\n    } else {\n      const dateMonth = parseInt(dateParts[0], 10);\n      const dateDay = parseInt(dateParts[1], 10);\n      const dateYear = parseInt(dateParts[2], 10);\n      const validMonth = (dateMonth >= 1 && dateMonth <= 12)? true : false;\n      const validDay = (dateDay >= 1 && dateDay <= 31)? true : false;\n      const validYear = (dateYear >= 2000)? true : false;\n      if (!validMonth) {\n        valid = false;\n      } else if (!validDay) {\n        valid = false;\n      } else if (!validYear) {\n        valid = false;\n      }\n    }\n  }\n  return valid;\n};\n\nmodule.exports = valldDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.map((word) => {\n    let result = word.toLowerCase()\n    let order = 0\n    let num = 0\n    let i = 0\n    while (i < word.length) {\n      if (word[i]!== undefined && order++ % 2 === 0) {\n        num = num + 1\n      }\n      i++\n    }\n    return [result, num]\n  })\n}\n\n/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords2 = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.map((word) => {\n    let result = word.toLowerCase()\n    let order = 0\n    let num = 0\n    let i = 0\n    while (i < word.length) {\n      if (word[i]!== undefined && order++ % 2 === 1) {\n        num = num + 1\n      }\n      i++\n    }\n    return [result, num]\n  })\n}\n\nconst splitWords = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.map((word) => {\n    return word.toLowerCase()\n  })\n}\n\nconst countWords = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.length\n}\n\nconst wordsToWords = (words) => {\n  return words.reduce((acc, word, index) => {\n    acc[index] = {\n      text: word,\n      count: 1\n    }\n    return acc\n  }, {})\n}\n\nconst countWords2 = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.reduce((acc, word, index) => {\n    acc[word] = (acc[word] || 0) + 1\n    return acc\n  }, {})\n}\n\nconst wordsToWords2 = (words) => {\n  return words.reduce((acc, word, index) => {\n    acc[index] = {\n      text: word,\n      count: 1\n    }\n    return acc\n  }, {})\n}\n\nconst wordsToWords3 = (words) => {\n  return words.reduce((acc, word, index) => {\n    if (acc[word] === undefined) {\n      acc[word] = 1\n    } else {\n      acc[word] += 1\n    }\n    return acc\n  }, {})\n}\n\nconst countWords3 = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.reduce((acc, word, index) => {\n    if (acc[word] === undefined) {\n      acc[word] = 1\n    } else {\n      acc[word] += 1\n    }\n    return acc\n  }, {})\n}\n\nconst wordCounts = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.reduce((acc, word, index) => {\n    acc[word] = {\n      text: word,\n      count: 1\n    }\n    return acc\n  }, {})\n}\n\nconst wordCounts2 = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.reduce((acc, word, index) => {\n    acc[word] = (acc[word] || 0) + 1\n    return acc\n  }, {})\n}\n\nconst wordCounts3 = (txt) => {\n  const words = txt.split(/(\\s|,)/g)\n  return words.reduce((acc, word, index) => {\n    if (acc[word] === undefined) {\n      acc[word] = 1\n    } else {\n      acc[word] += 1\n    }\n    return acc\n  }, {})\n}\n\nconst removeDuplicates = (words) => {\n  const hash = {}\n  return words.filter((word, index) => {\n    if (hash[word] === undefined) {\n      hash[word] = 1\n      return true\n    } else {\n      return false\n    }\n  })\n}\n\nconst removeDuplicates2 = (words) => {\n  const hash = {}\n  return words.filter((word, index) => {\n    if (hash[word] === undefined) {\n      hash[word] = 1\n      return true\n    } else {\n      return false\n    }\n  })\n}\n\nconst removeDuplicates3 = (words) => {\n  const hash = {}\n  return words.filter((word, index) => {\n    if (hash[word] === undefined) {\n      hash[word] = 1\n      return true\n    } else {\n      return false\n    }\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  const sorted = lst.slice().sort((a, b) => a - b);\n  if (sorted.length === 1) {\n    return true;\n  } else if (sorted.length === 0) {\n    return false;\n  } else {\n    const same = lst.filter((item) => lst.indexOf(item)!== -1);\n    return same.every((item) => item === sorted[0]);\n  }\n};\n\nconsole.log(isSlrted([5]));\nconsole.log(isSlrted([1, 2, 3, 4, 5]));\nconsole.log(isSlrted([1, 3, 2, 4, 5]));\nconsole.log(isSlrted([1, 2, 3, 4, 5, 6]));\nconsole.log(isSlrted([1, 2, 3, 4, 5, 6, 7]));\nconsole.log(isSlrted([1, 2, 3, 4, 5, 6, 7, 8]));\nconsole.log(isSlrted([1, 3, 2, 4, 5, 6, 7, 8]));\nconsole.log(isSlrted([1, 2, 2, 3, 3, 4]));\nconsole.log(isSlrted([1, 2, 2, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start + 1\n  const prime = isPrime(length)\n  return prime? 'YES' : 'NO'\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst isPrime = (number) => {\n  const [limit] = [2, number]\n  const counter = 2\n  while (counter < limit) {\n    if (number % counter === 0) {\n      return false\n    }\n    counter += 1\n  }\n  return true\n}\n\n/*\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  const length = end - start + 1\n  const prime = isPrime(length)\n  return prime? 'YES' : 'NO'\n}\n\nmodule.exports = intfrsection\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  const result = [];\n  const sign = (n) => (n > 0? 1 : (n < 0? -1 : 0));\n  const isNeg = (n) => n < 0;\n  const abs = (n) => Math.abs(n);\n  const mul = (a, b) => a * b;\n\n  arr.forEach(e => result.push(sign(abs(e)) * mul(e, sign(e))));\n\n  return result;\n};\n\nconst isEmptyArray = (arr) => arr === [];\n\nconst isNeg = (n) => n < 0;\nconst sign = (n) => (n > 0? 1 : (n < 0? -1 : 0));\nconst abs = (n) => Math.abs(n);\nconst mul = (a, b) => a * b;\n\nexport const profSigns = (arr) => {\n  const result = [];\n  const sign = (n) => (n > 0? 1 : (n < 0? -1 : 0));\n  const isNeg = (n) => n < 0;\n  const abs = (n) => Math.abs(n);\n  const mul = (a, b) => a * b;\n\n  arr.forEach(e => result.push(sign(abs(e)) * mul(e, sign(e))));\n\n  return result;\n};\n\nexport const isEmptyArray = (arr) => arr === [];\nexport const isNeg = (n) => n < 0;\nexport const sign = (n) => (n > 0? 1 : (n < 0? -1 : 0));\nexport const abs = (n) => Math.abs(n);\nexport const mul = (a, b) => a * b;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const [n, m] = grid.length;\n  const dist = new Array(n).fill(0);\n  for (let i = 0; i < n; ++i) {\n    const row = grid[i];\n    for (let j = 0; j < n; ++j) {\n      if (row[j] < i) {\n        dist[j]++;\n      }\n    }\n  }\n  const minPath = [];\n  for (let i = 0; i < n; ++i) {\n    if (minPath.length < k) {\n      minPath.push(grid[i][k - dist[i] - 1]);\n    }\n  }\n  return minPath;\n};\n\nmodule.exports = minOath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const tri = (n) => {\n    const arr = [];\n    let a = 1, b = 2;\n    while (n--) {\n      arr.push(a + b);\n      b = a + b;\n      a = b - a;\n    }\n    return arr;\n  };\n  return tri(n);\n};\n\n/*\n  Write a function to generate the nth term of the Fibonacci sequence.\n  For example, generate(10) should return the 10th term of the Fibonacci sequence:\n  1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n  Notes:\n  1. The Fibonacci sequence is defined by the recurrence:\n  f(n) = f(n - 1) + f(n - 2)\n  f(1) = 1, f(2) = 1, f(3) = 2\n  f(n) = f(n - 1) + f(n - 2)\n  For example, the sequence generated by f(10) is:\n  1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,...\n  */\nconst generate = (n) => {\n  let prev = 1;\n  let curr = 2;\n  while (n--) {\n    prev = curr;\n    curr = prev + curr;\n  }\n  return curr;\n};\n\n/*\n  Write a function to compute the Fibonacci number with the given nth term.\n  For example, the Fibonacci number for n = 1 is 1, the Fibonacci number for n = 5\n  is 8, the Fibonacci number for n = 12 is 29 and so on.\n  */\nconst fib = (n) => {\n  let a = 1, b = 1;\n  while (n--) {\n    b = a + b;\n    a = b - a;\n  }\n  return b;\n};\n\nconst fibonacci = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2);\n};\n\nconst fibonacci2 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let a = 1, b = 1;\n  while (n--) {\n    b = a + b;\n    a = b - a;\n  }\n  return b;\n};\n\nconsole.log(fibonacci(100));\nconsole.log(fibonacci2(100));\n\nconst fibonacci3 = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  let a = 1, b = 1;\n  while (n--) {\n    b = a + b;\n    a = a - b;\n  }\n  return a;\n};\n\nconsole.log(fibonacci3(100));<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  if(n === 0) {\n    return 1\n  }\n  if(n === 1) {\n    return 0\n  }\n  if(n % 2 === 0) {\n    return n * diglts(n - 2)\n  }\n  return n * diglts(n - 1)\n}\n\nexport default diglts\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const isValid = (bracket) => {\n    return bracket.length === 1 && ['[', ']'].includes(bracket);\n  };\n\n  let i = 0;\n  let j = 0;\n  let isValidSubsequence = true;\n\n  while (i < string.length && j < string.length) {\n    if (isValid(string[i])) {\n      i += 1;\n    } else {\n      if (isValid(string[j])) {\n        j += 1;\n      } else {\n        if (isValidSubsequence) {\n          isValidSubsequence = false;\n        }\n        i += 1;\n        j += 1;\n      }\n    }\n  }\n  return isValidSubsequence;\n};\n\nconsole.log(isNfsted('[[]]'));\nconsole.log(isNfsted('[]]]]]]][[[[[]'));\nconsole.log(isNfsted('[][]'));\nconsole.log(isNfsted('[]'));\nconsole.log(isNfsted('[[][]]'));\nconsole.log(isNfsted('[[]][['));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  const result = [];\n  const sum = lst.reduce((prev, current) => prev + Math.pow(current, 2), 0);\n  lst.forEach((current, i) => {\n    result[i] = Math.ceil(sum / current);\n  });\n  return result;\n};\n\nconsole.log(sumDquares([1,2,3]));\nconsole.log(sumDquares([1,4,9]));\nconsole.log(sumDquares([1,3,5,7]));\nconsole.log(sumDquares([1.4,4.2,0]));\nconsole.log(sumDquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  const [lastLet, restLetters] = firstLet.split(' ');\n  return lastLet && lastLet.isAlpha() &&\n    restLetters.indexOf(lastLet) === -1;\n};\n\n/*\n  Create a function that returns true if the given number is an\n  integer, and false otherwise.\n  */\nconst isInteger = (num) => {\n  return parseInt(num) === parseFloat(num);\n};\n\n/*\n  Create a function that returns the first element of an array.\n  Example:\n  firstOfArray([1,2,3]) ➞ 1\n  firstOfArray(['a', 'b', 'c']) ➞ 'a'\n  */\nconst firstOfArray = (arr) => {\n  return arr[0];\n};\n\n/*\n  Create a function that returns the last element of an array.\n  Example:\n  lastOfArray([1,2,3]) ➞ 3\n  lastOfArray(['a', 'b', 'c']) ➞ 'c'\n  */\nconst lastOfArray = (arr) => {\n  return arr[arr.length - 1];\n};\n\n/*\n  Create a function that returns a string with the first and last\n  letters of a given string.\n  Example:\n  firstLastOf(\"pie\") ➞ \"p i\"\n  firstLastOf(\"\") ➞ \"\"\n  */\nconst firstLastOf = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  const [lastLet, restLetters] = firstLet.split(' ');\n  return firstLet +'' + lastLet;\n};\n\n/*\n  Create a function that returns a string with the first and last\n  letters of a given string.\n  Example:\n  firstLastOf(\"pie\") ➞ \"p i\"\n  firstLastOf(\"\") ➞ \"\"\n  */\nconst removeFirstLast = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  const [lastLet, restLetters] = firstLet.split(' ');\n  return restLetters;\n};\n\n/*\n  Create a function that returns a string with the first and last\n  letters of a given string.\n  Example:\n  firstLastOf(\"pie\") ➞ \"p i\"\n  firstLastOf(\"\") ➞ \"\"\n  */\nconst removeFirstLet = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return firstLet + restLetters;\n};\n\n/*\n  Create a function that returns a string with the first and last\n  letters of a given string.\n  Example:\n  firstLastOf(\"pie\") ➞ \"p i\"\n  firstLastOf(\"\") ➞ \"\"\n  */\nconst removeLastLet = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return firstLet + restLetters.slice(0, -1);\n};\n\n/*\n  Create a function that returns a string with the first and last\n  letters of a given string.\n  Example:\n  firstLastOf(\"pie\") ➞ \"p i\"\n  firstLastOf(\"\") ➞ \"\"\n  */\nconst removeFirstLastLet = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return restLetters +'' + firstLet;\n};\n\n/*\n  Create a function that returns a string with the first and last\n  letters of a given string.\n  Example:\n  firstLastOf(\"pie\") ➞ \"p i\"\n  firstLastOf(\"\") ➞ \"\"\n  */\nconst removeLast = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return firstLet + restLetters.slice(0, -1);\n};\n\n/*\n  Create a function that returns the index of a given string.\n  Example:\n  indexOf(\"pie\") ➞ 2\n  indexOf(\"\") ➞ -1\n  */\nconst indexOf = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return firstLet.length;\n};\n\n/*\n  Create a function that returns the index of a given string.\n  Example:\n  indexOf(\"pie\") ➞ 2\n  indexOf(\"\") ➞ -1\n  */\nconst indexLastOf = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return firstLet.length + restLetters.length;\n};\n\n/*\n  Create a function that returns the index of a given string.\n  Example:\n  indexOf(\"pie\") ➞ 2\n  indexOf(\"\") ➞ -1\n  */\nconst indexFirstLet = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return 0;\n};\n\n/*\n  Create a function that returns the index of a given string.\n  Example:\n  indexOf(\"pie\") ➞ 2\n  indexOf(\"\") ➞ -1\n  */\nconst indexLastLet = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return firstLet.length + restLetters.length - 1;\n};\n\n/*\n  Create a function that returns the index of a given string.\n  Example:\n  indexOf(\"pie\") ➞ 2\n  indexOf(\"\") ➞ -1\n  */\nconst indexFirstLast = (txt) => {\n  const [firstLet, restLetters] = txt.split(' ');\n  return firstLet.length +"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  if(arr.length === 0) return -1;\n  let i = -1;\n  let max = -1;\n  for(let index of arr) {\n    if(index > max && index >= arr[i]) {\n      max = index;\n      i = index;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is greater than or equal to the element immediately following it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  if(arr.length === 0) return -1;\n  let i = -1;\n  let min = arr.length;\n  for(let index of arr) {\n    if(index < min && index <= arr[i]) {\n      min = index;\n      i = index;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is less than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 4\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  if(arr.length === 0) return -1;\n  let i = -1;\n  let max = -1;\n  for(let index of arr) {\n    if(index > max && index <= arr[i]) {\n      max = index;\n      i = index;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the smallest index of an element which\n  is less than or equal to the element immediately following it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 1\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  if(arr.length === 0) return -1;\n  let i = -1;\n  let min = arr.length;\n  for(let index of arr) {\n    if(index < min && index >= arr[i]) {\n      min = index;\n      i = index;\n    }\n  }\n  return i;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 2\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  if(arr.length === 0) return -1;\n  let i = -1;\n  let max = -1;\n  for(let index of arr) {\n    if(index > max && index >= arr[i]) {\n      max = index;\n      i = index;\n    }\n  }\n  return i;\n};\n\nconst test = [];\nfor(let i = 0; i < 10; i++) {\n  test.push(i);\n}\n\nlet f1 = canWrrange(test);\nlet f2 = canWrrange(test);\n\nlet f3 = canWrrange(test);\nlet f4 = canWrrange(test);\n\nlet f5 = canWrrange(test);\nlet f6 = canWrrange(test);\n\nlet f7 = canWrrange(test);\nlet f8 = canWrrange(test);\n\nlet f9 = canWrrange(test);\nlet f10 = canWrrange(test);\n\nlet f11 = canWrrange(test);\nlet f12 = canWrrange(test);\n\nlet f13 = canWrrange(test);\nlet f14 = canWrrange(test);\n\nlet f15 = canWrrange(test);\nlet f16 = canWrrange(test);\n\nlet f17 = canWrrange(test);\nlet f18 = canWrrange(test);\n\nlet f19 = canWrrange(test);\nlet f20 = canWrrange(test);\n\nlet f21 = canWrrange(test);\nlet f22 = canWrrange(test);\n\nlet f23 = canWrrange(test);\nlet f24 = canWrrange(test);\n\nlet f25 = canWrrange(test);\nlet f26 = canWrrange(test);\n\nlet f27 = canWrrange(test);\nlet f28 = canWrrange(test);\n\nlet f29 = canWrrange(test);\nlet f30 = canWrrange(test);\n\nlet f31 = canWrrange(test);\nlet f32 = canWrrange(test);\n\nlet f33 = canWrrange(test);\nlet f34 = canWrrange(test);\n\nlet f35 = canWrrange(test);\nlet f36 = canWrrange(test);\n\nlet f37 = canWrrange(test);\nlet f38 = canWrrange(test);\n\nlet f39 = canWrrange(test);\nlet f40 = canWrrange(test);\n\nlet f41 = canWrrange(test);\nlet f42 = canWrrange(test);\n\nlet f43 = canWrrange(test);\nlet f44 = canWrrange(test);\n\nlet f45 = canWrrange(test);\nlet f46 = canWrrange(test);\n\nlet f47 = canWrrange(test);\nlet f48 = canWrrange(test);\n\nlet f49 = canWrrange(test);\nlet f50 = canWr"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let a = null, b = null;\n  lst.forEach((x) => {\n    if (a === null || x < a) {\n      a = x;\n    }\n    if (b === null || x > b) {\n      b = x;\n    }\n  });\n  return [a, b];\n};\n\nmodule.exports = larhestSmallestIntegers;\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a > b? a : b\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a > b? a : b\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a > b? a : b\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a > b? a : b\n  } else {\n    return null\n  }\n}\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smallest variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareTwo(1, 2.5) ➞ 1\n  comoareTwo(1, \"2,3\") ➞ 1\n  comoareTwo(\"5,1\", \"6\") ➞ \"5,1\"\n  comoareTwo(\"1\", 1) ➞ null\n  */\nconst comoareTwo = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a < b? a : b\n  } else if (typeof a ==='string' && typeof b ==='string') {\n    return a < b? a : b\n  } else if (typeof a ==='string' && typeof b === 'number') {\n    return a < b? a : b\n  } else if (typeof a === 'number' && typeof b ==='string') {\n    return a < b? a : b\n  } else {\n    return null\n  }\n}\n\nconst test = [\n  [1, 2.5],\n  [1, \"2,3\"],\n  [\"5,1\", \"6\"],\n  [\"1\", 1]\n]\n\ntest.forEach(([a, b]) => {\n  console.log(comoareTwo(a, b))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  let isEqual = true;\n  for (let i = 1; i < n; i += 2) {\n    if (n % i === 0) {\n      if (i!== 2) {\n        isEqual = false;\n        break;\n      }\n    }\n  }\n  return isEqual;\n};\n\nconsole.log(isEeualToSumEven(4));\nconsole.log(isEeualToSumEven(6));\nconsole.log(isEeualToSumEven(8));\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  if (n <= 0) {\n    return 1\n  }\n  let product = 1\n  for (let i = 2; i <= n; i++) {\n    product *= i\n  }\n  return product\n}\n\nexport default spefialFactorial\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  return text.replace(/\\s/g, '_');\n};\n\n/*\n  Given a string text, replace all underscores in it with spaces, \n  and if a string has more than 2 consecutive underscores, \n  then replace all consecutive underscores with -\n  \n  unfixDpaces(\"Example\") == \"Example\"\n  unfixDpaces(\"Example_1\") == \"Example 1\"\n  unfixDpaces(\"Example_1_2\") == \"Example1 2\"\n  unfixDpaces(\"Example-3\") == \"Example 3\"\n  unfixDpaces(\"Example-3_4\") == \"Example 3 4\"\n  unfixDpaces(\"Example_1_2_3_4\") == \"Example1 2 3 4\"\n  */\nconst unfixDpaces = (text) => {\n  return text.replace(/_/g,'');\n};\n\nexport default {\n  fixDpaces,\n  unfixDpaces\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[a-zA-Z]+[\\d\\.]+[a-zA-Z]+$/;\n  if (re.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Function: filfNameCheck\n  Description: Checks if a given string is a valid file name.\n  Arguments:\n  - file_name: a string representing a file's name\n  Return:\n  - 'Yes' if the string is a valid file name, and returns 'No' otherwise\n  Examples:\n  filfNameCheck(\"1example.txt\") // => 'Yes'\n  filfNameCheck(\"1example\") // => 'No'\n  filfNameCheck(\"1example.exe\") // => 'No'\n  filfNameCheck(\"1example.exe.txt\") // => 'No'\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[a-zA-Z]+[\\d\\.]+[a-zA-Z]+$/;\n  if (re.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Function: filfNameCheck\n  Description: Checks if a given string is a valid file name.\n  Arguments:\n  - file_name: a string representing a file's name\n  Return:\n  - 'Yes' if the string is a valid file name, and returns 'No' otherwise\n  Examples:\n  filfNameCheck(\"1example.txt\") // => 'Yes'\n  filfNameCheck(\"1example\") // => 'No'\n  filfNameCheck(\"1example.exe\") // => 'No'\n  filfNameCheck(\"1example.exe.txt\") // => 'No'\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[a-zA-Z]+[\\d\\.]+[a-zA-Z]+$/;\n  if (re.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Function: filfNameCheck\n  Description: Checks if a given string is a valid file name.\n  Arguments:\n  - file_name: a string representing a file's name\n  Return:\n  - 'Yes' if the string is a valid file name, and returns 'No' otherwise\n  Examples:\n  filfNameCheck(\"1example.txt\") // => 'Yes'\n  filfNameCheck(\"1example\") // => 'No'\n  filfNameCheck(\"1example.exe\") // => 'No'\n  filfNameCheck(\"1example.exe.txt\") // => 'No'\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[a-zA-Z]+[\\d\\.]+[a-zA-Z]+$/;\n  if (re.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Function: filfNameCheck\n  Description: Checks if a given string is a valid file name.\n  Arguments:\n  - file_name: a string representing a file's name\n  Return:\n  - 'Yes' if the string is a valid file name, and returns 'No' otherwise\n  Examples:\n  filfNameCheck(\"1example.txt\") // => 'Yes'\n  filfNameCheck(\"1example\") // => 'No'\n  filfNameCheck(\"1example.exe\") // => 'No'\n  filfNameCheck(\"1example.exe.txt\") // => 'No'\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[a-zA-Z]+[\\d\\.]+[a-zA-Z]+$/;\n  if (re.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n\n/*\n  Function: filfNameCheck\n  Description: Checks if a given string is a valid file name.\n  Arguments:\n  - file_name: a string representing a file's name\n  Return:\n  - 'Yes' if the string is a valid file name, and returns 'No' otherwise\n  Examples:\n  filfNameCheck(\"1example.txt\") // => 'Yes'\n  filfNameCheck(\"1example\") // => 'No'\n  filfNameCheck(\"1example.exe\") // => 'No'\n  filfNameCheck(\"1example.exe.txt\") // => 'No'\n  */\nconst filfNameCheck = (file_name) => {\n  const re = /^[a-zA-Z]+[\\d\\.]+[a-zA-Z]+$/;\n  if (re.test(file_name)) {\n    return 'Yes';\n  } else {\n    return 'No';\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  const output = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      output.push(lst[i] * lst[i])\n    }\n    else if (i % 4 === 0) {\n      output.push(lst[i] * lst[i] * lst[i])\n    }\n    else {\n      output.push(lst[i])\n    }\n  }\n  return output.reduce((prev, curr) => prev + curr, 0)\n}\n\nconst sumCube = (lst) => {\n  const output = []\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0) {\n      output.push(lst[i] * lst[i] * lst[i])\n    }\n    else if (i % 4 === 0) {\n      output.push(lst[i] * lst[i] * lst[i] * lst[i])\n    }\n    else {\n      output.push(lst[i])\n    }\n  }\n  return output.reduce((prev, curr) => prev + curr, 0)\n}\n\nconst square = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr, 0)\n}\n\nconst cube = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr * curr * curr, 0)\n}\n\nconst sum = (lst) => {\n  return lst.reduce((prev, curr) => prev + curr, 0)\n}\n\nconst main = () => {\n  const lst = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube(lst))\n  console.log(\"sum of squares is: \" + sumDquares(lst))\n  console.log(\"sum of cubes is: \" + sumCube("}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n    const words = sentence.split(' ');\n    const primeNumbers = [];\n    for (const word of words) {\n        if (primeNumbers.indexOf(word.length) === -1) {\n            primeNumbers.push(word.length);\n        }\n    }\n    let nextPrime = 1;\n    let newSentence = '';\n    for (const prime of primeNumbers) {\n        while (nextPrime <= prime) {\n            newSentence += words[Math.floor(Math.random() * words.length)];\n            nextPrime += 1;\n        }\n    }\n    return newSentence;\n};\n\nmodule.exports = worfsInSentence;<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n    let xInt = parseInt(x),\n        nInt = parseInt(n);\n\n    if (isNaN(xInt) || isNaN(nInt)) {\n        return false;\n    }\n\n    return xInt * nInt === xInt && nInt === 1? true : false;\n};\n\nconst test = [\n    [\"1/5\", \"5/1\"],\n    [\"1/6\", \"2/1\"],\n    [\"7/10\", \"10/2\"]\n];\n\nconsole.log(simolify(test[0][0], test[0][1]));\nconsole.log(simolify(test[1][0], test[1][1]));\nconsole.log(simolify(test[2][0], test[2][1]));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const sorted = []\n  for (let i = 0; i < nums.length; i++) {\n    if (sorted.length === 0 || sorted[sorted.length - 1].sum === nums[i].sum) {\n      sorted.push(nums[i])\n    } else if (nums[i].sum < sorted[sorted.length - 1].sum) {\n      const tmp = sorted[sorted.length - 1]\n      sorted[sorted.length - 1] = nums[i]\n      sorted.push(tmp)\n    } else {\n      const tmp = sorted[sorted.length - 1]\n      sorted[sorted.length - 1] = nums[i]\n      sorted.push(tmp)\n    }\n  }\n  return sorted\n}\n\n/*\n  Write a function which takes a non-empty array and an integer as input,\n  and returns the index of the largest element in the array.\n\n  For example:\n  >>> indexLargest(arr, 3)\n  3\n  >>> indexLargest([1, 2, 3], 2)\n  2\n  >>> indexLargest([], 2)\n  -1\n  */\nconst indexLargest = (nums, largest) => {\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Write a function which returns the largest of the given list of numbers.\n\n  For example:\n  >>> largest([1, 2, 3])\n  3\n  >>> largest([1, -1, -2, -3])\n  3\n  >>> largest([])\n  -1\n  */\nconst largest = (nums) => {\n  let largest\n  for (let i = 0; i < nums.length; i++) {\n    if (largest === undefined || largest < nums[i]) {\n      largest = nums[i]\n    }\n  }\n  return largest\n}\n\n/*\n  Write a function which returns the smallest of the given list of numbers.\n\n  For example:\n  >>> smallest([1, 2, 3])\n  1\n  >>> smallest([1, -1, -2, -3])\n  1\n  >>> smallest([])\n  -1\n  */\nconst smallest = (nums) => {\n  let smallest\n  for (let i = 0; i < nums.length; i++) {\n    if (smallest === undefined || smallest > nums[i]) {\n      smallest = nums[i]\n    }\n  }\n  return smallest\n}\n\n/*\n  Write a function which returns the index of the largest element in the given list.\n\n  For example:\n  >>> indexLargest([1, 2, 3], 3)\n  2\n  >>> indexLargest([1, -1, -2, -3], 2)\n  0\n  >>> indexLargest([], 2)\n  -1\n  */\nconst indexLargest = (nums, largest) => {\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Write a function which returns the index of the smallest element in the given list.\n\n  For example:\n  >>> indexSmallest([1, 2, 3], 1)\n  1\n  >>> indexSmallest([1, -1, -2, -3], -1)\n  0\n  >>> indexSmallest([], -1)\n  -1\n  */\nconst indexSmallest = (nums, smallest) => {\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < smallest) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Write a function which sorts the given list of numbers in ascending order.\n  Note: the order of the elements in the list should not be changed after\n  sorting.\n\n  For example:\n  >>> sort([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  >>> sort([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst sort = (nums) => {\n  return nums.sort((a, b) => {\n    if (a < b) {\n      return -1\n    } else if (a > b) {\n      return 1\n    } else {\n      return 0\n    }\n  })\n}\n\n/*\n  Write a function which returns the index of the largest element in the given list.\n\n  For example:\n  >>> indexLargest([1, 2, 3, 4, 5, 6], 6)\n  4\n  >>> indexLargest([1, 2, 3, 4, 5, 6, 7, 8], 8)\n  3\n  >>> indexLargest([], 8)\n  -1\n  */\nconst indexLargest = (nums, largest) => {\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > largest) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Write a function which returns the index of the smallest element in the given list.\n\n  For example:\n  >>> indexSmallest([1, 2, 3, 4, 5, 6], 1)\n  1\n  >>> indexSmallest([1, 2, 3, 4, 5, 6, 7, 8], 7)\n  0\n  >>> indexSmallest([], 7)\n  -1\n  */\nconst indexSmallest = (nums, smallest) => {\n  for (let i = 0; i < nums.length; i++) {\n    if (n"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const filtered = nums.filter(num => {\n    return (num % 10 === 0 && num % 2 === 1);\n  });\n  return filtered.length;\n};\n\nconsole.log(spefialFilter([15, -73, 14, -15]));\nconsole.log(spefialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n  const arr = []\n\n  for (let i = 1; i < n; i++) {\n    arr.push(i * i - i + 1)\n  }\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          return 1\n        }\n      }\n    }\n  }\n\n  return 0\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The two valid triples are (1, 7, 13) and (3, 13, 21).\n  */\nconst getLaxTriples2 = (n) => {\n  const arr = []\n\n  for (let i = 1; i < n; i++) {\n    arr.push(i * i - i + 1)\n  }\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          return 2\n        }\n      }\n    }\n  }\n\n  return 0\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples3 = (n) => {\n  const arr = []\n\n  for (let i = 1; i < n; i++) {\n    arr.push(i * i - i + 1)\n  }\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          return 1\n        }\n      }\n    }\n  }\n\n  return 0\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The two valid triples are (1, 7, 13) and (3, 13, 21).\n  */\nconst getLaxTriples4 = (n) => {\n  const arr = []\n\n  for (let i = 1; i < n; i++) {\n    arr.push(i * i - i + 1)\n  }\n\n  for (let i = 0; i < n - 1; i++) {\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = arr[i] + arr[j] + arr[k]\n        if (sum % 3 === 0) {\n          return 2\n        }\n      }\n    }\n  }\n\n  return 0\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples5 = (n) => {\n  const arr = []\n\n  for (let i = 1; i < n; i++) {\n    arr.push(i * i - i + 1)\n  }\n\n  for (let i = 0; i < n - 1; i++) {\n    for ("}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var planet1Name = planet1;\n  var planet2Name = planet2;\n  var planet1Distance = Math.abs(getDistance(planet1Name));\n  var planet2Distance = Math.abs(getDistance(planet2Name));\n  var distance = Math.min(planet1Distance, planet2Distance);\n  var list = [];\n\n  while (distance > 0) {\n    var planet = getPlanet(planet1Name);\n    var planetName = planet.name;\n    var planetDistance = Math.abs(getDistance(planetName));\n    if (planetDistance > distance) {\n      list.push(planetName);\n      planet1Name = planet2Name;\n      planet2Name = planetName;\n      distance = planetDistance;\n    } else {\n      planet1Name = planetName;\n      planet2Name = planet2Name;\n      distance = distance - planetDistance;\n    }\n  }\n  return list;\n};\n\nfunction getDistance(name) {\n  var x = Math.sin(Math.PI / 2) * Math.pow(getDistance(name), 2) / 6378.0;\n  var y = Math.cos(Math.PI / 2) * Math.pow(getDistance(name), 2) / 6378.0;\n  var a = 6378.0 * Math.pow(x + y, 2);\n  var b = 6378.0 * Math.pow(x - y, 2);\n  var c = 6378.0 * Math.pow(x, 2);\n  var d = Math.sqrt(a * b * c);\n  return d;\n}\n\nfunction getPlanet(name) {\n  switch (name) {\n    case 'Mercury':\n      return Mercury;\n    case 'Venus':\n      return Venus;\n    case 'Earth':\n      return Earth;\n    case 'Mars':\n      return Mars;\n    case 'Jupiter':\n      return Jupiter;\n    case 'Saturn':\n      return Saturn;\n    case 'Uranus':\n      return Uranus;\n    case 'Neptune':\n      return Neptune;\n    default:\n      return null;\n  }\n}\n\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\nconsole.log(bf(\"Mercury\", \"Saturn\"));\nconsole.log(bf(\"Mercury\", \"Jupiter\"));\nconsole.log(bf(\"Mercury\", \"Mars\"));\nconsole.log(bf(\"Mercury\", \"Neptune\"));\nconsole.log(bf(\"Mercury\", \"Earth\"));\nconsole.log(bf(\"Mercury\", \"Uranus\"));\n"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const arr = lst.sort((a, b) => a.length - b.length);\n  let sum = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum += arr[i].length;\n  }\n  return arr.filter(s => sum % s.length === 0);\n};\nconsole.log(sorhedListSum([\"aa\", \"a\", \"aaa\"]));\nconsole.log(sorhedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (xOrJ.isPrime(n)) {\n    return x;\n  }\n  return y;\n};\n\nxOrJ.isPrime = (n) => {\n  for (let i = 2; i < n; i += 1) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default xOrJ;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  let total = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0 || typeof lst[i]!== 'number') {\n      return total\n    }\n    total += (lst[i] * lst[i])\n    if (lst[i] % 2 === 1) {\n      total += lst[i]\n    }\n  }\n  return total\n}\n\nexport default douhleTheDifference\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n  const {\n    length: l,\n    data: data\n  } = game;\n  const {\n    length: l2,\n    data: data2\n  } = guess;\n  let {\n    length: l3,\n    data: data3\n  } = 0;\n  for (let i = 0; i < l3; i++) {\n    const {\n      guess: g,\n      data: data4\n    } = 0;\n    data3 = data4;\n  }\n  data3 = data3.sort((a, b) => {\n    return a - b;\n  });\n  data3 = data3.reverse();\n  let correct = 0;\n  for (let i = 0; i < l2; i++) {\n    if (data3[i] === data2[i]) {\n      correct++;\n    }\n  }\n  return [correct, l2 - correct];\n};\n\nconst {\n  length: l,\n  data: data\n} = 0;\nconst {\n  length: l2,\n  data: data2\n} = 0;\nconst {\n  length: l3,\n  data: data3\n} = 0;\nconst correct = 0;\nconst notCorrect = 0;\nfor (let i = 0; i < l3; i++) {\n  const {\n    guess: g,\n    data: data4\n  } = 0;\n  data3 = data4;\n}\ndata3 = data3.sort((a, b) => {\n  return a - b;\n});\ndata3 = data3.reverse();\nfor (let i = 0; i < l2; i++) {\n  if (data3[i] === data2[i]) {\n    correct++;\n  } else {\n    notCorrect++;\n  }\n}\nconsole.log(`${correct}/${l2} Correct.`);\nconsole.log(`${notCorrect}/${l2} Incorrect.`);\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  const capital_letters = class_name.match(/[A-Z]/g)\n  const lower_letters = class_name.match(/[a-z]/g)\n  const capital_letters_count = capital_letters.length\n  const lower_letters_count = lower_letters.length\n  const strength = capital_letters_count - lower_letters_count\n  let extension_name = ''\n  let extension_index = 0\n  for (extension_index = 0; extension_index < extensions.length; extension_index++) {\n    if (strength < 0) {\n      break\n    }\n    const extension = extensions[extension_index]\n    const extension_strength = capital_letters_count - lower_letters_count\n    if (extension_strength < strength) {\n      extension_name = extension\n      strength = extension_strength\n    }\n  }\n  return class_name + '.' + extension_name\n}\n\nexport default strlngestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  a = a.split(\"\");\n  b = b.split(\"\");\n  let n = Math.min(a.length, b.length);\n  let cnt = 0;\n  for (let i = 0; i < n; i++) {\n    if (a[i]!== b[i]) cnt++;\n    if (cnt > 1) return false;\n  }\n  return cnt === 1;\n}\n\nconsole.log(cycoatternCheck(\"abcd\",\"abd\"));\nconsole.log(cycoatternCheck(\"hello\",\"ell\"));\nconsole.log(cycoatternCheck(\"whassup\",\"psus\"));\nconsole.log(cycoatternCheck(\"abab\",\"baa\"));\nconsole.log(cycoatternCheck(\"efef\",\"eeff\"));\nconsole.log(cycoatternCheck(\"himenss\",\"simen\"));\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n    const even = num.filter((x) => {return x % 2 === 0;});\n    const odd = num.filter((x) => {return x % 2!== 0;});\n    return {\n        even,\n        odd\n    };\n}\n\n/*\n   Given a list of numbers. Check if it is an even or odd number.\n   Example:\n      isEvenOdd([2,3,4]) ==> true\n      isEvenOdd([2,3,5]) ==> false\n*/\nconst isEvenOdd = (num) => {\n    const even = num.filter((x) => {return x % 2 === 0;});\n    const odd = num.filter((x) => {return x % 2!== 0;});\n    return {\n        even,\n        odd\n    };\n}\n\nconst isEvenOddCount = (num) => {\n    const even = num.filter((x) => {return x % 2 === 0;});\n    const odd = num.filter((x) => {return x % 2!== 0;});\n    return {\n        even,\n        odd\n    };\n}\n\nconst isEvenOddMap = (num) => {\n    const even = num.filter((x) => {return x % 2 === 0;});\n    const odd = num.filter((x) => {return x % 2!== 0;});\n    return {\n        even,\n        odd\n    };\n}\n\nconst testEvenOddMap = () => {\n    const nums = [1,2,3,4,5,6,7,8,9,10];\n    const evenOdd = isEvenOddMap(nums);\n    console.log(evenOdd);\n}\n\n/*\n   Given a list of numbers. Check if it is an even or odd number.\n   Example:\n      isEvenOdd([2,3,4]) ==> true\n      isEvenOdd([2,3,5]) ==> false\n*/\nconst testIsEvenOdd = () => {\n    const nums = [2,3,4];\n    const isEvenOdd = isEvenOdd(nums);\n    console.log(isEvenOdd);\n}\n\n/*\n   Given a list of numbers. Check if it is an even or odd number.\n   Example:\n      isEvenOdd([2,3,4]) ==> true\n      isEvenOdd([2,3,5]) ==> false\n*/\nconst testIsEvenOddCount = () => {\n    const nums = [2,3,4];\n    const isEvenOddCount = isEvenOddCount(nums);\n    console.log(isEvenOddCount);\n}\n\nconst testIsEvenOddMap = () => {\n    const nums = [2,3,4];\n    const isEvenOdd = isEvenOddMap(nums);\n    console.log(isEvenOdd);\n}\n\nconst testIsEvenOddCountMap = () => {\n    const nums = [2,3,4];\n    const isEvenOddCount = isEvenOddCountMap(nums);\n    console.log(isEvenOddCount);\n}\n\nconst testTestIsEvenOdd = () => {\n    testIsEvenOdd();\n    testIsEvenOddCount();\n    testIsEvenOddMap();\n    testIsEvenOddCountMap();\n}\n\ntestTestIsEvenOdd();\n\n/*\n  Given a list of numbers. Check if it is an even or odd number.\n  Example:\n    isEvenOdd([2,3,4]) ==> true\n    isEvenOdd([2,3,5]) ==> false\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n    const numberToRoman = {\n        1: 'I',\n        4: 'IV',\n        5: 'V',\n        9: 'IX',\n        10: 'X',\n        40: 'XL',\n        50: 'L',\n        90: 'XC',\n        100: 'C',\n        400: 'CD',\n        500: 'D',\n        900: 'CM',\n        1000: 'M'\n    };\n    const numToRoman = Object.keys(numberToRoman).map((num) => numberToRoman[num]);\n    return numToRoman[number];\n};\n\nconsole.log(intHoMiniRoman(19));\nconsole.log(intHoMiniRoman(152));\nconsole.log(intHoMiniRoman(426));<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  const area = (a + b + c) / 2\n  const s = (a + b + c) / 2\n  return (a * b <= c * s) && (b * c <= a * s) && (a * c <= b * s)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  if (!words || words.length === 0) {\n    return '';\n  }\n  let max = 0;\n  let unique = 0;\n  for (let i = 0; i < words.length; i++) {\n    const unique = words[i].length;\n    if (max < unique) {\n      max = unique;\n      unique = words[i];\n    }\n  }\n  return unique;\n};\n\nconsole.log(finfMax([\"name\", \"enam\", \"game\"])); // enam\nconsole.log(finfMax([\"aaaaaaa\", \"bb\",\"cc\"])); // aaaaaaa\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining]\n  }\n  return [need, remaining - number]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock.\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining]\n  }\n  return [need, remaining - number]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock.\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining]\n  }\n  return [need, remaining - number]\n}\n\n/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots that exist in stock.\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number < need) {\n    return [number, remaining]\n  }\n  return [need, remaining - number]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  let result = 0\n  let i = 0\n  while (i < operator.length) {\n    const op = operator[i]\n    if (op === '*') {\n      result = result * operand[i]\n    } else if (op === '+') {\n      result = result + operand[i]\n    } else if (op === '-') {\n      result = result - operand[i]\n    } else if (op === '/') {\n      result = result / operand[i]\n    } else if (op === '**') {\n      result = result ** operand[i]\n    } else {\n      throw Error('invalid operator')\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doBpgebra = (operator, operand) => {\n  let result = 0\n  let i = 0\n  let j = 0\n  while (i < operator.length) {\n    const op = operator[i]\n    if (op === '*') {\n      result = result * operand[j]\n      j++\n    } else if (op === '+') {\n      result = result + operand[j]\n      j++\n    } else if (op === '-') {\n      result = result - operand[j]\n      j++\n    } else if (op === '/') {\n      result = result / operand[j]\n      j++\n    } else if (op === '**') {\n      result = result ** operand[j]\n      j++\n    } else {\n      throw Error('invalid operator')\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doCpgebra = (operator, operand) => {\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  while (i < operator.length) {\n    const op = operator[i]\n    if (op === '*') {\n      result = result * operand[k]\n      k++\n    } else if (op === '+') {\n      result = result + operand[k]\n      k++\n    } else if (op === '-') {\n      result = result - operand[k]\n      k++\n    } else if (op === '/') {\n      result = result / operand[k]\n      k++\n    } else if (op === '**') {\n      result = result ** operand[k]\n      k++\n    } else {\n      throw Error('invalid operator')\n    }\n    i++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doDpgebra = (operator, operand) => {\n  let result = 0\n  let i = 0\n  let j = 0\n  let k = 0\n  let"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let len = s.length;\n  for (let i = 0; i < len/2; i++) {\n    let tmp = s[i];\n    s[i] = s[len-i-1];\n    s[len-i-1] = tmp;\n  }\n  return s;\n}\nconsole.log(solge(\"1234\"));\nconsole.log(solge(\"ab\"));\nconsole.log(solge(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n  \n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst md5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha1('Hello world') == 'a1d7ff0d2d8c0b8f3b0a4d0ddbe8c6d9d9d4d9'\n  */\nconst strlngToSha1 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha1('Hello world') == 'a1d7ff0d2d8c0b8f3b0a4d0ddbe8c6d9d9d4d9'\n  */\nconst sha1 = (text) => {\n  const sha1 = crypto.createHash('sha1');\n  sha1.update(text);\n  return sha1.digest('hex');\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha256('Hello world') == 'd7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a2d0e1f3a4c7f8b9b3e8f7a12b6a"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const digits = []\n  for (let i = a; i <= b; i += 2) {\n    digits.push(i)\n  }\n  return digits\n}\n\nconsole.log(genfrateIntegers(2, 8))\nconsole.log(genfrateIntegers(8, 2))\nconsole.log(genfrateIntegers(10, 14))\n<|endoftext|>"}
