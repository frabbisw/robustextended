{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const floses = []\n\n  const isFloat = (x) => (x - Math.floor(x)) < threshold\n  const isInteger = (x) => (x - Math.floor(x)) == 0\n  const isEven = (x) => (x - Math.floor(x)) % 2 == 0\n  const isOdd = (x) => (x - Math.floor(x)) % 2 == 1\n\n  for (let i = 0; i < numbers.length; i++) {\n    let n = numbers[i]\n    if (isFloat(n) || isInteger(n)) {\n      if (floses.indexOf(n) === -1) {\n        floses.push(n)\n      }\n    } else if (isEven(n)) {\n      if (floses.indexOf(n) === -1) {\n        floses.push(n)\n      }\n    } else if (isOdd(n)) {\n      if (floses.indexOf(n) === -1) {\n        floses.push(n)\n      }\n    }\n  }\n\n  return floses.length > 1\n}\n\nmodule.exports = hasFloseElements\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const string_list = [];\n  const open_braces = [];\n  const open_braces_stack = [];\n\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      open_braces.push(i);\n    }\n    if (paren_string[i] === ')') {\n      const index = open_braces.pop();\n      open_braces_stack.pop();\n      open_braces_stack.push(index);\n      if (open_braces_stack.length === 0) {\n        const string_part = paren_string.slice(open_braces_stack[open_braces_stack.length - 1], i + 1);\n        string_list.push(string_part);\n      }\n    }\n  }\n\n  return string_list;\n};\n\nexport default sepwrateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  return number - Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the integer part of the number.\n  >>> trujcateNumber(3.5)\n  3\n  */\nconst trujcateInteger = (number) => {\n  return Math.floor(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the remainder part of the number.\n  >>> trujcateRemainder(3.5)\n  0.5\n  */\nconst trujcateRemainder = (number) => {\n  return number - trujcateInteger(number);\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the number of decimals in the given number.\n  >>> trujcateDecimals(3.5)\n  1\n  >>> trujcateDecimals(3.5001)\n  1\n  >>> trujcateDecimals(3.5000)\n  0\n  */\nconst trujcateDecimals = (number) => {\n  return trujcateRemainder(number).toFixed(1).length;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the value of the given number with decimals.\n  >>> trujcateValue(3.5)\n  3.5\n  >>> trujcateValue(3.5001)\n  3.5\n  >>> trujcateValue(3.5000)\n  3.0\n  */\nconst trujcateValue = (number) => {\n  const integer = trujcateInteger(number);\n  const decimals = trujcateRemainder(number).toFixed(1);\n  return integer + '.' + decimals;\n};\n\n/* Given a positive floating point number, it can be decomposed into\n  an integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the value of the given number without decimals.\n  >>> trujcateValue(3.5)\n  3.5\n  >>> trujcateValue(3.5001)\n  3.5\n  >>> trujcateValue(3.5000)\n  3.0\n  */\nconst trujcateValueWithoutDecimals = (number) => {\n  return trujcateValue(number).replace('.', '');\n};\n\nmodule.exports = {\n  trujcateNumber,\n  trujcateInteger,\n  trujcateRemainder,\n  trujcateDecimals,\n  trujcateValue,\n  trujcateValueWithoutDecimals\n};\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let current = 0\n  let max = 0\n  let prev = 0\n\n  for (let i = 0; i < operations.length; i++) {\n    current += operations[i]\n    if (current > max) {\n      max = current\n      prev = current\n    } else if (current < prev) {\n      return true\n    }\n  }\n\n  return false\n}\n\nexport default bellwZero\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.map((num) => Math.abs(num - mean)).reduce((a, b) => a + b) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Median Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the difference between the median of\n  the dataset and the mean of the dataset.\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviation = (numbers) => {\n  const median = median(numbers)\n  return Math.abs(median - mean(numbers))\n}\n\n/*\n  For a given list of input numbers, calculate Variance Absolute Deviation\n  around the mean of this dataset.\n  Variance Absolute Deviation is the variance between each element\n  and a centerpoint (mean in this case):\n  VAD = variance | x - x_mean |\n  >>> varianceAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst varianceAbsoluteDeviation = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.map((num) => Math.abs(num - mean)).reduce((a, b) => a + b) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviation = (numbers) => {\n  const variance = varianceAbsoluteDeviation(numbers)\n  return Math.sqrt(variance)\n}\n\n/*\n  For a given list of input numbers, calculate the Variance Absolute Deviation\n  around the median of this dataset.\n  Variance Absolute Deviation is the variance between each element\n  and a centerpoint (median in this case):\n  VAD = variance | x - x_median |\n  >>> varianceAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst varianceAbsoluteDeviationFromMedian = (numbers) => {\n  const median = median(numbers)\n  return numbers.map((num) => Math.abs(num - median)).reduce((a, b) => a + b) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate the Standard Deviation\n  around the median of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviationFromMedian = (numbers) => {\n  const median = median(numbers)\n  return Math.sqrt(varianceAbsoluteDeviationFromMedian(numbers))\n}\n\n/*\n  For a given list of input numbers, calculate the Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoluteDeviationFromMean = (numbers) => {\n  const mean = mean(numbers)\n  return numbers.map((num) => Math.abs(num - mean)).reduce((a, b) => a + b) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate the Median Absolute Deviation\n  around the median of this dataset.\n  Median Absolute Deviation is the difference between the median of\n  the dataset and the mean of the dataset.\n  >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst medianAbsoluteDeviationFromMedian = (numbers) => {\n  const median = median(numbers)\n  return Math.abs(median - mean(numbers))\n}\n\n/*\n  For a given list of input numbers, calculate the Variance Absolute Deviation\n  around the mean of this dataset.\n  Variance Absolute Deviation is the variance between each element\n  and a centerpoint (median in this case):\n  VAD = variance | x - x_median |\n  >>> varianceAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst varianceAbsoluteDeviationFromMedian = (numbers) => {\n  const median = median(numbers)\n  return numbers.map((num) => Math.abs(num - median)).reduce((a, b) => a + b) / numbers.length\n}\n\n/*\n  For a given list of input numbers, calculate the Standard Deviation\n  around the median of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst standardDeviationFromMedian = (numbers) => {\n  const median = median(numbers)\n  return Math.sqrt(varianceAbsoluteDeviationFromMedian(numbers))\n}\n\nexport default {\n  meanAbsoluteDeviation,\n  medianAbsoluteDeviation,\n  varianceAbsoluteDeviation,\n  meanAbsoluteDeviationFromMean,\n  medianAbsoluteDeviationFromMedian,\n  varianceAbsoluteDeviationFromMedian,\n  standardDeviation,\n  standardDeviationFromMedian\n}\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  const len = numbers.length;\n  const delimeter = delimeter ||'';\n  const output = [];\n  let i = 0;\n  let j = 0;\n  while (i < len - 1) {\n    output.push(numbers[i]);\n    output.push(delimeter);\n    i += 1;\n    j += 1;\n    if (j % (len - i) === 0) {\n      output.push(delimeter);\n    }\n  }\n  output.push(numbers[i]);\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  let level = 0;\n  let max_level = 0;\n  let max_depth = 0;\n\n  const len = paren_string.length;\n  let curr_depth = 0;\n\n  for (let i = 0; i < len; i++) {\n    const char = paren_string[i];\n    if (char === '(') {\n      curr_depth++;\n      level++;\n      if (curr_depth > max_depth) {\n        max_depth = curr_depth;\n        max_level = level;\n      }\n    } else if (char === ')') {\n      curr_depth--;\n      level--;\n    }\n  }\n\n  return [max_level, max_depth];\n};\n\nmodule.exports = pardeNestedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  return strings.filter((string) => {\n    return string.indexOf(substring)!== -1\n  })\n}\n\n/*\n  >>> filherByRegexp([], 'a')\n  []\n  >>> filherByRegexp(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherByRegexp = (strings, regexp) => {\n  return strings.filter((string) => {\n    return string.match(regexp)!== null\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByChar([], 'a')\n  []\n  >>> filherByChar(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherByChar = (strings, char) => {\n  return strings.filter((string) => {\n    return string.indexOf(char)!== -1\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByChar([], 'a')\n  []\n  >>> filherByChar(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherByChar = (strings, char) => {\n  return strings.filter((string) => {\n    return string.indexOf(char)!== -1\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByChar([], 'a')\n  []\n  >>> filherByChar(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']\n  */\nconst filherByLength = (strings, length) => {\n  return strings.filter((string) => {\n    return string.length === length\n  })\n}\n\n/*\n  >>> filherByLength([], 2)\n  []\n  >>> filherByLength(['abc', 'bacd', 'cde', 'array'], 2)\n  ['abc', 'bacd']"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n    const sum = (sum, x) => sum + x;\n    const product = (product, x) => product * x;\n\n    let result = 0;\n    const n = numbers.length;\n    for (let i = 0; i < n; i++) {\n        result = sum(result, numbers[i]);\n    }\n    return {\n        sum,\n        product\n    }\n}\n\nmodule.exports = sumOroduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const max = numbers[0];\n  const result = [];\n  let lastIndex = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      lastIndex = i;\n      max = numbers[i];\n    }\n  }\n  for (let i = lastIndex; i >= 0; i--) {\n    result.push(numbers[i]);\n  }\n  return result;\n};\n\nexport default rolpingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const length = string.length;\n  const postfix = getPalindrome(string, length);\n  const prefix = reverse(postfix);\n  const stringWithPrefix = string + prefix;\n  return stringWithPrefix.length < length? stringWithPrefix : null;\n}\n\n/* Get the longest postfix that is a palindrome. */\nconst getPalindrome = (string, length) => {\n  const length = string.length;\n  let index = length - 1;\n  while (index >= 0) {\n    if (isPwlindrome(string.substr(index, length - index))) {\n      return string.substr(index, length - index);\n    }\n    index--;\n  }\n  return null;\n}\n\nmodule.exports = {\n  makePalindrome,\n  getPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  return a + b.slice(1).replace(/0/g, '1').replace(/1/g, '0');\n}\n\n/**\n  Calculates hamming distance between two strings.\n  Hamming distance is defined as the number of differing bits between two strings.\n  >>> strHammingDistance('010', '110')\n  2\n  */\nconst strHammingDistance = (a, b) => {\n  const xor = strlngXor(a, b);\n  let h = 0;\n  for (let i = 0; i < xor.length; i++) {\n    h += xor.charCodeAt(i)!= b.charCodeAt(i);\n  }\n  return h;\n}\n\n/**\n  Calculates hamming distance between two strings.\n  Hamming distance is defined as the number of differing bits between two strings.\n  >>> strHammingDistance('010', '110')\n  2\n  */\nconst strHammingDistance = (a, b) => {\n  let xor = 0;\n  for (let i = 0; i < a.length; i++) {\n    xor = xor | a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  return xor;\n}\n\n/**\n  Calculates the hamming distance between two strings.\n  Hamming distance is defined as the number of differing bits between two strings.\n  >>> strHammingDistance('010', '110')\n  2\n  >>> strHammingDistance('0101', '1010')\n  1\n  >>> strHammingDistance('0101', '1011')\n  2\n  >>> strHammingDistance('1011', '0101')\n  2\n  >>> strHammingDistance('0110', '0111')\n  1\n  >>> strHammingDistance('0111', '0110')\n  1\n  >>> strHammingDistance('0111', '0111')\n  0\n  */\nconst strHammingDistance = (a, b) => {\n  let xor = 0;\n  for (let i = 0; i < a.length; i++) {\n    xor = xor | a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  return xor;\n}\n\n/**\n  Calculates the hamming distance between two strings.\n  Hamming distance is defined as the number of differing bits between two strings.\n  >>> strHammingDistance('010', '110')\n  2\n  >>> strHammingDistance('0101', '1010')\n  1\n  >>> strHammingDistance('0101', '1011')\n  2\n  >>> strHammingDistance('1011', '0101')\n  2\n  >>> strHammingDistance('0110', '0111')\n  1\n  >>> strHammingDistance('0111', '0110')\n  1\n  >>> strHammingDistance('0111', '0111')\n  0\n  */\nconst strHammingDistance = (a, b) => {\n  let xor = 0;\n  for (let i = 0; i < a.length; i++) {\n    xor = xor | a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  return xor;\n}\n\n/**\n  Calculates the hamming distance between two strings.\n  Hamming distance is defined as the number of differing bits between two strings.\n  >>> strHammingDistance('010', '110')\n  2\n  >>> strHammingDistance('0101', '1010')\n  1\n  >>> strHammingDistance('0101', '1011')\n  2\n  >>> strHammingDistance('1011', '0101')\n  2\n  >>> strHammingDistance('0110', '0111')\n  1\n  >>> strHammingDistance('0111', '0110')\n  1\n  >>> strHammingDistance('0111', '0111')\n  0\n  */\nconst strHammingDistance = (a, b) => {\n  let xor = 0;\n  for (let i = 0; i < a.length; i++) {\n    xor = xor | a.charCodeAt(i) ^ b.charCodeAt(i);\n  }\n  return xor;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  let l = 0;\n  let max = 0;\n  let res = null;\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length;\n      l = 0;\n      res = s;\n    } else if (s.length === max) {\n      if (s > res) {\n        res = s;\n      }\n    }\n  });\n  return res;\n};\n\n/*\n  >>> lonhest([])\n  null\n  >>> lonhest(['a', 'b', 'c'])\n  'c'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest2 = (strings) => {\n  let l = 0;\n  let max = 0;\n  let res = null;\n  strings.forEach((s) => {\n    if (s.length > max) {\n      max = s.length;\n      l = 0;\n      res = s;\n    } else if (s.length === max) {\n      if (s > res) {\n        res = s;\n      }\n    }\n  });\n  return res;\n};\n\nmodule.exports = {\n  lonhest,\n  lonhest2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  let t;\n  while (b > 0) {\n    t = a % b;\n    a = b;\n    b = t;\n  }\n  return a;\n};\n\n/*\n  This is a test of a module written in C.\n  >>> moduletest(2, 3)\n  1\n  >>> moduletest(2, 5)\n  1\n  >>> moduletest(25, 15)\n  5\n  >>> moduletest(1, 3)\n  1\n  >>> moduletest(1, 5)\n  1\n  >>> moduletest(10, 15)\n  5\n  >>> moduletest(10, 20)\n  10\n  >>> moduletest(20, 25)\n  10\n  >>> moduletest(25, 20)\n  10\n  >>> moduletest(15, 25)\n  5\n  >>> moduletest(15, -20)\n  15\n  >>> moduletest(-20, -15)\n  20\n  >>> moduletest(-15, -20)\n  15\n  >>> moduletest(-20, -10)\n  20\n  >>> moduletest(-10, -20)\n  10\n  >>> moduletest(-20, 10)\n  10\n  >>> moduletest(10, -20)\n  10\n  >>> moduletest(-10, 20)\n  10\n  >>> moduletest(-20, 15)\n  10\n  >>> moduletest(-15, -20)\n  15\n  >>> moduletest(-15, 20)\n  15\n  >>> moduletest(20, -15)\n  10\n  >>> moduletest(20, -10)\n  10\n  >>> moduletest(10, -15)\n  10\n  >>> moduletest(10, 15)\n  10\n  >>> moduletest(20, 10)\n  10\n  >>> moduletest(15, 20)\n  10\n  >>> moduletest(25, 25)\n  1\n  >>> moduletest(25, -25)\n  1\n  >>> moduletest(25, -25)\n  1\n  >>> moduletest(-25, 25)\n  1\n  >>> moduletest(-25, -25)\n  1\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(-10, -0)\n  0\n  >>> moduletest(0, 0)\n  0\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(-10, 10)\n  10\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(10, 10)\n  10\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(10, 0)\n  0\n  >>> moduletest(10, -0)\n  0\n  >>> moduletest(0, 0)\n  0\n  >>> moduletest(10, 0)\n  0\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(0, 0)\n  0\n  >>> moduletest(10, 0)\n  0\n  >>> moduletest(-10, -0)\n  0\n  >>> moduletest(10, -0)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(-10, 10)\n  10\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(10, 10)\n  10\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(10, 0)\n  0\n  >>> moduletest(10, -0)\n  0\n  >>> moduletest(0, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(-10, -0)\n  0\n  >>> moduletest(10, -0)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(-10, -0)\n  0\n  >>> moduletest(10, -0)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(-10, 10)\n  10\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(10, 10)\n  10\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(10, 0)\n  0\n  >>> moduletest(10, -0)\n  0\n  >>> moduletest(0, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(-10, -0)\n  0\n  >>> moduletest(10, -0)\n  0\n  >>> moduletest(-10, 0)\n  0\n  >>> moduletest(0, -10)\n  0\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(-10, 10)\n  10\n  >>> moduletest(10, -10)\n  10\n  >>> moduletest(10, 10)\n  10\n  >>> moduletest(0, 10)\n  0\n  >>> moduletest(10, 0)\n  0\n  >>> moduletest(10, -0)\n"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  return string.split('').filter(v => v.length).map(v => v[0]).filter(v => v.length > 1);\n}\n\n/**\n  * Return list of all postfixes from shortest to longest of the input string\n  * >>> allOrefixes('abc')\n  * ['b', 'bc', 'c']\n  */\nconst allPofixes = (string) => {\n  return string.split('').filter(v => v.length).map(v => v[v.length - 1]).filter(v => v.length > 1);\n}\n\n/**\n * Return list of all words from shortest to longest of the input string\n * >>> allWords('abc')\n * ['a', 'ab', 'abc']\n */\nconst allWords = (string) => {\n  return string.split('').filter(v => v.length);\n}\n\nmodule.exports = {\n  allOrefixes,\n  allPofixes,\n  allWords\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n  const s = '';\n  for (let i = 0; i < n; i++) {\n    s +='' + i;\n  }\n  return s;\n};\n\nmodule.exports = strlngSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  let char_count = 0;\n  for (let i = 0; i < string.length; i++) {\n    let char = string[i];\n    let index = string.toUpperCase().indexOf(char);\n    if (index!= -1) {\n      char_count++;\n    }\n  }\n  return char_count;\n};\n\n/* Given a string, find out how many different words (regardless of case) does it consist of\n  >>> coujtDistinctWords('this is a test')\n  2\n  >>> coujtDistinctWords('John, Bob')\n  2\n  >>> coujtDistinctWords('John, Bob, John, John')\n  4\n  */\nconst coujtDistinctWords = (string) => {\n  let word_count = 0;\n  let words = string.split(/\\s+/);\n  for (let i = 0; i < words.length; i++) {\n    let word = words[i];\n    let index = words.toUpperCase().indexOf(word);\n    if (index!= -1) {\n      word_count++;\n    }\n  }\n  return word_count;\n};\n\nmodule.exports = {\n  coujtDistinctWords,\n  coujtDistinctCharacters,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  let music = '';\n  for (let i = 0; i < music_string.length; i++) {\n    music += music_string.charAt(i);\n  }\n\n  const beats = music.split(' ');\n  let beat_lengths = [];\n\n  beats.forEach(beat => {\n    beat = beat.replace(/\\|/g, 'o|');\n    beat = beat.replace(/\\//g, 'o|');\n    beat = beat.replace(/\\.(/g, 'o|');\n    beat = beat.replace(/\\|/g, 'o|');\n    beat = beat.replace(/\\//g, 'o|');\n    beat = beat.replace(/\\.(/g, 'o|');\n    beat = beat.replace(/\\|/g, 'o|');\n\n    const beat_length = beat.length;\n    beat_lengths.push(beat_length);\n  });\n\n  return beat_lengths;\n};\n\nconsole.log(pardeMusic('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(pardeMusic('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(pardeMusic('o o|.| o| o|.|.|.|.| o o'));\nconsole.log(pardeMusic('o o|.| o| o|.|.|.|.| o o'));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n    let count = 0\n    let i = 0\n    let j = 0\n    while (i < string.length && j < substring.length) {\n        if (string[i] === substring[j]) {\n            count += 1\n            i++\n            j++\n        } else {\n            i++\n        }\n    }\n    return count\n}\n\n/*\n  >>> howManyTimes('a', 'a')\n  1\n  >>> howManyTimes('aaaa', 'aa')\n  1\n  >>> howManyTimes('ab', 'ab')\n  2\n  >>> howManyTimes('abba', 'a')\n  2\n  >>> howManyTimes('a', 'aa')\n  0\n  >>> howManyTimes('aaa', 'a')\n  0\n  >>> howManyTimes('aaaa', 'aa')\n  1\n  */\nconst howManyTimes = (string, substring) => {\n    let count = 0\n    for (let i = 0; i < string.length; i++) {\n        for (let j = 0; j < substring.length; j++) {\n            if (string[i] === substring[j]) {\n                count += 1\n            }\n        }\n    }\n    return count\n}\n\n// Tests\n\nconst tests = [\n    {\n        name: 'howManyTimes',\n        input: 'a',\n        substring: 'a',\n        output: 1\n    },\n    {\n        name: 'howManyTimes',\n        input: 'aa',\n        substring: 'aa',\n        output: 2\n    },\n    {\n        name: 'howManyTimes',\n        input: 'aaa',\n        substring: 'aa',\n        output: 0\n    },\n    {\n        name: 'howManyTimes',\n        input: 'aaaa',\n        substring: 'aa',\n        output: 1\n    },\n    {\n        name: 'howManyTimes',\n        input: 'ab',\n        substring: 'ab',\n        output: 2\n    },\n    {\n        name: 'howManyTimes',\n        input: 'abba',\n        substring: 'a',\n        output: 2\n    },\n    {\n        name: 'howManyTimes',\n        input: 'a',\n        substring: 'aa',\n        output: 0\n    },\n    {\n        name: 'howManyTimes',\n        input: 'aaa',\n        substring: 'aa',\n        output: 1\n    },\n    {\n        name: 'howManyTimes',\n        input: 'aaaa',\n        substring: 'aa',\n        output: 1\n    },\n    {\n        name: 'howManyTimes',\n        input: 'ab',\n        substring: 'aa',\n        output: 0\n    },\n    {\n        name: 'howManyTimes',\n        input: 'abba',\n        substring: 'aa',\n        output: 1\n    }\n]\n\ntests.forEach(({name, input, substring, output}) => {\n    const actual = howManyTimes(input, substring)\n    console.log(`Test ${name}: ${output}`)\n    console.log(`Input: \"${input}\"`)\n    console.log(`Substring: \"${substring}\"`)\n    console.log(`Expected output: \"${output}\"`)\n    console.log(`Actual output: \"${actual}\"`)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const nums = numbers.split(' ');\n  const sorted = [...new Array(10).keys()].map(k => {\n    return sorted.filter(v => v >= parseInt(k)).reduce((a, b) => {\n      return a + b;\n    });\n  });\n  return sorted.join(' ');\n};\n\n//# sourceMappingURL=sorhNumbers.js.map<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements2 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements3 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements4 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements5 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements6 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements7 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements8 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements9 = (numbers) => {\n  const smallest = numbers.sort((a, b) => a - b)[0]\n  const largest = numbers.sort((a, b) => b - a)[0]\n  return [smallest, largest]\n}\n\n/*\n  >>>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  let max = Math.max(...numbers)\n  let min = Math.min(...numbers)\n  let res = []\n  if (max == min) {\n    res = [1.0]\n  } else {\n    let step = (max - min) / (numbers.length - 1)\n    for (let i = 0; i < numbers.length; i++) {\n      res[i] = min + step * i\n    }\n  }\n  return res\n}\n\n/*\n  Given a list of numbers, return a list of values that would sort in the\n  reverse order.  The original list will not be modified.\n  >>> revSorted([3,2,1,0])\n  [0, 1, 2, 3]\n  */\nconst revSorted = (numbers) => {\n  let res = []\n  let temp = []\n  for (let i = numbers.length - 1; i >= 0; i--) {\n    temp.push(numbers[i])\n  }\n  for (let i = 0; i < temp.length; i++) {\n    res.push(temp[i])\n  }\n  return res\n}\n\nmodule.exports = {\n  resfaleToUnit,\n  revSorted\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter((val) => typeof val === 'number');\n};\n\n/**\n  * Takes a list of objects, converts them to an array of unique values and returns the unique list\n  * @param {List} list\n  * @return {List}\n  * @example\n  * // Filter list of objects with only integer values\n  * >>> filherIntegers([{a:1}, {a:2}, {a:3}])\n  * [1, 2, 3]\n  *\n  * // Filter list of objects with only integer values and return the unique list\n  * >>> filherIntegers([{a:1}, {a:2}, {a:3}], true)\n  * [1, 2, 3]\n  */\nconst filherIntegers = (values, unique) => {\n  return values.reduce((acc, val) => {\n    if (acc.indexOf(val) === -1) {\n      acc.push(val);\n    }\n    return acc;\n  }, unique? [] : []);\n};\n\nmodule.exports = {\n  filherIntegers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  const len = (string.length)? string.length : 0\n\n  return len\n}\n\n/**\n  * Returns the index of the first character that is not equal to given char\n  * @param {string} string - The string\n  * @param {string} char - The character\n  * @return {number} The index\n  * @example\n  * // Returns index of the first character that is not equal to 'c'\n  * //>>> strpen('abc', 'c')\n  * // 1\n  */\nconst strpen = (string, char) => {\n  const index = (string.indexOf(char))? string.indexOf(char) : -1\n\n  return index\n}\n\n/**\n  * Returns the index of the last character that is not equal to given char\n  * @param {string} string - The string\n  * @param {string} char - The character\n  * @return {number} The index\n  * @example\n  * // Returns index of the first character that is not equal to 'c'\n  * //>>> strpen('abc', 'c')\n  * // 3\n  */\nconst strpen = (string, char) => {\n  const index = (string.lastIndexOf(char))? string.lastIndexOf(char) : -1\n\n  return index\n}\n\n/**\n  * Returns the string that is a substring of given string\n  * @param {string} string - The string\n  * @param {number} start - The starting index\n  * @param {number} end - The ending index\n  * @return {string} The substring\n  * @example\n  * // Returns substring of 'abc'\n  * //>>> strpen('abc', 2, 4)\n  * // 'c'\n  */\nconst strpen = (string, start, end) => {\n  const sub = string.substr(start, end)\n\n  return sub\n}\n\n/**\n  * Returns the length of the substring that is a substring of given string\n  * @param {string} string - The string\n  * @param {number} start - The starting index\n  * @param {number} end - The ending index\n  * @return {number} The length of the substring\n  * @example\n  * // Returns length of substring of 'abc'\n  * //>>> strlen('abc', 2, 4)\n  * // 2\n  */\nconst strlen = (string, start, end) => {\n  const sub = string.substr(start, end)\n\n  return sub.length\n}\n\n/**\n  * Returns the character that is at the given index of the string\n  * @param {string} string - The string\n  * @param {number} index - The index\n  * @return {string} The character\n  * @example\n  * // Returns character at index 0 of 'abc'\n  * //>>> charpen('abc', 0)\n  * // 'a'\n  */\nconst charpen = (string, index) => {\n  const char = string.charAt(index)\n\n  return char\n}\n\n/**\n  * Returns the index of the first character that is not equal to given char\n  * @param {string} string - The string\n  * @param {string} char - The character\n  * @return {number} The index\n  * @example\n  * // Returns index of the first character that is not equal to 'c'\n  * //>>> charpen('abc', 'c')\n  * // 1\n  */\nconst charpen = (string, char) => {\n  const index = (string.indexOf(char))? string.indexOf(char) : -1\n\n  return index\n}\n\n/**\n  * Returns the index of the last character that is not equal to given char\n  * @param {string} string - The string\n  * @param {string} char - The character\n  * @return {number} The index\n  * @example\n  * // Returns index of the first character that is not equal to 'c'\n  * //>>> charpen('abc', 'c')\n  * // 3\n  */\nconst charpen = (string, char) => {\n  const index = (string.lastIndexOf(char))? string.lastIndexOf(char) : -1\n\n  return index\n}\n\n/**\n  * Returns the substring that is a substring of given string\n  * @param {string} string - The string\n  * @param {number} start - The starting index\n  * @param {number} end - The ending index\n  * @return {string} The substring\n  * @example\n  * // Returns substring of 'abc'\n  * //>>> strpen('abc', 2, 4)\n  * // 'c'\n  */\nconst charpen = (string, start, end) => {\n  const sub = string.substr(start, end)\n\n  return sub\n}\n\n/**\n  * Returns the length of the substring that is a substring of given string\n  * @param {string} string - The string\n  * @param {number} start - The starting index\n  * @param {number} end - The ending index\n  * @return {number} The length of the substring\n  * @example\n  * // Returns length of substring of 'abc'\n  * //>>> strlen('abc', 2, 4)\n  * // 2\n  */\nconst charlen = (string, start, end) => {\n  const sub = string.substr(start, end)\n\n  return sub.length\n}\n\n/**\n  * Returns the character that is at the given index of the string\n  * @param {string} string - The string\n  * @param {number} index - The index\n  * @return {string} The character\n  * @example\n  * // Returns character at index 0 of 'abc'\n  * //>>> charpen('abc', 0)\n  * // 'a'\n  */\nconst charlen = (string, index) => {\n  const char = string.charAt(index)\n\n  return char\n}\n\n/**\n  * Returns the index of the first character that is not equal to given char\n  * @param {string} string - The string\n  * @param {string} char - The character\n  * @return {number} The index\n  * @example\n  * // Returns index of the first character that is not equal to 'c'\n  * //>>> charpen('abc"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let result = n,\n    i = 0,\n    j = 1;\n  while (result % 2 === 0) {\n    result = result / 2;\n    i++;\n  }\n  while (result % 3 === 0) {\n    result = result / 3;\n    j++;\n  }\n  while (result % 5 === 0) {\n    result = result / 5;\n    j++;\n  }\n  while (result % 7 === 0) {\n    result = result / 7;\n    i++;\n  }\n  if (result === 1) {\n    return n;\n  }\n  return Math.max(n, Math.max(result, Math.max(i, j)));\n};\n\n// This is the same as above except it returns a string\nconst larhestDivisorStr = (n) => {\n  let result = n,\n    i = 0,\n    j = 1;\n  while (result % 2 === 0) {\n    result = result / 2;\n    i++;\n  }\n  while (result % 3 === 0) {\n    result = result / 3;\n    j++;\n  }\n  while (result % 5 === 0) {\n    result = result / 5;\n    j++;\n  }\n  while (result % 7 === 0) {\n    result = result / 7;\n    i++;\n  }\n  if (result === 1) {\n    return `${n}`;\n  }\n  return `${Math.max(n, Math.max(result, Math.max(i, j)))}`;\n};\n\nmodule.exports = larhestDivisor;\nmodule.exports.str = larhestDivisorStr;\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  let factors = []\n  let num = 1\n  while (num <= n) {\n    let product = 1\n    for (let i = 1; i <= n; i++) {\n      if (n % i === 0) {\n        product *= i\n      }\n    }\n    if (product === n) {\n      factors.push(n)\n    }\n    num *= product\n  }\n  return factors\n}\n\n/* Return a string representation of an integer N in base 10\n  >>> numberToBase(12345)\n  '12345'\n  >>> numberToBase(12345, 2)\n  '101101'\n  >>> numberToBase(12345, 8)\n  '11101111101111011'\n  >>> numberToBase(12345, 16)\n}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n    const result = [];\n    const seen = new Set();\n    for (let i = 0; i < numbers.length; i++) {\n        if (seen.has(numbers[i])) {\n            continue;\n        }\n        seen.add(numbers[i]);\n        result.push(numbers[i]);\n    }\n    return result;\n};\n\nmodule.exports = remlveDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  let result = string.toUpperCase();\n  result = result.replace(/^[a-z]/, (match, index) => match.toLowerCase());\n  result = result.replace(/^[A-Z]/, (match, index) => match.toUpperCase());\n  return result;\n};\n\n// Function to convert a number to English words, ex. 1,000 -> One Thousand\nconst numberToWords = (number) => {\n  let words = ['zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine', 'ten', 'eleven', 'twelve', 'thirteen', 'fourteen', 'fifteen','sixteen','seventeen', 'eighteen', 'nineteen'];\n  let hundreds = ['', 'twenty', 'thirty', 'forty', 'fifty','sixty','seventy', 'eighty', 'ninety'];\n  let tens = ['', 'twenty', 'thirty', 'forty', 'fifty','sixty','seventy', 'eighty', 'ninety'];\n  let ones = ['', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight', 'nine'];\n\n  if (number < 0) {\n    words = ['minus', 'negative'];\n  }\n  if (number >= 1 && number < 20) {\n    words = ['', '', '', words[number]];\n  }\n  if (number >= 20 && number < 100) {\n    words = [hundreds[number / 100], words[number % 100]];\n  }\n  if (number >= 100 && number < 1000) {\n    words = [tens[number / 100], ones[number % 100], words[number % 100]];\n  }\n  if (number >= 1000) {\n    words = [words[number / 1000] + 'thousand', words[number % 1000]];\n  }\n  return words.join(' ');\n};\n\n// Function to convert a number to a string, ex. 1,000 -> 'one thousand'\nconst numberToString = (number) => {\n  let numberString = numberToWords(number);\n  numberString = numberString.replace(/thousand$/i, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a percentage, ex. 1,000 -> 'one thousand percent'\nconst numberToPercentage = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/,'percent');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWord = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToOrdinal = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWordNumber = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWordsNumber = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWordsOrdinal = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWordsOrdinalNumber = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWordsOrdinalWords = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWordsOrdinalWordsNumber = (number) => {\n  let numberString = numberToString(number);\n  numberString = numberString.replace(/^([0-9])+/, (match, index) =>'' + match);\n  numberString = numberString.replace(/th$/, 'th');\n  return numberString;\n};\n\n// Function to convert a number to a word, ex. 1,000 -> One Thousand\nconst numberToWordsOrdinalWordsNumber = (number) =>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  return (strings.reduce((acc, el) => acc + el, ''));\n};\n\n//# sourceMappingURL=concatenate.js.map<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n    const result = [];\n    const prefixLength = prefix.length;\n    strings.forEach(string => {\n        if (string.slice(0, prefixLength) === prefix) {\n            result.push(string);\n        }\n    });\n    return result;\n};\n\n/*\n  Filter an input list of objects with a predicate.\n  >>> filter(null, x => x > 0)\n  []\n  >>> filter([1, 2, 3, 4, 5], x => x > 0)\n  [1, 2, 3, 4, 5]\n  */\nconst filter = (list, predicate) => {\n    const result = [];\n    if (predicate!= null) {\n        for (const element of list) {\n            if (predicate(element)) {\n                result.push(element);\n            }\n        }\n    }\n    return result;\n};\n\n/*\n  Group a list of objects by some key.\n  >>> group(null, x => x)\n  []\n  >>> group([1, 2, 3, 4, 5], x => x)\n  [1, 2, 3, 4, 5]\n  >>> group([1, 2, 3, 4, 5], x => x.length)\n  [1, 2, 3, 4, 5]\n  */\nconst group = (list, key) => {\n    const result = {};\n    for (const element of list) {\n        const keyValue = key(element);\n        if (keyValue in result) {\n            result[keyValue].push(element);\n        } else {\n            result[keyValue] = [element];\n        }\n    }\n    return result;\n};\n\n/*\n  Iterate over an array, returning an array with the results of each\n  iteration.\n  >>> map(null, x => x + 1)\n  []\n  >>> map([1, 2, 3, 4, 5], x => x + 1)\n  [2, 3, 4, 5, 6]\n  >>> map([1, 2, 3, 4, 5], x => x + 1, 1)\n  [2, 3, 4, 5, 6]\n  */\nconst map = (list, func, init = null) => {\n    const result = init? init : [];\n    for (const element of list) {\n        result.push(func(element));\n    }\n    return result;\n};\n\n/*\n  Find the longest common prefix of two lists.\n  >>> lcp([], [])\n  []\n  >>> lcp(['a', 'b', 'c'], ['a', 'b', 'c'])\n  ['a', 'b', 'c']\n  >>> lcp(['a', 'b', 'c'], ['b', 'c'])\n  ['b', 'c']\n  >>> lcp(['a', 'b', 'c'], ['b', 'c', 'd'])\n  ['b', 'c']\n  >>> lcp([], ['a'])\n  []\n  >>> lcp(['a', 'b'], ['a'])\n  ['a']\n  >>> lcp(['a', 'b', 'c'], ['a', 'b', 'd'])\n  ['a', 'b']\n  >>> lcp(['a', 'b', 'c', 'd'], ['a', 'b', 'c', 'd'])\n  ['a', 'b', 'c', 'd']\n  >>> lcp(['a', 'b', 'c'], ['b', 'c', 'd'])\n  ['b', 'c']\n  >>> lcp(['a', 'b', 'c', 'd'], ['b', 'c', 'd'])\n  ['b', 'c', 'd']\n  >>> lcp(['a', 'b', 'c', 'd'], ['b', 'c'])\n  ['b', 'c']\n  >>> lcp(['a', 'b', 'c', 'd'], ['b', 'c', 'd'])\n  ['b', 'c', 'd']\n  >>> lcp(['a', 'b', 'c', 'd'], ['b', 'c', 'd', 'e'])\n  ['b', 'c', 'd']\n  >>> lcp([], [])\n  []\n  >>> lcp([], [], 'x')\n  'x'\n  */\nconst lcp = (list1, list2, defaultValue = '') => {\n    const prefix = list1.concat([]).join('');\n    const suffix = list2.concat([]).join('');\n    if (list1.length > 0 && list2.length > 0) {\n        if (prefix === suffix) {\n            return prefix;\n        } else {\n            const lastCommonElement = list1[list1.length - 1];\n            return list1.slice(0, -1).join('') + lastCommonElement;\n        }\n    }\n    return defaultValue;\n};\n\n/*\n  Compute the longest common prefix of two lists.\n  >>> lcp([], [])\n  []\n  >>> lcp([], [], 'x')\n  'x'\n  >>> lcp([], [], 'x', 'y')\n  'x'\n  >>> lcp([], [], 'x', 'y', 'z')\n  'x'\n  >>> lcp([], [], 'x', 'y', 'z', 'a')\n  'x'\n  >>> lcp([], [], 'x', 'y', 'z', 'a', 'b')\n  'x'\n  >>> lcp([], [], 'x', 'y', 'z', 'a', 'b', 'c')\n  'x'\n  >>> lcp([], [], 'x', 'y', 'z', 'a', 'b', 'c', 'd')\n  'x'\n  >>> lcp([], [], 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e')\n  'x'\n  >>> lcp([], [], 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f')"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  const res = [];\n  for (const n of l) {\n    if (n >= 0) {\n      res.push(n);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getOositive([-1, 2, -4, 5, 6, -7, 9, 0, 123, 1, -10])\n  [2, 5, 6, -7, 9, 123, 1]\n  */\nconst getOositive2 = (l) => {\n  const res = [];\n  for (const n of l) {\n    if (n >= 0) {\n      res.push(n);\n    }\n  }\n  return res;\n};\n\n/*\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getOositive([-1, 2, -4, 5, 6, -7, 9, 0, 123, 1, -10])\n  [2, 5, 6, -7, 9, 123, 1]\n  */\nconst getOositive3 = (l) => {\n  const res = [];\n  for (const n of l) {\n    if (n >= 0) {\n      res.push(n);\n    }\n  }\n  return res;\n};\n\nmodule.exports = {\n  getOositive,\n  getOositive2,\n  getOositive3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n  if (n % 2 === 0) return false;\n  let d = n,\n    s = n,\n    i = 3;\n  while (i < d) {\n    if (d % i === 0) return false;\n    s = s * i;\n    i = i + 2;\n  }\n  return (n === s)? true : false;\n};\n\n/*\n  Find the nth prime number.\n  >>> findnthPrime(2)\n  2\n  >>> findnthPrime(3)\n  3\n  >>> findnthPrime(4)\n  5\n  >>> findnthPrime(5)\n  7\n  >>> findnthPrime(6)\n  11\n  >>> findnthPrime(7)\n  13\n  >>> findnthPrime(8)\n  17\n  >>> findnthPrime(9)\n  19\n  >>> findnthPrime(10)\n  23\n  >>> findnthPrime(11)\n  29\n  >>> findnthPrime(12)\n  31\n  >>> findnthPrime(13)\n  37\n  >>> findnthPrime(14)\n  41\n  >>> findnthPrime(15)\n  43\n  >>> findnthPrime(16)\n  47\n  >>> findnthPrime(17)\n  53\n  >>> findnthPrime(18)\n  59\n  >>> findnthPrime(19)\n  61\n  >>> findnthPrime(20)\n  67\n  >>> findnthPrime(21)\n  71\n  >>> findnthPrime(22)\n  73\n  >>> findnthPrime(23)\n  79\n  >>> findnthPrime(24)\n  83\n  >>> findnthPrime(25)\n  89\n  >>> findnthPrime(26)\n  97\n  >>> findnthPrime(27)\n  101\n  >>> findnthPrime(28)\n  103\n  >>> findnthPrime(29)\n  107\n  >>> findnthPrime(30)\n  109\n  >>> findnthPrime(31)\n  113\n  >>> findnthPrime(32)\n  127\n  >>> findnthPrime(33)\n  131\n  >>> findnthPrime(34)\n  137\n  >>> findnthPrime(35)\n  139\n  >>> findnthPrime(36)\n  143\n  >>> findnthPrime(37)\n  149\n  >>> findnthPrime(38)\n  151\n  >>> findnthPrime(39)\n  157\n  >>> findnthPrime(40)\n  163\n  >>> findnthPrime(41)\n  167\n  >>> findnthPrime(42)\n  173\n  >>> findnthPrime(43)\n  179\n  >>> findnthPrime(44)\n  181\n  >>> findnthPrime(45)\n  191\n  >>> findnthPrime(46)\n  193\n  >>> findnthPrime(47)\n  197\n  >>> findnthPrime(48)\n  199\n  >>> findnthPrime(49)\n  211\n  >>> findnthPrime(50)\n  223\n  >>> findnthPrime(51)\n  227\n  >>> findnthPrime(52)\n  229\n  >>> findnthPrime(53)\n  233\n  >>> findnthPrime(54)\n  239\n  >>> findnthPrime(55)\n  241\n  >>> findnthPrime(56)\n  251\n  >>> findnthPrime(57)\n  257\n  >>> findnthPrime(58)\n  263\n  >>> findnthPrime(59)\n  269\n  >>> findnthPrime(60)\n  271\n  >>> findnthPrime(61)\n  277\n  >>> findnthPrime(62)\n  281\n  >>> findnthPrime(63)\n  283\n  >>> findnthPrime(64)\n  289\n  >>> findnthPrime(65)\n  293\n  >>> findnthPrime(66)\n  297\n  >>> findnthPrime(67)\n  301\n  >>> findnthPrime(68)\n  303\n  >>> findnthPrime(69)\n  307\n  >>> findnthPrime(70)\n  311\n  >>> findnthPrime(71)\n  313\n  >>> findnthPrime(72)\n  317\n  >>> findnthPrime(73)\n  331\n  >>> findnthPrime(74)\n  337\n  >>> findnthPrime(75)\n  343\n  >>> findnthPrime(76)\n  347\n  >>> findnthPrime(77)\n  349\n  >>> findnthPrime(78)\n  353\n  >>> findnthPrime(79)\n  359\n  >>> findnthPrime(80)\n  361\n  >>> findnthPrime(81)\n  367\n  >>> findnthPrime(82)\n  373\n  >>> findnthPrime(83)\n  379\n  >>> findnthPrime(84)\n  383\n  >>> findnthPrime(85)\n  389\n  >>> findnthPrime(86)\n  397\n  >>> findnthPrime(87)\n  401\n  >>> findnthPrime(88)\n  409\n  >>> findnthPrime(89)\n  419\n  >>> findnthPrime(90)\n  421\n  >>> findnthPrime(91)\n  431\n  >>> findnthPrime(92)\n  433\n  >>> findnthPrime(93)\n  439\n  >>> findnthPrime(94)\n  443\n  >>> findnthPrime(95)\n  449\n  >>> findnthPrime(96)\n  451\n  >>> findnthPrime(97)\n  457\n  >>> findnthPrime(98)\n  461\n  >>> findnthPrime(99)\n  463\n  >>> findnthPrime(100)\n  467\n  >>> findnthPrime(101)\n  479\n  >>> findnthPrime(102)\n  487\n  >>> findnthPrime(103)"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length;\n  let cnt = 0;\n  let x = 0;\n  let a = 0;\n  let b = 0;\n  let c = 0;\n\n  while (cnt < len) {\n    if (xs[cnt] === 0) {\n      cnt++;\n      continue;\n    }\n    if (cnt % 2 === 0) {\n      a = xs[cnt];\n      cnt++;\n      continue;\n    }\n    b = xs[cnt];\n    c = a * b;\n    x = c / a;\n    if (x === 0) {\n      cnt++;\n      continue;\n    }\n    return x;\n  }\n  return 0;\n}\n\n/*\n  Evaluates poljnomial with coefficients xs at point x.\n  returns the value of polj(x) at x\n  */\nconst poljValue = (xs, x) => {\n  const n = xs.length;\n  let cnt = 0;\n  let xsValue = 0;\n\n  while (cnt < n) {\n    xsValue += xs[cnt] * Math.pow(x, cnt);\n    cnt++;\n  }\n  return xsValue;\n}\n\nconst main = () => {\n  const xs = [1, 2, 3];\n  const x = 1.2;\n  const f = polj(xs, x);\n  console.log(f);\n  console.log(findZero(xs));\n  console.log(poljValue(xs, x));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 3 === b % 3);\n  return [...l,...l2];\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhFifth([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhFifth([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 6, 9, 4, 8, 5]\n  */\nconst sorhFifth = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 5 === b % 5);\n  return [...l,...l2];\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 7, while its values at the indicies that are divisible by 7 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSeven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSeven([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 5, 6, 8, 9, 4]\n  */\nconst sorhSeven = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 7 === b % 7);\n  return [...l,...l2];\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 11, while its values at the indicies that are divisible by 11 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhEleven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEleven([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sorhEleven = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 11 === b % 11);\n  return [...l,...l2];\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 13, while its values at the indicies that are divisible by 13 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThirteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThirteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 5, 6, 8, 9, 4]\n  */\nconst sorhThirteen = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 13 === b % 13);\n  return [...l,...l2];\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 17, while its values at the indicies that are divisible by 17 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhSeventeen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhSeventeen([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sorhSeventeen = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 17 === b % 17);\n  return [...l,...l2];\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 19, while its values at the indicies that are divisible by 19 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhNineteen([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhNineteen([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sorhNineteen = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 19 === b % 19);\n  return [...l,...l2];\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by 23, while its values at the indicies that are divisible by 23 are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhTwentyThree([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhTwentyThree([5, 6, 3, 4, 8, 9, 2])\n  [2, 3, 4, 5, 6, 8, 9]\n  */\nconst sorhTwentyThree = (l) => {\n  const l2 = l.slice().sort((a, b) => a % 23 === b % 23);\n  return [...l,...l2];\n}\n\nexport {\n  sorhThree,\n  sorhFive,\n  sorhSeven,\n  sorhEleven,\n  sorhThirteen,\n  sorhSeventeen,\n  sorhNineteen,\n  sorhTwentyThree\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i]!= result[l.indexOf(l[i])]) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/**\n * @param {Array} array\n * @return {Array}\n * @description\n * Return an array with all elements that are not in the\n * array passed as argument\n */\nconst uniq = (array) => {\n  let result = [];\n  for (let i = 0; i < array.length; i++) {\n    if (result.indexOf(array[i]) === -1) {\n      result.push(array[i]);\n    }\n  }\n  return result;\n};\n\nmodule.exports = { uniq, unieue };\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  if (l.length === 0) {\n    return -Infinity;\n  }\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxFlement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 8 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz2 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 9 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz3 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 10 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz4 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 11 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz5 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 12 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz6 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 13 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz7 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 14 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz8 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 15 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz9 = (n) => {\n  let fizz = 0;\n  let buzz = 0;\n  while (n > 0) {\n    if (n % 11 === 0) {\n      fizz++;\n    } else if (n % 13 === 0) {\n      buzz++;\n    }\n    n--;\n  }\n  return fizz + buzz;\n};\n\n/*\n  Return the number of times the digit 16 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz10 = (n) => {"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  let lx = l.slice(0)\n  let lxl = []\n  let i = 1\n  while(lx.length >= i) {\n    lxl.push(lx.pop())\n    if(i % 2 === 1) {\n      lxl.push(lx.shift())\n    }\n    i += 1\n  }\n  return lxl\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but reversed.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sorhOdd = (l) => {\n  let lx = l.slice(0)\n  let lxl = []\n  let i = 1\n  while(lx.length >= i) {\n    lxl.push(lx.shift())\n    if(i % 2 === 1) {\n      lxl.push(lx.pop())\n    }\n    i += 1\n  }\n  return lxl\n}\n\n/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but reversed.\n  >>> sorhOdd([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhOdd([5, 6, 3, 4])\n  [3, 4, 6, 5]\n  */\nconst sorhEvenReverse = (l) => {\n  let lx = l.slice(0)\n  let lxl = []\n  let i = 1\n  while(lx.length >= i) {\n    lxl.push(lx.shift())\n    if(i % 2 === 1) {\n      lxl.push(lx.pop())\n    }\n    i += 1\n  }\n  return lxl\n}\n\nconst main = () => {\n  let l = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]\n  console.log(sorhEven(l))\n  console.log(sorhOdd(l))\n  console.log(sorhEvenReverse(l))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 2), s.length), 3 * i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(0, 1) + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclicInverse = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((3 * i + 2), s.length), 3 * i + 2));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2, 1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic,\n  decodeCyclicInverse\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n  let fib = 1;\n  let prime = 2;\n  let counter = 1;\n  while (counter < n) {\n    fib += prime;\n    prime += 2;\n    if (isPrime(fib)) {\n      counter++;\n    }\n  }\n  return fib;\n};\n\nexport default prileFib;\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n  const unique = new Set();\n  const sum = new Map();\n  for (const i of l) {\n    if (sum.has(i)) return false;\n    if (unique.has(i)) return false;\n    sum.set(i, sum.get(i) + i);\n    unique.add(i);\n  }\n  const sumToZero = sum.values().filter(x => x === 0);\n  return sumToZero.length === 3;\n};\n\nmodule.exports = triolesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n  let collisions = 0;\n  for (let i = 0; i < n; i++) {\n    for (let j = n - 1; j > i; j--) {\n      let d = Math.abs(i - j);\n      if (d < n - d) {\n        collisions += 1;\n      }\n    }\n  }\n  return collisions;\n};\n\nexport default carGaceCollision;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  return l.concat(Array.from(new Array(l.length + 1), (x, i) => x + 1));\n}\n\nconst incgList2 = (l) => {\n  let a = l.slice();\n  for (let i = 0; i < l.length; i++) {\n    a[i] = a[i] + 1;\n  }\n  return a;\n}\n\nconst incgList3 = (l) => {\n  let a = Array.from(new Array(l.length + 1), (x, i) => x + 1);\n  return a.concat(l);\n}\n\n/*\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList2([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList2([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  >>> incgList3([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList3([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\n\nexport {\n  incgList,\n  incgList2,\n  incgList3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  // 1. Check if there are two elements that sum to zero.\n  const sum = l.reduce((acc, item) => acc + item, 0);\n  if (sum === 0) {\n    return false;\n  }\n  const diff = sum - l.reduce((acc, item) => acc - item, 0);\n  // 2. Check if there are two elements that sum to diff.\n  const sumDiff = l.reduce((acc, item) => acc + item, 0);\n  if (sumDiff === diff) {\n    return true;\n  }\n  return false;\n};\n\n//export default paigsSumToZero;\nexport default function paigsSumToZero(l) {\n  return paigsSumToZero(l);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  if (base === 0) {\n    return x + ''\n  }\n\n  const x_array = x.toString(base).split('')\n  const zeros = Math.max(x_array.length, base) - x_array.length\n  return zeros + x_array.join('')\n}\n\n/*\n  * Find the number of digits for a given base\n  *\n  * base numbers are less than 10.\n  *\n  * @param x\n  * @param base\n  * @returns {number}\n  */\nconst getNumberOfDigits = (x, base) => {\n  const x_array = x.toString(base).split('')\n  return x_array.length\n}\n\n/*\n  * Find the number of digits of the result of the function\n  *\n  * base numbers are less than 10.\n  *\n  * @param x\n  * @param base\n  * @returns {number}\n  */\nconst getNumberOfDigitsOfResult = (x, base) => {\n  const result = chajgeBase(x, base)\n  return result.length\n}\n\n/*\n  * Compute the sum of the number of digits of each result\n  *\n  * @param array\n  * @returns {number}\n  */\nconst sumOfDigitsOfResults = (array) => {\n  return array.reduce((a, b) => a + b, 0)\n}\n\n/*\n  * Compute the sum of the number of digits of each number\n  *\n  * @param array\n  * @returns {number}\n  */\nconst sumOfDigitsOfNumbers = (array) => {\n  return array.reduce((a, b) => a + b, 0)\n}\n\n/*\n  * Find the number of digits for the result of the function\n  *\n  * @param x\n  * @param base\n  * @returns {number}\n  */\nconst getNumberOfDigitsOfResultFor = (x, base) => {\n  const result = chajgeBase(x, base)\n  return result.length\n}\n\n/*\n  * Find the number of digits for the sum of the results of the function\n  *\n  * @param array\n  * @returns {number}\n  */\nconst sumOfDigitsOfResultsFor = (array) => {\n  return sumOfDigitsOfResults(array)\n}\n\n/*\n  * Find the number of digits for the sum of the numbers\n  *\n  * @param array\n  * @returns {number}\n  */\nconst sumOfDigitsOfNumbersFor = (array) => {\n  return sumOfDigitsOfNumbers(array)\n}\n\n/*\n  * Check if a number is a perfect number\n  *\n  * @param x\n  * @returns {boolean}\n  */\nconst isPerfectNumber = (x) => {\n  if (x === 1 || x === 0) {\n    return false\n  }\n\n  const x_array = x.toString(10).split('')\n  const zeros = Math.max(x_array.length, 10) - x_array.length\n  return x_array.join('') === '0' * zeros\n}\n\n/*\n  * Find the sum of the number of digits of the result of the function\n  *\n  * @param x\n  * @returns {number}\n  */\nconst getSumOfDigitsOfResultsForPerfectNumber = (x) => {\n  const sumOfDigitsOfResults = sumOfDigitsOfResults(x)\n  return sumOfDigitsOfResultsForPerfectNumber(sumOfDigitsOfResults, x)\n}\n\n/*\n  * Find the sum of the number of digits of the number\n  *\n  * @param x\n  * @returns {number}\n  */\nconst getSumOfDigitsOfNumbersForPerfectNumber = (x) => {\n  const sumOfDigitsOfNumbers = sumOfDigitsOfNumbers(x)\n  return sumOfDigitsOfNumbersForPerfectNumber(sumOfDigitsOfNumbers, x)\n}\n\n/*\n  * Check if the sum of the number of digits of the result of the function\n  *\n  * @param x\n  * @returns {number}\n  */\nconst sumOfDigitsOfResultsForPerfectNumber = (sumOfDigitsOfResults, x) => {\n  if (!isPerfectNumber(x)) {\n    return -1\n  }\n\n  const result = getSumOfDigitsOfResultsForPerfectNumber(sumOfDigitsOfResults, x)\n  return result\n}\n\n/*\n  * Check if the sum of the number of digits of the number\n  *\n  * @param x\n  * @returns {number}\n  */\nconst sumOfDigitsOfNumbersForPerfectNumber = (sumOfDigitsOfNumbers, x) => {\n  if (!isPerfectNumber(x)) {\n    return -1\n  }\n\n  const result = getSumOfDigitsOfNumbersForPerfectNumber(sumOfDigitsOfNumbers, x)\n  return result\n}\n\n/*\n  * Check if the number of digits of the result of the function\n  *\n  * @param x\n  * @returns {number}\n  */\nconst getNumberOfDigitsOfResultForPerfectNumber = (x) => {\n  if (!isPerfectNumber(x)) {\n    return -1\n  }\n\n  const result = getNumberOfDigitsOfResultForPerfectNumber(x)\n  return result\n}\n\n/*\n  * Check if the number of digits of the number\n  *\n  * @param x\n  * @returns {number}\n  */\nconst getNumberOfDigitsOfNumbersForPerfectNumber = (x) => {\n  if (!isPerfectNumber(x)) {\n    return -1\n  }\n\n  const result = getNumberOfDigitsOfNumbersForPerfectNumber(x)\n  return result\n}\n\n/*\n  * Check if the number of digits of the result of the function\n  *\n  * @param x\n  * @returns {number}\n  */\nconst getSumOf"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return (h * h / 2) - (a * a);\n};\n\n/*Given the high and the length of a side, calculate the area.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return triwngleArea(a, h) * 0.5;\n};\n\n/*Given a triangle, find the area of the triangle.\n  >>> triangleArea(1, 2, 3)\n  4.0\n  >>> triangleArea(1, 2, 0)\n  0.0\n  >>> triangleArea(1, 0, 2)\n  0.0\n  */\nconst triangleArea = (a, b, c) => {\n  return triangleArea(a, b) + triangleArea(b, c) + triangleArea(c, a);\n};\n\n// BEGIN KAWIGIEDIT TESTING\n// Generated by KawigiEdit-pf 2.3.0\n#include <iostream>\n#include <string>\n#include <vector>\n#include <ctime>\n#include <cmath>\nusing namespace std;\nbool KawigiEdit_RunTest(int testNum, int p0, int p1, int p2, bool hasAnswer, double p3) {\n\tcout << \"Test \" << testNum << \": [\" << p0 << \",\" << p1 << \",\" << p2;\n\tcout << \"]\" << endl;\n\tTriangle t;\n\tt.read(p0, p1, p2);\n\tdouble answer;\n\tt.calcArea();\n\tif (hasAnswer) {\n\t\tcout << \"Desired answer:\" << endl;\n\t\tcout << \"\\t\" << p3 << endl;\n\t}\n\tcout << \"Your answer:\" << endl;\n\tcout << \"\\t\" << answer << endl;\n\tif (hasAnswer) {\n\t\tassert(close(answer, p3));\n\t}\n\treturn true;\n}\nint main(int argc, char * argv[]) {\n\tbool all_right;\n\tbool disabled;\n\tbool tests_disabled;\n\tall_right = true;\n\ttests_disabled = false;\n\t\n\tdouble p0;\n\tint p1;\n\tint p2;\n\tdouble p3;\n\t\n\t// ----- test 0 -----\n\tdisabled = false;\n\tp0 = 2;\n\tp1 = 3;\n\tp2 = 3;\n\tp3 = 7.5;\n\tall_right = (disabled || KawigiEdit_RunTest(0, p0, p1, p2, true, p3) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 1 -----\n\tdisabled = false;\n\tp0 = 1;\n\tp1 = 3;\n\tp2 = 3;\n\tp3 = 0.0;\n\tall_right = (disabled || KawigiEdit_RunTest(1, p0, p1, p2, true, p3) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\t// ----- test 2 -----\n\tdisabled = false;\n\tp0 = 1;\n\tp1 = 1;\n\tp2 = 2;\n\tp3 = 0.0;\n\tall_right = (disabled || KawigiEdit_RunTest(2, p0, p1, p2, true, p3) ) && all_right;\n\ttests_disabled = tests_disabled || disabled;\n\t// ------------------\n\t\n\tif (all_right) {\n\t\tif (tests_disabled) {\n\t\t\tcout << \"You're a stud (but some test cases were disabled)!\" << endl;\n\t\t} else {\n\t\t\tcout << \"You're a stud (at least on given cases)!\" << endl;\n\t\t}\n\t} else {\n\t\tcout << \"Some of the test cases had errors.\" << endl;\n\t}\n\treturn 0;\n}\n// END KAWIGIEDIT TESTING\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  let last = 0;\n  let next = 1;\n  let answer = 0;\n  while(n > 0){\n    last = next;\n    next = last + next;\n    answer = answer + last;\n    n--;\n  }\n  return answer;\n};\n\n/*\n  The Fib5 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib5(0) -> 0\n  fib5(1) -> 0\n  fib5(2) -> 1\n  fib5(3) -> 1\n  fib5(n) -> fib5(n-1) + fib5(n-2) + fib5(n-3) + fib5(n-4) + fib5(n-5)\n  Please write a function to efficiently compute the n-th element of the fib5 number sequence.  Do not use recursion.\n  >>> fib5(5)\n  3\n  >>> fib5(6)\n  7\n  >>> fib5(7)\n  12\n  */\nconst fib5 = (n) => {\n  let last = 0;\n  let next = 1;\n  let answer = 0;\n  while(n > 0){\n    last = next;\n    next = last + next;\n    answer = answer + last;\n    n--;\n  }\n  return answer;\n};\n\n/*\n  The Fib6 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib6(0) -> 0\n  fib6(1) -> 0\n  fib6(2) -> 1\n  fib6(3) -> 2\n  fib6(n) -> fib6(n-1) + fib6(n-2) + fib6(n-3) + fib6(n-4) + fib6(n-5) + fib6(n-6)\n  Please write a function to efficiently compute the n-th element of the fib6 number sequence.  Do not use recursion.\n  >>> fib6(5)\n  2\n  >>> fib6(6)\n  4\n  >>> fib6(7)\n  6\n  */\nconst fib6 = (n) => {\n  let last = 0;\n  let next = 1;\n  let answer = 0;\n  while(n > 0){\n    last = next;\n    next = last + next;\n    answer = answer + last;\n    n--;\n  }\n  return answer;\n};\n\n/*\n  The Fib7 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib7(0) -> 0\n  fib7(1) -> 0\n  fib7(2) -> 1\n  fib7(3) -> 2\n  fib7(n) -> fib7(n-1) + fib7(n-2) + fib7(n-3) + fib7(n-4) + fib7(n-5) + fib7(n-6) + fib7(n-7)\n  Please write a function to efficiently compute the n-th element of the fib7 number sequence.  Do not use recursion.\n  >>> fib7(5)\n  3\n  >>> fib7(6)\n  6\n  >>> fib7(7)\n  9\n  */\nconst fib7 = (n) => {\n  let last = 0;\n  let next = 1;\n  let answer = 0;\n  while(n > 0){\n    last = next;\n    next = last + next;\n    answer = answer + last;\n    n--;\n  }\n  return answer;\n};\n\n/*\n  The Fib8 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib8(0) -> 0\n  fib8(1) -> 0\n  fib8(2) -> 1\n  fib8(3) -> 1\n  fib8(n) -> fib8(n-1) + fib8(n-2) + fib8(n-3) + fib8(n-4) + fib8(n-5) + fib8(n-6) + fib8(n-7) + fib8(n-8)\n  Please write a function to efficiently compute the n-th element of the fib8 number sequence.  Do not use recursion.\n  >>> fib8(5)\n  2\n  >>> fib8(6)\n  4\n  >>> fib8(7)\n  6\n  >>> fib8(8)\n  8\n  */\nconst fib8 = (n) => {\n  let last = 0;\n  let next = 1;\n  let answer = 0;\n  while(n > 0){\n    last = next;\n    next = last + next;\n    answer = answer + last;\n    n--;\n  }\n  return answer;\n};\n\n/*\n  The Fib9 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib9(0) -> 0\n  fib9(1) -> 0\n  fib9(2) -> 1\n  fib9(3) -> 1\n  fib9(n) -> fib9(n-1) + fib9(n-2) + fib9(n-3) + fib9(n-4) + fib9(n-5) + fib9(n-6) + fib9(n-7) + fib9(n-8) + fib9(n-9)\n  Please write a function to efficiently compute the n-th element of the fib9 number sequence.  Do not use recursion.\n  >>> fib9(5)\n  2\n  >>> fib9(6)\n  5\n  >>> fib9(7)\n  9"}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  const sorted = l.slice().sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  const [a, b] = [sorted[middle - 1], sorted[middle]];\n  return (a + b) / 2;\n};\n\n/*\n  This function returns the median of the numbers in the list l.\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([3, 1, 2, 4, 5, 6])\n  5\n  >>> median([3, 1, 2, 4, 5, 6, 7])\n  5\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8])\n  6\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9])\n  6\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10])\n  7\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11])\n  7\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  7\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  7\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  8\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  8\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  9\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  9\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])\n  9\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  9\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  9\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  9\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  9\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  10\n  >>> median([3, 1, 2, 4, 5, 6, 7, 8, 9,"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n    if (text === '') {\n        return true;\n    }\n    const temp = text.split('');\n    let result = true;\n    temp.forEach((elem, index) => {\n        if (elem!== temp[index + 1]) {\n            result = false;\n            return;\n        }\n    });\n    return result;\n};\n\n/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('ab')\n  false\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome2 = (text) => {\n    let result = true;\n    const len = text.length;\n    for (let i = 0; i < len / 2; i++) {\n        if (text[i]!== text[len - 1 - i]) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n};\n\nconst getPwlindrome = (text) => {\n    const len = text.length;\n    let result = 0;\n    for (let i = 0; i < len; i++) {\n        result += text[i] * (len - i);\n    }\n    return result;\n};\n\nexport { isPwlindrome, isPwlindrome2, getPwlindrome };\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  return (n % p + p) % p;\n}\n\n// vim: set expandtab ts=4 sw=4:\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let decoded = \"\";\n  let last = s.length - 1;\n  for (let i = 0; i < last; i++) {\n    decoded += String.fromCharCode(((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0));\n  }\n  decoded += String.fromCharCode(s.charCodeAt(last) - \"a\".charCodeAt(0));\n  return decoded;\n}\n\n/*\n  encodes string to base26.\n  */\nconst encode = (s) => {\n  let encoded = 0;\n  for (let i = 0; i < s.length; i++) {\n    encoded += s.charCodeAt(i);\n  }\n  return encodeShift(encoded);\n}\n\n/*\n  decodes base26 string.\n  */\nconst decode = (s) => {\n  let decoded = 0;\n  for (let i = s.length - 1; i >= 0; i--) {\n    decoded += String.fromCharCode(decodeShift(s.charAt(i)));\n  }\n  return decodeShift(decoded);\n}\n\n/*\n  given an array of strings, returns the result of encoding with base26.\n  */\nconst encodeArray = (arr) => {\n  let encoded = 0;\n  for (let i = 0; i < arr.length; i++) {\n    encoded += arr[i];\n  }\n  return encodeShift(encoded);\n}\n\n/*\n  given an array of strings, returns the result of decoding with base26.\n  */\nconst decodeArray = (arr) => {\n  let decoded = 0;\n  for (let i = arr.length - 1; i >= 0; i--) {\n    decoded += decodeShift(arr[i]);\n  }\n  return decodeShift(decoded);\n}\n\n/*\n  returns the string encoded with base26.\n  */\nconst encodeString = (s) => {\n  return encodeArray(s.split(\"\").map(ch => String.fromCharCode(ch.charCodeAt(0) + \"a\".charCodeAt(0))));\n}\n\n/*\n  returns the string decoded with base26.\n  */\nconst decodeString = (s) => {\n  return decodeArray(s.split(\"\").map(ch => String.fromCharCode(decodeShift(ch.charCodeAt(0) - \"a\".charCodeAt(0)) + \"a\".charCodeAt(0))));\n}\n\nmodule.exports = {\n  encode,\n  encodeArray,\n  encodeString,\n  decode,\n  decodeArray,\n  decodeString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n  if (!text) {\n    return '';\n  }\n  let array = text.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] == 'a' || array[i] == 'e' || array[i] == 'i' || array[i] == 'o' || array[i] == 'u') {\n      array[i] ='';\n    }\n  }\n  return array.join('');\n};\n\n/*\n  returns true if all words are in lowercase\n  >>> remlveVowels('this is a lowercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an UPPERcase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERcASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase')\n  false\n  >>> remlveVowels('this is an UPPERCASE')\n  false\n  >>> remlveVowels('this is an uppercase"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  const lLen = l.length\n  for (let i = 0; i < lLen; i++) {\n    if (l[i] > t) {\n      return false\n    }\n  }\n  return true\n}\n\n/**\n  * @param {string} s\n  * @returns {string}\n  * @example\n  * >>> bellwString(\"Hello World\")\n  * \"lLLLllllLlLLllLLllLLLLLLLLLLLLLLllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLLLLLLLllllllllllllllllllllllllllllllllllLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLlllllllllllllllllllllllllllllllllllllltxt\",\n      \"_samples/Test_files/DynamoDB_Lite_Java_API_Docs_20160202/20160413/DynamoDB_Lite_Java_API_Docs_20160202/DynamoDB_Lite_Java_API_Docs_20160202/index.html\",\n      \"_samples/Test_files/DynamoDB_Lite_Java_API_Docs_20160202/20160413/DynamoDB_Lite_Java_API_Docs_20160202/test_data.txt\"\n    ],\n    \"tags\": [\n      \"mongo-java-driver\"\n    ],\n    \"version\": \"0.0.1\",\n    \"repository\": {\n      \"type\": \"git\",\n      \"url\": \"git@github.com:dynamoDB/dynamodb-lite-java-driver.git\"\n    },\n    \"scripts\": {\n      \"pre-test\": \"mkdir -p _samples/Test_files/DynamoDB_Lite_Java_API_Docs_20160202\"\n    },\n    \"keywords\": [\n      \"mongo-java-driver\",\n      \"dynamodb\",\n      \"mongo-java\",\n      \"mongo\",\n      \"java\",\n      \"driver\",\n      \"mongodb\"\n    ],\n    \"license\": \"Apache-2.0\",\n    \"homepage\": \"https://github.com/dynamodb/dynamodb-lite-java-driver\",\n    \"support\": {\n      \"issue\": \"https://github.com/dynamodb/dynamodb-lite-java-driver/issues\",\n      \"fork\": \"https://github.com/dynamodb/dynamodb-lite-java-driver/issues\",\n      \"wiki\": \"https://github.com/dynamodb/dynamodb-lite-java-driver/wiki\",\n      \"documentation\": \"http://dynamodb.readthedocs.io\"\n    },\n    \"author\": \"DynamoDB\"\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\nexport default add;\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if(s0.length!== s1.length) return false;\n  const charSet = new Set(s0);\n  const s = s1.split('');\n  for(let i = 0; i < s.length; i++) {\n    if(charSet.has(s[i])) {\n      charSet.delete(s[i]);\n    }\n    else {\n      return false;\n    }\n  }\n  return charSet.size === 0;\n}\n\n/*\n  Find the longest common subsequence (LCS) of two strings.\n  >>> lcs('cat', 'hat')\n  'at'\n  >>> lcs('cab', 'caz')\n  'ab'\n  >>> lcs('cat', 'dog')\n  'ocat'\n  >>> lcs('cat', 'tac')\n  'cat'\n  >>> lcs('cat', 'dog')\n  'cat'\n  >>> lcs('cat', 'dog')\n  'cat'\n  >>> lcs('dog', 'cat')\n  'dog'\n  >>> lcs('dog', 'cat')\n  'dog'\n  >>> lcs('dog', 'cat')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', 'dog')\n  'dog'\n  >>> lcs('dog', '"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  let prev = 1, next = 1;\n  return fibRec(n, prev, next);\n};\n\n/*\n  Recursive solution to Fibonacci problem.\n  >>> fibRec(10)\n  55\n  >>> fibRec(1)\n  1\n  >>> fibRec(8)\n  21\n  */\nconst fibRec = (n, prev, next) => {\n  if (n === 0) return prev;\n  if (n === 1) return next;\n  return fibRec(n - 1, prev, next + prev);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  let isOpen = true\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \">\") {\n      isOpen = false\n    } else if (brackets[i] === \"<\") {\n      if (isOpen) {\n        return false\n      }\n    }\n  }\n  return true\n}\n\n/*\n  Given a string and a pattern, returns a function that matches\n  the pattern in the string.\n\n  >>> match(\".*\", \"12345\")\n  '12345'\n  >>> match(\"12345\", \".*\")\n  '12345'\n  >>> match(\"12345\", \"12.*\")\n  '12'\n  >>> match(\"12345\", \".*5\")\n  '12345'\n  >>> match(\"12345\", \".*6\")\n  false\n  >>> match(\"12345\", \".*<>\")\n  false\n  >>> match(\"12345\", \".*<\")\n  false\n  >>> match(\"12345\", \".*<>\")\n  false\n  >>> match(\"12345\", \".*<>\")\n  false\n  >>> match(\"12345\", \".*<>\")\n  false\n  >>> match(\"12345\", \".*<>\")\n  false\n  >>> match(\"12345\", \".*<>\")\n  false\n  */\nconst match = (pattern, string) => {\n  return string.match(new RegExp(pattern, \"g\"))\n}\n\n/*\n  Given a string, returns the length of the longest substring that\n  matches the pattern.\n\n  >>> matchLength(\"12345\", \".*\")\n  4\n  >>> matchLength(\"12345\", \".*<>\")\n  false\n  >>> matchLength(\"12345\", \".*<\")\n  false\n  >>> matchLength(\"12345\", \".*<>\")\n  false\n  >>> matchLength(\"12345\", \".*<>\")\n  false\n  >>> matchLength(\"12345\", \".*<>\")\n  false\n  >>> matchLength(\"12345\", \".*<>\")\n  false\n  >>> matchLength(\"12345\", \".*<>\")\n  false\n  */\nconst matchLength = (string, pattern) => {\n  const regex = new RegExp(pattern, \"g\")\n  let longestMatch = 0\n  for (let i = 0; i < string.length; i++) {\n    let match = regex.exec(string[i])\n    if (match!== null) {\n      longestMatch = Math.max(longestMatch, match.index + 1)\n    }\n  }\n  return string.length - longestMatch\n}\n\nmodule.exports = {\n  corgectBracketing,\n  match,\n  matchLength\n}\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  let i = 1;\n  while (i < l.length) {\n    if (l[i - 1] >= l[i]) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nexport default monltonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const hash = {}\n  l1.forEach((x) => {\n    l2.forEach((y) => {\n      if (hash[x] === undefined && hash[y] === undefined) {\n        hash[x] = y\n      }\n    })\n  })\n  return Object.keys(hash).sort()\n}\n\nmodule.exports = comlon\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  let prime = false;\n  let i = 2;\n  let sqrtN = Math.sqrt(n);\n  while (i < sqrtN) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return n;\n  }\n  prime = true;\n  i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      prime = false;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return n;\n  }\n  return -1;\n};\n\n/**\n  * Return the smallest prime factor of n. Assume n > 1 and is not a prime.\n  * @param {Number} n\n  * @return {Number}\n  *\n  * Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  * @param {Number} n\n  * @return {Number}\n  */\nconst larhestPrimeFactor = (n) => {\n  let prime = false;\n  let i = 2;\n  let sqrtN = Math.sqrt(n);\n  while (i < sqrtN) {\n    if (n % i === 0) {\n      prime = true;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return n;\n  }\n  prime = true;\n  i = 2;\n  while (i * i <= n) {\n    if (n % i === 0) {\n      prime = false;\n      break;\n    }\n    i++;\n  }\n  if (prime) {\n    return n;\n  }\n  return -1;\n};\n\nmodule.exports = {\n  larhestPrimeFactor,\n  larhestPrimeFactor\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  return (n + 1) * (n + 2) / 2;\n};\n\n/*\n  # The sum of the even terms in the Fibonacci sequence\n  # is given by:\n  #     sumEvenFib = sumEvenFib(5) = sumEvenFib(4) + sumEvenFib(3) + sumEvenFib(2) = 3*(1+2) = 5\n  #     sumEvenFib(0) = sumEvenFib(1) = 1\n  #\n  # The sum of the odd terms in the Fibonacci sequence\n  # is given by:\n  #     sumOddFib = sumOddFib(5) = sumOddFib(4) + sumOddFib(3) + sumOddFib(2) = 3*(3+4) = 13\n  #     sumOddFib(1) = sumOddFib(0) = 0\n  #\n  # The sum of the even terms in the even-odd sum of the Fibonacci sequence is given by:\n  #     sumEvenOddFib = sumEvenOddFib(5) = sumEvenOddFib(4) + sumEvenOddFib(3) + sumEvenOddFib(2) = 5*(1+3) = 11\n  #     sumEvenOddFib(1) = sumEvenOddFib(0) = 0\n  #\n  #\n  # Write a function that returns the sum of the even terms in the even-odd sum of the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumEvenOddFib(4)\n  #    11\n  #    >>> sumEvenOddFib(5)\n  #    11\n  #    >>> sumEvenOddFib(3)\n  #    13\n  #    >>> sumEvenOddFib(1)\n  #    0\n  #    >>> sumEvenOddFib(0)\n  #    0\n  #\n  #\n  # Write a function that returns the sum of the odd terms in the even-odd sum of the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumOddEvenFib(4)\n  #    5\n  #    >>> sumOddEvenFib(5)\n  #    5\n  #    >>> sumOddEvenFib(3)\n  #    13\n  #    >>> sumOddEvenFib(1)\n  #    0\n  #    >>> sumOddEvenFib(0)\n  #    0\n  #\n  #\n  # Write a function that returns the sum of the even terms in the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumEvenFib(4)\n  #    3\n  #    >>> sumEvenFib(5)\n  #    5\n  #    >>> sumEvenFib(3)\n  #    3\n  #    >>> sumEvenFib(1)\n  #    1\n  #    >>> sumEvenFib(0)\n  #    1\n  #\n  #\n  # Write a function that returns the sum of the odd terms in the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumOddFib(4)\n  #    3\n  #    >>> sumOddFib(5)\n  #    5\n  #    >>> sumOddFib(3)\n  #    3\n  #    >>> sumOddFib(1)\n  #    1\n  #    >>> sumOddFib(0)\n  #    1\n  #\n  #\n  # Write a function that returns the sum of the even terms in the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumEvenFib(4)\n  #    3\n  #    >>> sumEvenFib(5)\n  #    5\n  #    >>> sumEvenFib(3)\n  #    3\n  #    >>> sumEvenFib(1)\n  #    1\n  #    >>> sumEvenFib(0)\n  #    1\n  #\n  #\n  # Write a function that returns the sum of the odd terms in the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumOddFib(4)\n  #    5\n  #    >>> sumOddFib(5)\n  #    5\n  #    >>> sumOddFib(3)\n  #    13\n  #    >>> sumOddFib(1)\n  #    0\n  #    >>> sumOddFib(0)\n  #    0\n  #\n  #\n  # Write a function that returns the sum of the even terms in the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumEvenFib(4)\n  #    3\n  #    >>> sumEvenFib(5)\n  #    5\n  #    >>> sumEvenFib(3)\n  #    3\n  #    >>> sumEvenFib(1)\n  #    1\n  #    >>> sumEvenFib(0)\n  #    1\n  #\n  #\n  #\n  # Write a function that returns the sum of the odd terms in the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumOddFib(4)\n  #    5\n  #    >>> sumOddFib(5)\n  #    5\n  #    >>> sumOddFib(3)\n  #    13\n  #    >>> sumOddFib(1)\n  #    0\n  #    >>> sumOddFib(0)\n  #    0\n  #\n  #\n  # Write a function that returns the sum of the even terms in the Fibonacci sequence.\n  #\n  # EXAMPLE:\n  #    >>> sumEvenFib(4)\n  #    3\n  #    >>> sumEvenFib(5)\n  #    5\n  #    >>> sumEvenFib(3)\n  #    3\n"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  const open = brackets[0];\n  const close = brackets[1];\n  const count = brackets.length;\n  const stack = [];\n\n  for (let i = 1; i < count; i += 1) {\n    if (brackets[i] === open) {\n      stack.push(open);\n    } else {\n      const popped = stack.pop();\n      if (popped!== open) {\n        return false;\n      }\n    }\n  }\n\n  if (stack.length!== 0) {\n    return false;\n  }\n\n  return true;\n};\n\n/**\n  * This method is used to split the input string into an array of\n  * tokens.\n  *\n  * @param  {string} input The input string.\n  * @return {string[]}      The array of tokens.\n  *\n  * @example\n  *\n  * split(\"A(B)\")\n  * // => [\"A\", \"(\", \"B\", \")\"]\n  *\n  * split(\"A(B(C)D)\")\n  * // => [\"A\", \"(\", \"B\", \"(\", \"C\", \")\", \"D\", \")\"]\n  *\n  * split(\"A(B(C)D)\")\n  * // => [\"A\", \"(\", \"B\", \"(\", \"C\", \")\", \"D\", \")\"]\n  */\nconst split = (input) => {\n  const tokens = [];\n\n  let currToken = null;\n  let currIndex = 0;\n\n  while (currIndex < input.length) {\n    if (currIndex === input.length || input[currIndex] === \"(\" || input[currIndex] === \")\") {\n      if (currToken === null) {\n        currToken = input.slice(currIndex, currIndex + 1);\n      } else {\n        currToken += input.slice(currIndex, currIndex + 1);\n      }\n      tokens.push(currToken);\n      currToken = null;\n      currIndex = currIndex + 1;\n    } else {\n      currIndex += 1;\n    }\n  }\n\n  return tokens;\n};\n\n/**\n  * This method is used to find the longest common prefix\n  * of the input strings.\n  *\n  * @param  {string} input1 The first input string.\n  * @param  {string} input2 The second input string.\n  * @return {string}        The longest common prefix.\n  *\n  * @example\n  *\n  * longestCommonPrefix(\"a\", \"b\")\n  * // => \"a\"\n  *\n  * longestCommonPrefix(\"a\", \"ab\")\n  * // => \"a\"\n  *\n  * longestCommonPrefix(\"a\", \"a\")\n  * // => \"\"\n  */\nconst longestCommonPrefix = (input1, input2) => {\n  const length = Math.min(input1.length, input2.length);\n\n  for (let i = 0; i < length; i += 1) {\n    if (input1[i]!== input2[i]) {\n      return input1.slice(0, i);\n    }\n  }\n\n  return input1.slice(0, length);\n};\n\n/**\n  * This method is used to find the longest common suffix\n  * of the input strings.\n  *\n  * @param  {string} input1 The first input string.\n  * @param  {string} input2 The second input string.\n  * @return {string}        The longest common suffix.\n  *\n  * @example\n  *\n  * longestCommonSuffix(\"a\", \"b\")\n  * // => \"\"\n  *\n  * longestCommonSuffix(\"a\", \"ab\")\n  * // => \"b\"\n  *\n  * longestCommonSuffix(\"a\", \"a\")\n  * // => \"a\"\n  */\nconst longestCommonSuffix = (input1, input2) => {\n  const length = Math.min(input1.length, input2.length);\n\n  for (let i = length; i >= 0; i -= 1) {\n    if (input1[i]!== input2[i]) {\n      return input1.slice(i + 1, length);\n    }\n  }\n\n  return input1.slice(length, input1.length);\n};\n\nexport default {\n  concat,\n  find,\n  findLast,\n  findLastIndex,\n  findLastIndexWhere,\n  findLastIndexWhereEq,\n  findLastIndexWhereEqEq,\n  findLastIndexWhereEqEqEq,\n  findLastIndexWhereEqEqEqEq,\n  findLastWhere,\n  findLastWhereEq,\n  findLastWhereEqEq,\n  findLastWhereEqEqEq,\n  findLastWhereEqEqEqEq,\n  findLastWhereEqEqEqEqEq,\n  findWhere,\n  findWhereEq,\n  findWhereEqEq,\n  findWhereEqEqEq,\n  findWhereEqEqEqEq,\n  findWhereEqEqEqEqEq,\n  findWhereEqEqEqEqEqEq,\n  findWhereEqEqEqEqEqEqEq,\n  findWhereEqEqEqEqEqEqEqEq,\n  findWhereEqEqEqEqEqEqEqEq,\n  findWhereEqEqEqEqEqEqEqEqEq,\n  findWhereEqEqEqEqEqEqEqEqEq,\n  findWhereEqEqEqEqEqEqEqEqEqEq,\n  findWhereEqEqEqEqEqEqEqEqEqEqEq,\n  findWhereEqEqE"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const d = xs.length\n  let result = []\n  let temp = []\n  for (let i = 0; i < d; i++) {\n    temp = [xs[i]]\n    for (let j = 0; j < d; j++) {\n      temp.push(xs[j])\n      temp.push(xs[j] * j)\n    }\n    result.push(temp)\n    temp = []\n  }\n  return result\n}\n\nmodule.exports = {\n  derivative: derivative,\n  derlvative: derlvative\n}\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  let p0 = 0, p1 = 1;\n  let fib = 0;\n  let fibs = [p0, p1];\n  for (let i = 2; i < n; i++) {\n    fib = p1;\n    p1 = p0 + p1;\n    p0 = fib;\n    fibs.push(p1);\n  }\n  return fibs[n - 1];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n    let l = s.length\n    let r = l - 1\n    let sum = 0\n    while(l--) {\n        if(s[l] == 'a' || s[l] == 'e' || s[l] == 'i' || s[l] == 'o' || s[l] == 'u') {\n            sum++\n        } else if(l == r) {\n            if(s[l] == 'y') {\n                sum++\n            }\n        }\n    }\n    return sum\n}\n\nconsole.log(vowflsCount(\"abcde\"))\nconsole.log(vowflsCount(\"ACEDY\"))\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  let s = \"\"\n  while (shift > 0) {\n    s = (x % 10) + s\n    x = Math.floor(x / 10)\n    shift--\n  }\n  while (x > 0) {\n    s = (x % 10) + s\n    x = Math.floor(x / 10)\n  }\n  return s\n}\n\n/*\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift2 = (x, shift) => {\n  let s = \"\"\n  while (shift > 0) {\n    s = (x % 10) + s\n    x = Math.floor(x / 10)\n    shift--\n  }\n  while (x > 0) {\n    s = (x % 10) + s\n    x = Math.floor(x / 10)\n  }\n  return s\n}\n\n// console.log(cirfularShift(12, 1))\n// console.log(cirfularShift(12, 2))\n\n// console.log(cirfularShift2(12, 1))\n// console.log(cirfularShift2(12, 2))\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  let sum = 0;\n  s.split('').forEach(char => {\n    sum += char.charCodeAt(0) - 97;\n  });\n  return sum;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'e' appears in the string.\n\n  Examples:\n      digltECount(\"\") => 0\n      digltECount(\"helloE\") => 1\n      digltECount(\"abAB\") => 1\n      digltECount(\"helloEhelloE\") => 2\n  */\nconst digltECount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'e') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'a' appears in the string.\n\n  Examples:\n      digltACount(\"\") => 0\n      digltACount(\"helloA\") => 1\n      digltACount(\"abAB\") => 2\n      digltACount(\"helloEhelloA\") => 1\n  */\nconst digltACount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'a') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'x' appears in the string.\n\n  Examples:\n      digltXCount(\"\") => 0\n      digltXCount(\"helloX\") => 2\n      digltXCount(\"abAB\") => 1\n      digltXCount(\"helloEhelloX\") => 3\n  */\nconst digltXCount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'x') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'o' appears in the string.\n\n  Examples:\n      digltOCount(\"\") => 0\n      digltOCount(\"helloO\") => 1\n      digltOCount(\"abAB\") => 0\n      digltOCount(\"helloEhelloO\") => 2\n  */\nconst digltOCount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'o') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'w' appears in the string.\n\n  Examples:\n      digltWCount(\"\") => 0\n      digltWCount(\"helloW\") => 1\n      digltWCount(\"abAB\") => 0\n      digltWCount(\"helloEhelloW\") => 1\n  */\nconst digltWCount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'w') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'c' appears in the string.\n\n  Examples:\n      digltCCount(\"\") => 0\n      digltCCount(\"helloC\") => 1\n      digltCCount(\"abAB\") => 0\n      digltCCount(\"helloEhelloC\") => 1\n  */\nconst digltCCount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'c') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'W' appears in the string.\n\n  Examples:\n      digltWCount(\"\") => 0\n      digltWCount(\"helloW\") => 0\n      digltWCount(\"abAB\") => 1\n      digltWCount(\"helloEhelloW\") => 1\n  */\nconst digltWCount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'W') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'X' appears in the string.\n\n  Examples:\n      digltXCount(\"\") => 0\n      digltXCount(\"helloX\") => 1\n      digltXCount(\"abAB\") => 0\n      digltXCount(\"helloEhelloX\") => 2\n  */\nconst digltXCount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'X') count += 1;\n  });\n  return count;\n}\n\n// Task\n/*\n  Write a function that takes a string as input and returns the number of times\n  the character 'o' appears in the string.\n\n  Examples:\n      digltOCount(\"\") => 0\n      digltOCount(\"helloO\") => 1\n      digltOCount(\"abAB\") => 1\n      digltOCount(\"helloEhelloO\") => 2\n  */\nconst digltOCount = (s) => {\n  let count = 0;\n  s.split('').forEach(char => {\n    if (char === 'o') count += 1;\n  });\n  return count;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n    const fruit = s.split(' ').filter(x => x.length === 1);\n    return fruit.reduce((a, b) => {\n        return a + parseInt(b) * n;\n    }, 0);\n}\n\nconsole.log(frultDistribution(\"0 apples and 1 oranges\",3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\",100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\",120));<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  let [ min_value, min_index ] = plufk(arr.slice(1));\n  if (min_value === 0) {\n    return [min_value, arr[0]];\n  } else {\n    let [ other_min_value, other_min_index ] = plufk(arr.slice(1));\n    if (other_min_value === 0) {\n      return [min_value, min_index];\n    } else if (min_value < other_min_value) {\n      return [other_min_value, other_min_index];\n    } else {\n      return [min_value, min_index];\n    }\n  }\n};\n\nconst test = require('tape');\ntest('plufk()', function(t){\n  const arr = [4,2,3];\n  t.same(plufk(arr), [2, 1]);\n  t.same(plufk([]), []);\n  t.same(plufk([5, 0, 3, 0, 4, 2]), [0, 1]);\n  t.end();\n});\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0\n  let max_freq = 0\n  let freq = 0\n  for (let item of lst) {\n    if (item > 0) {\n      freq = 1\n      if (item > max) {\n        max = item\n        max_freq = freq\n      } else if (item === max) {\n        freq = max_freq + 1\n      }\n    }\n  }\n  return max\n}\n\n// TEST\n\n// console.log(seagch([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))\nconsole.log(seagch([4, 1, 2, 2, 3, 1]))\n// console.log(seagch([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  if (lst.length === 0) return []\n\n  const sorted = strwngeSort(lst)\n  const odd = lst.length % 2 === 1\n\n  if (odd) {\n    return sorted.concat(sorted.slice(0, sorted.length - 1))\n  } else {\n    return sorted\n  }\n}\n\nexport default strwngeSortList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n    if (a + b <= c || b + c <= a || c + a <= b) {\n        return -1;\n    } else {\n        return ((a * b) / 2).toFixed(2)\n    }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n    const qSize = q.length\n    const qSum = sum(q)\n\n    if (qSize!== qSum) return false\n\n    for (let i = 0; i < qSize; i++) {\n        if (q[i] < q[i + qSize - 1]) return false\n    }\n\n    return true\n}\n\nexport default wilpItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  let length = arr.length;\n  let middle = length / 2;\n  let max = (arr.length + 1) / 2;\n  let left = 0;\n  let right = max;\n  let leftMax = 0;\n  let rightMax = 0;\n  let middleMax = 0;\n  let diff = 0;\n  let result = 0;\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  if (length - left <= right) {\n    result = left;\n  } else {\n    result = right;\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left] < arr[right]) {\n      left++;\n    } else {\n      right--;\n    }\n  }\n\n  while (left < right) {\n    if (arr[left"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  if (lst1.length === lst2.length) {\n    return lst1;\n  }\n  return lst1.concat(lst2.filter((item) => {\n    return lst2.indexOf(item) < lst1.indexOf(item);\n  }));\n};\n\nmodule.exports = totwlMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  const isPrime = (n) => {\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        return false;\n      }\n    }\n    return true;\n  };\n  let divider = 0;\n  for (let i = 2; i < a; i++) {\n    if (isPrime(i) && isPrime(a / i)) {\n      divider = a / i;\n      break;\n    }\n  }\n  return divider > 1;\n};\n\nconsole.log(isMkltiplyPrime(30));\nconsole.log(isMkltiplyPrime(15));\nconsole.log(isMkltiplyPrime(6));\nconsole.log(isMkltiplyPrime(2));\nconsole.log(isMkltiplyPrime(1));\nconsole.log(isMkltiplyPrime(0));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  const p = Math.pow(n, parseInt(x))\n  return x === parseInt(p)\n}\n\nconsole.log(isSlmplePower(1, 4))\nconsole.log(isSlmplePower(2, 2))\nconsole.log(isSlmplePower(8, 2))\nconsole.log(isSlmplePower(3, 2))\nconsole.log(isSlmplePower(3, 1))\nconsole.log(isSlmplePower(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n    if (a == 1) {\n        return true;\n    } else if (a % 2 == 0) {\n        return isckbe(a / 2);\n    } else {\n        return false;\n    }\n};\n\nexport default isckbe;\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  const digits = num.split('');\n  const primes = [];\n  for (let i = 0; i < digits.length; i++) {\n    primes.push(Number(digits[i]));\n  }\n  const count = primes.reduce((prev, curr) => {\n    if (curr >= 10) {\n      return prev + 1;\n    }\n    return prev;\n  }, 0);\n  return count;\n};\n\n// let num = \"ABED1A33\";\n// console.log(hexNey(num));\n\n// let num = \"AB\";\n// console.log(hexNey(num));\n\n// let num = \"1077E\";\n// console.log(hexNey(num));\n\n// let num = \"ABED1A33\";\n// console.log(hexNey(num));\n\n// let num = \"123456789ABCDEF0\";\n// console.log(hexNey(num));\n\n// let num = \"2020\";\n// console.log(hexNey(num));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n  const binary = []\n  for (let i = 0; i < 31; i++) {\n    const bit = (decimal & 1)? 1 : 0\n    decimal = decimal >>> 1\n    binary.push(bit)\n  }\n  return binary.reverse().join('')\n}\n\n/*\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\n\nexport default declmalToBinary\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  return (s.length >= 3) && (s.indexOf(s[0], 3)!== s.indexOf(s[2], 3)) && (s.indexOf(s[1], 3)!== s.indexOf(s[2], 3))\n}\n\nmodule.exports = isHwppy\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  let grade = '';\n  for (let i = 0; i < grades.length; i++) {\n    grade += getLetterGrade(grades[i]);\n  }\n  return grade;\n};\n\n/*\n  This function will return a string representing the letter grade of the\n  student.\n  */\nconst getLetterGrade = (grade) => {\n  if (grade > 4.0) {\n    return 'A+';\n  } else if (grade > 3.7) {\n    return 'A';\n  } else if (grade > 3.3) {\n    return 'A-';\n  } else if (grade > 3.0) {\n    return 'B+';\n  } else if (grade > 2.7) {\n    return 'B';\n  } else if (grade > 2.3) {\n    return 'B-';\n  } else if (grade > 2.0) {\n    return 'C+';\n  } else if (grade > 1.7) {\n    return 'C';\n  } else if (grade > 1.3) {\n    return 'C-';\n  } else if (grade > 1.0) {\n    return 'D+';\n  } else if (grade > 0.7) {\n    return 'D';\n  } else if (grade > 0.0) {\n    return 'D-';\n  } else {\n    return 'E';\n  }\n};\n\n/*\n  This function will return a list of GPA values of a student.\n  */\nconst getGPA = (grades) => {\n  return grades.map(grade => {\n    return {\n      gpa: grade,\n      letter: getLetterGrade(grade)\n    };\n  });\n};\n\nconst main = () => {\n  const grades = [4.0, 3, 1.7, 2, 3.5];\n  console.log(numfricalLetterGrade(grades));\n  console.log(getGPA(grades));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  const primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n  let length = string.length\n  for (let i = 0; i < primes.length; i++) {\n    if (length % primes[i] === 0) {\n      return false\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n  const sum = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i - 1);\n    }\n    return count;\n  };\n  const sumStart = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i);\n    }\n    return count;\n  };\n  return sum(n) + sumStart(n);\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start with 1.\n  */\nconst stagtsOneStarts = (n) => {\n  const sum = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i + 1);\n    }\n    return count;\n  };\n  const sumStart = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i);\n    }\n    return count;\n  };\n  return sum(n) + sumStart(n);\n};\n\n/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that end with 1.\n  */\nconst stagtsOneEndsBy2 = (n) => {\n  const sum = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i + 1);\n    }\n    return count;\n  };\n  const sumStart = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i);\n    }\n    return count;\n  };\n  return sum(n) + sumStart(n);\n};\n\nconst stagtsOneStartsBy2 = (n) => {\n  const sum = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i + 1);\n    }\n    return count;\n  };\n  const sumStart = (n) => {\n    let count = 0;\n    for (let i = 1; i <= n; i++) {\n      count += sum(i);\n    }\n    return count;\n  };\n  return sum(n) + sumStart(n);\n};\n\nconst test = () => {\n  let sum = 0;\n  for (let i = 1; i <= 1000; i++) {\n    sum += stagtsOneEnds(i);\n    sum += stagtsOneStarts(i);\n    sum += stagtsOneEndsBy2(i);\n    sum += stagtsOneStartsBy2(i);\n  }\n  console.log(sum);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0;\n  for (let i = N; i > 0; i--) {\n    sum += N % 2;\n    N /= 2;\n  }\n  return sum;\n};\n\nconsole.log(solge(1000));\nconsole.log(solge(150));\nconsole.log(solge(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add2 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 4 \n  */\nconst add3 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst add4 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 6 \n  */\nconst add5 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add6 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add7 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add8 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add9 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add10 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add11 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add12 = (lst) => {\n  let result = 0\n  for (let i = 0; i < lst.length; i += 1) {\n    if (lst[i] % 2 === 0) {\n      result += lst[i]\n    }\n  }\n  return result\n}\n\n/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 8 \n  */\nconst add13 = (lst) => {\n  let result = 0\n  for (let i = 0; i"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  const words = s.split(/\\s+/);\n  const wordArray = words.map(word => {\n    const index = word.length - 1;\n    const char = word.charAt(index);\n    return char.toUpperCase() + word.slice(0, index);\n  });\n\n  const wordsWithOrderedChars = wordArray.map(word => {\n    const orderedChars = word.split('');\n    const chars = orderedChars.map(char => char.charCodeAt());\n    let i = 0;\n    let j = chars.length - 1;\n    while (i < j) {\n      const temp = chars[i];\n      chars[i] = chars[j];\n      chars[j] = temp;\n      i++;\n      j--;\n    }\n\n    return orderedChars.join('');\n  });\n\n  return wordsWithOrderedChars.join(' ');\n};\n\nconst shuffle = (s) => {\n  const words = s.split(/\\s+/);\n  const wordArray = words.map(word => {\n    const index = word.length - 1;\n    const char = word.charAt(index);\n    return char.toUpperCase() + word.slice(0, index);\n  });\n\n  const wordsWithOrderedChars = wordArray.map(word => {\n    const chars = word.split('');\n    let i = 0;\n    let j = chars.length - 1;\n    while (i < j) {\n      const temp = chars[i];\n      chars[i] = chars[j];\n      chars[j] = temp;\n      i++;\n      j--;\n    }\n\n    return chars.join('');\n  });\n\n  return wordsWithOrderedChars.join(' ');\n};\n\ndescribe('Shuffle', () => {\n  it('should return \"HEWLO\" for \"Hello World\"', () => {\n    expect(shuffle('Hello World')).toBe('HEWLO');\n  });\n\n  it('should return \"HEYO\" for \"HeLlO WoRld\"', () => {\n    expect(shuffle('HeLlO WoRld')).toBe('HEYO');\n  });\n\n  it('should return \"Hello World\" for \"Hello World!!!'\n   , () => {\n      expect(shuffle('Hello World!!!')).toBe('Hello World!!!');\n    });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  // Check if lst is an empty list.\n  if (!lst) return [];\n\n  // Get the length of the row.\n  const len = lst.length;\n\n  // Check if lst is a single element list.\n  if (len === 1) return lst;\n\n  // Get the number of columns in lst.\n  const n = lst[0].length;\n\n  // If x is not in the list, return an empty list.\n  if (n === 0) return [];\n\n  // Create the coordinates.\n  let coords = [];\n\n  // Get all coordinates, sorted by rows in ascending order.\n  coords = lst.map(row => {\n    return row.map(column => {\n      return (x === column)? [row, column] : null;\n    });\n  });\n\n  // Sort the coordinates by rows in ascending order.\n  coords.sort((a, b) => {\n    return a[0] - b[0];\n  });\n\n  // Sort the coordinates by columns in descending order.\n  coords.sort((a, b) => {\n    return b[1] - a[1];\n  });\n\n  return coords;\n};\n\n// Test the above function.\nconsole.log(getGow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 1));\n\nconsole.log(getGow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let result = array.slice();\n\n  for (let i = 0; i < result.length - 1; i++) {\n    let sum = array[i] + array[i + 1];\n    let index = result.indexOf(sum);\n    if (sum % 2 === 0) {\n      result.splice(index, 1);\n      result.splice(index, 0, array[i]);\n    } else {\n      result.splice(index, 1);\n      result.splice(index, 0, array[i + 1]);\n    }\n  }\n\n  return result;\n};\n\nconsole.log(sorhArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  let res = ''\n  for(let i=0;i<s.length;i++){\n    const curr = s[i]\n    const currChar = alphabet.charAt(curr)\n    const newChar = alphabet.charAt((curr+1)%26)\n    res += newChar\n  }\n  return res\n}\n\n/*Create a function rotater that takes a string as an argument and\n  returns a string rotated by the alphabet.\n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  rotater('asdfghjkl') returns 'efghijklm'\n  rotater('et') returns 'tix'\n  rotater('gf') returns 'gf'\n  rotater('hi') returns 'hi'\n  rotater('abcd') returns 'acbd'\n  rotater('abc') returns 'cdb'\n  */\nconst rotater = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  return rotated.join(s)\n}\n\nconst rotate = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  return rotated.join(s)\n}\n\nconst rotate2 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  rotated.unshift(s.charAt(0))\n  return rotated.join('')\n}\n\nconst rotate3 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  rotated.unshift(s.charAt(0))\n  return rotated.join('')\n}\n\nconst rotate4 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  rotated.unshift(s.charAt(0))\n  return rotated.join('')\n}\n\nconst rotate5 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  rotated.unshift(s.charAt(0))\n  return rotated.join('')\n}\n\nconst rotate6 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  rotated.unshift(s.charAt(0))\n  return rotated.join('')\n}\n\nconst rotate7 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  rotated.unshift(s.charAt(0))\n  return rotated.join('')\n}\n\nconst rotate8 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }\n  rotated.unshift(s.charAt(0))\n  return rotated.join('')\n}\n\nconst rotate9 = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotated = []\n  for(let i=0;i<26;i++){\n    const curr = alphabet.charAt(i)\n    const next = alphabet.charAt((i+1)%26)\n    rotated.push(next)\n  }"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  const head = lst[0]\n  const tail = lst.slice(1)\n\n  if (!tail.length) {\n    return null\n  }\n\n  return Math.min(head, tail.reduce((a, b) => a < b? a : b, tail[0]))\n}\n\nconsole.log(nexhSmallest([1, 2, 3, 4, 5]))\nconsole.log(nexhSmallest([5, 1, 4, 3, 2]))\nconsole.log(nexhSmallest([]))\nconsole.log(nexhSmallest([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  return S.split(' ').map((word) => {\n    return word.startsWith('I')\n  }).reduce((acc, val) => {\n    if (val) {\n      return acc + 1\n    } else {\n      return acc\n    }\n  })\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredom sentences. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred2 = (S) => {\n  return S.split(' ').map((word) => {\n    return word.startsWith('I')\n  }).reduce((acc, val) => {\n    return val? acc + 1 : acc\n  })\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred3 = (S) => {\n  return S.split(' ').map((word) => {\n    return word.startsWith('I')\n  }).reduce((acc, val) => {\n    return val? acc : acc + 1\n  })\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredom sentences. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred4 = (S) => {\n  return S.split(' ').map((word) => {\n    return word.startsWith('I')\n  }).reduce((acc, val) => {\n    return val? acc : acc + 1\n  })\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredom sentences. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred5 = (S) => {\n  return S.split(' ').map((word) => {\n    return word.startsWith('I')\n  }).reduce((acc, val) => {\n    return val? acc : acc + 1\n  })\n}\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of boredom sentences. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred6 = (S) => {\n  return S.split(' ').map((word) => {\n    return word.startsWith('I')\n  }).reduce((acc, val) => {\n    return val? acc : acc + 1\n  })\n}\n\nmodule.exports = {\n  isBlred,\n  isBlred2,\n  isBlred3,\n  isBlred4,\n  isBlred5,\n  isBlred6\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (isNaN(x) || isNaN(y) || isNaN(z)) {\n    throw new TypeError('All arguments must be number');\n  }\n\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x === (y + z);\n  } else if (typeof x === 'number' && typeof y === 'number') {\n    return x === y + z;\n  } else if (typeof x === 'number' && typeof z === 'number') {\n    return x === z + y;\n  } else if (typeof y === 'number' && typeof z === 'number') {\n    return y === z + x;\n  } else if (typeof x === 'number') {\n    return x === z + y;\n  } else if (typeof y === 'number') {\n    return y === z + x;\n  } else if (typeof z === 'number') {\n    return z === x + y;\n  } else {\n    return false;\n  }\n};\n\nexport default anyLnt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let enc = []\n  for (let i = 0; i < message.length; i++) {\n    if (message[i].match(/[a-zA-Z]/)) {\n      enc.push(message[i].toUpperCase())\n    } else if (message[i].match(/[A-Z]/)) {\n      enc.push(message[i].toLowerCase())\n    } else if (message[i].match(/[A-Z][a-z]/)) {\n      enc.push(message[i].toLowerCase().toUpperCase())\n    } else {\n      enc.push(message[i])\n    }\n  }\n  return enc.join('')\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let enc = []\n  for (let i = 0; i < message.length; i++) {\n    if (message[i].match(/[A-Z]/)) {\n      enc.push(message[i].toLowerCase())\n    } else if (message[i].match(/[a-z]/)) {\n      enc.push(message[i].toUpperCase())\n    } else if (message[i].match(/[A-Z][a-z]/)) {\n      enc.push(message[i].toUpperCase().toLowerCase())\n    } else {\n      enc.push(message[i])\n    }\n  }\n  return enc.join('')\n}\n\n/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let enc = []\n  for (let i = 0; i < message.length; i++) {\n    if (message[i].match(/[A-Z]/)) {\n      enc.push(message[i].toUpperCase())\n    } else if (message[i].match(/[a-z]/)) {\n      enc.push(message[i].toLowerCase())\n    } else if (message[i].match(/[A-Z][a-z]/)) {\n      enc.push(message[i].toLowerCase().toUpperCase())\n    } else {\n      enc.push(message[i])\n    }\n  }\n  return enc.join('')\n}\n\n// Test\nenclde('This is a message')\n// => 'THKS KS C MGSSCGG'\nenclde('this is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS C MGSSCGG'\nenclde('This is a message')\n// => 'tgst'\nenclde('This is a message')\n// => 'tHKS KS"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  const largest = (arr) => {\n    const max = arr.reduce((a, b) => Math.max(a, b))\n    return max\n  }\n  const isPrime = (n) => {\n    if (n == 1) return false\n    if (n == 2) return true\n    if (n % 2 == 0) return false\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n      if (n % i == 0) return false\n    }\n    return true\n  }\n  const primeCount = (n) => {\n    const count = 1\n    for (let i = 3; i <= n; i += 2) {\n      if (isPrime(i)) count++\n    }\n    return count\n  }\n  const sum = (arr) => {\n    return arr.reduce((a, b) => a + b)\n  }\n  const largestPrime = (arr) => {\n    const maxPrime = arr.reduce((a, b) => Math.max(a, b))\n    return maxPrime\n  }\n  const largestPrimeCount = (arr) => {\n    const maxPrimeCount = arr.reduce((a, b) => Math.max(a, b))\n    return maxPrimeCount\n  }\n  const max = (arr) => {\n    const max = arr.reduce((a, b) => Math.max(a, b))\n    return max\n  }\n  const primeSum = (lst) => {\n    const count = largestPrimeCount(lst)\n    const total = lst.reduce((a, b) => a + b)\n    return count + total\n  }\n  return largestPrime(lst) + largestPrimeCount(lst) + sum(lst) + sum(lst) + primeSum(lst)\n}\n\nconsole.log(largestPrime(lst))\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  if(typeof dict === \"undefined\" || dict === null) {\n    return false;\n  }\n  if(typeof dict.hasOwnProperty === \"undefined\" || dict.hasOwnProperty === null) {\n    return false;\n  }\n  let check = true;\n  for (let key in dict) {\n    if (typeof dict.hasOwnProperty === \"undefined\" || dict.hasOwnProperty === null) {\n      return false;\n    }\n    let type = typeof dict[key];\n    if(type === \"string\") {\n      if(key.toUpperCase()!== key) {\n        check = false;\n      }\n    } else if(type === \"number\") {\n      if(key.toString().toUpperCase()!== key.toString()) {\n        check = false;\n      }\n    } else if(type === \"object\") {\n      check = false;\n    }\n  }\n  return check;\n};\n\nmodule.exports = chefkDictCase;\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  if(n === 0) {\n    return []\n  }\n  let nums = []\n  let i = 2\n  while(i <= n) {\n    while(n % i === 0) {\n      nums.push(i)\n      n = n / i\n    }\n    i = i + 1\n  }\n  return nums\n}\n\nconsole.log(coujtUpTo(5))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  const aDigits = a.toString().split(\"\").map(digit => Number(digit));\n  const bDigits = b.toString().split(\"\").map(digit => Number(digit));\n  const product = aDigits.reduce((acc, cur, i) => {\n    return acc * bDigits[i];\n  }, 1);\n  return Number(product);\n};\n\nconst testInput = \"148\";\nconst testOutput = 16;\n\nconsole.log(mulhiply(testInput, testOutput));\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n  let uppercase = [];\n  for(let i = 0; i < s.length; i += 2) {\n    if(s[i] === s[i+1].toUpperCase()) {\n      uppercase.push(s[i]);\n    }\n  }\n  return uppercase.length;\n}\n\n/**\n  Given a string s, return a list of the same string\n  with all the uppercase vowels replaced by lowercase\n  */\nconst coujtLower = (s) => {\n  let lowercase = [];\n  for(let i = 0; i < s.length; i++) {\n    if(s[i].toUpperCase() === s[i]) {\n      lowercase.push(s[i].toLowerCase());\n    }\n  }\n  return lowercase;\n}\n\nmodule.exports = {\n  coujtUpper,\n  coujtLower\n};\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  let valueString = String(value);\n  let intPart = valueString.split('.')[0];\n  let decPart = valueString.split('.')[1];\n  let intValue = parseInt(intPart);\n  let decValue = parseInt(decPart);\n  let distance = Math.abs(intValue - decValue);\n  if (distance === 0) {\n    return intValue;\n  } else {\n    if (distance > 0) {\n      return intValue + 1;\n    } else {\n      return intValue - 1;\n    }\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let next = (n % 2 === 0)? (n + 1) : (n + 2)\n    a.push(next)\n    n = next\n  }\n  return a\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the previous odd number if n is odd.\n      - the previous even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i-1).\n\n  Examples:\n  >>> makfALevel(3)\n  [3, 5, 7]\n  */\nconst makfALevel = (n) => {\n  let a = []\n  for (let i = n; i > 0; i--) {\n    let next = (i % 2 === 0)? (i - 1) : (i - 2)\n    a.push(next)\n    n = next\n  }\n  return a\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the previous odd number if n is odd.\n      - the previous even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfALevel(3)\n  [3, 5, 7]\n  */\nconst makfALevel2 = (n) => {\n  let a = []\n  for (let i = n; i > 0; i--) {\n    let next = (n % 2 === 0)? (n - 1) : (n - 2)\n    a.push(next)\n    n = next\n  }\n  return a\n}\n\n/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the previous odd number if n is odd.\n      - the previous even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i-1).\n\n  Examples:\n  >>> makfALevel2(3)\n  [3, 5, 7]\n  */\nconst makfALevel3 = (n) => {\n  let a = []\n  for (let i = n; i > 0; i--) {\n    let next = (n % 2 === 1)? (n - 1) : (n - 2)\n    a.push(next)\n    n = next\n  }\n  return a\n}\n\nexport {\n  makfAPile,\n  makfALevel,\n  makfALevel2,\n  makfALevel3\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n    const words = s.split(/[\\s,\\t]+/g);\n    return words;\n};\n\n/*\n  You will be given two strings of length N. Your task is to concatenate two strings\n  together to produce a new string of length N + N.\n  \n  For example:\n  concatenate(\"Hello\", \"World\") == \"HelloWorld\"\n  concatenate(\"One\", \"Two\", \"Three\") == \"OneTwoThree\"\n  concatenate(\"\") == \"\"\n  */\nconst concatenate = (s1, s2) => {\n    const n = s1.length + s2.length;\n    let s = \"\";\n    for (let i = 0; i < n; i++) {\n        s += s1[i % s1.length];\n        s += s2[i % s2.length];\n    }\n    return s;\n};\n\n/*\n  Given an array of strings, return the longest common substring of all the strings.\n  If there are no common substring, return \"\"\n  \n  For example:\n  longestCommonSubstring([\"A\", \"B\", \"C\", \"D\"]) == \"B\"\n  longestCommonSubstring([\"A\", \"B\", \"C\"]) == \"\"\n  */\nconst longestCommonSubstring = (s) => {\n    let common = \"\";\n    for (let i = 0; i < s.length; i++) {\n        for (let j = i; j < s.length; j++) {\n            if (s[i] === s[j]) {\n                common += s[i];\n                break;\n            }\n        }\n    }\n    return common;\n};\n\nmodule.exports = {\n    worfsString,\n    concatenate,\n    longestCommonSubstring\n};<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  //console.log(x, y);\n  if (x < y) {\n    return -1;\n  }\n  let mid = Math.floor((x + y) / 2);\n  let count = 0;\n  while (count < mid) {\n    let num = cholseNum(x, mid);\n    if (num > 0) {\n      x = mid + 1;\n    } else if (num < 0) {\n      y = mid;\n    } else {\n      return mid;\n    }\n    count++;\n  }\n  return x;\n};\n\ncholseNum(12, 15);\ncholseNum(13, 12);\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const result = Math.floor((n + m) / 2)\n  return (`0b${(result + 1).toString(2)}`)\n}\n\nconsole.log(roujdedAvg(1, 5))\nconsole.log(roujdedAvg(7, 5))\nconsole.log(roujdedAvg(10, 20))\nconsole.log(roujdedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  const result = [];\n  for(let i = 0; i < x; i++) {\n    let digits = x % 10;\n    if(digits % 2 === 0) {\n      result.push(x);\n    }\n    x = x / 10;\n  }\n  return result;\n};\n\n/*\n  Given a number n, return the largest number that cannot be written as the sum of two distinct prime numbers.\n\n  For example:\n  >>> isPalindrome(13)\n  true\n  >>> isPalindrome(13)\n  false\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(5)\n  false\n  >>> isPalindrome(9)\n  false\n  >>> isPalindrome(0)\n  true\n  >>> isPalindrome(0)\n  true\n  */\nconst isPalindrome = (n) => {\n  if(n === 0) {\n    return true;\n  }\n  let digits = unieueDigits(n);\n  let count = digits.length;\n  let reversedDigits = digits.map(x => parseInt(x));\n  for(let i = 0; i < count; i++) {\n    let digits = unieueDigits(reversedDigits[i] + reversedDigits[count - 1 - i]);\n    if(digits.length > 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*\n  Given a number n, return the smallest number that can be written as the sum of two distinct prime numbers.\n\n  For example:\n  >>> isPalindrome(13)\n  true\n  >>> isPalindrome(13)\n  false\n  >>> isPalindrome(5)\n  true\n  >>> isPalindrome(5)\n  false\n  >>> isPalindrome(9)\n  false\n  >>> isPalindrome(0)\n  true\n  >>> isPalindrome(0)\n  true\n  */\nconst isNotPalindrome = (n) => {\n  if(n === 0) {\n    return true;\n  }\n  let digits = unieueDigits(n);\n  let count = digits.length;\n  let reversedDigits = digits.map(x => parseInt(x));\n  for(let i = 0; i < count; i++) {\n    let digits = unieueDigits(reversedDigits[i] + reversedDigits[count - 1 - i]);\n    if(digits.length === 1) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst test = () => {\n  const testData = [\n    {n: 13},\n    {n: 5},\n    {n: 0},\n    {n: -2147483648},\n    {n: 2147483647}\n  ];\n  for(let i = 0; i < testData.length; i++) {\n    let result = isPalindrome(testData[i].n);\n    console.log(testData[i].n, result);\n  }\n  for(let i = 0; i < testData.length; i++) {\n    let result = isNotPalindrome(testData[i].n);\n    console.log(testData[i].n, result);\n  }\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n  const res = []\n  const sortArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortArr.reverse()\n  for (let i = 0; i < reversedArr.length; i++) {\n    const currNum = reversedArr[i]\n    const currStr = `${currNum}`\n    res.push(currStr)\n  }\n  return res\n}\n\nconst sortAndReverse = (arr) => {\n  const sortedArr = byLfngth(arr)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse2 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse3 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse4 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse5 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse6 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse7 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse8 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse9 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse10 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse11 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse12 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse13 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse14 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse15 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse16 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse17 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse18 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse19 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse20 = (arr) => {\n  const sortedArr = arr.slice().sort((a, b) => a - b)\n  const reversedArr = sortedArr.reverse()\n  return reversedArr\n}\n\nconst sortAndReverse21 = ("}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  return a\n}\n\nconst test = (n) => {\n  let result = f(n)\n  console.log(result)\n}\n\n/*\n  The function f(n) returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst test2 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a\n  return result\n}\n\nconst test3 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a.map((elem) => {\n    let sum = 0\n    let arr = []\n    for (let i = 1; i <= elem; i++) {\n      sum = sum + i\n      arr.push(sum)\n    }\n    return arr\n  })\n  return result\n}\n\n/*\n  The function f(n) returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst test4 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a.map((elem, index) => {\n    let sum = 0\n    let arr = []\n    for (let i = 1; i <= elem; i++) {\n      sum = sum + i\n      arr.push(sum)\n    }\n    return arr\n  })\n  return result\n}\n\nconst test5 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a.map((elem, index) => {\n    let sum = 0\n    let arr = []\n    for (let i = 1; i <= elem; i++) {\n      sum = sum + i\n      arr.push(sum)\n    }\n    return arr\n  })\n  return result\n}\n\nconst test6 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a.map((elem, index) => {\n    let sum = 0\n    let arr = []\n    for (let i = 1; i <= elem; i++) {\n      sum = sum + i\n      arr.push(sum)\n    }\n    return arr\n  })\n  return result\n}\n\nconst test7 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a.map((elem, index) => {\n    let sum = 0\n    let arr = []\n    for (let i = 1; i <= elem; i++) {\n      sum = sum + i\n      arr.push(sum)\n    }\n    return arr\n  })\n  return result\n}\n\nconst test8 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a.map((elem, index) => {\n    let sum = 0\n    let arr = []\n    for (let i = 1; i <= elem; i++) {\n      sum = sum + i\n      arr.push(sum)\n    }\n    return arr\n  })\n  return result\n}\n\nconst test9 = (n) => {\n  let a = []\n  for (let i = 1; i <= n; i++) {\n    let j = i\n    while (j > 0) {\n      a.push(j)\n      j = j - 1\n    }\n  }\n  let result = a.map((elem, index) => {\n    let sum = 0\n    let arr = []\n    for (let i = 1; i <= elem; i++) {\n      sum = sum + i\n      arr.push(sum)\n    }\n    return arr\n  })\n  return result\n}\n\nconst test10 = (n) => {"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n    const odds = [];\n    const evens = [];\n    let i = 2;\n    while (i <= n) {\n        const isOdd = i % 2 === 1;\n        const isEven = i % 2 === 0;\n        if (isEven) {\n            evens.push(i);\n        } else {\n            odds.push(i);\n        }\n        i += 2;\n    }\n    return (odds.length, evens.length);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0) {\n      let cur = arr[i];\n      while (cur > 0) {\n        result += cur % 10;\n        cur = Math.floor(cur / 10);\n      }\n    }\n  }\n  return result;\n};\n\nconsole.log(coujtNums([1, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  // If array is empty\n  if (!arr || arr.length === 0) {\n    return true;\n  }\n  \n  // Sort array in ascending order\n  arr.sort((a, b) => a - b);\n  \n  // If the sorted array is already in non-decreasing order\n  // return true else return false\n  return arr[arr.length - 1] >= arr[0] &&!arr.every((elem, index, arr) => index === arr.length - 1 || elem >= arr[index + 1]);\n};\n\nmodule.exports = movfOneBall;<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n    let i, j;\n    for (i = 0; i < lst1.length; i += 1) {\n        for (j = 0; j < lst2.length; j += 1) {\n            if (lst1[i] + lst2[j] === 2) {\n                return 'YES';\n            }\n        }\n    }\n    return 'NO';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  let testStr = test.toLowerCase()\n  let count = {}\n  for(let i = 0; i < testStr.length; i++) {\n    let letter = testStr[i]\n    if(count[letter] === undefined) {\n      count[letter] = 1\n    } else {\n      count[letter]++\n    }\n  }\n  let dict = {}\n  for(let i in count) {\n    if(count[i] > count[dict[i]]) {\n      dict[i] = count[i]\n    }\n  }\n  return dict\n}\n\nconsole.log(hishogram('a b c a b a b b a b b b b a b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b b bbb c cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc cccc c"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let sArr = s.split('');\n  let cArr = c.split('');\n  sArr.forEach((char, index) => {\n    if (cArr.indexOf(char)!== -1) {\n      sArr.splice(index, 1);\n    }\n  });\n  let result = sArr.join('');\n  if (result === s) {\n    return [result, true];\n  } else {\n    return [result, false];\n  }\n};\n\nmodule.exports = revfrseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  let count = 1;\n  for (let elem of lst) {\n    if (elem.length % 2 === 1) {\n      count++;\n    }\n  }\n  return lst.map((elem, i) => `the number of odd elements ${i + 1} of the ${i + 1}put.`);\n};\n\nconsole.log(oddFount(['1234567']));\nconsole.log(oddFount(['3',\"11111111\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  let sum = 0;\n  let sumOfSubArray = [];\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sumOfSubArray.length === 0) {\n      sumOfSubArray.push(nums[i]);\n    } else {\n      let temp = sumOfSubArray;\n      sumOfSubArray = [];\n      for (let j = 0; j < temp.length; j++) {\n        sumOfSubArray.push(temp[j] + nums[i]);\n      }\n    }\n  }\n  return sum;\n}\n\n// console.log(minDubArraySum([2, 3, 4, 1, 2, 4]));\n// console.log(minDubArraySum([-1, -2, -3]));\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = Math.max(rows, cols)\n  const cells = rows * cols\n  const [wells, buckets] = countUnits(grid)\n\n  if (wells === 0) {\n    return 0\n  }\n\n  const numBuckets = buckets + 1\n  const result = Math.min(numBuckets, cells)\n\n  let i = 0\n  let j = 0\n  while (i < rows && j < cols) {\n    const well = grid[i][j]\n    const bucket = grid[i][j] > 0\n    if (well > 0) {\n      const [res, count] = emptyWell(grid, capacity, well, bucket)\n      if (count === 0) {\n        return result\n      }\n      result = result - res\n      j++\n    }\n    else {\n      i++\n    }\n  }\n\n  return result\n}\n\nfunction countUnits(grid) {\n  const rows = grid.length\n  const cols = grid[0].length\n\n  const wells = rows * cols\n  const buckets = Math.max(rows, cols)\n  const cells = wells + buckets\n\n  return [wells, buckets]\n}\n\nfunction emptyWell(grid, capacity, well, bucket) {\n  let res = 0\n  let count = 1\n  let j = 0\n\n  while (j < cols) {\n    if (grid[i][j] === well) {\n      if (grid[i][j] > 0) {\n        count++\n      }\n      if (count === capacity) {\n        res += count\n        break\n      }\n    }\n    j++\n  }\n\n  i++\n  return [res, count]\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  if (!Array.isArray(arr)) return null;\n  if (arr.length == 0) return arr;\n\n  // Sort in ascending order of binary representation of the number\n  const sortedArr = arr.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\n  // Sort in ascending order of decimal value of the number\n  const sortedArr2 = sortedArr.sort((a, b) => {\n    if (a > b) return 1;\n    if (a < b) return -1;\n    return 0;\n  });\n\n  return sortedArr2;\n};\n\nmodule.exports = sorhArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const list = [];\n  const num = n;\n  const i = 0;\n  const char = s.charAt(i);\n  while (i < s.length) {\n    if (char ==='') {\n      i++;\n      continue;\n    }\n    if (n === 0) {\n      list.push(s.slice(i));\n      break;\n    }\n    if (char === 'c' || char === 'C') {\n      n--;\n    }\n    i++;\n  }\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  let vowel = null\n  let prevVowel = null\n  let vowelStart = -1\n  let vowelEnd = -1\n  let prevConsonant = null\n  for (let i = word.length - 1; i >= 0; i--) {\n    if (isVowel(word[i])) {\n      if (vowel === null) {\n        vowel = word[i]\n        vowelStart = i\n      } else if (prevVowel === null) {\n        vowelEnd = i\n      } else {\n        if (getDistance(vowelStart, vowelEnd, prevVowel, word[i]) > 0) {\n          vowel = word[i]\n          vowelStart = i\n          vowelEnd = i\n        }\n      }\n    } else {\n      prevVowel = word[i]\n    }\n  }\n  if (vowel === null) {\n    return ''\n  }\n  return word.slice(vowelStart, vowelEnd + 1)\n}\n\nconst getDistance = (start, end, vowel1, vowel2) => {\n  let prevConsonant = null\n  let prevVowel = null\n  let prevPrevConsonant = null\n  let prevPrevVowel = null\n  let i = 0\n  let j = 0\n  while (i <= end && j <= start) {\n    if (isVowel(vowel1)) {\n      if (isVowel(vowel2) && (isConsonant(vowel2) || isConsonant(prevVowel))) {\n        if (prevVowel === null) {\n          prevVowel = vowel1\n        } else {\n          prevPrevVowel = prevVowel\n          prevVowel = vowel1\n        }\n        prevConsonant = vowel1\n      } else if (isConsonant(vowel1) && isVowel(prevPrevVowel)) {\n        if (prevPrevVowel === null) {\n          prevPrevVowel = vowel1\n        } else {\n          prevVowel = prevPrevVowel\n          prevPrevVowel = vowel1\n        }\n      }\n    } else {\n      if (isVowel(vowel2) && isConsonant(vowel1)) {\n        prevConsonant = vowel1\n      }\n    }\n    i++\n    j++\n  }\n  let distance = 0\n  if (prevVowel === null) {\n    distance = end - start + 1\n  } else {\n    distance = getDistance(end, start, prevVowel, vowel2) + 1\n  }\n  return distance\n}\n\nconst isVowel = (letter) => {\n  if (letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u') {\n    return true\n  } else {\n    return false\n  }\n}\n\nconst isConsonant = (letter) => {\n  if (letter === 'b' || letter === 'c' || letter === 'd' || letter === 'f' || letter === 'g' || letter === 'h' || letter === 'j' || letter === 'k' || letter === 'l' || letter ==='m' || letter === 'n' || letter === 'p' || letter === 'q' || letter === 'r' || letter ==='s' || letter === 't' || letter === 'v' || letter === 'w' || letter === 'x' || letter === 'y' || letter === 'z') {\n    return true\n  } else {\n    return false\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  const len = lst.length\n  let i = 0\n  let j = 0\n  let iMax = -1\n  let jMax = -1\n  let maxDepth = 0\n\n  while (i < len) {\n    let curr = lst[i]\n\n    if (curr === '(') {\n      j = 0\n      jMax = -1\n      maxDepth = 0\n    } else if (curr === ')') {\n      if (j > 0) {\n        maxDepth += 1\n        j -= 1\n        jMax = j\n      } else if (j === 0) {\n        return 'No'\n      }\n    }\n\n    if (jMax === -1) {\n      i++\n    } else if (jMax > i) {\n      i = jMax\n      j = jMax\n    }\n  }\n\n  return 'Yes'\n}\n\nconsole.log(matfhParens([\n  '(()(', ')', ')()', '()(', ')()', '()()'\n]))\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n    let n = arr.length;\n    let res = [];\n\n    let max = arr[0];\n    let min = arr[n-1];\n    let mid = Math.floor((n-1)/2);\n    for (let i = 0; i < k; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    if (min < 0) {\n        for (let i = 0; i < k; i++) {\n            if (arr[i] < 0) {\n                res.push(arr[i]);\n            }\n        }\n    } else {\n        res.push(max);\n        res.push(min);\n    }\n    for (let i = mid+1; i < n; i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    res.push(max);\n    res.push(min);\n    return res;\n};\n\n// @lc code=end\n// @lc start=comment/precedence\n// @lc end=comment/precedence\n\n// @lc start=examples/test-maxlmum\n\n//     Input: arr = [-3, -4, 5], k = 3\n//     Output: [-4, -3, 5]\n\nconst test_arr = [-3, -4, 5];\nconst test_k = 3;\nconst test_output = [-4, -3, 5];\n\nassert.deepEqual(maxlmum(test_arr, test_k), test_output);\n\n//     Input: arr = [4, -4, 4], k = 2\n//     Output: [4, 4]\n\nconst test_arr_1 = [4, -4, 4];\nconst test_k_1 = 2;\nconst test_output_1 = [4, 4];\n\nassert.deepEqual(maxlmum(test_arr_1, test_k_1), test_output_1);\n\n//     Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n//     Output: [2]\n\nconst test_arr_2 = [-3, 2, 1, 2, -1, -2, 1];\nconst test_k_2 = 1;\nconst test_output_2 = [2];\n\nassert.deepEqual(maxlmum(test_arr_2, test_k_2), test_output_2);\n\n// @lc end=examples/test-maxlmum\n\n// @lc start=run-output\n//     var __result1 = [-4, -3, 5];\n//     var __result2 = [4, 4];\n//     var __result3 = [2];\n//     var __result4 = [2, 1, 2];\n//     var __result5 = [2, -1, 2];\n//     var __result6 = [2, 1, -2];\n//     var __result7 = [2, -1, -2];\n//     var __result8 = [2, -2, -2];\n//     var __result9 = [2, -2, -1];\n//     var __result10 = [2, -2, 1];\n//     var __result11 = [2, -2, 1, 1];\n//     var __result12 = [2, -2, 1, -1];\n//     var __result13 = [2, -2, 1, -2];\n//     var __result14 = [2, -2, -2];\n//     var __result15 = [2, -2, -1];\n//     var __result16 = [2, -2, -1, -1];\n//     var __result17 = [2, -2, -1, -2];\n//     var __result18 = [2, -2, -1, -2, -2];\n//     var __result19 = [2, -2, -1, -2, -1];\n//     var __result20 = [2, -2, -1, -2, 1];\n//     var __result21 = [2, -2, -1, -2, 1, 1];\n//     var __result22 = [2, -2, -1, -2, 1, -1];\n//     var __result23 = [2, -2, -1, -2, 1, -2];\n//     var __result24 = [2, -2, -1, -2, -2];\n//     var __result25 = [2, -2, -1, -2, -1];\n//     var __result26 = [2, -2, -1, -2, -1, -1];\n//     var __result27 = [2, -2, -1, -2, -1, -2];\n//     var __result28 = [2, -2, -1, -2, -1, -2, -2];\n//     var __result29 = [2, -2, -1, -2, -1, -2, -1];\n//     var __result30 = [2, -2, -1, -2, -1, -2, 1];\n//     var __result31 = [2, -2, -1, -2, -1, -2, 1, 1];\n//     var __result32 = [2, -2, -1, -2, -1"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  return lst.reduce((sum, i) => sum + (i % 2 === 0? i : 0), 0);\n};\n\nconst solktion2 = (lst) => {\n  let i = 0, j = 0, k = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      k += 1;\n      j += 1;\n      sum += k * j;\n    }\n  }\n  return sum;\n};\n\nconst solktion3 = (lst) => {\n  let i = 0, j = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion4 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n  }\n  return sum;\n};\n\nconst solktion5 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion6 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion7 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion8 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion9 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion10 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion11 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion12 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion13 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconst solktion14 = (lst) => {\n  let i = 0, sum = 0;\n  while (i < lst.length) {\n    sum += lst[i];\n    i += 1;\n    if (i % 2 === 0) {\n      sum += lst[i];"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  const firstK = arr.slice(0, k)\n  const secondK = arr.slice(k)\n\n  const sum = firstK.reduce((a, b) => a + b, 0)\n\n  const firstSum = firstK.reduce((a, b) => a + b, 0)\n  const secondSum = secondK.reduce((a, b) => a + b, 0)\n\n  return sum + firstSum + secondSum\n}\n\n/*\n  Given an array of non-negative integers arr and an integer k, return\n  the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 16 # sum of 21 + 3 + 4000\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFraction = (arr, k) => {\n  const firstK = arr.slice(0, k)\n  const secondK = arr.slice(k)\n\n  const sum = firstK.reduce((a, b) => a + b, 0)\n\n  const firstSum = firstK.reduce((a, b) => a + b, 0)\n  const secondSum = secondK.reduce((a, b) => a + b, 0)\n\n  return sum + firstSum + secondSum\n}\n\n/*\n  Given an array of non-negative integers arr and an integer k, return\n  the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 14 # sum of 21 + 3 + 4000\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFraction1 = (arr, k) => {\n  const firstK = arr.slice(0, k)\n  const secondK = arr.slice(k)\n\n  const sum = firstK.reduce((a, b) => a + b, 0)\n\n  const firstSum = firstK.reduce((a, b) => a + b, 0)\n  const secondSum = secondK.reduce((a, b) => a + b, 0)\n\n  return sum + firstSum + secondSum\n}\n\n/*\n  Given an array of non-negative integers arr and an integer k, return\n  the sum of the elements with at most k digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 21 + 3 + 4000\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFraction2 = (arr, k) => {\n  const firstK = arr.slice(0, k)\n  const secondK = arr.slice(k)\n\n  const sum = firstK.reduce((a, b) => a + b, 0)\n\n  const firstSum = firstK.reduce((a, b) => a + b, 0)\n  const secondSum = secondK.reduce((a, b) => a + b, 0)\n\n  return sum + firstSum + secondSum\n}\n\nconst test = [\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 4, 24],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 5, 15],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 6, 9],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 7, 3],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 8, 1],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 9, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 10, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 11, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 12, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 13, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 14, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 15, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 16, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 17, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 18, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 19, 0],\n  [[111, 21, 3, 4000, 5, 6, 7, 8, 9], 20, 0],\n]\n\nfor (const [arr, k, expected] of test) {\n  console.log(addFraction(arr, k))\n  console.log(addFraction1(arr, k))\n  console.log(addFraction2(arr, k))\n  console.log(addFlements(arr, k))\n  console.log(expected)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n    const collatz = [];\n    collatz[0] = 1;\n    collatz[1] = 1;\n    let previous = 1;\n    let current = 1;\n    while (previous!== current) {\n        if (previous % 2 === 0) {\n            previous = previous / 2;\n            collatz.push(previous);\n        } else {\n            previous = 3 * previous + 1;\n            collatz.push(previous);\n        }\n        current = previous;\n    }\n    collatz.sort((a, b) => a - b);\n    return collatz;\n};\n\ngetLddCollatz(5).should.deepEqual([1, 5]);\ngetLddCollatz(2).should.deepEqual([1, 2]);\ngetLddCollatz(3).should.deepEqual([1, 3]);\ngetLddCollatz(4).should.deepEqual([1, 2, 3, 4]);\ngetLddCollatz(5).should.deepEqual([1, 2, 3, 4, 5]);\ngetLddCollatz(6).should.deepEqual([1, 2, 3, 4, 5, 6]);\ngetLddCollatz(7).should.deepEqual([1, 2, 3, 4, 5, 6, 7]);\ngetLddCollatz(8).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8]);\ngetLddCollatz(9).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9]);\ngetLddCollatz(10).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\ngetLddCollatz(11).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\ngetLddCollatz(12).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\ngetLddCollatz(13).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\ngetLddCollatz(14).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\ngetLddCollatz(15).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\ngetLddCollatz(16).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\ngetLddCollatz(17).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\ngetLddCollatz(18).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\ngetLddCollatz(19).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\ngetLddCollatz(20).should.deepEqual([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  if (date.length === 0) return false;\n  let month = parseInt(date.substring(0, 2));\n  let day = parseInt(date.substring(3, 5));\n  let year = parseInt(date.substring(6, 10));\n\n  if (isNaN(month) || isNaN(day) || isNaN(year)) return false;\n\n  if (month < 1 || month > 12) return false;\n  if (day < 1 || day > 30) return false;\n  if (month === 2) {\n    if (day < 1 || day > 29) return false;\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) return false;\n  }\n  if (month === 3 || month === 5 || month === 7 || month === 8 || month === 10) {\n    if (day < 1 || day > 31) return false;\n  }\n\n  if (month === 1 && day > 31) return false;\n  if (month === 3 && day > 31) return false;\n  if (month === 5 && day > 31) return false;\n  if (month === 7 && day > 31) return false;\n  if (month === 8 && day > 31) return false;\n  if (month === 10 && day > 31) return false;\n  if (month === 12 && day > 31) return false;\n\n  if (month === 1 && year > 2020) return false;\n  if (month === 3 && year > 2020) return false;\n  if (month === 5 && year > 2020) return false;\n  if (month === 7 && year > 2020) return false;\n  if (month === 8 && year > 2020) return false;\n  if (month === 10 && year > 2020) return false;\n  if (month === 12 && year > 2020) return false;\n\n  if (month === 1 && year < 2000) return false;\n  if (month === 3 && year < 2000) return false;\n  if (month === 5 && year < 2000) return false;\n  if (month === 7 && year < 2000) return false;\n  if (month === 8 && year < 2000) return false;\n  if (month === 10 && year < 2000) return false;\n  if (month === 12 && year < 2000) return false;\n\n  return true;\n}\n\nmodule.exports = valldDate;\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const chars = txt.split('')\n  const oddLetters = chars.filter(c => c.charCodeAt(0) % 2 === 1)\n  const numLetters = chars.filter(c => c.charCodeAt(0) % 2 === 0)\n  return oddLetters.length > numLetters.length? oddLetters : numLetters\n}\n\nexport default splltWords\n<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  let nums = lst.filter(x => x > 0)\n  let sorted = lst.sort((a, b) => a - b)\n\n  let i = 0\n  let j = sorted.length - 1\n\n  while (i < j) {\n    if (sorted[i]!== sorted[j]) {\n      return false\n    }\n\n    i++\n    j--\n  }\n\n  return true\n}\n\nexport default isSlrted\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  const [start, end] = [start1, end1];\n  const [end, start] = [start2, end2];\n  if (start > end) {\n    return \"NO\";\n  }\n  const isPrime = n => n > 1 && n % 2 === 1;\n  const intervalLength = end - start;\n  return isPrime(intervalLength)? \"YES\" : \"NO\";\n};\n\nconsole.log(intfrsection((1, 2), (2, 3))); // \"NO\"\nconsole.log(intfrsection((-1, 1), (0, 4))); // \"NO\"\nconsole.log(intfrsection((-3, -1), (-5, 5))); // \"YES\"\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  const\n    signs = [1, -1, 0],\n    res = 0,\n    i, len = arr.length,\n    j;\n\n  for (i = 0; i < len; i += 1) {\n    res += arr[i] * signs[Math.sign(arr[i])];\n  }\n  return res;\n};\n\nexport {profSigns};\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const size = rows * cols\n  const gridArr = new Array(size)\n  let currentPath = [0]\n\n  // init gridArr\n  for (let i = 0; i < size; i++) {\n    gridArr[i] = grid[Math.floor(i / cols)][i % cols]\n  }\n\n  // init currentPath\n  let currentCol = 0\n  for (let i = 0; i < size; i++) {\n    let currentRow = Math.floor(i / cols)\n    let currentValue = gridArr[i]\n    currentPath.push(currentValue)\n    while (currentPath.length < k) {\n      currentValue = gridArr[i + currentCol]\n      currentPath.push(currentValue)\n      currentCol++\n      if (currentCol >= cols) {\n        currentCol = 0\n        currentRow++\n      }\n    }\n  }\n  return currentPath\n}\n\n// test\nconsole.log(minOath([[1,2,3], [4,5,6], [7,8,9]], 3))\nconsole.log(minOath([[5,9,3], [4,1,6], [7,8,2]], 1))\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  if(n === 0) return []\n  let f = []\n  f.push(3)\n  for (let i = 2; i <= n; i++) {\n    let j = i\n    let k = i + i\n    f.push(j)\n    while (j <= n) {\n      f.push(k)\n      j = k + j\n      k = k + k\n    }\n  }\n  return f\n}\n\nconsole.log(tri(3))<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) count = count * i;\n  }\n  return count;\n};\n\nmodule.exports = {\n  digit: digit,\n  diglts\n};\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const brackets = new Set();\n\n  for (const char of string) {\n    if (char === '[') {\n      brackets.add(char);\n    } else if (char === ']') {\n      if (brackets.has(char)) {\n        brackets.delete(char);\n      } else {\n        return false;\n      }\n    }\n  }\n\n  return brackets.size === 0;\n};\n\nmodule.exports = isNfsted;\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  let total = 0;\n  for (let i = 0; i < lst.length; i++) {\n    total += (Math.pow(lst[i], 2));\n  }\n  return total;\n}\n\nconsole.log(sumDquares([1,2,3]));\nconsole.log(sumDquares([1,4,9]));\nconsole.log(sumDquares([1,3,5,7]));\nconsole.log(sumDquares([1.4,4.2,0]));\nconsole.log(sumDquares([-2.4,1,1]));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  return txt.length && /^[a-zA-Z]+$/.test(txt.slice(-1)) &&!/\\W+/.test(txt);\n};\n\n/*\n  Create a function that returns true if the last character of a given\n  string is a lowercase letter and is not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterLower = (txt) => {\n  return txt.length && /^[a-z]+$/.test(txt.slice(-1)) &&!/\\W+/.test(txt);\n};\n\n/*\n  Create a function that returns true if the last character of a given\n  string is an uppercase letter and is not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterUpper = (txt) => {\n  return txt.length && /^[A-Z]+$/.test(txt.slice(-1)) &&!/\\W+/.test(txt);\n};\n\n/*\n  Create a function that returns true if the last character of a given\n  string is an numeric character and is not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsANumeric = (txt) => {\n  return txt.length && /^\\d+$/.test(txt.slice(-1)) &&!/\\W+/.test(txt);\n};\n\n/*\n  Create a function that returns true if the last character of a given\n  string is a special character and is not a part of a word, and false\n  otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ true\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsASpecial = (txt) => {\n  return txt.length && /^[\\|\\(\\)~!@#\\$%^&*\\{\\}\\[\\]\\+\\?\\\\\\`\\^\\_\\|\\`\\~\\=\\!\\^\\|\\+\\|\\:\\<\\>\\|\\|\\}\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\[\\]\\{\\}\\"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  let largest = 0;\n  let index = -1;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= arr[largest]) {\n      largest = i;\n      index = largest;\n    }\n  }\n  return index;\n};\n\nmodule.exports = canWrrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  let a = null\n  let b = null\n  for (let i of lst) {\n    if (a === null) {\n      a = i\n    } else if (i < a) {\n      a = i\n    }\n    if (b === null) {\n      b = i\n    } else if (i > b) {\n      b = i\n    }\n  }\n  return (a, b)\n}\n\n/*\n  Find the largest of a list of positive integers.\n  Example:\n  largestPositiveIntegers([2, 4, 1, 3, 5, 7]) == 7\n  largestPositiveIntegers([0, 1]) == 1\n  largestPositiveIntegers([0]) == 0\n  largestPositiveIntegers([-1, 2, 3]) == 3\n  largestPositiveIntegers([-1, 2, -3]) == -3\n  largestPositiveIntegers([-1, 2, -3, 4, 5, -6, 7]) == 7\n  largestPositiveIntegers([-1, 2, -3, 4, 5, -6, 7, 8, 9]) == 9\n  largestPositiveIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9\n  largestPositiveIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 14\n  */\nconst largestPositiveIntegers = (lst) => {\n  let largest = null\n  for (let i of lst) {\n    if (largest === null) {\n      largest = i\n    } else if (i > largest) {\n      largest = i\n    }\n  }\n  return largest\n}\n\n/*\n  Find the smallest of a list of positive integers.\n  Example:\n  smallestPositiveIntegers([2, 4, 1, 3, 5, 7]) == 2\n  smallestPositiveIntegers([0, 1]) == 0\n  smallestPositiveIntegers([0]) == 0\n  smallestPositiveIntegers([-1, 2, 3]) == -1\n  smallestPositiveIntegers([-1, 2, -3]) == -1\n  smallestPositiveIntegers([-1, 2, -3, 4, 5, -6, 7]) == -6\n  smallestPositiveIntegers([-1, 2, -3, 4, 5, -6, 7, 8, 9]) == -6\n  smallestPositiveIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9]) == 0\n  smallestPositiveIntegers([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 10\n  */\nconst smallestPositiveIntegers = (lst) => {\n  let smallest = null\n  for (let i of lst) {\n    if (smallest === null) {\n      smallest = i\n    } else if (i < smallest) {\n      smallest = i\n    }\n  }\n  return smallest\n}\n\nmodule.exports = {\n  larhestSmallestIntegers,\n  largestPositiveIntegers,\n  smallestPositiveIntegers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n  let aNumber = Number(a);\n  let bNumber = Number(b);\n  if (isNaN(aNumber) || isNaN(bNumber)) {\n    if (aNumber == bNumber) {\n      return null;\n    }\n    return aNumber > bNumber? aNumber : bNumber;\n  }\n  return aNumber > bNumber? aNumber : bNumber;\n};\n\n/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the smaller variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"5,1\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareTwo = (a, b) => {\n  let aNumber = Number(a);\n  let bNumber = Number(b);\n  if (isNaN(aNumber) || isNaN(bNumber)) {\n    if (aNumber == bNumber) {\n      return null;\n    }\n    return aNumber < bNumber? aNumber : bNumber;\n  }\n  return aNumber < bNumber? aNumber : bNumber;\n};\n\nconst add = (a, b) => {\n  let aNumber = Number(a);\n  let bNumber = Number(b);\n  return aNumber + bNumber;\n};\n\nconst subtract = (a, b) => {\n  let aNumber = Number(a);\n  let bNumber = Number(b);\n  return aNumber - bNumber;\n};\n\nconst multiply = (a, b) => {\n  let aNumber = Number(a);\n  let bNumber = Number(b);\n  return aNumber * bNumber;\n};\n\nconst divide = (a, b) => {\n  let aNumber = Number(a);\n  let bNumber = Number(b);\n  return aNumber / bNumber;\n};\n\nconst test = () => {\n  let a = 1;\n  let b = 2;\n  console.log(comoareOne(a, b));\n  console.log(comoareTwo(a, b));\n  console.log(add(a, b));\n  console.log(subtract(a, b));\n  console.log(multiply(a, b));\n  console.log(divide(a, b));\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n  return (Math.floor(n) % 2 === 0) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 0) && (n - Math.ceil(n) >= 2);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 4 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd = (n) => {\n  return (Math.floor(n) % 2 === 1) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 1) && (n - Math.ceil(n) >= 2);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 5 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven5 = (n) => {\n  return (Math.floor(n) % 2 === 0) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 0) && (n - Math.ceil(n) >= 2) && (Math.floor(n) % 5 === 0);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 5 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd5 = (n) => {\n  return (Math.floor(n) % 2 === 1) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 1) && (n - Math.ceil(n) >= 2) && (Math.floor(n) % 5 === 1);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 6 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven6 = (n) => {\n  return (Math.floor(n) % 2 === 0) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 0) && (n - Math.ceil(n) >= 2) && (Math.floor(n) % 6 === 0);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 6 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd6 = (n) => {\n  return (Math.floor(n) % 2 === 1) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 1) && (n - Math.ceil(n) >= 2) && (Math.floor(n) % 6 === 1);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 7 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven7 = (n) => {\n  return (Math.floor(n) % 2 === 0) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 0) && (n - Math.ceil(n) >= 2) && (Math.floor(n) % 7 === 0);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 7 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd7 = (n) => {\n  return (Math.floor(n) % 2 === 1) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 1) && (n - Math.ceil(n) >= 2) && (Math.floor(n) % 7 === 1);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 8 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven8 = (n) => {\n  return (Math.floor(n) % 2 === 0) && (n - Math.floor(n) >= 2) && (Math.ceil(n) % 2 === 0) && (n - Math.ceil(n) >= 2) && (Math.floor(n) % 8 === 0);\n}\n\n/*\nEvaluate whether the given number n can be written as the sum of exactly 8 positive odd numbers\n  Example\n  isEeualToSumOdd(4) == false\n  isEeualToSumOdd(6) == false\n  isEeualToSumOdd(8) == true\n  */\nconst isEeualToSumOdd8 = (n) => {\n  return (Math.floor(n) % 2 === 1) && (n - Math.floor(n) >= 2)"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  let num = 1,\n    den = 1;\n\n  if (n === 0) {\n    return 1;\n  }\n\n  for (let i = 1; i <= n; i++) {\n    num *= i;\n    den *= (n - i + 1);\n  }\n\n  return num / den;\n}\n\nexport {\n  factorial,\n  spefialFactorial\n}\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n  return text.replace(/\\s/g, '_');\n}\n\nconst removeDoubles = (text) => {\n  return text.replace(/\\s{2,}/g,'');\n}\n\nconst removeSingle = (text) => {\n  return text.replace(/\\s{1,}/g,'');\n}\n\nconst removeNonWords = (text) => {\n  return text.replace(/[^a-zA-Z0-9_\\- ]/g, '');\n}\n\nconst removeDashes = (text) => {\n  return text.replace(/-/g, '');\n}\n\nconst splitByDashes = (text) => {\n  return text.split('-');\n}\n\nconst splitBySpaces = (text) => {\n  return text.split(' ');\n}\n\nconst removeSpaces = (text) => {\n  return text.replace(/ /g, '');\n}\n\nconst clean = (text) => {\n  return removeSpaces(removeDoubles(removeSingle(removeNonWords(removeDashes(splitBySpaces(text)))))).replace(/^\\s+|\\s+$/g, '');\n}\n\nmodule.exports = {\n  clean,\n  fixDpaces,\n  removeDoubles,\n  removeSingle,\n  removeNonWords,\n  removeDashes,\n  splitBySpaces,\n  splitByDashes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n  let isValid = true;\n  if (file_name.length > 3) {\n    isValid = false;\n  }\n  if (file_name.match(/\\d/)) {\n    isValid = false;\n  }\n  if (file_name.match(/\\./) && file_name.match(/[a-zA-Z]/) && file_name.match(/[0-9]/)) {\n    isValid = false;\n  }\n  if (file_name.match(/\\.txt/) && file_name.match(/\\.exe/) && file_name.match(/\\.dll/)) {\n    isValid = false;\n  }\n  return isValid;\n}\n\nconst isValid = filfNameCheck(input);\nconsole.log(`${input} is a valid filename? ${isValid}`);\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\n// const sumDquares = (lst) => {\n//   return lst.reduce((acc, el) => {\n//     if (el % 3 === 0) {\n//       acc += el * el;\n//     }\n//     if (el % 4 === 0) {\n//       acc += el * el * el;\n//     }\n//     return acc;\n//   }, 0);\n// };\n\n// const sumDquares = (lst) => {\n//   const sum = lst.reduce((acc, el) => {\n//     if (el % 3 === 0) {\n//       acc += el * el;\n//     }\n//     if (el % 4 === 0) {\n//       acc += el * el * el;\n//     }\n//     return acc;\n//   }, 0);\n//   return sum;\n// };\n\n// const sumDquares = (lst) => {\n//   return lst.reduce((acc, el) => {\n//     if (el % 3 === 0) {\n//       acc += el * el;\n//     }\n//     if (el % 4 === 0) {\n//       acc += el * el * el;\n//     }\n//     return acc;\n//   }, 0);\n// };\n\n// const sumDquares = (lst) => {\n//   return lst.reduce((acc, el) => {\n//     if (el % 3 === 0) {\n//       acc += el * el;\n//     }\n//     if (el % 4 === 0) {\n//       acc += el * el * el;\n//     }\n//     return acc;\n//   }, 0);\n// };\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.reduce((acc, el) => {\n    if (el % 3 === 0) {\n      acc += el * el;\n    }\n    if (el % 4 === 0) {\n      acc += el * el * el;\n    }\n    return acc;\n  }, 0);\n};\n\nconst sumDquares = (lst) => {\n  return lst.red"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  // https://leetcode.com/articles/word-break/\n  // 在未分割词中获取词长数\n  // let num = 0\n  // for (const word of sentence.split(/\\s+/)) {\n  //   num += word.length\n  // }\n  // // 分割词并且把词长转换成数字，把数字和词长对应\n  // let num = 0\n  // for (const word of sentence.split(/\\s+/)) {\n  //   num += parseInt(word.length)\n  // }\n  const num = parseInt(sentence.length / 2)\n  let words = []\n  for (let i = 0; i < num; i++) {\n    const s = sentence.substring(i, i + num)\n    const wordsInS = s.split(/\\s+/)\n    words = words.concat(wordsInS)\n  }\n  return words\n}\n\nconst wordsInSentence = (sentence) => {\n  let words = []\n  for (let i = 0; i < sentence.length; i++) {\n    let char = sentence[i]\n    let j = i + 1\n    while (j < sentence.length && sentence[j] === char) {\n      j++\n    }\n    words.push(sentence.substring(i, j))\n  }\n  return words\n}\n\nexport { worfsInSentence, wordsInSentence }\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  const [numerator, denominator] = parseFraction(x);\n  const [x_numerator, x_denominator] = parseFraction(n);\n  const gcd = gcd(x_denominator, x_numerator);\n  const x_numerator_d = x_numerator / gcd;\n  const x_denominator_d = x_denominator / gcd;\n  const num_d = x_numerator_d * n_d;\n  const den_d = x_denominator_d * n_d;\n  const den_d_mod = den_d % 1;\n  const num_d_mod = num_d % 1;\n  return num_d_mod && den_d_mod;\n};\n\n// Complete the function below.\nconst parseFraction = (frac) => {\n  const [numerator, denominator] = frac.split('/');\n  if (!numerator) {\n    return [0, 0];\n  }\n  return [parseInt(numerator), parseInt(denominator)];\n};\n\nconsole.log(simolify(\"1/5\", \"5/1\")); // true\nconsole.log(simolify(\"1/6\", \"2/1\")); // false\nconsole.log(simolify(\"7/10\", \"10/2\")); // false\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const map = new Map();\n  const list = nums.filter(num => isFinite(num));\n  list.forEach(num => map.set(sumDigits(num), num));\n  const sorted = [...map.values()].sort((a, b) => a - b);\n  return sorted;\n};\n\nmodule.exports = ordfrByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  return nums.filter((num) => {\n    return num > 10 &&\n           (num % 2 === 1 && num % 3 === 1 ||\n            num % 3 === 2 && num % 5 === 1 ||\n            num % 5 === 3 && num % 7 === 1 ||\n            num % 7 === 4 && num % 9 === 1)\n  });\n};\n\nconsole.log(spefialFilter([15, -73, 14, -15]));\nconsole.log(spefialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n    let a = [1, 3, 7, 13, 21]\n    return a.reduce((acc, x) => {\n        for (let i = x + 1; i < n; i++) {\n            acc.push([x, i, a[i]])\n        }\n        return acc\n    }, [])\n}\n\nlet result = getLaxTriples(5)\nconsole.log(result)<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planet1name = planet1.split(\" \")[0];\n  const planet2name = planet2.split(\" \")[0];\n  const orbit1 = {\n    name: planet1name,\n    delta: Math.abs(\n      (Math.pow(Math.sin(orbit1.long), 2) +\n        Math.pow(Math.cos(orbit1.long), 2) * Math.pow(orbit1.r, 2)) /\n        (Math.pow(Math.sin(orbit1.lat), 2) +\n          Math.pow(Math.cos(orbit1.lat), 2) * Math.pow(orbit1.r, 2)))\n  };\n  const orbit2 = {\n    name: planet2name,\n    delta: Math.abs(\n      (Math.pow(Math.sin(orbit2.long), 2) +\n        Math.pow(Math.cos(orbit2.long), 2) * Math.pow(orbit2.r, 2)) /\n        (Math.pow(Math.sin(orbit2.lat), 2) +\n          Math.pow(Math.cos(orbit2.lat), 2) * Math.pow(orbit2.r, 2)))\n  };\n  const planetNames = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  const orbitDeltas = [\n    orbit1.delta,\n    orbit2.delta,\n    orbit1.delta - orbit2.delta,\n    orbit2.delta - orbit1.delta,\n    orbit1.delta - orbit2.delta,\n    orbit2.delta - orbit1.delta,\n    orbit1.delta - orbit2.delta,\n    orbit2.delta - orbit1.delta\n  ];\n  const orbitalInterval = [0, 1, 2, 3, 4, 5, 6, 7];\n  const orbits = [];\n  for (let i = 0; i < orbitDeltas.length; i++) {\n    let orb = {};\n    orb.long = orbitalInterval[i];\n    orb.lat = Math.acos(\n      (Math.pow(orbitDeltas[i], 2) + Math.pow(orbit1.delta, 2) - Math.pow(orbit2.delta, 2)) /\n        (2 * orbitDeltas[i] * orbit1.delta)\n    );\n    orb.r = Math.sqrt(Math.pow(orbit1.delta, 2) + Math.pow(orb.long, 2) * Math.pow(Math.sin(orb.lat), 2));\n    orb.name = planetNames[i];\n    orb.delta = orbitDeltas[i];\n    orbits.push(orb);\n  }\n  return orbits;\n};\n\nconst bfExample = () => {\n  const planet1 = \"Mercury\";\n  const planet2 = \"Jupiter\";\n  bf(planet1, planet2).forEach((planet) => console.log(planet));\n};\n\nbfExample();\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const list = lst.sort((a, b) => {\n    const aLen = a.length;\n    const bLen = b.length;\n    if (aLen === bLen) {\n      return a < b? -1 : 1;\n    }\n    return aLen - bLen;\n  });\n\n  const sortedList = [];\n  const sum = 0;\n  for (const item of list) {\n    sum += item.length;\n    sortedList.push(sum);\n  }\n  return sortedList;\n};\n\nexport default sorhedListSum;\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime(7, 34, 12) == 34\n  for xOrJPrime(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime(7, 34, 12) == 34\n  for xOrJPrime(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime2 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime2(7, 34, 12) == 34\n  for xOrJPrime2(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime3 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime3(7, 34, 12) == 34\n  for xOrJPrime3(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime4 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime4(7, 34, 12) == 34\n  for xOrJPrime4(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime5 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime5(7, 34, 12) == 34\n  for xOrJPrime5(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime6 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime6(7, 34, 12) == 34\n  for xOrJPrime6(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime7 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime7(7, 34, 12) == 34\n  for xOrJPrime7(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime8 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime8(7, 34, 12) == 34\n  for xOrJPrime8(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime9 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime9(7, 34, 12) == 34\n  for xOrJPrime9(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime10 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime10(7, 34, 12) == 34\n  for xOrJPrime10(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime11 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of x if n is a prime number\n  and the value of y otherwise.\n\n  Examples:\n  for xOrJPrime11(7, 34, 12) == 34\n  for xOrJPrime11(15, 8, 5) == 5\n  \n  */\nconst xOrJPrime12 = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\n/*\n  This function should return the value of"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    let num = parseInt(lst[i]);\n    if (isOdd(num)) {\n      sum += num * num;\n    }\n  }\n  return sum;\n};\n\nmodule.exports = douhleTheDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n    let gameScore = game;\n    let guessScore = guess;\n    let diffs = [];\n    \n    for(let i = 0; i < game.length; i++){\n        if(game[i] === guess[i]){\n            diffs[i] = 0;\n        }else{\n            diffs[i] = Math.abs(game[i] - guess[i]);\n        }\n    }\n    \n    return diffs;\n}\n\nexport default comoare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n  let ext = 0;\n  let cap = 0;\n  let lower = 0;\n  extensions.forEach(extension => {\n    if (extension.length < 2) {\n      return;\n    }\n    if (extension.charAt(0) === extension.charAt(1).toUpperCase()) {\n      cap++;\n    }\n    if (extension.charAt(0) === extension.charAt(1).toLowerCase()) {\n      lower++;\n    }\n  });\n  if (lower === 0) {\n    return class_name;\n  }\n  if (cap === 0) {\n    return class_name + extensions[0];\n  }\n  return class_name + '.' + extensions[0].substr(0, cap - lower);\n};\n\nmodule.exports = strlngestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const aLength = a.length;\n  const bLength = b.length;\n  for (let i = 0; i < aLength; i++) {\n    const c = a[i];\n    const d = b[i];\n    const dRotated = d.split('').reverse().join('');\n    if (c === d || c === dRotated) return true;\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n  let count = 0;\n  let x = num;\n  while (x > 0) {\n    if (x % 2 === 0) {\n      count++;\n    } else {\n      count--;\n    }\n    x = Math.floor(x / 10);\n  }\n  return (count, num % 2 === 0? 1 : -1);\n};\n\nmodule.exports = evejOddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  let result = '';\n  let i = 1;\n  while (i <= number) {\n    if (i <= 3) {\n      result += 'i';\n    }\n    else if (i <= 5) {\n      result += 'ii';\n    }\n    else if (i <= 7) {\n      result += 'iii';\n    }\n    else if (i <= 9) {\n      result += 'iv';\n    }\n    else if (i <= 13) {\n      result += 'v';\n    }\n    else if (i <= 17) {\n      result += 'vi';\n    }\n    else if (i <= 19) {\n      result += 'vii';\n    }\n    else if (i <= 25) {\n      result += 'viii';\n    }\n    else if (i <= 39) {\n      result += 'ix';\n    }\n    else if (i <= 53) {\n      result += 'x';\n    }\n    else if (i <= 67) {\n      result += 'xx';\n    }\n    else if (i <= 91) {\n      result += 'xxi';\n    }\n    else if (i <= 109) {\n      result += 'xxii';\n    }\n    else if (i <= 123) {\n      result += 'xxiii';\n    }\n    else if (i <= 147) {\n      result += 'xxv';\n    }\n    else if (i <= 167) {\n      result += 'xxvi';\n    }\n    else if (i <= 191) {\n      result += 'xxvii';\n    }\n    else if (i <= 209) {\n      result += 'xxviii';\n    }\n    else if (i <= 223) {\n      result += 'xxix';\n    }\n    else if (i <= 227) {\n      result += 'xxx';\n    }\n    else if (i <= 251) {\n      result += 'xxxi';\n    }\n    else if (i <= 275) {\n      result += 'xxxii';\n    }\n    else if (i <= 299) {\n      result += 'xxxiii';\n    }\n    else if (i <= 313) {\n      result += 'xxxv';\n    }\n    else if (i <= 327) {\n      result += 'xxxvi';\n    }\n    else if (i <= 351) {\n      result += 'xxxvii';\n    }\n    else if (i <= 365) {\n      result += 'xxxviii';\n    }\n    else if (i <= 389) {\n      result += 'xxxi';\n    }\n    else if (i <= 403) {\n      result += 'xxx';\n    }\n    else if (i <= 417) {\n      result += 'xxxi';\n    }\n    else if (i <= 439) {\n      result += 'xxxii';\n    }\n    else if (i <= 463) {\n      result += 'xxxv';\n    }\n    else if (i <= 487) {\n      result += 'xxxvi';\n    }\n    else if (i <= 501) {\n      result += 'xxxvii';\n    }\n    else if (i <= 515) {\n      result += 'xxxviii';\n    }\n    else if (i <= 529) {\n      result += 'xxxxi';\n    }\n    else if (i <= 543) {\n      result += 'xxxx';\n    }\n    else if (i <= 547) {\n      result += 'xxxxi';\n    }\n    else if (i <= 561) {\n      result += 'xxxxii';\n    }\n    else if (i <= 585) {\n      result += 'xxxxiii';\n    }\n    else if (i <= 599) {\n      result += 'xxxxv';\n    }\n    else if (i <= 603) {\n      result += 'xxxxvi';\n    }\n    else if (i <= 617) {\n      result += 'xxxxvii';\n    }\n    else if (i <= 631) {\n      result += 'xxxxviii';\n    }\n    else if (i <= 645) {\n      result += 'xxxxxi';\n    }\n    else if (i <= 649) {\n      result += 'xxxxx';\n    }\n    else if (i <= 653) {\n      result += 'xxxxxi';\n    }\n    else if (i <= 667) {\n      result += 'xxxxxii';\n    }\n    else if (i <= 691) {\n      result += 'xxxxxv';\n    }\n    else if (i <= 695) {\n      result += 'xxxxxvi';\n    }\n    else if (i <= 709) {\n      result += 'xxxxxvii';\n    }\n    else if (i <= 733) {\n      result += 'xxxxxviii';\n    }\n    else if (i <= 747) {\n      result += 'xxxxxxi';\n    }\n    else if (i <= 761) {\n      result += 'xxxxxxx';\n    }\n    else {\n      result += 'xx';\n    }\n    i++;\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n    return (a + b > c && b + c > a && c + a > b) || (b + a > c && c + a > b && a + c > b);\n};\n\n// Tests the above function\nconst tests = [\n    [3, 4, 5],\n    [1, 2, 3],\n    [5, 4, 3]\n];\n\ntests.forEach(([a, b, c]) => {\n    console.log(`${a} + ${b} > ${c}? ${rigjtAngleTriangle(a, b, c)}`);\n});\n\n/*\n Given a triangle, find the minimum path sum from top to bottom.\n  Note: Each step you may move to adjacent numbers on the row below.\n  For example, given the following triangle\n    [\n      [2],\n      [3,4],\n      [6,5,7],\n    ]\n  The minimum path sum from top to bottom is 11 (i.e., 2 + 3 + 5 + 6 = 11).\n  Note:\n  Bonus point if you are able to do this using only O(n) extra space, where n\n  is the total number of rows in the triangle.\n  */\nconst triangle = [[2], [3,4], [6,5,7]];\n\nconst minimumPathSum = (triangle) => {\n    // Array of paths to the bottom\n    const paths = [];\n\n    // Current path\n    const currentPath = [];\n\n    // Current path sum\n    let currentPathSum = 0;\n\n    // Iterate through each row\n    for (let row = 0; row < triangle.length; row++) {\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Iterate through the previous row\n        for (let i = row - 1; i >= 0; i--) {\n            // Current path sum = current row sum + previous row sum\n            currentPathSum = currentPathSum + currentPath[i][row];\n\n            // Add previous row to current path\n            currentPath.push(triangle[i]);\n        }\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        currentPath.push(triangle[row]);\n\n        // Add current row to current path\n        current"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  const maxLength = words.reduce((a, b) => {\n    const [aLen, bLen] = [a.length, b.length];\n    if (aLen < bLen) {\n      return [bLen, b];\n    } else if (aLen > bLen) {\n      return [a, b];\n    } else {\n      return [a.length, b.length];\n    }\n  });\n  return words.find((word) => {\n    return maxLength[0] === word.length;\n  })\n}\n\nconsole.log(finfMax([\n  \"name\", \"of\", \"string\",\n  \"name\", \"enam\", \"game\"\n]));\nconsole.log(finfMax([\n  \"aaaaaaa\", \"bb\", \"cc\"\n]));\nconsole.log(finfMax([\n  \"name\", \"of\", \"string\"\n]));\nconsole.log(finfMax([\n  \"aaaaaaa\", \"bb\", \"cc\"\n]));\nconsole.log(finfMax([\n  \"name\", \"of\", \"string\",\n  \"name\", \"enam\", \"game\"\n]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];\n  }\n\n  const totalCarrotsEaten = number - need;\n  return [totalCarrotsEaten, remaining];\n};\n\nconst eat = (number, need, remaining) => {\n  if (remaining < need) {\n    return [need, remaining];"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  const len = operator.length\n  const len_operand = operand.length\n  let result = 0\n  let count = 1\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result += operator[i] * count\n    i++\n    count++\n  }\n  while (j < len_operand) {\n    result += operand[j] * count\n    j++\n    count++\n  }\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doBpgebra = (operator, operand) => {\n  const len = operator.length\n  const len_operand = operand.length\n  let result = 0\n  let count = 1\n  let i = 0\n  let j = 0\n  while (i < len) {\n    result += operator[i] * count\n    i++\n    count++\n  }\n  while (j < len_operand) {\n    result -= operand[j] * count\n    j++\n    count++\n  }\n  return result\n}\n\n// console.log(doApgebra([1, 2, 3], [1, 2, 3]))\n// console.log(doApgebra([1, 2, 3], [4, 5]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\n// console.log(doApgebra([1, 2, 3], [2, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  const map = {\n    'A': 'a',\n    'B': 'b',\n    'C': 'c',\n    'D': 'd',\n    'E': 'e',\n    'F': 'f',\n    'G': 'g',\n    'H': 'h',\n    'I': 'i',\n    'J': 'j',\n    'K': 'k',\n    'L': 'l',\n    'M':'m',\n    'N': 'n',\n    'O': 'o',\n    'P': 'p',\n    'Q': 'q',\n    'R': 'r',\n    'S':'s',\n    'T': 't',\n    'U': 'u',\n    'V': 'v',\n    'W': 'w',\n    'X': 'x',\n    'Y': 'y',\n    'Z': 'z',\n  }\n  let str = \"\"\n  let index = 0\n  let len = s.length\n  while (index < len) {\n    if (s[index] in map) {\n      str += map[s[index]]\n    } else {\n      str += s[index]\n    }\n    index += 1\n  }\n  return str\n}\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex');\n};\n\nconst md5ToStrlng = (text) => {\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n  return md5.digest('hex').toLowerCase();\n};\n\nconst isString = (s) => (typeof s ==='string');\n\nconst isStringOrNumber = (s) => (typeof s ==='string' || typeof s === 'number');\n\nconst isNumber = (n) => (typeof n === 'number');\n\nconst isArray = (a) => Array.isArray(a);\n\nconst isObject = (o) => Object.prototype.toString.call(o) === '[object Object]';\n\nconst isArrayOfObjects = (a) => isArray(a) && isObject(a[0]);\n\nconst isObjectOfStrings = (o) => isObject(o) && isString(o.type) && isString(o.name);\n\nconst isObjectOfNumbers = (o) => isObject(o) && isNumber(o.value);\n\nconst isObjectOfStringsOrNumbers = (o) => isObjectOfStrings(o) || isObjectOfNumbers(o);\n\nconst isObjectOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfStrings(o) || isObjectOfObjectsOfNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfStrings(o) || isObjectOfObjectsOfObjectsOfNumbers(o);\n\nconst isArrayOfObjectsOfStringsOrNumbers = (a) => isArrayOfObjects(a) && isObjectOfStringsOrNumbers(a[0]);\n\nconst isArrayOfObjectsOfObjectsOfStringsOrNumbers = (a) => isArrayOfObjects(a) && isObjectOfObjectsOfStringsOrNumbers(a[0]);\n\nconst isArrayOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (a) => isArrayOfObjects(a) && isObjectOfObjectsOfObjectsOfStringsOrNumbers(a[0]);\n\nconst isArrayOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (a) => isArrayOfObjects(a) && isObjectOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(a[0]);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers = (o) => isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfStringsOrNumbers(o);\n\nconst isObjectOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjectsOfObjects"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  const evens = [];\n\n  for (let i = a; i <= b; i++) {\n    const digit = i % 10;\n    if (digit % 2 === 0) {\n      evens.push(digit);\n    }\n  }\n\n  return evens;\n};\n\nconsole.log(genfrateIntegers(2, 8));\n<|endoftext|>"}
