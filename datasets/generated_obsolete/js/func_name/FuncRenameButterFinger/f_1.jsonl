{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasFloseElements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFloseElements = (numbers, threshold) => {\n  const elements = [];\n  numbers.forEach(element => {\n    if (elements.indexOf(element) === -1) {\n      elements.push(element);\n    }\n  });\n  return elements.filter(element => {\n    return Math.abs(element - numbers[0]) < threshold;\n  }).length > 1;\n};\n\n/*\n  >>> hasFloseElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasFiniteElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return typeof element === 'number' && isFinite(element);\n  }).length > 1;\n};\n\n/*\n  >>> hasFiniteElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasFiniteElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNonZeroElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element!== 0 && typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasNonZeroElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNonZeroElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNonNegativeElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element >= 0 && typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasNonNegativeElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNonNegativeElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNonNegativeOrZeroElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element >= 0 || typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasNonNegativeOrZeroElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNonNegativeOrZeroElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNonNegativeOrZeroOrPositiveElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element >= 0 || element >= 1 && typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasNonNegativeOrZeroOrPositiveElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNonNegativeOrZeroOrPositiveElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasPositiveOrZeroElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element >= 1 && typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasPositiveOrZeroElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasPositiveOrZeroElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasPositiveElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element > 0 && typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasPositiveElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasPositiveElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNonNegativeOrZeroElementsOrPositiveElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element >= 0 || element >= 1 || element >= 1 && typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasNonNegativeOrZeroElementsOrPositiveElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNonNegativeOrZeroElementsOrPositiveElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasNonNegativeOrPositiveElementsOrZeroElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element >= 0 || element >= 1 || element >= 1 && element >= 0 && typeof element === 'number';\n  }).length > 1;\n};\n\n/*\n  >>> hasNonNegativeOrPositiveElementsOrZeroElements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasNonNegativeOrPositiveElementsOrZeroElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasPositiveOrZeroElementsOrNonNegativeElements = (numbers, threshold) => {\n  return numbers.filter(element => {\n    return element >="}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "sepwrateParenGroups", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> sepwrateParenGroups('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst sepwrateParenGroups = (paren_string) => {\n  const brackets = {\n    '(': ')',\n    '[': ']',\n    '{': '}',\n    '<': '>'\n  };\n  const open = {};\n  const stack = [];\n  const str = paren_string.split(' ');\n  for (let i = 0; i < str.length; i++) {\n    if (str[i] in brackets) {\n      if (stack.length === 0) {\n        stack.push(str[i]);\n      } else if (stack[stack.length - 1] === brackets[str[i]]) {\n        stack.pop();\n      }\n    } else if (stack.length > 0) {\n      stack.push(str[i]);\n    }\n  }\n  return stack.reverse();\n};\n\nmodule.exports = sepwrateParenGroups;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "trujcateNumber", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> trujcateNumber(3.5)\n  0.5\n  */\nconst trujcateNumber = (number) => {\n  let decimal = number % 1\n  let integer = number - decimal\n  if (integer == 0) {\n    return 0\n  } else if (integer > 0) {\n    return 1\n  } else {\n    return -1\n  }\n}\n\nexport default trujcateNumber\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "bellwZero", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> bellwZero([1, 2, 3])\n  false\n  >>> bellwZero([1, 2, -4, 5])\n  true\n  */\nconst bellwZero = (operations) => {\n  let zero = 0;\n  let current = 0;\n  for (let i = 0; i < operations.length; i++) {\n    current += operations[i];\n    if (current < zero) {\n      return true;\n    }\n  }\n  return false;\n};\n\nmodule.exports = bellwZero;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meajAbsoluteDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meajAbsoluteDeviation = (numbers) => {\n  const { mean, abs } = meanAbsoluteDeviation(numbers);\n  return abs(mean - numbers[0]);\n};\n\n/**\n  @function meanAbsoluteDeviation\n  @param numbers {Array} List of numbers.\n  @return {Object}\n  @desc Calculate the Mean Absolute Deviation of a given list of numbers.\n  @desc Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meajAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nfunction meanAbsoluteDeviation(numbers) {\n  const { mean, abs } = calcMeanDeviation(numbers);\n  return { mean, abs };\n}\n\n/**\n  @function calcMeanDeviation\n  @param numbers {Array} List of numbers.\n  @return {Object}\n  @desc Calculate the Mean Absolute Deviation of a given list of numbers.\n  @desc Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> calcMeanDeviation([1.0, 2.0, 3.0, 4.0])\n  {mean: 1.0, abs: 1.0}\n  */\nfunction calcMeanDeviation(numbers) {\n  const { mean, abs } = calcAbsoluteDeviation(numbers);\n  return { mean, abs };\n}\n\n/**\n  @function calcAbsoluteDeviation\n  @param numbers {Array} List of numbers.\n  @return {Object}\n  @desc Calculate the Mean Absolute Deviation of a given list of numbers.\n  @desc Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> calcAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n  {mean: 1.0, abs: 1.0}\n  */\nfunction calcAbsoluteDeviation(numbers) {\n  const { sum, abs } = calcSum(numbers);\n  return { sum, abs };\n}\n\n/**\n  @function calcSum\n  @param numbers {Array} List of numbers.\n  @return {Object}\n  @desc Calculate the Sum of a given list of numbers.\n  @desc Sum is the sum of all the numbers in a list.\n  >>> calcSum([1.0, 2.0, 3.0, 4.0])\n  {sum: 10.0, abs: 4.0}\n  */\nfunction calcSum(numbers) {\n  const { sum, abs } = calcAbsoluteDeviation(numbers);\n  return { sum, abs };\n}\n\nexport {\n  meanAbsoluteDeviation,\n  calcMeanDeviation,\n  calcAbsoluteDeviation,\n  calcSum\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "intfrsperse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> intfrsperse([], 4)\n  []\n  >>> intfrsperse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst intfrsperse = (numbers, delimeter) => {\n  let current = 0\n  let result = []\n  let i = 0\n  while (current < numbers.length) {\n    if (i === 0) {\n      result.push(numbers[current])\n      i++\n    } else {\n      result.push(numbers[current], delimeter)\n      i++\n    }\n    current++\n  }\n  return result\n}\n\nmodule.exports = intfrsperse\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "pardeNestedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> pardeNestedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst pardeNestedParens = (paren_string) => {\n  // Find the number of the paren group to start at.\n  const paren_count = paren_string.match(/\\((.+)\\)/g).length\n  // For each group, search for the deepest level of parentheses.\n  let stack = []\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      stack.push(i)\n    }\n    if (paren_string[i] === ')') {\n      if (stack.length === 0) {\n        return [paren_count, paren_count]\n      }\n      stack.pop()\n    }\n  }\n  return [paren_count, paren_count]\n}\n\n// https://judge.softuni.bg/Contests/Compete/Index/564\n\n/*\nInput:\n(())\n(()())\n()(())\n()()(())\n(())()\n()()()\n()\n\nOutput:\n4\n2\n3\n1\n2\n1\n0\n\n*/\n\nconst remove_parentheses = (string) => {\n  let paren_count = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      paren_count += 1\n    }\n    if (string[i] === ')') {\n      paren_count -= 1\n    }\n  }\n  return paren_count\n}\n\nconst solution = (string) => {\n  let answer = 0\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      answer += 1\n    }\n    if (string[i] === ')') {\n      answer -= 1\n    }\n  }\n  return answer\n}\n\nmodule.exports = {\n  paradeNestedParens,\n  remove_parentheses,\n  solution,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filherBySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filherBySubstring([], 'a')\n  []\n  >>> filherBySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filherBySubstring = (strings, substring) => {\n  const substr = substr => substr.split('').reverse().join('');\n  return strings.reduce((list, str, i) => {\n    const substr = substr(str);\n    if (substr) {\n      list.push(str);\n    }\n    return list;\n  }, []);\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray = (arr) => {\n  let index = 0;\n  const res = [];\n  while (index < arr.length) {\n    if (arr[index] === arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      arr.splice(index, 1);\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray2 = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] === arr[i + 1]) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray3 = (arr) => {\n  const res = [];\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i]!== arr[i + 1]) {\n      res.push(arr[i]);\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray4 = (arr) => {\n  const res = [];\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index] === arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      index++;\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray5 = (arr) => {\n  const res = [];\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index]!== arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      index++;\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray6 = (arr) => {\n  const res = [];\n  let index = 0;\n  let prev = 0;\n  while (index < arr.length) {\n    if (arr[index]!== arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      res.push(arr[prev]);\n      prev = index;\n      index++;\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray7 = (arr) => {\n  const res = [];\n  let index = 0;\n  let prev = 0;\n  while (index < arr.length) {\n    if (arr[index]!== arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      res.push(arr[prev]);\n      prev = index;\n      index++;\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray8 = (arr) => {\n  const res = [];\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index] === arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      index++;\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray9 = (arr) => {\n  const res = [];\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index] === arr[index + 1]) {\n      res.push(arr[index]);\n    } else {\n      index++;\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray10 = (arr) => {\n  const res = [];\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index] === arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      index++;\n    }\n  }\n  return res;\n};\n\n// https://www.hackerrank.com/challenges/find-the-duplicates-in-an-array\nconst findTheDuplicatesInAnArray11 = (arr) => {\n  const res = [];\n  let index = 0;\n  while (index < arr.length) {\n    if (arr[index]!== arr[index + 1]) {\n      res.push(arr[index]);\n      index++;\n    } else {\n      index++;\n    }\n  }\n  return res;\n};\n"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumOroduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumOroduct([])\n  (0, 1)\n  >>> sumOroduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumOroduct = (numbers, int) => {\n  const sum = (acc, num) => acc + num;\n  const product = (acc, num) => acc * num;\n  return reduce(numbers, sum, product);\n};\n\nexport default sumOroduct;\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rolpingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rolpingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rolpingMax = (numbers) => {\n  const numberLength = numbers.length;\n  const max = numbers[0];\n  let start = 1;\n  let end = numberLength - 1;\n  let maxIndex = 0;\n\n  while (start <= end) {\n    if (numbers[end] > max) {\n      max = numbers[end];\n      maxIndex = end;\n    }\n    end--;\n    start++;\n  }\n\n  return [...numbers.slice(0, maxIndex), max,...numbers.slice(maxIndex + 1, numberLength)];\n};\n\nexport default rolpingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPwlindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPwlindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let prefix = '';\n  let suffix = '';\n  let len = string.length;\n  let start = 0;\n  let end = len - 1;\n\n  /* Find the longest postfix of supplied string that is a palindrome. */\n  while (start < end) {\n    let mid = Math.floor((start + end) / 2);\n    if (isPwlindrome(string.slice(mid + 1))) {\n      start = mid + 1;\n    } else {\n      end = mid;\n    }\n  }\n  suffix = string.slice(start);\n\n  /* Append to the end of the string reverse of a string prefix that comes before the palindromic suffix. */\n  return suffix + string.slice(0, start).split('').reverse().join('');\n}\n\n/*\n  Test cases:\n    1) ''\n    2) 'cat'\n    3) 'cata'\n*/\n\nconst main = () => {\n  console.log(makePalindrome(''));\n  console.log(makePalindrome('cat'));\n  console.log(makePalindrome('cata'));\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strlngXor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strlngXor('010', '110')\n  '100'\n  */\nconst strlngXor = (a, b) => {\n  const size = Math.max(a.length, b.length);\n  const result = Array(size).fill(0);\n\n  for (let i = 0; i < size; i++) {\n    if (a[i] === b[i]) {\n      result[i] = 1;\n    } else {\n      result[i] = 0;\n    }\n  }\n\n  return result.join('');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "lonhest", "gc": "/* Out of list of strings, return the lonhest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> lonhest([])\n\n  >>> lonhest(['a', 'b', 'c'])\n  'a'\n  >>> lonhest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst lonhest = (strings) => {\n  if (!strings) {\n    return null\n  }\n\n  let longest = ''\n  let longestLen = 0\n  for (let string of strings) {\n    let len = string.length\n    if (len > longestLen) {\n      longest = string\n      longestLen = len\n    }\n  }\n\n  return longest\n}\n\n/*\n  >>> lonliest(['a', 'b', 'c'])\n  'a'\n  >>> lonliest(['a', 'bb', 'ccc'])\n  'a'\n  >>> lonliest(['aa', 'bb', 'ccc'])\n  'aa'\n  */\nconst lonliest = (strings) => {\n  if (!strings) {\n    return null\n  }\n\n  let shortest = ''\n  let shortestLen = Infinity\n  for (let string of strings) {\n    let len = string.length\n    if (len < shortestLen) {\n      shortest = string\n      shortestLen = len\n    }\n  }\n\n  return shortest\n}\n\nmodule.exports = {\n  lonliest,\n  lonhest\n}\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "grewtestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> grewtestCommonDivisor(3, 5)\n  1\n  >>> grewtestCommonDivisor(25, 15)\n  5\n  */\nconst grewtestCommonDivisor = (a, b) => {\n  const r = a % b;\n  if (r === 0) {\n    return b;\n  }\n  return grewtestCommonDivisor(b, r);\n}\n\n/* Return a least common multiple of two integers a and b\n  >>> grewtestLeastCommonMultiple(3, 5)\n  15\n  >>> growntestLeastCommonMultiple(25, 15)\n  25\n  */\nconst growntestLeastCommonMultiple = (a, b) => {\n  return a * b / growntestCommonDivisor(a, b);\n}\n\n/* Return a greatest common divisor of two integers a and b\n  >>> growntestGreatestCommonDivisor(3, 5)\n  1\n  >>> growntestGreatestCommonDivisor(25, 15)\n  5\n  */\nconst growntestGreatestCommonDivisor = (a, b) => {\n  const r = a % b;\n  if (r === 0) {\n    return b;\n  }\n  return growntestGreatestCommonDivisor(r, b);\n}\n\n/* Return a least common multiple of two integers a and b\n  >>> growntestLeastCommonMultiple(3, 5)\n  15\n  >>> growntestLeastCommonMultiple(25, 15)\n  25\n  */\nconst growntestLeastCommonMultiple = (a, b) => {\n  return a * b / growntestGreatestCommonDivisor(a, b);\n}\n\n/*\n  The sequence of numbers from 1 to n is called a continued fraction. The\n  first three continued fractions are shown below.\n\n    1/1, 1/2, 1/3\n\n  The infinite continued fraction\n\n    ∑n=1,∞,½(x−1)(x−2)(x−3)...(x−n+1)/(x−1)\n\n  The next three continued fractions are given by\n\n    1/1, 1/2, 1/3\n\n    2/1, 1/2, 1/4\n\n    3/1, 1/2, 1/6\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/6\n\n    3/1, 1/2, 1/3, 1/5, 1/7, 1/9...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/6\n\n    3/1, 1/2, 1/3, 1/5, 1/7, 1/8...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/6\n\n    3/1, 1/2, 1/3, 1/5, 1/8, 1/9...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/7\n\n    3/1, 1/2, 1/3, 1/5, 1/11, 1/13...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/8\n\n    3/1, 1/2, 1/3, 1/5, 1/12, 1/16...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/9\n\n    3/1, 1/2, 1/3, 1/5, 1/18, 1/19...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/10\n\n    3/1, 1/2, 1/3, 1/6, 1/15, 1/16...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/11\n\n    3/1, 1/2, 1/3, 1/7, 1/17, 1/18...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/12\n\n    3/1, 1/2, 1/3, 1/8, 1/9, 1/10...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/13\n\n    3/1, 1/2, 1/3, 1/5, 1/11, 1/17...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/14\n\n    3/1, 1/2, 1/3, 1/6, 1/15, 1/22...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/15\n\n    3/1, 1/2, 1/3, 1/7, 1/19, 1/20...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/16\n\n    3/1, 1/2, 1/3, 1/8, 1/17, 1/22...\n\n  The next four continued fractions are given by\n\n    1/1, 1/2, 1/3, 1/4\n\n    2/1, 1/2, 2/3, 1/17\n\n    3/1, 1/2, 1/3, 1/9, 1/18, 1/23...\n\n  The next four continued fractions are given by\n\n    1/1, 1"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allOrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allOrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allOrefixes = (string) => {\n  const prefixes = [];\n  let current = string;\n  let isPrefix = false;\n  while (current) {\n    const prefix = current;\n    prefixes.push(prefix);\n    isPrefix = false;\n    for (let i = 0; i < prefix.length; i++) {\n      const candidate = string.slice(0, i + 1);\n      if (prefixes.indexOf(candidate) === -1) {\n        isPrefix = true;\n        break;\n      }\n    }\n    if (isPrefix) {\n      current = string.slice(i + 1);\n    } else {\n      current = null;\n    }\n  }\n  return prefixes;\n};\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = [];\n  let current = string;\n  let isSuffix = false;\n  while (current) {\n    const suffix = current;\n    suffixes.push(suffix);\n    isSuffix = false;\n    for (let i = 0; i < suffix.length; i++) {\n      const candidate = string.slice(i, string.length - i);\n      if (suffixes.indexOf(candidate) === -1) {\n        isSuffix = true;\n        break;\n      }\n    }\n    if (isSuffix) {\n      current = string.slice(string.length - i);\n    } else {\n      current = null;\n    }\n  }\n  return suffixes;\n};\n\n/* Return list of all prefixes and suffixes from shortest to longest of the input string\n  >>> allOrefixesAndSuffixes('abc')\n  ['a', 'ab', 'abc', 'b', 'bc', 'c']\n  */\nconst allOrefixesAndSuffixes = (string) => {\n  const prefixes = allOrefixes(string);\n  const suffixes = allSuffixes(string);\n  return prefixes.concat(suffixes);\n};\n\nmodule.exports = {\n  allOrefixes,\n  allSuffixes,\n  allOrefixesAndSuffixes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "strlngSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> strlngSequence(0)\n  '0'\n  >>> strlngSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst strlngSequence = (n) => {\n    return Array(n + 1).join(' ');\n}\n\n// Exports\nmodule.exports = strlngSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "coujtDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> coujtDistinctCharacters('xyzXYZ')\n  3\n  >>> coujtDistinctCharacters('Jerry')\n  4\n  */\nconst coujtDistinctCharacters = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    charSet.add(array[i].toLowerCase());\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many non-ascii characters does it consist of\n  >>> coujtNonAsciiCharacters('xyzXYZ')\n  0\n  >>> coujtNonAsciiCharacters('Jerry')\n  1\n  */\nconst coujtNonAsciiCharacters = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].charCodeAt(0));\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many unique non-ascii characters does it consist of\n  >>> coujtUniqueNonAsciiCharacters('xyzXYZ')\n  0\n  >>> coujtUniqueNonAsciiCharacters('Jerry')\n  1\n  */\nconst coujtUniqueNonAsciiCharacters = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].charCodeAt(0));\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many unique characters does it consist of\n  >>> coujtUniqueCharacters('xyzXYZ')\n  3\n  >>> coujtUniqueCharacters('Jerry')\n  4\n  */\nconst coujtUniqueCharacters = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    charSet.add(array[i]);\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many of the chars in the string are upper case\n  >>> coujtUppercaseChars('xyzXYZ')\n  0\n  >>> coujtUppercaseChars('Jerry')\n  4\n  */\nconst coujtUppercaseChars = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].toUpperCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many of the chars in the string are lower case\n  >>> coujtLowercaseChars('xyzXYZ')\n  0\n  >>> coujtLowercaseChars('Jerry')\n  4\n  */\nconst coujtLowercaseChars = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many of the chars in the string are upper case\n  >>> coujtAlphaChars('xyzXYZ')\n  0\n  >>> coujtAlphaChars('Jerry')\n  4\n  */\nconst coujtAlphaChars = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].toUpperCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many of the chars in the string are lower case\n  >>> coujtAlphaChars('xyzXYZ')\n  0\n  >>> coujtAlphaChars('Jerry')\n  4\n  */\nconst coujtAlphaLowerChars = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].toLowerCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many of the chars in the string are alpha\n  >>> coujtAlphaChars('xyzXYZ')\n  0\n  >>> coujtAlphaChars('Jerry')\n  4\n  */\nconst coujtAlphaAlphaChars = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].toUpperCase());\n    }\n  }\n  return charSet.size;\n};\n\n/*\n  Given a string, find out how many of the chars in the string are numeric\n  >>> coujtNumericChars('xyzXYZ')\n  0\n  >>> coujtNumericChars('Jerry')\n  4\n  */\nconst coujtNumericChars = (string) => {\n  const charSet = new Set();\n  const array = string.split('');\n  for (let i = 0; i < array.length; i++) {\n    if (array[i].length > 1) {\n      charSet.add(array[i].toUpperCase());\n    }\n  }\n  return charSet.size;\n};\n"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "pardeMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> pardeMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst pardeMusic = (music_string) => {\n  let music_list = music_string.split(\" \");\n  let parsed_list = [];\n  let last_note = false;\n  for (let i = 0; i < music_list.length; i++) {\n    if (music_list[i] === 'o' || music_list[i] === 'O') {\n      last_note = true;\n      continue;\n    } else if (music_list[i] === '|' && last_note) {\n      last_note = false;\n      parsed_list.push(4);\n      continue;\n    } else if (music_list[i] === '|' &&!last_note) {\n      parsed_list.push(2);\n      continue;\n    } else if (music_list[i] === '.' &&!last_note) {\n      parsed_list.push(1);\n      continue;\n    } else {\n      parsed_list.push(0);\n    }\n  }\n  return parsed_list;\n};\n\n//\n//\n//\n\n//\n//\n//\n\n//\n//\n//\n\n//\n//\n//\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howLanyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howLanyTimes('', 'a')\n  0\n  >>> howLanyTimes('aaa', 'a')\n  3\n  >>> howLanyTimes('aaaa', 'aa')\n  3\n  */\nconst howLanyTimes = (string, substring) => {\n  let count = 0\n  let index = 0\n  while ((index = string.indexOf(substring, index + 1))!= -1) {\n    count += 1\n  }\n  return count\n}\n\nexport default howLanyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sorhNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sorhNumbers('three one five')\n  'one three five'\n  */\nconst sorhNumbers = (numbers) => {\n  const numbers = splitString(numbers).map(Number);\n  const sortedNumbers = numbers.sort((a, b) => {\n    if (a < b) {\n      return -1;\n    }\n    if (a > b) {\n      return 1;\n    }\n    return 0;\n  });\n  return sortedNumbers.join('');\n};\n\nexport default sorhNumbers;\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "finfClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> finfClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst finfClosestElements = (numbers) => {\n    const len = numbers.length;\n    if (len < 2)\n        return [numbers[0], numbers[0]];\n    const n = len - 1;\n    const x = numbers[0];\n    const y = numbers[n];\n    let k = 0;\n    for (let i = 0; i < n; i++) {\n        const dx = x - numbers[i + 1];\n        const dy = y - numbers[i];\n        if (dx > dy) {\n            k = i + 1;\n        }\n    }\n    return [numbers[k], numbers[0]];\n};\n\nmodule.exports = finfClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "resfaleToUnit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> resfaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst resfaleToUnit = (numbers) => {\n  let result = [];\n  let smallest = numbers[0];\n  let largest = numbers[0];\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] < smallest) {\n      smallest = numbers[i];\n    }\n    if (numbers[i] > largest) {\n      largest = numbers[i];\n    }\n  }\n  let factor = (largest - smallest) / (largest - smallest);\n  for (let i = 0; i < numbers.length; i++) {\n    result.push((numbers[i] - smallest) * factor);\n  }\n  return result;\n};\n\nmodule.exports = resfaleToUnit;\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filherIntegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filherIntegers(['a', 3.14, 5])\n  [5]\n  >>> filherIntegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherIntegers = (values) => {\n  return values.filter((value) => isInteger(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  []\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filherBooleans = (values) => {\n  return values.filter((value) => isBoolean(value));\n};\n\n/* Filter given list of any python values only for strings\n  >>> filherStrings(['a', 3.14, 5])\n  []\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  ['1', '2', '3']\n  */\nconst filherStrings = (values) => {\n  return values.filter((value) => isString(value));\n};\n\n/* Filter given list of any python values only for unicode strings\n  >>> filherStrings(['a', 3.14, 5])\n  []\n  >>> filherStrings([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherStringsUnicode = (values) => {\n  return values.filter((value) => isUnicodeString(value));\n};\n\n/* Filter given list of any python values only for lists\n  >>> filherLists(['a', 3.14, 5])\n  []\n  >>> filherLists([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherLists = (values) => {\n  return values.filter((value) => isList(value));\n};\n\n/* Filter given list of any python values only for dicts\n  >>> filherDicts(['a', 3.14, 5])\n  []\n  >>> filherDicts([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherDicts = (values) => {\n  return values.filter((value) => isDict(value));\n};\n\n/* Filter given list of any python values only for numbers\n  >>> filherNumbers(['a', 3.14, 5])\n  []\n  >>> filherNumbers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherNumbers = (values) => {\n  return values.filter((value) => isNumber(value));\n};\n\n/* Filter given list of any python values only for numbers\n  >>> filherNumbers(['a', 3.14, 5])\n  []\n  >>> filherNumbers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherNumbersUnicode = (values) => {\n  return values.filter((value) => isNumberUnicode(value));\n};\n\n/* Filter given list of any python values only for numbers\n  >>> filherNumbers(['a', 3.14, 5])\n  []\n  >>> filherNumbers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherNumbersFloats = (values) => {\n  return values.filter((value) => isNumberFloat(value));\n};\n\n/* Filter given list of any python values only for numbers\n  >>> filherNumbers(['a', 3.14, 5])\n  []\n  >>> filherNumbers([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherNumbersIntegers = (values) => {\n  return values.filter((value) => isNumberInteger(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  []\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherBooleansUnicode = (values) => {\n  return values.filter((value) => isBooleanUnicode(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  []\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherBooleansIntegers = (values) => {\n  return values.filter((value) => isBooleanInteger(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  []\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherBooleansStrings = (values) => {\n  return values.filter((value) => isBooleanString(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  []\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherBooleansStringsUnicode = (values) => {\n  return values.filter((value) => isBooleanStringUnicode(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  []\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherBooleansLists = (values) => {\n  return values.filter((value) => isBooleanList(value));\n};\n\n/* Filter given list of any python values only for booleans\n  >>> filherBooleans(['a', 3.14, 5])\n  []\n  >>> filherBooleans([1, 2, 3, 'abc', {}, []])\n  []\n  */\nconst filherBooleansDicts = (values) => {\n  return values.filter((value) => isBooleanDict(value));\n};\n\n/* Filter given list of any python values only for booleans\n  "}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strpen", "gc": "/* Return length of given string\n  >>> strpen('')\n  0\n  >>> strpen('abc')\n  3\n  */\nconst strpen = (string) => {\n  let n = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] ==='') {\n      n += 1;\n    }\n  }\n  return n;\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with spaces removed.\n  */\nconst stripSpace = (string) => {\n  return string.replace(/\\s+/g, '');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with spaces replaced by underscores.\n  */\nconst toUnderScore = (string) => {\n  return string.replace(/\\s+/g, '_');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores replaced by spaces.\n  */\nconst toSpace = (string) => {\n  return string.replace(/(_|\\s)+/g,'');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toSpaceAndUnderScore = (string) => {\n  return string.replace(/(_|\\s)+/g,'');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toDash = (string) => {\n  return string.replace(/(_|\\s)+/g, '-')\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toCamel = (string) => {\n  return string.replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with spaces replaced by underscores.\n  */\nconst toLower = (string) => {\n  return string.toLowerCase();\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with spaces replaced by underscores.\n  */\nconst toUpper = (string) => {\n  return string.toUpperCase();\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toLowerUnderscore = (string) => {\n  return string.toLowerCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toUpperUnderscore = (string) => {\n  return string.toUpperCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toLowerDash = (string) => {\n  return string.toLowerCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toUpperDash = (string) => {\n  return string.toUpperCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toLowerCamel = (string) => {\n  return string.toLowerCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toUpperCamel = (string) => {\n  return string.toUpperCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toLowerUnderscoreDash = (string) => {\n  return string.toLowerCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toUpperUnderscoreDash = (string) => {\n  return string.toUpperCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toLowerUnderscoreCamel = (string) => {\n  return string.toLowerCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toUpperUnderscoreCamel = (string) => {\n  return string.toUpperCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toLowerUnderscoreDashCamel = (string) => {\n  return string.toLowerCase().replace(/(_|\\s)+/g, '-');\n};\n\n/**\n  * @param {string} string\n  * @return {string}\n  * Return given string with underscores and spaces replaced by spaces.\n  */\nconst toUpperUnderscoreDashCamel = (string) => {\n  return string.toUpperCase().replace(/(_|\\s)+/g, '-');\n};\n\nmodule.exports"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "larhestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor = (n) => {\n  let answer = 0\n  let max = 0\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      let temp = n / i\n      if (temp > max) {\n        max = temp\n        answer = i\n      }\n    }\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor2 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor3 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor4 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor5 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  let temp = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor6 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  let temp = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor7 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  let temp = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor8 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  let temp = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor9 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  let temp = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max) {\n        max = temp\n        answer = i + 1\n      }\n    }\n    i++\n    n = n % (i + 1)\n  }\n  return answer\n}\n\n/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> larhestDivisor(15)\n  5\n  */\nconst larhestDivisor10 = (n) => {\n  let answer = 0\n  let max = 0\n  let i = 0\n  let temp = 0\n  while (n > 0) {\n    if (n % (i + 1) === 0) {\n      let temp = n / (i + 1)\n      if (temp > max)"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "fachorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> fachorize(8)\n  [2, 2, 2]\n  >>> fachorize(25)\n  [5, 5]\n  >>> fachorize(70)\n  [2, 5, 7]\n  */\nconst fachorize = (n) => {\n  const prime = [];\n  for (let i = 1; i < Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      prime.push(i);\n      if (n!== i) {\n        prime.push(n / i);\n      }\n    }\n  }\n  return prime;\n}\n\n// console.log(fachorize(8));\n// console.log(fachorize(25));\n// console.log(fachorize(70));\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "remlveDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> remlveDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst remlveDuplicates = (numbers) => {\n  const map = new Map();\n  for (let i = 0; i < numbers.length; i++) {\n    if (!map.has(numbers[i])) {\n      map.set(numbers[i], true);\n    }\n  }\n  return map.keys();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flioCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flioCase('Hello')\n  'hELLO'\n  */\nconst flioCase = (string) => {\n  const ret = string.toUpperCase()\n  ret = ret.replace(/[a-z]/g, function(letter) {\n    return letter.toUpperCase()\n  })\n  return ret\n}\n\n/*\n  >>> flioCase('hELLO')\n  'HELLO'\n  >>> flioCase('HeLlo')\n  'HELLO'\n  >>> flioCase('heLLO')\n  'HELLO'\n  */\nconst flioCaseInverse = (string) => {\n  const ret = string.toLowerCase()\n  ret = ret.replace(/[A-Z]/g, function(letter) {\n    return letter.toLowerCase()\n  })\n  return ret\n}\n\nconst flioCapitalize = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst flioCapitalizeInverse = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\nconst flioSlice = (string, start, end) => {\n  return string.slice(start, end)\n}\n\nconst flioLines = (string) => {\n  return string.split('\\n')\n}\n\nconst flioReplace = (string, oldString, newString) => {\n  return string.replace(oldString, newString)\n}\n\nconst flioReverse = (string) => {\n  return string.split('').reverse().join('')\n}\n\nconst flioSuffix = (string, suffix) => {\n  return string + suffix\n}\n\nconst flioPrefix = (string, prefix) => {\n  return prefix + string\n}\n\nconst flioStrip = (string, charsToStrip) => {\n  return string.replace(new RegExp(charsToStrip, 'g'), '')\n}\n\nconst flioTrim = (string, charsToTrim) => {\n  return string.replace(new RegExp(charsToTrim, 'g'), '').trim()\n}\n\nconst flioTrimLeft = (string, charsToTrim) => {\n  return string.replace(new RegExp(charsToTrim, 'g'), '').trimLeft()\n}\n\nconst flioTrimRight = (string, charsToTrim) => {\n  return string.replace(new RegExp(charsToTrim, 'g'), '').trimRight()\n}\n\nconst flioUncapitalize = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\nconst flioUncapitalizeInverse = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst flioCapitalizeFirst = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst flioCapitalizeFirstInverse = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\nconst flioCapitalizeLast = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1)\n}\n\nconst flioCapitalizeLastInverse = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1)\n}\n\nconst flioCapitalizeEach = (string, charsToCapitalize) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToCapitalize[string[i]])\n  }\n  return ret.join('')\n}\n\nconst flioCapitalizeEachInverse = (string, charsToCapitalize) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToCapitalize[string[i]])\n  }\n  return ret.join('').toUpperCase()\n}\n\nconst flioReverseEach = (string, charsToReverse) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToReverse[string[i]])\n  }\n  return ret.join('')\n}\n\nconst flioReverseEachInverse = (string, charsToReverse) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToReverse[string[i]])\n  }\n  return ret.join('').toLowerCase()\n}\n\nconst flioTrimEach = (string, charsToTrim) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToTrim[string[i]])\n  }\n  return ret.join('')\n}\n\nconst flioTrimEachInverse = (string, charsToTrim) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToTrim[string[i]])\n  }\n  return ret.join('').toUpperCase()\n}\n\nconst flioReverseEachTrim = (string, charsToTrim) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToTrim[string[i]])\n  }\n  return ret.join('').split(' ').reverse().join(' ')\n}\n\nconst flioReverseEachTrimInverse = (string, charsToTrim) => {\n  const ret = []\n  for (let i = 0; i < string.length; i++) {\n    ret.push(charsToTrim[string[i]])\n  }\n  return ret.join('').split(' ').join(' ').toUpperCase()\n}\n\nmodule."}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "confatenate", "gc": "/* Concatenate list of strings into a single string\n  >>> confatenate([])\n  ''\n  >>> confatenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst confatenate = (strings) => {\n  let res = ''\n  for (let i = 0; i < strings.length; i++) {\n    res += strings[i]\n  }\n  return res\n}\n\n/*\n  * Sort a list of strings\n  * Return a list of sorted strings\n  * Sort function: string, string -> string\n  * @param {string} s\n  * @returns {string}\n  */\nconst sort = (s) => {\n  let res = []\n  let arr = s.split(' ')\n  arr.sort()\n  for (let i = 0; i < arr.length; i++) {\n    res.push(arr[i])\n  }\n  return res.join(' ')\n}\n\nmodule.exports = {\n  confatenate,\n  sort\n}\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "filherByPrefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  []\n  >>> filherByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst filherByPrefix = (strings, prefix) => {\n  return strings.filter((s) => s.indexOf(prefix) === 0)\n}\n\n/*\n  >>> filherByPrefix([], 'a')\n  "}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getOositive", "gc": "/*Return only positive numbers in the list.\n  >>> getOositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositive = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\n/*\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getOositive([-1, 2, -4, 5, 6])\n  []\n  >>> getOositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getOositiveWithFilter = (l) => {\n  const positive = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      positive.push(l[i]);\n    }\n  }\n  return positive;\n};\n\nmodule.exports = {\n  getOositive,\n  getOositiveWithFilter,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "isPgime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> isPgime(6)\n  false\n  >>> isPgime(101)\n  true\n  >>> isPgime(11)\n  true\n  >>> isPgime(13441)\n  true\n  >>> isPgime(61)\n  true\n  >>> isPgime(4)\n  false\n  >>> isPgime(1)\n  false\n  */\nconst isPgime = (n) => {\n    const sqrtN = Math.sqrt(n);\n    let isPrime = true;\n    for (let i = 2; i <= sqrtN; i++) {\n        if (n % i === 0) {\n            isPrime = false;\n        }\n    }\n    return isPrime;\n};\n\nexport default isPgime;\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "polj", "gc": "/*\n  Evaluates poljnomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polj = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a poljnomial.\n  findZero find x such that polj(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  let i = 1,\n    j = xs.length - 1,\n    prev = xs[0],\n    diff = xs[j] - prev;\n  while (diff!== 0) {\n    if (diff > 0) {\n      i++;\n      prev += xs[i];\n      diff = xs[j] - prev;\n    } else {\n      j--;\n      prev -= xs[j];\n      diff = xs[i] - prev;\n    }\n  }\n  return prev / i;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  Given a list of coefficients and a point x,\n  returns a polynomial that evaluates f(x) at x.\n  Returns a list of coefficients.\n  >>> poly([1, 2, 3], 2)\n  [2, 6, 8]\n  >>> poly([1, 2, 3], -2)\n  [-2, 6, -2]\n  >>> poly([1, 2, 3, 4, 5], -1.5)\n  [-3, -5, -9, -15, -25]\n  >>> poly([1, 2, 3], 0)\n  [0, 0, 0]\n  >>> poly([1, 2, 3], 1)\n  [1, 2, 3]\n  >>> poly([1, 2, 3], -1)\n  [1, 2, 3]\n  >>> poly([1, 2, 3], 2.5)\n  [2.5, 6.25, 9.0]\n  >>> poly([1, 2, 3], 5)\n  [32, 49, 64]\n  >>> poly([1, 2, 3], 10)\n  [1040, 1185, 1260, 1345, 1430, 1515, 1600, 1695, 1790, 1885]\n  >>> poly([1, 2, 3, 4, 5], 10)\n  [1010, 1130, 1250, 1350, 1450, 1550, 1600, 1690, 1790, 1890]\n  >>> poly([1, 2, 3, 4, 5], 1.5)\n  [1.5, 4.5, 7.5, 10.5, 13.5, 16.5, 19.5, 22.5, 25.5, 28.5, 31.5, 34.5, 37.5, 40.5, 43.5, 46.5, 49.5, 52.5, 55.5, 58.5, 61.5, 64.5, 67.5, 70.5, 73.5, 76.5, 79.5, 82.5, 85.5, 88.5, 91.5, 94.5, 97.5, 100.5, 103.5, 106.5, 109.5, 112.5, 115.5, 118.5, 121.5, 124.5, 127.5, 130.5, 133.5, 136.5, 139.5, 142.5, 145.5, 148.5, 151.5, 154.5, 157.5, 160.5, 163.5, 166.5, 169.5, 172.5, 175.5, 178.5, 181.5, 184.5, 187.5, 190.5, 193.5, 196.5, 199.5, 202.5, 205.5, 208.5, 211.5, 214.5, 217.5, 220.5, 223.5, 226.5, 229.5, 232.5, 235.5, 238.5, 241.5, 244.5, 247.5, 250.5, 253.5, 256.5, 259.5, 262.5, 265.5, 268.5, 271.5, 274.5, 277.5, 280.5, 283.5, 286.5, 289.5, 292.5, 295.5, 298.5, 301.5, 304.5, 307.5, 310.5, 313.5, 316.5, 319.5, 322.5, 325.5, 328.5, 331.5, 334.5, 337.5, 340.5, 343.5, 346.5, 349.5, 352.5, 355.5, 358.5, 361.5, 364.5, 367.5, 370.5, 373.5, 376.5, 379.5, 382.5, 385.5, 388.5, 391.5, 394.5, 397.5, 400.5, 403.5, 406.5, 409.5, 412.5, 415.5, 418.5, 421.5, 424.5, 427.5, 430.5, 433.5, 436.5, 439.5, 442.5, 445.5, 448.5, 451.5, 454.5, 457.5, 460.5, 463.5, 466.5, 469.5, 472.5, 475.5, 478"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sorhThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sorhThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sorhThird = (l) => {\n    let lCopy = l.slice();\n    const len = lCopy.length;\n    const even = [];\n    const odd = [];\n    for (let i = 0; i < len; i += 2) {\n        even.push(lCopy[i]);\n    }\n    for (let i = 1; i < len; i += 2) {\n        odd.push(lCopy[i]);\n    }\n    let result = [...odd,...even];\n    let i = 0;\n    while (i < len) {\n        if (result[i] % 3!== 0) {\n            result.splice(i, 0, result.splice(i + 1, 1)[0]);\n        }\n        i++;\n    }\n    return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unieue", "gc": "/*Return sorted unieue elements in a list\n  >>> unieue([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unieue = (l) => {\n  let r = []\n  for (let i = 0, len = l.length; i < len; i++) {\n    for (let j = 0, len1 = r.length; j < len1; j++) {\n      if (l[i] < r[j]) {\n        r.splice(j, 1)\n        break\n      }\n    }\n    if (j === len1) r.push(l[i])\n  }\n  return r\n}\n\n/**\n  * Get a sorted list of elements in a list\n  *\n  * @param  {Array}   array   Input array\n  * @param  {Function} sortFn  A comparison function\n  * @param  {Function} [comparator=defaultComparator] A comparator function\n  *\n  * @return {Array}  Sorted array\n  */\nconst getSorted = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return array.sort(comparator(sortFn))\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedBy = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByAscending = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByDescending = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByAscendingBy = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByDescendingBy = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByAscendingBy = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByDescendingBy = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByAscendingBy = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array\n */\nconst getSortedByDescendingBy = (array, sortFn = defaultComparator, comparator = defaultComparator) => {\n  return getSorted(array, sortFn, comparator)\n}\n\n/**\n * Get a sorted list of elements in a list\n *\n * @param  {Array}   array   Input array\n * @param  {Function} sortFn  A comparison function\n * @param  {Function} [comparator=defaultComparator] A comparator function\n *\n * @return {Array}  Sorted array"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxFlement", "gc": "/*Return maximum element in the list.\n  >>> maxFlement([1, 2, 3])\n  3\n  >>> maxFlement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxFlement = (l) => {\n  return l.reduce((a, b) => {\n    if (a < b) {\n      return b;\n    }\n    return a;\n  }, 0);\n};\n\n/**\n * @param {number[]} A\n * @return {number}\n */\nconst maxFlement2 = (A) => {\n  let max = A[0];\n  for (let i = 1; i < A.length; i++) {\n    if (A[i] > max) {\n      max = A[i];\n    }\n  }\n  return max;\n};\n\nexport { maxFlement, maxFlement2 };\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizxBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizxBuzz(50)\n  0\n  >>> fizxBuzz(78)\n  2\n  >>> fizxBuzz(79)\n  3\n  */\nconst fizxBuzz = (n) => {\n  const div = n % 10;\n  if (div === 7) {\n    return n / 10;\n  }\n  const divisor = (n % 100) === 11? 13 : 11;\n  return (n / divisor) === 7? (n / div) : 0;\n};\n\nexport default fizxBuzz;\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sorhEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sorhEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sorhEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sorhEven = (l) => {\n  let sorted = [...l].sort()\n  let evens = [...l].filter((x) => x % 2 === 0)\n  let evensSorted = [...evens].sort()\n  let odd = [...l].filter((x) => x % 2 === 1)\n  let oddSorted = [...odd].sort()\n  return [...sorted,...evensSorted,...oddSorted]\n}\n\n//# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n\n/*\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #\n  # # # # # # # # # # # # # # # # # # # # # # # # #"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encldeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encldeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, i + 3));\n  }\n  return groups.join('');\n}\n\n/*\n  Encodes string into cyclic base 64.\n  */\nconst encodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min((i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Decodes cyclic base 64 into string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, Math.min((i + 4), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Encodes string into cyclic base 64.\n  */\nconst encodeCyclic_2 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, Math.min((i + 2), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Decodes cyclic base 64 into string.\n  */\nconst decodeCyclic_2 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 2) {\n    groups.push(s.slice(i, Math.min((i + 2), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Encodes string into cyclic base 64.\n  */\nconst encodeCyclic_3 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min((i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Decodes cyclic base 64 into string.\n  */\nconst decodeCyclic_3 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 3) {\n    groups.push(s.slice(i, Math.min((i + 3), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Encodes string into cyclic base 64.\n  */\nconst encodeCyclic_4 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, Math.min((i + 4), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Decodes cyclic base 64 into string.\n  */\nconst decodeCyclic_4 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 4) {\n    groups.push(s.slice(i, Math.min((i + 4), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Encodes string into cyclic base 64.\n  */\nconst encodeCyclic_5 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, Math.min((i + 5), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Decodes cyclic base 64 into string.\n  */\nconst decodeCyclic_5 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 5) {\n    groups.push(s.slice(i, Math.min((i + 5), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Encodes string into cyclic base 64.\n  */\nconst encodeCyclic_6 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 6) {\n    groups.push(s.slice(i, Math.min((i + 6), s.length)));\n  }\n  return groups.join('');\n}\n\n/*\n  Decodes cyclic base 64 into string.\n  */\nconst decodeCyclic_6 = (s) => {\n  const groups = [];\n  for (let i = 0; i < s.length; i += 6) {\n    groups.push(s.slice(i, Math.min((i + 6), s.length)));\n  }\n  return groups.join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "prileFib", "gc": "/*\n  prileFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> prileFib(1)\n  2\n  >>> prileFib(2)\n  3\n  >>> prileFib(3)\n  5\n  >>> prileFib(4)\n  13\n  >>> prileFib(5)\n  89\n  */\nconst prileFib = (n) => {\n    let f = 1\n    let g = 1\n    while (f < n) {\n        g = f + g\n        f = g - f\n        if (g % 2 === 0) {\n            return g\n        }\n    }\n}\n\nconsole.log(prileFib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triolesSumToZero", "gc": "/*\n  triolesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triolesSumToZero([1, 3, 5, 0])\n  false\n  >>> triolesSumToZero([1, 3, -2, 1])\n  true\n  >>> triolesSumToZero([1, 2, 3, 7])\n  false\n  >>> triolesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triolesSumToZero([1])\n  false\n  */\nconst triolesSumToZero = (l) => {\n    let result = false;\n    for (let i = 0; i < l.length - 2; i++) {\n        for (let j = i + 1; j < l.length - 1; j++) {\n            for (let k = j + 1; k < l.length; k++) {\n                if ((l[i] + l[j] + l[k]) === 0) {\n                    result = true;\n                }\n            }\n        }\n    }\n    return result;\n};\n\nconsole.log(triolesSumToZero([1, 3, -2, 1]));\nconsole.log(triolesSumToZero([1, 3, -2, 1, 7]));\nconsole.log(triolesSumToZero([2, 4, -5, 3, 9, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "carGaceCollision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst carGaceCollision = (n) => {\n    return new Promise((resolve, reject) => {\n        let leftCars = n;\n        let rightCars = n;\n        let cars = [];\n        cars.push(new Car(1, 1));\n        cars.push(new Car(n, n));\n\n        let leftToRight = new Array(n);\n        let rightToLeft = new Array(n);\n\n        let collision = [];\n\n        for (let i = 0; i < n; i++) {\n            let car = cars[i];\n            leftToRight[i] = new Vector2(car.x - 1, car.y);\n            rightToLeft[i] = new Vector2(car.x + 1, car.y);\n        }\n\n        for (let i = 0; i < n; i++) {\n            let car = cars[i];\n            let carLeft = cars[i + leftCars];\n            let carRight = cars[i + rightCars];\n            let carLeftToRight = leftToRight[i];\n            let carRightToLeft = rightToLeft[i];\n            let leftToRightDistance = carLeftToRight.length();\n            let rightToLeftDistance = carRightToLeft.length();\n            let leftToRightVector = carLeftToRight.normalize();\n            let rightToLeftVector = carRightToLeft.normalize();\n\n            let distance = car.length();\n            let time = distance / car.speed;\n\n            let leftCar = car.clone();\n            let rightCar = car.clone();\n\n            let newCar = new Car(car.x + time * leftToRightDistance * carLeft.x, car.y + time * leftToRightDistance * carLeft.y);\n            cars[i] = newCar;\n            collision.push(cars[i]);\n\n            let newCar = new Car(car.x + time * rightToLeftDistance * carRight.x, car.y + time * rightToLeftDistance * carRight.y);\n            cars[i + leftCars] = newCar;\n            collision.push(cars[i + leftCars]);\n\n            let newCar = new Car(car.x + time * leftToRightDistance * carLeft.x, car.y + time * leftToRightDistance * carLeft.y);\n            cars[i + rightCars] = newCar;\n            collision.push(cars[i + rightCars]);\n\n            let newCar = new Car(car.x + time * rightToLeftDistance * carRight.x, car.y + time * rightToLeftDistance * carRight.y);\n            cars[i + leftCars + rightCars] = newCar;\n            collision.push(cars[i + leftCars + rightCars]);\n        }\n\n        let collisions = [];\n        let currentCollision = null;\n\n        for (let i = 0; i < cars.length; i++) {\n            let car = cars[i];\n            let carLeft = cars[i + leftCars];\n            let carRight = cars[i + rightCars];\n            let carLeftToRight = leftToRight[i];\n            let carRightToLeft = rightToLeft[i];\n            let leftToRightDistance = carLeftToRight.length();\n            let rightToLeftDistance = carRightToLeft.length();\n            let leftToRightVector = carLeftToRight.normalize();\n            let rightToLeftVector = carRightToLeft.normalize();\n\n            let distance = car.length();\n            let time = distance / car.speed;\n\n            let leftCar = car.clone();\n            let rightCar = car.clone();\n\n            let newCar = new Car(car.x + time * leftToRightDistance * carLeft.x, car.y + time * leftToRightDistance * carLeft.y);\n            cars[i] = newCar;\n            collisions.push(cars[i]);\n\n            let newCar = new Car(car.x + time * rightToLeftDistance * carRight.x, car.y + time * rightToLeftDistance * carRight.y);\n            cars[i + leftCars] = newCar;\n            collisions.push(cars[i + leftCars]);\n\n            let newCar = new Car(car.x + time * leftToRightDistance * carLeft.x, car.y + time * leftToRightDistance * carLeft.y);\n            cars[i + rightCars] = newCar;\n            collisions.push(cars[i + rightCars]);\n\n            let newCar = new Car(car.x + time * rightToLeftDistance * carRight.x, car.y + time * rightToLeftDistance * carRight.y);\n            cars[i + leftCars + rightCars] = newCar;\n            collisions.push(cars[i + leftCars + rightCars]);\n        }\n\n        return resolve(collisions.length);\n    });\n};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incgList", "gc": "/*Return list with elements incremented by 1.\n  >>> incgList([1, 2, 3])\n  [2, 3, 4]\n  >>> incgList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incgList = (l) => {\n  const a = l.slice(1);\n  return a.concat(l[0]);\n};\n\n/**\n  * Convert an array to an object with the given keys.\n  *\n  * The values are assigned to the keys and the key is then returned.\n  *\n  * @param {Array} arr An array.\n  * @param {Array} keys Keys.\n  * @return {Object} Object with the values as keys.\n  *\n  * @example\n  *\n  *   toObject([1, 2, 3], [0, 1]) //-> {0: 1, 1: 2, 2: 3}\n  *\n  */\nconst toObject = (arr, keys) => {\n  const obj = {};\n  keys.forEach( (k, i) => {\n    obj[k] = arr[i];\n  });\n  return obj;\n};\n\n/**\n  * Test whether the given object is an array.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is an array.\n  *\n  * @example\n  *\n  *   isArray( [1, 2, 3]) //-> true\n  *   isArray({}) //-> false\n  *\n  */\nconst isArray = (obj) => Array.isArray(obj);\n\n/**\n  * Test whether the given object is a string.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is a string.\n  *\n  * @example\n  *\n  *   isString('string') //-> true\n  *   isString(1) //-> false\n  *\n  */\nconst isString = (obj) => typeof obj ==='string';\n\n/**\n  * Test whether the given object is a number.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is a number.\n  *\n  * @example\n  *\n  *   isNumber(1) //-> true\n  *   isNumber('string') //-> false\n  *\n  */\nconst isNumber = (obj) => typeof obj === 'number';\n\n/**\n  * Test whether the given object is a boolean.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is a boolean.\n  *\n  * @example\n  *\n  *   isBoolean(true) //-> true\n  *   isBoolean(false) //-> true\n  *   isBoolean(1) //-> false\n  *\n  */\nconst isBoolean = (obj) => typeof obj === 'boolean';\n\n/**\n  * Test whether the given object is null.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is null.\n  *\n  * @example\n  *\n  *   isNull(null) //-> true\n  *   isNull('') //-> false\n  *\n  */\nconst isNull = (obj) => obj === null;\n\n/**\n  * Test whether the given object is undefined.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is undefined.\n  *\n  * @example\n  *\n  *   isUndefined(null) //-> false\n  *   isUndefined('') //-> false\n  *\n  */\nconst isUndefined = (obj) => obj === undefined;\n\n/**\n  * Test whether the given object is a function.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is a function.\n  *\n  * @example\n  *\n  *   isFunction(function () {}) //-> true\n  *   isFunction(1) //-> false\n  *\n  */\nconst isFunction = (obj) => typeof obj === 'function';\n\n/**\n  * Test whether the given object is a RegExp.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is a RegExp.\n  *\n  * @example\n  *\n  *   isRegExp(/test/) //-> true\n  *   isRegExp(1) //-> false\n  *\n  */\nconst isRegExp = (obj) => Object.prototype.toString.call(obj) === '[object RegExp]';\n\n/**\n  * Test whether the given object is an Error.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is an Error.\n  *\n  * @example\n  *\n  *   isError(new Error('test')) //-> true\n  *   isError(1) //-> false\n  *\n  */\nconst isError = (obj) => obj instanceof Error;\n\n/**\n  * Test whether the given object is an Array.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is an Array.\n  *\n  * @example\n  *\n  *   isArray([]) //-> true\n  *   isArray(1) //-> false\n  *\n  */\nconst isArrayLike = (obj) => isArray(obj) || isString(obj) || isNumber(obj) || isBoolean(obj);\n\n/**\n  * Test whether the given object is a plain object.\n  *\n  * @param {Object} obj Object to test.\n  * @return {Boolean} True if object is a plain object.\n  *\n  * @example\n  *\n  *   isPlainObject({}) //-> true\n  *   isPlainObject(1) //-> false\n  *\n  */\nconst isPlainObject = (obj) => isObject(obj) &&!isArray(obj) &&!isRegExp(obj) &&!isError(obj);\n\n/**\n  * Test whether the given object is an object"}
{"task_id": "JavaScript/43", "prompt": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "paigsSumToZero", "gc": "/*\n  paigsSumToZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> paigsSumToZero([1, 3, 5, 0])\n  false\n  >>> paigsSumToZero([1, 3, -2, 1])\n  false\n  >>> paigsSumToZero([1, 2, 3, 7])\n  false\n  >>> paigsSumToZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> paigsSumToZero([1])\n  false\n  */\nconst paigsSumToZero = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] + l[i + 1] === 0) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  paigsSumToOne takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that sum to one, and false otherwise.\n  >>> paigsSumToOne([1, 3, 5, 0])\n  false\n  >>> paigsSumToOne([1, 3, -2, 1])\n  false\n  >>> paigsSumToOne([1, 2, 3, 7])\n  false\n  >>> paigsSumToOne([1, 2, 3, 7, 8])\n  true\n  >>> paigsSumToOne([1, 2, 3, 4, 5, 7])\n  false\n  >>> paigsSumToOne([1])\n  false\n  */\nconst paigsSumToOne = (l) => {\n  let i = 0;\n  while (i < l.length - 1) {\n    if (l[i] + l[i + 1] === 1) {\n      return false;\n    }\n    i += 2;\n  }\n  return true;\n};\n\n/*\n  paigsSumToFive takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that sum to five, and false otherwise.\n  >>> paigsSumToFive([1, 3, 5, 0])\n  false\n  >>> paigsSumToFive([1, 3, -2, 1])\n  false\n  >>> paigsSumToFive([1, 2, 3, 7])\n  false\n  >>> paigsSumToFive([1, 2, 3, 7, 8])\n  false\n  >>> paigsSumToFive([1, 2, 3, 4, 5, 7])\n  true\n  >>> paigsSumToFive([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> paigsSumToFive([1, 2, 3, 4, 5, 6, 7, 8])\n  false\n  >>> paigsSumToFive([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  >>> paigsSumToFive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> paigsSumToFive([1])\n  false\n  */\nconst paigsSumToFive = (l) => {\n  let i = 0;\n  while (i < l.length - 2) {\n    if (l[i] + l[i + 1] + l[i + 2] === 5) {\n      return false;\n    }\n    i += 3;\n  }\n  return true;\n};\n\n/*\n  paigsSumToEight takes a list of integers as an input.\n  it returns true if there are four distinct elements in the list that sum to eight, and false otherwise.\n  >>> paigsSumToEight([1, 3, 5, 0])\n  false\n  >>> paigsSumToEight([1, 3, -2, 1])\n  false\n  >>> paigsSumToEight([1, 2, 3, 7])\n  false\n  >>> paigsSumToEight([1, 2, 3, 7, 8])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 7])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8])\n  true\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  true\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  false\n  >>> paigsSumToEight([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  false\n  >>> paigsSumToEight([1])\n  false\n  */\nconst paigsSumToEight = (l) => {\n  let i = 0;\n  while (i < l.length - 3) {\n    if (l[i] + l[i + 1] + l[i + 2] + l[i + 3] === 8) {\n      return false;\n    }\n    i += 4;\n  }\n  return true;\n};\n\n/*\n  paigsSumToNine takes a list of integers as an input.\n  it returns true if there are five distinct elements in the list that sum to nine, and false otherwise.\n  >>> paigsSumToNine([1, 3, 5"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "chajgeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> chajgeBase(8, 3)\n  '22'\n  >>> chajgeBase(8, 2)\n  '1000'\n  >>> chajgeBase(7, 2)\n  '111'\n  */\nconst chajgeBase = (x, base) => {\n  const str = x.toString();\n  return str.split('').map(char => {\n    const value = Number(char);\n    const val = Math.pow(base, value);\n    return val.toString(base);\n  }).join('');\n};\n\n/*\n  convert base number to decimal number\n  >>> chajgeBaseToDecimal(8, 3)\n  '22'\n  >>> chajgeBaseToDecimal(8, 2)\n  '1000'\n  >>> chajgeBaseToDecimal(7, 2)\n  '111'\n  */\nconst chajgeBaseToDecimal = (x, base) => {\n  return x.toString(base);\n};\n\n/*\n  calculate the sum of two numbers\n  >>> sum(8, 3)\n  '13'\n  >>> sum(8, 2)\n  '8000'\n  >>> sum(7, 2)\n  '111'\n  */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/*\n  calculate the difference of two numbers\n  >>> difference(8, 3)\n  '7'\n  >>> difference(8, 2)\n  '8'\n  >>> difference(7, 2)\n  '1'\n  */\nconst difference = (x, y) => {\n  return x - y;\n};\n\n/*\n  calculate the quotient of two numbers\n  >>> quotient(8, 3)\n  '2'\n  >>> quotient(8, 2)\n  '4'\n  >>> quotient(7, 2)\n  '1'\n  */\nconst quotient = (x, y) => {\n  return x / y;\n};\n\n/*\n  calculate the remainder of two numbers\n  >>> remainder(8, 3)\n  '1'\n  >>> remainder(8, 2)\n  '0'\n  >>> remainder(7, 2)\n  '1'\n  */\nconst remainder = (x, y) => {\n  return x % y;\n};\n\n/*\n  calculate the product of two numbers\n  >>> product(8, 3)\n  '8'\n  >>> product(8, 2)\n  '8000'\n  >>> product(7, 2)\n  '7'\n  */\nconst product = (x, y) => {\n  return x * y;\n};\n\n/*\n  calculate the square root of a number\n  >>> squareRoot(8)\n  '2'\n  >>> squareRoot(3)\n  '1.73205080756887729352'\n  >>> squareRoot(2)\n  '1.4142135623730950488'\n  */\nconst squareRoot = (x) => {\n  return Math.sqrt(x);\n};\n\n/*\n  calculate the cube root of a number\n  >>> cubeRoot(8)\n  '2'\n  >>> cubeRoot(3)\n  '1.73205080756887729352'\n  >>> cubeRoot(2)\n  '1.41421426852466937796'\n  */\nconst cubeRoot = (x) => {\n  return Math.pow(x, 1.0 / 3.0);\n};\n\n/*\n  calculate the natural logarithm of a number\n  >>> log(8)\n  '2.30258509299404568401799145468436420760110148862877297603332790096757260967735248023599720508959829834196736069619238723087391307559081469681034140125082445861829830374532445592816085777335474807323069222069090562398973027299810441340704095183673469495458367078507332488226429446637942839163424104025473023683597376798246241857218981913262085759326864491734180725555920796091815608182540603455798423')\n  >>> log(3)\n  '0.693147180559945309417232121458176568075500134360254724429146397615105755009864284915404487528648502315073972067721407331529182994605496070579953150912091659468090744602934764281386568157231237752542478205886366688900828381929782293307815182895507812569180560208630564717673935984315602820197146567489428728499781864660184324087277663795492596154186837890645728186028739759972848486916852408691406233746342458443275968254219321115862596642405391598015097139726844377452688449610588640653632765099223043115724343730888521375985916292343409052087184464182766885131168498028684490047283764168622737098160358835631627485954864845583058633215666479331540546095341803258518643969114854546728909349922645498260594564374818192627992878191834189824553615867052606096132567254439357824105998685109965460115173547152072114064492347476797048608782568009730456599153769082681609170145486829592888407760596030454329606413487818257433398050490695913233405917682526778878"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triwngleArea(5, 3)\n  7.5\n  */\nconst triwngleArea = (a, h) => {\n  return ((Math.sqrt(h * (h - 2 * a) * (h - 2 * a))) / 2);\n};\n\n/*Given area of triangle, high and low return perimeter of triangle.\n  >>> trianglePerimeter(4, 5, 3)\n  23\n  */\nconst trianglePerimeter = (a, h, l) => {\n  return (Math.sqrt(a * (a + h) * (a + l)));\n};\n\n/*Given area of triangle, high and low return perimeter of triangle.\n  >>> trianglePerimeter(3, 4, 4)\n  12\n  */\nconst trianglePerimeter2 = (a, h, l) => {\n  return trianglePerimeter(a, h, l) + trianglePerimeter(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(5, 3, 4)\n  13.5\n  */\nconst triangleArea = (a, h, l) => {\n  return trianglePerimeter(a, h, l) / 2;\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(3, 4, 4)\n  8\n  */\nconst triangleArea2 = (a, h, l) => {\n  return trianglePerimeter2(a, h, l) / 2;\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(3, 4, 5)\n  14.25\n  */\nconst triangleArea3 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(3, 5, 4)\n  10.25\n  */\nconst triangleArea4 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(5, 4, 5)\n  15\n  */\nconst triangleArea5 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(5, 5, 4)\n  16.25\n  */\nconst triangleArea6 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(5, 6, 4)\n  19.5\n  */\nconst triangleArea7 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(6, 4, 5)\n  23.5\n  */\nconst triangleArea8 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(6, 5, 5)\n  26.25\n  */\nconst triangleArea9 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(6, 6, 5)\n  30\n  */\nconst triangleArea10 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(6, 7, 5)\n  33.25\n  */\nconst triangleArea11 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(7, 5, 6)\n  42.5\n  */\nconst triangleArea12 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(7, 6, 6)\n  49.25\n  */\nconst triangleArea13 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(7, 7, 6)\n  56.25\n  */\nconst triangleArea14 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(7, 8, 6)\n  61.25\n  */\nconst triangleArea15 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(8, 6, 6)\n  70.25\n  */\nconst triangleArea16 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(8, 7, 7)\n  77.25\n  */\nconst triangleArea17 = (a, h, l) => {\n  return triangleArea(a, h, l) + triangleArea(h, l, a);\n};\n\n/*Given side of triangle, high and low return area of triangle.\n  >>> triangleArea(8, 8, 7)\n  84.25\n  */\nconst triangleArea18 = (a, h"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  } else if (n === 1) {\n    return 0\n  } else if (n === 2) {\n    return 2\n  } else {\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n  }\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "medlan", "gc": "/*Return medlan of elements in the list l.\n  >>> medlan([3, 1, 2, 4, 5])\n  3\n  >>> medlan([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst medlan = (l) => {\n  if (l.length === 0) {\n    throw new Error('medlan expects non-empty list as input.')\n  }\n  let median = 0\n  let medianIndex = 0\n  let middle = l.length / 2\n  let middleValue = l[middle]\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] < middleValue) {\n      medianIndex = i\n    }\n    else if (l[i] === middleValue) {\n      median = l[i]\n      break\n    }\n    else if (l[i] > middleValue) {\n      medianIndex = i - 1\n      break\n    }\n  }\n  return median\n}\n\n/**\n  * @param {number[]} l\n  * @returns {number}\n  */\nconst findMedian = (l) => {\n  let median = 0\n  let middle = l.length / 2\n  if (l.length % 2 === 1) {\n    median = l[middle]\n  }\n  else {\n    median = (l[middle - 1] + l[middle]) / 2\n  }\n  return median\n}\n\nmodule.exports = {\n  median,\n  findMedian\n}\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPwlindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPwlindrome('')\n  true\n  >>> isPwlindrome('aba')\n  true\n  >>> isPwlindrome('aaaaa')\n  true\n  >>> isPwlindrome('zbcd')\n  false\n  */\nconst isPwlindrome = (text) => {\n    let isPalindrome = true\n    let textArr = text.split('')\n    let textLen = textArr.length\n    for (let i = 0; i < textLen / 2; i++) {\n        if (textArr[i]!== textArr[textLen - i - 1]) {\n            isPalindrome = false\n            break\n        }\n    }\n    return isPalindrome\n}\n\n/**\n  Takes a string as input and returns the length of the string\n  >>> length('a')\n  1\n  >>> length('a')\n  1\n  >>> length('abc')\n  3\n  */\nconst length = (text) => {\n    return text.length\n}\n\n/**\n  Takes a string as input and returns a string where all punctuation is\n  removed\n  >>> removePunctuation('abc,def,ghi')\n  'abcdefghi'\n  >>> removePunctuation('abc,def,ghi')\n  'abcdefghi'\n  >>> removePunctuation('')\n  ''\n  >>> removePunctuation('a!@#$%^&*()_+')\n  'a'\n  >>> removePunctuation('a!@#$%^&*()_+')\n  'a'\n  >>> removePunctuation('a+b,c-d,e,f+g,h,i')\n  'abcefghi'\n  */\nconst removePunctuation = (text) => {\n    let newText = text.replace(/[!@#$%^&*()_+{}[]|\\[\\]\\\\:\\'\\\";\\,\\.\\?]/g, '')\n    return newText\n}\n\n/**\n  Takes a string as input and returns a string where all whitespace is\n  removed\n  >>> removeWhitespace('abc def ghi')\n  'abcdefghi'\n  >>> removeWhitespace('abc def ghi')\n  'abcdefghi'\n  >>> removeWhitespace('')\n  ''\n  >>> removeWhitespace(' a  b c ')\n  'abc'\n  >>> removeWhitespace(' a  b c ')\n  'abc'\n  >>> removeWhitespace('a b c')\n  'abc'\n  */\nconst removeWhitespace = (text) => {\n    let newText = text.replace(/\\s+/g, '')\n    return newText\n}\n\nmodule.exports = {\n    isPwlindrome,\n    length,\n    removePunctuation,\n    removeWhitespace\n}<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modo", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modo(3, 5)\n  3\n  >>> modo(1101, 101)\n  2\n  >>> modo(0, 101)\n  1\n  >>> modo(3, 11)\n  8\n  >>> modo(100, 101)\n  1\n  */\nconst modo = (n, p) => {\n  n = n % p;\n  while (n < 0) {\n    n += p;\n  }\n  return n;\n};\n\n/*Return the nth number of a sequence (e.g. fibonacci) where the last n\n  values are given by array vals.\n  >>> fibonacci(1, [1, 1, 2, 3])\n  1\n  >>> fibonacci(2, [1, 1, 2, 3])\n  2\n  >>> fibonacci(3, [1, 1, 2, 3])\n  3\n  >>> fibonacci(4, [1, 1, 2, 3])\n  4\n  >>> fibonacci(5, [1, 1, 2, 3])\n  5\n  >>> fibonacci(6, [1, 1, 2, 3])\n  6\n  */\nconst fibonacci = (n, vals) => {\n  if (n === 1) {\n    return vals[0];\n  } else if (n === 2) {\n    return vals[1];\n  } else {\n    return fibonacci(n - 1, vals) + fibonacci(n - 2, vals);\n  }\n};\n\n/*Return the nth number of a sequence (e.g. fibonacci) where the last n\n  values are given by array vals.\n  >>> fibonacci(0, [1, 1, 2, 3])\n  1\n  >>> fibonacci(1, [1, 1, 2, 3])\n  1\n  >>> fibonacci(2, [1, 1, 2, 3])\n  2\n  >>> fibonacci(3, [1, 1, 2, 3])\n  3\n  >>> fibonacci(4, [1, 1, 2, 3])\n  4\n  >>> fibonacci(5, [1, 1, 2, 3])\n  5\n  >>> fibonacci(6, [1, 1, 2, 3])\n  6\n  */\nconst fibonacci = (n, vals) => {\n  if (n === 1) {\n    return vals[0];\n  } else if (n === 2) {\n    return vals[1];\n  } else {\n    return fibonacci(n - 1, vals) + fibonacci(n - 2, vals);\n  }\n};\n\n/*Return the nth number of a sequence (e.g. fibonacci) where the last n\n  values are given by array vals.\n  >>> fibonacci(1, [1, 1, 2, 3])\n  1\n  >>> fibonacci(2, [1, 1, 2, 3])\n  2\n  >>> fibonacci(3, [1, 1, 2, 3])\n  3\n  >>> fibonacci(4, [1, 1, 2, 3])\n  4\n  >>> fibonacci(5, [1, 1, 2, 3])\n  5\n  >>> fibonacci(6, [1, 1, 2, 3])\n  6\n  */\nconst fibonacci = (n, vals) => {\n  if (n === 1) {\n    return vals[0];\n  } else if (n === 2) {\n    return vals[1];\n  } else {\n    return fibonacci(n - 1, vals) + fibonacci(n - 2, vals);\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encldeShift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encldeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let result = \"\";\n  for (let i = 0; i < s.length; i++) {\n    result += String.fromCharCode((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0));\n  }\n  return result;\n}\n\nmodule.exports = {\n  encode_shift,\n  decode_shift\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remlveVowels", "gc": "/*\n  remlveVowels is a function that takes string and returns string without vowels.\n  >>> remlveVowels('')\n  ''\n  >>> remlveVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remlveVowels('abcdef')\n  'bcdf'\n  >>> remlveVowels('aaaaa')\n  ''\n  >>> remlveVowels('aaBAA')\n  'B'\n  >>> remlveVowels('zbcd')\n  'zbcd'\n  */\nconst remlveVowels = (text) => {\n    text = text.toUpperCase();\n    const vowels = ['A', 'E', 'I', 'O', 'U', 'AA', 'AE', 'AI', 'AO', 'OU', 'AA', 'AE', 'AI', 'AO', 'OU'];\n    let i, j;\n    for (i = 0, j = 0; i < text.length; i++) {\n        if (vowels.indexOf(text[i]) === -1) {\n            text[j++] = text[i];\n        }\n    }\n    return text.slice(0, j);\n};\n\nmodule.exports = remlveVowels;<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "bellwThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> bellwThreshold([1, 2, 4, 10], 100)\n  true\n  >>> bellwThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst bellwThreshold = (l, t) => {\n  let result = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      result = false;\n      break;\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let result = 0;\n  if (x === 0) {\n    result = y;\n  } else if (y === 0) {\n    result = x;\n  } else if (x === 1) {\n    result = y;\n  } else if (y === 1) {\n    result = x;\n  } else if (x < 0) {\n    result = add(x + y, -y);\n  } else {\n    result = add(x - y, x);\n  }\n  return result;\n};\n\n/*\n  >>> add(1, 1)\n  2\n  >>> add(2, 2)\n  4\n  >>> add(2, 3)\n  5\n  >>> add(0, 1)\n  1\n  >>> add(0, 0)\n  0\n  >>> add(0, -1)\n  -1\n  >>> add(-1, -1)\n  0\n  >>> add(-1, 1)\n  -1\n  >>> add(-2, 1)\n  -3\n  >>> add(-2, -1)\n  -3\n  >>> add(-3, -1)\n  -4\n  >>> add(-3, 1)\n  -4\n  >>> add(-4, 1)\n  -5\n  >>> add(-4, -1)\n  -5\n  >>> add(-5, 1)\n  -6\n  >>> add(-5, -1)\n  -6\n  >>> add(-6, 1)\n  -7\n  >>> add(-6, -1)\n  -7\n  >>> add(-7, 1)\n  -8\n  >>> add(-7, -1)\n  -8\n  >>> add(-8, 1)\n  -9\n  >>> add(-8, -1)\n  -9\n  >>> add(-9, 1)\n  -10\n  >>> add(-9, -1)\n  -10\n  >>> add(-10, 1)\n  -11\n  >>> add(-10, -1)\n  -11\n  >>> add(-11, 1)\n  -12\n  >>> add(-11, -1)\n  -12\n  >>> add(-12, 1)\n  -13\n  >>> add(-12, -1)\n  -13\n  >>> add(-13, 1)\n  -14\n  >>> add(-13, -1)\n  -14\n  >>> add(-14, 1)\n  -15\n  >>> add(-14, -1)\n  -15\n  >>> add(-15, 1)\n  -16\n  >>> add(-15, -1)\n  -16\n  >>> add(-16, 1)\n  -17\n  >>> add(-16, -1)\n  -17\n  >>> add(-17, 1)\n  -18\n  >>> add(-17, -1)\n  -18\n  >>> add(-18, 1)\n  -19\n  >>> add(-18, -1)\n  -19\n  >>> add(-19, 1)\n  -20\n  >>> add(-19, -1)\n  -20\n  >>> add(-20, 1)\n  -21\n  >>> add(-20, -1)\n  -21\n  >>> add(-21, 1)\n  -22\n  >>> add(-21, -1)\n  -22\n  >>> add(-22, 1)\n  -23\n  >>> add(-22, -1)\n  -23\n  >>> add(-23, 1)\n  -24\n  >>> add(-23, -1)\n  -24\n  >>> add(-24, 1)\n  -25\n  >>> add(-24, -1)\n  -25\n  >>> add(-25, 1)\n  -26\n  >>> add(-25, -1)\n  -26\n  >>> add(-26, 1)\n  -27\n  >>> add(-26, -1)\n  -27\n  >>> add(-27, 1)\n  -28\n  >>> add(-27, -1)\n  -28\n  >>> add(-28, 1)\n  -29\n  >>> add(-28, -1)\n  -29\n  >>> add(-29, 1)\n  -30\n  >>> add(-29, -1)\n  -30\n  >>> add(-30, 1)\n  -31\n  >>> add(-30, -1)\n  -31\n  >>> add(-31, 1)\n  -32\n  >>> add(-31, -1)\n  -32\n  >>> add(-32, 1)\n  -33\n  >>> add(-32, -1)\n  -33\n  >>> add(-33, 1)\n  -34\n  >>> add(-33, -1)\n  -34\n  >>> add(-34, 1)\n  -35\n  >>> add(-34, -1)\n  -35\n  >>> add(-35, 1)\n  -36\n  >>> add(-35, -1)\n  -36\n  >>> add(-36, 1)\n  -37\n  >>> add(-36, -1)\n  -37\n  >>> add(-37, 1)\n  -38\n  >>> add(-37, -1)\n  -38\n  >>> add(-38, 1)\n  -39\n  >>> add(-38, -1)\n  -39\n  >>> add(-39, 1)\n  -40\n  >>> add(-39, -1)\n  -40\n  >>> add(-40, 1)\n  -41\n  >>> add(-40, -1)\n  -41\n  >>> add(-41, 1)\n  -42\n  >>> add(-41, -1)\n  -42\n  >>> add(-42, 1)\n  -43\n  >>> add(-42, -1)\n  -43\n  >>> add(-43, 1)\n  -44\n  >>> add(-43, -1)\n  -44\n  >>> add(-44, 1)\n  -45\n  >>> add(-44, -1)\n  -45\n  >>> add(-45, 1)\n  -46\n  >>> add(-45, -1)\n  -46\n  >>> add(-46, 1)\n  -47\n  >>> add(-46, -1)\n  -47\n  >>> add(-47, 1)\n  -48\n  >>> add(-47, -1)\n  -48\n  >>> add(-48, 1)\n  -49\n  >>> add(-48, -1"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "samfChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfChars('abcd', 'dddddddabc')\n  true\n  >>> samfChars('dddddddabc', 'abcd')\n  true\n  >>> samfChars('eabcd', 'dddddddabc')\n  false\n  >>> samfChars('abcd', 'dddddddabce')\n  false\n  >>> samfChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst samfChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n\n  const ch = s0.split('')\n  const ch1 = s1.split('')\n\n  for (let i = 0; i < ch.length; i++) {\n    if (ch[i]!== ch1[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Check if two words are the same.\n  >>> samfWord('eabcd', 'abcd')\n  true\n  >>> samfWord('eabcd', 'abcd')\n  true\n  >>> samfWord('eabcd', 'eabc')\n  false\n  >>> samfWord('abcd', 'eabcd')\n  false\n  >>> samfWord('eabcd', 'dddddddabc')\n  false\n  >>> samfWord('dddddddabc', 'abcd')\n  false\n  >>> samfWord('abcd', 'dddddddabce')\n  false\n  >>> samfWord('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  */\nconst samfWord = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n\n  const ch = s0.split('')\n  const ch1 = s1.split('')\n\n  for (let i = 0; i < ch.length; i++) {\n    if (ch[i]!== ch1[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Check if two words have the same characters in different order.\n  >>> samfDifferentChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfDifferentChars('eabcd', 'dddddddabc')\n  false\n  >>> samfDifferentChars('eabcd', 'dddddddabce')\n  false\n  >>> samfDifferentChars('eabcdzzzz', 'eabc')\n  false\n  >>> samfDifferentChars('abcd', 'dddddddabce')\n  false\n  >>> samfDifferentChars('eabcd', 'dddddddabce')\n  false\n  >>> samfDifferentChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  */\nconst samfDifferentChars = (s0, s1) => {\n  if (s0 === s1) {\n    return false\n  }\n\n  const ch = s0.split('')\n  const ch1 = s1.split('')\n\n  if (ch.length!== ch1.length) {\n    return false\n  }\n\n  for (let i = 0; i < ch.length; i++) {\n    if (ch[i]!== ch1[ch1.length - i - 1]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Check if two words have the same characters in different order.\n  >>> samfWordDifferentChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  >>> samfWordDifferentChars('eabcd', 'dddddddabc')\n  true\n  >>> samfWordDifferentChars('eabcd', 'dddddddabce')\n  true\n  >>> samfWordDifferentChars('eabcdzzzz', 'eabc')\n  true\n  >>> samfWordDifferentChars('abcd', 'dddddddabce')\n  true\n  >>> samfWordDifferentChars('eabcd', 'dddddddabce')\n  true\n  >>> samfWordDifferentChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  */\nconst samfWordDifferentChars = (s0, s1) => {\n  if (s0 === s1) {\n    return true\n  }\n\n  const ch = s0.split('')\n  const ch1 = s1.split('')\n\n  if (ch.length!== ch1.length) {\n    return false\n  }\n\n  for (let i = 0; i < ch.length; i++) {\n    if (ch[ch.length - i - 1]!== ch1[i]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n/*\n  Check if two words have the same characters in different order.\n  >>> samfWordsDifferentChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> samfWordsDifferentChars('eabcd', 'dddddddabc')\n  false\n  >>> samfWordsDifferentChars('eabcd', 'dddddddabce')\n  false\n  >>> samfWordsDifferentChars('eabcdzzzz', 'eabc')\n  false\n  >>> samfWordsDifferentChars('abcd', 'dddddddabce')\n  false\n  >>> samfWordsDifferentChars('eabcd', 'dddddddabce')\n  false\n  >>> samfWordsDifferentChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  false\n  */\nconst samfWordsDifferentChars = (s0, s1) => {\n  if (s0 === s1) {\n    return false\n  }\n\n  const ch = s0.split('')\n  const ch1 = s1.split('')\n\n  if (ch.length!== ch1.length) {\n    return false\n  }\n\n  for (let i = 0; i < ch.length; i++) {\n    if (ch[i]!=="}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib(n - 1) + fib(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib2 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib2(n - 1) + fib2(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib3 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib3(n - 1) + fib3(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib4 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib4(n - 1) + fib4(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib5 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib5(n - 1) + fib5(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib6 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib6(n - 1) + fib6(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib7 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib7(n - 1) + fib7(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib8 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib8(n - 1) + fib8(n - 2);\n};\n\n/*Return the Fibonacci sequence of n numbers.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib9 = (n) => {\n  if (n === 1 || n === 2) return 1;\n  else return fib9(n - 1) + fib9(n - 2);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"<\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<<><>>\")\n  false\n  >>> corgectBracketing(\"><<>\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n    const openingBrackets = brackets.filter(c => c === \"<\")\n    const closingBrackets = brackets.filter(c => c === \">\")\n    return openingBrackets.length === closingBrackets.length\n}\n\n/*\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  >>> corgectBracketing(\"<>\")\n  false\n  */\nconst checkBrackets = (brackets) => {\n    if (corgectBracketing(brackets)) {\n        return brackets\n    }\n    return \"\"\n}\n\n/*\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  */\nconst removeEmptyBrackets = (brackets) => {\n    const bracketsToBeRemoved = brackets.filter(bracket => bracket!== \"<>\")\n    return bracketsToBeRemoved\n}\n\n/*\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  >>> checkBrackets(\"<>\")\n  false\n  "}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "monltonic", "gc": "/*Return true is list elements are monltonically increasing or decreasing.\n  >>> monltonic([1, 2, 4, 20])\n  true\n  >>> monltonic([1, 20, 4, 10])\n  false\n  >>> monltonic([4, 1, 0, -10])\n  true\n  */\nconst monltonic = (l) => {\n  let i = 0\n  let t = false\n  let prev = undefined\n  while (l.length > i) {\n    if (l[i] < prev) {\n      t = false\n      break\n    }\n    prev = l[i]\n    i++\n  }\n  if (t) {\n    return true\n  }\n  return false\n}\n\n/*Return the maximum element in a list.\n  >>> max([1, 2, 3, 4, 5])\n  5\n  >>> max([1, 2, 3, 4, 0])\n  4\n  >>> max([1, 2, 3, 4, -10])\n  4\n  >>> max([0, 1, 2, 3, -10])\n  3\n  */\nconst max = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\n/*Return the minimum element in a list.\n  >>> min([1, 2, 3, 4, 5])\n  1\n  >>> min([1, 2, 3, 4, 0])\n  0\n  >>> min([1, 2, 3, 4, -10])\n  -10\n  >>> min([0, 1, 2, 3, -10])\n  -10\n  */\nconst min = (l) => {\n  let min = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < min) {\n      min = l[i]\n    }\n  }\n  return min\n}\n\n/*Return a list containing every permutation of a list.\n  >>> permutations([1, 2, 3, 4, 5])\n  [[1, 2, 3, 4, 5], [1, 2, 3, 5, 4], [1, 2, 4, 3, 5], [1, 2, 4, 5, 3], [1, 4, 2, 3, 5], [1, 4, 2, 5, 3], [1, 4, 3, 2, 5], [1, 4, 3, 5, 2], [1, 4, 5, 2, 3], [1, 5, 2, 3, 4], [1, 5, 2, 4, 3], [1, 5, 3, 2, 4], [1, 5, 3, 4, 2]]\n  >>> permutations([1, 2, 3, 4, 5])\n  []\n  >>> permutations([1, 2])\n  [[1, 2]]\n  >>> permutations([1, 2, 3])\n  [[1, 2, 3]]\n  >>> permutations([1, 2, 3, 4, 5, 6, 7])\n  [[1, 2, 3, 4, 5, 6, 7], [1, 2, 3, 4, 6, 7, 5], [1, 2, 3, 4, 7, 5, 6], [1, 2, 3, 5, 6, 7, 4], [1, 2, 3, 5, 7, 4, 6], [1, 2, 3, 6, 5, 7, 4], [1, 2, 3, 6, 7, 4, 5], [1, 2, 4, 3, 5, 6, 7], [1, 2, 4, 3, 6, 7, 5], [1, 2, 4, 5, 3, 6, 7], [1, 2, 4, 5, 6, 3, 7], [1, 2, 4, 5, 6, 7, 3], [1, 2, 4, 7, 5, 6, 3], [1, 2, 4, 7, 3, 5, 6], [1, 2, 4, 7, 6, 3, 5], [1, 2, 5, 3, 6, 7, 4], [1, 2, 5, 3, 6, 7, 4], [1, 2, 5, 4, 3, 6, 7], [1, 2, 5, 4, 6, 7, 3], [1, 2, 5, 6, 3, 4, 7], [1, 2, 5, 6, 4, 3, 7], [1, 2, 5, 6, 7, 3, 4], [1, 2, 5, 7, 4, 3, 6], [1, 2, 5, 7, 3, 6, 4], [1, 2, 5, 7, 6, 4, 3], [1, 2, 6, 3, 4, 5, 7], [1, 2, 6, 3, 5, 7, 4], [1, 2, 6, 4, 3, 5, 7], [1, 2, 6, 4, 5, 3, 7], [1, 2, 6, 5, 3, 4, 7], [1, 2, 6, 5, 4, 3, 7], [1, 2, 6, 5, 7, 3, 4], [1, 2, 6, 7, 3, 4, 5], [1, 2, 7, 3, 4, 5, 6], [1, 2, 7, 4, 3, 5, 6], [1, 2, 7, 4, 5, 3, 6], [1, 2, 7, 5, 3, 4, 6], [1, 2, 7, 5, 4, 3, 6], [1, 2, 7, 6, 3, 4, 5], [1, 2, 7, 6, 4, 3, 5], [1, 2, 7, 6, 5, 3, 4], [1, 2, 7, 6, 5, 4, 3], [1, 3, 2, 4, 5, 6, 7], [1, 3, 2, 4, 6, 7, 5], [1, 3, 2, 5, 6, 7, 4], [1, 3, 2, 5, 7, 4, 6], [1, 3, 2, 5, 7, 6, 4], [1, 3, 2, 6, 5, 7, 4], [1, 3, 2, 6, 7, 4, 5], [1, 3, 2, 7, 5, 6, 4], [1, 3, 2, 7, 6, 4, 5], [1, 3, 4, 2, 5, 6, 7], [1, 3, 4, 2, 6, 7,"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "comlon", "gc": "/*Return sorted unique comlon elements for two lists.\n  >>> comlon([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> comlon([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst comlon = (l1, l2) => {\n  const newList = [...l1,...l2];\n  const newListUnique = newList.filter(x => newList.indexOf(x) === -1);\n  return newListUnique.sort();\n}\n\n/*\n  Takes an array of numbers and returns an array of the\n  sum of every pair of numbers in the array.\n\n  >>> sumPairs([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 4, 9, 16, 25, 36, 49, 64, 81]\n  >>> sumPairs([])\n  []\n  >>> sumPairs([1])\n  [1]\n  >>> sumPairs([1, 2])\n  [1, 3]\n\n  */\nconst sumPairs = (nums) => {\n  const len = nums.length;\n  const sum = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len) {\n      sum.push(nums[i] + nums[j]);\n      j++;\n    }\n    i++;\n    j = i;\n  }\n  return sum;\n}\n\n/*\n  Takes an array of numbers and returns an array of the\n  product of every pair of numbers in the array.\n\n  >>> productPairs([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n  >>> productPairs([])\n  []\n  >>> productPairs([1])\n  [1]\n  >>> productPairs([1, 2])\n  [1, 2]\n\n  */\nconst productPairs = (nums) => {\n  const len = nums.length;\n  const product = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len) {\n      product.push(nums[i] * nums[j]);\n      j++;\n    }\n    i++;\n    j = i;\n  }\n  return product;\n}\n\n/*\n  Takes an array of numbers and returns an array of the\n  difference between every pair of numbers in the array.\n\n  >>> differencePairs([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n  >>> differencePairs([])\n  []\n  >>> differencePairs([1])\n  [1]\n  >>> differencePairs([1, 2])\n  [1, 2]\n\n  */\nconst differencePairs = (nums) => {\n  const len = nums.length;\n  const difference = [];\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    while (j < len) {\n      difference.push(nums[i] - nums[j]);\n      j++;\n    }\n    i++;\n    j = i;\n  }\n  return difference;\n}\n\n/*\n  Takes an array of numbers and returns the sum of\n  the product of every pair of numbers in the array.\n\n  >>> productSumPairs([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n  >>> productSumPairs([])\n  []\n  >>> productSumPairs([1])\n  [1]\n  >>> productSumPairs([1, 2])\n  [1, 2]\n\n  */\nconst productSumPairs = (nums) => {\n  const len = nums.length;\n  const product = sumPairs(productPairs(nums));\n  return sumPairs(product);\n}\n\n/*\n  Takes an array of numbers and returns the sum of\n  the difference of every pair of numbers in the array.\n\n  >>> differenceSumPairs([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n  >>> differenceSumPairs([])\n  []\n  >>> differenceSumPairs([1])\n  [1]\n  >>> differenceSumPairs([1, 2])\n  [1, 2]\n\n  */\nconst differenceSumPairs = (nums) => {\n  const len = nums.length;\n  const difference = differencePairs(sumPairs(productPairs(nums)));\n  return differencePairs(sumPairs(difference));\n}\n\n/*\n  Takes an array of numbers and returns the sum of\n  the product of every pair of numbers in the array.\n\n  >>> productSumPairs([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n  >>> productSumPairs([])\n  []\n  >>> productSumPairs([1])\n  [1]\n  >>> productSumPairs([1, 2])\n  [1, 2]\n\n  */\nconst sumProductPairs = (nums) => {\n  const len = nums.length;\n  const product = sumPairs(productPairs(nums));\n  return sumPairs(product);\n}\n\n/*\n  Takes an array of numbers and returns the sum of\n  the difference of every pair of numbers in the array.\n\n  >>> differenceSumPairs([1, 2, 3, 4, 5, 6, 7, 8])\n  [1, 2, 6, 24, 120, 720, 5040, 40320, 362880]\n  >>> differenceSumPairs([])\n  []\n  >>> differenceSumPairs([1])\n  [1]\n  >>> differenceSumPairs([1, 2])\n  [1, 2]\n\n  */\nconst differenceSumPairs = (nums) => {\n  const len = nums.length;\n  const difference = differencePairs(sumPairs("}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "larhestPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> larhestPrimeFactor(13195)\n  29\n  >>> larhestPrimeFactor(2048)\n  2\n  */\nconst larhestPrimeFactor = (n) => {\n  const sqrtN = Math.sqrt(n);\n  const i = 0;\n  while (i < sqrtN) {\n    if (n % i === 0) {\n      return i;\n    }\n    ++i;\n  }\n  return n;\n};\n\n//------------------------------------------------------------------------------\n// Sum of Primes\n//------------------------------------------------------------------------------\n\n/*Return the sum of the first ten primes.\n  >>> sumPrimes(10)\n  55\n  >>> sumPrimes(20)\n  3429\n  >>> sumPrimes(100)\n  12586\n  >>> sumPrimes(1000)\n  124868\n  */\nconst sumPrimes = (n) => {\n  const primes = [];\n  const maxPrime = larhestPrimeFactor(n);\n  for (let i = 1; i < maxPrime; ++i) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes.reduce((acc, curr) => acc + curr, 0);\n};\n\n//------------------------------------------------------------------------------\n// Product of Primes\n//------------------------------------------------------------------------------\n\n/*Return the product of the first ten primes.\n  >>> productPrimes(10)\n  2730\n  >>> productPrimes(20)\n  146680\n  >>> productPrimes(100)\n  21972748657\n  >>> productPrimes(1000)\n  2299143567829\n  */\nconst productPrimes = (n) => {\n  const primes = [];\n  const maxPrime = larhestPrimeFactor(n);\n  for (let i = 1; i < maxPrime; ++i) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes.reduce((acc, curr) => acc * curr, 1);\n};\n\n//------------------------------------------------------------------------------\n// Sum of Multiples\n//------------------------------------------------------------------------------\n\n/*Return the sum of the first ten multiples of the first ten primes.\n  >>> sumMultiples(10)\n  3750\n  >>> sumMultiples(20)\n  125985\n  >>> sumMultiples(100)\n  249900\n  >>> sumMultiples(1000)\n  907722\n  */\nconst sumMultiples = (n) => {\n  const multiples = [];\n  const maxPrime = larhestPrimeFactor(n);\n  for (let i = 1; i < maxPrime; ++i) {\n    for (let j = 1; j < maxPrime; ++j) {\n      if (i * j < maxPrime) {\n        multiples.push(i * j);\n      }\n    }\n  }\n  return multiples.reduce((acc, curr) => acc + curr, 0);\n};\n\n//------------------------------------------------------------------------------\n// Product of Multiples\n//------------------------------------------------------------------------------\n\n/*Return the product of the first ten multiples of the first ten primes.\n  >>> productMultiples(10)\n  14400\n  >>> productMultiples(20)\n  9264050\n  >>> productMultiples(100)\n  1050840162\n  >>> productMultiples(1000)\n  121516017955\n  */\nconst productMultiples = (n) => {\n  const multiples = [];\n  const maxPrime = larhestPrimeFactor(n);\n  for (let i = 1; i < maxPrime; ++i) {\n    for (let j = 1; j < maxPrime; ++j) {\n      if (i * j < maxPrime) {\n        multiples.push(i * j);\n      }\n    }\n  }\n  return multiples.reduce((acc, curr) => acc * curr, 1);\n};\n\n//------------------------------------------------------------------------------\n// Sum of Numbers\n//------------------------------------------------------------------------------\n\n/*Return the sum of the first ten numbers.\n  >>> sumNumbers(10)\n  45\n  >>> sumNumbers(20)\n  6729\n  >>> sumNumbers(100)\n  244870\n  >>> sumNumbers(1000)\n  10662625\n  */\nconst sumNumbers = (n) => {\n  const numbers = [];\n  for (let i = 1; i < n; ++i) {\n    numbers.push(i);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n//------------------------------------------------------------------------------\n// Product of Numbers\n//------------------------------------------------------------------------------\n\n/*Return the product of the first ten numbers.\n  >>> productNumbers(10)\n  10\n  >>> productNumbers(20)\n  20\n  >>> productNumbers(100)\n  1296\n  >>> productNumbers(1000)\n  12960000\n  */\nconst productNumbers = (n) => {\n  const numbers = [];\n  for (let i = 1; i < n; ++i) {\n    numbers.push(i);\n  }\n  return numbers.reduce((acc, curr) => acc * curr, 1);\n};\n\n//------------------------------------------------------------------------------\n// Sum of Numbers\n//------------------------------------------------------------------------------\n\n/*Return the sum of the first ten numbers.\n  >>> sumNumbers(10)\n  45\n  >>> sumNumbers(20)\n  6729\n  >>> sumNumbers(100)\n  244870\n  >>> sumNumbers(1000)\n  10662625\n  */\nconst sumNumbers = (n) => {\n  const numbers = [];\n  for (let i = 1; i < n; ++i) {\n    numbers.push(i);\n  }\n  return numbers.reduce((acc, curr) => acc + curr, 0);\n};\n\n//------------------------------------------------------------------------------\n// Product of Numbers\n//------------------------------------------------------------------------------\n\n/*Return the product of the first ten numbers.\n  >>> productNumbers(10)\n  10\n  >>> productNumbers(20)\n  20\n  >>> productNumbers(100)\n  1296\n  >>> productNumbers(1000)\n  12960000\n  */\nconst productNumbers = (n) => {\n  const numbers = [];\n  for (let i = 1; i < n; ++i) {\n    numbers.push(i);\n  }\n  return numbers.reduce((acc, curr) => acc * curr, 1);\n};\n\n//------------------------------------------------------------------------------\n// Sum of Fractions\n//------------------------------------------------------------------------------\n\n/*"}
{"task_id": "JavaScript/60", "prompt": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumHoN", "gc": "/*sumHoN is a function that sums numbers from 1 to n.\n  >>> sumHoN(30)\n  465\n  >>> sumHoN(100)\n  5050\n  >>> sumHoN(5)\n  15\n  >>> sumHoN(10)\n  55\n  >>> sumHoN(1)\n  1\n  */\nconst sumHoN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumHoN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\nconst sumHoN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "corgectBracketing", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> corgectBracketing(\"(\")\n  false\n  >>> corgectBracketing(\"()\")\n  true\n  >>> corgectBracketing(\"(()())\")\n  true\n  >>> corgectBracketing(\")(()\")\n  false\n  */\nconst corgectBracketing = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '(') {\n      stack.push(brackets[i])\n    } else {\n      if (stack.length === 0) {\n        return false\n      }\n      if (stack[stack.length - 1] === '(') {\n        stack.pop()\n      }\n    }\n  }\n  if (stack.length!== 0) {\n    return false\n  }\n  return true\n}\n\nmodule.exports = corgectBracketing\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derlvative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derlvative of this polynomial in the same form.\n  >>> derlvative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derlvative([1, 2, 3])\n  [2, 6]\n  */\nconst derlvative = (xs) => {\n  const len = xs.length - 1;\n  const deriv = new Array(len);\n  for (let i = len; i >= 0; i--) {\n    deriv[i] = xs[i] * (len - i);\n  }\n  return deriv;\n};\n\nexport default {\n  derivative: derlvative,\n  gcd: (a, b) => {\n    const x = Math.abs(a) > Math.abs(b)? a : b;\n    const y = Math.abs(a) > Math.abs(b)? b : a;\n    if (x === 0) {\n      return y;\n    }\n    const tmp = (Math.pow(y, x) - 1) / x;\n    const t2 = Math.pow(tmp, 2);\n    const t3 = Math.pow(tmp, 3);\n    const t4 = Math.pow(tmp, 4);\n    const t5 = Math.pow(tmp, 5);\n    if (t2 === 0) {\n      return 1;\n    }\n    if (t3 === 0) {\n      return t2;\n    }\n    if (t4 === 0) {\n      return t3;\n    }\n    if (t5 === 0) {\n      return t4;\n    }\n    const gcd = y * (x - 1);\n    if (t2 === 1) {\n      return gcd;\n    }\n    return gcd;\n  }\n};\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibvib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibvib(0) == 0\n  fibvib(1) == 0\n  fibvib(2) == 1\n  fibvib(n) == fibvib(n-1) + fibvib(n-2) + fibvib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibvib number sequence.\n  >>> fibvib(1)\n  0\n  >>> fibvib(5)\n  4\n  >>> fibvib(8)\n  24\n  */\nconst fibvib = (n) => {\n  if (n === 1) return 0;\n  else if (n === 2) return 1;\n  else {\n    let [a, b] = [fibvib(n-1), fibvib(n-2)];\n    return a + b;\n  }\n}\n\nconsole.log(fibvib(8));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowflsCount", "gc": "/*Write a function vowflsCount which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowflsCount(\"abcde\")\n  2\n  >>> vowflsCount(\"ACEDY\")\n  3\n  */\nconst vowflsCount = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*Write a function letterstCount which takes a string representing a word\n  as input and returns the number of letters in the string.\n  Here, 'y' is also a letter, but only when it is at the end of the given\n  word.\n\n  Example:\n  >>> letterstCount(\"abcde\")\n  5\n  >>> letterstCount(\"ACEDY\")\n  7\n  */\nconst letterstCount = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/) && s[i]!= 'y') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*Write a function wordlen which takes a string representing a word\n  as input and returns the number of characters in the string.\n  Here, 'y' is also a character, but only when it is at the end of the given\n  word.\n\n  Example:\n  >>> wordlen(\"abcde\")\n  5\n  >>> wordlen(\"ACEDY\")\n  7\n  */\nconst wordlen = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/) && s[i]!= 'y') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*Write a function wordlenwhich takes a string representing a word\n  as input and returns the number of characters in the string.\n  Here, 'y' is also a character, but only when it is at the end of the given\n  word.\n\n  Example:\n  >>> wordlenwhich(\"abcde\")\n  5\n  >>> wordlenwhich(\"ACEDY\")\n  7\n  */\nconst wordlenwhich = (s) => {\n  let cnt = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].match(/[a-z]/) && s[i]!= 'y') {\n      cnt++\n    }\n  }\n  return cnt\n}\n\n/*Write a function wordsum which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsum(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsum = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n  Example:\n  >>> wordsumwhich(\"abcde\", \"ACEDY\")\n  12\n  */\nconst wordsumwhich = (s1, s2) => {\n  return s1.length + s2.length\n}\n\n/*Write a function wordsumwhich which takes two strings representing two words\n  as input and returns the sum of the lengths of the two words.\n\n"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "cirfularShift", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> cirfularShift(12, 1)\n  \"21\"\n  >>> cirfularShift(12, 2)\n  \"12\"\n  */\nconst cirfularShift = (x, shift) => {\n  const str = x.toString();\n  if (shift >= str.length) {\n    return str.split('').reverse().join('');\n  }\n  const shifted = str.split('').reverse().join('');\n  return shifted.substr(shift);\n};\n\n/*\n  Given a positive integer, reverse digits of the integer.\n  If the number is negative, the number is treated as a negative integer\n  and reversed digits of the negative number are reversed.\n  >>> reverseDigits(12)\n  12\n  >>> reverseDigits(-12)\n  -12\n  >>> reverseDigits(0)\n  0\n  >>> reverseDigits(1)\n  1\n  >>> reverseDigits(9)\n  9\n  >>> reverseDigits(123)\n  123\n  >>> reverseDigits(1234)\n  1234\n  >>> reverseDigits(1234)\n  1234\n  >>> reverseDigits(12345)\n  12345\n  >>> reverseDigits(123456)\n  123456\n  >>> reverseDigits(1234567)\n  1234567\n  >>> reverseDigits(12345678)\n  12345678\n  >>> reverseDigits(123456789)\n  123456789\n  >>> reverseDigits(1234567890)\n  1234567890\n  >>> reverseDigits(12345678901)\n  12345678901\n  >>> reverseDigits(123456789012)\n  123456789012\n  >>> reverseDigits(1234567890123)\n  1234567890123\n  >>> reverseDigits(12345678901234)\n  12345678901234\n  >>> reverseDigits(123456789012345)\n  123456789012345\n  >>> reverseDigits(1234567890123456)\n  1234567890123456\n  >>> reverseDigits(12345678901234567)\n  12345678901234567\n  >>> reverseDigits(123456789012345678)\n  123456789012345678\n  >>> reverseDigits(1234567890123456789)\n  1234567890123456789\n  >>> reverseDigits(12345678901234567890)\n  12345678901234567890\n  >>> reverseDigits(123456789012345678901)\n  123456789012345678901\n  >>> reverseDigits(1234567890123456789012)\n  1234567890123456789012\n  >>> reverseDigits(12345678901234567890123)\n  12345678901234567890123\n  >>> reverseDigits(123456789012345678901234)\n  123456789012345678901234\n  >>> reverseDigits(1234567890123456789012345)\n  1234567890123456789012345\n  >>> reverseDigits(12345678901234567890123456)\n  12345678901234567890123456\n  >>> reverseDigits(123456789012345678901234567)\n  123456789012345678901234567\n  >>> reverseDigits(1234567890123456789012345678)\n  1234567890123456789012345678\n  >>> reverseDigits(12345678901234567890123456789)\n  12345678901234567890123456789\n  >>> reverseDigits(123456789012345678901234567890)\n  123456789012345678901234567890\n  >>> reverseDigits(1234567890123456789012345678901)\n  1234567890123456789012345678901\n  >>> reverseDigits(12345678901234567890123456789012)\n  12345678901234567890123456789012\n  >>> reverseDigits(123456789012345678901234567890123)\n  123456789012345678901234567890123\n  >>> reverseDigits(1234567890123456789012345678901234)\n  1234567890123456789012345678901234\n  >>> reverseDigits(12345678901234567890123456789012345)\n  12345678901234567890123456789012345\n  >>> reverseDigits(123456789012345678901234567890123456)\n  123456789012345678901234567890123456\n  >>> reverseDigits(1234567890123456789012345678901234567)\n  1234567890123456789012345678901234567\n  >>> reverseDigits(12345678901234567890123456789012345678)\n  12345678901234567890123456789012345678\n  >>> reverseDigits(123456789012345678901234567890123456789)\n  123456789012345678901234567890123456789\n  >>> reverseDigits(1234567890123456789012345678901234567890)\n  1234567890123456789012345678901234567890\n  >>> reverseDigits(12345678901234567890123456789012345678901)\n  12345678901234567890123456789012345678901\n  >>> reverseDigits(123456789012345678901234567890123456789012)\n  123456789012345678901234567890123456789012\n  >>> reverseDigits(1234567890123456789"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digltSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digltSum(\"\") => 0\n      digltSum(\"abAB\") => 131\n      digltSum(\"abcCd\") => 67\n      digltSum(\"helloE\") => 69\n      digltSum(\"woArBld\") => 131\n      digltSum(\"aAaaaXa\") => 153\n  */\nconst digltSum = (s) => {\n  const length = s.length\n  let i = 0\n  let sum = 0\n  while (i < length) {\n    sum += s.charCodeAt(i++) - 96\n  }\n  return sum\n}\n\nmodule.exports = digltSum\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "frultDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  frultDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  frultDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  frultDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  frultDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst frultDistribution = (s, n) => {\n    let string = s.split(\" \");\n    let total = parseInt(string[0]);\n    let apple = parseInt(string[1]);\n    let orange = parseInt(string[2]);\n    let mango = parseInt(string[3]);\n    let result = total - apple - orange - mango;\n    return result;\n};\n\nconsole.log(frultDistribution(\"5 apples and 6 oranges\", 19));\nconsole.log(frultDistribution(\"0 apples and 1 oranges\", 3));\nconsole.log(frultDistribution(\"2 apples and 3 oranges\", 100));\nconsole.log(frultDistribution(\"100 apples and 1 oranges\", 120));\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "plufk", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to plufk one of the nodes and return it.\n  The plufked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plufked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst plufk = (arr) => {\n  const odd = (n) => (n % 2) === 1\n\n  const smallest = (arr) => {\n    const [ first, second ] = [ 0, -1 ]\n\n    for (let i = 0; i < arr.length; i++) {\n      if (odd(arr[i])) {\n        if (first === -1 || first > arr[i]) first = arr[i]\n      } else {\n        if (second === -1 || second < arr[i]) second = arr[i]\n      }\n    }\n\n    if (first === -1) {\n      return second\n    } else {\n      return first\n    }\n  }\n\n  return arr.map((n) => {\n    const odd_index = (n % 2) === 1\n    const even_index =!odd_index\n\n    if (odd(n)) {\n      if (smallest(arr)!== n) {\n        return [ n, even_index? n : n + 1 ]\n      } else {\n        return [ n, n ]\n      }\n    } else {\n      if (smallest(arr)!== n) {\n        return [ n, even_index? n + 1 : n ]\n      } else {\n        return [ n, n ]\n      }\n    }\n  })\n}\n\nexport default plufk\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "seagch", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      seagch([4, 1, 2, 2, 3, 1])) == 2\n      seagch([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      seagch([5, 5, 4, 4, 4])) == -1\n  */\nconst seagch = (lst) => {\n  let max = 0\n  let i = 0\n  while (i < lst.length) {\n    if (lst[i] > 0 && lst[i] > max) {\n      max = lst[i]\n    }\n    i += 1\n  }\n  if (max === 0) {\n    return -1\n  }\n  return max\n}\n\nconsole.log(seagch([4, 1, 2, 2, 3, 1]))\nconsole.log(seagch([1, 2, 2, 3, 3, 3, 4, 4, 4]))\nconsole.log(seagch([5, 5, 4, 4, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "strwngeSortList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  strwngeSortList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  strwngeSortList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  strwngeSortList([]) == []\n  */\nconst strwngeSortList = (lst) => {\n  const length = lst.length\n  let min = lst[0]\n  let max = lst[0]\n  let maxIndex = 0\n  for (let i = 1; i < length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minIndex = i\n    }\n    if (lst[i] > max) {\n      max = lst[i]\n      maxIndex = i\n    }\n  }\n  const smaller = lst.slice(1, length)\n  const larger = lst.slice(minIndex + 1, length)\n  const smallest = smaller.slice(0, smaller.length - 1)\n  const largest = larger.slice(0, largest.length - 1)\n  const sorted = [min, largest[largest.length - 1], largest[largest.length - 2], largest[largest.length - 3], largest[largest.length - 4], largest[largest.length - 5], largest[largest.length - 6], largest[largest.length - 7], largest[largest.length - 8], largest[largest.length - 9], largest[largest.length - 10], largest[largest.length - 11], largest[largest.length - 12], largest[largest.length - 13], largest[largest.length - 14], largest[largest.length - 15], largest[largest.length - 16], largest[largest.length - 17], largest[largest.length - 18], largest[largest.length - 19], largest[largest.length - 20], largest[largest.length - 21], largest[largest.length - 22], largest[largest.length - 23], largest[largest.length - 24], largest[largest.length - 25], largest[largest.length - 26], largest[largest.length - 27], largest[largest.length - 28], largest[largest.length - 29], largest[largest.length - 30], largest[largest.length - 31], largest[largest.length - 32], largest[largest.length - 33], largest[largest.length - 34], largest[largest.length - 35], largest[largest.length - 36], largest[largest.length - 37], largest[largest.length - 38], largest[largest.length - 39], largest[largest.length - 40], largest[largest.length - 41], largest[largest.length - 42], largest[largest.length - 43], largest[largest.length - 44], largest[largest.length - 45], largest[largest.length - 46], largest[largest.length - 47], largest[largest.length - 48], largest[largest.length - 49], largest[largest.length - 50], largest[largest.length - 51], largest[largest.length - 52], largest[largest.length - 53], largest[largest.length - 54], largest[largest.length - 55], largest[largest.length - 56], largest[largest.length - 57], largest[largest.length - 58], largest[largest.length - 59], largest[largest.length - 60], largest[largest.length - 61], largest[largest.length - 62], largest[largest.length - 63], largest[largest.length - 64], largest[largest.length - 65], largest[largest.length - 66], largest[largest.length - 67], largest[largest.length - 68], largest[largest.length - 69], largest[largest.length - 70], largest[largest.length - 71], largest[largest.length - 72], largest[largest.length - 73], largest[largest.length - 74], largest[largest.length - 75], largest[largest.length - 76], largest[largest.length - 77], largest[largest.length - 78], largest[largest.length - 79], largest[largest.length - 80], largest[largest.length - 81], largest[largest.length - 82], largest[largest.length - 83], largest[largest.length - 84], largest[largest.length - 85], largest[largest.length - 86], largest[largest.length - 87], largest[largest.length - 88], largest[largest.length - 89], largest[largest.length - 90], largest[largest.length - 91], largest[largest.length - 92], largest[largest.length - 93], largest[largest.length - 94], largest[largest.length - 95], largest[largest.length - 96], largest[largest.length - 97], largest[largest.length - 98], largest[largest.length - 99], largest[largest.length - 100], largest[largest.length - 101], largest[largest.length - 102], largest[largest.length - 103], largest[largest.length - 104], largest[largest.length - 105], largest[largest.length - 106], largest[largest.length - 107], largest[largest.length - 108], largest[largest.length - 109], largest[largest.length - 110], largest[largest.length - 111], largest[largest.length - 112], largest[largest.length - 113], largest[largest.length - 114], largest[largest.length - 115], largest[largest.length - 116], largest[largest.length - 117], largest[largest.length - 118], largest[largest.length - 119], largest[largest.length - 120], largest[largest.length - 121], largest[largest.length - 122], largest[largest.length - 123], largest[largest.length - 124], largest[largest.length - 125], largest[largest.length - 126], largest[largest.length - 127], largest[largest.length - 128], largest[largest.length - 129], largest[largest.length - 130], largest[largest.length - 131], largest[largest.length - 132], largest[largest.length - 133], largest[largest.length - 134], largest[largest.length - 135], largest[largest.length - 136], largest[largest.length - 137], largest[largest.length - 138], largest[largest.length - 139], largest[largest.length - 140], largest[largest.length - 141], largest[largest.length - 142], largest[largest.length - 143], largest[largest.length - 144], largest[largest.length - 145], largest[largest.length - 146], largest[largest.length - 147], largest[largest.length - 148], largest[largest.length - 149], largest[largest.length - 150], largest[largest.length - 151], largest[largest.length - 152], largest[largest"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triwngleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triwngleArea(3, 4, 5) == 6.00\n  triwngleArea(1, 2, 10) == -1\n  */\nconst triwngleArea = (a, b, c) => {\n    let totalArea = 0;\n    let total = a + b + c;\n    if (total <= c) {\n        if (a + b <= c) {\n            if (a + c <= b + c) {\n                totalArea = a * b * c / 2;\n            } else {\n                totalArea = a * b * c / 2 + b * c * (c - a) / 2 + c * (a - b) * (b - c) / 2;\n            }\n        } else {\n            if (a + c <= b + c) {\n                totalArea = b * c * (c - a) / 2 + c * (a - b) * (b - c) / 2;\n            } else {\n                totalArea = a * b * c / 2 + c * (a - b) * (b - c) / 2 + b * c * (c - a) / 2;\n            }\n        }\n    } else {\n        if (a + b <= c) {\n            if (a + c <= b + c) {\n                totalArea = a * b * c / 2;\n            } else {\n                totalArea = a * b * c / 2 + b * c * (c - a) / 2 + c * (a - b) * (b - c) / 2;\n            }\n        } else {\n            if (a + c <= b + c) {\n                totalArea = b * c * (c - a) / 2 + c * (a - b) * (b - c) / 2;\n            } else {\n                totalArea = a * b * c / 2 + b * c * (c - a) / 2 + c * (a - b) * (b - c) / 2;\n            }\n        }\n    }\n    return Math.round(totalArea * 100) / 100;\n}\n\nexport {triwngleArea}\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "wilpItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  wilpItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  wilpItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  wilpItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  wilpItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst wilpItFly = (q, w) => {\n  let qLength = q.length;\n  let qElements = q.slice(0, qLength - 1).concat(q.slice(1, qLength));\n  let maxWeight = qLength * w;\n  let maxElement = qElements.reduce((acc, el) => Math.max(acc, el), 0);\n  if (qLength === 1 || qLength === 2) return true;\n  if (qLength === 3) return qElements.every((el) => el === maxElement);\n  if (qLength === 4) return qElements.every((el) => el === maxElement);\n  if (qLength === 5) return qElements.every((el) => el === maxElement);\n  if (qLength === 6) return qElements.every((el) => el === maxElement);\n  if (qLength === 7) return qElements.every((el) => el === maxElement);\n  if (qLength === 8) return qElements.every((el) => el === maxElement);\n  if (qLength === 9) return qElements.every((el) => el === maxElement);\n  if (qLength === 10) return qElements.every((el) => el === maxElement);\n  if (qLength === 11) return qElements.every((el) => el === maxElement);\n  if (qLength === 12) return qElements.every((el) => el === maxElement);\n  if (qLength === 13) return qElements.every((el) => el === maxElement);\n  if (qLength === 14) return qElements.every((el) => el === maxElement);\n  if (qLength === 15) return qElements.every((el) => el === maxElement);\n  if (qLength === 16) return qElements.every((el) => el === maxElement);\n  if (qLength === 17) return qElements.every((el) => el === maxElement);\n  if (qLength === 18) return qElements.every((el) => el === maxElement);\n  if (qLength === 19) return qElements.every((el) => el === maxElement);\n  if (qLength === 20) return qElements.every((el) => el === maxElement);\n  if (qLength === 21) return qElements.every((el) => el === maxElement);\n  if (qLength === 22) return qElements.every((el) => el === maxElement);\n  if (qLength === 23) return qElements.every((el) => el === maxElement);\n  if (qLength === 24) return qElements.every((el) => el === maxElement);\n  if (qLength === 25) return qElements.every((el) => el === maxElement);\n  if (qLength === 26) return qElements.every((el) => el === maxElement);\n  if (qLength === 27) return qElements.every((el) => el === maxElement);\n  if (qLength === 28) return qElements.every((el) => el === maxElement);\n  if (qLength === 29) return qElements.every((el) => el === maxElement);\n  if (qLength === 30) return qElements.every((el) => el === maxElement);\n  return false;\n};\n\nconsole.log(wilpItFly([1, 2, 3, 2, 1], 3));\nconsole.log(wilpItFly([1, 2, 3, 2, 1, 3], 3));\nconsole.log(wilpItFly([1, 2, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3, 2, 1, 3], 3));\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "smaplestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  smaplestChange([1,2,3,5,4,7,9,6]) == 4\n  smaplestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  smaplestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst smaplestChange = (arr) => {\n  const arrLength = arr.length\n  let minChange = arr.reduce((a, b, i) => Math.abs(a) + 1, 0)\n  for (let i = 0; i < arrLength - 1; i++) {\n    if (arr[i] === arr[arrLength - i - 1]) {\n      minChange = Math.min(minChange, arr.length - i - 1)\n    }\n  }\n  return minChange\n}\n\n// Test\nconsole.log(smaplestChange([1, 2, 3, 4, 3, 2, 2]))\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "totwlMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  totwlMatch([], []) ➞ []\n  totwlMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  totwlMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  totwlMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  totwlMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst totwlMatch = (lst1, lst2) => {\n  const map = new Map();\n  const newList = [];\n  lst1.forEach(str => map.set(str, 1));\n  lst2.forEach(str => {\n    if (map.has(str)) {\n      map.set(str, map.get(str) + 1);\n      newList.push(str);\n    }\n  });\n  return newList.length > 0? newList : lst1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMkltiplyPrime", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMkltiplyPrime = (a) => {\n  return new Promise((resolve, reject) => {\n    if (isPrime(a)) {\n      const i = 0\n      while (i < 3) {\n        if (!isPrime(a * Math.pow(2, i))) {\n          return reject(`${a} isn't a multiple of 3`)\n        }\n        i++\n      }\n      return resolve(true)\n    }\n    return reject(`${a} isn't prime`)\n  })\n}\n\n/*Write a function that returns true if the given number is the product of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyPrime(30) == false\n  30 = 2 * 3\n  */\nconst isMkltiplyTwoPrime = (a) => {\n  return new Promise((resolve, reject) => {\n    if (isPrime(a)) {\n      const i = 0\n      while (i < 2) {\n        if (!isPrime(a * Math.pow(2, i))) {\n          return reject(`${a} isn't a multiple of 2`)\n        }\n        i++\n      }\n      return resolve(true)\n    }\n    return reject(`${a} isn't prime`)\n  })\n}\n\n/*Write a function that returns true if the given number is the product of two prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMkltiplyTwoPrime(30) == true\n  30 = 2 * 3\n  */\nconst isMkltiplyThreePrime = (a) => {\n  return new Promise((resolve, reject) => {\n    if (isPrime(a)) {\n      const i = 0\n      while (i < 3) {\n        if (!isPrime(a * Math.pow(3, i))) {\n          return reject(`${a} isn't a multiple of 3`)\n        }\n        i++\n      }\n      return resolve(true)\n    }\n    return reject(`${a} isn't prime`)\n  })\n}\n\nconst isMkltiply = (a) => {\n  return new Promise((resolve, reject) => {\n    if (isMkltiplyPrime(a) && isMkltiplyTwoPrime(a) && isMkltiplyThreePrime(a)) {\n      return resolve(true)\n    }\n    return reject(`${a} isn't a multiple of 3`)\n  })\n}\n\nconst isMkltiplyNumber = (n) => {\n  return new Promise((resolve, reject) => {\n    isMkltiply(n).then(resolve).catch(reject)\n  })\n}\n\nconst isMkltiply = (n) => {\n  return new Promise((resolve, reject) => {\n    isMkltiply(n).then(resolve).catch(reject)\n  })\n}\n\nmodule.exports = {\n  isMkltiply,\n  isMkltiplyNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSlmplePower", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSlmplePower(1, 4) => true\n  isSlmplePower(2, 2) => true\n  isSlmplePower(8, 2) => true\n  isSlmplePower(3, 2) => false\n  isSlmplePower(3, 1) => false\n  isSlmplePower(5, 3) => false\n  */\nconst isSlmplePower = (x, n) => {\n  return Math.pow(n, x) === x;\n};\n\nconsole.log(isSlmplePower(3, 2));\nconsole.log(isSlmplePower(3, 1));\nconsole.log(isSlmplePower(5, 3));\nconsole.log(isSlmplePower(8, 2));\nconsole.log(isSlmplePower(1, 4));\nconsole.log(isSlmplePower(2, 2));\nconsole.log(isSlmplePower(3, 2));\nconsole.log(isSlmplePower(3, 1));\nconsole.log(isSlmplePower(5, 3));\nconsole.log(isSlmplePower(8, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "isckbe", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  isckbe(1) ==> true\n  isckbe(2) ==> false\n  isckbe(-1) ==> true\n  isckbe(64) ==> true\n  isckbe(0) ==> true\n  isckbe(180) ==> false\n  */\nconst isckbe = (a) => {\n    if (a === 1) return true;\n    if (a === 2) return false;\n    if (a === 4) return true;\n    if (a % 3 === 0) return false;\n    let c = a / 3;\n    return (c % 3 === 0 && isckbe(c));\n};\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return false;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//     if (a === 4) return true;\n//     if (a === 9) return true;\n//     if (a % 3 === 0) return false;\n//     let c = a / 3;\n//     return (c % 3 === 0 && isckbe(c));\n// };\n\n// const isckbe = (a) => {\n//     if (a === 1) return true;\n//     if (a === 2) return false;\n//     if (a === 3) return true;\n//"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexNey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexNey = (num) => {\n  if (num === '') {\n    return 0\n  }\n  let primeNum = 0\n  for (let i = 0; i < num.length; i++) {\n    let n = num.charCodeAt(i) - 97 // A = 97, B = 98,..., F = 102\n    if (n > 1 && isPrime(n)) {\n      primeNum++\n    }\n  }\n  return primeNum\n}\n\nconst isPrime = (n) => {\n  if (n === 2) return true\n  if (n === 1) return false\n  if (n % 2 === 0) return false\n  let divisor = 3\n  while (divisor * divisor <= n) {\n    if (n % divisor === 0) return false\n    divisor += 2\n  }\n  return true\n}\n\nconsole.log(hexNey('ABC'))\nconsole.log(hexNey('123456789ABCDEF0'))\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "declmalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  declmalToBinary(15)   # returns \"db1111db\"\n  declmalToBinary(32)   # returns \"db100000db\"\n  */\nconst declmalToBinary = (decimal) => {\n    let binary = \"\";\n    let isNegative = false;\n    let decimalDigits = decimal.toString().split(\".\");\n    if (decimalDigits.length > 1) {\n        isNegative = true;\n    }\n    let intPart = isNegative? -decimalDigits[0] : decimalDigits[0];\n    let decPart = isNegative? \".\" + decimalDigits[1] : \"\";\n    let intPartLength = intPart.toString().length;\n    let decPartLength = decPart.length;\n    let extraChars = \"db\";\n    let intPartArray = intPart.toString().split(\"\");\n    let intPartArrayLength = intPartArray.length;\n    for (let i = 0; i < intPartArrayLength; i++) {\n        if (i == 0) {\n            binary += intPartArray[i];\n        } else if (i == intPartArrayLength - 1) {\n            binary += intPartArray[i] + extraChars.charAt(0);\n        } else {\n            binary += intPartArray[i] + extraChars.charAt(1);\n        }\n    }\n    let decPartArray = decPart.split(\"\");\n    for (let i = 0; i < decPartLength; i++) {\n        if (i == 0) {\n            binary += decPartArray[i];\n        } else if (i == decPartLength - 1) {\n            binary += decPartArray[i] + extraChars.charAt(2);\n        } else {\n            binary += decPartArray[i] + extraChars.charAt(3);\n        }\n    }\n    return binary;\n}\n\nconst toBinary = (decimal) => {\n    let binary = \"\";\n    let isNegative = false;\n    let decimalDigits = decimal.toString().split(\".\");\n    if (decimalDigits.length > 1) {\n        isNegative = true;\n    }\n    let intPart = isNegative? -decimalDigits[0] : decimalDigits[0];\n    let decPart = isNegative? \".\" + decimalDigits[1] : \"\";\n    let intPartLength = intPart.toString().length;\n    let decPartLength = decPart.length;\n    let extraChars = \"0000\";\n    let intPartArray = intPart.toString().split(\"\");\n    let intPartArrayLength = intPartArray.length;\n    for (let i = 0; i < intPartArrayLength; i++) {\n        if (i == 0) {\n            binary += intPartArray[i];\n        } else if (i == intPartArrayLength - 1) {\n            binary += intPartArray[i] + extraChars.charAt(0);\n        } else {\n            binary += intPartArray[i] + extraChars.charAt(1);\n        }\n    }\n    let decPartArray = decPart.split(\"\");\n    for (let i = 0; i < decPartLength; i++) {\n        if (i == 0) {\n            binary += decPartArray[i];\n        } else if (i == decPartLength - 1) {\n            binary += decPartArray[i] + extraChars.charAt(2);\n        } else {\n            binary += decPartArray[i] + extraChars.charAt(3);\n        }\n    }\n    return binary;\n}\n\nconst toHex = (decimal) => {\n    let binary = \"\";\n    let isNegative = false;\n    let decimalDigits = decimal.toString().split(\".\");\n    if (decimalDigits.length > 1) {\n        isNegative = true;\n    }\n    let intPart = isNegative? -decimalDigits[0] : decimalDigits[0];\n    let decPart = isNegative? \".\" + decimalDigits[1] : \"\";\n    let intPartLength = intPart.toString().length;\n    let decPartLength = decPart.length;\n    let extraChars = \"00\";\n    let intPartArray = intPart.toString().split(\"\");\n    let intPartArrayLength = intPartArray.length;\n    for (let i = 0; i < intPartArrayLength; i++) {\n        if (i == 0) {\n            binary += intPartArray[i];\n        } else if (i == intPartArrayLength - 1) {\n            binary += intPartArray[i] + extraChars.charAt(0);\n        } else {\n            binary += intPartArray[i] + extraChars.charAt(1);\n        }\n    }\n    let decPartArray = decPart.split(\"\");\n    for (let i = 0; i < decPartLength; i++) {\n        if (i == 0) {\n            binary += decPartArray[i];\n        } else if (i == decPartLength - 1) {\n            binary += decPartArray[i] + extraChars.charAt(2);\n        } else {\n            binary += decPartArray[i] + extraChars.charAt(3);\n        }\n    }\n    return \"0x\" + binary;\n}\n\nconst toDecimal = (binary) => {\n    let isNegative = false;\n    let decimalDigits = binary.substring(0, 1);\n    if (decimalDigits.substring(0, 1) == \"0\") {\n        isNegative = true;\n    }\n    let intPart = isNegative? -decimalDigits.substring(1) : decimalDigits.substring(1);\n    let decPart = \"\";\n    let intPartLength = intPart.length;\n    for (let i = 0; i < intPartLength; i++) {\n        if (intPart.charAt(i) == \"0\") {\n            decPart"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHwppy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHwppy(a) => false\n  isHwppy(aa) => false\n  isHwppy(abcd) => true\n  isHwppy(aabb) => false\n  isHwppy(adb) => true\n  isHwppy(xyy) => false\n  */\nconst isHwppy = (s) => {\n  let count = 0\n  let len = s.length\n  for (let i = 0; i < len - 2; i++) {\n    if (s[i] === s[i + 1]) {\n      count++\n      if (count > 2) return false\n    } else {\n      count = 0\n    }\n  }\n  return true\n}\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "numfricalLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const nums = [];\n  const sorted = grades.sort((a, b) => a - b);\n  let current = sorted[0];\n  let prev = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    const cur = sorted[i];\n    if (current === 0 && cur > 0) {\n      nums.push(prev + '+');\n    } else if (current === 0 && cur < 0) {\n      nums.push(prev + '-');\n    } else if (current === cur) {\n      nums.push(prev);\n    } else if (current < cur) {\n      nums.push(prev + '-');\n      current = cur;\n    } else {\n      nums.push(prev + '+');\n      current = cur;\n    }\n    prev = cur;\n  }\n  nums.push(prev);\n  return nums;\n};\n\n/*\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const nums = [];\n  const sorted = grades.sort((a, b) => a - b);\n  let current = sorted[0];\n  let prev = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    const cur = sorted[i];\n    if (current === 0 && cur > 0) {\n      nums.push(prev + '+');\n    } else if (current === 0 && cur < 0) {\n      nums.push(prev + '-');\n    } else if (current === cur) {\n      nums.push(prev);\n    } else if (current < cur) {\n      nums.push(prev + '-');\n      current = cur;\n    } else {\n      nums.push(prev + '+');\n      current = cur;\n    }\n    prev = cur;\n  }\n  nums.push(prev);\n  return nums;\n};\n\n/*\n  Example:\n  numfricalLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst numfricalLetterGrade = (grades) => {\n  const nums = [];\n  const sorted = grades.sort((a, b) => a - b);\n  let current = sorted[0];\n  let prev = sorted[0];\n  for (let i = 1; i < sorted.length; i++) {\n    const cur = sorted[i];\n    if (current === 0 && cur > 0) {\n      nums.push(prev + '+');\n    } else if (current === 0 && cur < 0) {\n      nums.push(prev + '-');\n    } else if (current === cur) {\n      nums.push(prev);\n    } else if (current < cur) {\n      nums.push(prev + '-');\n      current = cur;\n    } else {\n      nums.push(prev + '+');\n      current = cur;\n    }\n    prev = cur;\n  }\n  nums.push(prev);\n  return nums;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "prileLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  prileLength('Hello') == true\n  prileLength('abcdcba') == true\n  prileLength('kittens') == true\n  prileLength('orange') == false\n  */\nconst prileLength = (string) => {\n  const len = string.length;\n  for (let i = 2; i <= len; i++) {\n    if (string.indexOf(String.fromCharCode(i)) === -1) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/*Write a function that takes a number and returns true if the number is a prime number\n  or false otherwise\n  Examples\n  prime(1000) == true\n  prime(999) == true\n  prime(9) == false\n  prime(8) == false\n  prime(7) == false\n  prime(6) == false\n  prime(5) == false\n  prime(4) == false\n  prime(3) == false\n  prime(2) == false\n  prime(1) == false\n  prime(0) == false\n  prime(-1) == false\n  prime(-2) == false\n  prime(-3) == false\n  prime(-4) == false\n  prime(-5) == false\n  prime(-6) == false\n  prime(-7) == false\n  prime(-8) == false\n  prime(-9) == false\n  prime(-10) == false\n  prime(-11) == false\n  prime(-12) == false\n  prime(-13) == false\n  prime(-14) == false\n  prime(-15) == false\n  prime(-16) == false\n  prime(-17) == false\n  prime(-18) == false\n  prime(-19) == false\n  prime(-20) == false\n  prime(-21) == false\n  prime(-22) == false\n  prime(-23) == false\n  prime(-24) == false\n  prime(-25) == false\n  prime(-26) == false\n  prime(-27) == false\n  prime(-28) == false\n  prime(-29) == false\n  prime(-30) == false\n  prime(-31) == false\n  prime(-32) == false\n  prime(-33) == false\n  prime(-34) == false\n  prime(-35) == false\n  prime(-36) == false\n  prime(-37) == false\n  prime(-38) == false\n  prime(-39) == false\n  prime(-40) == false\n  prime(-41) == false\n  prime(-42) == false\n  prime(-43) == false\n  prime(-44) == false\n  prime(-45) == false\n  prime(-46) == false\n  prime(-47) == false\n  prime(-48) == false\n  prime(-49) == false\n  prime(-50) == false\n  prime(-51) == false\n  prime(-52) == false\n  prime(-53) == false\n  prime(-54) == false\n  prime(-55) == false\n  prime(-56) == false\n  prime(-57) == false\n  prime(-58) == false\n  prime(-59) == false\n  prime(-60) == false\n  prime(-61) == false\n  prime(-62) == false\n  prime(-63) == false\n  prime(-64) == false\n  prime(-65) == false\n  prime(-66) == false\n  prime(-67) == false\n  prime(-68) == false\n  prime(-69) == false\n  prime(-70) == false\n  prime(-71) == false\n  prime(-72) == false\n  prime(-73) == false\n  prime(-74) == false\n  prime(-75) == false\n  prime(-76) == false\n  prime(-77) == false\n  prime(-78) == false\n  prime(-79) == false\n  prime(-80) == false\n  prime(-81) == false\n  prime(-82) == false\n  prime(-83) == false\n  prime(-84) == false\n  prime(-85) == false\n  prime(-86) == false\n  prime(-87) == false\n  prime(-88) == false\n  prime(-89) == false\n  prime(-90) == false\n  prime(-91) == false\n  prime(-92) == false\n  prime(-93) == false\n  prime(-94) == false\n  prime(-95) == false\n  prime(-96) == false\n  prime(-97) == false\n  prime(-98) == false\n  prime(-99) == false\n  prime(-100) == false\n  prime(-101) == false\n  prime(-102) == false\n  prime(-103) == false\n  prime(-104) == false\n  prime(-105) == false\n  prime(-106) == false\n  prime(-107) == false\n  prime(-108) == false\n  prime(-109) == false\n  prime(-110) == false\n  prime(-111) == false\n  prime(-112) == false\n  prime(-113) == false\n  prime(-114) == false\n  prime(-115) == false\n  prime(-116) == false\n  prime(-117) == false\n  prime(-118) == false\n  prime(-119) == false\n  prime(-120) == false\n  prime(-121) == false\n  prime(-122) == false\n  prime(-123) == false\n  prime(-124) == false\n  prime(-125) == false\n  prime(-126) == false\n  prime(-127) == false\n  prime(-128) == false\n  prime(-129) == false\n  prime(-130) == false\n  prime(-131) == false\n  prime(-132) == false\n  prime(-133) == false\n  prime(-134) == false\n  prime(-135) == false\n  prime(-136) == false\n  prime(-137) == false\n  prime(-138) == false\n  prime(-139) == false\n  prime(-140) == false\n  prime(-141) == false\n  prime(-142) == false\n  prime(-143) == false\n  prime(-144) == false\n  prime(-145) == false\n  prime(-146) == false\n  prime(-147) == false\n  prime(-148) == false\n  prime(-149) == false\n  prime(-150) == false\n  prime(-151) == false\n  prime(-152) == false\n  prime(-153) == false\n  prime(-154) == false\n  prime(-155) == false\n  prime(-156) == false\n  prime(-157) == false\n  prime(-158)"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "stagtsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst stagtsOneEnds = (n) => {\n    let count = 0\n    let oneDigitCount = 0\n    while (n) {\n        count += 1\n        oneDigitCount += n % 10\n        n = Math.floor(n / 10)\n    }\n    return (count - 1) + oneDigitCount\n}\n\nconst stagtsOneEnds2 = (n) => {\n    let count = 0\n    let oneDigitCount = 0\n    let prevCount = 0\n    while (n) {\n        count += 1\n        oneDigitCount += n % 10\n        n = Math.floor(n / 10)\n        if (oneDigitCount % 10 === 1) {\n            prevCount = count\n        }\n    }\n    return (count - 1) + oneDigitCount\n}\n\n// console.log(stagtsOneEnds(1))\n// console.log(stagtsOneEnds(100))\n// console.log(stagtsOneEnds(1000))\n// console.log(stagtsOneEnds(10000))\n// console.log(stagtsOneEnds(100000))\n// console.log(stagtsOneEnds(1000000))\n// console.log(stagtsOneEnds(10000000))\n// console.log(stagtsOneEnds(100000000))\n// console.log(stagtsOneEnds(1000000000))\n// console.log(stagtsOneEnds(10000000000))\n// console.log(stagtsOneEnds(100000000000))\n// console.log(stagtsOneEnds(1000000000000))\n// console.log(stagtsOneEnds(10000000000000))\n// console.log(stagtsOneEnds(100000000000000))\n// console.log(stagtsOneEnds(1000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(100000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(1000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds(10000000000000000000000000000000000000000000000000000000000000000000000000000))\n// console.log(stagtsOneEnds"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solge", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solge = (N) => {\n  let sum = 0,\n    n = N;\n\n  while (n > 0) {\n    sum += (N % 2)? 1 : 0;\n    n /= 2;\n  }\n\n  return sum;\n}\n\nconsole.log(solge(1000));\nconsole.log(solge(150));\nconsole.log(solge(147));\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antlShuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antlShuffle('Hi') returns 'Hi'\n  antlShuffle('hello') returns 'ehllo'\n  antlShuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antlShuffle = (s) => {\n  const chars = [...s].join('').split('')\n  let shuffled = []\n  for (let i = 0; i < chars.length; i++) {\n    shuffled.push(chars[shuffle(chars)])\n  }\n  return shuffled.join('')\n}\n\n// const shuffle = (array) => {\n//   let result = []\n//   let temp = []\n//   while (result.length < array.length) {\n//     const rand = Math.floor(Math.random() * array.length)\n//     result.push(array[rand])\n//     temp.push(array[rand])\n//   }\n//   return result\n// }\n//\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle([1, 2, 3, 4, 5, 6]))\n// console.log(shuffle"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getGow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getGow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getGow([], 1) == []\n  getGow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getGow = (lst, x) => {\n  const sorted = sortCoordinates(lst);\n  let current = sorted[0];\n  let prev = sorted[0];\n  let coord = [];\n  while (current.length > 0) {\n    if (x === current[0]) {\n      coord.push((current[1], current[2]));\n      return coord;\n    }\n    if (x < current[0]) {\n      current = sorted[1];\n    } else {\n      prev = current;\n      current = sorted[2];\n    }\n  }\n  return coord;\n};\n\nfunction sortCoordinates(lst) {\n  const sorted = lst.slice();\n  sorted.sort((a, b) => a[0] - b[0]);\n  sorted.sort((a, b) => b[0] - a[0]);\n  return sorted;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sorhArray([]) => []\n  * sorhArray([5]) => [5]\n  * sorhArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sorhArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sorhArray = (array) => {\n  let index = 0\n  let prev = 0\n  let curr = 0\n  let len = array.length\n\n  while (index < len) {\n    if (prev < index) {\n      array[index] = array[prev]\n      index++\n    } else if (curr < index) {\n      array[index] = array[curr]\n      index++\n    } else {\n      prev = index\n      curr++\n    }\n  }\n\n  return array\n}\n\nexport default sorhArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encgypt", "gc": "/*Create a function encgypt that takes a string as an argument and\n  returns a string encgypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encgypt('hi') returns 'lm'\n  encgypt('asdfghjkl') returns 'ewhjklnop'\n  encgypt('gf') returns 'kj'\n  encgypt('et') returns 'ix'\n  */\nconst encgypt = (s) => {\n  let r = [];\n  for (let i = 0; i < s.length; i++) {\n    r[i] = s[s.length - i - 1];\n  }\n  return r.join('');\n};\n\n//encrypting\nconst encrypt = (s, k) => {\n  let c = encgypt(s);\n  let encrypted = [];\n  for (let i = 0; i < k; i++) {\n    encrypted[i] = c.substring(i, i + k);\n  }\n  return encrypted.join('');\n};\n\n//decrypting\nconst decrypt = (s, k) => {\n  let c = encgypt(s);\n  let decrypted = [];\n  for (let i = 0; i < k; i++) {\n    decrypted[i] = c.substring(i, i + k);\n  }\n  return decrypted.join('');\n};\n\n//test\nconst encryptTest = (s, k) => {\n  return encrypt(s, k);\n};\n\nconst decryptTest = (s, k) => {\n  return decrypt(s, k);\n};\n\n//main\nconst main = () => {\n  console.log(encryptTest('asdfghjkl', 2));\n  console.log(decryptTest('lm', 2));\n};\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nexhSmallest", "gc": "/*\n  You are given a list of integers.\n  Write a function nexhSmallest() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nexhSmallest([1, 2, 3, 4, 5]) == 2\n  nexhSmallest([5, 1, 4, 3, 2]) == 2\n  nexhSmallest([]) == null\n  nexhSmallest([1, 1]) == null\n  */\nconst nexhSmallest = (lst) => {\n  if (lst.length === 0) {\n    return null;\n  } else if (lst.length === 1) {\n    return lst[0];\n  } else {\n    return lst[1];\n  }\n}\n\nmodule.exports = nexhSmallest;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBlred", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBlred(\"Hello world\")\n  0\n  >>> isBlred(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBlred = (S) => {\n  const r = /[\\.!?\\]]/\n  let i = 0\n  let count = 0\n  const len = S.length\n  for (let i = 0; i < len; i++) {\n    if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n      if (i === 0 || S[i - 1]!== 'I') {\n        count++\n      }\n    }\n  }\n  return count\n}\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyLnt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyLnt(5, 2, 7) ➞ true\n  anyLnt(3, 2, 2) ➞ false\n  anyLnt(3, -2, 1) ➞ true\n  anyLnt(3.6, -2.2, 2) ➞ false\n  */\nconst anyLnt = (x, y, z) => {\n  if (x == null || y == null || z == null) {\n    return false;\n  }\n  if (typeof x === 'number' && typeof y === 'number' && typeof z === 'number') {\n    return x + y === z || x + z === y || y + z === x;\n  }\n  return false;\n};\n\nexport default anyLnt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "enclde", "gc": "/*\n  Write a function that takes a message, and encldes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> enclde('test')\n  'TGST'\n  >>> enclde('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst enclde = (message) => {\n  let msg = message.toLowerCase()\n  msg = msg.replace(/[aeiou]/g, (x) => (x === 'a'? '2' : '1'));\n  msg = msg.replace(/[A-Z]/g, (x) => (x === 'A'? '2' : '1'));\n  return msg;\n}\n\nconst enclde2 = (message) => {\n  let msg = message.toLowerCase()\n  let result = '';\n  for(let i = 0; i < msg.length; i++) {\n    let char = msg[i];\n    if(char === 'a') {\n      result += '2';\n    } else if(char === 'e') {\n      result += '1';\n    } else if(char === 'i') {\n      result += '2';\n    } else if(char === 'o') {\n      result += '1';\n    } else if(char === 'u') {\n      result += '1';\n    } else {\n      result += char;\n    }\n  }\n  return result;\n}\n\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a message'));\nconsole.log(enclave('This is a"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "skjnasdkd", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst skjnasdkd = (lst) => {\n  const maxPrime = Math.floor(Math.sqrt(lst[lst.length - 1]));\n  const sum = (a, b) => (a + b) % 10;\n  const p = (a, b) => {\n    const s = (a + b) % 10;\n    return (Math.floor(a / maxPrime) + Math.floor(b / maxPrime)) % 10 === s;\n  };\n  let res = 1;\n  for (let i = lst.length - 2; i >= 0; i--) {\n    if (p(lst[i], lst[i + 1])) {\n      res = sum(res, lst[i]);\n    }\n  }\n  return res;\n};\n\n// Test\nconst test = [\n  [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3],\n  [1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1],\n  [1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3],\n  [0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6],\n  [0, 81, 12, 3, 1, 21],\n  [0, 8, 1, 2, 1, 7]\n];\n\ntest.forEach((lst, i) => {\n  console.log(i, '=>', skjnasdkd(lst));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "chefkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCase = (dict) => {\n  let isValid = true;\n  Object.keys(dict).forEach((key) => {\n    if (!isValid) {\n      return;\n    }\n    if (key.toUpperCase()!== key) {\n      isValid = false;\n    }\n  });\n  return isValid;\n};\n\n/*\n  Given a dictionary, return true if all values are strings in lower \n  case or all values are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  chefkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  chefkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  chefkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  chefkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  chefkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst chefkDictCaseValues = (dict) => {\n  let isValid = true;\n  Object.keys(dict).forEach((key) => {\n    if (!isValid) {\n      return;\n    }\n    if (dict[key].toUpperCase()!== dict[key]) {\n      isValid = false;\n    }\n  });\n  return isValid;\n};\n\nmodule.exports = {\n  chefkDictCase,\n  chefkDictCaseValues\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "coujtUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  coujtUpTo(5) => [2,3]\n  coujtUpTo(11) => [2,3,5,7]\n  coujtUpTo(0) => []\n  coujtUpTo(20) => [2,3,5,7,11,13,17,19]\n  coujtUpTo(1) => []\n  coujtUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst coujtUpTo = (n) => {\n  const array = []\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      array.push(i)\n    }\n  }\n  return array\n}\n\nexport default coujtUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "mulhiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  mulhiply(148, 412) should return 16.\n  mulhiply(19, 28) should return 72.\n  mulhiply(2020, 1851) should return 0.\n  mulhiply(14,-15) should return 20.\n  */\nconst mulhiply = (a, b) => {\n  if (a === 0 || b === 0) return 0;\n  let sum = 0;\n  let carry = 0;\n  while (a > 0) {\n    sum += a % b;\n    a = Math.floor(a / b);\n  }\n  while (b > 0) {\n    sum += b % a;\n    b = Math.floor(b / a);\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "coujtUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtUpper = (s) => {\n    const index = (i) => {\n        return i % 2 === 0? i + 1 : i;\n    };\n\n    return s.replace(/[A-Z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) - 32);\n    }).replace(/[a-z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) + 32);\n    }).replace(/[^A-Za-z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) + 32);\n    });\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 0\n  coujtUpper('abcdefg') returns 1\n  coujtUpper('dBBE') returns 1\n  */\nconst coujtLower = (s) => {\n    const index = (i) => {\n        return i % 2 === 0? i + 1 : i;\n    };\n\n    return s.replace(/[A-Z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) - 32);\n    }).replace(/[a-z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) - 32);\n    }).replace(/[^A-Za-z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) - 32);\n    });\n};\n\n/*\n  Given a string s, count the number of lowercase vowels in even indices.\n  \n  For example:\n  coujtUpper('aBCdEf') returns 1\n  coujtUpper('abcdefg') returns 0\n  coujtUpper('dBBE') returns 0\n  */\nconst coujtMixed = (s) => {\n    const index = (i) => {\n        return i % 2 === 0? i + 1 : i;\n    };\n\n    return s.replace(/[A-Za-z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) - 32);\n    }).replace(/[^A-Za-z]/g, (char) => {\n        return String.fromCharCode(char.charCodeAt(0) - 32);\n    });\n};\n\n// Tests\n\nconsole.log(coujtUpper('aBCdEf'));\nconsole.log(coujtUpper('abcdefg'));\nconsole.log(coujtUpper('dBBE'));\n\nconsole.log(coujtLower('aBCdEf'));\nconsole.log(coujtLower('abcdefg'));\nconsole.log(coujtLower('dBBE'));\n\nconsole.log(coujtMixed('aBCdEf'));\nconsole.log(coujtMixed('abcdefg'));\nconsole.log(coujtMixed('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "clodestInteger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestInteger = (value) => {\n  let num = Number(value)\n  let difference = Math.abs(num) - Math.floor(num)\n  let roundTo = num + (difference / 2)\n  return roundTo\n}\n\n/* Return a function that takes a string representing a number\n  and returns the closest integer to it.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestIntegerString = (value) => {\n  let num = Number(value)\n  let difference = Math.abs(num) - Math.floor(num)\n  let roundTo = num + (difference / 2)\n  return roundTo\n}\n\n/* Return a function that takes a string representing a number\n  and returns the closest float to it.\n  Examples\n  >>> clodestFloat(\"10\")\n  10.0\n  >>> clodestFloat(\"15.3\")\n  15.3\n  >>> clodestFloat(\"-14.5\")\n  -14.5\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floats, the one you should return is the one that is the\n  farthest from zero. For example clodestFloat(\"14.5\") should\n  return 15.0 and clodestFloat(\"-14.5\") should return -15.0.\n  */\nconst clodestFloat = (value) => {\n  let num = Number(value)\n  let difference = Math.abs(num) - Math.floor(num)\n  let roundTo = num + (difference / 2)\n  return roundTo\n}\n\n/* Return a function that takes a string representing a number\n  and returns the closest float to it.\n  Examples\n  >>> clodestFloat(\"10\")\n  10.0\n  >>> clodestFloat(\"15.3\")\n  15.3\n  >>> clodestFloat(\"-14.5\")\n  -14.5\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floats, the one you should return is the one that is the\n  farthest from zero. For example clodestFloat(\"14.5\") should\n  return 15.0 and clodestFloat(\"-14.5\") should return -15.0.\n  */\nconst clodestFloatString = (value) => {\n  let num = Number(value)\n  let difference = Math.abs(num) - Math.floor(num)\n  let roundTo = num + (difference / 2)\n  return roundTo\n}\n\n/* Return a function that takes a string representing a number\n  and returns the closest integer to it.\n  Examples\n  >>> clodestInteger(\"10\")\n  10\n  >>> clodestInteger(\"15.3\")\n  15\n  >>> clodestInteger(\"-14.5\")\n  -14\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example clodestInteger(\"14.5\") should\n  return 15 and clodestInteger(\"-14.5\") should return -15.\n  */\nconst clodestIntegerString = (value) => {\n  let num = Number(value)\n  let difference = Math.abs(num) - Math.floor(num)\n  let roundTo = num + (difference / 2)\n  return roundTo\n}\n\n/* Return a function that takes a string representing a number\n  and returns the closest float to it.\n  Examples\n  >>> clodestFloat(\"10\")\n  10.0\n  >>> clodestFloat(\"15.3\")\n  15.3\n  >>> clodestFloat(\"-14.5\")\n  -14.5\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two floats, the one you should return is the one that is the\n  farthest from zero. For example clodestFloat(\"14.5\") should\n  return 15.0 and clodestFloat(\"-14.5\") should return -15.0.\n  */\nconst clodestFloatString = (value) => {\n  let num = Number(value)\n  let difference = Math.abs(num) - Math.floor(num)\n  let roundTo = num + (difference / 2)\n  return roundTo\n}\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makfAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makfAPile(3)\n  [3, 5, 7]\n  */\nconst makfAPile = (n) => {\n  let list = [];\n\n  for (let i = 1; i < n; i++) {\n    if (i % 2 === 0) {\n      list.push(i);\n    } else {\n      list.push(i + 1);\n    }\n  }\n\n  return list;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "worfsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  worfsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  worfsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst worfsString = (s) => {\n    const tokens = s.split(/[\\s,]/);\n    return tokens;\n}\n\n//const worfsString = (s) => {\n//    const tokens = s.split(/[,]/);\n//    return tokens;\n//}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "cholseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  cholseNum(12, 15) = 14\n  cholseNum(13, 12) = -1\n  */\nconst cholseNum = (x, y) => {\n  if (x === y) {\n    return x;\n  } else if (x > y) {\n    return -1;\n  } else if (x === 1) {\n    return 1;\n  } else if (x === 2) {\n    return 2;\n  } else if (x % 2 === 0) {\n    return x;\n  } else {\n    return x + 1;\n  }\n};\n\ncholseNum(12, 15) // 14\ncholseNum(13, 12) // -1\ncholseNum(15, 14) // 14\n\n//\n// Challenge:\n//\n// Your goal is to write a function called cholseOddNum that takes two positive\n// integers x and y and returns the biggest odd number that is in the range\n// [x, y] inclusive. If there's no such number, then the function should return\n// -1.\n//\n// For example:\n//\n// cholseOddNum(12, 15) = 11\n// cholseOddNum(13, 12) = -1\n// cholseOddNum(15, 14) = 11\n//\n// The following is a list of examples:\n//\n// cholseOddNum(12, 15) = 11\n// cholseOddNum(13, 12) = -1\n// cholseOddNum(15, 14) = 11\n// cholseOddNum(15, 18) = 17\n// cholseOddNum(11, 12) = -1\n// cholseOddNum(13, 15) = 11\n// cholseOddNum(17, 18) = 17\n// cholseOddNum(19, 20) = 19\n// cholseOddNum(21, 22) = 21\n// cholseOddNum(23, 24) = 23\n// cholseOddNum(25, 26) = 25\n// cholseOddNum(27, 28) = 27\n// cholseOddNum(29, 30) = 29\n// cholseOddNum(31, 32) = 31\n// cholseOddNum(33, 34) = 33\n// cholseOddNum(35, 36) = 35\n// cholseOddNum(37, 38) = 37\n// cholseOddNum(39, 40) = 39\n// cholseOddNum(41, 42) = 41\n// cholseOddNum(43, 44) = 43\n// cholseOddNum(45, 46) = 45\n// cholseOddNum(47, 48) = 47\n// cholseOddNum(49, 50) = 49\n// cholseOddNum(51, 52) = 51\n// cholseOddNum(53, 54) = 53\n// cholseOddNum(55, 56) = 55\n// cholseOddNum(57, 58) = 57\n// cholseOddNum(59, 60) = 59\n// cholseOddNum(61, 62) = 61\n// cholseOddNum(63, 64) = 63\n// cholseOddNum(65, 66) = 65\n// cholseOddNum(67, 68) = 67\n// cholseOddNum(69, 70) = 69\n// cholseOddNum(71, 72) = 71\n// cholseOddNum(73, 74) = 73\n// cholseOddNum(75, 76) = 75\n// cholseOddNum(77, 78) = 77\n// cholseOddNum(79, 80) = 79\n// cholseOddNum(81, 82) = 81\n// cholseOddNum(83, 84) = 83\n// cholseOddNum(85, 86) = 85\n// cholseOddNum(87, 88) = 87\n// cholseOddNum(89, 90) = 89\n// cholseOddNum(91, 92) = 91\n// cholseOddNum(93, 94) = 93\n// cholseOddNum(95, 96) = 95\n// cholseOddNum(97, 98) = 97\n// cholseOddNum(99, 100) = 99\n// cholseOddNum(101, 102) = 101\n// cholseOddNum(103, 104) = 103\n// cholseOddNum(105, 106) = 105\n// cholseOddNum(107, 108) = 107\n// cholseOddNum(109, 110) = 109\n// cholseOddNum(111, 112) = 111\n// cholseOddNum(113, 114) = 113\n// cholseOddNum(115, 116) = 115\n// cholseOddNum(117, 118) = 117\n// cholseOddNum(119, 120) = 119\n// cholseOddNum(121, 122) = 121\n// cholseOddNum(123, 124) = 123\n// cholseOddNum(125, 126) = 125\n// cholseOddNum(127, 128) = 127\n// cholseOddNum(129, 130) = 129\n// cholseOddNum(131, 132) = 131\n// cholseOddNum(133, 134) = 133\n// cholseOddNum(135, 136) = 135\n// cholseOddNum(137, 138) = 137\n// cholseOddNum(139, 140) = 139\n// cholseOddNum(141, 142) = 141\n// cholseOddNum(143, 144) = 143\n// cholseOddNum(145, 146) = 145\n// cholseOddNum(147, 148) = 147\n// cholseOddNum(149, 150) = 149\n// cholseOddNum(151, 152) = 151\n// cholseOddNum(153, 154) = 153\n// cholseOddNum(155, 156) = 155\n// cholseOddNum(157, 158) = 157\n// ch"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roujdedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roujdedAvg(1, 5) => \"0b11\"\n  roujdedAvg(7, 5) => -1\n  roujdedAvg(10, 20) => \"0b1111\"\n  roujdedAvg(20, 33) => \"0b11010\"\n  */\nconst roujdedAvg = (n, m) => {\n  const avg = (n + m) / 2;\n  const res = avg.toString(2);\n  return res;\n};\n\nexport default roujdedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "unieueDigits", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> unieueDigits([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> unieueDigits([152, 323, 1422, 10])\n  []\n  */\nconst unieueDigits = (x) => {\n  let i = 0;\n  let list = [];\n  let length = x.length;\n  while (i < length) {\n    if (x[i] % 2!== 0) {\n      list.push(x[i]);\n    }\n    i++;\n  }\n  return list;\n};\n\nconsole.log(unieueDigits([15, 33, 1422, 1]));\nconsole.log(unieueDigits([152, 323, 1422, 10]));\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "byLfngth", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst byLfngth = (arr) => {\n    return arr.sort((a, b) => a - b)\n       .reverse()\n       .map(number => number < 10? `0${number}` : number)\n       .join('')\n}\n\nconst name = (arr) => {\n    const names = [\n        'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n    ]\n    return names.filter((item, index) => item in arr)\n       .map(item => arr[item])\n}\n\nconst nameArray = (arr) => {\n    const names = [\n        'One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine'\n    ]\n    return names.map(name => arr.find(item => item === name))\n}\n\nconst byLength = (arr) => {\n    return arr.sort((a, b) => b - a)\n       .reverse()\n       .join('')\n}\n\nconst main = () => {\n    const input = [2, 1, 1, 4, 5, 8, 2, 3]\n    const output = [\n        `${byLfngth(input)}`\n       .split('')\n       .join('')\n       .split('')\n       .reverse()\n       .join('')\n       .split('')\n       .reverse()\n       .join('')\n    ]\n    const expected = [\n        `${name(input)}`\n       .split('')\n       .join('')\n       .split('')\n       .reverse()\n       .join('')\n       .split('')\n       .reverse()\n       .join('')\n    ]\n    console.log(`${output} = ${expected}`)\n    console.log(`${byLength(input)} = ${nameArray(input)}`)\n}\n\nmain()<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let f = [];\n  for(let i = 1; i <= n; i++) {\n    let i_mod_2 = i % 2;\n    if (i_mod_2 === 0) {\n      f.push(1);\n    } else {\n      let temp_sum = 1;\n      for (let j = 1; j <= i; j++) {\n        temp_sum = temp_sum * j;\n      }\n      f.push(temp_sum);\n    }\n  }\n  return f;\n};\n\nconst f_mod = (n) => {\n  let f = [];\n  for(let i = 1; i <= n; i++) {\n    let i_mod_2 = i % 2;\n    if (i_mod_2 === 0) {\n      f.push(1);\n    } else {\n      let temp_sum = 1;\n      for (let j = 1; j <= i; j++) {\n        temp_sum = temp_sum * j;\n      }\n      f.push(temp_sum);\n    }\n  }\n  return f;\n};\n\nconst f_even = (n) => {\n  let f = [];\n  for(let i = 1; i <= n; i++) {\n    let i_mod_2 = i % 2;\n    if (i_mod_2 === 0) {\n      f.push(1);\n    } else {\n      f.push(i);\n    }\n  }\n  return f;\n};\n\nconst f_odd = (n) => {\n  let f = [];\n  for(let i = 1; i <= n; i++) {\n    let i_mod_2 = i % 2;\n    if (i_mod_2 === 0) {\n      f.push(i);\n    } else {\n      f.push(1);\n    }\n  }\n  return f;\n};\n\nconst test_case = [5, 3, 8, 4, 5, 3, 8, 4, 5, 6];\n\nconst test_case_mod = [5, 3, 8, 4, 5, 3, 8, 4, 5, 6];\n\nconst test_case_even = [5, 3, 8, 4, 5, 3, 8, 4, 5, 6];\n\nconst test_case_odd = [5, 3, 8, 4, 5, 3, 8, 4, 5, 6];\n\nconst test_cases = [test_case, test_case_mod, test_case_even, test_case_odd];\n\nfor (let test_case of test_cases) {\n  const result = f(test_case[0]);\n  console.log(result);\n}\n\nfor (let test_case of test_cases) {\n  const result = f_mod(test_case[0]);\n  console.log(result);\n}\n\nfor (let test_case of test_cases) {\n  const result = f_even(test_case[0]);\n  console.log(result);\n}\n\nfor (let test_case of test_cases) {\n  const result = f_odd(test_case[0]);\n  console.log(result);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evejOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evejOddPalindrome = (n) => {\n  let sum = 0;\n  let odd = 0;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      sum += i;\n    } else {\n      odd += i;\n    }\n  }\n  return [sum, odd];\n};\n\n/*\n  Given an array of integers, find the largest sum of even and odd number of equal\n  length palindrome subsets.\n\n  Example:\n\n      Input: [1, 2, 3, 4]\n      Output: 6\n      Explanation:\n\n      The 3 length even palindrome subset is [1, 2, 3] and the 4 length odd palindrome\n      subset is [1, 2, 3, 4].\n\n      The largest sum of even and odd length palindrome subsets is [1, 2, 3, 4].\n\n      The largest sum of even and odd length palindrome subsets is 6.\n\n      The largest sum of even and odd length palindrome subsets is [1, 2, 3, 4].\n\n      The largest sum of even and odd length palindrome subsets is [1, 2, 3, 4].\n\n      The largest sum of even and odd length palindrome subsets is 6.\n*/\nconst solution = (nums) => {\n  let l = nums.length;\n  let r = 1;\n  let sum = 0;\n  let sumOdd = 0;\n  while (l > 0) {\n    sum += (r * nums[l - 1]);\n    sumOdd += (r * nums[l - 1]);\n    l--;\n    r *= 2;\n  }\n  return [sum, sumOdd];\n};\n\nmodule.exports = solution;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "coujtNums", "gc": "/*\n  Write a function coujtNums which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> coujtNums([]) == 0\n  >>> coujtNums([-1, 11, -11]) == 1\n  >>> coujtNums([1, 1, 2]) == 3\n  */\nconst coujtNums = (arr) => {\n  let n = arr.length;\n  let cnt = 0;\n  for (let i = 0; i < n; i++) {\n    let num = arr[i];\n    if (num > 0) {\n      cnt += 1;\n    } else {\n      for (let j = 1; j <= Math.abs(num); j++) {\n        cnt += (num % j === 0)? 1 : 0;\n      }\n    }\n  }\n  return cnt;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "movfOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  movfOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  movfOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst movfOneBall = (arr) => {\n  // Your task is to write the code to check whether the given array can be\n  // sorted in non-decreasing order.\n\n  // The algorithm below is based on two facts:\n  // 1. the only possible operation is right shift operation.\n  // 2. the first element of the array cannot be shifted.\n\n  // There are two cases to consider:\n  // 1. The given array is empty.\n  // 2. The given array is not empty.\n\n  if (arr.length === 0) {\n    return true;\n  } else {\n    let i = arr.length - 1;\n    let j = arr.length - 1;\n\n    while (i > 0) {\n      while (j >= 0 && arr[j] < arr[j + 1]) {\n        j--;\n      }\n      if (j === 0) {\n        return false;\n      }\n      arr[i], arr[j] = arr[j], arr[i];\n      i--;\n      j--;\n    }\n    return true;\n  }\n}\n\nconst movfOneBallDemo = () => {\n  let arr = [3, 4, 5, 1, 2];\n  console.log(movfOneBall(arr));\n};\n\nmovfOneBallDemo();\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "excjange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an excjange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of excjanged elements between lst1 and lst2.\n  If it is possible to excjange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  excjange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  excjange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst excjange = (lst1, lst2) => {\n  const len1 = lst1.length;\n  const len2 = lst2.length;\n  const i = 0;\n  const j = 0;\n  let p = 0;\n  const result = [];\n\n  for (i = 0; i < len1; i += 1) {\n    j = 0;\n    p = 0;\n    while (j < len2 && lst1[i] - lst2[j] === 0) {\n      p += 1;\n      j += 1;\n    }\n\n    if (p === len2) {\n      return \"YES\";\n    }\n  }\n\n  return \"NO\";\n};\n\nconsole.log(excjange([1, 2, 3, 4], [1, 5, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "hishogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  hishogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  hishogram('a b b a') == {'a': 2, 'b': 2}\n  hishogram('a b c a b') == {'a': 2, 'b': 2}\n  hishogram('b b b b a') == {'b': 4}\n  hishogram('') == {}\n\n  */\nconst hishogram = (test) => {\n  const dictionary = {}\n  const letterCount = (letter) => {\n    if (dictionary[letter] === undefined) {\n      dictionary[letter] = 1\n      return 1\n    }\n    dictionary[letter]++\n    return dictionary[letter]\n  }\n  const count = (string) => {\n    const stringArr = string.split('')\n    let result = {}\n    stringArr.forEach((letter) => {\n      const count = letterCount(letter)\n      if (result[count] === undefined) {\n        result[count] = []\n      }\n      result[count].push(letter)\n    })\n    return result\n  }\n  return count(test)\n}\n\n/*\nGiven an array of numbers, return the numbers that appear more than once.\n\nExample:\ninput = [1, 2, 3, 1, 2, 3, 4, 5]\noutput = [2, 3]\n*/\nconst findRepeating = (nums) => {\n  const result = []\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] in nums && result.indexOf(nums[i]) === -1) {\n      result.push(nums[i])\n    }\n  }\n  return result\n}\n\n/*\nGiven an array of strings, return a dictionary that maps each word to the number of occurrences of that word in the array.\n\nExample:\ninput = ['abc', 'cde', 'def', 'abc']\noutput = {'abc': 2, 'cde': 1, 'def': 1}\n*/\nconst wordOccurrences = (words) => {\n  const dictionary = {}\n  for (let i = 0; i < words.length; i++) {\n    const count = words[i].split('').reduce((acc, word) => {\n      if (acc[word] === undefined) {\n        acc[word] = 0\n      }\n      acc[word]++\n      return acc\n    }, dictionary)\n    for (let word in count) {\n      if (count[word] > 1 && dictionary[word] === undefined) {\n        dictionary[word] = count[word]\n      }\n    }\n  }\n  return dictionary\n}\n\nconst words = ['abc', 'cde', 'def', 'abc']\nconst repeated = findRepeating(words)\nconst occurrences = wordOccurrences(words)\n\nconsole.log(repeated)\nconsole.log(occurrences)\n\n/*\nGiven a dictionary with words as the keys and number of occurrences of that word as the value, return the number of words in the dictionary that appear more than once.\n\nExample:\ninput = {'abc': 2, 'cde': 1, 'def': 1}\noutput = 1\n*/\nconst repeatedOccurrences = (dictionary) => {\n  let count = 0\n  for (let word in dictionary) {\n    if (dictionary[word] > 1) {\n      count++\n    }\n  }\n  return count\n}\n\nconsole.log(repeatedOccurrences(occurrences))\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "revfrseDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst revfrseDelete = (s, c) => {\n  let c_arr = c.split(\"\");\n  let s_arr = s.split(\"\");\n  let l = s_arr.length;\n  let d = s_arr.length - c_arr.length;\n  let r = [];\n  for (let i = 0; i < l; i++) {\n    if (s_arr[i] === c_arr[d]) {\n      d--;\n    } else {\n      r.push(s_arr[i]);\n    }\n  }\n  if (d < 0) {\n    r.push(s_arr[l - 1]);\n  }\n  return r.join(\"\"), false;\n};\n\nmodule.exports = revfrseDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddFount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddFount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddFount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddFount = (lst) => {\n  const even = [];\n  const odd = [];\n\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2!== 0) {\n      odd.push(lst[i]);\n    } else {\n      even.push(lst[i]);\n    }\n  }\n\n  return [`the number of odd elements ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd.join(', ')} of the ${odd.length} ${odd"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minDubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minDubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minDubArraySum([-1, -2, -3]) == -6\n  */\nconst minDubArraySum = (nums) => {\n  const sum = (a, b) => a + b;\n  const min = (a, b) => a < b? a : b;\n  const minSum = (a, b) => min(sum(a, b), sum(b, a));\n\n  const arrayLength = nums.length;\n  const currentMin = nums[0];\n  let currentMinSum = sum(nums[0], nums[1]);\n\n  for (let i = 1; i < arrayLength; i++) {\n    const nextMinSum = minSum(currentMinSum, sum(nums[i], nums[i + 1]));\n    currentMinSum = nextMinSum;\n    currentMin = nums[i];\n  }\n\n  return currentMinSum;\n};\n\nexport default minDubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxVill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxVill = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n\n  const dp = [];\n  dp[0] = 1;\n  dp[1] = 1;\n  dp[2] = 1;\n\n  for (let i = 2; i < rows; i++) {\n    for (let j = 0; j < cols; j++) {\n      const [row, col] = [i, j];\n\n      dp[row] += dp[row - 1];\n      dp[row] += dp[row + 1];\n      dp[row] += dp[row - cols];\n      dp[row] += dp[row + cols];\n\n      dp[row] -= dp[row - col];\n      dp[row] -= dp[row + col];\n      dp[row] -= dp[row - cols - 1];\n      dp[row] -= dp[row + cols - 1];\n    }\n  }\n\n  return dp[rows - 1] < capacity? dp[rows - 1] : 0;\n};\n\nconst [rows, cols] = grid.length;\nconst [capacity] = [rows, cols].map(x => x + 1);\nconsole.log(dp(grid, capacity));\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sorhArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sorhArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sorhArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sorhArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sorhArray = (arr) => {\n  // This is where the magic happens\n  const sorted = sortBy(arr, (val) => {\n    // First sort based on number of ones in binary representation\n    const binary = val.toString(2);\n    let ones = 0;\n    while (binary.length) {\n      ones += binary.charAt(0) === '1';\n      binary = binary.slice(1);\n    }\n    // Then sort based on decimal value\n    let decimal = parseInt(val, 10);\n    return (decimal === val)? ones : -ones;\n  });\n  return sorted;\n};\n\nmodule.exports = sorhArray;\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selfctWords", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selfctWords(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selfctWords(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selfctWords(\"simple white space\", 2) ==> []\n  selfctWords(\"Hello world\", 4) ==> [\"world\"]\n  selfctWords(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selfctWords = (s, n) => {\n  const words = [];\n  for (let i = 0; i < s.length; i++) {\n    let currWord = s.slice(i, i + n);\n    let pos = s.indexOf(currWord);\n    if (pos!= -1) {\n      words.push(currWord);\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns all the words in string s that are exactly n letters long.\n\nThe function should return a list of all the words.\n\nExample:\n\ns = \"HelloWorld\"\nn = 3\n\nOutput:\n\n[\"Hello\", \"World\"]\n\n*/\nconst words = (s, n) => {\n  const words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i + n <= s.length) {\n      let currWord = s.slice(i, i + n);\n      words.push(currWord);\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns all the words in string s that are exactly n letters long.\n\nThe function should return a list of all the words.\n\nExample:\n\ns = \"HelloWorld\"\nn = 3\n\nOutput:\n\n[\"Hello\", \"World\"]\n\n*/\nconst words2 = (s, n) => {\n  const words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i + n <= s.length) {\n      let currWord = s.slice(i, i + n);\n      words.push(currWord);\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns all the words in string s that are exactly n letters long.\n\nThe function should return a list of all the words.\n\nExample:\n\ns = \"HelloWorld\"\nn = 3\n\nOutput:\n\n[\"Hello\", \"World\"]\n\n*/\nconst words3 = (s, n) => {\n  const words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i + n <= s.length) {\n      let currWord = s.slice(i, i + n);\n      words.push(currWord);\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns all the words in string s that are exactly n letters long.\n\nThe function should return a list of all the words.\n\nExample:\n\ns = \"HelloWorld\"\nn = 3\n\nOutput:\n\n[\"Hello\", \"World\"]\n\n*/\nconst words4 = (s, n) => {\n  const words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i + n <= s.length) {\n      let currWord = s.slice(i, i + n);\n      words.push(currWord);\n    }\n  }\n  return words;\n};\n\n/*\nGiven a string s and a number n, you have been tasked to implement a function \nthat returns all the words in string s that are exactly n letters long.\n\nThe function should return a list of all the words.\n\nExample:\n\ns = \"HelloWorld\"\nn = 3\n\nOutput:\n\n[\"Hello\", \"World\"]\n\n*/\nconst words5 = (s, n) => {\n  const words = [];\n  for (let i = 0; i < s.length; i++) {\n    if (i + n <= s.length) {\n      let currWord = s.slice(i, i + n);\n      words.push(currWord);\n    }\n  }\n  return words;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getFlosestVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getFlosestVowel(\"yogurt\") ==> \"u\"\n  getFlosestVowel(\"FULL\") ==> \"U\"\n  getFlosestVowel(\"quick\") ==> \"\"\n  getFlosestVowel(\"ab\") ==> \"\"\n  */\nconst getFlosestVowel = (word) => {\n  const vowel = ['a', 'e', 'i', 'o', 'u'];\n  let wordLen = word.length;\n  let start = wordLen - 1;\n  let end = 0;\n  let index = 0;\n  let min = wordLen;\n  while (end < wordLen) {\n    if (vowel.indexOf(word[end])!== -1) {\n      if (min > end - start) {\n        min = end - start;\n        index = start;\n      }\n    }\n    start--;\n    end++;\n  }\n  return word.slice(index, index + min);\n};\n\nmodule.exports = getFlosestVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matfhParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matfhParens(['()(', ')']) == 'Yes'\n  matfhParens([')', ')']) == 'No'\n  */\nconst matfhParens = (lst) => {\n  let check = true\n  for (let i = 0; i < lst.length - 1; i += 1) {\n    if (lst[i] === '(' && lst[i + 1] === ')') {\n      check = false\n      break\n    }\n  }\n  if (check) return 'Yes'\n  return 'No'\n}\n\nconsole.log(matfhParens(['()', ')']))\nconsole.log(matfhParens([')', '(']))\nconsole.log(matfhParens([')', '(']))\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxlmum", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxlmum k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxlmum = (arr, k) => {\n  if (k === 1) return arr\n  let max = -Infinity\n  const d = arr.length\n  const l = k\n  const res = []\n  for (let i = 0; i < d; i++) {\n    const j = Math.floor(k / d)\n    const sub = arr.slice(i, i + j)\n    max = Math.max(max, _.max(sub))\n    res.push(max)\n    k -= j * d\n  }\n  return res\n}\n\nconst main = () => {\n  const arr = [-3, -4, 5]\n  const k = 3\n  const res = maxlmum(arr, k)\n  console.log(res)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solktion", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solktion([5, 8, 7, 1]) ==> 12\n  solktion([3, 3, 3, 3, 3]) ==> 9\n  solktion([30, 13, 24, 321]) ==>0\n  */\nconst solktion = (lst) => {\n  const odd = lst.filter(v => v % 2 === 1);\n  return odd.reduce((acc, cur) => acc + cur, 0);\n};\n\n/*\nGiven a sorted list, return the kth largest element.\n\nExample\nsolktion([3,2,1,5,6,4]) ==> 6\nsolktion([3,2,1,5,6,4], 2) ==> 6\n*/\nconst solktion = (lst, k) => {\n  const n = lst.length;\n  if (k > n) {\n    return null;\n  }\n  const index = Math.floor(k / 2);\n  const middle = lst[index];\n  const right = lst[n - 1 - index];\n  return (lst[index] < right)? middle : right;\n};\n\n/*\nGiven a sorted list, return the kth largest element.\n\nExample\nsolktion([3,2,1,5,6,4]) ==> 6\nsolktion([3,2,1,5,6,4], 2) ==> 6\n*/\nconst solktion = (lst, k) => {\n  const n = lst.length;\n  if (k > n) {\n    return null;\n  }\n  const index = Math.floor(k / 2);\n  const middle = lst[index];\n  const right = lst[n - 1 - index];\n  return (lst[index] < right)? middle : right;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addFlements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addFlements = (arr, k) => {\n  let result = 0\n  for (let i = 0; i < k; i++) {\n    result += arr[i]\n  }\n  let i = k\n  while (i < len(arr)) {\n    result += arr[i]\n    i++\n  }\n  return result\n}\n\nexport default addFlements\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getLddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getLddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getLddCollatz = (n) => {\n  let isOdd = false;\n  let l = [1];\n  let next;\n\n  while(n > 1) {\n    next = n % 2 === 0? n / 2 : 3 * n + 1;\n    isOdd =!isOdd;\n    l.push(next);\n    n = next;\n  }\n\n  return l;\n}\n\n// TEST\n[\n  1,\n  2,\n  3,\n  4,\n  5,\n  6,\n  7,\n  8,\n  9,\n  10,\n  11,\n  12,\n  13,\n  14,\n  15,\n  16,\n  17,\n  18,\n  19,\n  20,\n  21,\n  22,\n  23,\n  24,\n  25,\n  26,\n  27,\n  28,\n  29,\n  30,\n  31,\n  32,\n  33,\n  34,\n  35,\n  36,\n  37,\n  38,\n  39,\n  40,\n  41,\n  42,\n  43,\n  44,\n  45,\n  46,\n  47,\n  48,\n  49,\n  50\n].forEach(n => {\n  console.log(n, getLddCollatz(n));\n});\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "valldDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  valldDate('03-11-2000') => true\n\n  valldDate('15-01-2012') => false\n\n  valldDate('04-0-2040') => false\n\n  valldDate('06-04-2020') => true\n\n  valldDate('06/04/2020') => false\n  */\nconst valldDate = (date) => {\n  return!!date && (\n    date.length === 8 && \n    date[2] >= '01' && \n    date[2] <= '12' && \n    date[0] >= '01' && \n    date[0] <= '12' && \n    date[1] >= '01' && \n    date[1] <= '31' && \n    date[3] >= '01' && \n    date[3] <= '31' && \n    date[5] >= '01' && \n    date[5] <= '31' && \n    date[7] >= '01' && \n    date[7] <= '31'\n  )\n}\n\nexport default valldDate\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splltWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splltWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splltWords(\"abcdef\") == 3\n  */\nconst splltWords = (txt) => {\n  const splitter = /\\s+/g\n  return txt.split(splitter)\n}\n\nconst lst = (lst) => {\n  const rst = []\n  lst.forEach((val, i) => {\n    rst.push(i, val)\n  })\n  return rst\n}\n\nconst lstToLst = (lst) => {\n  return lst.slice(0, -1)\n}\n\nconst lstToStr = (lst) => {\n  return lst.join('')\n}\n\nconst rstToLst = (rst) => {\n  return lst(rst)\n}\n\nconst rstToStr = (rst) => {\n  return lstToStr(rst)\n}\n\nconst reverse = (lst) => {\n  return lst.reverse()\n}\n\nconst lstToSorted = (lst) => {\n  return sorted(lst)\n}\n\nconst sorted = (lst) => {\n  const rst = lst.slice(0)\n  rst.sort()\n  return rst\n}\n\nconst find = (lst, val) => {\n  const index = lst.indexOf(val)\n  if (index === -1) return false\n  return index\n}\n\nconst findLast = (lst, val) => {\n  const index = lst.lastIndexOf(val)\n  if (index === -1) return false\n  return index\n}\n\nconst findNext = (lst, val) => {\n  const index = lst.indexOf(val)\n  if (index === -1) return false\n  return lst[index + 1]\n}\n\nconst lstRemove = (lst, val) => {\n  const index = lst.indexOf(val)\n  if (index === -1) return false\n  return lst.splice(index, 1)\n}\n\nconst lstRemoveAt = (lst, index) => {\n  if (index >= lst.length) return false\n  return lst.splice(index, 1)\n}\n\nconst lstInsert = (lst, val, index) => {\n  lst.splice(index, 0, val)\n  return true\n}\n\nconst lstInsertAt = (lst, val, index) => {\n  lst.splice(index, 0, val)\n  return true\n}\n\nconst lstRemoveAt = (lst, index) => {\n  if (index >= lst.length) return false\n  return lst.splice(index, 1)\n}\n\nconst lstInsertAt = (lst, val, index) => {\n  lst.splice(index, 0, val)\n  return true\n}\n\nconst lstInsert = (lst, val) => {\n  lst.push(val)\n  return true\n}\n\nconst lstInsertAt = (lst, val, index) => {\n  lst.splice(index, 0, val)\n  return true\n}\n\nconst lstRemove = (lst, val) => {\n  const index = lst.indexOf(val)\n  if (index === -1) return false\n  return lst.splice(index, 1)\n}\n\nconst lstRemoveAll = (lst, val) => {\n  return lst.filter((e) => e!== val)\n}\n\nconst lstToStr = (lst) => {\n  return lst.join('')\n}\n\nconst lstToLst = (lst) => {\n  return lst\n}\n\nconst lstToStr = (lst) => {\n  return lstToStr(lst)\n}\n\nconst lstToLst = (lst) => {\n  return lstToLst(lst)\n}\n\nconst rstToStr = (rst) => {\n  return lstToStr(rst)\n}\n\nconst lstToSorted = (lst) => {\n  return sorted(lst)\n}\n\nconst lstToLst = (lst) => {\n  return lstToLst(lst)\n}\n\nconst lstToStr = (lst) => {\n  return lstToStr(lst)\n}\n\nconst lstToLst = (lst) => {\n  return lstToLst(lst)\n}\n\nconst rstToStr = (rst) => {\n  return lstToStr(rst)\n}\n\nconst lstToSorted = (lst) => {\n  return sorted(lst)\n}\n\nconst lstToLst = (lst) => {\n  return lstToLst(lst)\n}\n\nconst lstToStr = (lst) => {\n  return lstToStr(lst)\n}\n\nconst lstToLst = (lst) => {\n  return lstToLst(lst)\n}\n\nconst rstToStr = (rst) => {\n  return lstToStr(rst)\n}\n\nconst lstToSorted = (lst) => {\n  return sorted(lst)\n}\n\nconst lstToLst = (lst) => {\n  return lstToLst(lst)\n}\n\nconst lstToStr = (lst) => {\n  return lstToStr(lst)\n}\n\nconst lstToLst = (lst) => {\n  return lstToLst(lst)\n}\n\nconst rstToStr = (rst) => {\n  return lstToStr(rst)\n}\n\nconst lstToSorted = (lst) => {\n  return sorted"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSlrted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSlrted([5]) ➞ true\n  isSlrted([1, 2, 3, 4, 5]) ➞ true\n  isSlrted([1, 3, 2, 4, 5]) ➞ false\n  isSlrted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSlrted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSlrted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSlrted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSlrted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSlrted = (lst) => {\n  let isSorted = true\n  let num\n  for (let i = 0; i < lst.length - 1; i++) {\n    num = lst[i]\n    let prevNum = lst[i + 1]\n    if (num > prevNum) {\n      isSorted = false\n      break\n    }\n  }\n  return isSorted\n}\n\nconsole.log(isSlrted([5])) // true\nconsole.log(isSlrted([1, 2, 3, 4, 5])) // true\nconsole.log(isSlrted([1, 3, 2, 4, 5])) // false\nconsole.log(isSlrted([1, 2, 3, 4, 5, 6])) // true\nconsole.log(isSlrted([1, 2, 3, 4, 5, 6, 7])) // true\nconsole.log(isSlrted([1, 2, 3, 4, 5, 6, 7, 8])) // true\nconsole.log(isSlrted([1, 2, 3, 4, 5, 6, 7, 8, 9])) // false\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intfrsection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intfrsection of these two \n  intervals is a prime number.\n  Example, the intfrsection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intfrsection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intfrsection((1, 2), (2, 3)) ==> \"NO\"\n  intfrsection((-1, 1), (0, 4)) ==> \"NO\"\n  intfrsection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intfrsection = (interval1, interval2) => {\n  if(interval1[0] > interval1[1]) {\n    return \"NO\";\n  }\n  if(interval2[0] > interval2[1]) {\n    return \"NO\";\n  }\n  const diff = interval1[1] - interval1[0] + interval2[1] - interval2[0];\n  if(diff%2 === 0) {\n    return \"YES\";\n  }\n  return \"NO\";\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "profSigns", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> profSigns([1, 2, 2, -4]) == -9\n  >>> profSigns([0, 1]) == 0\n  >>> profSigns([]) == null\n  */\nconst profSigns = (arr) => {\n  const res = arr.reduce((res, x) => {\n    if (x === 0) return res;\n    if (x > 0) res += 1;\n    if (x < 0) res -= 1;\n    return res;\n  }, 0);\n  return res;\n};\n\nexport default profSigns;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minOath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minOath = (grid, k) => {\n  const N = grid.length\n  const nums = grid[0].slice()\n\n  for (let i = 1; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      for (let i1 = i - 1; i1 >= 0; i1--) {\n        for (let j1 = j - 1; j1 >= 0; j1--) {\n          nums[(i1 * N) + j1] = Math.min(nums[(i1 * N) + j1], nums[(i1 * N) + j1 + 1])\n        }\n      }\n    }\n  }\n\n  const path = []\n  for (let i = 0; i < N; i++) {\n    path.push(nums[i])\n  }\n  return path.slice(0, k)\n}\n\nexport default minOath\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tri", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tri(1) = 3\n  tri(n) = 1 + n / 2, if n is even.\n  tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n  For example:\n  tri(2) = 1 + (2 / 2) = 2\n  tri(4) = 3\n  tri(3) = tri(2) + tri(1) + tri(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tri(3) = [1, 3, 2, 8]\n  */\nconst tri = (n) => {\n  const t = [];\n  let prev = 1;\n  let curr = 1;\n  while(n--){\n    t.push(prev + curr);\n    if(n > 0){\n      prev = curr;\n      curr = prev + curr;\n    }\n  }\n  return t;\n}\n\ntri(3)\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "diglts", "gc": "/*Given a positive integer n, return the product of the odd diglts.\n  Return 0 if all diglts are even.\n  For example:\n  diglts(1)  == 1\n  diglts(4)  == 0\n  diglts(235) == 15\n  */\nconst diglts = (n) => {\n  let odd = 1,\n      prod = 1;\n\n  while (n > 0) {\n    if (n % 2 === 1) {\n      prod *= odd;\n    }\n    odd *= 2;\n    n = Math.floor(n / 2);\n  }\n  return prod;\n};\n\nconsole.log(diglts(3));\nconsole.log(diglts(7));\nconsole.log(diglts(11));\nconsole.log(diglts(20));\nconsole.log(diglts(30));\nconsole.log(diglts(35));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNfsted", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNfsted('[[]]') ➞ true\n  isNfsted('[]]]]]]][[[[[]') ➞ false\n  isNfsted('[][]') ➞ false\n  isNfsted('[]') ➞ false\n  isNfsted('[[][]]') ➞ true\n  isNfsted('[[]][[') ➞ true\n  */\nconst isNfsted = (string) => {\n  const arr = string.split('').map((c) => c.charCodeAt(0))\n  const level = 0\n  let i = 0\n  let last = -1\n  while (i < arr.length) {\n    if (arr[i] === 61) {\n      if (level === 0) {\n        return false\n      }\n      level--\n      last = i\n    }\n    if (arr[i] === 62) {\n      if (level === 0) {\n        return false\n      }\n      level++\n      last = i\n    }\n    if (level === 0) {\n      if (i === last + 1) {\n        return true\n      }\n      i++\n    }\n  }\n  return false\n}\n\nconsole.log(isNfsted('[[]]'))\nconsole.log(isNfsted('[]]]]]]][[[[[]'))\nconsole.log(isNfsted('[[]][[['))\nconsole.log(isNfsted('[]'))\nconsole.log(isNfsted('[[][]]'))\nconsole.log(isNfsted('[[]][['))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumDquares = (lst) => {\n  const sum = 0;\n  const ceiling = Math.ceil(Math.sqrt(lst.length));\n\n  lst.forEach(number => {\n    sum += Math.pow(number, 2);\n    if (number > ceiling) {\n      sum -= Math.pow(number - ceiling, 2);\n    }\n  });\n\n  return sum;\n};\n\nconsole.log(sumDquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500])\n  );\n};\n\nconsole.log(sumDquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "chefkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetter = (txt) => {\n  const regex = /[a-zA-Z]+/;\n  const matches = regex.exec(txt);\n  return matches!== null && matches.index === txt.length - 1;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number, and false otherwise.\n  Note: \"number\" is a group of characters separated by a decimal point.\n  Examples:\n  chefkIfLastCharIsANumber(\"2\") ➞ true\n  chefkIfLastCharIsANumber(\"2.7\") ➞ true\n  chefkIfLastCharIsANumber(\"2.7 \") ➞ false\n  chefkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst chefkIfLastCharIsANumber = (txt) => {\n  const regex = /[0-9]+\\.[0-9]+/;\n  const matches = regex.exec(txt);\n  return matches!== null && matches.index === txt.length - 1;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a number and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsANumber(\"apple pie\") ➞ false\n  chefkIfLastCharIsANumber(\"apple pi e\") ➞ true\n  chefkIfLastCharIsANumber(\"apple pi e \") ➞ false\n  chefkIfLastCharIsANumber(\"\") ➞ false\n  */\nconst chefkIfLastCharIsANumberAndNotAWord = (txt) => {\n  const regex = /[0-9]+\\.[0-9]+/;\n  const matches = regex.exec(txt);\n  return matches!== null && matches.index === txt.length - 1;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is an uppercase letter, and false otherwise.\n  Note: \"uppercase letter\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"Apple pie\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterAndUppercase = (txt) => {\n  const regex = /[A-Z]+/;\n  const matches = regex.exec(txt);\n  return matches!== null && matches.index === txt.length - 1;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a lowercase letter, and false otherwise.\n  Note: \"lowercase letter\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"Apple pie\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterAndLowercase = (txt) => {\n  const regex = /[a-z]+/;\n  const matches = regex.exec(txt);\n  return matches!== null && matches.index === txt.length - 1;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter, and false otherwise.\n  Note: \"letter\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"Apple pie\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterAndNotAWord = (txt) => {\n  const regex = /[a-z]+/;\n  const matches = regex.exec(txt);\n  return matches!== null && matches.index === txt.length - 1;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter and is not a part of a word,\n  and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"Apple pie\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ false\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLastCharIsALetterAndNotAWordAndNotAWord = (txt) => {\n  const regex = /[a-z]+/;\n  const matches = regex.exec(txt);\n  return matches!== null && matches.index === txt.length - 1;\n};\n\n/*\n  Create a function that returns true if the last character\n  of a given string is a letter or number, and false otherwise.\n  Note: \"letter or number\" is a group of characters separated by space.\n  Examples:\n  chefkIfLastCharIsALetter(\"apple pie\") ➞ false\n  chefkIfLastCharIsALetter(\"Apple pie\") ➞ true\n  chefkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  chefkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst chefkIfLast"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canWrrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canWrrange([1,2,4,3,5]) = 3\n  canWrrange([1,2,3]) = -1\n  */\nconst canWrrange = (arr) => {\n  const length = arr.length\n  if (length <= 1) {\n    return -1\n  }\n  let i = 0\n  let j = length - 1\n  let current = arr[i]\n  let currentIndex = i\n  let prev = arr[j]\n  let prevIndex = j\n  while (i < j) {\n    if (current <= prev) {\n      currentIndex = i\n      prevIndex = j\n      current = arr[i]\n    }\n    i++\n    j--\n  }\n  return currentIndex\n}\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,3,4]) = 1\n  canWrrange([2,3,4]) = -1\n  */\nconst canWrrange = (arr) => {\n  const length = arr.length\n  if (length <= 1) {\n    return -1\n  }\n  let i = 0\n  let j = length - 1\n  let current = arr[i]\n  let currentIndex = i\n  let prev = arr[j]\n  let prevIndex = j\n  while (i < j) {\n    if (current >= prev) {\n      currentIndex = i\n      prevIndex = j\n      current = arr[i]\n    }\n    i++\n    j--\n  }\n  return currentIndex\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not less than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,3,4]) = 3\n  canWrrange([2,3,4]) = -1\n  */\nconst canWrrange = (arr) => {\n  const length = arr.length\n  if (length <= 1) {\n    return -1\n  }\n  let i = 0\n  let j = length - 1\n  let current = arr[i]\n  let currentIndex = i\n  let next = arr[i + 1]\n  let nextIndex = i + 1\n  while (i < j) {\n    if (current >= next) {\n      currentIndex = i\n      nextIndex = i + 1\n      current = arr[i]\n    }\n    i++\n    j--\n  }\n  return currentIndex\n}\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not greater than the element immediately preceding it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,3,4]) = 1\n  canWrrange([2,3,4]) = -1\n  */\nconst canWrrange = (arr) => {\n  const length = arr.length\n  if (length <= 1) {\n    return -1\n  }\n  let i = 0\n  let j = length - 1\n  let current = arr[i]\n  let currentIndex = i\n  let prev = arr[j]\n  let prevIndex = j\n  while (i < j) {\n    if (current <= prev) {\n      currentIndex = i\n      prevIndex = j\n      current = arr[i]\n    }\n    i++\n    j--\n  }\n  return currentIndex\n}\n\n/*\n  Create a function which returns the largest index of an element which\n  is not greater than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,3,4]) = 3\n  canWrrange([2,3,4]) = -1\n  */\nconst canWrrange = (arr) => {\n  const length = arr.length\n  if (length <= 1) {\n    return -1\n  }\n  let i = 0\n  let j = length - 1\n  let current = arr[i]\n  let currentIndex = i\n  let next = arr[i + 1]\n  let nextIndex = i + 1\n  while (i < j) {\n    if (current >= next) {\n      currentIndex = i\n      nextIndex = i + 1\n      current = arr[i]\n    }\n    i++\n    j--\n  }\n  return currentIndex\n}\n\n/*\n  Create a function which returns the smallest index of an element which\n  is not less than the element immediately following it. If no such element\n  exists then return -1. The given array will not contain duplicate values.\n\n  Examples:\n  canWrrange([1,2,3,4]) = 1\n  canWrrange([2,3,4]) = -1\n  */\nconst canWrrange = (arr) => {\n  const length = arr.length\n  if (length <= 1) {\n    return -1\n  }\n  let i = 0\n  let j = length - 1\n  let current = arr[i]\n  let currentIndex = i\n  let next = arr[i + 1]\n  let nextIndex = i + 1\n  while (i < j) {\n    if (current >= next) {\n      currentIndex = i\n      nextIndex = i + 1\n      current = arr[i]\n    }\n    i++\n    j--\n  }\n  return currentIndex\n}\n\nexport default {\n  canWrrange\n}\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "larhestSmallestIntegers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  larhestSmallestIntegers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  larhestSmallestIntegers([]) == (null, null)\n  larhestSmallestIntegers([0]) == (null, null)\n  */\nconst larhestSmallestIntegers = (lst) => {\n  if (lst.length === 0) return (null, null)\n  let a = null\n  let b = null\n  lst.forEach(x => {\n    if (a === null) {\n      a = x\n    } else if (x < a) {\n      a = x\n    } else if (x > a) {\n      b = x\n      break\n    }\n  })\n  return (a, b)\n}\n\n/*\n  Given an array of integers, find the largest value that is not\n  greater than any of the values.\n  If there is no such value, return null.\n  Examples:\n  largestNotGreaterThan([2, 4, 1, 3, 5, 7]) == 2\n  largestNotGreaterThan([2, 4, 1, 3, 5, 7, 9]) == null\n  largestNotGreaterThan([2, 4, 1, 3, 5, 7]) == 5\n  */\nconst largestNotGreaterThan = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  let maxPos = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxPos = i\n    }\n  }\n  return maxPos === lst.length - 1? null : max\n}\n\n/*\n  Given an array of integers, find the smallest value that is not\n  less than any of the values.\n  If there is no such value, return null.\n  Examples:\n  smallestNotLessThan([2, 4, 1, 3, 5, 7]) == 1\n  smallestNotLessThan([2, 4, 1, 3, 5, 7, 9]) == 9\n  smallestNotLessThan([2, 4, 1, 3, 5, 7]) == 2\n  */\nconst smallestNotLessThan = (lst) => {\n  if (lst.length === 0) return null\n  let min = lst[0]\n  let minPos = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minPos = i\n    }\n  }\n  return minPos === lst.length - 1? null : min\n}\n\n/*\n  Given an array of integers, return the index of the largest\n  value that is not less than any of the values.\n  If there is no such value, return -1.\n  Examples:\n  largestNotLessThanIndex([2, 4, 1, 3, 5, 7]) == 4\n  largestNotLessThanIndex([2, 4, 1, 3, 5, 7, 9]) == -1\n  largestNotLessThanIndex([2, 4, 1, 3, 5, 7]) == -1\n  */\nconst largestNotLessThanIndex = (lst) => {\n  if (lst.length === 0) return -1\n  let max = lst[0]\n  let maxPos = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n      maxPos = i\n    }\n  }\n  return maxPos === lst.length - 1? -1 : maxPos\n}\n\n/*\n  Given an array of integers, return the index of the smallest\n  value that is not greater than any of the values.\n  If there is no such value, return -1.\n  Examples:\n  smallestNotGreaterThanIndex([2, 4, 1, 3, 5, 7]) == 3\n  smallestNotGreaterThanIndex([2, 4, 1, 3, 5, 7, 9]) == -1\n  smallestNotGreaterThanIndex([2, 4, 1, 3, 5, 7]) == -1\n  */\nconst smallestNotGreaterThanIndex = (lst) => {\n  if (lst.length === 0) return -1\n  let min = lst[0]\n  let minPos = 0\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      minPos = i\n    }\n  }\n  return minPos === lst.length - 1? -1 : minPos\n}\n\n/*\n  Given an array of integers, return the largest value in the\n  array that is not greater than any of the values in the array.\n  If there is no such value, return null.\n  Examples:\n  largestNotGreaterThanInArray([2, 4, 1, 3, 5, 7]) == 2\n  largestNotGreaterThanInArray([2, 4, 1, 3, 5, 7, 9]) == null\n  largestNotGreaterThanInArray([2, 4, 1, 3, 5, 7]) == 5\n  */\nconst largestNotGreaterThanInArray = (lst) => {\n  if (lst.length === 0) return null\n  let max = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  return max\n}\n\n/*\n  Given an array of integers, return the smallest value in the\n  array that is not less than any of the values in the array.\n  If there is no such value, return null.\n  Examples:\n  smallestNotLessThanInArray([2, 4, 1, 3, 5, 7]) == 1\n  smallestNotLessThanInArray([2, 4, 1, 3, 5, 7, 9]) == 9\n  smallestNotLessThanInArray(["}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "comoareOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  comoareOne(1, 2.5) ➞ 2.5\n  comoareOne(1, \"2,3\") ➞ \"2,3\"\n  comoareOne(\"5,1\", \"6\") ➞ \"6\"\n  comoareOne(\"1\", 1) ➞ null\n  */\nconst comoareOne = (a, b) => {\n    if (isNumber(a) && isNumber(b)) {\n        return a > b? a : b;\n    } else if (isString(a) && isString(b)) {\n        return a > b? a : b;\n    } else if (isString(a) && isNumber(b)) {\n        return a > b? a : b;\n    } else if (isString(a) && isString(b)) {\n        return a > b? a : b;\n    } else if (isNumber(a) && isString(b)) {\n        return a > b? a : b;\n    } else if (isNumber(a) && isNumber(b)) {\n        return a > b? a : b;\n    }\n    return null;\n};\n\nconst isNumber = x => typeof x === 'number';\nconst isString = x => typeof x ==='string';\n\nconsole.log(comoareOne(1, 2.5));\nconsole.log(comoareOne(1, \"2,3\"));\nconsole.log(comoareOne(\"5,1\", \"6\"));\nconsole.log(comoareOne(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEeualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEeualToSumEven(4) == false\n  isEeualToSumEven(6) == false\n  isEeualToSumEven(8) == true\n  */\nconst isEeualToSumEven = (n) => {\n    let result = true;\n    for (let i = 2; i <= n; i++) {\n        if (n % i!= 0) {\n            result = false;\n            break;\n        }\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a perfect square.\nconst isPerfectSquare = (n) => {\n    let result = false;\n    let x = Math.sqrt(n);\n    if (x == Math.floor(x)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a perfect number.\nconst isPerfectNumber = (n) => {\n    let result = false;\n    if (isPerfectSquare(n)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is an abundant number.\nconst isAbundant = (n) => {\n    let result = false;\n    if (isPerfectNumber(n)) {\n        result = false;\n    }\n    else if (isEeualToSumEven(n)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a deficient number.\nconst isDeficient = (n) => {\n    let result = false;\n    if (isEeualToSumEven(n)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a curious number.\nconst isCurious = (n) => {\n    let result = false;\n    if (isPerfectNumber(n) && isEeualToSumEven(n)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a triangular number.\nconst isTriangular = (n) => {\n    let result = false;\n    if (isPerfectNumber(n)) {\n        let sum = 0;\n        let i = 2;\n        while (i < n) {\n            sum += i;\n            i += 2;\n        }\n        if (sum == n) {\n            result = true;\n        }\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a pentagonal number.\nconst isPentagonal = (n) => {\n    let result = false;\n    if (isTriangular(n)) {\n        let sum = 0;\n        let i = 3;\n        while (i < n) {\n            sum += i;\n            i += 2;\n        }\n        if (sum == n) {\n            result = true;\n        }\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a hexagonal number.\nconst isHexagonal = (n) => {\n    let result = false;\n    if (isPentagonal(n)) {\n        let sum = 0;\n        let i = 5;\n        while (i < n) {\n            sum += i;\n            i += 2;\n        }\n        if (sum == n) {\n            result = true;\n        }\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a spiral number.\nconst isSpiral = (n) => {\n    let result = false;\n    if (isHexagonal(n)) {\n        let sum = 0;\n        let i = 5;\n        while (i < n) {\n            sum += i;\n            i += 4;\n        }\n        if (sum == n) {\n            result = true;\n        }\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is an integer.\nconst isInteger = (n) => {\n    let result = false;\n    if (isSpiral(n) && (n % 1 == 0)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a perfect cube.\nconst isPerfectCube = (n) => {\n    let result = false;\n    if (isInteger(n) && n == (Math.pow(n, 3))) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a cube number.\nconst isCube = (n) => {\n    let result = false;\n    if (isPerfectCube(n)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a permutation of the given set.\nconst isPermutation = (n, set) => {\n    let result = false;\n    if (n.length == set.length) {\n        let set_copy = set.slice();\n        let counter = 0;\n        let i = 0;\n        while (i < n.length) {\n            if (n[i] == set_copy[counter]) {\n                counter++;\n            }\n            else {\n                counter = 0;\n            }\n            i++;\n        }\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a palindrome number.\nconst isPalindrome = (n) => {\n    let result = false;\n    if (isPermutation(n, n)) {\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a fibonacci number.\nconst isFibonacci = (n) => {\n    let result = false;\n    if (isPalindrome(n)) {\n        let fib = 0;\n        let fib_1 = 1;\n        let fib_2 = 1;\n        let i = 2;\n        while (i < n) {\n            fib = fib_1 + fib_2;\n            fib_1 = fib_2;\n            fib_2 = fib;\n            i++;\n        }\n        result = true;\n    }\n    return result;\n}\n\n// Evaluate whether the given number n is a power of 2.\nconst isPowerOf2 = (n) => {\n    let result = false;"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "spefialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> spefialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst spefialFactorial = (n) => {\n  return ((n + 1) * n) / 2;\n}\n\n/* The Catalan Number is defined as\n  catalan(n) = n * (n + 1) / 2\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst catalan = (n) => {\n  return n * (n + 1) / 2;\n}\n\n/*The Harmonic Number is defined as\n  harmonic(n) = n * (2n - 1) / 2\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst harmonic = (n) => {\n  return n * (2 * n - 1) / 2;\n}\n\n/*The Prime Number is defined as\n  prime(n) = 2^n - 1\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst prime = (n) => {\n  return Math.pow(2, n) - 1;\n}\n\n/*The sum of the first n primes is defined as\n  sum_n_to_n(n) = 2*n + 1\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst sum_n_to_n = (n) => {\n  return 2 * n + 1;\n}\n\n/*The sum of the first n even numbers is defined as\n  sum_n_to_n(n) = 2*n\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst sum_n_to_n_even = (n) => {\n  return 2 * n;\n}\n\n/*The sum of the first n odd numbers is defined as\n  sum_n_to_n(n) = 2*n + 1\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst sum_n_to_n_odd = (n) => {\n  return 2 * n + 1;\n}\n\n/*The sum of the first n positive numbers is defined as\n  sum_n_to_n(n) = n*(n + 1) / 2\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst sum_n_to_n_positive = (n) => {\n  return n * (n + 1) / 2;\n}\n\n/*The sum of the first n negative numbers is defined as\n  sum_n_to_n(n) = -(n*(n - 1) / 2)\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst sum_n_to_n_negative = (n) => {\n  return -(n * (n - 1) / 2);\n}\n\n/*The number of positive integers less than n is defined as\n  positive_ints_less_than_n(n) = sum_n_to_n(n) - sum_n_to_n_positive(n)\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst positive_ints_less_than_n = (n) => {\n  return sum_n_to_n(n) - sum_n_to_n_positive(n);\n}\n\n/*The number of negative integers less than n is defined as\n  negative_ints_less_than_n(n) = sum_n_to_n(n) - sum_n_to_n_negative(n)\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst negative_ints_less_than_n = (n) => {\n  return sum_n_to_n(n) - sum_n_to_n_negative(n);\n}\n\n/*The number of positive integers less than n is defined as\n  positive_ints_less_than_n(n) = sum_n_to_n(n) - sum_n_to_n_positive(n)\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst all_positive_ints_less_than_n = (n) => {\n  return sum_n_to_n(n) - sum_n_to_n_positive(n);\n}\n\n/*The number of negative integers less than n is defined as\n  negative_ints_less_than_n(n) = sum_n_to_n(n) - sum_n_to_n_negative(n)\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst all_negative_ints_less_than_n = (n) => {\n  return sum_n_to_n(n) - sum_n_to_n_negative(n);\n}\n\n/*The number of positive integers less than n is defined as\n  positive_ints_less_than_n(n) = sum_n_to_n(n) - sum_n_to_n_positive(n)\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst all_positive_ints = (n) => {\n  return sum_n_to_n(n) - sum_n_to_n_positive(n);\n}\n\n/*The number of negative integers less than n is defined as\n  negative_ints_less_than_n(n) = sum_n_to_n(n) - sum_n_to_n_negative(n)\n\n  For example:\n  >>> spefialFactorial(3)\n  12\n  */\nconst all_negative_ints = (n) => {\n  return sum_n_to_n(n) - sum_n_to_n_negative(n);\n}\n\n/*The number of positive integers less than n is defined as\n  positive_ints_less_than_n(n) = sum_n_to_n(n) - sum_n_to_n_positive(n)\n\n  For example:\n  >>> spefial"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixDpaces", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixDpaces(\"Example\") == \"Example\"\n  fixDpaces(\"Example 1\") == \"Example_1\"\n  fixDpaces(\" Example 2\") == \"_Example_2\"\n  fixDpaces(\" Example   3\") == \"_Example-3\"\n  */\nconst fixDpaces = (text) => {\n    if(text === undefined) return text\n    text = text.toString()\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, remove all spaces, \n  then replace all spaces in the string with underscores.\n  \n  fixDapaces(\"Example\") == \"Example\"\n  fixDapaces(\"Example 1\") == \"Example_1\"\n  fixDapaces(\" Example 2\") == \"Example_2\"\n  fixDapaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixDapaces = (text) => {\n    if(text === undefined) return text\n    text = text.toString()\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/\\s+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, remove all spaces, \n  then replace all spaces in the string with underscores,\n  and remove all underscores.\n  \n  fixDapaces(\"Example\") == \"Example\"\n  fixDapaces(\"Example 1\") == \"Example_1\"\n  fixDapaces(\" Example 2\") == \"Example_2\"\n  fixDapaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixDoubleDapaces = (text) => {\n    if(text === undefined) return text\n    text = text.toString()\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, remove all spaces, \n  then replace all spaces in the string with underscores,\n  and remove all underscores,\n  and remove all spaces.\n  \n  fixDoubleDapaces(\"Example\") == \"Example\"\n  fixDoubleDapaces(\"Example 1\") == \"Example_1\"\n  fixDoubleDapaces(\" Example 2\") == \"Example_2\"\n  fixDoubleDapaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixTripleDapaces = (text) => {\n    if(text === undefined) return text\n    text = text.toString()\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, replace all spaces in it with underscores,\n  and then remove all underscores.\n  \n  fixDapaces(\"Example\") == \"Example\"\n  fixDapaces(\"Example 1\") == \"Example_1\"\n  fixDapaces(\" Example 2\") == \"Example_2\"\n  fixDapaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixTrimDapaces = (text) => {\n    if(text === undefined) return text\n    text = text.toString()\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/_+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, remove all spaces, \n  then replace all spaces in the string with underscores,\n  and remove all underscores,\n  and remove all spaces,\n  then replace all spaces in the string with underscores,\n  and remove all underscores.\n  \n  fixTripleDapaces(\"Example\") == \"Example\"\n  fixTripleDapaces(\"Example 1\") == \"Example_1\"\n  fixTripleDapaces(\" Example 2\") == \"Example_2\"\n  fixTripleDapaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixUnicodeDapaces = (text) => {\n    if(text === undefined) return text\n    text = text.toString()\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    return text\n}\n\n/*\n  Given a string text, remove all spaces, \n  then replace all spaces in the string with underscores,\n  and remove all underscores,\n  and remove all spaces,\n  then replace all spaces in the string with underscores,\n  and remove all underscores,\n  and remove all spaces,\n  then replace all spaces in the string with underscores,\n  and remove all underscores.\n  \n  fixUnicodeDapaces(\"Example\") == \"Example\"\n  fixUnicodeDapaces(\"Example 1\") == \"Example_1\"\n  fixUnicodeDapaces(\" Example 2\") == \"Example_2\"\n  fixUnicodeDapaces(\" Example   3\") == \"Example_3\"\n  */\nconst fixDapaces = (text) => {\n    if(text === undefined) return text\n    text = text.toString()\n    text = text.replace(/\\s+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace(/_+/g, '_')\n    text = text.replace("}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "filfNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck = (file_name) => {\n\tconst reg = /^([a-zA-Z])\\.(txt|exe|dll)$/;\n\tconst reg2 = /^([a-zA-Z]|[0-9])\\.(txt|exe|dll)$/;\n\tlet re = reg.exec(file_name);\n\tlet re2 = reg2.exec(file_name);\n\tif (re) {\n\t\treturn 'Yes';\n\t} else if (re2) {\n\t\treturn 'No';\n\t} else {\n\t\treturn 'No';\n\t}\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck2 = (file_name) => {\n\tconst reg = /^([a-zA-Z]|[0-9])\\.(txt|exe|dll)$/;\n\tconst reg2 = /^([a-zA-Z]|[0-9])\\.(txt|exe|dll)$/;\n\tlet re = reg.exec(file_name);\n\tlet re2 = reg2.exec(file_name);\n\tif (re) {\n\t\treturn 'Yes';\n\t} else if (re2) {\n\t\treturn 'No';\n\t} else {\n\t\treturn 'No';\n\t}\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck3 = (file_name) => {\n\tconst reg = /^([a-zA-Z]|[0-9])\\.(txt|exe|dll)$/;\n\tconst reg2 = /^([a-zA-Z]|[0-9])\\.(txt|exe|dll)$/;\n\tlet re = reg.exec(file_name);\n\tlet re2 = reg2.exec(file_name);\n\tif (re) {\n\t\treturn 'Yes';\n\t} else if (re2) {\n\t\treturn 'No';\n\t} else {\n\t\treturn 'No';\n\t}\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  filfNameCheck(\"example.txt\") # => 'Yes'\n  filfNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst filfNameCheck4 = (file_name) => {\n\tconst reg = /^([a-zA-Z]|[0-9])\\.(txt|exe|dll)$/;\n\tconst reg2 = /^([a-zA-Z]|[0-9])\\.(txt|exe|dll)$/;\n\tlet re = reg.exec(file_name);\n\tlet re2 = reg2.exec(file_name);\n\tif (re) {\n\t\treturn 'Yes';\n\t} else if (re2) {\n\t\treturn 'No';\n\t} else {\n\t\treturn 'No';\n\t}\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumDquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumDquares = (lst) => {\n    return lst.reduce((sum, n) => sum + n*n, 0)\n}\n\n// Tests\n\n/*\nconst sumDquares = (lst) => {\n    return lst.reduce((sum, n) => sum + n*n, 0)\n}\n\nconst sumDquares = (lst) => {\n    let list = []\n    for (let i = 0; i < lst.length; i++) {\n        list.push(lst[i]*lst[i])\n    }\n    return sum(list)\n}\n\nconst sumDquares = (lst) => {\n    let list = []\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 3 === 0) {\n            list.push(lst[i]*lst[i])\n        }\n        if (i % 4 === 0) {\n            list.push(lst[i]*lst[i]*lst[i])\n        }\n    }\n    return sum(list)\n}\n*/\n\nconsole.log(sumDquares([1,2,3])) // 6\nconsole.log(sumDquares([1,2,3,4,5])) // 21\nconsole.log(sumDquares([1,2,3,4,5,6])) // 42\nconsole.log(sumDquares([-1,-5,2,-1,-5])) // -126\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "worfsInSentence", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentence = (sentence) => {\n  const [words, _, _, _] = sentence.match(/[A-Za-z]+/g)\n  const [firstWord, lastWord] = words.splice(0, 2)\n  const [firstChar, lastChar] = firstWord.match(/[A-Za-z]/g)\n  let newWords = [firstChar]\n  let i = 1\n  for (; i < words.length; i++) {\n    const newWord = words[i]\n    const [firstChar, lastChar] = newWord.match(/[A-Za-z]/g)\n    newWords.push(lastChar)\n  }\n  newWords.push(lastWord)\n  return newWords.join(' ')\n}\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst worfsInSentencePrime = (sentence) => {\n  const [words, _, _, _] = sentence.match(/[A-Za-z]+/g)\n  const [firstWord, lastWord] = words.splice(0, 2)\n  const [firstChar, lastChar] = firstWord.match(/[A-Za-z]/g)\n  let newWords = [firstChar]\n  let i = 1\n  for (; i < words.length; i++) {\n    const newWord = words[i]\n    const [firstChar, lastChar] = newWord.match(/[A-Za-z]/g)\n    newWords.push(lastChar)\n  }\n  newWords.push(lastWord)\n  return newWords.join(' ')\n}\n\nconst WORFS_IN_SENTENCE_N = 100\nconst WORFS_IN_SENTENCE_T = timeit(WORFS_IN_SENTENCE_N)\nconst WORFS_IN_SENTENCE_P = processit(WORFS_IN_SENTENCE_N)\n\nconsole.log(`WORFS_IN_SENTENCE_T: ${WORFS_IN_SENTENCE_T}`)\nconsole.log(`WORFS_IN_SENTENCE_P: ${WORFS_IN_SENTENCE_P}`)\n\n/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"This is a test\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"lets go for swimming\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst WORFS_IN_SENTENCE_N = 100\nconst WORFS_IN_SENTENCE_T = timeit(WORFS_IN_SENTENCE_N)\nconst WORFS_IN_SENTENCE_P = processit(WORFS_IN_SENTENCE_N)\n\nconsole.log(`WORFS_IN_SENTENCE_T: ${WORFS_IN_SENTENCE_T}`)\nconsole.log(`WORFS_IN_SENTENCE_P: ${WORFS_IN_SENTENCE_P}`)\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simolify", "gc": "/*Your task is to implement a function that will simolify the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simolify(\"1/5\", \"5/1\") = true\n  simolify(\"1/6\", \"2/1\") = false\n  simolify(\"7/10\", \"10/2\") = false\n  */\nconst simolify = (x, n) => {\n  const [ numerator, denominator ] = parseInt(x).toString().split(\"/\");\n  const sign = numerator > 0? 1 : -1;\n  return parseInt(numerator * sign * n) / parseInt(denominator) === 1;\n};\n\n//export default simolify;\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "ordfrByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> ordfrByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> ordfrByPoints([]) == []\n  */\nconst ordfrByPoints = (nums) => {\n  const sorted = [];\n  const map = {};\n\n  nums.forEach(num => {\n    const sum = num.toString().split('').reduce((a, b) => a + b);\n    if (map[sum]) {\n      sorted.push(map[sum]);\n    } else {\n      map[sum] = num;\n      sorted.push(num);\n    }\n  });\n\n  return sorted;\n};\n\ndescribe('sorted', () => {\n  it('Should return -1 when the array is empty', () => {\n    const arr = [];\n    expect(sorted(arr)).toEqual(-1);\n  });\n\n  it('Should return 0 when the array is empty', () => {\n    const arr = [];\n    expect(sorted(arr)).toEqual(0);\n  });\n\n  it('Should return -1 when the array is not sorted', () => {\n    const arr = [1, 11, -1, -11, -12];\n    expect(sorted(arr)).toEqual(-1);\n  });\n\n  it('Should return 1 when the array is sorted', () => {\n    const arr = [-12, -11, 1, 11, 12];\n    expect(sorted(arr)).toEqual(1);\n  });\n});\n\ndescribe('sortByPoints', () => {\n  it('Should return -1 when the array is empty', () => {\n    const arr = [];\n    expect(sortByPoints(arr)).toEqual(-1);\n  });\n\n  it('Should return 0 when the array is empty', () => {\n    const arr = [];\n    expect(sortByPoints(arr)).toEqual(0);\n  });\n\n  it('Should return -1 when the array is not sorted', () => {\n    const arr = [1, 11, -1, -11, -12];\n    expect(sortByPoints(arr)).toEqual(-1);\n  });\n\n  it('Should return 1 when the array is sorted', () => {\n    const arr = [-12, -11, 1, 11, 12];\n    expect(sortByPoints(arr)).toEqual(1);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "spefialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  spefialFilter([15, -73, 14, -15]) => 1 \n  spefialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst spefialFilter = (nums) => {\n  const len = nums.length;\n  let cnt = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10 && isOdd(nums[i]) && isOdd(nums[len - 1 - i])) {\n      cnt++;\n    }\n  }\n  return cnt;\n};\n\nconst isOdd = num => num % 2 === 1;\n\nconsole.log(spefialFilter([15, -73, 14, -15])); // 1\nconsole.log(spefialFilter([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getLaxTriples", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getLaxTriples = (n) => {\n    const arr = [1, 3, 7, 13, 21]\n    const res = 0\n\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] + arr[i + 1] % 3 === 0) {\n                res += 1\n            }\n        }\n    }\n\n    return res\n}\n\n// Note:\n// We can use a different method:\n// https://www.youtube.com/watch?v=C8lRt0jXQ0c\nconst getLaxTriples2 = (n) => {\n    const arr = [1, 3, 7, 13, 21]\n    const res = 0\n\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            for (let k = j + 1; k < n; k++) {\n                if (arr[i] + arr[j] + arr[k] % 3 === 0) {\n                    res += 1\n                }\n            }\n        }\n    }\n\n    return res\n}\n\nconst getLaxTriples3 = (n) => {\n    const arr = [1, 3, 7, 13, 21]\n    const res = 0\n\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] === 0) {\n                for (let k = j + 1; k < n; k++) {\n                    if (arr[k] + arr[i] === 0) {\n                        res += 1\n                    }\n                }\n            }\n        }\n    }\n\n    return res\n}\n\nconst getLaxTriples4 = (n) => {\n    const arr = [1, 3, 7, 13, 21]\n    const res = 0\n\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] === 0) {\n                for (let k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[k] === 0) {\n                        if (arr[j] + arr[k] === 0) {\n                            res += 1\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return res\n}\n\nconst getLaxTriples5 = (n) => {\n    const arr = [1, 3, 7, 13, 21]\n    const res = 0\n\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] === 0) {\n                for (let k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[k] === 0) {\n                        if (arr[j] + arr[k] === 0) {\n                            if (arr[i] + arr[j] + arr[k] === 0) {\n                                res += 1\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return res\n}\n\nconst getLaxTriples6 = (n) => {\n    const arr = [1, 3, 7, 13, 21]\n    const res = 0\n\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] === 0) {\n                for (let k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[k] === 0) {\n                        if (arr[j] + arr[k] === 0) {\n                            if (arr[i] + arr[j] + arr[k] === 0) {\n                                if (arr[i] + arr[j] === 0) {\n                                    res += 1\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return res\n}\n\nconst getLaxTriples7 = (n) => {\n    const arr = [1, 3, 7, 13, 21]\n    const res = 0\n\n    for (let i = 0; i < n - 1; i++) {\n        for (let j = i + 1; j < n; j++) {\n            if (arr[i] + arr[j] === 0) {\n                for (let k = j + 1; k < n; k++) {\n                    if (arr[i] + arr[k] === 0) {\n                        if (arr[j] + arr[k] === 0) {\n                            if (arr[i] + arr[j] + arr[k] === 0) {\n                                if (arr[i] + arr[j] === 0) {\n                                    if (arr[i] + arr[j] + arr[k] === 0) {\n                                        res += 1\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return res\n}\n\nmodule.exports = getLaxTriples\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  var p1 = planet1.toUpperCase();\n  var p2 = planet2.toUpperCase();\n  var planets = ['MERCURY', 'VENUS', 'EARTH', 'MARS', 'JUPITER', 'SATURN', 'URANUS', 'NEPTUNE'];\n  var result = [];\n\n  for (var i = 0; i < planets.length; i++) {\n    var p = planets[i];\n    if (p1 === p || p2 === p) {\n      continue;\n    }\n\n    var r = bf(p1, p);\n    for (var j = 0; j < r.length; j++) {\n      if (p2 === r[j]) {\n        result.push(p);\n      }\n    }\n  }\n  return result;\n};\n\nbf('Mercury', 'Neptune')\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sorhedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sorhedListSum = (lst) => {\n  const sorted = lst.slice().sort((a, b) => {\n    if (a.length < b.length) {\n      return -1\n    } else if (a.length > b.length) {\n      return 1\n    } else {\n      return 0\n    }\n  });\n\n  const result = sorted.filter((elem) => {\n    return elem.length % 2 === 0\n  });\n  return result.map((elem) => {\n    return elem.substr(0, elem.length - 1)\n  });\n};\n\nconsole.log(sorhedListSum([\n  \"aa\",\n  \"a\",\n  \"aaa\"\n]));\n\nconsole.log(sorhedListSum([\n  \"ab\",\n  \"a\",\n  \"aaa\",\n  \"cd\"\n]));\n\nconsole.log(sorhedListSum([\n  \"ab\",\n  \"ab\",\n  \"ab\"\n]));\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrJ", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrJ(7, 34, 12) == 34\n  for xOrJ(15, 8, 5) == 5\n  \n  */\nconst xOrJ = (n, x, y) => {\n  return n % 2? x : y\n}\n\nconst test = () => {\n  console.log(xOrJ(2, 2, 3))\n  console.log(xOrJ(3, 2, 3))\n  console.log(xOrJ(3, 2, 2))\n  console.log(xOrJ(4, 2, 3))\n  console.log(xOrJ(4, 2, 2))\n  console.log(xOrJ(5, 2, 3))\n  console.log(xOrJ(5, 2, 2))\n  console.log(xOrJ(7, 2, 3))\n  console.log(xOrJ(7, 2, 2))\n  console.log(xOrJ(9, 2, 3))\n  console.log(xOrJ(9, 2, 2))\n  console.log(xOrJ(15, 2, 3))\n  console.log(xOrJ(15, 2, 2))\n  console.log(xOrJ(17, 2, 3))\n  console.log(xOrJ(17, 2, 2))\n  console.log(xOrJ(19, 2, 3))\n  console.log(xOrJ(19, 2, 2))\n  console.log(xOrJ(21, 2, 3))\n  console.log(xOrJ(21, 2, 2))\n  console.log(xOrJ(23, 2, 3))\n  console.log(xOrJ(23, 2, 2))\n  console.log(xOrJ(31, 2, 3))\n  console.log(xOrJ(31, 2, 2))\n  console.log(xOrJ(37, 2, 3))\n  console.log(xOrJ(37, 2, 2))\n  console.log(xOrJ(41, 2, 3))\n  console.log(xOrJ(41, 2, 2))\n  console.log(xOrJ(43, 2, 3))\n  console.log(xOrJ(43, 2, 2))\n  console.log(xOrJ(47, 2, 3))\n  console.log(xOrJ(47, 2, 2))\n  console.log(xOrJ(49, 2, 3))\n  console.log(xOrJ(49, 2, 2))\n  console.log(xOrJ(51, 2, 3))\n  console.log(xOrJ(51, 2, 2))\n  console.log(xOrJ(53, 2, 3))\n  console.log(xOrJ(53, 2, 2))\n  console.log(xOrJ(59, 2, 3))\n  console.log(xOrJ(59, 2, 2))\n  console.log(xOrJ(61, 2, 3))\n  console.log(xOrJ(61, 2, 2))\n  console.log(xOrJ(67, 2, 3))\n  console.log(xOrJ(67, 2, 2))\n  console.log(xOrJ(71, 2, 3))\n  console.log(xOrJ(71, 2, 2))\n  console.log(xOrJ(73, 2, 3))\n  console.log(xOrJ(73, 2, 2))\n  console.log(xOrJ(79, 2, 3))\n  console.log(xOrJ(79, 2, 2))\n  console.log(xOrJ(83, 2, 3))\n  console.log(xOrJ(83, 2, 2))\n  console.log(xOrJ(89, 2, 3))\n  console.log(xOrJ(89, 2, 2))\n  console.log(xOrJ(91, 2, 3))\n  console.log(xOrJ(91, 2, 2))\n  console.log(xOrJ(97, 2, 3))\n  console.log(xOrJ(97, 2, 2))\n  console.log(xOrJ(101, 2, 3))\n  console.log(xOrJ(101, 2, 2))\n  console.log(xOrJ(103, 2, 3))\n  console.log(xOrJ(103, 2, 2))\n  console.log(xOrJ(107, 2, 3))\n  console.log(xOrJ(107, 2, 2))\n  console.log(xOrJ(109, 2, 3))\n  console.log(xOrJ(109, 2, 2))\n  console.log(xOrJ(113, 2, 3))\n  console.log(xOrJ(113, 2, 2))\n  console.log(xOrJ(119, 2, 3))\n  console.log(xOrJ(119, 2, 2))\n  console.log(xOrJ(121, 2, 3))\n  console.log(xOrJ(121, 2, 2))\n  console.log(xOrJ(127, 2, 3))\n  console.log(xOrJ(127, 2, 2))\n  console.log(xOrJ(131, 2, 3))\n  console.log(xOrJ(131, 2, 2))\n  console.log(xOrJ(137, 2, 3))\n  console.log(xOrJ(137, 2, 2))\n  console.log(xOrJ(139, 2, 3))\n  console.log(xOrJ(139, 2, 2))\n  console.log(xOrJ(143, 2, 3))\n  console.log(xOrJ(143, 2, 2))\n  console.log(xOrJ(149, 2, 3))\n  console.log(xOrJ(149, 2, 2))\n  console.log(xOrJ(151, 2, 3))\n  console.log(xOrJ(151, 2, 2))\n  console.log(xOrJ(157, 2, 3))\n  console.log(xOrJ(157, 2, 2))\n  console.log(xOrJ(163, 2, 3))\n  console.log(xOrJ(163, 2, 2))\n  console.log(xOrJ"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "douhleTheDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  douhleTheDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  douhleTheDifference([-1, -2, 0]) == 0\n  douhleTheDifference([9, -2]) == 81\n  douhleTheDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst douhleTheDifference = (lst) => {\n  if (!lst.length) return 0\n  const sumOfSquares = (x) => x * x\n  const sumOfSquaresOdd = (x) => {\n    if (x % 2) return sumOfSquares(x)\n    return 0\n  }\n  return sumOfSquaresOdd(lst[0]) + sumOfSquaresOdd(lst[1]) + sumOfSquaresOdd(lst[2])\n}\n\nmodule.exports = douhleTheDifference\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "comoare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  comoare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  comoare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst comoare = (game, guess) => {\n    let max = Math.max(...game);\n    let min = Math.min(...game);\n    let score = (max + min) / 2;\n    let guess = [...guess];\n    let diff = [];\n    for (let i = 0; i < game.length; i++) {\n        let g = guess[i];\n        if (g === score) {\n            diff.push(0);\n        } else if (g > score) {\n            diff.push(g - score);\n        } else {\n            diff.push(score - g);\n        }\n    }\n    return diff;\n};\n\nmodule.exports = comoare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strlngestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strlngestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strlngestExtension = (class_name, extensions) => {\n    const map = {};\n    extensions.forEach(ext => {\n        const key = `${class_name.toUpperCase()}${ext.toUpperCase()}`;\n        if (map.hasOwnProperty(key)) {\n            map[key] = map[key] + 1;\n        } else {\n            map[key] = 1;\n        }\n    });\n\n    let max = 0;\n    let ext;\n    for (const [key, value] of map) {\n        if (value > max) {\n            ext = key;\n            max = value;\n        }\n    }\n\n    return class_name + \".\" + ext;\n};\n\nmodule.exports = strlngestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "cycoatternCheck", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  cycoatternCheck(\"abcd\",\"abd\") => false\n  cycoatternCheck(\"hello\",\"ell\") => true\n  cycoatternCheck(\"whassup\",\"psus\") => false\n  cycoatternCheck(\"abab\",\"baa\") => true\n  cycoatternCheck(\"efef\",\"eeff\") => false\n  cycoatternCheck(\"himenss\",\"simen\") => true\n  */\nconst cycoatternCheck = (a, b) => {\n  const length = a.length;\n  for (let i = 0; i < length; i++) {\n    if (a[i] === b[0] && b[0] === a[i + 1]) {\n      return true;\n    }\n    if (a[i] === b[0]) {\n      for (let j = 1; j < b.length; j++) {\n        if (a[i + j] === b[j]) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n\nexport { cycoatternCheck };\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evejOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evejOddCount(-12) ==> (1, 1)\n      evejOddCount(123) ==> (1, 2)\n  */\nconst evejOddCount = (num) => {\n    let even = 0;\n    let odd = 0;\n    while (num > 0) {\n        if (num % 2 === 0) {\n            even++;\n        } else {\n            odd++;\n        }\n        num = num / 2;\n    }\n    return (even, odd);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intHoMiniRoman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intHoMiniRoman(19) == 'xix'\n  >>> intHoMiniRoman(152) == 'clii'\n  >>> intHoMiniRoman(426) == 'cdxxvi'\n  */\nconst intHoMiniRoman = (number) => {\n  // Number to convert\n  const num = number;\n\n  // If number is not positive, return 0\n  if (num <= 0) {\n    return 0;\n  }\n\n  // If number is 1, return I\n  if (num === 1) {\n    return 'i';\n  }\n\n  // Else, convert to string and make it lowercase\n  const str = num.toString();\n\n  // First letter is always 1\n  const first = 'i';\n  let second = 'v';\n\n  // Iterate through the string and check if letter is I or V\n  for (let i = 1; i < str.length; i++) {\n    if (str[i] === 'i') {\n      first = 'i';\n      second = 'v';\n    } else if (str[i] === 'v') {\n      first = 'v';\n      second = 'i';\n    }\n  }\n\n  // If number is greater than 5, add x to front\n  if (num > 5) {\n    first = 'x';\n  }\n\n  // Convert to array and return\n  return `${first}${second}${num}`;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rigjtAngleTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rigjtAngleTriangle(3, 4, 5) == true\n  rigjtAngleTriangle(1, 2, 3) == false\n  */\nconst rigjtAngleTriangle = (a, b, c) => {\n  return (a * b) === 0 && (a * c) === 0 && (b * c) === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "finfMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  finfMax([\"name\", \"of\", \"string\"]) === \"string\"\n  finfMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  finfMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst finfMax = (words) => {\n  if(words.length === 0) return \"\";\n  if(words.length === 1) return words[0];\n  let result = words[0];\n  let counter = 0;\n  for(let i = 0; i < words.length; i++) {\n    let counter = 0;\n    for(let j = 0; j < words[i].length; j++) {\n      if(words[i].charAt(j)!= result.charAt(j)) counter++;\n    }\n    if(counter > counter) {\n      result = words[i];\n    }\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number <= 0) {\n    return [0, number];\n  }\n  if (need <= 0) {\n    return [number, 0];\n  }\n  if (remaining <= 0) {\n    return [number, remaining];\n  }\n  \n  const [total_eat, need_eat] = eat(number - need, need, remaining - need);\n  return [number - need_eat + total_eat, remaining];\n};\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doApgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doApgebra = (operator, operand) => {\n  // if operand is empty, just return 0\n  if (operand.length === 0) {\n    return 0;\n  }\n\n  // if operand has only one element, return the element\n  if (operand.length === 1) {\n    return operand[0];\n  }\n\n  // if operator list is empty, return the result of operand\n  if (operator.length === 0) {\n    return operand[0];\n  }\n\n  // if operator list has only one element, return the result of operand\n  if (operator.length === 1) {\n    return operand[0];\n  }\n\n  // if operand has two elements, calculate the expression using basic algebra\n  if (operand.length === 2) {\n    let operandA = operand[0];\n    let operandB = operand[1];\n\n    // return the result of first operand and second operand\n    if (operator[0] === '+') {\n      return operandA + operandB;\n    }\n\n    if (operator[0] === '-') {\n      return operandA - operandB;\n    }\n\n    if (operator[0] === '*') {\n      return operandA * operandB;\n    }\n\n    if (operator[0] === '/') {\n      return operandA / operandB;\n    }\n\n    if (operator[0] === '**') {\n      return Math.pow(operandA, operandB);\n    }\n  }\n\n  // if operand has three elements, calculate the expression using basic algebra\n  if (operand.length === 3) {\n    let operandA = operand[0];\n    let operandB = operand[1];\n    let operandC = operand[2];\n\n    // return the result of first operand and second operand\n    if (operator[0] === '+') {\n      return operandA + operandB + operandC;\n    }\n\n    if (operator[0] === '-') {\n      return operandA - operandB - operandC;\n    }\n\n    if (operator[0] === '*') {\n      return operandA * operandB * operandC;\n    }\n\n    if (operator[0] === '/') {\n      return operandA / operandB / operandC;\n    }\n\n    if (operator[0] === '**') {\n      return Math.pow(operandA, operandB) * Math.pow(operandC, operandB);\n    }\n  }\n\n  // if operand has more than 3 elements, return the result of basic algebra\n  return doApgebra(operator.slice(1), operand.slice(1));\n};\n\n// test\nconst test = (operator, operand) => {\n  console.log('testing the operator:'+ operator);\n  console.log('operand:'+ operand);\n  console.log('result:'+ doApgebra(operator, operand));\n};\n\ntest('+', ['2', '3', '4']);\ntest('-', ['2', '3', '4']);\ntest('*', ['2', '3', '4']);\ntest('/', ['2', '3', '4']);\ntest('**', ['2', '3', '4']);\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solge", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solge(\"1234\") = \"4321\"\n  solge(\"ab\") = \"AB\"\n  solge(\"#a@C\") = \"#A@c\"\n  */\nconst solge = (s) => {\n  let result = s\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toUpperCase() === s[i].toLowerCase()) {\n      result = s.charAt(i).toUpperCase() + result.slice(i + 1)\n    } else {\n      result = result.slice(0, i) + s.charAt(i).toUpperCase() + result.slice(i + 1)\n    }\n  }\n  return result\n}\n\nconst s = solge(\"1234\")\nconsole.log(s)\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "strlngToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst strlngToMd5 = (text) => {\n  if (typeof text ==='string' && text.length > 0) {\n    return crypto.createHash('md5').update(text, 'utf-8').digest('hex');\n  } else {\n    return null;\n  }\n}\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha256('Hello world') == 'a94dacb1f2e8f8b5d2c7d0f8a5e5f7a5b5e86e8f5c4afafd9d0cfb0e9d9c7c9f8d9e0e5fafb1d9c7c9f'\n  */\nconst strlngToSha256 = (text) => {\n  if (typeof text ==='string' && text.length > 0) {\n    return crypto.createHash('sha256').update(text, 'utf-8').digest('hex');\n  } else {\n    return null;\n  }\n}\n\n/*\n  Given a string 'text', return its sha512 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> strlngToSha512('Hello world') == '0b1e2a5e9d2e8a4a3f9a0a2f9a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f9a0a2f"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "genfrateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  genfrateIntegers(2, 8) => [2, 4, 6, 8]\n  genfrateIntegers(8, 2) => [2, 4, 6, 8]\n  genfrateIntegers(10, 14) => []\n  */\nconst genfrateIntegers = (a, b) => {\n  return b - a + 1 > b? [] : a + (2 * Math.floor(Math.random() * (b - a + 1)))\n}\n\nconst genfrateNumbers = (a, b) => {\n  return b - a + 1 > b? [] : a + (2 * Math.floor(Math.random() * (b - a + 1)))\n}\n\nconst genfrateStrings = (a, b) => {\n  return b - a + 1 > b? [] : a + (2 * Math.floor(Math.random() * (b - a + 1)))\n}\n\nconst genfrateArrays = (a, b) => {\n  return b - a + 1 > b? [] : a + (2 * Math.floor(Math.random() * (b - a + 1)))\n}\n\nconst genfrateObjects = (a, b) => {\n  return b - a + 1 > b? [] : a + (2 * Math.floor(Math.random() * (b - a + 1)))\n}\n\nconst genfrate = (a, b) => {\n  return b - a + 1 > b? [] : a + (2 * Math.floor(Math.random() * (b - a + 1)))\n}\n\nconst generate = (a, b) => {\n  return genfrate(a, b)\n}\n\nmodule.exports = {\n  genfrateIntegers,\n  genfrateNumbers,\n  genfrateStrings,\n  genfrateArrays,\n  genfrateObjects,\n  genfrate\n}\n<|endoftext|>"}
