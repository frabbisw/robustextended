{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const sortedNums = sortNumbers(numbers)\n  const len = sortedNums.length\n  let i = 0\n  let j = 1\n  let hasClosest = false\n  while (i < len) {\n    if (j < len &&\n        Math.abs(sortedNums[i] - sortedNums[j]) < threshold) {\n      j += 1\n      hasClosest = true\n    } else {\n      i += 1\n    }\n  }\n  return hasClosest\n}\n\nmodule.exports = {\n  hasCloselEements\n}\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const open = /\\(/g\n  const closed = /\\)/g\n  const braces = /\\(|\\)/g\n  let result = [paren_string]\n  let tmp = paren_string\n  let len = 0\n  let next = 0\n\n  while (tmp!== undefined) {\n    next = tmp.indexOf('(')\n    if (next!== -1) {\n      len = next - 1\n      result.push(tmp.substring(0, len))\n      tmp = tmp.substring(len)\n      tmp = tmp.replace(braces, '')\n    }\n    next = tmp.indexOf(')')\n    if (next!== -1) {\n      len = next - 1\n      result.push(tmp.substring(0, len))\n      tmp = tmp.substring(len)\n      tmp = tmp.replace(braces, '')\n    }\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number > 1) {\n    const integerPart = Math.floor(number);\n    return number - integerPart;\n  } else {\n    return 0;\n  }\n};\n\nconst formatDate = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = d.getMonth() + 1;\n  const day = d.getDate();\n  const hour = d.getHours();\n  const minutes = d.getMinutes();\n  const seconds = d.getSeconds();\n  const year = year < 10? \"0\" + year : year;\n  const month = month < 10? \"0\" + month : month;\n  const day = day < 10? \"0\" + day : day;\n  const hour = hour < 10? \"0\" + hour : hour;\n  const minutes = minutes < 10? \"0\" + minutes : minutes;\n  const seconds = seconds < 10? \"0\" + seconds : seconds;\n  return `${year}-${month}-${day} ${hour}:${minutes}:${seconds}`;\n};\n\nconst getFormattedDate = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = d.getMonth() + 1;\n  const day = d.getDate();\n  const hour = d.getHours();\n  const minutes = d.getMinutes();\n  const seconds = d.getSeconds();\n  const year = year < 10? \"0\" + year : year;\n  const month = month < 10? \"0\" + month : month;\n  const day = day < 10? \"0\" + day : day;\n  const hour = hour < 10? \"0\" + hour : hour;\n  const minutes = minutes < 10? \"0\" + minutes : minutes;\n  const seconds = seconds < 10? \"0\" + seconds : seconds;\n  return `${year}/${month}/${day} ${hour}:${minutes}:${seconds}`;\n};\n\nconst getFormattedTime = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  const d = new Date(date);\n  const hour = d.getHours();\n  const minutes = d.getMinutes();\n  const seconds = d.getSeconds();\n  const hour = hour < 10? \"0\" + hour : hour;\n  const minutes = minutes < 10? \"0\" + minutes : minutes;\n  const seconds = seconds < 10? \"0\" + seconds : seconds;\n  return `${hour}:${minutes}:${seconds}`;\n};\n\nconst getFormattedDateTime = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = d.getMonth() + 1;\n  const day = d.getDate();\n  const hour = d.getHours();\n  const minutes = d.getMinutes();\n  const seconds = d.getSeconds();\n  const year = year < 10? \"0\" + year : year;\n  const month = month < 10? \"0\" + month : month;\n  const day = day < 10? \"0\" + day : day;\n  const hour = hour < 10? \"0\" + hour : hour;\n  const minutes = minutes < 10? \"0\" + minutes : minutes;\n  const seconds = seconds < 10? \"0\" + seconds : seconds;\n  return `${year}/${month}/${day} ${hour}:${minutes}:${seconds}`;\n};\n\nconst formatNumber = (number) => {\n  if (number === undefined || number === null) {\n    return \"\";\n  }\n\n  const decimalPart = truncateNubmer(number);\n  return number - decimalPart;\n};\n\nconst getFormattedNumber = (number) => {\n  if (number === undefined || number === null) {\n    return \"\";\n  }\n\n  const decimalPart = truncateNubmer(number);\n  return number - decimalPart;\n};\n\nconst getFormattedNumberWithDecimal = (number) => {\n  if (number === undefined || number === null) {\n    return \"\";\n  }\n\n  const decimalPart = truncateNubmer(number);\n  return number - decimalPart;\n};\n\nconst getFormattedNumberWithDecimalPlural = (number) => {\n  if (number === undefined || number === null) {\n    return \"\";\n  }\n\n  const decimalPart = truncateNubmer(number);\n  return number - decimalPart;\n};\n\nconst formatDateTime = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = d.getMonth() + 1;\n  const day = d.getDate();\n  const hour = d.getHours();\n  const minutes = d.getMinutes();\n  const seconds = d.getSeconds();\n  const year = year < 10? \"0\" + year : year;\n  const month = month < 10? \"0\" + month : month;\n  const day = day < 10? \"0\" + day : day;\n  const hour = hour < 10? \"0\" + hour : hour;\n  const minutes = minutes < 10? \"0\" + minutes : minutes;\n  const seconds = seconds < 10? \"0\" + seconds : seconds;\n  return `${year}/${month}/${day} ${hour}:${minutes}:${seconds}`;\n};\n\nconst getFormattedDateTime = (date) => {\n  if (!date) {\n    return \"\";\n  }\n\n  const d = new Date(date);\n  const year = d.getFullYear();\n  const month = d.getMonth() + 1;\n  const day = d.getDate();\n  const hour = d.getHours();\n  const minutes = d.get"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const result = operations.reduce((prev, curr) => {\n    if (curr < 0) {\n      return true\n    }\n    return prev || curr < 0\n  }, false)\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const sum = sum(numbers);\n  const mean = sum / numbers.length;\n  const deviations = numbers.map((x) => Math.abs(x - mean));\n  return Math.mean(deviations);\n};\n\n/**\n  * For a given list of input numbers, calculate Standard Deviation\n  around the mean of this dataset.\n  Standard Deviation is the square root of the variance:\n  SD = sqrt(variance)\n  >>> standardDeviation([1.0, 2.0, 3.0, 4.0])\n  1.732051\n  */\nconst standardDeviation = (numbers) => {\n  const mean = meanAbsoltueDeviation(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  const variance = variance(deviation, numbers.length);\n  return Math.sqrt(variance);\n};\n\n/**\n  * For a given list of input numbers, calculate Variance\n  around the mean of this dataset.\n  Variance is the sum of the squares of the deviations from the mean:\n  VAR = SUM(x^2 - x_mean^2)\n  >>> variance([1.0, 2.0, 3.0, 4.0])\n  2.5\n  */\nconst variance = (deviations, n) => {\n  const mean = meanAbsoltueDeviation(deviations);\n  return sum(deviations.map((x) => Math.pow(x - mean, 2))) / (n - 1);\n};\n\nconst getMean = (numbers) => {\n  return sum(numbers) / numbers.length;\n};\n\nconst getStdDeviation = (numbers) => {\n  const mean = getMean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return Math.sqrt(variance(deviation, numbers.length));\n};\n\nconst getVariance = (numbers) => {\n  const mean = getMean(numbers);\n  const deviation = (x) => Math.pow(x - mean, 2);\n  return variance(deviation, numbers.length);\n};\n\nconst main = () => {\n  const numbers = [1, 2, 3, 4];\n  const variance = getVariance(numbers);\n  const standardDeviation = getStdDeviation(numbers);\n  console.log('The variance is'+ variance);\n  console.log('The standard deviation is'+ standardDeviation);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  if (!numbers ||!numbers.length) {\n    return []\n  }\n  const out = []\n  let num = 0\n  let lastNum = 0\n  for (let i = 0; i < numbers.length; i++) {\n    if (i === 0) {\n      num = numbers[i]\n    } else if (num + delimeter === numbers[i]) {\n      out.push(num)\n      num = numbers[i]\n    } else {\n      out.push(num, num + delimeter, numbers[i])\n      num = numbers[i]\n    }\n    lastNum = num\n  }\n  if (num + delimeter!== lastNum) {\n    out.push(num, num + delimeter)\n  }\n  return out\n}\n\n/*\n  >>> interpserse([1, 2, 3],'')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '.')\n  [1.2, 2.3]\n  >>> interpserse([1, 2, 3], 'a')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '*')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '#')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '%')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], 'x')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '&')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '|')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '^')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '~')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '\\\\')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '?')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '!')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '@')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '+')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '=')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '<')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '>')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '-')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '_')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '$')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '+')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ',')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ';')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ':')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ';')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '{')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '}')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '[' )\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ']')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '(' )\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ']')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '}')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '}')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '}')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '}')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '}')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], '}')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], ')')"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  let paren_list = [];\n  for (let i = 0; i < paren_string.length; i++) {\n    let paren = paren_string[i];\n    if (paren === '(') {\n      paren_list.push(parseNetsedParens(paren_string.slice(i + 1)));\n    } else if (paren === ')') {\n      let index = paren_list.findIndex(item => item.length === paren_list.length - 1);\n      paren_list[index].push(paren);\n    }\n  }\n  return paren_list;\n};\n\nconst parseNetsedParens_test = parseNetsedParens('(()()) ((())) () ((())()())');\n\nconst isParenValid = (paren_list) => {\n  let sum = 0;\n  for (let i = 0; i < paren_list.length; i++) {\n    if (paren_list[i].length!== paren_list.length - 1) {\n      return false;\n    }\n    sum += paren_list[i].length;\n  }\n  return sum === paren_list.length;\n};\n\nconst isParenValid_test = isParenValid(parseNetsedParens_test);\n\nconsole.log(isParenValid_test);\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  const l = strings.length\n  const r = l - 1\n  const m = l - 1\n  const p = r\n\n  for (let i = 0; i < l; i++) {\n    const c = strings[i]\n    const cNext = strings[i + 1]\n    const cPrev = strings[i - 1]\n    const cPrevPrev = strings[i - 2]\n    const cNextNext = strings[i + 2]\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) < p) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) < p + 1) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) >= p + 1 && c.indexOf(substring) < p + 2) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) >= p + 1 && c.indexOf(substring) >= p + 2 && c.indexOf(substring) < p + 3) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) >= p + 1 && c.indexOf(substring) >= p + 2 && c.indexOf(substring) >= p + 3 && c.indexOf(substring) < p + 4) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) >= p + 1 && c.indexOf(substring) >= p + 2 && c.indexOf(substring) >= p + 3 && c.indexOf(substring) >= p + 4 && c.indexOf(substring) < p + 5) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) >= p + 1 && c.indexOf(substring) >= p + 2 && c.indexOf(substring) >= p + 3 && c.indexOf(substring) >= p + 4 && c.indexOf(substring) >= p + 5 && c.indexOf(substring) < p + 6) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) >= p + 1 && c.indexOf(substring) >= p + 2 && c.indexOf(substring) >= p + 3 && c.indexOf(substring) >= p + 4 && c.indexOf(substring) >= p + 5 && c.indexOf(substring) >= p + 6 && c.indexOf(substring) < p + 7) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n\n    if (c.indexOf(substring) > -1 && c.indexOf(substring) >= p && c.indexOf(substring) >= p + 1 && c.indexOf(substring) >= p + 2 && c.indexOf(substring) >= p + 3 && c.indexOf(substring) >= p + 4 && c.indexOf(substring) >= p + 5 && c.indexOf(substring) >= p + 6 && c.indexOf(substring) >= p + 7 && c.indexOf(substring) < p + 8) {\n      p = c.indexOf(substring)\n      m = i - 1\n    }\n  }\n\n  strings = strings.slice(m, p + 1)\n  strings.push(strings[0])\n  return strings\n}\n\nmodule.exports = filteBrySubstring\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  if (numbers.length === 0) {\n    return (0, 1)\n  }\n  const [ sum, product ] = [ 0, 1 ]\n  for (let i = 0; i < numbers.length; i++) {\n    const [ num, p ] = [ numbers[i], 1 ]\n    sum += num\n    product *= p\n  }\n  return [ sum, product ]\n}\n\nmodule.exports = sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = 0;\n  let arr = [];\n  let current = 0;\n  let i = 0;\n  while (i < numbers.length) {\n    arr[i] = numbers[i];\n    if (numbers[i] > max) {\n      max = numbers[i];\n    }\n    i++;\n    if (i >= max) {\n      if (i == numbers.length) {\n        arr[arr.length - 1] = max;\n      } else {\n        arr[i] = max;\n      }\n      current++;\n    }\n  }\n  return arr;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const result = string.split('').reverse().join('');\n  let prefix = '';\n  let suffix = '';\n  while (isPalindrome(result)) {\n    prefix = result.substr(0, result.length - 1);\n    suffix = result.substr(1, result.length - 1);\n    result = prefix + suffix;\n  }\n  return result;\n}\n\n/*\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  >>> makePalindrome('z')\n  'z'\n  >>> makePalindrome('c')\n  'c'\n  >>> makePalindrome('ab')\n  'ab'\n  >>> makePalindrome('a')\n  'a'\n  >>> makePalindrome('abc')\n  'abc'\n  >>> makePalindrome('aaa')\n  'aaa'\n  >>> makePalindrome('abcde')\n  'abcde'\n  >>> makePalindrome('abcdef')\n  'abcdef'\n  >>> makePalindrome('abcdefg')\n  'abcdefg'\n  >>> makePalindrome('abcdefgh')\n  'abcdefgh'\n  >>> makePalindrome('abcdefghi')\n  'abcdefghi'\n  >>> makePalindrome('abcdefghij')\n  'abcdefghij'\n  >>> makePalindrome('abcdefghijk')\n  'abcdefghijk'\n  >>> makePalindrome('abcdefghijkl')\n  'abcdefghijkl'\n  >>> makePalindrome('abcdefghijklm')\n  'abcdefghijklm'\n  >>> makePalindrome('abcdefghijklmn')\n  'abcdefghijklmn'\n  >>> makePalindrome('abcdefghijklmno')\n  'abcdefghijklmno'\n  >>> makePalindrome('abcdefghijklmnop')\n  'abcdefghijklmnop'\n  >>> makePalindrome('abcdefghijklmnopq')\n  'abcdefghijklmnopq'\n  >>> makePalindrome('abcdefghijklmnopqr')\n  'abcdefghijklmnopqr'\n  >>> makePalindrome('abcdefghijklmnopqrst')\n  'abcdefghijklmnopqrst'\n  >>> makePalindrome('abcdefghijklmnopqrstu')\n  'abcdefghijklmnopqrstu'\n  >>> makePalindrome('abcdefghijklmnopqrstuv')\n  'abcdefghijklmnopqrstuv'\n  >>> makePalindrome('abcdefghijklmnopqrstuvw')\n  'abcdefghijklmnopqrstuvw'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxy')\n  'abcdefghijklmnopqrstuvwxy'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyz')\n  'abcdefghijklmnopqrstuvwxyz'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabc')\n  'abcdefghijklmnopqrstuvwxyzabc'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdef')\n  'abcdefghijklmnopqrstuvwxyzabcdef'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefg')\n  'abcdefghijklmnopqrstuvwxyzabcdefg'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefgh')\n  'abcdefghijklmnopqrstuvwxyzabcdefgh'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghi')\n  'abcdefghijklmnopqrstuvwxyzabcdefghi'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghij')\n  'abcdefghijklmnopqrstuvwxyzabcdefghij'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghijk')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijk'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghijkl')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijkl'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghijklm')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklm'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghijklmn')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmn'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghijklmno')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmno'\n  >>> makePalindrome('abcdefghijklmnopqrstuvwxyzabcdefghijklmnop')\n  'abcdefghijklmnopqrstuvwxyzabcdefghijklmnop'\n  >>>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  let len = a.length\n  let result = []\n\n  for (let i = 0; i < len; i++) {\n    if (a[i] === '0' && b[i] === '1') {\n      result.push('0')\n    } else if (a[i] === '1' && b[i] === '0') {\n      result.push('1')\n    } else {\n      result.push('0')\n    }\n  }\n  return result.join('')\n}\n\n/*\n  Return a list of all permutations of a string.\n  >>> strPerms('ABCD')\n  [['A','B','C','D'], ['B','A','C','D'], ['C','A','B','D'], ['C','B','A','D'], ['D','A','B','C'], ['D','B','A','C'], ['D','C','A','B'], ['D','C','B','A']]\n  */\nconst strPerms = (str) => {\n  let len = str.length\n  let result = []\n\n  for (let i = 0; i < len; i++) {\n    if (str[i] === '0') {\n      continue\n    }\n    let sub = str.slice(0, i)\n    let subPerms = strPerms(sub)\n\n    for (let j = 0; j < subPerms.length; j++) {\n      let perm = subPerms[j]\n      perm.splice(i, 0, str[i])\n      result.push(perm)\n    }\n  }\n  return result\n}\n\n/*\n  Return a list of all permutations of a string of length k.\n  >>> kPerms(2, 'ABCD')\n  [['AB','AC','AD'], ['AC','AB','AD'], ['AD','AB','AC']]\n  */\nconst kPerms = (k, str) => {\n  let len = str.length\n  let result = []\n  if (len < k) {\n    return []\n  }\n  let subPerms = kPerms(k - 1, str.slice(1))\n  for (let i = 0; i < subPerms.length; i++) {\n    let perm = subPerms[i]\n    perm.push(str[0])\n    result.push(perm)\n  }\n  return result\n}\n\n/*\n  Returns a list of all permutations of a string of length n.\n  >>> nPerms(2, 'ABCD')\n  [['AB','AC','AD'], ['AC','AB','AD'], ['AD','AB','AC'], ['AB','AC','AD'], ['AC','AB','AD'], ['AD','AB','AC']]\n  */\nconst nPerms = (n, str) => {\n  let len = str.length\n  let result = []\n  if (len < n) {\n    return []\n  }\n  let subPerms = nPerms(n - 1, str.slice(1))\n  for (let i = 0; i < subPerms.length; i++) {\n    let perm = subPerms[i]\n    for (let j = 0; j < len; j++) {\n      perm.push(str[j])\n    }\n    result.push(perm)\n  }\n  return result\n}\n\n/*\n  Returns a list of all permutations of a string of length n.\n  >>> nPerms(2, 'ABCD')\n  [['AB','AC','AD'], ['AC','AB','AD'], ['AD','AB','AC'], ['AB','AC','AD'], ['AC','AB','AD'], ['AD','AB','AC']]\n  */\nconst permutations = (n, str) => {\n  let len = str.length\n  let result = []\n  if (len < n) {\n    return []\n  }\n  let subPerms = permutations(n - 1, str.slice(1))\n  for (let i = 0; i < subPerms.length; i++) {\n    let perm = subPerms[i]\n    for (let j = 0; j < len; j++) {\n      perm.push(str[j])\n    }\n    result.push(perm)\n  }\n  return result\n}\n\n/*\n  Returns the number of permutations of a string of length n.\n  >>> nPerms(2, 'ABCD')\n  6\n  */\nconst numberOfPermutations = (n, str) => {\n  let len = str.length\n  let result = 1\n  if (len < n) {\n    return result\n  }\n  let subPerms = permutations(n - 1, str.slice(1))\n  for (let i = 0; i < subPerms.length; i++) {\n    result *= subPerms[i].length\n  }\n  return result\n}\n\n/*\n  Returns the number of permutations of a string of length n.\n  >>> nPerms(2, 'ABCD')\n  6\n  */\nconst numberOfPermutations = (n, str) => {\n  let len = str.length\n  let result = 1\n  if (len < n) {\n    return result\n  }\n  let subPerms = permutations(n - 1, str.slice(1))\n  for (let i = 0; i < subPerms.length; i++) {\n    result *= subPerms[i].length\n  }\n  return result\n}\n\n/*\n  Returns the number of permutations of a string of length n.\n  >>> nPerms(2, 'ABCD')\n  6\n  */\nconst numberOfPermutations = (n, str) => {\n  let len = str.length\n  let result = 1\n  if (len < n) {\n    return result\n  }\n  let subPerms = permutations(n - 1, str.slice(1))\n  for (let i = 0; i < subPerms.length; i++) {\n    result *= subPerms[i].length\n  }\n  return result\n}\n\n/*\n  Returns the number of permutations of a string of"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (strings.length === 0) {\n    return null\n  }\n  const max = strings.reduce((a, b) => a.length > b.length? a : b, strings[0])\n  return max\n}\n\nexport default longest\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  while (b!== 0) {\n    const tmp = a;\n    a = b;\n    b = tmp % b;\n  }\n  return a;\n};\n\n/*\n  Return a greatest common divisor of two strings a and b\n  >>> rgeatestCommonDivisor('15', '25')\n  '5'\n  >>> rgeatestCommonDivisor('1', '1')\n  '1'\n  >>> rgeatestCommonDivisor('25', '15')\n  '5'\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  const n = a.length;\n  const m = b.length;\n  if (n === m) {\n    const s = [];\n    for (let i = 0; i < n; i++) {\n      s.push(rgeatestCommonDivisor(a[i], b[i]));\n    }\n    return s.join('');\n  } else {\n    return null;\n  }\n};\n\nmodule.exports = {\n  rgeatestCommonDivisor,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  if (!string) {\n    return [];\n  }\n  if (string.length === 0) {\n    return [string];\n  }\n  return allPrefixes(string.slice(1)).concat([string[0]]);\n};\n\nexport default {\n  allPrefixes,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  return Array(n + 1).join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 1 upto n inclusive.\n  >>> stringSequence(1)\n  '1'\n  >>> stringSequence(5)\n  '1 2 3 4 5'\n  */\nconst stringSequenceFrom1 = (n) => {\n  return Array(n + 1).join(' ');\n};\n\nconst stringSequenceLength = (s) => {\n  return s.length;\n};\n\n/* Return the number of consecutive repeating elements in the string.\n  >>> stringSequence(1)\n  1\n  >>> stringSequence(2)\n  2\n  >>> stringSequence(3)\n  1\n  >>> stringSequence(4)\n  1\n  >>> stringSequence(5)\n  1\n  >>> stringSequence(6)\n  1\n  >>> stringSequence(7)\n  1\n  >>> stringSequence(8)\n  1\n  >>> stringSequence(9)\n  2\n  */\nconst stringRepeatingElementCount = (s) => {\n  const repeatedElements = [];\n\n  for (let i = 0; i < s.length; i++) {\n    const element = s.charAt(i);\n    const position = repeatedElements.findIndex((elementToCheck) => elementToCheck === element);\n    if (position === -1) {\n      repeatedElements.push(element);\n    } else {\n      if (position > 0) {\n        const repeatedElementCount = repeatedElements.slice(0, position).length;\n        return repeatedElementCount;\n      }\n    }\n  }\n\n  return repeatedElements.length;\n};\n\n/* Return the number of consecutive repeating elements in the string, starting from the end of the string.\n  >>> stringSequence(1)\n  1\n  >>> stringSequence(2)\n  1\n  >>> stringSequence(3)\n  1\n  >>> stringSequence(4)\n  1\n  >>> stringSequence(5)\n  2\n  >>> stringSequence(6)\n  2\n  >>> stringSequence(7)\n  2\n  >>> stringSequence(8)\n  2\n  >>> stringSequence(9)\n  2\n  */\nconst stringRepeatingElementCountFromEnd = (s) => {\n  const repeatedElements = [];\n\n  for (let i = s.length - 1; i >= 0; i--) {\n    const element = s.charAt(i);\n    const position = repeatedElements.findIndex((elementToCheck) => elementToCheck === element);\n    if (position === -1) {\n      repeatedElements.push(element);\n    } else {\n      if (position > 0) {\n        const repeatedElementCount = repeatedElements.slice(0, position).length;\n        return repeatedElementCount;\n      }\n    }\n  }\n\n  return repeatedElements.length;\n};\n\n/* Return the number of consecutive repeating elements in the string, starting from the beginning of the string.\n  >>> stringSequence(1)\n  1\n  >>> stringSequence(2)\n  1\n  >>> stringSequence(3)\n  1\n  >>> stringSequence(4)\n  1\n  >>> stringSequence(5)\n  1\n  >>> stringSequence(6)\n  1\n  >>> stringSequence(7)\n  1\n  >>> stringSequence(8)\n  1\n  >>> stringSequence(9)\n  1\n  */\nconst stringRepeatingElementCountFromStart = (s) => {\n  const repeatedElements = [];\n\n  for (let i = 0; i < s.length; i++) {\n    const element = s.charAt(i);\n    const position = repeatedElements.findIndex((elementToCheck) => elementToCheck === element);\n    if (position === -1) {\n      repeatedElements.push(element);\n    } else {\n      if (position > 0) {\n        const repeatedElementCount = repeatedElements.slice(0, position).length;\n        return repeatedElementCount;\n      }\n    }\n  }\n\n  return repeatedElements.length;\n};\n\n/* Return a string containing the elements of the string, starting from the beginning of the string.\n  >>> stringSequence(1)\n  1\n  >>> stringSequence(2)\n  2\n  >>> stringSequence(3)\n  3\n  >>> stringSequence(4)\n  4\n  >>> stringSequence(5)\n  5\n  >>> stringSequence(6)\n  6\n  >>> stringSequence(7)\n  7\n  >>> stringSequence(8)\n  8\n  >>> stringSequence(9)\n  9\n  */\nconst stringStartingWith = (s) => {\n  return s.slice(0);\n};\n\n/* Return a string containing the elements of the string, starting from the end of the string.\n  >>> stringSequence(1)\n  1\n  >>> stringSequence(2)\n  2\n  >>> stringSequence(3)\n  3\n  >>> stringSequence(4)\n  4\n  >>> stringSequence(5)\n  5\n  >>> stringSequence(6)\n  6\n  >>> stringSequence(7)\n  7\n  >>> stringSequence(8)\n  8\n  >>> stringSequence(9)\n  9\n  */\nconst stringStartingWithFromEnd = (s) => {\n  return s.slice(s.length - 1, s.length);\n};\n\n/* Return a string containing the elements of the string, starting from the beginning of the string.\n  >>> stringSequence(1)\n  1\n  >>> stringSequence(2)\n  2\n  >>> stringSequence(3)\n  3\n  >>> stringSequence(4)\n  4\n  >>> stringSequence(5)\n  5\n  >>> stringSequence(6)\n  6\n  >>> stringSequence(7)\n  7\n  >>> stringSequence(8)\n  8\n  >>> stringSequence(9)\n  9\n  */\nconst stringStartingWithFromStart = (s) => {\n  return s.slice(0, s.length - 1);\n};\n\n/* Return a string"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const chars = new Set(string.split(''));\n  return chars.size;\n};\n\n// TEST CODE\n/*\n  This code tests the function countDistinctCharacters.\n\n  To run the tests, run the test command:\n\n    node./test/countDistinctCharacters.js\n\n  If you want to run the tests from the command line, you can also run the\n  tests from the command line:\n\n    node./test/countDistinctCharacters.js\n*/\n\ndescribe('countDistinctCharacters', () => {\n  it('should return 3 for \"xyzXYZ\"', () => {\n    assert.equal(countDistinctCharacters('xyzXYZ'), 3);\n  });\n\n  it('should return 4 for \"Jerry\"', () => {\n    assert.equal(countDistinctCharacters('Jerry'), 4);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let music = []\n\n  music.push(parse(music_string))\n\n  return music\n}\n\n/* Input to this function is a string representing a beat and musical note in a special ASCII format.\n  Your task is to parse this string and return integer corresponding to how many beats does each\n  beat last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseBeat('.|.|o|o|o')\n  4\n  */\nconst parseBeat = (beat_string) => {\n  let beat = []\n\n  beat.push(parse(beat_string))\n\n  return beat\n}\n\n/* Input to this function is a string representing a beat and musical note in a special ASCII format.\n  Your task is to parse this string and return a list of integer corresponding to how many beats does\n  each beat last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseBeats('.|.|o|o|o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseBeats = (beats_string) => {\n  let beats = []\n\n  beats.push(parse(beats_string))\n\n  return beats\n}\n\nconst parse = (music_string) => {\n  let beat_duration = parseBeat(music_string)\n\n  if (beat_duration.length === 0) {\n    return 0\n  }\n\n  let beats = parseBeats(music_string)\n\n  let beat_durations = beats.map(beat => beat.length)\n\n  let total_duration = beat_durations.reduce((prev, current) => prev + current)\n\n  return total_duration\n}\n\n// test\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'))\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0\n  const start = 0\n  let end = 0\n\n  while (end < string.length) {\n    const substr = string.slice(end, end + substring.length)\n    if (substr === substring) {\n      count++\n      end += substr.length\n    } else {\n      end++\n    }\n  }\n\n  return count\n}\n\n/*\n  # Time Complexity : O(N)\n  # Space Complexity : O(1)\n  # Accepted Test Sets:\n  # Time:  TLE\n  # Space: O(1)\n  # Input: \"abababcabcabcabc\"\n  # Output: \"abababcabcabcabc\"\n  # Input: \"aaaaaaa\"\n  # Output: \"aaaaaaa\"\n  # Input: \"aaa\"\n  # Output: \"aaa\"\n  # Input: \"a\"\n  # Output: \"a\"\n  # Input: \"a\"\n  # Output: \"a\"\n  # Input: \"\"\n  # Output: \"\"\n  # Input: \"aab\"\n  # Output: \"aab\"\n  # Input: \"aaba\"\n  # Output: \"aaba\"\n  # Input: \"aba\"\n  # Output: \"aba\"\n  # Input: \"aa\"\n  # Output: \"aa\"\n  # Input: \"a\"\n  # Output: \"a\"\n  # Input: \"aa\"\n  # Output: \"aa\"\n  # Input: \"ab\"\n  # Output: \"ab\"\n  # Input: \"b\"\n  # Output: \"b\"\n  # Input: \"a\"\n  # Output: \"a\"\n  # Input: \"ab\"\n  # Output: \"ab\"\n  # Input: \"b\"\n  # Output: \"b\"\n  # Input: \"abb\"\n  # Output: \"abb\"\n  # Input: \"bab\"\n  # Output: \"bab\"\n  # Input: \"bb\"\n  # Output: \"bb\"\n  # Input: \"a\"\n  # Output: \"a\"\n  # Input: \"aaa\"\n  # Output: \"aaa\"\n  # Input: \"aaaa\"\n  # Output: \"aaaa\"\n  # Input: \"aaaaa\"\n  # Output: \"aaaaa\"\n  # Input: \"aaaaaa\"\n  # Output: \"aaaaaa\"\n  # Input: \"aaaaaaa\"\n  # Output: \"aaaaaaa\"\n  # Input: \"aaaaaaaa\"\n  # Output: \"aaaaaaaa\"\n  # Input: \"aaaaaaaaa\"\n  # Output: \"aaaaaaaaa\"\n  # Input: \"aaaaaaaaaa\"\n  # Output: \"aaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Input: \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n  # Output: \"aaaaaaaaaaaaaaaaaaaaaaaa"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let array = numbers.split(\" \").map(Number);\n  let sorted = array.sort((a, b) => a - b);\n  return sorted.join(\"\");\n};\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbers('nine two five')\n  'five two nine'\n  */\nconst sortNumbersDescending = (numbers) => {\n  let array = numbers.split(\" \").map(Number);\n  let sorted = array.sort((a, b) => b - a);\n  return sorted.join(\"\");\n};\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortNumbersDescending('three one five')\n  'five two nine'\n  */\nconst sortWords = (numbers) => {\n  let array = numbers.split(\" \").map(Number);\n  let sorted = array.sort((a, b) => b - a);\n  return sorted.join(\"\");\n};\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortWords('three one five')\n  'five two nine'\n  */\nconst sortWordsDescending = (numbers) => {\n  let array = numbers.split(\" \").map(Number);\n  let sorted = array.sort((a, b) => a - b);\n  return sorted.join(\"\");\n};\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortWords('one two three')\n  'one two three'\n  */\nconst sortWordsDescendingLength = (numbers) => {\n  let array = numbers.split(\" \").map(Number);\n  let sorted = array.sort((a, b) => b - a);\n  return sorted.join(\"\");\n};\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from largest to smallest\n  >>> sortWordsDescendingLength('three one five')\n  'five two nine'\n  */\nconst sortWordsLength = (numbers) => {\n  let array = numbers.split(\" \").map(Number);\n  let sorted = array.sort((a, b) => a - b);\n  return sorted.join(\"\");\n};\n\n/*\n  Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortWordsLengthDescending('one two three')\n  'one two three'\n  */\nconst sortWordsLengthDescending = (numbers) => {\n  let array = numbers.split(\" \").map(Number);\n  let sorted = array.sort((a, b) => b - a);\n  return sorted.join(\"\");\n};\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const sortedNumbers = [...numbers].sort();\n  const min = sortedNumbers[0];\n  const max = sortedNumbers[sortedNumbers.length - 1];\n  const result = [Math.abs(min - max), min, max];\n  return result;\n};\n\nmodule.exports = findClosestElements;\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const min = Math.min(...numbers)\n  const max = Math.max(...numbers)\n  const step = (max - min) / (numbers.length - 1)\n  return [min,...numbers.map(n => min + step * n)]\n}\n\n/**\n  Given list of numbers, take the square root of each\n  >>> squareRoot([1, 2, 3, 4, 5])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst squareRoot = (numbers) => {\n  return numbers.map(n => Math.sqrt(n))\n}\n\n/**\n  Given list of numbers, take the exponential of each\n  >>> exponential([1, 2, 3, 4, 5])\n  [1.0, 2.0, 3.0, 4.0, 5.0]\n  */\nconst exponential = (numbers) => {\n  return numbers.map(n => Math.exp(n))\n}\n\n/**\n  Given list of numbers, take the log of each\n  >>> log([1, 2, 3, 4, 5])\n  [0.0, 1.0, 2.0, 3.0, 4.0]\n  */\nconst log = (numbers) => {\n  return numbers.map(n => Math.log(n))\n}\n\n/**\n  Given list of numbers, take the log base ten of each\n  >>> logBaseTen([1, 2, 3, 4, 5])\n  [0.0, 0.1, 0.2, 0.3, 0.4]\n  */\nconst logBaseTen = (numbers) => {\n  return numbers.map(n => Math.log(n) / Math.LN10)\n}\n\n/**\n  Given list of numbers, take the exponential of each, with a base of ten\n  >>> exponentialBaseTen([1, 2, 3, 4, 5])\n  [0.1, 0.2, 0.3, 0.4, 0.5]\n  */\nconst exponentialBaseTen = (numbers) => {\n  return numbers.map(n => Math.pow(10, n))\n}\n\n/**\n  Given list of numbers, take the square root of each, with a base of ten\n  >>> squareRootBaseTen([1, 2, 3, 4, 5])\n  [0.1, 0.2, 0.3, 0.4, 0.5]\n  */\nconst squareRootBaseTen = (numbers) => {\n  return numbers.map(n => Math.pow(10, Math.sqrt(n)))\n}\n\n/**\n  Given list of numbers, take the log of each, with a base of ten\n  >>> logBaseTen([1, 2, 3, 4, 5])\n  [0.0, 1.0, 2.0, 3.0, 4.0]\n  */\nconst logBaseTen = (numbers) => {\n  return numbers.map(n => Math.log(n) / Math.LN10)\n}\n\n/**\n  Given list of numbers, take the square root of each, with a base of ten\n  >>> squareRootBaseTen([1, 2, 3, 4, 5])\n  [0.1, 0.2, 0.3, 0.4, 0.5]\n  */\nconst squareRootBaseTen = (numbers) => {\n  return numbers.map(n => Math.pow(10, Math.sqrt(n)))\n}\n\n/**\n  Given list of numbers, take the exponential of each, with a base of ten\n  >>> exponentialBaseTen([1, 2, 3, 4, 5])\n  [0.1, 0.2, 0.3, 0.4, 0.5]\n  */\nconst exponentialBaseTen = (numbers) => {\n  return numbers.map(n => Math.pow(10, n))\n}\n\nmodule.exports = {\n  rescaleTonUit,\n  squareRoot,\n  exponential,\n  log,\n  logBaseTen,\n  squareRootBaseTen,\n  exponentialBaseTen\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'number' || typeof val ==='string' || typeof val === 'boolean' || typeof val === 'object' || Array.isArray(val);\n  });\n};\n\n// Filter given list of any python values only for lists\nconst filetrItnegersList = (values) => {\n  return values.filter((val) => {\n    return Array.isArray(val);\n  });\n};\n\n// Filter given list of any python values only for dicts\nconst filetrItnegersDict = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'object' || Array.isArray(val);\n  });\n};\n\n// Filter given list of any python values only for objects\nconst filetrItnegersObj = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'object';\n  });\n};\n\n// Filter given list of any python values only for numbers\nconst filetrItnegersNum = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'number' || typeof val ==='string' || typeof val === 'boolean';\n  });\n};\n\n// Filter given list of any python values only for strings\nconst filetrItnegersStr = (values) => {\n  return values.filter((val) => {\n    return typeof val ==='string' || typeof val === 'boolean';\n  });\n};\n\n// Filter given list of any python values only for booleans\nconst filetrItnegersBool = (values) => {\n  return values.filter((val) => {\n    return typeof val === 'boolean';\n  });\n};\n\nmodule.exports = {\n  filetrItnegers,\n  filetrItnegersList,\n  filetrItnegersDict,\n  filetrItnegersObj,\n  filetrItnegersNum,\n  filetrItnegersStr,\n  filetrItnegersBool,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  let count = 0\n  for (let i = 0; i < string.length; i++) {\n    count += string.charCodeAt(i) >= 0xD800 && string.charCodeAt(i) <= 0xDBFF? 1 : 0\n  }\n  return count\n}\n\n/**\n  * Converts given string to lower case\n  * @param {string} string\n  * @return {string}\n  * @example\n  *\n  * >>> tolower('ABC')\n  * 'abc'\n  */\nconst tolower = (string) => {\n  return string.toLowerCase()\n}\n\n/**\n  * Converts given string to upper case\n  * @param {string} string\n  * @return {string}\n  * @example\n  *\n  * >>> toupper('abc')\n  * 'ABC'\n  */\nconst toupper = (string) => {\n  return string.toUpperCase()\n}\n\n/**\n  * Checks if a string is a lower case string\n  * @param {string} string\n  * @return {boolean}\n  * @example\n  *\n  * >>> islower('abc')\n  * true\n  * >>> islower('A')\n  * true\n  * >>> islower('1')\n  * false\n  */\nconst islower = (string) => {\n  return string.toLowerCase() === string\n}\n\n/**\n  * Checks if a string is an upper case string\n  * @param {string} string\n  * @return {boolean}\n  * @example\n  *\n  * >>> isupper('abc')\n  * false\n  * >>> isupper('A')\n  * false\n  * >>> isupper('1')\n  * true\n  */\nconst isupper = (string) => {\n  return string.toUpperCase() === string\n}\n\n/**\n  * Returns the substring of a given string from start to end index\n  * @param {string} string\n  * @param {number} start\n  * @param {number} [end]\n  * @return {string}\n  * @example\n  *\n  * >>> substr('abcdefg', 1)\n  * 'bcdefg'\n  * >>> substr('abcdefg', 1, 2)\n  * 'bc'\n  * >>> substr('abcdefg', 1, 3)\n  * 'bcdef'\n  */\nconst substr = (string, start, end = string.length) => {\n  return string.substr(start, end)\n}\n\n/**\n  * Returns the index of a given string in a string\n  * @param {string} string\n  * @param {string} value\n  * @return {number}\n  * @example\n  *\n  * >>> indexof('abcdefg', 'c')\n  * 2\n  */\nconst indexof = (string, value) => {\n  let index = string.indexOf(value)\n  return index < 0? string.length : index\n}\n\n/**\n  * Returns the index of a given string in a string\n  * @param {string} string\n  * @param {string} value\n  * @return {number}\n  * @example\n  *\n  * >>> lastindexof('abcdefg', 'c')\n  * 6\n  */\nconst lastindexof = (string, value) => {\n  let index = string.lastIndexOf(value)\n  return index < 0? string.length : index\n}\n\n/**\n  * Returns the number of occurrences of a given string in a string\n  * @param {string} string\n  * @param {string} value\n  * @return {number}\n  * @example\n  *\n  * >>> count('abcdefg', 'c')\n  * 3\n  */\nconst count = (string, value) => {\n  return string.split(value).length - 1\n}\n\n/**\n  * Replaces occurrences of a given string in a string with a new string\n  * @param {string} string\n  * @param {string} value\n  * @param {string} replacement\n  * @return {string}\n  * @example\n  *\n  * >>> replace('abcdefg', 'c', 'x')\n  * 'abxdefg'\n  */\nconst replace = (string, value, replacement) => {\n  let index = 0\n  let valueLength = value.length\n  let replacementLength = replacement.length\n  let indexOfValue = index\n  let indexOfReplacement = 0\n  let currentChar = string.charAt(index)\n  let nextChar = string.charAt(index + 1)\n\n  while (currentChar) {\n    if (currentChar === value) {\n      string = string.substring(0, indexOfValue) + replacement + string.substring(indexOfValue + valueLength)\n      indexOfValue = index\n      indexOfReplacement += replacementLength\n      if (nextChar) {\n        currentChar = string.charAt(++index)\n        nextChar = string.charAt(index + 1)\n      } else {\n        break\n      }\n    } else {\n      index++\n      currentChar = string.charAt(index)\n    }\n  }\n  return string\n}\n\n/**\n  * Replaces occurrences of a given string in a string with a new string\n  * @param {string} string\n  * @param {string} value\n  * @param {string} replacement\n  * @return {string}\n  * @example\n  *\n  * >>> replace('abcdefg', 'c', 'x')\n  * 'abxdefg'\n  */\nconst replaceall = (string, value, replacement) => {\n  let index = 0\n  let valueLength = value.length\n  let replacementLength = replacement.length\n  let indexOfValue = 0\n  let indexOfReplacement = 0\n  let currentChar = string.charAt(index)\n  let nextChar = string.charAt(index + 1)\n\n  while (currentChar) {\n    if (currentChar === value) {\n      string = string.substring(0, indexOfValue) + replacement + string.substring(indexOfValue + valueLength)\n      indexOfValue = index\n      indexOfReplacement += replacementLength\n      if (nextChar) {\n        currentChar = string.charAt(++index)\n        nextChar = string."}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n    let candidate = 2;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            return candidate;\n        }\n        candidate += 1;\n    }\n    return n;\n};\n\n// This one is a little more complicated:\n//  - It uses the same algorithm, but it's called twice, and it doesn't know about that\n//  - It has a side effect, so we can't make it a function\nconst largestDivisor2 = (n) => {\n    let candidate = 2;\n    let largestDivisor = 2;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        candidate += 1;\n    }\n    return largestDivisor;\n};\n\n// This one is the simplest:\n//  - It uses the same algorithm, but it doesn't have a side effect\nconst largestDivisor3 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        candidate += 1;\n    }\n    return largestDivisor;\n};\n\n// This one is a bit more complicated:\n//  - It uses a loop, which is awkward and bad\n//  - It uses a recursive call, which is even worse\nconst largestDivisor4 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        if (n % largestDivisor === 0) {\n            return largestDivisor;\n        }\n        candidate += 1;\n    }\n    return largestDivisor;\n};\n\n// This one uses a while loop, but it's much more concise and not bad\nconst largestDivisor5 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        candidate += 1;\n    }\n    return largestDivisor;\n};\n\n// This one is a bit more complicated:\n//  - It uses a loop, which is awkward and bad\n//  - It uses a recursive call, which is even worse\nconst largestDivisor6 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        if (n % largestDivisor === 0) {\n            return largestDivisor;\n        }\n        candidate += 1;\n    }\n    return largestDivisor;\n};\n\n// This one is a bit more complicated:\n//  - It uses a loop, which is awkward and bad\n//  - It uses a recursive call, which is even worse\nconst largestDivisor7 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        if (n % largestDivisor === 0) {\n            return largestDivisor;\n        }\n        candidate += largestDivisor;\n    }\n    return largestDivisor;\n};\n\n// This one uses a while loop, but it's much more concise and not bad\nconst largestDivisor8 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        candidate += largestDivisor;\n    }\n    return largestDivisor;\n};\n\n// This one is a bit more complicated:\n//  - It uses a loop, which is awkward and bad\n//  - It uses a recursive call, which is even worse\nconst largestDivisor9 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        if (n % largestDivisor === 0) {\n            return largestDivisor;\n        }\n        candidate += largestDivisor;\n    }\n    return largestDivisor;\n};\n\n// This one is a bit more complicated:\n//  - It uses a loop, which is awkward and bad\n//  - It uses a recursive call, which is even worse\nconst largestDivisor10 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        if (n % largestDivisor === 0) {\n            return largestDivisor;\n        }\n        candidate += largestDivisor;\n    }\n    return largestDivisor;\n};\n\n// This one is a bit more complicated:\n//  - It uses a loop, which is awkward and bad\n//  - It uses a recursive call, which is even worse\nconst largestDivisor11 = (n) => {\n    let largestDivisor = 2;\n    let candidate = largestDivisor;\n    while (candidate <= n) {\n        if (n % candidate === 0) {\n            largestDivisor = Math.max(largestDivisor, candidate);\n        }\n        if (n % largestDivisor === 0) {\n            return largestDivisor"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  let result = [];\n  const d = n;\n  let i = 2;\n  while (i <= d) {\n    while (d % i === 0) {\n      result.push(i);\n      d /= i;\n    }\n    i += 1;\n  }\n  if (d!== 1) {\n    result.push(d);\n  }\n  return result;\n};\n\n/* Return the sum of all prime numbers between two integers\n  >>> sum(1, 3)\n  6\n  >>> sum(1, 6)\n  15\n  >>> sum(2, 3)\n  6\n  */\nconst sum = (start, end) => {\n  let result = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/* Return the sum of all primes between two integers\n  >>> sumPrime(1, 3)\n  6\n  >>> sumPrime(1, 6)\n  15\n  >>> sumPrime(2, 3)\n  6\n  */\nconst sumPrime = (start, end) => {\n  let result = 0;\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      result += i;\n    }\n  }\n  return result;\n};\n\n/* Return the number of divisors of given integer\n  >>> divisors(5)\n  5\n  >>> divisors(15)\n  8\n  >>> divisors(6)\n  2\n  >>> divisors(21)\n  7\n  */\nconst divisors = (n) => {\n  const factors = factorize(n);\n  let result = 1;\n  for (let i = 0; i < factors.length; i++) {\n    result *= factors[i];\n  }\n  return result;\n};\n\n/* Return the number of divisors of the sum of all prime numbers\n  >>> sumPrime(1, 3)\n  6\n  >>> sumPrime(1, 6)\n  15\n  >>> sumPrime(2, 3)\n  6\n  */\nconst sumPrimeDivisors = (start, end) => {\n  let result = 0;\n  for (let i = start; i <= end; i++) {\n    result += divisors(i);\n  }\n  return result;\n};\n\n/* Return the number of divisors of the sum of all primes\n  >>> sumPrime(1, 3)\n  6\n  >>> sumPrime(1, 6)\n  15\n  >>> sumPrime(2, 3)\n  6\n  */\nconst sumPrimeDivisorsPrime = (start, end) => {\n  let result = 0;\n  for (let i = start; i <= end; i++) {\n    result += divisorsPrime(i);\n  }\n  return result;\n};\n\nmodule.exports = {\n  sum,\n  sumPrime,\n  sumPrimeDivisors,\n  sumPrimeDivisorsPrime,\n  factorize,\n  divisors,\n  isPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const output = [];\n  let prev = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i]!== numbers[prev]) {\n      output.push(numbers[i]);\n      prev = i;\n    }\n  }\n  return output;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.replace(/\\w\\S*/g, (match) => {\n    return match.toUpperCase();\n  });\n};\n\n/*\n  Given a string, add a prefix, suffix, and/or an initial capital letter.\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGoodmorning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGoodMorning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  */\nconst addCase = (string, prefix, suffix, initial) => {\n  return prefix + flipCase(string) + suffix;\n};\n\n/*\n  Given a string, add a prefix, suffix, and/or an initial capital letter.\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGoodMorning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGoodMorning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  */\nconst addCaseWithPrefix = (prefix, string, suffix, initial) => {\n  return prefix + flipCase(string) + suffix;\n};\n\n/*\n  Given a string, add a prefix, suffix, and/or an initial capital letter.\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGoodMorning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  */\nconst addCaseWithPrefixAndSuffix = (prefix, suffix, string, initial) => {\n  return prefix + flipCase(string) + suffix;\n};\n\n/*\n  Given a string, add a prefix, suffix, and/or an initial capital letter.\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGoodMorning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  */\nconst addCaseWithPrefixAndSuffixAndInitial = (prefix, suffix, initial, string) => {\n  return prefix + flipCase(string) + suffix;\n};\n\n/*\n  Given a string, add a prefix, suffix, and/or an initial capital letter.\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGoodMorning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  >>> addCase('Hello', 'Good','morning')\n  'HelloGood Morning'\n  */\nconst addCaseWithPrefixAndSuffixAndInitial = (prefix, suffix, initial, string) => {\n  return prefix + flipCase(string) + suffix;\n};\n\nmodule.exports = {\n  addCase,\n  addCaseWithPrefix,\n  addCaseWithPrefixAndSuffix,\n  addCaseWithPrefixAndSuffixAndInitial,\n  flipCase,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  let concat = '';\n  for (let string of strings) {\n    concat += string;\n  }\n  return concat;\n};\n\n/*\n  Convert a number to a string of decimal digits.\n  >>> numberToString(0)\n  '0'\n  >>> numberToString(10)\n  '10'\n  >>> numberToString(42)\n  '42'\n  >>> numberToString(1000)\n  '1000'\n  >>> numberToString(42.56)\n  '42.56'\n  >>> numberToString(42.56, 2)\n  '42.56'\n  >>> numberToString(42.56, 2, '.')\n  '42.56'\n  >>> numberToString(42.56, 3)\n  '42.560'\n  >>> numberToString(42.56, 3, '.')\n  '42.560'\n  >>> numberToString(42.56, 3, ',')\n  '42,560'\n  >>> numberToString(42.56, 3, ',', '.')\n  '42,560.00'\n  */\nconst numberToString = (number, decimals, seperator, decimalPoint = '.') => {\n  let formatted = number.toFixed(decimals);\n  if (seperator === '.') {\n    formatted = formatted.replace('.', decimalPoint);\n  } else if (seperator === ',') {\n    formatted = formatted.replace(',', '.');\n  }\n  return formatted;\n};\n\n/*\n  Convert a number to a string of hexadecimal digits.\n  >>> numberToHex(0)\n  '0x0'\n  >>> numberToHex(10)\n  '0xa'\n  >>> numberToHex(42)\n  '0x2a'\n  >>> numberToHex(42.56)\n  '0x2a'\n  >>> numberToHex(42.56, 2)\n  '0x2a'\n  >>> numberToHex(42.56, 2, '.')\n  '0x2a'\n  >>> numberToHex(42.56, 3)\n  '0x2a0'\n  >>> numberToHex(42.56, 3, '.')\n  '0x2a0'\n  >>> numberToHex(42.56, 3, ',')\n  '0x2a,0'\n  >>> numberToHex(42.56, 3, ',', '.')\n  '0x2a,0'\n  >>> numberToHex(42.56, 3, ',', '.')\n  '0x2a,0'\n  */\nconst numberToHex = (number, decimals, seperator, decimalPoint = '.') => {\n  let formatted = number.toString(16).toUpperCase();\n  if (seperator === '.') {\n    formatted = formatted.replace('.', decimalPoint);\n  } else if (seperator === ',') {\n    formatted = formatted.replace(',', '.');\n  }\n  return formatted;\n};\n\n/*\n  Convert a number to a string of hexadecimal digits.\n  >>> numberToHex(0)\n  '0x0'\n  >>> numberToHex(10)\n  '0xa'\n  >>> numberToHex(42)\n  '0x2a'\n  >>> numberToHex(42.56)\n  '0x2a'\n  >>> numberToHex(42.56, 2)\n  '0x2a'\n  >>> numberToHex(42.56, 2, '.')\n  '0x2a'\n  >>> numberToHex(42.56, 3)\n  '0x2a0'\n  >>> numberToHex(42.56, 3, '.')\n  '0x2a0'\n  >>> numberToHex(42.56, 3, ',')\n  '0x2a,0'\n  >>> numberToHex(42.56, 3, ',', '.')\n  '0x2a,0'\n  >>> numberToHex(42.56, 3, ',', '.')\n  '0x2a,0'\n  */\nconst numberToHex = (number, decimals, seperator, decimalPoint = '.') => {\n  let formatted = number.toString(16).toUpperCase();\n  if (seperator === '.') {\n    formatted = formatted.replace('.', decimalPoint);\n  } else if (seperator === ',') {\n    formatted = formatted.replace(',', '.');\n  }\n  return formatted;\n};\n\nmodule.exports = {\n  conactenate,\n  numberToString,\n  numberToHex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n    return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> iflterByrPefix([], 'z')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'z')\n  []\n  */\nconst iflterByrPefixNot = (strings, prefix) => {\n    return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that end with a given suffix.\n  >>> iflterByrSuffix([], 'e')\n  []\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'e')\n  ['bcd', 'cde']\n  */\nconst iflterByrSuffix = (strings, suffix) => {\n    return strings.filter(s => s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not end with a given suffix.\n  >>> iflterByrSuffix([], 'y')\n  []\n  >>> iflterByrSuffix(['abc', 'bcd', 'cde', 'array'], 'y')\n  []\n  */\nconst iflterByrSuffixNot = (strings, suffix) => {\n    return strings.filter(s =>!s.endsWith(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given word.\n  >>> iflterByrContains([], 'c')\n  []\n  >>> iflterByrContains(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrContains = (strings, word) => {\n    return strings.filter(s => s.includes(word));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given word.\n  >>> iflterByrContains([], 'a')\n  []\n  >>> iflterByrContains(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst iflterByrContainsNot = (strings, word) => {\n    return strings.filter(s =>!s.includes(word));\n};\n\n/* Filter an input list of strings only for ones that contain a given word with a given prefix.\n  >>> iflterByrContainsPrefix([], 'ab')\n  []\n  >>> iflterByrContainsPrefix(['abc', 'bcd', 'cde', 'array'], 'ab')\n  []\n  >>> iflterByrContainsPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrContainsPrefix = (strings, prefix) => {\n    return strings.filter(s => s.includes(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given word with a given prefix.\n  >>> iflterByrContainsPrefix([], 'ab')\n  []\n  >>> iflterByrContainsPrefix(['abc', 'bcd', 'cde', 'array'], 'ab')\n  []\n  >>> iflterByrContainsPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  []\n  */\nconst iflterByrContainsPrefixNot = (strings, prefix) => {\n    return strings.filter(s =>!s.includes(prefix));\n};\n\n/* Filter an input list of strings only for ones that contain a given word with a given suffix.\n  >>> iflterByrContainsSuffix([], 'ab')\n  []\n  >>> iflterByrContainsSuffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n  []\n  >>> iflterByrContainsSuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrContainsSuffix = (strings, suffix) => {\n    return strings.filter(s => s.includes(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given word with a given suffix.\n  >>> iflterByrContainsSuffix([], 'ab')\n  []\n  >>> iflterByrContainsSuffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n  []\n  >>> iflterByrContainsSuffix(['abc', 'bcd', 'cde', 'array'], 'b')\n  []\n  */\nconst iflterByrContainsSuffixNot = (strings, suffix) => {\n    return strings.filter(s =>!s.includes(suffix));\n};\n\n/* Filter an input list of strings only for ones that contain a given word with a given prefix and suffix.\n  >>> iflterByrContainsPrefixSuffix([], 'ab')\n  []\n  >>> iflterByrContainsPrefixSuffix(['abc', 'bcd', 'cde', 'array'], 'ab')\n  []\n  >>> iflterByrContainsPrefixSuffix(['abc', 'bcd', 'cde', 'array'], 'abc')\n  ['abc', 'array']\n  */\nconst iflterByrContainsPrefixSuffix = (strings, prefix, suffix) => {\n    return strings.filter(s => s.includes(prefix) && s.includes(suffix));\n};\n\n/* Filter an input list of strings only for ones that do not contain a given word with a given prefix and suffix.\n  "}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  const sorted = l.sort((a, b) => b - a);\n  const firstPositive = sorted.findIndex((el) => el > 0);\n  if (firstPositive == -1) {\n    return [];\n  }\n  return sorted.slice(firstPositive);\n};\n\nmodule.exports = getPositive;\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n === 1) {\n    return false;\n  }\n  if (n === 2) {\n    return true;\n  }\n  if (n === 3) {\n    return true;\n  }\n  if (n === 4) {\n    return false;\n  }\n  if (n % 2 === 0) {\n    return false;\n  }\n  if (n % 3 === 0) {\n    return false;\n  }\n  if (n % 5 === 0) {\n    return false;\n  }\n  if (n % 7 === 0) {\n    return false;\n  }\n  if (n % 11 === 0) {\n    return false;\n  }\n  if (n % 13 === 0) {\n    return false;\n  }\n  if (n % 17 === 0) {\n    return false;\n  }\n  if (n % 19 === 0) {\n    return false;\n  }\n  if (n % 23 === 0) {\n    return false;\n  }\n  if (n % 29 === 0) {\n    return false;\n  }\n  if (n % 31 === 0) {\n    return false;\n  }\n  if (n % 37 === 0) {\n    return false;\n  }\n  if (n % 41 === 0) {\n    return false;\n  }\n  if (n % 43 === 0) {\n    return false;\n  }\n  if (n % 47 === 0) {\n    return false;\n  }\n  if (n % 53 === 0) {\n    return false;\n  }\n  if (n % 59 === 0) {\n    return false;\n  }\n  if (n % 61 === 0) {\n    return false;\n  }\n  if (n % 67 === 0) {\n    return false;\n  }\n  if (n % 71 === 0) {\n    return false;\n  }\n  if (n % 73 === 0) {\n    return false;\n  }\n  if (n % 79 === 0) {\n    return false;\n  }\n  if (n % 83 === 0) {\n    return false;\n  }\n  if (n % 89 === 0) {\n    return false;\n  }\n  if (n % 97 === 0) {\n    return false;\n  }\n  if (n % 101 === 0) {\n    return false;\n  }\n  if (n % 103 === 0) {\n    return false;\n  }\n  if (n % 107 === 0) {\n    return false;\n  }\n  if (n % 109 === 0) {\n    return false;\n  }\n  if (n % 113 === 0) {\n    return false;\n  }\n  if (n % 127 === 0) {\n    return false;\n  }\n  if (n % 131 === 0) {\n    return false;\n  }\n  if (n % 137 === 0) {\n    return false;\n  }\n  if (n % 139 === 0) {\n    return false;\n  }\n  if (n % 149 === 0) {\n    return false;\n  }\n  if (n % 151 === 0) {\n    return false;\n  }\n  if (n % 157 === 0) {\n    return false;\n  }\n  if (n % 163 === 0) {\n    return false;\n  }\n  if (n % 167 === 0) {\n    return false;\n  }\n  if (n % 173 === 0) {\n    return false;\n  }\n  if (n % 179 === 0) {\n    return false;\n  }\n  if (n % 181 === 0) {\n    return false;\n  }\n  if (n % 191 === 0) {\n    return false;\n  }\n  if (n % 193 === 0) {\n    return false;\n  }\n  if (n % 197 === 0) {\n    return false;\n  }\n  if (n % 199 === 0) {\n    return false;\n  }\n  if (n % 211 === 0) {\n    return false;\n  }\n  if (n % 223 === 0) {\n    return false;\n  }\n  if (n % 227 === 0) {\n    return false;\n  }\n  if (n % 229 === 0) {\n    return false;\n  }\n  if (n % 233 === 0) {\n    return false;\n  }\n  if (n % 239 === 0) {\n    return false;\n  }\n  if (n % 241 === 0) {\n    return false;\n  }\n  if (n % 251 === 0) {\n    return false;\n  }\n  if (n % 257 === 0) {\n    return false;\n  }\n  if (n % 263 === 0) {\n    return false;\n  }\n  if (n % 269 === 0) {\n    return false;\n  }\n  if (n % 271 === 0) {\n    return false;\n  }\n  if (n % 277 === 0) {\n    return false;\n  }\n  if (n % 281 === 0) {\n    return false;\n  }\n  if (n % 283 === 0) {\n    return false;\n  }\n  if (n % 289 === 0) {\n    return false;\n  }\n  if (n % 293 === 0) {\n    return false;\n  }\n  if (n % 307 === 0) {\n    return false;\n  }\n  if (n % 311 === 0) {\n    return false;\n  }\n  if (n % 313 === 0) {\n    return false;\n  }\n  if (n % 317 === 0) {\n    return false;\n  }\n  if (n % 331 === 0) {\n    return false;\n  }\n  if (n % 337 === 0) {\n    return false;\n  }\n  if (n % 347 === 0) {\n    return false;\n  }\n  if (n % 349 === 0) {\n    return false;\n  }\n  if (n % 353 === 0) {\n    return"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const len = xs.length\n  const lenMinusOne = len - 1\n  const xsMinusOne = xs.slice()\n  const result = xsMinusOne.shift()\n\n  let x = -1\n  for (let i = lenMinusOne; i >= 0; i--) {\n    if (xs[i]!= 0) {\n      x = i\n      break\n    }\n  }\n\n  if (x == -1) {\n    return 0\n  } else {\n    return result + xs[lenMinusOne] * Math.pow(x, lenMinusOne)\n  }\n}\n\n/*\n  findAllZeros finds all zeros of a polynomial.\n  findAllZeros finds only zeros of a polynomial\n  if all zeros are not found, return empty list.\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  [-0.5, 1.0]\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2]), 2) # f(x) = 1 + 2x\n  [-0.5]\n  >>> round(findAllZeros([1, 2]), 2) # f(x) = 1 + 2x\n  []\n  >>> round(findAllZeros([1, 2]), 2) # f(x) = 1 + 2x\n  []\n  >>> round(findAllZeros([-2, -1, 0]), 2) # f(x) = -2 + x\n  [-1.0]\n  >>> round(findAllZeros([-2, -1, 0]), 2) # f(x) = -2 + x\n  []\n  >>> round(findAllZeros([-2, -1, 0]), 2) # f(x) = -2 + x\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  [1.0]\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]), 2) # f(x) = 1 + 2x + 3x^2\n  []\n  >>> round(findAllZeros([1, 2, 3]),"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const lCopy = l.slice(0);\n  const lOut = [];\n  for (let i = 0; i < l.length; i += 3) {\n    let j = i;\n    let k = i + 1;\n    if (k < l.length) {\n      while (j < i + 3 && k < l.length && l[j] === l[k]) {\n        j += 1;\n        k += 1;\n      }\n    }\n    lOut.push(l[j]);\n    lOut.push(l[k]);\n  }\n  lOut.sort((a, b) => a - b);\n  return lCopy.concat(lOut);\n};\n\nmodule.exports = sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n    let unique = [];\n    for(let i = 0; i < l.length; i++) {\n        if(unique.indexOf(l[i]) === -1) {\n            unique.push(l[i]);\n        }\n    }\n    return unique;\n};\n\n/*Return unique elements in a list\n  >>> unique_list([1, 2, 3, 4, 3, 5])\n  [1, 2, 3, 4, 5]\n  >>> unique_list([1, 2, 3, 4, 3, 5, 1])\n  [1, 2, 3, 4, 5]\n  */\nconst unique_list = (l) => {\n    let unique = [];\n    for(let i = 0; i < l.length; i++) {\n        if(unique.indexOf(l[i]) === -1) {\n            unique.push(l[i]);\n        }\n    }\n    return unique;\n};\n\n/*Return array with element repeated a specified number of times\n  >>> repeat_list([1, 2, 3], 3)\n  [1, 2, 3, 1, 2, 3]\n  >>> repeat_list([1, 2, 3, 4], 2)\n  [1, 2, 3, 4, 1, 2]\n  >>> repeat_list([1, 2, 3, 4], 3)\n  [1, 2, 3, 4, 1, 2, 3, 4]\n  >>> repeat_list([1, 2, 3, 4], -1)\n  [1, 2, 3, 4]\n  >>> repeat_list([1, 2, 3, 4], -2)\n  [1, 2, 3]\n  >>> repeat_list([1, 2, 3, 4], -3)\n  []\n  >>> repeat_list([1, 2, 3, 4], 0)\n  []\n  >>> repeat_list([1, 2, 3, 4], 1)\n  [1, 2, 3, 4]\n  */\nconst repeat_list = (l, times) => {\n    if(times < 1) {\n        return [];\n    }\n    let r = [];\n    for(let i = 0; i < times; i++) {\n        for(let j = 0; j < l.length; j++) {\n            r.push(l[j]);\n        }\n    }\n    return r;\n};\n\n/*Return array with elements in reversed order\n  >>> reverse([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverse = (l) => {\n    let reversed = [];\n    for(let i = l.length - 1; i >= 0; i--) {\n        reversed.push(l[i]);\n    }\n    return reversed;\n};\n\n/*Return array with element in reversed order\n  >>> reverse_list([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse_list([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse_list([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverse_list = (l) => {\n    let reversed = [];\n    for(let i = l.length - 1; i >= 0; i--) {\n        reversed.push(l[i]);\n    }\n    return reversed;\n};\n\n/*Return array with element in reversed order\n  >>> reverse_unique([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse_unique([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse_unique([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverse_unique = (l) => {\n    let reversed = [];\n    for(let i = l.length - 1; i >= 0; i--) {\n        if(reversed.indexOf(l[i]) === -1) {\n            reversed.push(l[i]);\n        }\n    }\n    return reversed;\n};\n\n/*Return array with element in reversed order\n  >>> reverse_unique_list([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse_unique_list([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse_unique_list([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverse_unique_list = (l) => {\n    let reversed = [];\n    for(let i = l.length - 1; i >= 0; i--) {\n        if(reversed.indexOf(l[i]) === -1) {\n            reversed.push(l[i]);\n        }\n    }\n    return reversed;\n};\n\n/*Return array with elements in reverse order\n  >>> reverse_list_unique([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse_list_unique([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse_list_unique([1, 2, 3, 4, 5])\n  [5, 4, 3, 2, 1]\n  */\nconst reverse_list_unique = (l) => {\n    let reversed = [];\n    for(let i = l.length - 1; i >= 0; i--) {\n        if(reversed.indexOf(l[i]) === -1) {\n            reversed.push(l[i]);\n        }\n    }\n    return reversed;\n};\n\n/*Return array with elements in reverse order\n  >>> reverse_list_unique_list([1, 2, 3])\n  [3, 2, 1]\n  >>> reverse_list_unique_list([1, 2, 3, 4])\n  [4, 3, 2, 1]\n  >>> reverse_list_unique_list([1, 2, 3, 4, 5])\n  [5, 4, 3,"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = -Infinity;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\nmodule.exports = maxElement;\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n    const output = []\n\n    for (let i = 1; i <= n; i++) {\n        if ((i % 11 === 0) || (i % 13 === 0)) {\n            output.push('fizz')\n        } else if (i % 5 === 0) {\n            output.push('buzz')\n        } else {\n            output.push(i.toString())\n        }\n    }\n    return output\n}\n\nmodule.exports = fizzBuzz\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  const lEven = l.slice(0, l.length / 2)\n  const lOdd = l.slice(l.length / 2)\n  const evens = lEven.sort((a, b) => a - b)\n  const odds = lOdd.sort((a, b) => b - a)\n  const lOut = [...lEven,...evens,...lOdd,...odds]\n  return lOut\n}\n\nmodule.exports = sotrEven\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (const group of s.split('')) {\n    if (group.length == 3)\n      groups.push(group.slice(1) + group[0]);\n    else\n      groups.push(group);\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group.slice(1));\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  returns true if given string contains all characters from\n  given set of characters.\n  */\nconst containsAll = (s, chars) => {\n  for (const c of chars) {\n    if (s.indexOf(c) == -1)\n      return false;\n  }\n  return true;\n}\n\n/*\n  returns true if given string contains at least one character from\n  given set of characters.\n  */\nconst containsSome = (s, chars) => {\n  for (const c of chars) {\n    if (s.indexOf(c)!= -1)\n      return true;\n  }\n  return false;\n}\n\n/*\n  returns true if given string contains all characters from\n  given set of characters.\n  */\nconst containsNone = (s, chars) => {\n  return!containsSome(s, chars);\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsAny = (s, subs) => {\n  for (const sub of subs) {\n    if (s.indexOf(sub)!= -1)\n      return true;\n  }\n  return false;\n}\n\n/*\n  returns true if given string contains all the given\n  substrings.\n  */\nconst containsAll = (s, subs) => {\n  return subs.every((sub) => containsAll(s, sub));\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsNone = (s, subs) => {\n  return subs.every((sub) => containsNone(s, sub));\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsAny = (s, subs) => {\n  return subs.some((sub) => containsSome(s, sub));\n}\n\n/*\n  returns true if given string contains all of the given\n  substrings.\n  */\nconst containsAll = (s, subs) => {\n  return subs.every((sub) => containsAll(s, sub));\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsNone = (s, subs) => {\n  return subs.every((sub) => containsNone(s, sub));\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsAny = (s, subs) => {\n  return subs.some((sub) => containsSome(s, sub));\n}\n\n/*\n  returns true if given string contains all of the given\n  substrings.\n  */\nconst containsAll = (s, subs) => {\n  return subs.every((sub) => containsAll(s, sub));\n}\n\n/*\n  returns true if given string contains all of the given\n  substrings.\n  */\nconst containsNone = (s, subs) => {\n  return subs.every((sub) => containsNone(s, sub));\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsAny = (s, subs) => {\n  return subs.some((sub) => containsSome(s, sub));\n}\n\n/*\n  returns true if given string contains all of the given\n  substrings.\n  */\nconst containsAll = (s, subs) => {\n  return subs.every((sub) => containsAll(s, sub));\n}\n\n/*\n  returns true if given string contains all of the given\n  substrings.\n  */\nconst containsNone = (s, subs) => {\n  return subs.every((sub) => containsNone(s, sub));\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsAny = (s, subs) => {\n  return subs.some((sub) => containsSome(s, sub));\n}\n\n/*\n  returns true if given string contains all of the given\n  substrings.\n  */\nconst containsAll = (s, subs) => {\n  return subs.every((sub) => containsAll(s, sub));\n}\n\n/*\n  returns true if given string contains any of the given\n  substrings.\n  */\nconst containsNone = (s, subs) => {\n  return subs.every((sub) => containsNone(s, sub));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    const fib = [0, 1];\n    const isPrime = (n) => n % 2 === 0 && n > 1;\n\n    if (!isPrime(n)) return fib[n];\n\n    for (let i = 3; i <= Math.sqrt(n); i += 2) {\n        if (isPrime(i)) {\n            for (let j = i; j < n; j += i) {\n                fib[j] = fib[j - i] + fib[j];\n            }\n        }\n    }\n\n    return fib[n];\n};\n\nexport { primeFib };\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  let set = new Set()\n  for (let i = 0; i < l.length; i += 1) {\n    for (let j = i + 1; j < l.length; j += 1) {\n      for (let k = j + 1; k < l.length; k += 1) {\n        const sum = l[i] + l[j] + l[k]\n        if (sum === 0) {\n          set.add(sum)\n        }\n      }\n    }\n  }\n  return set.size === 3\n}\n\n/*\n  findTriples sums a list of integers.\n  it returns a list of the three distinct elements in the list that sum to zero.\n\n  >>> findTriples([1, 3, 5, 0])\n  [1, 3, 5]\n  >>> findTriples([1, 3, -2, 1])\n  [1, 3]\n  >>> findTriples([1, 2, 3, 7])\n  []\n  >>> findTriples([2, 4, -5, 3, 9, 7])\n  [2, 4]\n  >>> findTriples([1])\n  []\n  */\nconst findTriples = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i += 1) {\n    for (let j = i + 1; j < l.length; j += 1) {\n      for (let k = j + 1; k < l.length; k += 1) {\n        const sum = l[i] + l[j] + l[k]\n        if (sum === 0 &&!set.has(sum)) {\n          set.add(sum)\n        }\n      }\n    }\n  }\n  return [...set]\n}\n\n/*\n  findTriples sums a list of integers.\n  it returns the two largest elements that sum to zero.\n\n  >>> findTriples([1, 3, 5, 0])\n  [5, 3]\n  >>> findTriples([1, 3, -2, 1])\n  [1, 3]\n  >>> findTriples([1, 2, 3, 7])\n  [2, 3]\n  >>> findTriples([2, 4, -5, 3, 9, 7])\n  [4, 3]\n  >>> findTriples([1])\n  []\n  */\nconst findLargest = (l) => {\n  const set = new Set()\n  for (let i = 0; i < l.length; i += 1) {\n    for (let j = i + 1; j < l.length; j += 1) {\n      for (let k = j + 1; k < l.length; k += 1) {\n        const sum = l[i] + l[j] + l[k]\n        if (sum === 0 &&!set.has(sum)) {\n          set.add(sum)\n          if (l.length === 2) {\n            break\n          }\n        }\n      }\n    }\n  }\n  if (set.size === 2) {\n    return [...set]\n  } else {\n    return []\n  }\n}\n\n/*\n  sumLists sums a list of lists.\n  it returns the sum of all the elements in the list of lists.\n\n  >>> sumLists([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumLists([[1, 2], [3, 4], [5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumLists([[1], [2], [3]])\n  [1, 2, 3]\n  >>> sumLists([[], [], []])\n  []\n  */\nconst sumLists = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i += 1) {\n    result.push(...l[i])\n  }\n  return result\n}\n\n/*\n  sumLists sums a list of lists.\n  it returns the sum of all the elements in the list of lists.\n\n  >>> sumLists([[1, 2, 3], [4, 5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumLists([[1, 2], [3, 4], [5, 6]])\n  [1, 2, 3, 4, 5, 6]\n  >>> sumLists([[1], [2], [3]])\n  [1, 2, 3]\n  >>> sumLists([[], [], []])\n  []\n  */\nconst sumListsWithZip = (l) => {\n  const result = []\n  for (let i = 0; i < l.length; i += 1) {\n    result.push(...l[i])\n  }\n  return result\n}\n\nmodule.exports = {\n  triplesSumToZero,\n  findTriples,\n  findLargest,\n  sumLists,\n  sumListsWithZip\n}\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let i = 0, j = 0;\n  let carCount = 0;\n  let car1 = [0,0];\n  let car2 = [0,0];\n  let car1Speed = 0;\n  let car2Speed = 0;\n  while (i < n) {\n    car1[0] = i;\n    car1[1] = (Math.random() * 2) - 1;\n    car2[0] = (n - i) - 1;\n    car2[1] = (Math.random() * 2) - 1;\n    car1Speed = Math.sqrt(car1[0] * car1[0] + car1[1] * car1[1]);\n    car2Speed = Math.sqrt(car2[0] * car2[0] + car2[1] * car2[1]);\n    if (car1[0] > 0 && car2[0] < n - 1) {\n      j = 0;\n      while (j < n) {\n        if (car1[0]!= car2[0]) {\n          if (car1[0] > car2[0]) {\n            if (car2[0] + car1Speed < car1[0] - car2Speed) {\n              carCount++;\n              car2[0] += car1Speed;\n            }\n          } else {\n            if (car1[0] - car2Speed > car2[0] + car1Speed) {\n              carCount++;\n              car1[0] -= car2Speed;\n            }\n          }\n        }\n        j++;\n      }\n    }\n    i++;\n  }\n  return carCount;\n};\n\n/*\n  Let n be a positive integer.  Let a(n) be the number of such collisions that\n  occur in n cars.  (That is, a(n) = n^2 - 2n + 2).\n\n  We shall call a(n) an even number if a(n) is an even integer.\n\n  Let H(n) be the sum of a(n) for all n.  H(n) is an odd number.\n\n  H(n) = 0 if n is even.  H(n) = 2n if n is odd.\n\n  Let F(n) be the sum of the odd parts of a(n) for all n.  F(n) is an even number.\n\n  Let G(n) be the sum of the even parts of a(n) for all n.  G(n) is an even number.\n\n  Let H(n) = F(n) + G(n) and G(n) = F(n) - G(n)\n\n  Let A(n) be the number of collisions that occur in n cars.  A(n) is an even number.\n  Let C(n) = H(n) - A(n) and A(n) = H(n) + C(n)\n\n  Let D(n) be the number of collisions that occur in n cars.\n  D(n) = A(n) - C(n)\n\n  Let E(n) be the number of collisions that occur in n cars.  E(n) is an odd number.\n  Let F(n) = D(n) - E(n) and E(n) = D(n) + F(n)\n\n  Let I(n) be the number of collisions that occur in n cars.  I(n) is an odd number.\n  Let J(n) = E(n) - I(n) and I(n) = E(n) + J(n)\n\n  Let S(n) be the sum of I(n) for all n.  S(n) is an odd number.\n\n  Let M(n) be the sum of J(n) for all n.  M(n) is an odd number.\n\n  Let X(n) be the sum of S(n) + M(n) for all n.  X(n) is an even number.\n  Let X(n) = 2n - X(n) and X(n) = 2n\n\n  Let Y(n) be the sum of J(n) - X(n) for all n.  Y(n) is an odd number.\n  Let Y(n) = 2n - Y(n) and Y(n) = 2n\n  */\nconst acrRacelCollisions = (n) => {\n  let a = [];\n  let h = 0;\n  let f = 0;\n  let g = 0;\n  let aSum = 0;\n  let hSum = 0;\n  let fSum = 0;\n  let gSum = 0;\n  for (let i = 0; i < n; i++) {\n    a[i] = Math.sqrt(n - i) * Math.sqrt(i);\n    hSum += a[i];\n    fSum += a[i];\n    gSum += a[i];\n  }\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      hSum -= a[i];\n    } else {\n      fSum -= a[i];\n    }\n  }\n  for (let i = 0; i < n; i++) {\n    if (i % 2 === 0) {\n      gSum -= a[i];\n    } else {\n      fSum -= a[i];\n    }\n  }\n  hSum = Math.round(hSum / 2);\n  fSum = Math.round(fSum / 2);\n  gSum = Math.round(gSum / 2);\n  aSum = Math.round(hSum + fSum + gSum / 2);\n  let x = Math.round(2 * n - aSum);\n  let y = Math.round(2 * n - aSum);\n  let collisions = (x + y) / 2;\n  return"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  return l.reduce((acc, x) => acc + x, 0);\n}\n\n/**\n  * Return the length of the list.\n  *\n  * @param {Array} list List\n  * @return {Number} length\n  *\n  * @example\n  *\n  *   incrList([1, 2, 3])\n  *   // => 3\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  *   // => 8\n  */\nconst length = (l) => {\n  return l.length;\n}\n\n/**\n  * Return a new list without any duplicates.\n  *\n  * @param {Array} list List\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([1, 2, 3, 3, 3])\n  *   // => [1, 2, 3]\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  *   // => [5, 3, 5, 2, 9]\n  */\nconst unique = (l) => {\n  return l.filter((el, index, arr) => index === arr.indexOf(el));\n}\n\n/**\n  * Return the list without any elements less than `a`\n  *\n  * @param {Array} list List\n  * @param {Number} a  Value\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  *   // => [5, 3, 5, 2, 9]\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  *   // => [5, 3, 5, 2, 9]\n  */\nconst greaterThan = (l, a) => {\n  return l.filter((el, index, arr) => index >= a);\n}\n\n/**\n  * Return the list without any elements greater than `a`\n  *\n  * @param {Array} list List\n  * @param {Number} a  Value\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  *   // => [5, 3, 5, 2]\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  *   // => [5, 3, 5, 2]\n  */\nconst lessThan = (l, a) => {\n  return l.filter((el, index, arr) => index <= a);\n}\n\n/**\n  * Return the list without any elements less than `a`\n  *\n  * @param {Array} list List\n  * @param {Number} a  Value\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  *   // => [5, 3, 5, 2, 9]\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  *   // => [5, 3, 5, 2, 9]\n  */\nconst greaterThanEqual = (l, a) => {\n  return l.filter((el, index, arr) => index >= a);\n}\n\n/**\n  * Return the list without any elements less than `a`\n  *\n  * @param {Array} list List\n  * @param {Number} a  Value\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 3)\n  *   // => [5, 3, 5, 2]\n  *\n  * @example\n  *\n  *   incrList([5, 3, 5, 2, 3, 3, 9, 0, 123], 1)\n  *   // => [5, 3, 5, 2]\n  */\nconst lessThanEqual = (l, a) => {\n  return l.filter((el, index, arr) => index <= a);\n}\n\n/**\n  * Return a list of the even elements\n  *\n  * @param {Array} list List\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  *   // => [2, 4, 6]\n  */\nconst even = (l) => {\n  return l.filter((el, index, arr) => index % 2 === 0);\n}\n\n/**\n  * Return a list of the odd elements\n  *\n  * @param {Array} list List\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  *   // => [1, 3, 5, 7, 9]\n  */\nconst odd = (l) => {\n  return l.filter((el, index, arr) => index % 2!== 0);\n}\n\n/**\n  * Return a list of the even elements\n  *\n  * @param {Array} list List\n  * @return {Array}\n  *\n  * @example\n  *\n  *   incrList([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  *   // => [2, 4, 6]\n  */\nconst greaterThanOrEqual = ("}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  let l2 = l.slice(1);\n  for (let i = 0; i < l2.length; i++) {\n    for (let j = 0; j < l2.length; j++) {\n      if (i === j) {\n        continue;\n      }\n      if (l[0] === l2[j] && l2[j] === 0) {\n        return false;\n      }\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  let s = x.toString();\n  let n = 1;\n  while (s.length > 1) {\n    s = s.substr(s.length - 1, 1) + n.toString() + s.substr(0, s.length - 1);\n    n *= base;\n  }\n  return s;\n};\n\n/**\n  * Convert string to an integer.\n  * @param {string} str\n  * @return {integer}\n  */\nconst strToInt = (str) => {\n  let s = parseInt(str);\n  if (s.toString() === 'NaN') {\n    throw 'Invalid character in string.';\n  }\n  return s;\n};\n\n/**\n  * Convert an integer to string.\n  * @param {integer} num\n  * @return {string}\n  */\nconst intToStr = (num) => {\n  return num.toString();\n};\n\n/**\n  * Get the base of a number.\n  * @param {integer} x\n  * @return {integer}\n  */\nconst getBase = (x) => {\n  let b = x;\n  while (x % 10 === 0) {\n    x /= 10;\n    b++;\n  }\n  return b;\n};\n\n/**\n  * Get the string representation of a number.\n  * @param {integer} x\n  * @return {string}\n  */\nconst intToString = (x) => {\n  let str = intToStr(x);\n  let base = getBase(x);\n  while (base > 1) {\n    str = changeBase(str, base);\n    base = getBase(base);\n  }\n  return str;\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {integer}\n  */\nconst stringToInt = (str) => {\n  let s = parseInt(str);\n  if (s.toString() === 'NaN') {\n    throw 'Invalid character in string.';\n  }\n  return s;\n};\n\n/**\n  * Convert a number to string.\n  * @param {integer} num\n  * @return {string}\n  */\nconst numToString = (num) => {\n  return intToString(num);\n};\n\n/**\n  * Convert a string to a number.\n  * @param {string} str\n  * @return {integer}\n  */\nconst stringToNum = (str) => {\n  let s = stringToInt(str);\n  return s;\n};\n\n/**\n  * Convert a number to string.\n  * @param {integer} num\n  * @return {string}\n  */\nconst numToStr = (num) => {\n  return intToStr(num);\n};\n\n/**\n  * Get the string representation of a number.\n  * @param {integer} x\n  * @return {string}\n  */\nconst changeBaseStr = (x, base) => {\n  let str = changeBase(x, base);\n  let s = stringToInt(str);\n  return numToString(s);\n};\n\n/**\n  * Get the string representation of a number.\n  * @param {integer} x\n  * @return {string}\n  */\nconst changeBaseNum = (x, base) => {\n  let str = changeBase(x, base);\n  let s = stringToInt(str);\n  return numToString(s);\n};\n\n/**\n  * Get the string representation of a number.\n  * @param {integer} x\n  * @return {string}\n  */\nconst changeBaseStr2 = (x, base) => {\n  let str = changeBase(x, base);\n  let s = stringToInt(str);\n  return intToStr(s);\n};\n\n/**\n  * Get the string representation of a number.\n  * @param {integer} x\n  * @return {string}\n  */\nconst changeBaseNum2 = (x, base) => {\n  let str = changeBase(x, base);\n  let s = stringToInt(str);\n  return intToStr(s);\n};\n\n/**\n  * Test cases.\n  * @param {string} str\n  */\nconst testCase = (str) => {\n  console.log(strToInt(str));\n  console.log(stringToInt(str));\n  console.log(changeBaseStr(str, 3));\n  console.log(changeBaseNum(str, 3));\n  console.log(changeBaseStr2(str, 3));\n  console.log(changeBaseNum2(str, 3));\n  console.log(strToInt(changeBaseStr(str, 3)));\n  console.log(strToInt(changeBaseNum(str, 3)));\n  console.log(strToInt(changeBaseStr2(str, 3)));\n  console.log(strToInt(changeBaseNum2(str, 3)));\n};\n\ntestCase('12345');\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  const s = a*h/2\n  return Math.sqrt(s*(s-a)*(s-a)*(s-2*a))/6\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(4, 6)\n  12\n  */\nconst triangleArea2 = (a, h) => {\n  const s = a*h/2\n  return (s*s - a*a)/(2*s)\n}\n\nconst triangleArea3 = (a, h) => {\n  const s = a*h/2\n  return (a*a - s*s)/(2*s)\n}\n\nconst triangleArea4 = (a, h) => {\n  const s = a*h/2\n  return (s*s - a*a + h*h)/(2*s)\n}\n\nconst triangleArea5 = (a, h) => {\n  const s = a*h/2\n  return (h*h - a*a + s*s)/(2*s)\n}\n\nconst triangleArea6 = (a, h) => {\n  const s = a*h/2\n  return (s*s - h*h + a*a)/(2*s)\n}\n\nconst triangleArea7 = (a, h) => {\n  const s = a*h/2\n  return (s*s - a*a - h*h)/(2*s)\n}\n\nconst triangleArea8 = (a, h) => {\n  const s = a*h/2\n  return (h*h - s*s + a*a)/(2*s)\n}\n\nconst triangleArea9 = (a, h) => {\n  const s = a*h/2\n  return (s*s - h*h + a*a - s*s)/(2*s)\n}\n\nconst triangleArea10 = (a, h) => {\n  const s = a*h/2\n  return (a*a - s*s + h*h - s*s)/(2*s)\n}\n\nconst triangleArea11 = (a, h) => {\n  const s = a*h/2\n  return (s*s - h*h + a*a - s*s - s*s)/(2*s)\n}\n\nconst triangleArea12 = (a, h) => {\n  const s = a*h/2\n  return (s*s - a*a + h*h - s*s - s*s)/(2*s)\n}\n\nconst triangleArea13 = (a, h) => {\n  const s = a*h/2\n  return (s*s - a*a + h*h - s*s + s*s - s*s)/(2*s)\n}\n\nconst triangleArea14 = (a, h) => {\n  const s = a*h/2\n  return (a*a - s*s + h*h - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea15 = (a, h) => {\n  const s = a*h/2\n  return (a*a - h*h + s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea16 = (a, h) => {\n  const s = a*h/2\n  return (h*h - s*s + a*a - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea17 = (a, h) => {\n  const s = a*h/2\n  return (s*s - h*h + a*a - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea18 = (a, h) => {\n  const s = a*h/2\n  return (h*h - a*a + s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea19 = (a, h) => {\n  const s = a*h/2\n  return (a*a - h*h + s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea20 = (a, h) => {\n  const s = a*h/2\n  return (s*s - h*h + a*a - s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea21 = (a, h) => {\n  const s = a*h/2\n  return (h*h - a*a + s*s - s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea22 = (a, h) => {\n  const s = a*h/2\n  return (s*s - h*h + a*a - s*s - s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea23 = (a, h) => {\n  const s = a*h/2\n  return (a*a - h*h + s*s - s*s - s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea24 = (a, h) => {\n  const s = a*h/2\n  return (h*h - a*a + s*s - s*s - s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea25 = (a, h) => {\n  const s = a*h/2\n  return (s*s - h*h + a*a - s*s - s*s - s*s - s*s - s*s - s*s - s*s)/(2*s)\n}\n\nconst triangleArea26 = (a, h) => {\n  const s = a*h/2\n  return (s*s - a*a +"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    if (n < 0) {\n        throw new Error('The input is negative.');\n    }\n    if (n <= 2) {\n        return n;\n    }\n    return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let m = 0;\n  let n = 0;\n  let len = l.length;\n  let sorted = l.sort((a, b) => a - b);\n  for (let i = 0; i < len; i++) {\n    if (sorted[i] % 2) {\n      m = sorted[i];\n      n++;\n    } else {\n      n++;\n      if (n > len / 2) {\n        m = sorted[i];\n      }\n    }\n  }\n  return m;\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    return text.split('').reverse().join('') === text;\n};\n\n/*\n  Checks if given string is a permutation of a palindrome\n  >>> isPermutationOfPalindrome('aba')\n  true\n  >>> isPermutationOfPalindrome('abcba')\n  false\n  >>> isPermutationOfPalindrome('abc')\n  false\n  >>> isPermutationOfPalindrome('a')\n  false\n  */\nconst isPermutationOfPalindrome = (text) => {\n    const strArr = text.split('');\n    const strArrReverse = strArr.reverse();\n    const strArrReverseReversed = strArrReverse.reverse();\n\n    if (strArrReverse!== strArrReverseReversed) {\n        return false;\n    }\n\n    const strArrReverseReversedReversed = strArrReverseReversed.reverse();\n\n    for (let i = 0; i < strArr.length; i++) {\n        if (strArr[i]!== strArrReverseReversed[i]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/*\n  Checks if given string is a rotation of a palindrome\n  >>> isRotationOfPalindrome('aba')\n  true\n  >>> isRotationOfPalindrome('abcba')\n  false\n  >>> isRotationOfPalindrome('abc')\n  false\n  >>> isRotationOfPalindrome('a')\n  false\n  */\nconst isRotationOfPalindrome = (text) => {\n    const strArr = text.split('');\n    const strArrReverse = strArr.reverse();\n\n    if (strArr[0]!== strArrReverse[strArr.length - 1]) {\n        return false;\n    }\n\n    for (let i = 1; i < strArr.length; i++) {\n        if (strArr[i]!== strArrReverse[i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\n/*\n  Checks if given string is a rotation of a permutation of a palindrome\n  >>> isRotationOfPermutationOfPalindrome('aba')\n  true\n  >>> isRotationOfPermutationOfPalindrome('abcba')\n  false\n  >>> isRotationOfPermutationOfPalindrome('abc')\n  false\n  >>> isRotationOfPermutationOfPalindrome('a')\n  false\n  */\nconst isRotationOfPermutationOfPalindrome = (text) => {\n    const strArr = text.split('');\n    const strArrReverse = strArr.reverse();\n    const strArrReverseReversed = strArrReverse.reverse();\n\n    const strArrReverseReversedReversed = strArrReverseReversed.reverse();\n\n    if (strArr[0]!== strArrReverseReversed[strArr.length - 1]) {\n        return false;\n    }\n\n    for (let i = 1; i < strArr.length; i++) {\n        if (strArr[i]!== strArrReverseReversed[i - 1]) {\n            return false;\n        }\n    }\n\n    return true;\n};\n\nmodule.exports = {\n    isPalindrome,\n    isPermutationOfPalindrome,\n    isRotationOfPalindrome,\n    isRotationOfPermutationOfPalindrome\n};\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return ((n % p) + p) % p\n}\n\n/*\n  Return a random number in [0, n)\n  >>> random(10)\n  6\n  >>> random(3)\n  1\n  >>> random(0)\n  0\n  >>> random(2, 5)\n  3\n  */\nconst random = (n) => {\n  return Math.floor(Math.random() * n)\n}\n\n/*\n  Return a random number in [n, n*m)\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n * m))\n}\n\n/*\n  Return a random number in [0, n) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1)) + 1\n}\n\n/*\n  Return a random number in [n, n*m) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1) + 1)\n}\n\n/*\n  Return a random number in [0, n) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1) + 1)\n}\n\n/*\n  Return a random number in [n, n*m) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1) + 1)\n}\n\n/*\n  Return a random number in [0, n) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1) + 1)\n}\n\n/*\n  Return a random number in [n, n*m) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1) + 1)\n}\n\n/*\n  Return a random number in [0, n) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1) + 1)\n}\n\n/*\n  Return a random number in [n, n*m) with m probability of being equal to n.\n  >>> random(10, 5)\n  4\n  >>> random(10, 5)\n  8\n  >>> random(10, 5)\n  7\n  >>> random(10, 5)\n  9\n  >>> random(10, 5)\n  8\n  */\nconst random = (n, m) => {\n  return Math.floor(Math.random() * (n - 1) + 1)\n}\n\nmodule.exports = {\n  divide,\n  modp,\n  random,\n  random,\n  random,\n  random\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5) % 26) + \"a\".charCodeAt(0))).join(\"\");\n}\n\n// --------------\n\nconsole.log(encode(\"abc\"));\nconsole.log(decode(\"a\"));\n\nconsole.log(encode(\"abc\") === decodeShift(\"a\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abc\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcd\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abce\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") === encodeShift(\"abcf\"));\n\n// --------------\n\nconsole.log(encode(\"abc\") ==="}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n    let newText = text.replace(/[aeiou]/g, '');\n    if (newText === text) {\n        return '';\n    } else {\n        return newText;\n    }\n};\n\n/*\n  remoevVowels2 is a function that takes string and returns string without vowels.\n  >>> remoevVowels2('')\n  ''\n  >>> remoevVowels2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels2('abcdef')\n  'bcdf'\n  >>> remoevVowels2('aaaaa')\n  ''\n  >>> remoevVowels2('aaBAA')\n  'B'\n  >>> remoevVowels2('zbcd')\n  'zbcd'\n  */\nconst remoevVowels2 = (text) => {\n    let newText = text.replace(/[aeiou]/g, '');\n    if (newText === text) {\n        return '';\n    } else {\n        return newText;\n    }\n};\n\n/*\n  remoevSpecialChars is a function that takes string and returns string without special characters.\n  >>> remoevSpecialChars('')\n  ''\n  >>> remoevSpecialChars(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevSpecialChars('abcdef')\n  'bcdf'\n  >>> remoevSpecialChars('aaaaa')\n  ''\n  >>> remoevSpecialChars('aaBAA')\n  'B'\n  >>> remoevSpecialChars('zbcd')\n  'zbcd'\n  */\nconst remoevSpecialChars = (text) => {\n    let newText = text.replace(/[^\\w\\s]/g, '');\n    if (newText === text) {\n        return '';\n    } else {\n        return newText;\n    }\n};\n\n/*\n  remoevSpecialChars2 is a function that takes string and returns string without special characters.\n  >>> remoevSpecialChars2('')\n  ''\n  >>> remoevSpecialChars2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevSpecialChars2('abcdef')\n  'bcdf'\n  >>> remoevSpecialChars2('aaaaa')\n  ''\n  >>> remoevSpecialChars2('aaBAA')\n  'B'\n  >>> remoevSpecialChars2('zbcd')\n  'zbcd'\n  */\nconst remoevSpecialChars2 = (text) => {\n    let newText = text.replace(/[^\\w\\s]/g, '');\n    if (newText === text) {\n        return '';\n    } else {\n        return newText;\n    }\n};\n\n/*\n  remoevSpecialChars3 is a function that takes string and returns string without special characters.\n  >>> remoevSpecialChars3('')\n  ''\n  >>> remoevSpecialChars3(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevSpecialChars3('abcdef')\n  'bcdf'\n  >>> remoevSpecialChars3('aaaaa')\n  ''\n  >>> remoevSpecialChars3('aaBAA')\n  'B'\n  >>> remoevSpecialChars3('zbcd')\n  'zbcd'\n  */\nconst remoevSpecialChars3 = (text) => {\n    let newText = text.replace(/[^\\w\\s]/g, '');\n    if (newText === text) {\n        return '';\n    } else {\n        return newText;\n    }\n};\n\n/*\n  remoevPunctuation is a function that takes string and returns string without punctuation.\n  >>> remoevPunctuation('')\n  ''\n  >>> remoevPunctuation(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevPunctuation('abcdef')\n  'bcdf'\n  >>> remoevPunctuation('aaaaa')\n  ''\n  >>> remoevPunctuation('aaBAA')\n  'B'\n  >>> remoevPunctuation('zbcd')\n  'zbcd'\n  */\nconst remoevPunctuation = (text) => {\n    let newText = text.replace(/[^\\w\\s]/g, '');\n    if (newText === text) {\n        return '';\n    } else {\n        return newText;\n    }\n};\n\n/*\n  remoevPunctuation2 is a function that takes string and returns string without punctuation.\n  >>> remoevPunctuation2('')\n  ''\n  >>> remoevPunctuation2(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevPunctuation2('abcdef')\n  'bcdf'\n  >>> remoevPunctuation2('aaaaa')\n  ''\n  >>> remoevPunctuation2('aaBAA')\n  'B'\n  >>> remoevPunctuation2('zbcd')\n  'zbcd'\n  */\nconst remoevPunctuation2 = (text) => {\n    let newText = text.replace(/[^\\w\\s]/g, '');\n    if (newText === text) {\n        return '';\n    } else {\n        return newText;\n    }\n};\n\n/*\n  remoevPunctuation3"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let found = false;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] >= t) {\n      found = true;\n    }\n  }\n  return found;\n}\n\n/*\n  Check if the string s is a palindrome.\n  >>> isPalindrome(\"abracadabra\")\n  true\n  >>> isPalindrome(\"abracadabra\")\n  true\n  >>> isPalindrome(\"A\")\n  false\n  >>> isPalindrome(\"abracadabra\")\n  false\n  >>> isPalindrome(\"\")\n  true\n  >>> isPalindrome(\"\")\n  true\n  >>> isPalindrome(\"\")\n  true\n  */\nconst isPalindrome = (s) => {\n  let reversed = reverseString(s);\n  return s === reversed;\n}\n\n/*\n  Return the reverse of string s.\n  >>> reverseString(\"abracadabra\")\n  \"racadabra\"\n  >>> reverseString(\"A\")\n  \"A\"\n  >>> reverseString(\"\")\n  \"\"\n  >>> reverseString(\"\")\n  \"\"\n  */\nconst reverseString = (s) => {\n  let reversed = \"\";\n  for (let i = s.length - 1; i >= 0; i--) {\n    reversed += s[i];\n  }\n  return reversed;\n}\n\n/*\n  Return a random element from list l.\n  >>> random([\"A\", \"B\", \"C\", \"D\"])\n  'A'\n  >>> random([])\n  ''\n  >>> random([1])\n  1\n  >>> random([1, 2, 3])\n  2\n  */\nconst random = (l) => {\n  if (l.length === 0) {\n    return \"\";\n  }\n  return l[Math.floor(Math.random() * l.length)];\n}\n\n/*\n  Return a random element from list l.\n  >>> randomSubset([\"A\", \"B\", \"C\", \"D\"], 3)\n  'B'\n  >>> randomSubset([], 3)\n  ''\n  >>> randomSubset([1, 2, 3], 3)\n  2\n  */\nconst randomSubset = (l, k) => {\n  if (l.length === 0 || k === 0) {\n    return \"\";\n  }\n  return l[Math.floor(Math.random() * l.length)];\n}\n\n/*\n  Return a random element from list l.\n  >>> randomPick([\"A\", \"B\", \"C\", \"D\"])\n  'A'\n  >>> randomPick([])\n  ''\n  >>> randomPick([1])\n  1\n  >>> randomPick([1, 2, 3])\n  2\n  */\nconst randomPick = (l) => {\n  if (l.length === 0) {\n    return \"\";\n  }\n  return l[Math.floor(Math.random() * l.length)];\n}\n\nexport default {\n  isPalindrome,\n  isPalindrome2,\n  isPalindrome3,\n  isPalindrome4,\n  belowThreshold,\n  random,\n  randomPick,\n  randomSubset,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Subtract two numbers x and y\n  >>> subtract(5, 2)\n  3\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 5)\n  0\n  */\nconst subtract = (x, y) => {\n  return x - y;\n};\n\n/*\n  * Multiply two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  35\n  */\nconst multiply = (x, y) => {\n  return x * y;\n};\n\n/*\n  * Divide two numbers x and y\n  >>> divide(5, 2)\n  2.5\n  >>> divide(7, 3)\n  2\n  */\nconst divide = (x, y) => {\n  return x / y;\n};\n\n/*\n  * Take the absolute value of a number\n  * @param {number} x\n  * @return {number}\n  */\nconst abs = (x) => {\n  return Math.abs(x);\n};\n\n/*\n  * Return the square of a number\n  * @param {number} x\n  * @return {number}\n  */\nconst square = (x) => {\n  return x * x;\n};\n\n/*\n  * Return the absolute value of the square of a number\n  * @param {number} x\n  * @return {number}\n  */\nconst squareAbs = (x) => {\n  return Math.abs(x) * x;\n};\n\n/*\n  * Return the square of the sum of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst sumSquare = (x, y) => {\n  return (x + y) * (x + y);\n};\n\n/*\n  * Return the sum of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst sum = (x, y) => {\n  return x + y;\n};\n\n/*\n  * Return the absolute value of the sum of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst sumAbs = (x, y) => {\n  return Math.abs(x + y);\n};\n\n/*\n  * Return the sum of the squares of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst sumSquareAbs = (x, y) => {\n  return Math.abs(x + y) * Math.abs(x + y);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinations = (x, y) => {\n  return (Math.pow(x, y) - x * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsAbs = (x, y) => {\n  return (Math.pow(Math.abs(x), y) - Math.abs(x) * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsSum = (x, y) => {\n  return (Math.pow(x + y, x + y) - x * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsSumAbs = (x, y) => {\n  return (Math.pow(Math.abs(x + y), x + y) - Math.abs(x) * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsSumSquare = (x, y) => {\n  return (Math.pow(x + y, x + y) - x * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsSumSquareAbs = (x, y) => {\n  return (Math.pow(Math.abs(x + y), x + y) - Math.abs(x) * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsSumSquareAbsSum = (x, y) => {\n  return (Math.pow(Math.abs(x + y), x + y) - Math.abs(x) * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsSumAbsSum = (x, y) => {\n  return (Math.pow(Math.abs(x + y), x + y) - Math.abs(x) * y) / (y - x);\n};\n\n/*\n  * Return the number of distinct combinations of two numbers\n  * @param {number} x\n  * @param {number} y\n  * @return {number}\n  */\nconst combinationsSumAbsSumSum = (x, y) => {\n  return (Math.pow(Math.abs(x + y), x + y) - Math.abs(x) * y) / (y - x);\n};\n\nmodule.exports = {\n  add"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const len0 = s0.length;\n  const len1 = s1.length;\n  if (len0!== len1) return false;\n\n  for (let i = 0; i < len0; i++) {\n    if (s0[i]!== s1[i]) return false;\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const a = 1, b = 1\n  return a + b;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10, 1)\n  1\n  >>> fib(10, 2)\n  2\n  >>> fib(10, 3)\n  3\n  >>> fib(10, 4)\n  5\n  >>> fib(10, 5)\n  8\n  >>> fib(10, 6)\n  13\n  >>> fib(10, 7)\n  21\n  */\nconst fib = (n, m) => {\n  const a = 1, b = 1\n  return a + b;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10, 2, 1)\n  1\n  >>> fib(10, 3, 1)\n  2\n  >>> fib(10, 4, 1)\n  3\n  >>> fib(10, 5, 1)\n  5\n  >>> fib(10, 6, 1)\n  8\n  >>> fib(10, 7, 1)\n  13\n  >>> fib(10, 8, 1)\n  21\n  */\nconst fib = (n, m, k) => {\n  const a = 1, b = 1\n  return a + b;\n}\n\n/*Return n-th Fibonacci number.\n  >>> fib(10, 2, 1, 1)\n  1\n  >>> fib(10, 3, 1, 1)\n  2\n  >>> fib(10, 4, 1, 1)\n  3\n  >>> fib(10, 5, 1, 1)\n  5\n  >>> fib(10, 6, 1, 1)\n  8\n  >>> fib(10, 7, 1, 1)\n  13\n  >>> fib(10, 8, 1, 1)\n  21\n  */\nconst fib = (n, m, k, l) => {\n  const a = 1, b = 1\n  return a + b;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n    const bracketsString = brackets.split(/<>/g);\n    for (let i = 0; i < bracketsString.length; i++) {\n        if (bracketsString[i]!== bracketsString[bracketsString.length - 1 - i]) {\n            return false;\n        }\n    }\n    return true;\n};\n\nmodule.exports = correctBracketnig;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let a = l.sort()\n  let i = 0\n  let b = l.reverse()\n  let flag = false\n  while (i < a.length) {\n    if (a[i]!= b[i]) {\n      flag =!flag\n      break\n    }\n    i++\n  }\n  return flag\n}\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let c = {};\n  l1.forEach(x => c[x] = true);\n  l2.forEach(x => c[x] = true);\n  return Object.keys(c);\n}\n\nexport { common };\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2, prime = 1\n  while (n > 1) {\n    if (n % i === 0) {\n      if (prime < i) prime = i\n      n = n / i\n    } else {\n      i += 1\n    }\n  }\n  return prime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\nconst sumFromN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */\n\n/*\n  This is a function that sums numbers from 1 to n.\n  >>> sumFromN(30)\n  465\n  >>> sumFromN(100)\n  5050\n  >>> sumFromN(5)\n  15\n  >>> sumFromN(10)\n  55\n  >>> sumFromN(1)\n  1\n  */"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  let stack = []\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\") {\n      stack.push(\"(\")\n    } else if (brackets[i] === \")\") {\n      if (stack.pop()!== \"(\") {\n        return false\n      }\n    }\n  }\n  return stack.length === 0\n}\n\nconst isPalindrome = (input) => {\n  let brackets = []\n  for (let i = 0; i < input.length; i++) {\n    if (input[i] === \"(\") {\n      brackets.push(input[i])\n    } else if (input[i] === \")\") {\n      brackets.pop()\n    }\n  }\n\n  return correctBracketnig(brackets)\n}\n\nconsole.log(isPalindrome(\"()()()\"))\nconsole.log(isPalindrome(\"()()()\"))\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const result = [];\n  for (let i = xs.length - 1; i >= 0; i--) {\n    result.unshift(1);\n  }\n  return result;\n};\n\n/**\n  * The sum of the digits of a number n.\n  * Return the number of digits in the sum of n.\n  * The sum of the digits of a number n is the sum of the digits of the digits of n.\n  * @param {number} n\n  * @return {number}\n  */\nconst sumDigits = (n) => {\n  let result = 0;\n  while (n > 0) {\n    result += n % 10;\n    n /= 10;\n  }\n  return result;\n};\n\n/**\n  * Return the number of leading zeros in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfLeadingZeros = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n / 2;\n  }\n  return result;\n};\n\n/**\n  * Return the number of trailing zeros in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfTrailingZeros = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    n = n / 2;\n    result++;\n  }\n  return result;\n};\n\n/**\n  * Return the number of significant zeros in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfSignificantZeros = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    n = n / 2;\n    if (n % 2 == 1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/**\n  * Return the number of 1 bits in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOf1Bits = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    n = n & (n - 1);\n    result++;\n  }\n  return result;\n};\n\n/**\n  * Return the number of 0 bits in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOf0Bits = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    n = n & (n - 1);\n    result++;\n  }\n  return result;\n};\n\n/**\n  * Return the number of zeros in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfZeros = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n / 2;\n  }\n  return result;\n};\n\n/**\n  * Return the number of 1s in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfOnes = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n & (n - 1);\n  }\n  return result;\n};\n\n/**\n  * Return the number of 0s in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOf0s = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n & (n - 1);\n  }\n  return result;\n};\n\n/**\n  * Return the number of 1s in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOf1s = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n & (n - 1);\n  }\n  return result;\n};\n\n/**\n  * Return the number of bits in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfBits = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n & (n - 1);\n  }\n  return result;\n};\n\n/**\n  * Return the number of bits in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfBytes = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n & (n - 1);\n  }\n  return result;\n};\n\n/**\n  * Return the number of significant bits in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfSignificantBits = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n & (n - 1);\n  }\n  return result;\n};\n\n/**\n  * Return the number of significant bits in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfSignificantBytes = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n    n = n & (n - 1);\n  }\n  return result;\n};\n\n/**\n  * Return the number of significant bits in a number n.\n  * @param {number} n\n  * @return {number}\n  */\nconst numberOfOnesInASet = (n) => {\n  let result = 0;\n  while (n!= 0) {\n    result++;\n"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  return (n === 0)? 0 : (n === 1)? 1 : fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length; i++) {\n    count += (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y' && i === s.length - 1)\n  }\n  return count;\n}\n\nconsole.log(vowelsConut('abcde')); // 2\nconsole.log(vowelsConut('ACEDY')); // 3\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  if (shift >= x.length) {\n    return x.reverse().join('');\n  }\n\n  const result = x.slice(0, shift).reverse();\n  return result.concat(x.slice(shift).reverse());\n};\n\n/*\n  Find the longest common prefix of strings s1 and s2.\n\n  >>> lcp(['a', 'b'], ['a', 'b'])\n  'ab'\n  >>> lcp(['a', 'b'], ['a', 'b', 'c'])\n  'ab'\n  >>> lcp(['a', 'b', 'c'], ['a', 'b', 'c'])\n  'abc'\n  >>> lcp(['a', 'b', 'c'], ['x', 'y', 'z'])\n  ''\n  */\nconst lcp = (s1, s2) => {\n  const length = Math.min(s1.length, s2.length);\n  for (let i = 0; i < length; i++) {\n    if (s1[i]!== s2[i]) {\n      return s1.slice(0, i);\n    }\n  }\n  return s1.slice(0, length);\n};\n\n/*\n  Given two strings, s1 and s2, return a string that is the reverse of\n  s2, starting with the last character of s1.\n\n  >>> rev('Hello world')\n  'ldr'\n  >>> rev('Hello world')\n  'Hello world'\n  >>> rev('Hello world')\n  'Hello world'\n  >>> rev('Hello world')\n  'Hello world'\n  */\nconst rev = (s1, s2) => {\n  return s1.slice(s1.length - 1) + s1.slice(0, s1.length - 1);\n};\n\n/*\n  Return a string where all the vowels of a given string are replaced\n  by an equivalent consonant.\n  >>> cons('bcdfgkmnpqrstvwxyz')\n  'bdgkmnpqrstvwxyz'\n  >>> cons('abcdefghijklmnopqrstuvwxyz')\n  'abgkmnpqrstvwxyz'\n  >>> cons('a')\n  'a'\n  >>> cons('ab')\n  'a'\n  >>> cons('abcd')\n  'a'\n  >>> cons('aabc')\n  'a'\n  */\nconst cons = (s) => {\n  const length = s.length;\n  let result = '';\n\n  for (let i = 0; i < length; i++) {\n    const ch = s.charAt(i);\n\n    if (ch === 'a') {\n      result += 'b';\n    } else if (ch === 'b') {\n      result += 'c';\n    } else if (ch === 'c') {\n      result += 'd';\n    } else if (ch === 'd') {\n      result += 'e';\n    } else if (ch === 'e') {\n      result += 'f';\n    } else if (ch === 'f') {\n      result += 'g';\n    } else if (ch === 'g') {\n      result += 'h';\n    } else if (ch === 'h') {\n      result += 'i';\n    } else if (ch === 'i') {\n      result += 'j';\n    } else if (ch === 'j') {\n      result += 'k';\n    } else if (ch === 'k') {\n      result += 'l';\n    } else if (ch === 'l') {\n      result +='m';\n    } else if (ch ==='m') {\n      result += 'n';\n    } else if (ch === 'n') {\n      result += 'o';\n    } else if (ch === 'o') {\n      result += 'p';\n    } else if (ch === 'p') {\n      result += 'q';\n    } else if (ch === 'q') {\n      result += 'r';\n    } else if (ch === 'r') {\n      result +='s';\n    } else if (ch ==='s') {\n      result += 't';\n    } else if (ch === 't') {\n      result += 'u';\n    } else if (ch === 'u') {\n      result += 'v';\n    } else if (ch === 'v') {\n      result += 'w';\n    } else if (ch === 'w') {\n      result += 'x';\n    } else if (ch === 'x') {\n      result += 'y';\n    } else if (ch === 'y') {\n      result += 'z';\n    } else if (ch === 'z') {\n      result += 'a';\n    } else {\n      result += ch;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given a string, return the string without its vowels.\n  >>> vowels('abcde')\n  'aceb'\n  >>> vowels('a')\n  'a'\n  >>> vowels('abcd')\n  'abc'\n  >>> vowels('abac')\n  'ab'\n  >>> vowels('aac')\n  'a'\n  */\nconst vowels = (s) => {\n  const length = s.length;\n  let result = '';\n\n  for (let i = 0; i < length; i++) {\n    const ch = s.charAt(i);\n\n    if (ch === 'a' || ch === 'e' || ch === 'i' || ch === 'o' || ch === 'u') {\n      continue;\n    } else {\n      result += ch;\n    }\n  }\n\n  return result;\n};\n\n/*\n  Given two strings, s1 and s2, return a string that is the concatenation\n  of s1 and s2.\n  >>> concat('Hello', 'World')\n  'HelloWorld'\n  >>> concat('Hello', 'World')\n  'HelloWorld'\n  >>> concat('Hello', 'World')\n  'HelloWorld'\n  >>> conc"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const digits = s.split('').map((c) => parseInt(c));\n  return digits.reduce((sum, num) => sum + num, 0);\n};\n\nconsole.log(digitSum('aAaaaXa'));<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  let apples = 0, oranges = 0, mango = 0;\n  const numbers = s.split(\" \");\n  numbers.forEach(x => {\n    switch (x) {\n      case \"apples\": apples += 1; break;\n      case \"oranges\": oranges += 1; break;\n      case \"mango\": mango += 1; break;\n    }\n  });\n  return (n - apples) - (oranges + mango);\n};\n\nmodule.exports = fruitDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  if (arr.length === 0) return []\n  let smallest_value = arr[0];\n  let smallest_index = 0;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] % 2 === 0) {\n      if (arr[i] < smallest_value) {\n        smallest_value = arr[i];\n        smallest_index = i;\n      }\n    }\n  }\n  return [smallest_value, smallest_index];\n}\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let max = -1;\n  let maxCount = -1;\n\n  lst.forEach( (val) => {\n    if (val > max) {\n      max = val;\n      maxCount = 1;\n    } else if (val === max) {\n      maxCount += 1;\n    }\n  });\n\n  if (maxCount === 0) {\n    return -1;\n  } else {\n    return max;\n  }\n};\n\n// Tests\n// console.log(search([4, 1, 2, 2, 3, 1])); // 2\n// console.log(search([1, 2, 2, 3, 3, 3, 4, 4, 4])); // 3\n// console.log(search([5, 5, 4, 4, 4])); // -1\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  let result = [];\n  let len = lst.length;\n  let min = lst[0];\n  let max = lst[len-1];\n  let half = len/2;\n  let i = 0;\n  let j = len - 1;\n  let curr = 0;\n  let currMin = min;\n  while (i < half) {\n    if (lst[i] < min) {\n      currMin = min;\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      currMin = max;\n      max = lst[i];\n    }\n    i++;\n  }\n  while (j > 0) {\n    if (lst[j] < currMin) {\n      currMin = lst[j];\n    }\n    if (lst[j] > currMax) {\n      currMax = lst[j];\n    }\n    j--;\n  }\n  while (i < half) {\n    if (lst[i] < min) {\n      curr = min;\n      min = lst[i];\n    }\n    if (lst[i] > max) {\n      curr = max;\n      max = lst[i];\n    }\n    result.push(curr);\n    i++;\n  }\n  while (j > 0) {\n    result.push(lst[j]);\n    j--;\n  }\n  return result;\n}\n\nmodule.exports = stranegoSrtList;\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  let s1 = a + b;\n  let s2 = b + c;\n  let s3 = c + a;\n  if (s1 > c && s2 > s3) return (Math.pow(s1, 2) + Math.pow(s2, 2) - Math.pow(s3, 2)) / 2;\n  return -1;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const isPal = isPalindrome(q)\n  const sum = sumUp(q)\n  if (isPal && sum <= w) {\n    return true\n  }\n  return false\n}\n\nexport default willItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  if (!arr.length) return 0;\n\n  const oddCount = arr.length % 2 === 1? arr.length - 1 : arr.length;\n  const evenCount = arr.length % 2 === 0? arr.length - 1 : arr.length;\n\n  let i = 0, j = arr.length - 1;\n\n  while (i < j) {\n    if (arr[i]!== arr[j]) return Math.min(oddCount, evenCount);\n    i++;\n    j--;\n  }\n\n  return oddCount;\n};\n\nconsole.log(msallestChange([1,2,3,5,4,7,9,6]));\nconsole.log(msallestChange([1, 2, 3, 4, 3, 2, 2]));\nconsole.log(msallestChange([1, 2, 3, 2, 1]));\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length > lst2.length) {\n    return lst1;\n  } else if (lst1.length === lst2.length) {\n    let a = lst1.filter((v, i) => i < lst2.length).length;\n    let b = lst2.filter((v, i) => i < lst1.length).length;\n    if (a === b) {\n      return lst1;\n    } else {\n      return lst2;\n    }\n  } else {\n    return lst2;\n  }\n};\n\n/*\n  Write a function that accepts a list of strings and returns a list of the longest\n  substring in the list.\n\n  Example\n  longestSubString([]) ➞ []\n  longestSubString(['abcdef', 'bc', 'def']) ➞ ['abcdef', 'bc']\n  longestSubString(['aa', 'ab', 'a']) ➞ ['a']\n  longestSubString(['ab', 'bc', 'ab']) ➞ ['ab']\n  longestSubString(['ab', 'bc', 'ab', 'ab']) ➞ ['ab', 'ab']\n  */\nconst longestSubString = (lst) => {\n  let res = [];\n  for (let i = 0; i < lst.length; i++) {\n    let sub = lst.slice(i, i + 1);\n    if (res.length === 0) {\n      res = sub;\n    } else {\n      res = res.concat(sub);\n    }\n  }\n  return res;\n};\n\nmodule.exports = {\n  ottalMatch,\n  longestSubString\n};\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  const prime = new Set(primes);\n  const result = new Set();\n  let divisor = 2;\n  while (prime.has(a / divisor)) {\n    if (a % divisor === 0) {\n      result.add(a);\n      break;\n    }\n    divisor++;\n  }\n  if (result.size === 0) {\n    return false;\n  }\n  return result.has(a);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  const pw = (x * Math.pow(n, Math.floor(x / n))) % x\n  return x === pw\n}\n\n/*\n  Write a program that asks for two numbers n and k.\n  If n is a multiple of k, print the number n and n**k\n  If n is not a multiple of k, print n and n is not a\n  simple power of n\n  For example:\n  What is the value of:\n  n = 6\n  k = 3\n  n**k = 216\n  n = 3\n  n**k = 27\n  n = 3\n  n**k = 9\n  n = 5\n  n**k = 125\n  */\nconst isSimplePwoer2 = (n, k) => {\n  if (isSimplePwoer(n, k)) {\n    return n + `${Math.pow(n, k)}`\n  } else {\n    return n + `is not a simple power of ${k}`\n  }\n}\n\nmodule.exports = {\n  isSimplePwoer,\n  isSimplePwoer2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if(a < 0) return false\n  let n = Math.floor(Math.sqrt(a))\n  if(n * n === a) return true\n  return false\n}\n\nexport {iscube}\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n    // check if the number is empty\n    if (num === \"\") return 0;\n\n    // remove the leading 0\n    num = num.substr(1);\n\n    // convert the string to hexadecimal\n    const hexNum = num.toUpperCase().split('').map((character) => {\n        // convert the charater to hexadecimal\n        return character.charCodeAt(0).toString(16);\n    });\n\n    // remove the last 2 characters (F and D)\n    const lastTwoDigits = hexNum.slice(-2);\n    const lastTwoDigitsHex = lastTwoDigits.toUpperCase();\n\n    // convert the last two digits to decimal\n    const lastTwoDigitsDec = parseInt(lastTwoDigitsHex, 16);\n\n    // find the sum of the last two digits\n    const sum = lastTwoDigitsDec + lastTwoDigitsDec;\n\n    // check if the number is prime\n    if (isPrime(sum)) return hexNum.length;\n\n    // return 0 if it is not\n    return 0;\n}\n\nfunction isPrime(number) {\n    for (let i = 2; i <= Math.sqrt(number); i++) {\n        if (number % i === 0) return false;\n    }\n    return true;\n}\n\n// test\nconsole.log(hexKey(\"123456789ABCDEF0\"));\nconsole.log(hexKey(\"1077E\"));\nconsole.log(hexKey(\"ABED1A33\"));\nconsole.log(hexKey(\"2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\"\n  let i = 0\n  while (decimal > 0) {\n    binary += String.fromCharCode(decimal % 2)\n    decimal = Math.floor(decimal / 2)\n  }\n  for (i = 0; i < decimal; i++) {\n    binary += '0'\n  }\n  return binary + 'db'\n}\n\n// test\nconsole.log(decimalToBinary(15))\nconsole.log(decimalToBinary(32))\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let str = s.split('');\n  let count = 1;\n  let i = 0;\n  let length = str.length;\n\n  while (i < length) {\n    if (str[i] === str[i + 1] && str[i] === str[i + 2]) {\n      count++;\n      i += 3;\n    } else {\n      count = 1;\n      i++;\n    }\n  }\n\n  return count >= 3;\n};\n\n/*\n  You are given two strings s1 and s2.\n  Your task is to check if they are anagrams or not.\n  An anagram is a string which is the same except one or more\n  of the characters are exchanged.\n  For example:\n  areAnagrams(abc,cba) => true\n  areAnagrams(abcd,cdab) => true\n  areAnagrams(abcd,abcd) => false\n  areAnagrams(a,a) => true\n  areAnagrams(a,b) => false\n  areAnagrams(abc,xzc) => true\n  areAnagrams(a,axc) => true\n  areAnagrams(axc,a) => true\n  areAnagrams(a,bxzc) => true\n  areAnagrams(axc,b) => false\n  areAnagrams(a,azxc) => true\n  areAnagrams(b,azxc) => true\n  areAnagrams(a,bzxc) => true\n  areAnagrams(b,zxc) => true\n  areAnagrams(axc,ab) => true\n  areAnagrams(azxc,ab) => true\n  areAnagrams(bzxc,ab) => true\n  areAnagrams(zxc,ab) => true\n  areAnagrams(a,abx) => true\n  areAnagrams(a,xab) => true\n  areAnagrams(a,xba) => true\n  areAnagrams(x,a) => true\n  areAnagrams(x,a) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams(ax,ax) => true\n  areAnagrams("}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let letterGrade = [];\n  let gradeSum = 0;\n  for (let i = 0; i < grades.length; i++) {\n    let gpa = grades[i];\n    gradeSum += gpa;\n  }\n  if (gradeSum >= 3.7) {\n    letterGrade.push('A');\n  }\n  else if (gradeSum >= 3.3 && gradeSum <= 3.7) {\n    letterGrade.push('A-');\n  }\n  else if (gradeSum >= 3.0 && gradeSum <= 3.3) {\n    letterGrade.push('B+');\n  }\n  else if (gradeSum >= 2.7 && gradeSum <= 3.0) {\n    letterGrade.push('B');\n  }\n  else if (gradeSum >= 2.3 && gradeSum <= 2.7) {\n    letterGrade.push('B-');\n  }\n  else if (gradeSum >= 2.0 && gradeSum <= 2.3) {\n    letterGrade.push('C+');\n  }\n  else if (gradeSum >= 1.7 && gradeSum <= 2.0) {\n    letterGrade.push('C');\n  }\n  else if (gradeSum >= 1.3 && gradeSum <= 1.7) {\n    letterGrade.push('C-');\n  }\n  else if (gradeSum >= 1.0 && gradeSum <= 1.3) {\n    letterGrade.push('D+');\n  }\n  else if (gradeSum >= 0.7 && gradeSum <= 1.0) {\n    letterGrade.push('D');\n  }\n  else if (gradeSum >= 0.0 && gradeSum <= 0.7) {\n    letterGrade.push('D-');\n  }\n  else {\n    letterGrade.push('E');\n  }\n  return letterGrade;\n};\n\n/*\n  There are a total of n courses you have to take, labeled from 0 to n - 1.\n  Some courses may have prerequisites, for example to take course 0 you have to first take course 1,\n  which is expressed as a pair: [0,1]\n  Given the total number of courses and a list of prerequisite pairs,\n  return the ordering of courses you should take to finish all courses.\n  There may be multiple correct orders, you just need to return one of them.\n  If it is impossible to finish all courses, return an empty array.\n\n  For example:\n  2, [[1,0]]\n  There are a total of 2 courses to take.\n  To take course 1 you should have finished course 0.\n  So the correct course order is [1,0]\n\n  4, [[1,0],[2,0],[3,1],[3,2]]\n  There are a total of 4 courses to take.\n  To take course 3 you should have finished both courses 1 and 2.\n  Both courses 1 and 2 should be taken after you finished course 0.\n  So one correct course order is [3,2,1,0].\n  Another correct ordering is[3,1,2,0].\n  */\nconst nmueriaclCourseOrder = (numCourses, prerequisites) => {\n  let result = [];\n  let visited = [];\n  let nodes = prerequisites.map(([from, to]) => [from, to]);\n  while (nodes.length > 0) {\n    let node = nodes.shift();\n    let nodeLength = node.length;\n    let nodeId = node[0];\n    let nodeIdLength = nodeId.length;\n    if (visited.indexOf(nodeId)!== -1) {\n      continue;\n    }\n    visited.push(nodeId);\n    if (nodeIdLength === numCourses) {\n      result.push(nodeId.slice(0, -1));\n    }\n    else {\n      let nextNode = nodes.filter(node => node[0] === nodeId);\n      if (nextNode.length > 0) {\n        nodes.push(nextNode.shift());\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  You are climbing a stair case. The i-th time you can either climb 1 or 2 steps.\n  How many different ways can you climb to the top?\n\n  Note: Given input is guaranteed to be a non-negative number.\n  */\nconst nmueriaclStaircase = (steps) => {\n  let result = 1;\n  for (let i = 1; i <= steps; i++) {\n    result *= (i + 1);\n  }\n  return result;\n};\n\nmodule.exports = {\n  nmueriaclLetterGrade,\n  nmueriaclCourseOrder,\n  nmueriaclStaircase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let num = 0;\n  for (let i = 0; i < string.length; i++) {\n    if (string.charCodeAt(i) % 2 === 0) {\n      num = 0;\n      break;\n    }\n    num = num + 1;\n  }\n  if (num === string.length) {\n    return true;\n  }\n  return false;\n};\n\nconst primeLengthTest = (string) => {\n  return primeLength(string) === true;\n};\n\nconst primeLengthConvert = (string) => {\n  return parseInt(string, 10);\n};\n\nmodule.exports = {\n  primeLength,\n  primeLengthTest,\n  primeLengthConvert\n};\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 1\n  }\n\n  const num = new Set(Array.from(Array(n)).map(() => 1))\n  const sum = new Set(Array.from(Array(n - 1)).map(() => 0))\n\n  for (let i = 1; i < n; i++) {\n    for (let j = 1; j <= i; j++) {\n      sum.add(i - j + 1)\n    }\n  }\n\n  return num.size + sum.size\n}\n\nconst test = (n) => {\n  console.log(startsOneEnds(n))\n}\n\nconst main = () => {\n  for (let i = 1; i < 1000; i++) {\n    test(i)\n  }\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const binStr = (N).toString(2);\n  return binStr.split('').reduce((prev, current) => prev + parseInt(current), 0);\n};\n\nexport default solve;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 === 1) {\n      result += lst[i];\n    }\n  }\n  return result;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const words = s.split(' ');\n  const sortedWords = words.sort((a, b) => a.charCodeAt(0) - b.charCodeAt(0));\n  const shuffledWords = sortedWords.join(' ');\n  return shuffledWords;\n};\n\nconsole.log(antSihuffle('Hi'));\nconsole.log(antSihuffle('hello'));\nconsole.log(antSihuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = []\n  for (let i = 0; i < lst.length; i++) {\n    const cols = []\n    for (let j = 0; j < lst[i].length; j++) {\n      if (lst[i][j] === x) {\n        rows.push([i, j])\n        cols.push(j)\n      }\n    }\n    rows.sort((a, b) => a[0] - b[0])\n    cols.sort((a, b) => a - b)\n    rows.reverse()\n    cols.reverse()\n    rows.forEach(row => cols.forEach(col => rows.push([row[0], col])))\n  }\n  return rows\n}\n\nconst test = () => {\n  const lst = [[1,2,3,4,5,6], [1,2,3,4,1,6], [1,2,3,4,5,1]]\n  console.log(getRow(lst, 4))\n  console.log(getRow(lst, 3))\n  console.log(getRow(lst, 1))\n  console.log(getRow(lst, 0))\n}\n\ntest()<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if(array.length === 0) return array;\n  let sortedArray = array.slice();\n  sortedArray.sort((a, b) => {\n    return a - b;\n  });\n  if(sortedArray[0] % 2 === 1) sortedArray.sort((a, b) => {\n    return b - a;\n  });\n  return sortedArray;\n}\n\nconst test = () => {\n  console.log(sortArray([1, 5, 2, 3, 0, 4]));\n}\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated.\n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverse = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseIt = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with all of the letters in the string swapped.\n */\nconst flip = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with all of the letters in the string flipped.\n */\nconst flipIt = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseLast = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseFirst = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseMiddle = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseBoth = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseLastReverseFirst = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseMiddleReverseFirst = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseMiddleReverseLast = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseLastReverseMiddle = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseMiddleReverseLast = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseLastReverseBoth = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseMiddleReverseBoth = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseBothReverseFirst = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseBothReverseLast = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\n/*\n *  Write a function that takes a string and returns a new string \n *  with the first and last character swapped.\n */\nconst reverseBothReverseMiddle = (s) => {\n  // TODO: Implement encryption.\n  return s\n}\n\nmodule.exports = {\n  encrypt,\n  decrypt,\n  reverse,\n  reverseIt,\n  flip,\n  flipIt,\n  reverseLast,\n  reverseFirst,\n  reverseMiddle,\n  reverseBoth,\n  reverseLastReverseFirst,\n  reverseMiddleReverseFirst,\n  reverseMiddleReverseLast,\n  reverseLastReverseMiddle,\n  reverseMiddleReverseLast,\n  reverseLastReverseBoth,\n  reverseMiddleReverseBoth,\n  reverseBothReverseFirst,\n  reverseBothReverseLast,\n  reverseBothReverseMiddle\n}\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n    let next = null;\n    for (let item of lst) {\n        if (next == null) {\n            next = item;\n        } else if (item < next) {\n            next = item;\n        }\n    }\n    return next;\n};\n\n/*\n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallsetII = (lst) => {\n    let prev = null;\n    for (let item of lst) {\n        if (prev == null) {\n            prev = item;\n        } else if (item > prev) {\n            prev = item;\n        }\n    }\n    return prev;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  let count = 0;\n  for (let i = 0; i < S.length; i++) {\n    let c = S[i];\n    if (c === \".\" || c === \"?\" || c === \"!\") {\n      count++;\n      i++;\n      continue;\n    }\n    while (i < S.length - 1 && S[i + 1]!== c) {\n      i++;\n    }\n    i++;\n  }\n  return count;\n}\n\n// Test\nconst S = \"Hello world. The sky is blue. The sun is shining. I love this weather.\";\nconsole.log(isBoerd(S));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const sum = x + y + z;\n  return x === sum || y === sum || z === sum;\n};\n\n//anyInt(3, 2, 2)\n//anyInt(3, -2, 1)\n//anyInt(3.6, -2.2, 2)\n//anyInt(1, -2, 1)\n//anyInt(2, 1, -2)\n//anyInt(2, 1, 1)\n//anyInt(2, 2, 1)\n//anyInt(2, 2, 2)\n//anyInt(2, 2, 3)\n//anyInt(2, 3, 2)\n//anyInt(2, 3, 3)\n//anyInt(2, 3, 4)\n//anyInt(2, 4, 3)\n//anyInt(2, 4, 4)\n//anyInt(2, 4, 5)\n//anyInt(2, 5, 4)\n//anyInt(2, 5, 5)\n//anyInt(2, 5, 6)\n//anyInt(2, 6, 5)\n//anyInt(2, 6, 6)\n//anyInt(2, 6, 7)\n//anyInt(2, 7, 6)\n//anyInt(2, 7, 7)\n//anyInt(2, 7, 8)\n//anyInt(2, 8, 7)\n//anyInt(2, 8, 8)\n//anyInt(2, 8, 9)\n//anyInt(2, 9, 8)\n//anyInt(2, 9, 9)\n//anyInt(2, 9, 10)\n//anyInt(2, 10, 9)\n//anyInt(2, 10, 10)\n//anyInt(2, 10, 11)\n//anyInt(2, 11, 10)\n//anyInt(2, 11, 11)\n//anyInt(2, 11, 12)\n//anyInt(2, 12, 11)\n//anyInt(2, 12, 12)\n//anyInt(2, 12, 13)\n//anyInt(2, 13, 12)\n//anyInt(2, 13, 13)\n//anyInt(2, 13, 14)\n//anyInt(2, 14, 13)\n//anyInt(2, 14, 14)\n//anyInt(2, 14, 15)\n//anyInt(2, 15, 14)\n//anyInt(2, 15, 15)\n//anyInt(2, 15, 16)\n//anyInt(2, 16, 15)\n//anyInt(2, 16, 16)\n//anyInt(2, 16, 17)\n//anyInt(2, 17, 16)\n//anyInt(2, 17, 17)\n//anyInt(2, 17, 18)\n//anyInt(2, 18, 17)\n//anyInt(2, 18, 18)\n//anyInt(2, 18, 19)\n//anyInt(2, 19, 18)\n//anyInt(2, 19, 19)\n//anyInt(2, 19, 20)\n//anyInt(2, 20, 19)\n//anyInt(2, 20, 20)\n//anyInt(2, 20, 21)\n//anyInt(2, 21, 20)\n//anyInt(2, 21, 21)\n//anyInt(2, 21, 22)\n//anyInt(2, 22, 21)\n//anyInt(2, 22, 22)\n//anyInt(2, 22, 23)\n//anyInt(2, 23, 22)\n//anyInt(2, 23, 23)\n//anyInt(2, 23, 24)\n//anyInt(2, 24, 23)\n//anyInt(2, 24, 24)\n//anyInt(2, 24, 25)\n//anyInt(2, 25, 24)\n//anyInt(2, 25, 25)\n//anyInt(2, 25, 26)\n//anyInt(2, 26, 25)\n//anyInt(2, 26, 26)\n//anyInt(2, 26, 27)\n//anyInt(2, 27, 26)\n//anyInt(2, 27, 27)\n//anyInt(2, 27, 28)\n//anyInt(2, 28, 27)\n//anyInt(2, 28, 28)\n//anyInt(2, 28, 29)\n//anyInt(2, 29, 28)\n//anyInt(2, 29, 29)\n//anyInt(2, 29, 30)\n//anyInt(2, 30, 29)\n//anyInt(2, 30, 30)\n//anyInt(2, 30, 31)\n//anyInt(2, 31, 30)\n//anyInt(2, 31, 31)\n//anyInt(2, 31, 32)\n//anyInt(2, 32, 31)\n//anyInt(2, 32, 32)\n//anyInt(2, 32, 33)\n//anyInt(2, 33, 32)\n//anyInt(2, 33, 33)\n//anyInt(2, 33, 34)\n//anyInt(2, 34, 33)\n//anyInt(2, 34, 34)\n//anyInt(2, 34, 35)\n//anyInt(2, 35, 34)\n//anyInt(2, 35, 35)\n//anyInt(2, 35, 36)\n//anyInt(2, 36, 35)\n//anyInt(2, 36, 36)\n//anyInt(2, 36, 37)\n//anyInt(2, 37, 36)\n//anyInt(2, 37, 37)\n//anyInt(2, 37, 38)\n//anyInt(2, 38, 37)\n//anyInt(2, 38, 38)\n//anyInt(2, 38, 39)\n//anyInt(2, 39, 38)\n//anyInt(2, 39, 39)\n//anyInt(2, 39, 40)\n//anyInt(2, 40, 39)\n//anyInt(2, 40, 40)\n//anyInt(2, 40, 41)\n//anyInt(2, 41, 40)\n//anyInt(2"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = message.toUpperCase().replace(/[aeiou]/g, (x) => {\n    let d = x.charCodeAt(0);\n    let i = x.length;\n    while (i--) {\n      d = d - i;\n    }\n    d = d - 2;\n    d = d < 0? d + 26 : d;\n    return String.fromCharCode(d);\n  });\n  return encoded;\n}\n\nconst decode = (message) => {\n  let decoded = message.toLowerCase();\n  let decoded = decoded.replace(/(.)(?=\\1)/g, (x, i, s) => {\n    return x.toLowerCase();\n  });\n  return decoded;\n}\n\nmodule.exports = {\n  encode,\n  decode\n}\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const prime = (p) => {\n    if (p > 1) {\n      return p === 2? 1 : p >= 3 && p % 2 === 0? (prime(Math.pow(p, 1 / p))) : 0;\n    }\n    return 0;\n  };\n  const primeList = [];\n  const isPrime = (p) => {\n    for (let i = 0; i < primeList.length; i++) {\n      if (primeList[i] === p) {\n        return true;\n      }\n    }\n    return false;\n  };\n  const max = (a, b) => {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  };\n  const primeSum = (lst) => {\n    const sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n      if (isPrime(lst[i])) {\n        sum += lst[i];\n      }\n    }\n    return sum;\n  };\n  const primes = () => {\n    const maxPrime = max(prime(Math.sqrt(Number.MAX_SAFE_INTEGER)), prime(Number.MAX_SAFE_INTEGER));\n    for (let i = 0; i < maxPrime; i++) {\n      if (primeList.indexOf(i) === -1) {\n        primeList.push(i);\n      }\n    }\n  };\n  primes();\n  return primeSum(lst);\n};\n\nconsole.log(ksjkasddk([0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]));\nconsole.log(ksjkasddk([1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1]));\nconsole.log(ksjkasddk([1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3]));\nconsole.log(ksjkasddk([0,724,32,71,99,32,6,0,5,91,83,0,5,6]));\nconsole.log(ksjkasddk([0,81,12,3,1,21]));\nconsole.log(ksjkasddk([0,8,1,2,1,7]));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let result = true;\n    let keys = Object.keys(dict);\n    keys.forEach( (key) => {\n        if(typeof dict[key]!=='string'){\n            result = false;\n        }\n        if(typeof dict[key] ==='string'){\n            if(dict[key].toLowerCase().charAt(0) === dict[key].toUpperCase().charAt(0)){\n                result = false;\n            }\n        }\n    });\n    return result;\n}\n\nconst checkDictCase2 = (dict) => {\n    let result = true;\n    let keys = Object.keys(dict);\n    keys.forEach( (key) => {\n        if(typeof dict[key]!=='string'){\n            result = false;\n        }\n        if(typeof dict[key] ==='string'){\n            if(dict[key].toLowerCase() === dict[key].toUpperCase()){\n                result = false;\n            }\n        }\n    });\n    return result;\n}\n\n/*\n  Given an array, return true if the array contains at least one element that is a string\n  Examples:\n  containsString([1, 2, 3]) should return false.\n  containsString([1, \"a\", \"b\"]) should return true.\n  containsString([1, \"b\", \"a\"]) should return false.\n*/\nconst containsString = (list) => {\n    let result = false;\n    list.forEach( (element) => {\n        if(typeof element ==='string'){\n            result = true;\n        }\n    });\n    return result;\n}\n\n/*\n  Given an array, return true if the array contains at least one element that is a number\n  Examples:\n  containsNumber([1, 2, 3]) should return true.\n  containsNumber([1, \"a\", \"b\"]) should return false.\n  containsNumber([1, \"b\", \"a\"]) should return false.\n*/\nconst containsNumber = (list) => {\n    let result = false;\n    list.forEach( (element) => {\n        if(typeof element === 'number'){\n            result = true;\n        }\n    });\n    return result;\n}\n\n/*\n  Given a dictionary, return true if the dictionary contains at least one element that is a number\n  Examples:\n  containsNumber({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  containsNumber({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  containsNumber({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n*/\nconst containsNumber2 = (dict) => {\n    let result = false;\n    let keys = Object.keys(dict);\n    keys.forEach( (key) => {\n        if(typeof dict[key] === 'number'){\n            result = true;\n        }\n    });\n    return result;\n}\n\n/*\n  Given a dictionary, return true if the dictionary contains at least one element that is a boolean\n  Examples:\n  containsBool({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  containsBool({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  containsBool({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n*/\nconst containsBool = (dict) => {\n    let result = false;\n    let keys = Object.keys(dict);\n    keys.forEach( (key) => {\n        if(typeof dict[key] === 'boolean'){\n            result = true;\n        }\n    });\n    return result;\n}\n\n/*\n  Given a dictionary, return true if the dictionary contains at least one element that is an object\n  Examples:\n  containsObject({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  containsObject({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  containsObject({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n*/\nconst containsObject = (dict) => {\n    let result = false;\n    let keys = Object.keys(dict);\n    keys.forEach( (key) => {\n        if(typeof dict[key] === 'object'){\n            result = true;\n        }\n    });\n    return result;\n}\n\n/*\n  Given a dictionary, return true if the dictionary contains at least one element that is an array\n  Examples:\n  containsArray({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  containsArray({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  containsArray({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n*/\nconst containsArray = (dict) => {\n    let result = false;\n    let keys = Object.keys(dict);\n    keys.forEach( (key) => {\n        if(typeof dict[key] === 'object' && typeof dict[key].length === 'number'){\n            result = true;\n        }\n    });\n    return result;\n}\n\n/*\n  Given a dictionary, return true if the dictionary contains at least one element that is a string\n  Examples:\n  containsString({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  containsString({\"a\":\"apple\", \"A\":\"banana\","}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = [2]\n  for (let i = 3; i < n; i += 2) {\n    if (isPrime(i)) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n// console.log(countUpTo(20))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let x = 0;\n  let y = 0;\n  while (a > 0) {\n    x = x + a % 10;\n    a = a / 10;\n  }\n  while (b > 0) {\n    y = y + b % 10;\n    b = b / 10;\n  }\n  return x * y;\n};\n\nconst multiply = (a, b) => {\n  let x = 0;\n  let y = 0;\n  while (a > 0) {\n    x = x + a % 10;\n    a = a / 10;\n  }\n  while (b > 0) {\n    y = y + b % 10;\n    b = b / 10;\n  }\n  return x * y;\n};\n\nconst multiply = (a, b) => {\n  let x = 0;\n  let y = 0;\n  while (a > 0) {\n    x = x + a % 10;\n    a = a / 10;\n  }\n  while (b > 0) {\n    y = y + b % 10;\n    b = b / 10;\n  }\n  return x * y;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n    let count = 0;\n    for(let i = 0; i < s.length; i += 2) {\n        if(s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n            count++;\n        }\n    }\n    return count;\n}\n\nmodule.exports = countUpper;<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  let intValue = parseInt(value);\n  let intDiff = Math.abs(intValue - Math.floor(intValue));\n  let absDiff = Math.abs(intValue - Math.ceil(intValue));\n\n  if (intDiff === 0) {\n    return intValue;\n  }\n  if (absDiff < intDiff) {\n    return intValue;\n  }\n  return intValue - intDiff;\n};\n\nmodule.exports = closestInetger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  const list = [];\n  for (let i = 1; i <= n; i++) {\n    const num = i;\n    if (num % 2 === 1) {\n      list.push(num);\n    } else {\n      list.push(num * 2);\n    }\n  }\n  return list;\n};\n\nmakeAPile(3).forEach((num) => console.log(num));\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const words = s.split(/[,;]/)\n  return words.filter((x) => x.length > 0)\n}\n\nconst getWords = (s) => {\n  const words = wordsString(s)\n  return words\n}\n\nconsole.log(getWords(\"Hi, my name is John\"))\n\n// # Output:\n// [ \"Hi\", \"my\", \"name\", \"is\", \"John\" ]\n// [ \"One\", \"two\", \"three\", \"four\", \"five\", \"six\" ]\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let i = 1;\n  while (i < x) {\n    i *= 2;\n  }\n  while (i <= y) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i++;\n  }\n  return -1;\n};\n\nmodule.exports = chooseNum;\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const n1 = n > m? -1 : n;\n  const n2 = m < n? -1 : m;\n  const n3 = n1 + n2;\n  const n4 = n3 >> 1;\n  return n4;\n};\n\nmodule.exports = roundedAvg;\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  if(x.length === 0) return [];\n  if(x.length === 1) return [x[0]];\n  \n  const arr = [];\n  for(let i = 0; i < x.length; i++) {\n    const digits = x.slice(i);\n    let x = 0;\n    for(let j = 0; j < digits.length; j++) {\n      x = x * 10 + digits[j];\n      if(x % 2 === 0) {\n        break;\n      }\n    }\n    if(j === digits.length) {\n      arr.push(x);\n    }\n  }\n  \n  return arr;\n}\n\n// console.log(uniqueDigtis([15, 33, 1422, 1]));\n// console.log(uniqueDigtis([152, 323, 1422, 10]));<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  const len = arr.length\n  const arrReverse = arr.slice().reverse()\n  const arrSorted = arr.slice().sort((a, b) => a - b)\n  \n  const x = arrReverse.map((x, i) => arrSorted[i])\n  return x.map( (n, i) => ({ n, i }))\n}\n\nconst ybSort = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybReverse = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybReverseSort = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybReverseSortReverse = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybReverseSortReverse2 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse2 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse3 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse4 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse5 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse6 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse7 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse8 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse9 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse10 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse11 = (arr) => {\n  const sorted = ybLength(arr)\n  const sortedReverse = sorted.slice().reverse()\n  const sortedNums = sortedReverse.map((x) => x.n)\n  \n  return sortedNums\n}\n\nconst ybSortReverse12 = (arr) => {\n  const sorted = ybLength(arr)\n  const sorted"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const f = (x) => {\n    const factorial = (x) => {\n      if (x === 0) {\n        return 1;\n      }\n      return x * f(x - 1);\n    };\n    return factorial(x);\n  };\n  return f(n);\n};\n\nconst f2 = (n) => {\n  const f = (x) => {\n    const factorial = (x) => {\n      if (x === 0) {\n        return 1;\n      }\n      return x * f(x - 1);\n    };\n    return factorial(x);\n  };\n  return f(n);\n};\n\n// f2(10) === [1, 2, 6, 24, 15]\n\n// f(10) === [1, 2, 6, 24, 15]\n\n// f2(10) === [1, 2, 6, 24, 15]\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odds = []\n  const evens = []\n  for (let i = 1; i <= n; i++) {\n    const isOdd = (i % 2) === 0\n    if (isOdd) {\n      odds.push(i)\n    } else {\n      evens.push(i)\n    }\n  }\n  return (odds, evens)\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  const arr2 = arr.map(v => {\n    return v > 0? v : v < 0? Math.abs(v) : 0;\n  })\n  const n = arr2.reduce((a, b) => a + b, 0)\n  return n > 0? arr2.filter((v, i, arr2) => {\n    return arr2.slice(i + 1).every(v => v >= 0)\n  }) : 0\n}\n\nmodule.exports = countNmus<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if(arr.length === 0) {\n    return true;\n  }\n  const min = Math.min.apply(null, arr);\n  const count = 0;\n  for(let i = arr.length - 1; i >= 0; i--) {\n    if(arr[i] === min) {\n      count++;\n    } else if(count > 0) {\n      arr.splice(i, count);\n      break;\n    }\n  }\n  return count === 0;\n};\n\n/*\n  moveOneBall([3, 4, 5, 1, 2])==>true\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  moveOneBall([3, 4, 5, 1, 2, 6])==>false\n  moveOneBall([3, 4, 5, 1, 2, 6, 7, 8])==>true\n*/\nconst moveTwoBall = (arr) => {\n  const moveOneBall = (arr) => {\n    if(arr.length === 0) {\n      return true;\n    }\n    const min = Math.min.apply(null, arr);\n    const count = 0;\n    for(let i = arr.length - 1; i >= 0; i--) {\n      if(arr[i] === min) {\n        count++;\n      } else if(count > 0) {\n        arr.splice(i, count);\n        break;\n      }\n    }\n    return count === 0;\n  };\n  return moveOneBall(arr) && moveOneBall(arr.reverse());\n};\n\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 4, 5, 1, 2, 6]);\nmoveOneBall([3, 4, 5, 1, 2, 6, 7, 8]);\nmoveTwoBall([3, 4, 5, 1, 2]);\nmoveTwoBall([3, 5, 4, 1, 2]);\nmoveTwoBall([3, 4, 5, 1, 2, 6]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]);\nmoveTwoBall([3, 4, 5, 1, 2, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n    let len1 = lst1.length\n    let len2 = lst2.length\n    let index1 = 0\n    let index2 = 0\n    let i = 0\n    let j = 0\n    let result = \"NO\"\n\n    while (index1 < len1 && index2 < len2) {\n        if (lst1[index1] < lst2[index2]) {\n            if (lst1[index1] % 2 == 1) {\n                index1 += 1\n            } else {\n                index1 += 1\n            }\n        } else if (lst1[index1] > lst2[index2]) {\n            if (lst2[index2] % 2 == 1) {\n                index2 += 1\n            } else {\n                index2 += 1\n            }\n        } else {\n            if (lst1[index1] % 2 == 0) {\n                result = \"YES\"\n                index1 += 1\n                index2 += 1\n            } else {\n                index1 += 1\n            }\n        }\n    }\n\n    return result\n}\n\nconst xechange_test = () => {\n    const testArr1 = [1, 2, 3, 4]\n    const testArr2 = [1, 2, 3, 4]\n    const expectedResult = \"YES\"\n\n    assert.equal(xechange(testArr1, testArr2), expectedResult)\n}\n\nmodule.exports = {\n    xechange,\n    xechange_test\n}<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letterCount = {};\n  const letterRegex = /[a-z]/;\n  let str = test;\n  \n  if(!str) return {};\n  \n  str.split(' ').forEach((letter) => {\n    if(letterCount[letter] === undefined)\n      letterCount[letter] = 0;\n    letterCount[letter]++;\n  });\n  return letterCount;\n};\n\ndescribe('histogram', () => {\n  it('should return empty dictionary when passed an empty string', () => {\n    const test = histogram('');\n    expect(test).toEqual({});\n  });\n  \n  it('should return the most repeated letter', () => {\n    const test = histogram('a b c');\n    expect(test).toEqual({'a': 2, 'b': 1, 'c': 1});\n  });\n  \n  it('should return all the most repeated letters', () => {\n    const test = histogram('a b b a');\n    expect(test).toEqual({'a': 2, 'b': 2});\n  });\n  \n  it('should return a dictionary with the most repeated letter even if they are repeated', () => {\n    const test = histogram('a b c a b');\n    expect(test).toEqual({'a': 2, 'b': 2});\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n    // console.log('s:', s, 'c:', c);\n    const len = s.length;\n    const i = 0;\n    const j = 0;\n    const result = [];\n\n    for (let i = 0; i < len; i++) {\n        if (s[i] === c[j]) {\n            j++;\n            if (j >= c.length) {\n                j = 0;\n            }\n        } else {\n            result.push(s[i]);\n        }\n    }\n\n    return [result.join(''), (i === j)];\n};\n\nconst test = (s, c) => {\n    let result = reveresDelete(s, c);\n    console.log('s:', s, 'c:', c,'res:', result);\n};\n\ntest('abcdef', 'ae');\ntest('abcdedcba', 'ab');\ntest('abcdedcba', 'ac');\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = (s) => {\n    let count = 0\n    for (let i = 0; i < s.length; i += 1) {\n      if (s[i].match(/^\\d+$/)) {\n        count += parseInt(s[i]) % 2\n      }\n    }\n    return count\n  }\n  const result = []\n  for (let i = 0; i < lst.length; i += 1) {\n    result.push(count(lst[i]))\n  }\n  return result\n}\n\nmodule.exports = oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = sumUp(nums);\n  return (\n    sum === 0? 0 :\n    minSumOfSubArrays(nums, sum)\n  );\n};\n\nconst minSumOfSubArrays = (nums, sum) => {\n  if (nums.length === 0) {\n    return sum;\n  }\n\n  const sumOfLeft = sum(nums, 0, nums.length - 1);\n  if (sumOfLeft < sum) {\n    return sumOfLeft;\n  }\n\n  return sumOfLeft + minSumOfSubArrays(nums, sum - sumOfLeft);\n};\n\nconst sum = (nums, start, end) => {\n  return nums.reduce((acc, elem, i) => {\n    if (i === start) {\n      return acc + elem;\n    }\n    return acc + nums[i - 1];\n  }, 0);\n};\n\n// console.log(minSubArraySum([2, 3, 4, 1, 2, 4]));\n// console.log(minSubArraySum([-1, -2, -3]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(minSubArraySum([2, 2, 4, 1, 2, 4]));\n// console.log(min"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const rows = grid.length\n  const cols = grid[0].length\n  const buckets = rows * cols\n  const count = new Array(buckets)\n  let i, j\n\n  for (i = 0; i < rows; i++) {\n    for (j = 0; j < cols; j++) {\n      if (grid[i][j] === 1) {\n        count[grid[i][j] - 1]++\n      }\n    }\n  }\n\n  let minCount = Infinity\n  for (i = 0; i < buckets; i++) {\n    minCount = Math.min(minCount, count[i])\n  }\n\n  return minCount < capacity? minCount : 0\n}\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n    let sortArr = arr.slice().sort((a, b) => a > b? 1 : a < b? -1 : 0);\n    return sortArr.map(i => i);\n};\n\n/*\n  This Kata, is designed to sort an array of Strings based on the number of\n  leading zeros in their binary representation.\n  It must be implemented like this:\n  >>> sortArray(['1', '10', '100', '11', '101']) == ['10', '100', '11', '101', '1']\n  >>> sortArray(['2', '3', '4', '5', '6', '7', '8', '9']) == ['9', '8', '7', '6', '5', '4', '3', '2']\n  >>> sortArray(['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']) == ['9', '8', '7', '6', '5', '4', '3', '2', '1', '0']\n  */\nconst sortString = (arr) => {\n    let sortArr = arr.slice().sort((a, b) => {\n        let aStr = a.split('').reverse().join('');\n        let bStr = b.split('').reverse().join('');\n        let aInt = parseInt(aStr);\n        let bInt = parseInt(bStr);\n\n        while (aInt > bInt) {\n            aStr = aStr.split('').reverse().join('');\n            aInt = parseInt(aStr);\n        }\n\n        while (aInt < bInt) {\n            bStr = bStr.split('').reverse().join('');\n            bInt = parseInt(bStr);\n        }\n\n        if (aInt === bInt) {\n            let aStr = aStr.split('').reverse().join('');\n            let bStr = bStr.split('').reverse().join('');\n            let aInt = parseInt(aStr);\n            let bInt = parseInt(bStr);\n\n            while (aInt > bInt) {\n                aStr = aStr.split('').reverse().join('');\n                aInt = parseInt(aStr);\n            }\n\n            while (aInt < bInt) {\n                bStr = bStr.split('').reverse().join('');\n                bInt = parseInt(bStr);\n            }\n\n            if (aInt === bInt) {\n                return a.toLowerCase() > b.toLowerCase()? 1 : -1;\n            } else {\n                return aInt > bInt? 1 : -1;\n            }\n        } else {\n            return aInt > bInt? 1 : -1;\n        }\n    });\n    return sortArr.map(i => i);\n};\n\n/*\n  This Kata, is designed to sort an array of Numbers based on their value.\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortNumber = (arr) => {\n    let sortArr = arr.slice().sort((a, b) => a > b? 1 : a < b? -1 : 0);\n    return sortArr.map(i => i);\n};\n\nmodule.exports = {\n    sortArray,\n    sortString,\n    sortNumber\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  let result = [];\n  let count = 0;\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/[a-zA-Z]/)){\n      count++;\n      if(count === n){\n        result.push(s.slice(i, i+n));\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string s, you have to implement a function that finds the length of the longest substring that contains only 'a' and 'A' characters.\n  If the length of the substring is equal to the length of the given string then the function should return the empty string.\n  Examples:\n  substrLen(\"aa\", \"a\") ==> 1\n  substrLen(\"aaa\", \"a\") ==> 3\n  substrLen(\"aaaa\", \"a\") ==> 0\n  substrLen(\"aaaaaa\", \"a\") ==> 3\n  substrLen(\"aaaaa\", \"a\") ==> 4\n*/\nconst substrLen = (s, sub) => {\n  let count = 0;\n  let i = 0;\n  let j = 0;\n  let max = 0;\n  while(i < s.length){\n    if(s[i] === sub){\n      count++;\n    }\n    if(count > max){\n      max = count;\n      j = i;\n    }\n    i++;\n  }\n  return max === count? \"\" : s.slice(j, i);\n};\n\n/*\n  Given a string s, you have to implement a function that checks if the string contains any of the given strings.\n  If the string contains any of the given strings then the function should return the empty string.\n  Examples:\n  contains(\"sam\", \"ma\", \"j\") ==> \"\"\n  contains(\"sam\", \"ma\", \"j\", \"p\") ==> \"\"\n  contains(\"sam\", \"ma\", \"j\", \"p\") ==> \"sam\"\n  contains(\"sam\", \"ma\", \"j\", \"p\") ==> \"sam\"\n  contains(\"sam\", \"ma\", \"j\", \"p\") ==> \"p\"\n  contains(\"sam\", \"ma\", \"j\", \"p\") ==> \"p\"\n  contains(\"sam\", \"ma\", \"j\", \"p\") ==> \"j\"\n  contains(\"sam\", \"ma\", \"j\", \"p\") ==> \"j\"\n*/\nconst contains = (s, a) => {\n  for(let i = 0; i < a.length; i++){\n    if(s.indexOf(a[i]) > -1){\n      return a[i];\n    }\n  }\n  return \"\";\n};\n\n/*\n  Given two strings s and t, you have to implement a function that returns their intersection.\n  If the strings don't have an intersection then the function should return an empty string.\n  Examples:\n  intersection(\"sam\", \"ma\") ==> \"\"\n  intersection(\"sam\", \"ma\") ==> \"\"\n  intersection(\"sam\", \"ma\") ==> \"s\"\n  intersection(\"sam\", \"ma\") ==> \"m\"\n*/\nconst intersection = (s, t) => {\n  let result = \"\";\n  let index = 0;\n  while(s.indexOf(t[index]) > -1){\n    result += t[index];\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given two strings s and t, you have to implement a function that returns the longest common prefix of the given strings.\n  If there is no common prefix then the function should return an empty string.\n  Examples:\n  longestCommonPrefix(\"sam\", \"ma\") ==> \"\"\n  longestCommonPrefix(\"sam\", \"ma\") ==> \"\"\n  longestCommonPrefix(\"sam\", \"ma\") ==> \"sam\"\n  longestCommonPrefix(\"sam\", \"ma\") ==> \"sam\"\n  longestCommonPrefix(\"sam\", \"ma\") ==> \"sam\"\n  longestCommonPrefix(\"sam\", \"ma\") ==> \"sam\"\n*/\nconst longestCommonPrefix = (s, t) => {\n  let result = \"\";\n  let index = 0;\n  while(s.indexOf(t[index]) > -1){\n    result += t[index];\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given two strings s and t, you have to implement a function that returns the longest common suffix of the given strings.\n  If there is no common suffix then the function should return an empty string.\n  Examples:\n  longestCommonSuffix(\"sam\", \"ma\") ==> \"\"\n  longestCommonSuffix(\"sam\", \"ma\") ==> \"\"\n  longestCommonSuffix(\"sam\", \"ma\") ==> \"ma\"\n  longestCommonSuffix(\"sam\", \"ma\") ==> \"ma\"\n  longestCommonSuffix(\"sam\", \"ma\") ==> \"ma\"\n  longestCommonSuffix(\"sam\", \"ma\") ==> \"ma\"\n*/\nconst longestCommonSuffix = (s, t) => {\n  let result = \"\";\n  let index = 0;\n  while(s.indexOf(t[index]) > -1){\n    result += t[index];\n    index++;\n  }\n  return result;\n};\n\n/*\n  Given two strings s and t, you have to implement a function that returns a string containing the characters that appear in both the given strings.\n  If there are no common characters then the function should return an empty string.\n  Examples:\n  commonChars(\"sam\", \"ma\") ==> \"\"\n  commonChars(\"sam\", \"ma\") =="}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  const letterCount = word.length\n  const wordLetters = word.split('')\n  const vowelCount = wordLetters.filter((letter) => isVowel(letter)).length\n  let closestIndex = 0\n  if (vowelCount === 0) return \"\"\n  for (let i = letterCount - 1; i >= 0; i--) {\n    if (isVowel(wordLetters[i])) {\n      if (closestIndex === 0 || Math.abs(i - closestIndex) > Math.abs(i - closestIndex - 1)) {\n        closestIndex = i\n      }\n    }\n  }\n  return wordLetters[closestIndex]\n}\n\nconst isVowel = (letter) => {\n  return letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u'\n}\n\n/*\n  Given a list of words, return all the words that can be obtained by replacing\n  the rightmost consonant with a vowel.\n\n  Example:\n  getRightVowels(\"candy\", \"car\", \"go\") ==> [\"car\", \"go\"]\n  getRightVowels(\"candy\", \"car\") ==> [\"car\"]\n  getRightVowels(\"candy\") ==> [\"candy\"]\n  getRightVowels(\"car\") ==> [\"car\"]\n  getRightVowels(\"go\") ==> [\"go\"]\n  getRightVowels(\"\") ==> []\n  */\nconst getRightVowels = (...words) => {\n  const vowelCount = words.length\n  const vowelIndex = vowelCount - 1\n  const letterCount = words[vowelIndex].length\n  const vowel = words[vowelIndex][letterCount - 1]\n  const vowelList = words.filter((word) => word.slice(0, letterCount - 1).endsWith(vowel))\n  return vowelList\n}\n\nconst getClosestLetter = (letter, letters) => {\n  let closestLetter = letters[0]\n  let minDistance = letters[0]\n  for (let i = 0; i < letters.length; i++) {\n    const distance = Math.abs(letter - letters[i])\n    if (distance < minDistance) {\n      closestLetter = letters[i]\n      minDistance = distance\n    }\n  }\n  return closestLetter\n}\n\nconst getClosestVowel = (letter, vowels) => {\n  let closestVowel = vowels[0]\n  let minDistance = vowels[0]\n  for (let i = 0; i < vowels.length; i++) {\n    const distance = Math.abs(letter - vowels[i])\n    if (distance < minDistance) {\n      closestVowel = vowels[i]\n      minDistance = distance\n    }\n  }\n  return closestVowel\n}\n\nconst isVowel = (letter) => {\n  return letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u'\n}\n\n/*\n  Given a string, find the longest word that can be built from the string\n  without any two consecutive consonants.\n\n  Example:\n  getLongestWord(\"ab\") ==> \"ab\"\n  getLongestWord(\"aa\") ==> \"aa\"\n  getLongestWord(\"a\") ==> \"a\"\n  getLongestWord(\"bc\") ==> \"bc\"\n  getLongestWord(\"c\") ==> \"c\"\n  getLongestWord(\"aabb\") ==> \"aabb\"\n  getLongestWord(\"aa\") ==> \"aa\"\n  getLongestWord(\"a\") ==> \"a\"\n  getLongestWord(\"\") ==> \"\"\n  */\nconst getLongestWord = (string) => {\n  const wordCount = string.length\n  const vowelCount = string.split('').filter((letter) => isVowel(letter)).length\n  let longestWord = string\n  if (wordCount > 0 && vowelCount === 0) {\n    longestWord = string\n  }\n  else if (wordCount > 1) {\n    for (let i = 0; i < string.length - 1; i++) {\n      const word = string.slice(0, i + 1)\n      if (word.includes(string[i + 1])) {\n        longestWord = word\n      }\n    }\n  }\n  return longestWord\n}\n\nconst isVowel = (letter) => {\n  return letter === 'a' || letter === 'e' || letter === 'i' || letter === 'o' || letter === 'u'\n}\n\n/*\n  Given a string, find the string with the maximum number of vowels.\n\n  Example:\n  getMaxVowelCount(\"aae\") ==> \"ae\"\n  getMaxVowelCount(\"o\") ==> \"o\"\n  getMaxVowelCount(\"ab\") ==> \"ab\"\n  getMaxVowelCount(\"a\") ==> \"a\"\n  getMaxVowelCount(\"\") ==> \"\"\n  */\nconst getMaxVowelCount = (string) => {\n  const vowelCount = string.split('').filter((letter) => isVowel(letter)).length\n  return string\n}\n\nexport {\n  getClosestVowel,\n  getClosestLetter,\n  getLongestWord,\n  getMaxVowelCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const [open, close] = lst;\n  let count = 0;\n  for (let i = 0; i < open.length; i++) {\n    count += (open[i] === '(')? 1 : -1;\n  }\n  for (let i = 0; i < close.length; i++) {\n    count += (close[i] === ')')? 1 : -1;\n  }\n  return count === 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  let maxmium = [];\n  for (let i = 0; i < k; i++) {\n    let cur = arr[i];\n    while (maxmium.length >= 1 && cur >= maxmium[maxmium.length - 1]) {\n      maxmium.pop();\n    }\n    maxmium.push(cur);\n  }\n  return maxmium;\n};\n\nconst maxmiumBySort = (arr, k) => {\n  arr.sort((a, b) => a - b);\n  return arr.slice(0, k);\n};\n\nconst test = require('ava');\nconst solution = require('../solutions/maxmium.js');\n\ntest('maxmium', (t) => {\n  t.deepEqual(maxmium(arr, k), expected);\n});\n\ntest('maxmium by sort', (t) => {\n  t.deepEqual(maxmiumBySort(arr, k), expected);\n});\n\nconst arr = [-3, -4, 5];\nconst k = 3;\nconst expected = [-4, -3, 5];\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (n % 2 === 0) {\n      acc += n;\n    }\n    return acc;\n  }, 0);\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let result = 0\n  let i = 0\n  let j = k - 1\n\n  while (i < arr.length && j >= 0) {\n    result += arr[i]\n    i++\n    j--\n  }\n\n  return result\n}\n\n// Test\nlet testArr = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlet testK = 4\n\nconsole.log(addElements(testArr, testK))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = 1;\n  let num = n;\n\n  while(num!== 1) {\n    if(num % 2 === 0) {\n      num = num / 2;\n    } else {\n      num = 3 * num + 1;\n    }\n\n    odd++;\n  }\n\n  return odd;\n}\n\nexport default getOddCollatz;<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (date.length === 0) {\n    return false;\n  }\n\n  const split = date.split('-');\n  const year = parseInt(split[0], 10);\n  const month = parseInt(split[1], 10);\n  const day = parseInt(split[2], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > daysInMonth(year, month)) {\n    return false;\n  }\n\n  if (month === 2) {\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nconsole.log(validDate('03-11-2000'));\nconsole.log(validDate('15-01-2012'));\nconsole.log(validDate('04-0-2040'));\nconsole.log(validDate('06-04-2020'));\nconsole.log(validDate('06/04/2020'));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/(\\s+|,)/)\n  return words\n}\n\n/**\n  Given a string of words, return a list of strings, one per line.\n  Examples\n  splitLines(\"Hello world!\") ➞ [\"Hello world!\"]\n  splitLines(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitLines(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst splitLines = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w + '\\n')\n}\n\n/**\n  Given a string of words, return a list of words with each word capitalized.\n  Examples\n  capitalize(\"Hello world!\") ➞ [\"Hello World!\"]\n  capitalize(\"Hello,world!\") ➞ [\"Hello, World!\"]\n  capitalize(\"abcdef\") ➞ [\"ABCDEF\"]\n  */\nconst capitalize = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.charAt(0).toUpperCase() + w.slice(1))\n}\n\n/**\n  Given a string of words, return a list of words with each word capitalized.\n  Examples\n  capitalize(\"Hello world!\") ➞ [\"Hello World!\"]\n  capitalize(\"Hello,world!\") ➞ [\"Hello, World!\"]\n  capitalize(\"abcdef\") ➞ [\"ABCDEF\"]\n  */\nconst capitalizeLines = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.charAt(0).toUpperCase() + w.slice(1) + '\\n')\n}\n\n/**\n  Given a string of words, return a list of words, each with a single consonant followed by a vowel.\n  Examples\n  consonants(\"Hello world!\") ➞ [\"hello\", \"world\"]\n  consonants(\"Hello,world!\") ➞ [\"hello\", \"world\"]\n  consonants(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst consonants = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.split('').slice(1).join(''))\n}\n\n/**\n  Given a string of words, return a list of words, each with a single vowel followed by a consonant.\n  Examples\n  vowels(\"Hello world!\") ➞ [\"hello\", \"world\"]\n  vowels(\"Hello,world!\") ➞ [\"hello\", \"world\"]\n  vowels(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst vowels = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.split('').slice(0, 1).join(''))\n}\n\n/**\n  Given a string of words, return a list of words, each with two consonant followed by a vowel.\n  Examples\n  twoConsonants(\"Hello world!\") ➞ [\"hello\", \"world\", \"world\"]\n  twoConsonants(\"Hello,world!\") ➞ [\"hello\", \"world\", \"world\"]\n  twoConsonants(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst twoConsonants = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.split('').slice(1).join(''))\n}\n\n/**\n  Given a string of words, return a list of words, each with two vowels followed by a consonant.\n  Examples\n  twoVowels(\"Hello world!\") ➞ [\"hello\", \"world\", \"world\"]\n  twoVowels(\"Hello,world!\") ➞ [\"hello\", \"world\", \"world\"]\n  twoVowels(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst twoVowels = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.split('').slice(0, 2).join(''))\n}\n\n/**\n  Given a string of words, return a list of words, each with one vowel followed by two consonants.\n  Examples\n  oneVowelConsonants(\"Hello world!\") ➞ [\"hello\", \"world\", \"world\", \"world\"]\n  oneVowelConsonants(\"Hello,world!\") ➞ [\"hello\", \"world\", \"world\", \"world\"]\n  oneVowelConsonants(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst oneVowelConsonants = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.split('').slice(1).join(''))\n}\n\n/**\n  Given a string of words, return a list of words, each with a consonant followed by one vowel.\n  Examples\n  consonantVowels(\"Hello world!\") ➞ [\"hello\", \"world\", \"world\"]\n  consonantVowels(\"Hello,world!\") ➞ [\"hello\", \"world\", \"world\"]\n  consonantVowels(\"abcdef\") ➞ [\"abcdef\"]\n  */\nconst consonantVowels = (txt) => {\n  const words = txt.split(/\\s+/)\n  return words.map(w => w.split('').slice(1).join(''))\n}\n\n/**\n  Given a string of words, return a list of words, each with a consonant followed by two vowels.\n  Examples\n  consonantVowels(\"Hello world!\") ➞ [\"hello\", \"world\", \"world\", \"world\"]\n  consonant"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const size = lst.length\n  if (size === 0) {\n    return true\n  }\n  if (size === 1) {\n    return true\n  }\n  let i = 0\n  let j = 1\n  while (i < size && j < size) {\n    if (lst[i] < lst[j]) {\n      i++\n    } else if (lst[i] > lst[j]) {\n      j++\n    } else {\n      // same number\n      if (i === j) {\n        j++\n      } else {\n        return false\n      }\n      i++\n      j++\n    }\n  }\n  return true\n}\n\nexport {isSorted}\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  let start = Math.min(interval1.start, interval2.start)\n  let end = Math.max(interval1.end, interval2.end)\n  return (end - start + 1) % 2 === 0\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n\nconst isPrime = (x) => {\n  let y = 1\n  while (y < x) {\n    if (x % y === 0) {\n      return false\n    }\n    y += 1\n  }\n  return true\n}\n\nconst isPrimeIntersection = (interval) => {\n  let intervalLength = interval.end - interval.start + 1\n  if (intervalLength % 2 === 0) {\n    return false\n  }\n\n  let start = interval.start\n  while (start < interval.end) {\n    if (isPrime(start)) {\n      return false\n    }\n    start += 1\n  }\n\n  let end = interval.end\n  while (end > interval.start) {\n    if (isPrime(end)) {\n      return false\n    }\n    end -= 1\n  }\n\n  return true\n}\n\nconst primeIntersections = (interval1, interval2) => {\n  let primeIntersections = []\n  let primeIntersection = intersection(interval1, interval2)\n  while (primeIntersection) {\n    primeIntersections.push(primeIntersection)\n    interval1.start = Math.max(interval1.start, primeIntersection.start)\n    interval1.end = Math.min(interval1.end, primeIntersection.end)\n    interval2.start = Math.max(interval2.start, primeIntersection.start)\n    interval2.end = Math.min(interval2.end, primeIntersection.end)\n    primeIntersection = intersection(interval1, interval2)\n  }\n\n  return primeIntersections\n}\n\nconsole.log(primeIntersections((-3, -1), (-5, 5)))\nconsole.log(primeIntersections((-3, -1), (0, 4)))\nconsole.log(primeIntersections((-3, -1), (1, 2)))\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const sum = arr.reduce((prev, curr, index) => {\n    const sign = (curr > 0)? 1 : ((curr < 0)? -1 : 0);\n    if (sign === 0) {\n      return prev;\n    } else {\n      return (sign * prev) + curr;\n    }\n  }, 0);\n  return sum;\n};\n\nmodule.exports = prodSigsn;\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const n = grid.length\n  const m = grid[0].length\n\n  let dp = [new Array(m)];\n\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < m; j++) {\n      if (grid[i][j] > k) {\n        return grid;\n      }\n\n      dp[i][j] = grid[i][j]\n\n      for (let i_ = i - 1; i_ >= 0 && dp[i_][j] < k; i_--) {\n        dp[i_][j] = grid[i_][j] + dp[i_ + 1][j];\n      }\n\n      for (let j_ = j - 1; j_ >= 0 && dp[i][j_] < k; j_--) {\n        dp[i][j_] = grid[i][j_] + dp[i][j_ + 1];\n      }\n\n      for (let i_ = i + 1; i_ < n && dp[i_][j] < k; i_++) {\n        dp[i_][j] = grid[i_][j] + dp[i_ - 1][j];\n      }\n\n      for (let j_ = j + 1; j_ < m && dp[i][j_] < k; j_++) {\n        dp[i][j_] = grid[i][j_] + dp[i][j_ - 1];\n      }\n    }\n  }\n\n  return dp;\n}\n\nconst test = [\n  [[1,2,3], [4,5,6], [7,8,9]],\n  [[5,9,3], [4,1,6], [7,8,2]],\n  [],\n  [1],\n  [2],\n  [3],\n  [4],\n  [5],\n  [6],\n  [7],\n  [8],\n  [9],\n]\n\ntest.forEach(t => {\n  console.log(minPath(t[0], t[1]))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  const result = [];\n  let i = 0;\n  while(i < n) {\n    let temp = 1;\n    if (i % 2 === 0) {\n      temp += i;\n      temp += i / 2;\n    } else {\n      temp += i;\n      temp += i / 2 + 1;\n    }\n    result.push(temp);\n    i++;\n  }\n  return result;\n};\n\nconsole.log(tir(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let res = 1;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 === 1) {\n      res *= digit;\n    }\n    n = n / 10;\n  }\n  return res;\n};\n\nconst oddDigits = (n) => {\n  let res = 0;\n  while (n > 0) {\n    let digit = n % 10;\n    if (digit % 2 === 1) {\n      res += digit;\n    }\n    n = n / 10;\n  }\n  return res;\n};\n\nconst product = (n) => {\n  return digits(n) * oddDigits(n);\n};\n\nconst isPentagonal = (n) => {\n  return (1 + digits(n) + oddDigits(n)) === n;\n};\n\nconst solution = (n) => {\n  let ans = 0;\n  while (n > 0) {\n    let product = n;\n    while (n > 0) {\n      n = n - product;\n      if (isPentagonal(n)) {\n        ans += n;\n      }\n    }\n  }\n  return ans;\n};\n\nexport default solution;\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i < string.length; i++) {\n        if (string[i] === '[') {\n            stack.push(string[i]);\n            brackets++;\n        }\n        if (string[i] === ']') {\n            if (brackets > 0) {\n                brackets--;\n            } else {\n                return false;\n            }\n            stack.pop();\n        }\n    }\n    return brackets === 0;\n};\n\nconst isNested = (string) => {\n    let stack = [];\n    let brackets = 0;\n    for (let i = 0; i <"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  const list = lst.slice()\n  const sum = list.reduce((acc, curr) => acc + Math.pow(curr, 2), 0)\n  return Math.round(sum)\n}\n\nconst isEmpty = (obj) => Object.keys(obj).length === 0\n\nconst max = (a, b) => a > b? a : b\n\nconst min = (a, b) => a < b? a : b\n\nconst sorted = (lst, sortBy) =>\n  lst.sort((a, b) => sortBy(a) - sortBy(b))\n\nconst median = (lst) => {\n  const n = lst.length\n  const half = Math.floor(n / 2)\n  const median = lst[half]\n\n  return median\n}\n\nconst medianIndex = (lst) => {\n  const n = lst.length\n  const half = Math.floor(n / 2)\n\n  const left = half\n  const right = half + 1\n\n  const lstLeft = lst.slice(0, left)\n  const lstRight = lst.slice(right)\n\n  return (lstLeft.length === right)? (lstLeft[half - 1] + lstRight[half]) / 2 : lstLeft[half]\n}\n\nconst sort = (lst, sortBy) => sorted(lst, sortBy)\n\nconst isEqual = (a, b) => a === b\n\nconst isLessThan = (a, b) => a < b\n\nconst isLessThanOrEqual = (a, b) => a <= b\n\nconst isGreaterThan = (a, b) => a > b\n\nconst isGreaterThanOrEqual = (a, b) => a >= b\n\nconst isIn = (val, lst) => lst.indexOf(val) > -1\n\nconst isNotIn = (val, lst) => lst.indexOf(val) === -1\n\nconst isEmptyOrNull = (val) => val === null || val === undefined\n\nconst isNotEmpty = (val) => val!== null && val!== undefined\n\nconst isEmptyOrUndefined = (val) => val === null || val === undefined\n\nconst isNumeric = (val) =>!isNaN(parseFloat(val))\n\nconst isNumericOrNull = (val) =>!isNaN(parseFloat(val)) || val === null || val === undefined\n\nconst isArray = (val) => Array.isArray(val)\n\nconst isNotArray = (val) =>!Array.isArray(val)\n\nconst isString = (val) => typeof val ==='string'\n\nconst isNotString = (val) => typeof val!=='string'\n\nconst isObject = (val) => typeof val === 'object'\n\nconst isNotObject = (val) => typeof val!== 'object'\n\nconst isFunction = (val) => typeof val === 'function'\n\nconst isNotFunction = (val) => typeof val!== 'function'\n\nconst isDate = (val) => typeof val === 'object' && val.toString() === '[object Date]'\n\nconst isNotDate = (val) =>!isDate(val)\n\nconst isNumber = (val) => typeof val === 'number'\n\nconst isNotNumber = (val) => typeof val!== 'number'\n\nconst isBoolean = (val) => typeof val === 'boolean'\n\nconst isNotBoolean = (val) => typeof val!== 'boolean'\n\nconst isPlainObject = (val) => typeof val === 'object' && val.constructor === Object\n\nconst isNotPlainObject = (val) =>!isPlainObject(val)\n\nconst isRegExp = (val) => typeof val === 'object' && val.constructor === RegExp\n\nconst isNotRegExp = (val) =>!isRegExp(val)\n\nconst isNull = (val) => val === null\n\nconst isNotNull = (val) => val!== null\n\nconst isUndefined = (val) => val === undefined\n\nconst isNotUndefined = (val) => val!== undefined\n\nconst isEmptyOrUndefinedOrNull = (val) => val === null || val === undefined || val === ''\n\nconst isEmptyOrUndefinedOrEmptyOrNull = (val) => val === '' || val === null || val === undefined\n\nconst isEmptyOrUndefinedOrBlank = (val) => val === '' || val === null || val === undefined\n\nconst isEmptyOrUndefinedOrNotEmptyOrBlank = (val) => val!== '' && val!== null && val!== undefined\n\nconst isNotEmptyOrBlank = (val) => val!== '' && val!== null && val!== undefined\n\nconst isEmptyOrBlank = (val) => val === '' || val === null || val === undefined\n\nconst isNotBlank = (val) => val!== '' && val!== null && val!== undefined\n\nconst isEmptyOrNotBlank = (val) => val!== '' && val!== null && val!== undefined\n\nconst isNotEmptyOrNotBlank = (val) => val!== '' && val!== null && val!== undefined\n\nconst isObjectOrArray = (val) => isObject(val) || isArray(val)\n\nconst isNotObjectOrArray = (val) =>!isObject(val) &&!isArray(val)\n\nconst isEmptyOrNotObjectOrArray = (val) => val === '' || val === null || val === undefined || isArray(val) || isObject(val)\n\nconst isNotEmptyOrNotObjectOrArray = (val) => val!== '' && val!== null && val!== undefined &&!isArray(val) &&!isObject("}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const letter = txt.charAt(txt.length - 1);\n  return (letter >= 97 && letter <= 122) &&\n    (letter!= 95 && letter!= 32);\n};\n\n// Checks if a given string is a palindrome\nconst isPalindrome = (txt) => {\n  let i = 0;\n  let j = txt.length - 1;\n  while (i < j) {\n    if (txt.charAt(i)!== txt.charAt(j)) {\n      return false;\n    }\n    i++;\n    j--;\n  }\n  return true;\n};\n\n// Checks if a given string is a double-digit number\nconst isDoubleDigitNumber = (txt) => {\n  const regex = /^\\d+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a single-digit number\nconst isSingleDigitNumber = (txt) => {\n  const regex = /^\\d+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is an integer\nconst isInteger = (txt) => {\n  const regex = /^\\d+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a number\nconst isNumber = (txt) => {\n  const regex = /^[0-9]*\\.?[0-9]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a decimal number\nconst isDecimalNumber = (txt) => {\n  const regex = /^[0-9]*\\.?[0-9]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a float\nconst isFloat = (txt) => {\n  const regex = /^[0-9]*\\.?[0-9]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a letter\nconst isLetter = (txt) => {\n  const regex = /^[a-zA-Z]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a single-letter alphabet\nconst isSingleLetterAlpha = (txt) => {\n  const regex = /^[a-zA-Z]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a multi-letter alphabet\nconst isMultiLetterAlpha = (txt) => {\n  const regex = /^[a-zA-Z]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a letter or digit\nconst isLetterOrDigit = (txt) => {\n  const regex = /^[a-zA-Z0-9]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a word\nconst isWord = (txt) => {\n  const regex = /^[a-zA-Z]+\\s+[a-zA-Z]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a space-separated list of words\nconst isListOfWords = (txt) => {\n  const regex = /^[a-zA-Z]+\\s+[a-zA-Z]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a valid date\nconst isDate = (txt) => {\n  const regex = /^[0-9]{2}\\-?[0-9]{2}\\-?[0-9]{4}$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a valid email\nconst isEmail = (txt) => {\n  const regex = /^[a-zA-Z0-9_\\-\\.]+@[a-zA-Z0-9\\-\\.]+\\.[a-zA-Z0-9\\-\\.]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a valid IP\nconst isIP = (txt) => {\n  const regex = /^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a valid url\nconst isURL = (txt) => {\n  const regex = /^((https?|ftp|www|ftps)\\:\\/\\/|mailto)\\:\\/\\/[a-z0-9]+([\\-\\.][a-z0-9]+)*\\.[a-z]{2,3}(:[0-9]+)?(\\/?[^\\s]+)?$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a valid number\nconst isNumber = (txt) => {\n  const regex = /^[0-9]*\\.?[0-9]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a valid number\nconst isDecimalNumber = (txt) => {\n  const regex = /^[0-9]*\\.?[0-9]+$/;\n  return regex.test(txt);\n};\n\n// Checks if a given string is a valid integer\nconst isInteger = (txt) => {\n  const regex = /^[0-9]+$/;\n  return regex."}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    const arrLength = arr.length\n    const max = arr[arrLength - 1]\n    let index = 0\n    for (let i = 0; i < arrLength - 1; i++) {\n        if (arr[i] <= arr[i + 1]) {\n            index = i\n            break\n        }\n    }\n    return index\n}\n\nmodule.exports = canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const\n    smallestInt = lst[0],\n    largestInt = lst[lst.length - 1];\n\n  if (largestInt < smallestInt) {\n    return (null, largestInt);\n  }\n  if (largestInt === smallestInt) {\n    return (null, largestInt);\n  }\n  return (smallestInt, largestInt);\n};\n\n/*\n  The first two numbers in the list nums will be used to solve the problem.\n  The output should be the next two numbers in the list,\n  or null if there are no more numbers.\n  Examples:\n  lagrestNextTwoNumbers([1, 2, 3]) == (null, 4)\n  lagrestNextTwoNumbers([1, 2]) == (1, 3)\n  lagrestNextTwoNumbers([1]) == (1, 1)\n  */\nconst lagrestNextTwoNumbers = (nums) => {\n  const\n    num = nums[0],\n    nextNum = nums[1];\n\n  if (nextNum === null) {\n    return (null, null);\n  }\n  return ([num + 1, nextNum]);\n};\n\n/*\n  The first two numbers in the list nums will be used to solve the problem.\n  The output should be the largest number in the list,\n  or null if there are no more numbers.\n  Examples:\n  lagrestLargestNumber([1, 2, 3]) == 3\n  lagrestLargestNumber([1, 2]) == null\n  lagrestLargestNumber([1]) == 1\n  */\nconst lagrestLargestNumber = (nums) => {\n  const\n    num = nums[0],\n    largestNum = nums[nums.length - 1];\n\n  if (largestNum === null) {\n    return (null);\n  }\n  return largestNum;\n};\n\n/*\n  The first two numbers in the list nums will be used to solve the problem.\n  The output should be the smallest number in the list,\n  or null if there are no more numbers.\n  Examples:\n  lagrestSmallestNumber([1, 2, 3]) == 1\n  lagrestSmallestNumber([1, 2]) == null\n  lagrestSmallestNumber([1]) == 1\n  */\nconst lagrestSmallestNumber = (nums) => {\n  const\n    num = nums[0],\n    smallestNum = nums[nums.length - 1];\n\n  if (smallestNum === null) {\n    return (null);\n  }\n  return smallestNum;\n};\n\n/*\n  The first two numbers in the list nums will be used to solve the problem.\n  The output should be the next number in the list,\n  or null if there are no more numbers.\n  Examples:\n  lagrestNextNumber([1, 2, 3]) == null\n  lagrestNextNumber([1, 2]) == null\n  lagrestNextNumber([1]) == null\n  */\nconst lagrestNextNumber = (nums) => {\n  const\n    num = nums[0],\n    nextNum = nums[1];\n\n  if (nextNum === null) {\n    return (null);\n  }\n  return nextNum;\n};\n\n/*\n  The first two numbers in the list nums will be used to solve the problem.\n  The output should be the largest number that is not in the list,\n  or null if there are no more numbers.\n  Examples:\n  lagrestLargestNotInList([1, 2, 3]) == 4\n  lagrestLargestNotInList([1, 2]) == null\n  lagrestLargestNotInList([1]) == null\n  */\nconst lagrestLargestNotInList = (nums) => {\n  const\n    num = nums[0],\n    largestNum = nums[nums.length - 1];\n\n  if (largestNum === null) {\n    return (null);\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (largestNum!== nums[i]) {\n      return largestNum;\n    }\n  }\n  return largestNum;\n};\n\n/*\n  The first two numbers in the list nums will be used to solve the problem.\n  The output should be the smallest number that is not in the list,\n  or null if there are no more numbers.\n  Examples:\n  lagrestSmallestNotInList([1, 2, 3]) == 2\n  lagrestSmallestNotInList([1, 2]) == null\n  lagrestSmallestNotInList([1]) == 1\n  */\nconst lagrestSmallestNotInList = (nums) => {\n  const\n    num = nums[0],\n    smallestNum = nums[nums.length - 1];\n\n  if (smallestNum === null) {\n    return (null);\n  }\n  for (let i = 0; i < nums.length; i++) {\n    if (smallestNum!== nums[i]) {\n      return smallestNum;\n    }\n  }\n  return smallestNum;\n};\n\nexport default {\n  lagrestLargestIntgeers,\n  lagrestLargestNumber,\n  lagrestNextTwoNumbers,\n  lagrestNextNumber,\n  lagrestSmallestNumber,\n  lagrestSmallestNotInList,\n  lagrestLargestNotInList\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  let aIsNumber = typeof a === 'number';\n  let bIsNumber = typeof b === 'number';\n\n  if (aIsNumber && bIsNumber) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  if (aIsNumber &&!bIsNumber) {\n    return a;\n  }\n\n  if (!aIsNumber && bIsNumber) {\n    return b;\n  }\n\n  if (aIsNumber && bIsNumber) {\n    if (a > b) {\n      return a;\n    }\n    return b;\n  }\n\n  if (aIsNumber) {\n    return a;\n  }\n\n  if (bIsNumber) {\n    return b;\n  }\n\n  return null;\n};\n\nconsole.log(comparableOne(1, 2.5));\nconsole.log(comparableOne(1, \"2,3\"));\nconsole.log(comparableOne(\"5,1\", \"6\"));\nconsole.log(comparableOne(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const sum = n + 2 * Math.floor(n / 2)\n  return sum % 4 === 0\n}\n\nexport default isEqualToSumEven\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n === 1) {\n    return 1;\n  }\n  return n * specialFactorial(n - 1) * specialFactorial(n - 2) * specialFactorial(n - 3) * specialFactorial(n - 4);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n    let result = text.replace(/\\s+/g, '_');\n    if (result.split(\"_\").length > 2) {\n        result = result.replace(/\\s+/g, '-');\n    }\n    return result;\n};\n\n/*\n  Given a string text, return the number of words.\n  \n  countWords(\"Example\") == 1\n  countWords(\"Example 1\") == 1\n  countWords(\"Example example\") == 2\n  countWords(\"Example example example\") == 3\n  countWords(\"Example example example example\") == 4\n  countWords(\"Example example example example example\") == 5\n  countWords(\"Example example example example example example\") == 6\n  countWords(\"Example example example example example example example\") == 7\n  countWords(\"Example example example example example example example example\") == 8\n  countWords(\"Example example example example example example example example example\") == 9\n  countWords(\"Example example example example example example example example example example\") == 10\n  */\nconst countWords = (text) => {\n    let result = text.split(\" \").length;\n    return result;\n};\n\n/*\n  Given a string text, return the number of spaces.\n  \n  countSpaces(\"Example\") == 0\n  countSpaces(\"Example 1\") == 1\n  countSpaces(\"Example example\") == 3\n  countSpaces(\"Example example example\") == 6\n  countSpaces(\"Example example example example\") == 10\n  countSpaces(\"Example example example example example\") == 15\n  */\nconst countSpaces = (text) => {\n    let result = text.split(\" \").length;\n    return result;\n};\n\n/*\n  Given a string text, return the length of the string.\n  \n  length(\"Example\") == 5\n  length(\"Example 1\") == 6\n  length(\"Example example\") == 9\n  length(\"Example example example\") == 14\n  length(\"Example example example example\") == 19\n  */\nconst length = (text) => {\n    let result = text.length;\n    return result;\n};\n\n/*\n  Given a string text, return the number of words.\n  \n  countWords(\"Example\") == 1\n  countWords(\"Example 1\") == 1\n  countWords(\"Example example\") == 2\n  countWords(\"Example example example\") == 3\n  countWords(\"Example example example example\") == 4\n  countWords(\"Example example example example example\") == 5\n  countWords(\"Example example example example example example\") == 6\n  countWords(\"Example example example example example example example\") == 7\n  countWords(\"Example example example example example example example example\") == 8\n  countWords(\"Example example example example example example example example example\") == 9\n  countWords(\"Example example example example example example example example example\") == 10\n  */\nconst countWords = (text) => {\n    let result = text.split(\" \").length;\n    return result;\n};\n\n/*\n  Given a string text, return the number of spaces.\n  \n  countSpaces(\"Example\") == 0\n  countSpaces(\"Example 1\") == 1\n  countSpaces(\"Example example\") == 3\n  countSpaces(\"Example example example\") == 6\n  countSpaces(\"Example example example example\") == 10\n  countSpaces(\"Example example example example example\") == 15\n  */\nconst countSpaces = (text) => {\n    let result = text.split(\" \").length;\n    return result;\n};\n\n/*\n  Given a string text, return the length of the string.\n  \n  length(\"Example\") == 5\n  length(\"Example 1\") == 6\n  length(\"Example example\") == 9\n  length(\"Example example example\") == 14\n  length(\"Example example example example\") == 19\n  */\nconst length = (text) => {\n    let result = text.length;\n    return result;\n};\n\nmodule.exports = {\n    fixSpacse: fixSpacse,\n    countWords: countWords,\n    length: length,\n    countSpaces: countSpaces\n};<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    if (file_name === \"\") return \"No\";\n    if (file_name.length > 3 || file_name.length < 1) return \"No\";\n    if (file_name.indexOf(\".\") < 0) return \"No\";\n    if (file_name.indexOf(\".\") === 0) return \"No\";\n    if (file_name.slice(0,1)!== \"a\") return \"No\";\n    if (file_name.slice(file_name.length-4, file_name.length)!== \".txt\" &&\n        file_name.slice(file_name.length-4, file_name.length)!== \".exe\" &&\n        file_name.slice(file_name.length-4, file_name.length)!== \".dll\")\n        return \"No\";\n    return \"Yes\";\n};\n\nconst main = (file_name) => {\n    const res = fileNameCheck(file_name);\n    if (res === \"Yes\") {\n        console.log(\"Yes\");\n    } else {\n        console.log(\"No\");\n    }\n};\n\nmain(\"1example.txt\");\nmain(\"\");\nmain(\"1example.exe\");\nmain(\"1example.dll\");\nmain(\"1example.exe.txt\");\nmain(\"1example.txt.exe\");\nmain(\"1example.txt.dll\");\n<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const n = lst.length;\n  if (n === 0) {\n    return 0;\n  }\n\n  const sum = 0;\n  for (let i = 0; i < n; i++) {\n    if (i % 3 === 0) {\n      sum += lst[i] * lst[i];\n    } else if (i % 4 === 0) {\n      sum += lst[i] * lst[i] * lst[i];\n    } else {\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nexport default sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n    const words = sentence.split(' ');\n    const primeNumbers = [];\n    const maxPrimeNumber = primeNumbers.length = getMaxPrimeNumber();\n\n    for (let i = 0; i < words.length; ++i) {\n        primeNumbers.push(getPrimeNumber(words[i]));\n    }\n\n    const maxPrimeNumber = primeNumbers.length;\n\n    let sum = 0;\n    for (let i = 0; i < maxPrimeNumber; ++i) {\n        sum += primeNumbers[i];\n    }\n\n    for (let i = 0; i < words.length; ++i) {\n        const primeNumbersIndex = sum - getPrimeNumber(words[i]);\n        words[i] = primeNumbers[primeNumbersIndex];\n    }\n\n    return words.join(' ');\n};\n\nconst getMaxPrimeNumber = () => {\n    const primeNumbers = [];\n    let prime = 0;\n    do {\n        prime = Math.pow(2, prime);\n        if (prime > 100000) break;\n        primeNumbers.push(prime);\n    } while (true);\n    return primeNumbers.length;\n};\n\nconst getPrimeNumber = (word) => {\n    let number = 0;\n    for (let i = 0; i < word.length; ++i) {\n        number += Math.pow(word.charCodeAt(i), i + 1);\n    }\n    return number;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  x = parseInt(x, 10);\n  n = parseInt(n, 10);\n\n  const x_len = x.length;\n  const n_len = n.length;\n  const x_num = parseInt(x.substr(0, x_len - 1), 10);\n  const n_num = parseInt(n.substr(0, n_len - 1), 10);\n  const remainder = x_num % n_num;\n\n  return remainder === 0 && x_num > 0;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  const sorted = [];\n  const result = [];\n  const sum = 0;\n  let flag = false;\n  nums.forEach(num => {\n    if (num.toString().length > 9) {\n      sorted.push(num);\n    } else {\n      if (sum + num.toString().charAt(0) === 0) {\n        flag = true;\n        sorted.push(num);\n      } else if (sum + num.toString().charAt(0) > 0) {\n        if (flag) {\n          sorted.push(num);\n        } else {\n          sorted.unshift(num);\n          flag = true;\n        }\n      }\n      sum += num.toString().charAt(0);\n    }\n  });\n  sorted.forEach(num => {\n    result.push(num);\n  });\n  return result;\n};\n\nmodule.exports = roderByPoints;\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const len = nums.length;\n  let count = 0;\n  for (let i = 0; i < len; i++) {\n    if (nums[i] > 10 && isOdd(nums[i])) {\n      count++;\n    }\n  }\n  return count;\n}\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n    const result = [];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i!== j && i!== k && j!== k && i < j && j < k) {\n                    if (i + j + k === n * n) {\n                        result.push([i, j, k]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result.length;\n};\n\nconst getTrpiles = (n) => {\n    const result = [];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i!== j && i!== k && j!== k && i < j && j < k) {\n                    if (i + j + k === n * n) {\n                        result.push([i, j, k]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n};\n\nconst getMaxTriples = (n) => {\n    const result = [];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i!== j && i!== k && j!== k && i < j && j < k) {\n                    if (i + j + k === n * n) {\n                        result.push([i, j, k]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result.length;\n};\n\nconst getTriples = (n) => {\n    const result = [];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i!== j && i!== k && j!== k && i < j && j < k) {\n                    if (i + j + k === n * n) {\n                        result.push([i, j, k]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result;\n};\n\nconst getMaxTriple = (n) => {\n    const result = [];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i!== j && i!== k && j!== k && i < j && j < k) {\n                    if (i + j + k === n * n) {\n                        result.push([i, j, k]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result[0];\n};\n\nconst getTriple = (n) => {\n    const result = [];\n\n    for (let i = 1; i <= n; i++) {\n        for (let j = i + 1; j <= n; j++) {\n            for (let k = j + 1; k <= n; k++) {\n                if (i!== j && i!== k && j!== k && i < j && j < k) {\n                    if (i + j + k === n * n) {\n                        result.push([i, j, k]);\n                    }\n                }\n            }\n        }\n    }\n\n    return result[0];\n};\n\nconst testMaxTrpiles = () => {\n    const n = 5;\n    const result = getMaxTrpiles(n);\n    console.log(`Max trpiles of a ${n} by ${n} triangle is ${result}`);\n};\n\nconst testMaxTriples = () => {\n    const n = 5;\n    const result = getMaxTriples(n);\n    console.log(`Max triples of a ${n} by ${n} triangle is ${result}`);\n};\n\nconst testMaxTriple = () => {\n    const n = 5;\n    const result = getMaxTriple(n);\n    console.log(`Max triple of a ${n} by ${n} triangle is ${result}`);\n};\n\nconst testTriples = () => {\n    const n = 5;\n    const result = getTriples(n);\n    console.log(`Triples of a ${n} by ${n} triangle are ${result}`);\n};\n\nconst testTriple = () => {\n    const n = 5;\n    const result = getTriple(n);\n    console.log(`Triple of a ${n} by ${n} triangle is ${result}`);\n};\n\nconst testMaxTriple = () => {\n    const n = 5;\n    const result = getMaxTriple(n);\n    console.log(`Max triple of a ${n} by ${n} triangle is ${result}`);\n};\n\nconst testTriple = () => {\n    const n = 5;\n    const result = getTriple(n);\n    console.log(`Triple of a ${n} by ${n} triangle is ${result}`);\n};\n\ntestMaxTriple();\ntestMaxTriple();\ntestMaxTriple();\ntestMaxTriple();\ntestMaxTriple();\n\ntestTriple();\ntestTriple();\ntestTriple();\ntestTriple();\ntestTriple();\n\ntestTriple();\ntestTriple();\ntestTriple();\ntestTriple();\ntestTriple();\n"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet = [];\n  let planet1name = planet1.toUpperCase();\n  let planet2name = planet2.toUpperCase();\n  let distance = Math.abs(planet1name.length - planet2name.length);\n  let len1 = planet1name.length;\n  let len2 = planet2name.length;\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      planet.push({\n        name: planet1name.substr(i, 1) + planet2name.substr(j, 1),\n        distance\n      })\n    }\n  }\n  let returnValue = {\n    planet: planet\n  };\n  return returnValue;\n};\n\nbf(\"Jupiter\", \"Neptune\") // => (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") // => (\"Venus\")\nbf(\"Mercury\", \"Uranus\") // => (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n\n/*\n  There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let planet = [];\n  let planet1name = planet1.toUpperCase();\n  let planet2name = planet2.toUpperCase();\n  let distance = Math.abs(planet1name.length - planet2name.length);\n  let len1 = planet1name.length;\n  let len2 = planet2name.length;\n  for (let i = 0; i < len1; i++) {\n    for (let j = 0; j < len2; j++) {\n      planet.push({\n        name: planet1name.substr(i, 1) + planet2name.substr(j, 1),\n        distance\n      })\n    }\n  }\n  let returnValue = {\n    planet: planet\n  };\n  return returnValue;\n};\n\nbf(\"Jupiter\", \"Neptune\") // => (\"Saturn\", \"Uranus\")\nbf(\"Earth\", \"Mercury\") // => (\"Venus\")\nbf(\"Mercury\", \"Uranus\") // => (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n<|endoftext|>"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const isNum = (e) => /[0-9]+/.test(e);\n\n  let sortedList = lst.filter(isNum);\n  sortedList = sortedList.sort((a, b) => a.length - b.length);\n  let sortedListSum = 0;\n\n  sortedList.forEach(e => {\n    if (sortedListSum < e) {\n      sortedListSum += e;\n    }\n  });\n\n  return sortedListSum;\n};\n\ndescribe('#sortedListSum', () => {\n  it('should return the sum of the sorted list', () => {\n    assert.equal(sortedListSum([1, 2, 3]), 6);\n    assert.equal(sortedListSum(['aa', 'a', 'aaa']), 3);\n    assert.equal(sortedListSum(['ab', 'a', 'aaa', 'cd']), 7);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  return n % 2? x : y;\n};\n\nconst factorial = (x) => {\n  return x > 1? x * factorial(x - 1) : 1;\n};\n\nconst fib = (x) => {\n  if (x < 2) return 1;\n  return fib(x - 1) + fib(x - 2);\n};\n\nconst isPrime = (n) => {\n  return n > 1 && n % 2 === 0? false : true;\n};\n\nconst isEven = (n) => {\n  return n % 2 === 0? true : false;\n};\n\nconst sum = (n) => {\n  return n + sum(n - 1);\n};\n\nconst getFactors = (n) => {\n  if (isPrime(n)) {\n    return [n];\n  } else {\n    let factors = [];\n    for (let i = 2; i < n; i++) {\n      if (n % i === 0) {\n        factors.push(i);\n      }\n    }\n    return factors;\n  }\n};\n\nconst xOr = (n, x, y) => {\n  if (n % 2) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst checkFactors = (factors) => {\n  return factors.map((f) => {\n    return fib(sum(f));\n  });\n};\n\nconst check = (factors) => {\n  if (factors.length === 1) {\n    return fib(sum(factors[0]));\n  }\n  return xOr(factors.length, fib(sum(factors[0])), fib(sum(factors[1])));\n};\n\nconst primes = () => {\n  let n = 1,\n    x = 1,\n    y = 1;\n  while (n < 1000000) {\n    if (isPrime(n)) {\n      x = xOr(n, x, x);\n      y = xOr(n, y, y);\n    }\n    n += 1;\n  }\n  return [x, y];\n};\n\nconsole.log(factorial(10));\nconsole.log(factorial(13));\nconsole.log(factorial(30));\nconsole.log(factorial(50));\nconsole.log(factorial(100));\nconsole.log(factorial(1000));\nconsole.log(factorial(10000));\nconsole.log(factorial(100000));\nconsole.log(factorial(1000000));\nconsole.log(fib(10));\nconsole.log(fib(13));\nconsole.log(fib(30));\nconsole.log(fib(50));\nconsole.log(fib(100));\nconsole.log(fib(1000));\nconsole.log(fib(10000));\nconsole.log(fib(100000));\nconsole.log(fib(1000000));\nconsole.log(isPrime(5));\nconsole.log(isPrime(9));\nconsole.log(isPrime(13));\nconsole.log(isPrime(23));\nconsole.log(isPrime(25));\nconsole.log(isPrime(31));\nconsole.log(isPrime(35));\nconsole.log(isPrime(37));\nconsole.log(isPrime(41));\nconsole.log(isPrime(43));\nconsole.log(isPrime(47));\nconsole.log(isPrime(53));\nconsole.log(isPrime(59));\nconsole.log(isPrime(61));\nconsole.log(isPrime(67));\nconsole.log(isPrime(71));\nconsole.log(isPrime(73));\nconsole.log(isPrime(79));\nconsole.log(isPrime(83));\nconsole.log(isPrime(89));\nconsole.log(isPrime(97));\nconsole.log(isPrime(101));\nconsole.log(isPrime(103));\nconsole.log(isPrime(107));\nconsole.log(isPrime(109));\nconsole.log(isPrime(113));\nconsole.log(isPrime(127));\nconsole.log(isPrime(131));\nconsole.log(isPrime(137));\nconsole.log(isPrime(139));\nconsole.log(isPrime(149));\nconsole.log(isPrime(151));\nconsole.log(isPrime(157));\nconsole.log(isPrime(163));\nconsole.log(isPrime(167));\nconsole.log(isPrime(173));\nconsole.log(isPrime(179));\nconsole.log(isPrime(181));\nconsole.log(isPrime(191));\nconsole.log(isPrime(193));\nconsole.log(isPrime(197));\nconsole.log(isPrime(199));\nconsole.log(isPrime(211));\nconsole.log(isPrime(223));\nconsole.log(isPrime(227));\nconsole.log(isPrime(229));\nconsole.log(isPrime(233));\nconsole.log(isPrime(239));\nconsole.log(isPrime(241));\nconsole.log(isPrime(251));\nconsole.log(isPrime(257));\nconsole.log(isPrime(263));\nconsole.log(isPrime(269));\nconsole.log(isPrime(271));\nconsole.log(isPrime(277));\nconsole.log(isPrime(281));\nconsole.log(isPrime(283));\nconsole.log(isPrime(293));\nconsole.log(isPrime(307));\nconsole.log(isPrime(311));\nconsole.log(isPrime(313));\nconsole.log(isPrime(317));\nconsole.log(isPrime(319));\nconsole.log(isPrime(331));\nconsole.log(isPrime(337));\nconsole.log(isPrime(347));\nconsole.log(isPrime(349));\nconsole.log(isPrime(353));\nconsole.log(isPrime(359));\nconsole.log(isPrime(367));\nconsole.log(isPrime(373));\nconsole.log(isPrime(379));\nconsole.log(isPrime(383));\nconsole.log(isPrime(389));\nconsole.log(isPrime(397));\nconsole.log(isPrime(401));\nconsole."}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  if (!lst) {\n    return 0;\n  }\n\n  return lst.reduce((acc, n) => {\n    if (n % 2) {\n      return acc + n * n;\n    }\n    return acc;\n  }, 0);\n};\n\nmodule.exports = doublehTeDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const length = game.length\n  let wrong = 0\n  let score = 0\n  const guesses = Array.from(Array(length).keys())\n  let index = 0\n  while (index < length) {\n    if (guess[index] === game[index]) {\n      score += 1\n    } else {\n      wrong += 1\n    }\n    index += 1\n  }\n  let diff = 0\n  if (score === length) {\n    diff = 0\n  } else {\n    diff = Math.abs(score - length)\n  }\n  return [wrong, diff, score]\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const sortedExtensions = extensions.sort((a, b) => a.localeCompare(b));\n  const capitalizedExtensions = sortedExtensions.map(extension => extension.toUpperCase());\n  const strength = capitalizedExtensions.reduce((previousStrength, currentStrength) => {\n    const difference = capitalizedExtensions.indexOf(currentStrength) - capitalizedExtensions.indexOf(previousStrength);\n    return previousStrength + difference;\n  }, 0);\n\n  return class_name + '.' + capitalizedExtensions[capitalizedExtensions.indexOf(sortedExtensions[0])];\n};\n\nmodule.exports = strongestExtension;\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n    let aArr = a.split('');\n    let bArr = b.split('');\n    let cArr = b.split('');\n    let counter = 0;\n    while (counter < aArr.length) {\n        if (aArr[counter] == bArr[counter]) {\n            cArr.shift();\n        } else {\n            break;\n        }\n        counter++;\n    }\n    if (counter == aArr.length) {\n        return true;\n    }\n    return false;\n};\n\nmodule.exports = ccypatternChekc;<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  if (num === 0) return (0, 0)\n  let numStr = num.toString()\n  let evenDigits = 0\n  let oddDigits = 0\n  for (let i = 0; i < numStr.length; i++) {\n    if (numStr[i] % 2 === 0) {\n      evenDigits++\n    } else {\n      oddDigits++\n    }\n  }\n  return (evenDigits, oddDigits)\n}\n\n/*\n  Given a tuple, return the sum of the digits.\n  If the sum is less than 10, return 0.\n  Otherwise, return sum.\n  Example:\n      sumOfDigits(3, 2) ==> 7\n      sumOfDigits(9, 2) ==> 9\n      sumOfDigits(0, 0) ==> 0\n      sumOfDigits(5, 0) ==> 5\n      sumOfDigits(5, 1) ==> 0\n  */\nconst sumOfDigits = (sum, digits) => {\n  if (sum < 10) {\n    return 0\n  } else {\n    return sum\n  }\n}\n\n/*\n  Given a tuple, return the product of the digits.\n  If the product is less than 10, return 0.\n  Otherwise, return product.\n  Example:\n      productOfDigits(12, 7) ==> 12 * 7\n  */\nconst productOfDigits = (product, digits) => {\n  if (product < 10) {\n    return 0\n  } else {\n    return product\n  }\n}\n\n/*\n  Given a tuple, return the difference between the digits.\n  If the difference is less than 10, return 0.\n  Otherwise, return difference.\n  Example:\n      differenceOfDigits(13, 14) ==> 13 - 14\n  */\nconst differenceOfDigits = (difference, digits) => {\n  if (difference < 10) {\n    return 0\n  } else {\n    return difference\n  }\n}\n\n/*\n  Given a tuple, return the sum of the digits of the number.\n  If the sum is less than 10, return 0.\n  Otherwise, return sum.\n  Example:\n      sumOfDigitsOfNumber(11, 0) ==> 11\n      sumOfDigitsOfNumber(11, 1) ==> 11\n      sumOfDigitsOfNumber(11, 2) ==> 0\n      sumOfDigitsOfNumber(11, 3) ==> 11\n  */\nconst sumOfDigitsOfNumber = (sum, digits) => {\n  if (sum < 10) {\n    return 0\n  } else {\n    return sum\n  }\n}\n\n/*\n  Given a tuple, return the product of the digits of the number.\n  If the product is less than 10, return 0.\n  Otherwise, return product.\n  Example:\n      productOfDigitsOfNumber(12, 7) ==> 12 * 7\n  */\nconst productOfDigitsOfNumber = (product, digits) => {\n  if (product < 10) {\n    return 0\n  } else {\n    return product\n  }\n}\n\n/*\n  Given a tuple, return the difference between the digits of the number.\n  If the difference is less than 10, return 0.\n  Otherwise, return difference.\n  Example:\n      differenceOfDigitsOfNumber(13, 14) ==> 13 - 14\n  */\nconst differenceOfDigitsOfNumber = (difference, digits) => {\n  if (difference < 10) {\n    return 0\n  } else {\n    return difference\n  }\n}\n\n/*\n  Given a tuple, return the sum of the digits of the number.\n  If the sum is less than 10, return 0.\n  Otherwise, return sum.\n  Example:\n      sumOfDigitsOfNumber(11, 0) ==> 11\n      sumOfDigitsOfNumber(11, 1) ==> 11\n      sumOfDigitsOfNumber(11, 2) ==> 0\n      sumOfDigitsOfNumber(11, 3) ==> 11\n  */\nconst sumOfDigitsOfNumber = (sum, digits) => {\n  if (sum < 10) {\n    return 0\n  } else {\n    return sum\n  }\n}\n\nexport {\n  evenOddCount,\n  sumOfDigits,\n  productOfDigits,\n  differenceOfDigits,\n  sumOfDigitsOfNumber,\n  productOfDigitsOfNumber,\n  differenceOfDigitsOfNumber,\n  sumOfDigitsOfNumber\n}\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  if (number == 1) return 'I'\n  if (number == 2) return 'II'\n  if (number == 3) return 'III'\n  if (number == 4) return 'IV'\n  if (number == 5) return 'V'\n  if (number == 6) return 'VI'\n  if (number == 7) return 'VII'\n  if (number == 8) return 'VIII'\n  if (number == 9) return 'IX'\n  if (number == 10) return 'X'\n  if (number == 11) return 'XI'\n  if (number == 12) return 'XII'\n  if (number >= 13) {\n    return 'XL' + (number - 13)\n  }\n  if (number >= 14) {\n    return 'XC' + (number - 14)\n  }\n  if (number >= 15) {\n    return 'LX' + (number - 15)\n  }\n  if (number >= 16) {\n    return 'X' + (number - 16)\n  }\n  if (number >= 17) {\n    return 'IX' + (number - 17)\n  }\n  if (number >= 18) {\n    return 'VX' + (number - 18)\n  }\n  if (number >= 19) {\n    return 'IVX' + (number - 19)\n  }\n  if (number >= 20) {\n    return 'IIX' + (number - 20)\n  }\n  if (number >= 21) {\n    return 'IXX' + (number - 21)\n  }\n  if (number >= 22) {\n    return 'XIV' + (number - 22)\n  }\n  if (number >= 23) {\n    return 'XXV' + (number - 23)\n  }\n  if (number >= 24) {\n    return 'XXX' + (number - 24)\n  }\n  if (number >= 25) {\n    return 'XLIX' + (number - 25)\n  }\n  if (number >= 26) {\n    return 'LXXXVI' + (number - 26)\n  }\n  if (number >= 27) {\n    return 'XCIX' + (number - 27)\n  }\n  if (number >= 28) {\n    return 'CX' + (number - 28)\n  }\n  if (number >= 29) {\n    return 'MC' + (number - 29)\n  }\n  if (number >= 30) {\n    return 'DC' + (number - 30)\n  }\n  if (number >= 31) {\n    return 'CM' + (number - 31)\n  }\n  if (number >= 32) {\n    return 'M' + (number - 32)\n  }\n  if (number >= 33) {\n    return 'MX' + (number - 33)\n  }\n  if (number >= 34) {\n    return 'IVXII' + (number - 34)\n  }\n  if (number >= 35) {\n    return 'VXC' + (number - 35)\n  }\n  if (number >= 36) {\n    return 'IXDC' + (number - 36)\n  }\n  if (number >= 37) {\n    return 'CDXC' + (number - 37)\n  }\n  if (number >= 38) {\n    return 'MD' + (number - 38)\n  }\n  if (number >= 39) {\n    return 'CMXC' + (number - 39)\n  }\n  if (number >= 40) {\n    return 'MXXC' + (number - 40)\n  }\n  if (number >= 41) {\n    return 'MCMXC' + (number - 41)\n  }\n  if (number >= 42) {\n    return 'CXL' + (number - 42)\n  }\n  if (number >= 43) {\n    return 'DCXL' + (number - 43)\n  }\n  if (number >= 44) {\n    return 'CDXL' + (number - 44)\n  }\n  if (number >= 45) {\n    return 'CMXL' + (number - 45)\n  }\n  if (number >= 46) {\n    return 'MXL' + (number - 46)\n  }\n  if (number >= 47) {\n    return 'IXXL' + (number - 47)\n  }\n  if (number >= 48) {\n    return 'XCXL' + (number - 48)\n  }\n  if (number >= 49) {\n    return 'XLXC' + (number - 49)\n  }\n  if (number >= 50) {\n    return 'LXXXXX' + (number - 50)\n  }\n  if (number >= 51) {\n    return 'LXXVIC' + (number - 51)\n  }\n  if (number >= 52) {\n    return 'LXC' + (number - 52)\n  }\n  if (number >= 53) {\n    return 'LXIV' + (number - 53)\n  }\n  if (number >= 54) {\n    return 'LXXXIX' + (number - 54)\n  }\n  if (number >= 55) {\n    return 'LXX' + (number - 55)\n  }\n  if (number >= 56) {\n    return 'LXXX' + (number - 56)\n  }\n  if (number >= 57) {\n    return 'LXXXVII' + (number - 57)\n  }\n  if (number >= 58) {\n    return 'LXXXVIII' + (number - 58)\n  }\n  if (number >= 59) {\n    return 'LXXXIX' + (number - 59)\n  }\n  if (number >= 60) {\n    return 'CXX' + (number - 60)\n  }\n  if (number >= 61) {\n    return 'CXXX' + (number - 61)\n  }\n  if (number >= 62) {\n    return 'CXXXI' + (number - 62)\n  }\n  if (number >= 63) {\n    return 'CXL'"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  return Math.abs((Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2))\n    / (2 * a * b)) === 1;\n};\n\nexport {\n  rightAngelTriangle\n};\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  const len = words[0].length;\n  let count = 0;\n\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length === len) {\n      const check = words[i].split('').sort().join('');\n      if (check === max) {\n        count++;\n      }\n    }\n  }\n\n  return count > 1? max : words[0];\n};\n\nexport {\n  findMax,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let needToEat = Math.min(need, remaining);\n  let needToEatLeft = need - needToEat;\n  let numberToEat = number;\n  \n  if(needToEatLeft < numberToEat){\n    numberToEat = needToEatLeft;\n  }\n  \n  return [numberToEat, remaining - numberToEat];\n}\n\nconsole.log(eat(5, 6, 10));\nconsole.log(eat(4, 8, 9));\nconsole.log(eat(1, 10, 10));\nconsole.log(eat(2, 11, 5));<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  let result = 0;\n  let length = operator.length;\n  let numOfOperand = operand.length - 1;\n  let operatorIndex = 0;\n  let operandIndex = 0;\n\n  while (operatorIndex < length) {\n    result += operator[operatorIndex](operand[operandIndex], operand[operandIndex + 1]);\n    operatorIndex++;\n    operandIndex++;\n  }\n\n  return result;\n};\n\nconst operator = ['+', '-', '*', '//', '**'];\nconst operand = [2, 3, 4, 5];\n\nconsole.log(doAlgebra(operator, operand));\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const str = s.toUpperCase();\n  let temp = \"\";\n  for (let i = 0; i < str.length; i += 1) {\n    if (str[i] >= 'A' && str[i] <= 'Z') {\n      temp += str[i].toUpperCase();\n    } else if (str[i] >= 'a' && str[i] <= 'z') {\n      temp += str[i].toLowerCase();\n    } else {\n      temp += str[i];\n    }\n  }\n  return temp;\n};\n\nconst test = () => {\n  const str = \"1234\";\n  console.log(solve(str));\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text.length === 0) {\n    return null;\n  }\n\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = [];\n  while (a <= b) {\n    result.push(a);\n    a += 2;\n  }\n  return result;\n};\n\n/*\n  Given a positive integer, return its corresponding binary string.\n\n  For example:\n  binary(2) => \"1010\"\n  binary(3) => \"1101\"\n  binary(5) => \"11101\"\n  binary(7) => \"111111\"\n  binary(11) => \"11111111\"\n  */\nconst binary = (number) => {\n  let binary = \"\";\n  while (number > 0) {\n    binary = number % 2 + binary;\n    number = Math.floor(number / 2);\n  }\n  return binary;\n};\n\n/*\n  Given two strings, return the string that is a permutation of the first\n  string.\n\n  For example:\n  permutation(\"bob\", \"bob\") => \"bob\"\n  permutation(\"bob\", \"bobbin\") => \"bbbobo\"\n  permutation(\"bob\", \"bobab\") => \"abcbob\"\n  */\nconst permutation = (a, b) => {\n  let a1 = a.split(\"\");\n  let b1 = b.split(\"\");\n\n  let result = [];\n  let i;\n  for (i = 0; i < a1.length; i++) {\n    let j = 0;\n    while (j < b1.length && b1[j] < a1[i]) {\n      j++;\n    }\n    if (j < b1.length && b1[j] === a1[i]) {\n      result.push(a1[i]);\n    }\n  }\n  return result.join(\"\");\n};\n\n/*\n  Given two strings, return the string that is a permutation of the second\n  string.\n\n  For example:\n  permutation(\"bob\", \"bobbin\") => \"bbbobo\"\n  permutation(\"bob\", \"bobab\") => \"abcbob\"\n  */\nconst inversePermutation = (a, b) => {\n  let a1 = a.split(\"\");\n  let b1 = b.split(\"\");\n\n  let result = [];\n  let i;\n  for (i = 0; i < b1.length; i++) {\n    let j = 0;\n    while (j < a1.length && a1[j] < b1[i]) {\n      j++;\n    }\n    if (j < a1.length && a1[j] === b1[i]) {\n      result.push(b1[i]);\n    }\n  }\n  return result.join(\"\");\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  given string.\n\n  For example:\n  occurrence(\"bobbin\", \"bobbin\") => 2\n  occurrence(\"bobbin\", \"bob\") => 0\n  */\nconst occurrence = (a, b) => {\n  let a1 = a.split(\"\");\n  let b1 = b.split(\"\");\n  let result = 0;\n  let i;\n  for (i = 0; i < b1.length; i++) {\n    if (a1.indexOf(b1[i])!== -1) {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  given string.\n\n  For example:\n  count(\"bobbin\") => 2\n  count(\"bob\") => 0\n  */\nconst count = (a) => {\n  let a1 = a.split(\"\");\n  let result = 0;\n  let i;\n  for (i = 0; i < a1.length; i++) {\n    if (a1[i]!== \"\") {\n      result++;\n    }\n  }\n  return result;\n};\n\n/*\n  Given two strings, return the string that is a permutation of the second\n  string.\n\n  For example:\n  permutation(\"bob\", \"bobbin\") => \"bbbobo\"\n  permutation(\"bob\", \"bobab\") => \"abcbob\"\n  */\nconst common = (a, b) => {\n  let a1 = a.split(\"\");\n  let b1 = b.split(\"\");\n\n  let result = \"\";\n  let i;\n  for (i = 0; i < a1.length; i++) {\n    let j = 0;\n    while (j < b1.length && b1[j] < a1[i]) {\n      j++;\n    }\n    if (j < b1.length && b1[j] === a1[i]) {\n      result += a1[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given two strings, return the string that is a permutation of the second\n  string.\n\n  For example:\n  inversePermutation(\"bob\", \"bobbin\") => \"bobbin\"\n  inversePermutation(\"bob\", \"bobab\") => \"abcbob\"\n  */\nconst inverseCommon = (a, b) => {\n  let a1 = a.split(\"\");\n  let b1 = b.split(\"\");\n\n  let result = \"\";\n  let i;\n  for (i = 0; i < b1.length; i++) {\n    let j = 0;\n    while (j < a1.length && a1[j] < b1[i]) {\n      j++;\n    }\n    if (j < a1.length && a1[j] === b1[i]) {\n      result += b1[i];\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string, return the number of times the string appears in the\n  given string.\n\n  For example:\n  occurrence(\"bobbin\", \"bobbin\") => 2\n  occurrence(\"bobbin\", \"bob\") => 0\n  */\nconst difference ="}
