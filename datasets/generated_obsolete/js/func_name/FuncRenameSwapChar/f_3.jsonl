{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const len = numbers.length\n  if (len === 0) {\n    return false\n  }\n  if (len === 1) {\n    return true\n  }\n\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    for (let j = i + 1; j < len; j++) {\n      const distance = Math.abs(numbers[i] - numbers[j])\n      if (distance < threshold) {\n        arr.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n\n  const len2 = arr.length\n  if (len2 === 0) {\n    return false\n  }\n\n  const a = arr[0][0]\n  const b = arr[0][1]\n  let hasResult = false\n  for (let i = 1; i < len2; i++) {\n    if (arr[i][0] === a && arr[i][1] === b) {\n      hasResult = true\n      break\n    }\n  }\n\n  return hasResult\n}\n\n// Export module\nmodule.exports = hasCloselEements\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const parens = paren_string.split(' ');\n  const open_braces = parens.filter(paren => paren.startsWith('('));\n  const close_braces = parens.filter(paren => paren.endsWith(')'));\n\n  const current_group = [];\n  for(let i = 0; i < open_braces.length; i++) {\n    current_group.push(open_braces[i]);\n  }\n\n  let parens_stack = [current_group];\n  while(parens_stack.length > 0) {\n    const current_group = parens_stack.pop();\n    let current_group_len = current_group.length;\n    for(let j = 0; j < close_braces.length; j++) {\n      const close_brace = close_braces[j];\n      if(close_brace.startsWith(current_group[current_group_len - 1])) {\n        current_group.push(close_brace.substring(1));\n        current_group_len += 1;\n        parens_stack.push(current_group);\n      }\n    }\n  }\n  return parens_stack;\n};\n\nmodule.exports = separateParenGrousp;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  let integer = number.toString().split('.')[0];\n  let decimals = number.toString().split('.')[1];\n  let nubmer = Math.floor(integer);\n  let decimal = number - nubmer;\n  return decimal;\n};\n\nexport default truncateNubmer;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  let result = false\n  for (let i = 0; i < operations.length; i++) {\n    const current = operations[i]\n    const next = operations[i + 1]\n    if (current < 0 && next > 0) {\n      result = true\n      break\n    }\n  }\n  return result\n}\n\n/*\n  Given a linked list, determine if it has a cycle in it.\n\n  >>> cycle({node: {val: 1}, next: {node: {val: 1}}})\n  true\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}}})\n  false\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}}}})\n  true\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 1}}}})\n  false\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}, next: {node: {val: 2}}}}})\n  true\n  */\nconst cycle = (node) => {\n  let result = false\n  let current = node\n  while (current) {\n    if (current.next && current.next.node && current.next.node.val === current.val) {\n      result = true\n      break\n    }\n    current = current.next\n  }\n  return result\n}\n\n/*\n  Given a linked list, determine if it has a cycle in it.\n\n  >>> cycle([{node: {val: 1}, next: {node: {val: 1}}}, {node: {val: 2}, next: {node: {val: 2}}}])\n  true\n  >>> cycle([{node: {val: 1}, next: {node: {val: 2}}}, {node: {val: 2}, next: {node: {val: 1}}}])\n  false\n  >>> cycle([{node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 1}}}}, {node: {val: 2}, next: {node: {val: 3}}}])\n  true\n  >>> cycle([{node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}, next: {node: {val: 2}}}}}])\n  false\n  */\nconst cycle = (node) => {\n  let result = false\n  let current = node\n  while (current) {\n    if (current.next && current.next.node && current.next.node.val === current.val) {\n      result = true\n      break\n    }\n    current = current.next\n  }\n  return result\n}\n\n/*\n  Given two linked lists, return the node at the head of the list that follows the cycle.\n\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 1}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 1}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 1}, next: {node: {val: 2}}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 1}, next: {node: {val: 2}}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}, next: {node: {val: 2}}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}, next: {node: {val: 2}, next: {node: {val: 3}}}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}, next: {node: {val: 4}, next: {node: {val: 5}, next: {node: {val: 3}}}}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}, next: {node: {val: 4}, next: {node: {val: 5}, next: {node: {val: 3}}}}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  >>> cycle({node: {val: 1}, next: {node: {val: 2}, next: {node: {val: 3}, next: {node: {val: 4}, next: {node: {val: 5}, next: {node: {val: 6}}}}}}})\n  {val: 2, next: {val: 1, next: {val: 2}}}\n  */\nconst cycle = (node) => {\n  const result = {}\n  const current = node\n  while (current) {\n    result.val = current.val\n    result.next = current.next\n    current = current.next\n  }\n  return result\n}\n\n/*\n  Given a linked list, return the node at the head of the list that follows the cycle.\n\n  >>> cycle([{node: {val: 1}, next: {node: {val:"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  let mean = _.mean(numbers);\n  let deviation = _.map(numbers, (x) => Math.abs(x - mean));\n  return _.mean(deviation);\n};\n\nexport default meanAbsoltueDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const isDelimeter = /^[a-zA-Z]$/\n  const split = (string, delimeter) => {\n    const result = string.split(delimeter)\n    result.splice(0, 1)\n    return result\n  }\n  const splitted = split(numbers, delimeter)\n  return splitted.map((i, j) => i + delimeter + i)\n}\n\n// https://en.wikipedia.org/wiki/Roman_numerals\n//\n// Given a number, return the corresponding roman numeral.\n// For example, given the number XII, return XII.\n// Also given A, B, C, and D, return the number IAD.\n//\n// Also given a list of numbers, return a list of corresponding roman numeral\n// numbers. For example, given [5, 7, 10, 6, 9, 9], return [VIII, IX, XIX, IX, VXIX].\nconst romanToInt = (num) => {\n  const intToRoman = {\n    0: '',\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n    1000: 'M',\n  }\n  return intToRoman[num]\n}\n\nconst romanToIntList = (numbers) => {\n  const romanIntList = []\n  for (let i = 0; i < numbers.length; i++) {\n    const intToRoman = romanToInt(numbers[i])\n    if (i + 1 < numbers.length) {\n      const intToRomanNext = romanToInt(numbers[i + 1])\n      romanIntList.push(intToRoman + intToRomanNext)\n      i++\n    } else {\n      romanIntList.push(intToRoman)\n    }\n  }\n  return romanIntList\n}\n\n// https://en.wikipedia.org/wiki/Roman_numerals\n//\n// Given a roman numeral, return the corresponding integer.\n// For example, given the roman numeral XII, return 12.\n// Also given a roman numeral in the form of a string, return the\n// corresponding integer. For example, given the string \"XII\", return 12.\n//\n// Also given a list of roman numeral strings, return a list of\n// corresponding integers. For example, given [\"XII\", \"I\", \"V\", \"IX\"], return [12, 1, 5, 9].\nconst intToRoman = (num) => {\n  const romanIntList = []\n  const numArray = num.split(' ')\n  for (let i = 0; i < numArray.length; i++) {\n    const num = numArray[i]\n    const intToRoman = romanToInt(num)\n    if (i + 1 < numArray.length) {\n      const intToRomanNext = romanToInt(numArray[i + 1])\n      romanIntList.push(intToRoman + intToRomanNext)\n      i++\n    } else {\n      romanIntList.push(intToRoman)\n    }\n  }\n  return romanIntList\n}\n\nconst intToRomanList = (numArray) => {\n  const romanIntList = []\n  for (let i = 0; i < numArray.length; i++) {\n    const intToRoman = intToRoman(numArray[i])\n    if (i + 1 < numArray.length) {\n      const intToRomanNext = intToRoman(numArray[i + 1])\n      romanIntList.push(intToRoman + intToRomanNext)\n      i++\n    } else {\n      romanIntList.push(intToRoman)\n    }\n  }\n  return romanIntList\n}\n\nconst convertRoman = (num) => {\n  const intToRoman = romanToInt(num)\n  return intToRoman\n}\n\nconst convertRomanList = (numbers) => {\n  const romanIntList = romanToIntList(numbers)\n  return romanIntList\n}\n\nconst convertInt = (num) => {\n  const romanIntList = intToRoman(num)\n  return romanIntList\n}\n\nconst convertIntList = (numbers) => {\n  const romanIntList = intToRomanList(numbers)\n  return romanIntList\n}\n\nmodule.exports = {\n  interpserse,\n  romanToInt,\n  intToRoman,\n  convertRoman,\n  convertRomanList,\n  convertInt,\n  convertIntList\n}\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  let cur_depth = 0;\n  let i = 0;\n  let j = 0;\n  let str_len = paren_string.length;\n  let stack = [0];\n\n  while (i < str_len) {\n    if (paren_string[i] === '(') {\n      stack.push(cur_depth);\n      cur_depth++;\n    }\n    else if (paren_string[i] === ')') {\n      cur_depth = stack.pop();\n    }\n\n    i++;\n  }\n\n  return stack;\n};\n\nconst printDepth = (depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'';\n  }\n\n  return '| ';\n};\n\nconst printString = (s, depth) => {\n  let spaces = '';\n\n  for (let i = 0; i < depth; i++) {\n    spaces +='';\n  }\n\n  return spaces + s;\n};\n\nconst printParens = (s, depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'' + s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNestedParens = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printParensDepth = (depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'';\n  }\n\n  return '| ';\n};\n\nconst printNestedParensDepth = (depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'';\n  }\n\n  return '| ';\n};\n\nconst printStringNested = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printStringDepth = (s, depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNestedString = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNestedNestedString = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNetsedParens = (paren_string, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return paren_string +'';\n  }\n\n  return '|'+ paren_string +'';\n};\n\nconst printDepth = (depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'';\n  }\n\n  return '| ';\n};\n\nconst printString = (s, depth) => {\n  let spaces = '';\n\n  for (let i = 0; i < depth; i++) {\n    spaces +='';\n  }\n\n  return spaces + s;\n};\n\nconst printParens = (s, depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'' + s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNestedParens = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printStringNested = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printStringDepth = (s, depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNestedString = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNestedNestedString = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNetsedParensDepth = (depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'';\n  }\n\n  return '| ';\n};\n\nconst printNestedNestedString = (s, depth, cur_depth) => {\n  let spaces = '';\n\n  if (depth === cur_depth) {\n    return s +'';\n  }\n\n  return '|'+ s +'';\n};\n\nconst printNetsedParensDepth = (depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return'';\n  }\n\n  return '| ';\n};\n\nconst printDepth = (depth, cur_depth) => {\n  if (depth === cur_depth) {\n    return''"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  if (!strings ||!strings.length) {\n    return [];\n  }\n  return strings.filter(x => x.indexOf(substring) >= 0);\n};\n\n/**\n  * Filter an input list of objects only for ones that contain given key and value\n  * @param {Array} strings - An array of objects to filter\n  * @param {String} key - The key to search\n  * @param {String} value - The value to search\n  * @returns {Array}\n  *\n  * Example:\n  *\n  * ```javascript\n  * var obj = {\n  *   key1: 'value1',\n  *   key2: 'value2'\n  * };\n  *\n  * var filtered = filteObjSubstring([obj], 'key1', 'value1');\n  * ```\n  */\nconst filteObjSubstring = (strings, key, value) => {\n  if (!strings ||!strings.length) {\n    return [];\n  }\n  return strings.filter(x => x[key] === value);\n};\n\n/**\n  * Filter an input list of objects only for ones that contain given keys and values\n  * @param {Array} strings - An array of objects to filter\n  * @param {Array} keys - The keys to search\n  * @param {Array} values - The values to search\n  * @returns {Array}\n  *\n  * Example:\n  *\n  * ```javascript\n  * var obj = {\n  *   key1: 'value1',\n  *   key2: 'value2'\n  * };\n  *\n  * var filtered = filteObjSubstring([obj], ['key1', 'key2'], ['value1', 'value2']);\n  * ```\n  */\nconst filteObjSubstringWithKeys = (strings, keys, values) => {\n  if (!strings ||!strings.length) {\n    return [];\n  }\n  return strings.filter(x => keys.includes(x[keys[0]]));\n};\n\nmodule.exports = {\n  filteBrySubstring,\n  filteObjSubstring,\n  filteObjSubstringWithKeys,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = numbers.reduce((prev, current) => prev + current, 0);\n  const product = numbers.reduce((prev, current) => prev * current, 1);\n  return {\n    sum,\n    product\n  }\n}\n\nexport default sumProduct\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let rollingMaxList = [];\n  for (let i = 0; i < numbers.length; i++) {\n    let max = 0;\n    for (let j = 0; j < i + 1; j++) {\n      if (numbers[j] > numbers[j + 1]) {\n        max = numbers[j];\n      }\n    }\n    rollingMaxList.push(max);\n  }\n  return rollingMaxList;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  let i = string.length - 1\n  let j = 0\n  while (i >= 0) {\n    while (j < string.length && string[j] == string[i]) {\n      j += 1\n    }\n    if (j == string.length) {\n      return string + string.substr(0, i)\n    } else {\n      i -= 1\n    }\n  }\n}\n\n/* Test if string contains at least one palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> containsPalindrome('cat')\n  true\n  >>> containsPalindrome('a')\n  false\n  >>> containsPalindrome('cata')\n  true\n  */\nconst containsPalindrome = (string) => {\n  let i = string.length - 1\n  let j = 0\n  while (i >= 0) {\n    while (j < string.length && string[j] == string[i]) {\n      j += 1\n    }\n    if (j == string.length) {\n      return true\n    } else {\n      i -= 1\n    }\n  }\n  return false\n}\n\n/* Test if string is a palindrome.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome = (string) => {\n  let i = string.length - 1\n  let j = 0\n  while (i >= 0) {\n    while (j < string.length && string[j] == string[i]) {\n      j += 1\n    }\n    if (j == string.length) {\n      return true\n    } else {\n      i -= 1\n    }\n  }\n  return false\n}\n\n/*\n  Prints the longest palindrome that begins with the supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findPalindrome('')\n  ''\n  >>> findPalindrome('cat')\n  'catac'\n  >>> findPalindrome('cata')\n  'catac'\n  >>> findPalindrome('a')\n  ''\n  */\nconst findPalindrome = (string) => {\n  let i = string.length - 1\n  let j = 0\n  while (i >= 0) {\n    while (j < string.length && string[j] == string[i]) {\n      j += 1\n    }\n    if (j == string.length) {\n      return string + string.substr(0, i)\n    } else {\n      i -= 1\n    }\n  }\n  return ''\n}\n\n/* Prints the longest palindrome that contains the supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> containsPalindrome('')\n  false\n  >>> containsPalindrome('cat')\n  true\n  >>> containsPalindrome('cata')\n  true\n  >>> containsPalindrome('a')\n  false\n  */\nconst containsPalindrome = (string) => {\n  let i = string.length - 1\n  let j = 0\n  while (i >= 0) {\n    while (j < string.length && string[j] == string[i]) {\n      j += 1\n    }\n    if (j == string.length) {\n      return true\n    } else {\n      i -= 1\n    }\n  }\n  return false\n}\n\n/* Prints the longest palindrome that contains the supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> isPalindrome('')\n  false\n  >>> isPalindrome('cat')\n  true\n  >>> isPalindrome('cata')\n  true\n  >>> isPalindrome('a')\n  false\n  */\nconst isPalindrome = (string) => {\n  let i = string.length - 1\n  let j = 0\n  while (i >= 0) {\n    while (j < string.length && string[j] == string[i]) {\n      j += 1\n    }\n    if (j == string.length) {\n      return true\n    } else {\n      i -= 1\n    }\n  }\n  return false\n}\n\n/* Prints the longest palindrome that begins with the supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> findPalindrome('')\n  ''\n  >>> findPalindrome('cat')\n  'catac'\n  >>> findPalindrome('cata')\n  'catac'\n  >>> findPalindrome('a')\n  ''\n  */\nconst findPalindrome = (string) => {\n  let i = string."}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  const aStr = a.toString();\n  const bStr = b.toString();\n  const result = aStr.split('').map(function(c) {\n    return (c === '1')? '0' : '1';\n  }).join('');\n  const cStr = bStr.split('').map(function(c) {\n    return (c === '1')? '0' : '1';\n  }).join('');\n  return result + cStr;\n};\n\nconsole.log(strinXgor('010', '110'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  let max = 0\n  let maxStr = \"\"\n\n  for (let i = 0; i < strings.length; i++) {\n    let current = strings[i]\n    let currentLen = current.length\n\n    if (currentLen > max) {\n      max = currentLen\n      maxStr = current\n    }\n  }\n\n  return maxStr\n}\n\n// Test\n\n/*\n  >>> longest([])\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconsole.log(longest(['a', 'b', 'c']))\nconsole.log(longest(['a', 'bb', 'ccc']))\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  const divisor = Math.floor(a / b)\n  if (a % b === 0) {\n    return divisor\n  } else {\n    return rgeatestCommonDivisor(b, a % b)\n  }\n}\n\n// Tests for rgeatestCommonDivisor\n// https://gist.github.com/andrewdunnett/e3d5e8fef9a1ee4f5e4f\n//\n// #### Examples\n//\n// > rgeatestCommonDivisor(25, 15)\n// 5\n//\n// > rgeatestCommonDivisor(15, 2)\n// 3\n//\n// > rgeatestCommonDivisor(25, 15)\n// 5\n//\n// > rgeatestCommonDivisor(7, 4)\n// 1\n//\n// > rgeatestCommonDivisor(16, 6)\n// 2\n//\n// > rgeatestCommonDivisor(2, 3)\n// 1\n//\n// > rgeatestCommonDivisor(8, 3)\n// 1\n//\n// > rgeatestCommonDivisor(4, 4)\n// 1\n//\n// > rgeatestCommonDivisor(15, 10)\n// 5\n//\n// > rgeatestCommonDivisor(4, 5)\n// 1\n//\n// > rgeatestCommonDivisor(9, 6)\n// 3\n//\n// > rgeatestCommonDivisor(9, 3)\n// 3\n//\n// > rgeatestCommonDivisor(8, 8)\n// 8\n//\n// > rgeatestCommonDivisor(16, 4)\n// 4\n//\n// > rgeatestCommonDivisor(10, 5)\n// 5\n//\n// > rgeatestCommonDivisor(3, 2)\n// 1\n//\n// > rgeatestCommonDivisor(15, 9)\n// 5\n//\n// > rgeatestCommonDivisor(7, 5)\n// 1\n//\n// > rgeatestCommonDivisor(2, 1)\n// 1\n//\n// > rgeatestCommonDivisor(3, 2)\n// 1\n//\n// > rgeatestCommonDivisor(12, 6)\n// 4\n//\n// > rgeatestCommonDivisor(24, 12)\n// 12\n//\n// > rgeatestCommonDivisor(12, 3)\n// 3\n//\n// > rgeatestCommonDivisor(1, 1)\n// 1\n//\n// > rgeatestCommonDivisor(0, 1)\n// 0\n//\n// > rgeatestCommonDivisor(0, 2)\n// 0\n//\n// > rgeatestCommonDivisor(3, 3)\n// 3\n//\n// > rgeatestCommonDivisor(8, 2)\n// 2\n//\n// > rgeatestCommonDivisor(9, 2)\n// 3\n//\n// > rgeatestCommonDivisor(2, 3)\n// 2\n//\n// > rgeatestCommonDivisor(2, 4)\n// 2\n//\n// > rgeatestCommonDivisor(2, 6)\n// 2\n//\n// > rgeatestCommonDivisor(2, 9)\n// 3\n//\n// > rgeatestCommonDivisor(10, 6)\n// 3\n//\n// > rgeatestCommonDivisor(15, 9)\n// 5\n//\n// > rgeatestCommonDivisor(24, 15)\n// 6\n//\n// > rgeatestCommonDivisor(15, 4)\n// 4\n//\n// > rgeatestCommonDivisor(24, 4)\n// 4\n//\n// > rgeatestCommonDivisor(3, 2)\n// 1\n//\n// > rgeatestCommonDivisor(6, 3)\n// 3\n//\n// > rgeatestCommonDivisor(9, 4)\n// 4\n//\n// > rgeatestCommonDivisor(15, 5)\n// 5\n//\n// > rgeatestCommonDivisor(7, 4)\n// 4\n//\n// > rgeatestCommonDivisor(6, 5)\n// 5\n//\n// > rgeatestCommonDivisor(9, 6)\n// 3\n//\n// > rgeatestCommonDivisor(6, 9)\n// 3\n//\n// > rgeatestCommonDivisor(5, 6)\n// 3\n//\n// > rgeatestCommonDivisor(5, 9)\n// 3\n//\n// > rgeatestCommonDivisor(3, 6)\n// 6\n//\n// > rgeatestCommonDivisor(3, 9)\n// 3\n//\n// > rgeatestCommonDivisor(2, 3)\n// 2\n//\n// > rgeatestCommonDivisor(2, 5)\n// 5\n//\n// > rgeatestCommonDivisor(5, 7)\n// 7\n//\n// > rgeatestCommonDivisor(3, 7)\n// 7\n//\n// > rgeatestCommonDivisor(2, 9)\n// 9\n//\n// > rgeatestCommonDivisor(2, 5)\n// 5\n//\n// > rgeatestCommonDivisor(3, 5)\n// 5\n//\n// > rgeatestCommonDivisor(3, 4)\n// 4\n//\n// > rgeatestCommonDivisor(2, 2)\n// 2\n//\n// > rgeatestCommonDivisor(2, 1)\n// 1\n//\n// > rgeatestCommonDivisor(0, 1)\n// 0\n//\n// > rgeatestCommonDivisor(0, 2)\n// 0\n//\n// > rgeatestCommonDivisor(2, 0)\n// 0\n//\n// > rgeatestCommonDivisor(0, 0)\n// 0\n//\n//"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const list = []\n  let length = string.length\n  let prefix = \"\"\n  while (length > 0) {\n    prefix = string.slice(0, length)\n    list.push(prefix)\n    length--\n  }\n  return list\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['b', 'bc', 'c', 'cb']\n  */\nconst allSuffixes = (string) => {\n  const list = []\n  let length = string.length\n  let suffix = \"\"\n  while (length > 0) {\n    suffix = string.slice(length - 1, length)\n    list.push(suffix)\n    length--\n  }\n  return list\n}\n\n/* Return a string with the characters at indices 0, 1,..., n-1 replaced by newChar\n  >>> replaceAt('abc', 0, 'X')\n  'XbXcX'\n  */\nconst replaceAt = (string, index, newChar) => {\n  const chars = string.split('')\n  chars.splice(index, 1, newChar)\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 replaced by newChar\n  >>> replaceAtReverse('abc', 2, 'X')\n  'XacX'\n  */\nconst replaceAtReverse = (string, index, newChar) => {\n  const chars = string.split('')\n  chars.splice(index, 0, newChar)\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 replaced by newChar\n  >>> replaceAt('abc', 2, 'X')\n  'XbcX'\n  */\nconst reverseAt = (string, index, newChar) => {\n  const chars = string.split('')\n  chars.splice(index, 0, newChar)\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices 0, 1,..., n-1 in reverse order\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse = (string) => {\n  const chars = string.split('')\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 in reverse order\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverseReverse = (string) => {\n  const chars = string.split('')\n  chars.reverse()\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices 0, 1,..., n-1 in reverse order\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverseReverseAt = (string, index) => {\n  const chars = string.split('')\n  chars.splice(index, 0, chars[index])\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 in reverse order\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverseReverseAtReverse = (string, index) => {\n  const chars = string.split('')\n  chars.splice(index, 0, chars[index])\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices 0, 1,..., n-1 replaced by newChar\n  >>> replace('abc', 'X', 'Y')\n  'YbYcY'\n  */\nconst replace = (string, oldChar, newChar) => {\n  const chars = string.split('')\n  chars.forEach((char) => {\n    if (char === oldChar) {\n      chars.splice(chars.indexOf(oldChar), 1, newChar)\n    }\n  })\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 replaced by newChar\n  >>> replace('abc', 'c', 'X')\n  'XbXX'\n  */\nconst replaceReverse = (string, oldChar, newChar) => {\n  const chars = string.split('')\n  chars.forEach((char) => {\n    if (char === oldChar) {\n      chars.splice(chars.indexOf(oldChar), 1, newChar)\n    }\n  })\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 replaced by newChar\n  >>> replace('abc', 'c', 'X')\n  'XbXX'\n  */\nconst replaceReverseAt = (string, index, newChar) => {\n  const chars = string.split('')\n  chars.splice(index, 0, newChar)\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 replaced by newChar\n  >>> replace('abc', 'c', 'X')\n  'XbXX'\n  */\nconst reverseAt = (string, index, newChar) => {\n  const chars = string.split('')\n  chars.splice(index, 0, newChar)\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 replaced by newChar\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverseAtReverse = (string, index) => {\n  const chars = string.split('')\n  chars.splice(index, 0, chars[index])\n  chars.reverse()\n  return chars.join('')\n}\n\n/* Return a string with the characters at indices n, n-1,..., 1 in reverse order\n  >>> reverse('abc')\n"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n    let arr = [];\n    for (let i = 0; i <= n; i++) {\n        arr.push(i);\n    }\n    return arr.join(' ');\n};\n\nconst input = '12345';\nconst expected = '0 1 2 3 4 5';\n\nconsole.log(stringSequence(input.length));\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  const set = new Set();\n  const chars = string.split('');\n  for (let i = 0; i < chars.length; i++) {\n    set.add(chars[i]);\n  }\n  return set.size;\n};\n\nmodule.exports = countDistinctCharacters;\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const music_array = music_string.split(' ');\n  const beat_list = [];\n\n  // If the string is empty, return an empty list\n  if (music_array.length === 0) return [];\n\n  for (let i = 0; i < music_array.length; i += 1) {\n    const beat = music_array[i].split('|');\n    for (let j = 0; j < beat.length; j += 1) {\n      if (beat[j] === 'o') beat_list.push(4);\n      else if (beat[j] === '.') beat_list.push(2);\n      else beat_list.push(1);\n    }\n  }\n\n  return beat_list;\n};\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n\n/*\n  Input to this function is a string representing a single letter in ASCII.\n  Your task is to count how many times this letter occurs in the string.\n\n  >>> parseLetter('a')\n  [1]\n  >>> parseLetter('b')\n  [1]\n  >>> parseLetter('c')\n  [1]\n  >>> parseLetter('d')\n  [1]\n  >>> parseLetter('e')\n  [1]\n  >>> parseLetter('f')\n  [1]\n  >>> parseLetter('g')\n  [1]\n  >>> parseLetter('h')\n  [1]\n  >>> parseLetter('i')\n  [1]\n  >>> parseLetter('j')\n  [1]\n  >>> parseLetter('k')\n  [1]\n  >>> parseLetter('l')\n  [1]\n  >>> parseLetter('m')\n  [1]\n  >>> parseLetter('n')\n  [1]\n  >>> parseLetter('o')\n  [1]\n  >>> parseLetter('p')\n  [1]\n  >>> parseLetter('q')\n  [1]\n  >>> parseLetter('r')\n  [1]\n  >>> parseLetter('s')\n  [1]\n  >>> parseLetter('t')\n  [1]\n  >>> parseLetter('u')\n  [1]\n  >>> parseLetter('v')\n  [1]\n  >>> parseLetter('w')\n  [1]\n  >>> parseLetter('x')\n  [1]\n  >>> parseLetter('y')\n  [1]\n  >>> parseLetter('z')\n  [1]\n  >>> parseLetter('A')\n  [1]\n  >>> parseLetter('B')\n  [1]\n  >>> parseLetter('C')\n  [1]\n  >>> parseLetter('D')\n  [1]\n  >>> parseLetter('E')\n  [1]\n  >>> parseLetter('F')\n  [1]\n  >>> parseLetter('G')\n  [1]\n  >>> parseLetter('H')\n  [1]\n  >>> parseLetter('I')\n  [1]\n  >>> parseLetter('J')\n  [1]\n  >>> parseLetter('K')\n  [1]\n  >>> parseLetter('L')\n  [1]\n  >>> parseLetter('M')\n  [1]\n  >>> parseLetter('N')\n  [1]\n  >>> parseLetter('O')\n  [1]\n  >>> parseLetter('P')\n  [1]\n  >>> parseLetter('Q')\n  [1]\n  >>> parseLetter('R')\n  [1]\n  >>> parseLetter('S')\n  [1]\n  >>> parseLetter('T')\n  [1]\n  >>> parseLetter('U')\n  [1]\n  >>> parseLetter('V')\n  [1]\n  >>> parseLetter('W')\n  [1]\n  >>> parseLetter('X')\n  [1]\n  >>> parseLetter('Y')\n  [1]\n  >>> parseLetter('Z')\n  [1]\n  */\nconst parseLetter = (letter_string) => {\n  const letter_array = letter_string.split('');\n  const count = {};\n\n  for (let i = 0; i < letter_array.length; i += 1) {\n    count[letter_array[i]] = (count[letter_array[i]] || 0) + 1;\n  }\n\n  return count;\n};\n\nconsole.log(parseLetter('a'));\nconsole.log(parseLetter('b'));\nconsole.log(parseLetter('c'));\nconsole.log(parseLetter('d'));\nconsole.log(parseLetter('e'));\nconsole.log(parseLetter('f'));\nconsole.log(parseLetter('g'));\nconsole.log(parseLetter('h'));\nconsole.log(parseLetter('i'));\nconsole.log(parseLetter('j'));\nconsole.log(parseLetter('k'));\nconsole.log(parseLetter('l'));\nconsole.log(parseLetter('m'));\nconsole.log(parseLetter('n'));\nconsole.log(parseLetter('o'));\nconsole.log(parseLetter('p'));\nconsole.log(parseLetter('q'));\nconsole.log(parseLetter('r'));\nconsole.log(parseLetter('s'));\nconsole.log(parseLetter('t'));\nconsole.log(parseLetter('u'));\nconsole.log(parseLetter('v'));\nconsole.log(parseLetter('w'));\nconsole.log(parseLetter('x'));\nconsole.log(parseLetter('y'));\nconsole.log(parseLetter('z'));\nconsole.log(parseLetter('A'));\nconsole.log(parseLetter('B'));\nconsole.log(parseLetter('C'));\nconsole.log(parseLetter('D'));\nconsole.log(parseLetter('E'));\nconsole.log(parseLetter('F'));\nconsole.log(parseLetter('G'));\nconsole.log(parseLetter"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let counter = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.indexOf(substring, i)!== -1) {\n      counter++;\n    }\n  }\n  return counter;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  let numbersList = numbers.split(' ')\n  numbersList = numbersList.map(x => x.toUpperCase())\n  let sortedNumbers = []\n  let sortedNumbersList = []\n  let nums = []\n  for (let i = 0; i < numbersList.length; i++) {\n    numbersList[i] = parseInt(numbersList[i], 10)\n    numbersList[i] = parseInt(numbersList[i], 10)\n    nums.push(numbersList[i])\n  }\n  nums = nums.sort((a, b) => {\n    if (a > b) {\n      return 1\n    } else if (a < b) {\n      return -1\n    } else {\n      return 0\n    }\n  })\n  for (let i = 0; i < nums.length; i++) {\n    sortedNumbersList.push(nums[i])\n  }\n  sortedNumbers = sortedNumbersList.join(' ')\n  return sortedNumbers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  // If the list is empty, return an empty list.\n  if (numbers.length === 0) {\n    return []\n  }\n\n  // If the list has only one element, return that element.\n  if (numbers.length === 1) {\n    return [numbers[0]]\n  }\n\n  // If the list has two elements, find the closest to each other.\n  if (numbers.length === 2) {\n    const difference = Math.abs(numbers[0] - numbers[1])\n    if (difference === 0) {\n      return [numbers[0], numbers[1]]\n    }\n\n    // If the first number is larger than the second, return the second number.\n    if (numbers[0] > numbers[1]) {\n      return [numbers[1], numbers[0]]\n    }\n\n    // If the first number is smaller than the second, return the first number.\n    return [numbers[0], numbers[1]]\n  }\n\n  // If the list has three elements, find the closest to each other.\n  if (numbers.length === 3) {\n    const difference1 = Math.abs(numbers[0] - numbers[1])\n    const difference2 = Math.abs(numbers[1] - numbers[2])\n    const difference3 = Math.abs(numbers[0] - numbers[2])\n    const difference = Math.min(Math.min(difference1, difference2), difference3)\n\n    // If the first number is larger than the second, return the second number.\n    if (difference === difference1) {\n      return [numbers[1], numbers[2]]\n    }\n\n    // If the first number is smaller than the second, return the first number.\n    if (difference === difference2) {\n      return [numbers[0], numbers[2]]\n    }\n\n    // If the first number is smaller than the third, return the first number.\n    return [numbers[0], numbers[1]]\n  }\n\n  // If the list has more than three elements, return the closest to each other.\n  const closestElements = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    for (let j = i + 1; j < numbers.length; j++) {\n      const difference1 = Math.abs(numbers[i] - numbers[j])\n      const difference2 = Math.abs(numbers[j] - numbers[i])\n      const difference3 = Math.abs(numbers[i] - numbers[j])\n      const difference = Math.min(Math.min(difference1, difference2), difference3)\n      if (difference === difference1) {\n        closestElements.push([numbers[i], numbers[j]])\n      }\n      if (difference === difference2) {\n        closestElements.push([numbers[j], numbers[i]])\n      }\n      if (difference === difference3) {\n        closestElements.push([numbers[i], numbers[j]])\n      }\n    }\n  }\n\n  return closestElements\n}\n\nmodule.exports = findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit2 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit2([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit3 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit3([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit4 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit4([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit5 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit5([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit6 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit6([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit7 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit7([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit8 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit8([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit9 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit9([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit10 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit10([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit11 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit11([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit12 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    return acc + num / Math.max(num, 1);\n  }, 0);\n};\n\n/*\n  >>> rescaleTonUit12([1.0, 2.0, 3.0, 4.0, 5.0, 6.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0, 1.0]\n  */\nconst rescaleTonUit13 = (numbers) => {\n  return numbers.reduce((acc, num) => {\n    "}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter((v) => {\n    return typeof v === 'number';\n  });\n};\n\n/**\n  * Filter given list of any python values only for strings\n  * @param {Array} values\n  * @return {Array}\n  * @example\n  * >>> filetrStrings(['a', 3.14, 5])\n  * ['a', '3.14', '5']\n  * >>> filetrStrings([1, 2, 3, 'abc', {}, []])\n  * [1, 2, 3]\n  */\nconst filetrStrings = (values) => {\n  return values.filter((v) => {\n    return typeof v ==='string';\n  });\n};\n\n/**\n * Filter given list of any python values only for booleans\n * @param {Array} values\n * @return {Array}\n * @example\n * >>> filetrBooleans(['a', 3.14, 5])\n * [5]\n * >>> filetrBooleans([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filetrBooleans = (values) => {\n  return values.filter((v) => {\n    return typeof v === 'boolean';\n  });\n};\n\n/**\n * Filter given list of any python values only for null\n * @param {Array} values\n * @return {Array}\n * @example\n * >>> filetrNull(['a', 3.14, 5])\n * []\n * >>> filetrNull([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filetrNull = (values) => {\n  return values.filter((v) => {\n    return v === null;\n  });\n};\n\n/**\n * Filter given list of any python values only for undefined\n * @param {Array} values\n * @return {Array}\n * @example\n * >>> filetrUndefined(['a', 3.14, 5])\n * []\n * >>> filetrUndefined([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filetrUndefined = (values) => {\n  return values.filter((v) => {\n    return typeof v === 'undefined';\n  });\n};\n\n/**\n * Filter given list of any python values only for arrays\n * @param {Array} values\n * @return {Array}\n * @example\n * >>> filetrArrays(['a', 3.14, 5])\n * []\n * >>> filetrArrays([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filetrArrays = (values) => {\n  return values.filter((v) => {\n    return Array.isArray(v);\n  });\n};\n\n/**\n * Filter given list of any python values only for dictionaries\n * @param {Array} values\n * @return {Array}\n * @example\n * >>> filetrDictionaries(['a', 3.14, 5])\n * []\n * >>> filetrDictionaries([1, 2, 3, 'abc', {}, []])\n * [1, 2, 3]\n */\nconst filetrDictionaries = (values) => {\n  return values.filter((v) => {\n    return typeof v === 'object';\n  });\n};\n\nexport default filetr;\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length\n  return len === 0? 0 : len - 1\n}\n\n/* Convert string to lower case */\nconst strtolower = (string) => {\n  const len = string.length\n  const newStr = []\n  let i = 0\n  for (i = 0; i < len; i++) {\n    newStr.push(string[i].toLowerCase())\n  }\n  return newStr.join('')\n}\n\n/* Convert string to upper case */\nconst strtoupper = (string) => {\n  const len = string.length\n  const newStr = []\n  let i = 0\n  for (i = 0; i < len; i++) {\n    newStr.push(string[i].toUpperCase())\n  }\n  return newStr.join('')\n}\n\n/* Return true if given string is a number */\nconst isNumber = (string) => {\n  const re = /\\d+/g\n  return re.test(string)\n}\n\n/* Return true if given string is a boolean */\nconst isBoolean = (string) => {\n  return string === 'true' || string === 'false'\n}\n\n/* Return true if given string is a string */\nconst isString = (string) => {\n  return typeof string ==='string'\n}\n\n/* Return true if given string is a function */\nconst isFunction = (string) => {\n  return typeof string === 'function'\n}\n\n/* Return true if given string is an array */\nconst isArray = (string) => {\n  return typeof string === 'object' && string.constructor === Array\n}\n\n/* Return true if given string is a regular expression */\nconst isRegExp = (string) => {\n  return typeof string === 'object' && string.constructor === RegExp\n}\n\n/* Return true if given string is an object */\nconst isObject = (string) => {\n  return typeof string === 'object' && typeof string.constructor === 'function'\n}\n\n/* Return true if given string is a date */\nconst isDate = (string) => {\n  return typeof string === 'object' && typeof string.constructor === 'function' && string.constructor.name === 'Date'\n}\n\n/* Return true if given string is an empty string */\nconst isEmpty = (string) => {\n  return string === ''\n}\n\n/* Return true if given string is undefined */\nconst isUndefined = (string) => {\n  return typeof string === 'undefined'\n}\n\n/* Return true if given string is null */\nconst isNull = (string) => {\n  return string === null\n}\n\n/* Return true if given string is undefined */\nconst isNil = (string) => {\n  return string === null || string === undefined\n}\n\n/* Return true if given string is a number */\nconst isNumber = (string) => {\n  return typeof string === 'number'\n}\n\n/* Return true if given string is a boolean */\nconst isBoolean = (string) => {\n  return typeof string === 'boolean'\n}\n\n/* Return true if given string is a string */\nconst isString = (string) => {\n  return typeof string ==='string'\n}\n\n/* Return true if given string is a function */\nconst isFunction = (string) => {\n  return typeof string === 'function'\n}\n\n/* Return true if given string is an array */\nconst isArray = (string) => {\n  return typeof string === 'object' && string.constructor === Array\n}\n\n/* Return true if given string is a regular expression */\nconst isRegExp = (string) => {\n  return typeof string === 'object' && string.constructor === RegExp\n}\n\n/* Return true if given string is an object */\nconst isObject = (string) => {\n  return typeof string === 'object' && typeof string.constructor === 'function'\n}\n\n/* Return true if given string is a date */\nconst isDate = (string) => {\n  return typeof string === 'object' && typeof string.constructor === 'function' && string.constructor.name === 'Date'\n}\n\n/* Return true if given string is undefined */\nconst isUndefined = (string) => {\n  return typeof string === 'undefined'\n}\n\n/* Return true if given string is null */\nconst isNull = (string) => {\n  return string === null\n}\n\n/* Return true if given string is undefined */\nconst isNil = (string) => {\n  return string === null || string === undefined\n}\n\n/* Return true if given string is a number */\nconst isNumber = (string) => {\n  return typeof string === 'number'\n}\n\n/* Return true if given string is a boolean */\nconst isBoolean = (string) => {\n  return typeof string === 'boolean'\n}\n\n/* Return true if given string is a string */\nconst isString = (string) => {\n  return typeof string ==='string'\n}\n\n/* Return true if given string is a function */\nconst isFunction = (string) => {\n  return typeof string === 'function'\n}\n\n/* Return true if given string is an array */\nconst isArray = (string) => {\n  return typeof string === 'object' && string.constructor === Array\n}\n\n/* Return true if given string is a regular expression */\nconst isRegExp = (string) => {\n  return typeof string === 'object' && string.constructor === RegExp\n}\n\n/* Return true if given string is an object */\nconst isObject = (string) => {\n  return typeof string === 'object' && typeof string.constructor === 'function'\n}\n\n/* Return true if given string is a date */\nconst isDate = (string) => {\n  return typeof string === 'object' && typeof string.constructor === 'function' && string.constructor.name === 'Date'\n}\n\n/* Return true if given string is undefined */\nconst isUndefined = (string) => {\n  return typeof string === 'undefined'\n}\n\n/* Return true if given string is null */\nconst isNull = (string) => {\n  return string === null\n}\n\n/* Return true if given string is undefined */\nconst isNil = (string) => {"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let max = 1\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      max = Math.max(max, i)\n    }\n  }\n  return max\n}\n\n/*\n  Given a positive integer n, find the largest integer that is smaller than n and is evenly divisible by one or more prime numbers in the range 2 to n.\n  >>> largestMultiple(15)\n  10\n  */\nconst largestMultiple = (n) => {\n  let max = 1\n  for (let i = 2; i <= n; i++) {\n    if (n % i === 0) {\n      max = Math.max(max, i)\n    }\n  }\n  return max\n}\n\n/*\n  Find the largest prime number that can be written as the sum of a prime and a non-prime number.\n  >>> largestPrimeNumber(500)\n  503\n  */\nconst largestPrimeNumber = (n) => {\n  let largestPrime = 0\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      largestPrime = Math.max(largestPrime, largestPrimeNumber(i))\n    }\n  }\n  return largestPrime\n}\n\n/*\n  Given two positive integers a and b, return the largest positive integer that is evenly divisible by both a and b.\n  >>> largestCommonMultiple(10, 20)\n  40\n  */\nconst largestCommonMultiple = (a, b) => {\n  let max = 1\n  for (let i = 2; i <= a; i++) {\n    if (a % i === 0 && b % i === 0) {\n      max = Math.max(max, i)\n    }\n  }\n  return max\n}\n\n/*\n  Find the largest positive integer that is evenly divisible by all the numbers from 1 to n.\n  >>> largestCommonMultiple(15, 20)\n  15\n  */\nconst largestCommonMultipleAllNumbers = (n) => {\n  let largest = 1\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      largest = largestCommonMultiple(largest, i)\n    }\n  }\n  return largest\n}\n\n/*\n  Find the smallest positive integer that is evenly divisible by all the numbers from 1 to n.\n  >>> smallestCommonMultipleAllNumbers(20)\n  15\n  */\nconst smallestCommonMultipleAllNumbers = (n) => {\n  let smallest = 1\n  for (let i = 1; i <= n; i++) {\n    if (isPrime(i)) {\n      smallest = smallestCommonMultiple(smallest, i)\n    }\n  }\n  return smallest\n}\n\n/*\n  Find the largest number that can be written as the sum of a prime and a non-prime number, that is smaller than n.\n  >>> largestNonPrimeNumber(500)\n  501\n  */\nconst largestNonPrimeNumber = (n) => {\n  let largest = 1\n  for (let i = 2; i <= n; i++) {\n    if (!isPrime(i)) {\n      largest = Math.max(largest, largestNonPrimeNumber(i))\n    }\n  }\n  return largest\n}\n\n/*\n  Find the largest number that can be written as the sum of a prime and a non-prime number, that is smaller than n.\n  >>> largestNonPrimeNumber(500)\n  501\n  */\nconst largestNonPrimeNumberAllNumbers = (n) => {\n  let largest = 1\n  for (let i = 2; i <= n; i++) {\n    if (!isPrime(i)) {\n      largest = largestNonPrimeNumber(i)\n    }\n  }\n  return largest\n}\n\n/*\n  Find the smallest number that can be written as the sum of a prime and a non-prime number, that is smaller than n.\n  >>> smallestNonPrimeNumber(500)\n  500\n  */\nconst smallestNonPrimeNumber = (n) => {\n  let smallest = 1\n  for (let i = 2; i <= n; i++) {\n    if (!isPrime(i)) {\n      smallest = Math.min(smallest, smallestNonPrimeNumber(i))\n    }\n  }\n  return smallest\n}\n\n/*\n  Find the smallest number that can be written as the sum of a prime and a non-prime number, that is smaller than n.\n  >>> smallestNonPrimeNumber(500)\n  500\n  */\nconst smallestNonPrimeNumberAllNumbers = (n) => {\n  let smallest = 1\n  for (let i = 2; i <= n; i++) {\n    if (!isPrime(i)) {\n      smallest = smallestNonPrimeNumber(i)\n    }\n  }\n  return smallest\n}\n\n/*\n  Find the largest number that can be written as the sum of a prime and a non-prime number, that is smaller than n.\n  >>> largestNonPrimeNumber(500)\n  501\n  */\nconst largestPrimeNumberAllNumbers = (n) => {\n  let largestPrime = 1\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      largestPrime = largestPrimeNumber(i)\n    }\n  }\n  return largestPrime\n}\n\n/*\n  Given a positive integer n, return the largest positive integer that is less than or equal to n and is divisible by the number of primes in the range 2 to n.\n  >>> largestDivisibleNumber(500)\n  499\n  */\nconst largestDivisibleNumber = (n) => {\n  let max = 1\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      max = largestPrimeNumber(i)\n    }\n  }\n  return max\n}\n\n/*\n  Given a positive integer n, return the largest positive integer that is less than or equal to n and is divisible by the number of primes in the range 2 to n.\n  >>> largestDivisibleNumber(500)\n  499\n  */\nconst largestDivisibleNumberAllNumbers = (n) => {\n  let largestPrime = 1\n  for (let i = 2; i <= n; i++) {\n    if (isPrime(i)) {\n      largestPrime = largestPrimeNumber(i)\n    }\n  }\n  return largestPrime\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const factors = [1]\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n    }\n  }\n  return factors\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize2 = (n) => {\n  const factors = [1]\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) {\n      factors.push(i)\n      factors.push(n / i)\n    }\n  }\n  return factors\n}\n\n/* Return the number of prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  3\n  >>> factorize(25)\n  3\n  >>> factorize(70)\n  5\n  */\nconst numberOfPrimeFactors = (n) => {\n  const factors = factorize(n)\n  return factors.length\n}\n\n/* Return the largest prime factor of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  2\n  >>> factorize(70)\n  7\n  */\nconst largestPrimeFactor = (n) => {\n  const factors = factorize(n)\n  return factors[factors.length - 1]\n}\n\n/* Return the smallest prime factor of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  2\n  >>> factorize(70)\n  2\n  */\nconst smallestPrimeFactor = (n) => {\n  const factors = factorize(n)\n  return factors[0]\n}\n\n/* Return the product of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2 * 2 * 2\n  >>> factorize(25)\n  25\n  >>> factorize(70)\n  70\n  */\nconst productOfPrimeFactors = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((acc, x) => acc * x, 1)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2 + 2 + 2\n  >>> factorize(25)\n  25\n  >>> factorize(70)\n  70\n  */\nconst sumOfPrimeFactors = (n) => {\n  const factors = factorize(n)\n  return factors.reduce((acc, x) => acc + x, 0)\n}\n\n/* Return a list of prime factors in the order from largest to smallest.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst largestToSmallest = (n) => {\n  const factors = factorize2(n)\n  return factors.reverse()\n}\n\n/* Return a list of prime factors in the order from smallest to largest.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst smallestToLargest = (n) => {\n  const factors = factorize2(n)\n  return factors\n}\n\n/* Return the number of prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  3\n  >>> factorize(25)\n  3\n  >>> factorize(70)\n  5\n  */\nconst numberOfSmallestPrimeFactors = (n) => {\n  const factors = factorize2(n)\n  return factors.length\n}\n\n/* Return the largest prime factor of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  2\n  >>> factorize(70)\n  7\n  */\nconst largestPrimeFactorOfSmallest = (n) => {\n  const factors = factorize2(n)\n  return factors[0]\n}\n\n/* Return the smallest prime factor of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2\n  >>> factorize(25)\n  2\n  >>> factorize(70)\n  2\n  */\nconst smallestPrimeFactorOfLargest = (n) => {\n  const factors = factorize2(n)\n  return factors[factors.length - 1]\n}\n\n/* Return the product of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  2 * 2 * 2\n  >>> factorize(25)\n  25\n  >>> factorize(70)\n  70\n  */\nconst productOfSmallestPrimeFactors = (n) => {\n  const factors = factorize2(n)\n  return factors.reduce((acc, x) => acc * x, 1)\n}\n\n/* Return the sum of all prime factors of given integer.\n  Input number should be equal to the product of all factors\n  "}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const seen = new Set();\n  return numbers.filter(element => seen.add(element));\n};\n\n/*\n  Find the largest element in a list of numbers.\n  >>> findMax([1, 3, 2, 4])\n  4\n  */\nconst findMax = (numbers) => {\n  const max = numbers[0];\n  numbers.forEach(number => {\n    if (number > max) {\n      max = number;\n    }\n  });\n  return max;\n};\n\n/*\n  Find the smallest element in a list of numbers.\n  >>> findMin([1, 3, 2, 4])\n  1\n  */\nconst findMin = (numbers) => {\n  const min = numbers[0];\n  numbers.forEach(number => {\n    if (number < min) {\n      min = number;\n    }\n  });\n  return min;\n};\n\n/*\n  Add two numbers together.\n  >>> add([1, 2, 3])\n  [2, 4, 6]\n  */\nconst add = (numbers) => {\n  return numbers.reduce((a, b) => a + b);\n};\n\n/*\n  Multiply two numbers.\n  >>> multiply([1, 2, 3])\n  [1, 4, 9]\n  */\nconst multiply = (numbers) => {\n  return numbers.reduce((a, b) => a * b);\n};\n\n/*\n  Return the sum of the squares of the elements in the list.\n  >>> sumOfSquares([1, 4, 9])\n  45\n  */\nconst sumOfSquares = (numbers) => {\n  return multiply(numbers).map(n => n * n);\n};\n\n/*\n  Return the average of the elements in the list.\n  >>> average([1, 4, 9])\n  5\n  */\nconst average = (numbers) => {\n  return sumOfSquares(numbers).reduce((a, b) => a + b) / numbers.length;\n};\n\n/*\n  Find the sum of the even elements in the list.\n  >>> sumOfEvens([1, 2, 4, 6, 8, 10])\n  30\n  */\nconst sumOfEvens = (numbers) => {\n  return numbers.filter(number => number % 2 === 0).reduce((a, b) => a + b);\n};\n\n/*\n  Return the sum of the odd elements in the list.\n  >>> sumOfOdds([1, 2, 4, 6, 8, 10])\n  21\n  */\nconst sumOfOdds = (numbers) => {\n  return numbers.filter(number => number % 2!== 0).reduce((a, b) => a + b);\n};\n\n/*\n  Find the difference between the largest and the smallest element in the list.\n  >>> diff([1, 3, 2, 4])\n  2\n  */\nconst diff = (numbers) => {\n  const max = findMax(numbers);\n  const min = findMin(numbers);\n  return max - min;\n};\n\n/*\n  Find the sum of the even values in the list.\n  >>> sumOfEvens([1, 2, 4, 6, 8, 10])\n  16\n  */\nconst sumOfEvens = (numbers) => {\n  return numbers.filter(number => number % 2 === 0).reduce((a, b) => a + b);\n};\n\n/*\n  Find the sum of the odd values in the list.\n  >>> sumOfOdds([1, 2, 4, 6, 8, 10])\n  21\n  */\nconst sumOfOdds = (numbers) => {\n  return numbers.filter(number => number % 2!== 0).reduce((a, b) => a + b);\n};\n\n/*\n  Find the product of the elements in the list.\n  >>> product([1, 2, 3])\n  6\n  */\nconst product = (numbers) => {\n  return numbers.reduce((a, b) => a * b);\n};\n\n/*\n  Find the difference between the largest and the smallest element in the list.\n  >>> diff([1, 3, 2, 4])\n  2\n  */\nconst difference = (numbers) => {\n  const max = findMax(numbers);\n  const min = findMin(numbers);\n  return max - min;\n};\n\n/*\n  Find the sum of the even values in the list.\n  >>> sumOfEvens([1, 2, 4, 6, 8, 10])\n  16\n  */\nconst sumOfEvens = (numbers) => {\n  return numbers.filter(number => number % 2 === 0).reduce((a, b) => a + b);\n};\n\n/*\n  Find the sum of the odd values in the list.\n  >>> sumOfOdds([1, 2, 4, 6, 8, 10])\n  21\n  */\nconst sumOfOdds = (numbers) => {\n  return numbers.filter(number => number % 2!== 0).reduce((a, b) => a + b);\n};\n\nmodule.exports = {\n  removeDuplicates,\n  findMax,\n  findMin,\n  add,\n  multiply,\n  sumOfSquares,\n  average,\n  sumOfEvens,\n  sumOfOdds,\n  difference,\n  sumOfEvens,\n  sumOfOdds,\n  product,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.split('').map((char) => {\n    if (char.toLowerCase() === char) {\n      return char.toUpperCase();\n    } else if (char.toUpperCase() === char) {\n      return char.toLowerCase();\n    } else {\n      return char;\n    }\n  }).join('');\n};\n\n/**\n  * Given a string, return a reversed version of the string.\n  * @param {string} string\n  * @returns {string}\n  */\nconst reverse = (string) => {\n  return string.split('').reverse().join('');\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string removed.\n  * @param {string} string\n  * @param {string} substr\n  * @returns {string}\n  */\nconst removeSubstr = (string, substr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), '');\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string removed.\n  * @param {string} string\n  * @param {string} substr\n  * @returns {string}\n  */\nconst removeSubstrInPlace = (string, substr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), '');\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string removed.\n  * @param {string} string\n  * @param {string} substr\n  * @returns {string}\n  */\nconst replaceSubstr = (string, substr, newSubstr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), newSubstr);\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string removed.\n  * @param {string} string\n  * @param {string} substr\n  * @returns {string}\n  */\nconst replaceSubstrInPlace = (string, substr, newSubstr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), newSubstr);\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string replaced.\n  * @param {string} string\n  * @param {string} substr\n  * @param {string} newSubstr\n  * @returns {string}\n  */\nconst replaceSubstrInPlaceAll = (string, substr, newSubstr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), newSubstr);\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string replaced.\n  * @param {string} string\n  * @param {string} substr\n  * @param {string} newSubstr\n  * @returns {string}\n  */\nconst replaceAllSubstr = (string, substr, newSubstr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), newSubstr);\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string replaced.\n  * @param {string} string\n  * @param {string} substr\n  * @param {string} newSubstr\n  * @returns {string}\n  */\nconst replaceAllSubstrInPlace = (string, substr, newSubstr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), newSubstr);\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string replaced.\n  * @param {string} string\n  * @param {string} substr\n  * @param {string} newSubstr\n  * @returns {string}\n  */\nconst replaceAllSubstrInPlaceAll = (string, substr, newSubstr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), newSubstr);\n};\n\n/**\n  * Given a string, return a version of the string with all instances of a given string replaced.\n  * @param {string} string\n  * @param {string} substr\n  * @param {string} newSubstr\n  * @returns {string}\n  */\nconst replaceAllSubstrAll = (string, substr, newSubstr) => {\n  return string.replace(new RegExp(`[${substr}]`, 'g'), newSubstr);\n};\n\nexport default {\n  flipCase,\n  reverse,\n  removeSubstr,\n  removeSubstrInPlace,\n  replaceSubstr,\n  replaceSubstrInPlace,\n  replaceSubstrInPlaceAll,\n  replaceSubstrAll,\n  replaceSubstrAllInPlace,\n  replaceAllSubstr,\n  replaceAllSubstrInPlace,\n  replaceAllSubstrInPlaceAll,\n  replaceAllSubstrAll,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, current) => acc + current, '')\n}\n\n/*\n  Create a function that accepts two parameters and returns a string\n  >>> concat(2, 'a')\n  '2a'\n  >>> concat('a', 2)\n  'a2'\n  */\nconst concat = (first, second) => {\n  return first + second\n}\n\n/*\n  Create a function that takes one parameter and returns a string\n  >>> reverse('a')\n  'a'\n  >>> reverse(2)\n  2\n  */\nconst reverse = (input) => {\n  return input.split('').reverse().join('')\n}\n\n/*\n  Create a function that takes two parameters and returns a string\n  >>> join(2, 'a')\n  '2a'\n  >>> join('a', 2)\n  'a2'\n  */\nconst join = (first, second) => {\n  return first + second\n}\n\n/*\n  Create a function that takes one parameter and returns a string\n  >>> split('a')\n  ['a']\n  >>> split('a', 2)\n  ['a', '']\n  */\nconst split = (input, split) => {\n  return input.split(split)\n}\n\n/*\n  Create a function that takes one parameter and returns a number\n  >>> add(2, 3)\n  5\n  >>> add(2, '3')\n  5\n  >>> add(2, 'a')\n  'a'\n  >>> add('a', '3')\n  'a3'\n  */\nconst add = (first, second) => {\n  return first + second\n}\n\n/*\n  Create a function that takes one parameter and returns a number\n  >>> subtract(2, 3)\n  -1\n  >>> subtract(2, '3')\n  2\n  >>> subtract(2, 'a')\n  'a'\n  >>> subtract('a', '3')\n  'a3'\n  */\nconst subtract = (first, second) => {\n  return first - second\n}\n\n/*\n  Create a function that takes two parameters and returns a number\n  >>> multiply(2, 3)\n  6\n  >>> multiply(2, '3')\n  6\n  >>> multiply(2, 'a')\n  'a'\n  >>> multiply('a', '3')\n  'a3'\n  */\nconst multiply = (first, second) => {\n  return first * second\n}\n\n/*\n  Create a function that takes two parameters and returns a number\n  >>> divide(2, 3)\n  2\n  >>> divide(2, '3')\n  2\n  >>> divide(2, 'a')\n  'a'\n  >>> divide('a', '3')\n  'a3'\n  */\nconst divide = (first, second) => {\n  return first / second\n}\n\n/*\n  Create a function that takes one parameter and returns a number\n  >>> factorial(2)\n  2\n  >>> factorial(3)\n  6\n  >>> factorial(4)\n  24\n  */\nconst factorial = (number) => {\n  if (number === 0) {\n    return 1\n  }\n  return number * factorial(number - 1)\n}\n\n/*\n  Create a function that takes two parameters and returns a number\n  >>> fibonacci(2)\n  2\n  >>> fibonacci(3)\n  3\n  >>> fibonacci(4)\n  5\n  >>> fibonacci(5)\n  8\n  */\nconst fibonacci = (n) => {\n  if (n === 1 || n === 2) {\n    return n\n  }\n  return fibonacci(n - 1) + fibonacci(n - 2)\n}\n\n/*\n  Create a function that takes one parameter and returns a number\n  >>> sum(2, 3)\n  5\n  >>> sum(2, '3')\n  5\n  >>> sum(2, 'a')\n  'a'\n  >>> sum('a', '3')\n  'a3'\n  */\nconst sum = (first, second) => {\n  return first + second\n}\n\n/*\n  Create a function that takes one parameter and returns a string\n  >>> sub(2, 3)\n  '2'\n  >>> sub(2, '3')\n  '2'\n  >>> sub(2, 'a')\n  'a'\n  >>> sub('a', '3')\n  'a3'\n  */\nconst sub = (first, second) => {\n  return first - second\n}\n\n/*\n  Create a function that takes two parameters and returns a string\n  >>> subtract(2, 3)\n  '1'\n  >>> subtract(2, '3')\n  '1'\n  >>> subtract(2, 'a')\n  'a'\n  >>> subtract('a', '3')\n  'a3'\n  */\nconst subtract = (first, second) => {\n  return first - second\n}\n\n/*\n  Create a function that takes one parameter and returns a string\n  >>> stringify(2)\n  '2'\n  >>> stringify(2.5)\n  '2.5'\n  >>> stringify('a')\n  'a'\n  >>> stringify('a', '3')\n  'a3'\n  */\nconst stringify = (object) => {\n  return JSON.stringify(object)\n}\n\n/*\n  Create a function that takes one parameter and returns a string\n  >>> isInt(2)\n  true\n  >>> isInt(2.5)\n  false\n  >>> isInt('a')\n  false\n  >>> isInt('a', '3')\n  true\n  */\nconst isInt = (number, int) => {\n  return number % 1 === 0\n}\n\n/*\n  Create a function that takes one parameter and returns a boolean\n  >>> isBoolean(2)\n  false\n  >>> isBoolean(2.5)\n  false\n  >>> isBoolean('a')\n  false\n  >>> isBoolean('a', '3')\n  true\n  */\nconst isBoolean = (boolean, boolean2) => {\n  return boolean2 === boolean\n}\n\n/*\n  Create a function that takes"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  let ret = []\n  for (let string of strings) {\n    if (string.slice(0, prefix.length) === prefix) {\n      ret.push(string)\n    }\n  }\n  return ret\n}\n\n/*\n  ## Function `iflterByrPefixList`\n  \n  Filters an input list of lists of strings only for ones that start with a given prefix.\n  \n  >>> iflterByrPefixList([], 'a')\n  []\n  >>> iflterByrPefixList([['abc', 'bcd', 'cde', 'array'], ['array', 'bcd', 'cde', 'array'], ['array', 'abc', 'cde', 'array']], 'a')\n  [['array', 'bcd', 'cde', 'array'], ['array', 'abc', 'cde', 'array']]\n  */\nconst iflterByrPefixList = (lists, prefix) => {\n  let ret = []\n  for (let list of lists) {\n    ret = ret.concat(iflterByrPefix(list, prefix))\n  }\n  return ret\n}\n\n/*\n  ## Function `iflterByrPefixMap`\n  \n  Filters an input map of lists of strings only for ones that start with a given prefix.\n  \n  >>> iflterByrPefixMap({}, 'a')\n  []\n  >>> iflterByrPefixMap({['abc', 'bcd', 'cde', 'array']: ['array', 'bcd', 'cde', 'array'], ['array', 'abc', 'cde', 'array']: ['array', 'abc', 'cde', 'array']}, 'a')\n  {['array', 'bcd', 'cde', 'array']: ['array', 'bcd', 'cde', 'array'], ['array', 'abc', 'cde', 'array']: ['array', 'abc', 'cde', 'array']}\n  */\nconst iflterByrPefixMap = (map, prefix) => {\n  let ret = {}\n  for (let [key, value] of map) {\n    ret[key] = iflterByrPefix(value, prefix)\n  }\n  return ret\n}\n\n/*\n  ## Function `iflterByrPefixListMap`\n  \n  Filters an input map of lists of lists of strings only for ones that start with a given prefix.\n  \n  >>> iflterByrPefixListMap({}, 'a')\n  []\n  >>> iflterByrPefixListMap({['abc', 'bcd', 'cde', 'array']: [['array', 'bcd', 'cde', 'array'], ['array', 'abc', 'cde', 'array'], ['array', 'abc', 'cde', 'array']], ['array', 'abc', 'cde', 'array']: [['array', 'abc', 'cde', 'array'], ['array', 'abc', 'cde', 'array'], ['array', 'abc', 'cde', 'array']]}, 'a')\n  {['array', 'bcd', 'cde', 'array']: [['array', 'bcd', 'cde', 'array'], ['array', 'abc', 'cde', 'array'], ['array', 'abc', 'cde', 'array']], ['array', 'abc', 'cde', 'array']: [['array', 'abc', 'cde', 'array'], ['array', 'abc', 'cde', 'array'], ['array', 'abc', 'cde', 'array']]}\n  */\nconst iflterByrPefixListMap = (map, prefix) => {\n  let ret = {}\n  for (let [key, value] of map) {\n    ret[key] = iflterByrPefixList(value, prefix)\n  }\n  return ret\n}\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter((x) => x > 0)\n}\n\n/**\n  * Sort the given list.\n  * @param {any[]} l\n  * @return {any[]}\n  */\nconst sort = (l) => {\n  return l.slice().sort((a, b) => a - b)\n}\n\n/**\n  * Find the maximum number in the given list.\n  * @param {any[]} l\n  * @return {number}\n  */\nconst findMax = (l) => {\n  return Math.max.apply(Math, l)\n}\n\n/**\n  * Find the minimum number in the given list.\n  * @param {any[]} l\n  * @return {number}\n  */\nconst findMin = (l) => {\n  return Math.min.apply(Math, l)\n}\n\n/**\n  * Calculate the mean of the given list.\n  * @param {any[]} l\n  * @return {number}\n  */\nconst mean = (l) => {\n  return l.reduce((p, n) => p + n, 0) / l.length\n}\n\n/**\n  * Calculate the median of the given list.\n  * @param {any[]} l\n  * @return {number}\n  */\nconst median = (l) => {\n  return findMax(l) + findMin(l) / 2\n}\n\n/**\n  * Calculate the standard deviation of the given list.\n  * @param {any[]} l\n  * @return {number}\n  */\nconst stdDev = (l) => {\n  return Math.sqrt(meanSquaredError(l))\n}\n\n/**\n  * Calculate the mean squared error of the given list.\n  * @param {any[]} l\n  * @return {number}\n  */\nconst meanSquaredError = (l) => {\n  return l.reduce((p, n) => p + n * n, 0) / l.length\n}\n\n/**\n  * Calculate the standard deviation of the given list.\n  * @param {any[]} l\n  * @return {number}\n  */\nconst stdDeviation = (l) => {\n  return stdDev(l) / Math.sqrt(l.length)\n}\n\n/**\n  * Calculate the Pearson's coefficient of the given lists.\n  * @param {any[]} l1\n  * @param {any[]} l2\n  * @return {number}\n  */\nconst pearson = (l1, l2) => {\n  const x = l1.map(x => x)\n  const y = l2.map(y => y)\n\n  const a = mean(x)\n  const b = mean(y)\n\n  const sum = x.reduce((p, n) => p + n, 0)\n  const sum2 = y.reduce((p, n) => p + n, 0)\n\n  const c = sum / x.length\n  const d = sum2 / y.length\n\n  const denom = Math.sqrt((a * a) + (b * b))\n\n  const r = (a * d - b * c) / denom\n\n  return r\n}\n\nmodule.exports = {\n  getPositive,\n  sort,\n  findMax,\n  findMin,\n  mean,\n  median,\n  stdDev,\n  meanSquaredError,\n  stdDeviation,\n  pearson\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n    if (n === 1) return false;\n    else if (n === 2) return true;\n    else if (n % 2 === 0) return false;\n    else return (\n        (\n            (\n                n === 3 || n === 5 || n === 7 || n === 11 || n === 13 || n === 17 || n === 19 || n === 23 || n === 29\n            ) && (\n                (n % 8 === 3 || n % 8 === 5 || n % 8 === 7 || n % 8 === 11 || n % 8 === 13 || n % 8 === 17 || n % 8 === 19 || n % 8 === 23) ||\n                (n % 16 === 3 || n % 16 === 5 || n % 16 === 7 || n % 16 === 11 || n % 16 === 13 || n % 16 === 17 || n % 16 === 19 || n % 16 === 23) ||\n                (n % 32 === 3 || n % 32 === 5 || n % 32 === 7 || n % 32 === 11 || n % 32 === 13 || n % 32 === 17 || n % 32 === 19 || n % 32 === 23) ||\n                (n % 64 === 3 || n % 64 === 5 || n % 64 === 7 || n % 64 === 11 || n % 64 === 13 || n % 64 === 17 || n % 64 === 19 || n % 64 === 23) ||\n                (n % 128 === 3 || n % 128 === 5 || n % 128 === 7 || n % 128 === 11 || n % 128 === 13 || n % 128 === 17 || n % 128 === 19 || n % 128 === 23)\n            )\n        )\n    ) ||\n        (\n            (\n                n === 3 || n === 5 || n === 7 || n === 11 || n === 13 || n === 17 || n === 19 || n === 23 || n === 29 || n === 31 || n === 33 || n === 37 || n === 41 || n === 43 || n === 47 || n === 49 || n === 53 || n === 59 || n === 61 || n === 67 || n === 71 || n === 73 || n === 79 || n === 83 || n === 89 || n === 97 || n === 99 || n === 101 || n === 103 || n === 107 || n === 109 || n === 113 || n === 127 || n === 131 || n === 137 || n === 139 || n === 149 || n === 151 || n === 157 || n === 163 || n === 167 || n === 173 || n === 179 || n === 181 || n === 191 || n === 193 || n === 197 || n === 199 || n === 211 || n === 223 || n === 227 || n === 229 || n === 233 || n === 239 || n === 241 || n === 251 || n === 257 || n === 263 || n === 271 || n === 277 || n === 281 || n === 283 || n === 293 || n === 307 || n === 311 || n === 313 || n === 317 || n === 331 || n === 337 || n === 347 || n === 349 || n === 353 || n === 359 || n === 367 || n === 373 || n === 379 || n === 383 || n === 389 || n === 397 || n === 401 || n === 409 || n === 419 || n === 421 || n === 431 || n === 433 || n === 439 || n === 443 || n === 449 || n === 457 || n === 461 || n === 463 || n === 467 || n === 479 || n === 487 || n === 491 || n === 499 || n === 503 || n === 509 || n === 521 || n === 523 || n === 541 || n === 547 || n === 557 || n === 563 || n === 569 || n === 571 || n === 577 || n === 587 || n === 593 || n === 599 || n === 601 || n === 607 || n === 613 || n === 617 || n === 619 || n === 631 || n === 641 || n === 643 || n === 647 || n === 653 || n === 659 || n === 661 || n === 673 || n === 677 || n === 683 || n === 691 || n === 701 || n === 709 || n === 719 || n === 727 || n === 733 || n === 739 || n === 743 || n === 751 || n === 757 || n === 761 || n === 769 || n === 773 || n === 787 || n === 797 || n === 809 || n === 811 || n === 821 || n === 823 || n === 827 || n === 829 || n === 839 || n === 853 || n === 857 || n === 859 || n === 863 || n === 877 || n === 881 || n === 883 || n === 887 || n === 907 || n === 911 || n === 919 || n === 929 || n === 937 || n === 941 || n === 947 || n === 953 || n === 967 || n === 971 || n === 977 || n === 983 || n === 991 || n === 997 || n === 1009 || n === 1013 || n === 1019 || n === 1021 || n === 1031 || n === 1033 || n === 1051 || n === 1057 || n === 1061 || n === 1063 || n === 1069 || n === 1087 || n === 1091 || n === 1093 || n === 1097 || n === 1103 || n === 1109 || n === 1117 || n === 1123 || n === 1129 || n === 1151 || n === 1159 || n === 1163 || n === 1171 || n === 1181 || n === 1187 || n === 1193 || n === 1201 || n === 1213 || n === 1217 || n === 1223 || n === 1229 || n === 1231 || n === 1237 || n === 1249 || n === 1259 || n === 1277 || n === 1279 || n === 1283 || n === 1289 || n === 1291 || n === 1297 || n === 1301 || n === 1303 || n === 1307 || n === 1319 || n === 1321 || n === 1327 || n === 1361 || n === 1367 || n === 1373 || n === 1381 || n === 1399 || n === 1409 || n === 1423 || n === 1427 || n === 1429 || n === 1433 || n === 1439 || n === 1447 || n === 1451 || n === 1453"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  const n = xs.length\n  const k = n / 2\n  const x = 0.5 * Math.pow(-xs[k], 1.0 / k)\n  if (poly(x) === 0) return x\n  return findZero(xs.slice(0, k))\n}\n\n// Test Cases\n\n/*\n  >>> findZero([1, 2, -3, -2, 4, -3, 3, -3, -2, 2, 1, -3, -2, 1])\n  -0.5\n  >>> findZero([-6, 11, -6, 1])\n  1.0\n  >>> findZero([1, 2, -3, -2, 4, -3, 3, -3, -2, 2, 1, -3, -2, 1, 3, 4, 5])\n  0.5\n  >>> findZero([-6, 11, -6, 1, 3, 4, 5])\n  -0.5\n  >>> findZero([-6, 11, -6, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5])\n  0.5\n  >>> findZero([1, 2, -3, -2, 4, -3, 3, -3, -2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1])\n  0.5\n  >>> findZero([-6, 11, -6, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5])\n  0.5\n  >>> findZero([-6, 11, -6, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1])\n  0.5\n  >>> findZero([-6, 11, -6, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1])\n  0.5\n  >>> findZero([-6, 11, -6, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2, 2, 1, -3, -2, 1, 3, 4, 5, 2"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3!== 0) {\n      l2.push(l[i])\n    }\n  }\n  l2 = l2.concat(l)\n  return l2.sort()\n}\n\n/**\n  * This function takes a list l and returns a list l' such that\n  * l' is identical to l in the indicies that are not divisible by five, while its values at the indicies that are divisible by five are equal\n  * to the values of the corresponding indicies of l, but sorted.\n  *\n  * >>> sortFifth([1, 2, 3])\n  * [1, 2, 3]\n  * >>> sortFifth([5, 6, 3, 4, 8, 9, 2])\n  * [2, 3, 4, 5, 6, 8, 9]\n  *\n  */\nconst sortFifth = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 5!== 0) {\n      l2.push(l[i])\n    }\n  }\n  l2 = l2.concat(l)\n  return l2.sort()\n}\n\n/**\n  * This function takes a list l and returns a list l' such that\n  * l' is identical to l in the indicies that are not divisible by both three and five, while its values at the indicies that are divisible by three or five are equal\n  * to the values of the corresponding indicies of l, but sorted.\n  *\n  * >>> sortThirdFifth([1, 2, 3])\n  * [1, 2, 3]\n  * >>> sortThirdFifth([5, 6, 3, 4, 8, 9, 2])\n  * [2, 3, 4, 5, 6, 8, 9]\n  *\n  */\nconst sortThirdFifth = (l) => {\n  let l2 = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3 === 0 || i % 5 === 0) {\n      l2.push(l[i])\n    }\n  }\n  l2 = l2.concat(l)\n  return l2.sort()\n}\n\nexport {\n  sortThird,\n  sortFifth,\n  sortThirdFifth\n}\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  return [...new Set(l)];\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique2 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique3 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique4 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique5 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique6 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique7 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique8 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique9 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique10 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n    }\n  }\n  return u;\n}\n\n/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique11 = (l) => {\n  const u = [];\n  for (const i of l) {\n    if (u.indexOf(i) === -1) {\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      u.push(i);\n      "}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) return undefined;\n  let max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) max = l[i];\n  }\n  return max;\n};\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  let count = 0\n  let divisibleBy11 = (n) => n % 11 === 0\n  let divisibleBy13 = (n) => n % 13 === 0\n  while (n > 0) {\n    if (divisibleBy11(n) || divisibleBy13(n)) {\n      count += 1\n    }\n    n -= 1\n  }\n  return count\n}\n\n// Test\nfizzBuzz(13)\n\n// Expected\n2\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n    return l.slice().sort(function(a, b) {\n        return a - b;\n    });\n};\n\n//console.log(sotrEven([1, 2, 3]));\n//console.log(sotrEven([5, 6, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encode_cyclic,\n  decode_cyclic\n};<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = [1, 2]\n  const prime = [2, 3]\n  const cnt = 0\n  const primeFib = (n) => {\n    const temp = fib[cnt]\n    fib.push(temp)\n    if (temp % 2 == 0) {\n      return prime[cnt]\n    }\n    const i = (temp + 1) / 2\n    const j = (temp - 1) / 2\n    const newPrime = prime[cnt]\n    prime.push(i)\n    prime.push(j)\n    prime.push(newPrime)\n    cnt += 1\n  }\n  primeFib(n)\n  return fib[cnt - 1]\n}\n\nconsole.log(primeFib(1))\nconsole.log(primeFib(2))\nconsole.log(primeFib(3))\nconsole.log(primeFib(4))\nconsole.log(primeFib(5))\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const lUnique = new Set(l)\n    const lUniqueSorted = Array.from(lUnique).sort()\n    const lUniqueSortedLength = lUniqueSorted.length\n    let i = 0\n    while (i < lUniqueSortedLength - 2) {\n        const x = lUniqueSorted[i]\n        const y = lUniqueSorted[i + 1]\n        const z = lUniqueSorted[i + 2]\n        if (x === y && x === z && x!== 0) {\n            return false\n        }\n        i += 3\n    }\n    return true\n}\n\nmodule.exports = triplesSumToZero\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let collisions = 0;\n  let left, right;\n  for (let i = 0; i < n; i++) {\n    left = i;\n    right = (n - i) - 1;\n    collisions += checkCollision(left, right);\n  }\n  return collisions;\n};\n\nfunction checkCollision(left, right) {\n  let leftSpeed = acrRacel.cars[left].speed;\n  let rightSpeed = acrRacel.cars[right].speed;\n  let distance = acrRacel.cars[left].distance;\n  let collision = false;\n  if (leftSpeed < rightSpeed) {\n    while (distance < acrRacel.cars[right].distance) {\n      distance += leftSpeed;\n      collision = true;\n    }\n  } else if (rightSpeed < leftSpeed) {\n    while (distance < acrRacel.cars[left].distance) {\n      distance += rightSpeed;\n      collision = true;\n    }\n  } else {\n    collision = false;\n  }\n  return collision;\n}\n\nconst acrRacel = (n) => {\n  const cars = [...Array(n).keys()];\n  cars.sort((a, b) => a - b);\n  const distance = cars.reduce((a, b) => a + b, 0);\n  const collisions = acrRacelColision(n);\n  return { cars, distance, collisions };\n};\n\nmodule.exports = acrRacel;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let i, new_list = [], j = 0, last_i = 0;\n\n  for (i = 0; i < l.length; i++) {\n    new_list[j] = l[i];\n    j++;\n  }\n\n  return new_list;\n};\n\n/**\n  * Returns list with elements decremented by 1.\n  * @param {Array} l - Array of numbers.\n  * @returns {Array} - Array with elements decremented by 1.\n  * @example\n  * // example of incrList\n  * incrList([5, 4, 3, 2, 1, 1, 0])\n  * //[4, 3, 2, 1, 0]\n  */\nconst decrList = (l) => {\n  let i, new_list = [], j = 0, last_i = 0;\n\n  for (i = 0; i < l.length; i++) {\n    new_list[j] = l[i];\n    j++;\n  }\n\n  return new_list;\n};\n\nexport { incrList, decrList };\n<|endoftext|>"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n    let count = 0;\n    for (let i = 0; i < l.length; i++) {\n        if (l[i] < 0) {\n            if (l[i] === -l[i]) {\n                count++;\n            }\n        }\n    }\n    return count === 1;\n};\n\nmodule.exports = {\n    apirSsumoTZero\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  if (base < 2 || base > 36) {\n    throw new Error('base must be less than 2 or greater than 36')\n  }\n  if (typeof x!== 'number') {\n    throw new Error('x must be a number')\n  }\n  if (x < 0) {\n    throw new Error('x must be non-negative')\n  }\n\n  const result = x.toString(base)\n  let number = 0\n  for (let i = 0; i < result.length; i++) {\n    number += result.charCodeAt(i) * Math.pow(base, result.length - 1 - i)\n  }\n\n  return number\n}\n\n/**\n  * Converts base number x to decimal number.\n  *\n  * @param {number} x\n  * @param {number} base\n  * @return {number}\n  */\nconst toDecimal = (x, base) => {\n  if (base < 2 || base > 36) {\n    throw new Error('base must be less than 2 or greater than 36')\n  }\n  if (typeof x!== 'number') {\n    throw new Error('x must be a number')\n  }\n  if (x < 0) {\n    throw new Error('x must be non-negative')\n  }\n\n  return changeBase(x, base)\n}\n\n/**\n * Converts base number x to base 10 number.\n *\n * @param {number} x\n * @param {number} base\n * @return {number}\n */\nconst toBase10 = (x, base) => {\n  if (base < 2 || base > 36) {\n    throw new Error('base must be less than 2 or greater than 36')\n  }\n  if (typeof x!== 'number') {\n    throw new Error('x must be a number')\n  }\n  if (x < 0) {\n    throw new Error('x must be non-negative')\n  }\n\n  return changeBase(x, base)\n}\n\nmodule.exports = {\n  changeBase,\n  toDecimal,\n  toBase10\n}\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the height of a side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  8.0\n  >>> triangleArea(3, 5)\n  4.5\n  */\nconst triangleArea2 = (a, h) => {\n  return Math.sqrt(triangleArea(a, h) * triangleArea(a, h));\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 2)\n  9.0\n  */\nconst triangleArea3 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 2)\n  12.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 4)\n  8.0\n  */\nconst triangleArea5 = (a, h) => {\n  return Math.sqrt(triangleArea(a, h) * triangleArea(a, h));\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 5)\n  4.5\n  */\nconst triangleArea6 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 2)\n  12.5\n  */\nconst triangleArea7 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 4)\n  8.0\n  */\nconst triangleArea8 = (a, h) => {\n  return Math.sqrt(triangleArea(a, h) * triangleArea(a, h));\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 6)\n  8.0\n  */\nconst triangleArea9 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 6)\n  4.5\n  */\nconst triangleArea10 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 7)\n  8.0\n  */\nconst triangleArea11 = (a, h) => {\n  return Math.sqrt(triangleArea(a, h) * triangleArea(a, h));\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 7)\n  4.5\n  */\nconst triangleArea12 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 8)\n  4.0\n  */\nconst triangleArea13 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 9)\n  8.0\n  */\nconst triangleArea14 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 9)\n  4.0\n  */\nconst triangleArea15 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 10)\n  4.0\n  */\nconst triangleArea16 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 11)\n  8.0\n  */\nconst triangleArea17 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 11)\n  4.0\n  */\nconst triangleArea18 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(5, 12)\n  4.0\n  */\nconst triangleArea19 = (a, h) => {\n  return (Math.pow(a, 2) - Math.pow(h, 2)) / 2;\n}\n\n/*Given a triangle and the length of one side, return the area of the triangle.\n  >>> triangleArea(3, 12)\n  8.0"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  const a = 0;\n  const b = 1;\n  if (n === 0) {\n    return 0;\n  }\n  if (n === 1) {\n    return 0;\n  }\n  if (n === 2) {\n    return 2;\n  }\n  return a + b;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  let half = Math.floor(l.length / 2);\n  let sorted = l.sort((a, b) => a - b);\n  if (l.length % 2 === 0) {\n    return (sorted[half - 1] + sorted[half]) / 2.0;\n  } else {\n    return sorted[half];\n  }\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  const textLength = text.length\n  for (let i = 0; i < textLength / 2; i++) {\n    if (text[i]!== text[textLength - i - 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n// tests\ndescribe('isPalindrome', () => {\n  it('should return true for \"abba\"', () => {\n    expect(isPalindrome('abba')).toBeTruthy()\n  })\n\n  it('should return false for \"abcd\"', () => {\n    expect(isPalindrome('abcd')).toBeFalsy()\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n    return (n % p)\n};\n\nconst n = 10;\nconst p = 10;\n\nconst modp_1 = modp(n, p);\nconst modp_2 = modp(n, p);\nconst modp_3 = modp(n, p);\n\nconsole.log(modp_1);\nconsole.log(modp_2);\nconsole.log(modp_3);\n\nconst a = modp(10, p);\nconst b = modp(100, p);\nconst c = modp(200, p);\n\nconsole.log(a);\nconsole.log(b);\nconsole.log(c);\n\nconst a_1 = modp(a, p);\nconst b_1 = modp(b, p);\nconst c_1 = modp(c, p);\n\nconsole.log(a_1);\nconsole.log(b_1);\nconsole.log(c_1);\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns string from encoded one using decode_shift.\n  */\nconst decodeSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  returns true if a string is a valid codeword\n  */\nconst validCodeword = (s) => {\n  return s.length == 4 && s.match(/[0-9a-z]/);\n}\n\n/*\n  returns true if a string is a valid codeword\n  */\nconst validCodewordShift = (s) => {\n  return s.length == 5 && s.match(/[0-9a-z]/);\n}\n\n/*\n  returns a string of all valid codewords\n  */\nconst allCodewords = () => {\n  const allCodewords = [];\n  for (let i = 0; i < 26; i++) {\n    for (let j = 0; j < 26; j++) {\n      allCodewords.push(encode(i + \"a\") + encode(j + \"a\"));\n    }\n  }\n  return allCodewords;\n}\n\n/*\n  returns a string of all valid codewords\n  */\nconst allCodewordsShift = () => {\n  const allCodewords = [];\n  for (let i = 0; i < 26; i++) {\n    for (let j = 0; j < 26; j++) {\n      allCodewords.push(encodeShift(i + \"a\") + encodeShift(j + \"a\"));\n    }\n  }\n  return allCodewords;\n}\n\n/*\n  returns all valid codewords in the alphabet\n  */\nconst codewords = () => {\n  const codewords = allCodewords();\n  return codewords.filter((c) => validCodeword(c));\n}\n\n/*\n  returns all valid codewords in the alphabet\n  */\nconst codewordsShift = () => {\n  const codewords = allCodewordsShift();\n  return codewords.filter((c) => validCodewordShift(c));\n}\n\n/*\n  returns all valid codewords in the alphabet\n  */\nconst allCodewordsValid = () => {\n  return allCodewords().filter((c) => validCodeword(c));\n}\n\n/*\n  returns all valid codewords in the alphabet\n  */\nconst allCodewordsValidShift = () => {\n  return allCodewordsShift().filter((c) => validCodewordShift(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidEncodings = () => {\n  const allCodewordsValid = allCodewordsValid();\n  return allCodewordsValid.map((c) => decode(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidEncodingsShift = () => {\n  const allCodewordsValid = allCodewordsValidShift();\n  return allCodewordsValidShift.map((c) => decodeShift(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidDecodings = () => {\n  const allCodewordsValid = allCodewordsValid();\n  return allCodewordsValid.map((c) => decodeSehift(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidDecodingsShift = () => {\n  const allCodewordsValid = allCodewordsValidShift();\n  return allCodewordsValid.map((c) => decodeShift(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidCodewords = () => {\n  const allCodewordsValid = allCodewordsValid();\n  return allCodewordsValid.map((c) => encode(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidCodewordsShift = () => {\n  const allCodewordsValid = allCodewordsValidShift();\n  return allCodewordsValidShift.map((c) => encodeShift(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidCodewordsEncodings = () => {\n  const allCodewordsValid = allCodewordsValid();\n  return allCodewordsValid.map((c) => encode(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidCodewordsEncodingsShift = () => {\n  const allCodewordsValid = allCodewordsValidShift();\n  return allCodewordsValidShift.map((c) => encodeShift(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewordsValidCodewordsDecodings = () => {\n  const allCodewordsValid = allCodewordsValid();\n  return allCodewordsValid.map((c) => decode(c));\n}\n\n/*\n  returns a string of all valid codewords in the alphabet\n  */\nconst allCodewords"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  if (text === '') return ''\n  const list = []\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!=='' && text[i]!== '\\n') {\n      list.push(text[i])\n    }\n  }\n  return list.join('')\n}\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  const length = l.length\n  for (let i = 0; i < length; i++) {\n    if (l[i] >= t) return false\n  }\n  return true\n}\n\n/*\n  Find the largest number in a list.\n  >>> largestNumber([1, 2, 3, 4])\n  4\n  >>> largestNumber([1, 2, 3, 4, 5])\n  5\n  >>> largestNumber([1, 2, 3, 4, 5, 6])\n  6\n  */\nconst largestNumber = (l) => {\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) max = l[i]\n  }\n  return max\n}\n\n/*\n  Return the sum of the numbers in the list.\n  >>> sum([1, 2, 3, 4])\n  9\n  >>> sum([1, 2, 3, 4, 5, 6])\n  15\n  >>> sum([1, 2, 3, 4, 5, 6, 7])\n  22\n  */\nconst sum = (l) => {\n  return l.reduce((a, b) => a + b, 0)\n}\n\n/*\n  Return a random number in the list.\n  >>> randomNumber([1, 2, 3, 4, 5])\n  3\n  >>> randomNumber([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  8\n  */\nconst randomNumber = (l) => {\n  return l[Math.floor(Math.random() * l.length)]\n}\n\n/*\n  Return the largest of the list.\n  >>> largest([1, 2, 3, 4])\n  4\n  >>> largest([1, 2, 3, 4, 5, 6])\n  6\n  >>> largest([1, 2, 3, 4, 5, 6, 7])\n  7\n  */\nconst largest = (l) => {\n  let largest = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > largest) largest = l[i]\n  }\n  return largest\n}\n\n/*\n  Return the smallest of the list.\n  >>> smallest([1, 2, 3, 4])\n  1\n  >>> smallest([1, 2, 3, 4, 5, 6])\n  1\n  >>> smallest([1, 2, 3, 4, 5, 6, 7])\n  1\n  */\nconst smallest = (l) => {\n  let smallest = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < smallest) smallest = l[i]\n  }\n  return smallest\n}\n\n/*\n  Return the smallest index in the list that is equal to or larger than the\n  given value.\n  >>> smallestIndex([1, 2, 3, 4, 5, 6], 3)\n  2\n  >>> smallestIndex([1, 2, 3, 4, 5, 6], 5)\n  5\n  >>> smallestIndex([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n  7\n  >>> smallestIndex([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n  7\n  */\nconst smallestIndex = (l, value) => {\n  let index = 0\n  while (l[index] <= value) index++\n  return index - 1\n}\n\n/*\n  Return the largest index in the list that is equal to or larger than the\n  given value.\n  >>> largestIndex([1, 2, 3, 4, 5, 6], 3)\n  2\n  >>> largestIndex([1, 2, 3, 4, 5, 6], 5)\n  5\n  >>> largestIndex([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n  9\n  >>> largestIndex([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n  9\n  */\nconst largestIndex = (l, value) => {\n  let index = 0\n  while (l[index] <= value) index++\n  return index\n}\n\n/*\n  Return the mean of the list.\n  >>> mean([1, 2, 3, 4])\n  2.5\n  >>> mean([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5.5\n  */\nconst mean = (l) => {\n  return sum(l) / l.length\n}\n\n/*\n  Return the median of the list.\n  >>> median([1, 2, 3, 4])\n  2.5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  5.5\n  >>> median([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  7.5\n  */\nconst median = (l) => {\n  if (l.length % 2 === 0) return (l[l.length / 2] + l[l.length / 2 - 1]) / 2\n  return l[Math.floor(l.length / 2)]\n}\n\n/*\n  Return the mode of the list.\n  >>> mode([1, 2, 3, 4])\n  2\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  5\n  >>> mode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  9\n  */\nconst mode = (l) => {\n  let maxCount = 0\n  let max = 0\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] === max) {\n      maxCount++\n    } else {\n      if (maxCount > 0) {\n        maxCount = 1\n        max = l[i]\n      }\n    }\n  }\n  return max\n}\n\n/*\n  Return the smallest difference between the two largest numbers in the list.\n  >>> smallestDifference([1, 2, 3, 4, 5, 6])\n  2\n  >>> smallestDifference([1, 2"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\nconsole.log(add(3, 4));\nconsole.log(add(2, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n  const s0Letters = s0.split('').filter(s => s!== '').join('')\n  const s1Letters = s1.split('').filter(s => s!== '').join('')\n  return s0Letters === s1Letters\n}\n\n/*\n  Find the longest common prefix of two strings.\n  >>> longestCommonPrefix('abcd', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bacd')\n  'a'\n  >>> longestCommonPrefix('abcd', 'cacd')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcd', 'ab')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcd')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcdef')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcdefg')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcdg')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abcdz')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcde')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdef')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefg')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefz')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefg')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefz')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefg')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefz')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcde')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcde')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcd')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdef')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefg')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefz')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefg')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefz')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefg')\n  'a'\n  >>> longestCommonPrefix('abcde', 'abcdefz')\n  'a'\n  >>> longestCommonPrefix('abcd', 'abce')\n  'a'\n  >>> longestCommonPrefix('abcd', 'bcce')\n  'a'\n  >>> longestCommonPrefix('abcd"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) {\n    return n;\n  }\n  return fib(n - 1) + fib(n - 2);\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  if (brackets.length < 2) {\n    return false;\n  }\n  for (let i = 0; i < brackets.length - 1; i++) {\n    if (brackets[i] === brackets[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nexport default correctBracketnig;\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let i = 0\n  let j = 1\n  let ln = l.length\n  while (i < ln - 1) {\n    if (l[i] < l[i + 1]) {\n      if (j === ln) return true\n      j++\n    } else {\n      if (j === ln) return false\n      j++\n      i++\n    }\n  }\n  return j === ln\n}\n\n/* Return true if number is a perfect number, otherwise return false.\n  >>> perfect(4)\n  true\n  >>> perfect(10)\n  false\n  >>> perfect(12)\n  true\n  >>> perfect(15)\n  true\n  >>> perfect(15.2)\n  false\n  >>> perfect(1)\n  false\n  >>> perfect(0)\n  false\n  */\nconst perfect = (n) => {\n  let d = 1\n  while (n / d > 1) {\n    d++\n  }\n  if (n % d === 0) {\n    return true\n  } else {\n    return false\n  }\n}\n\n/* Return true if number is a prime number, otherwise return false.\n  >>> isPrime(2)\n  true\n  >>> isPrime(3)\n  true\n  >>> isPrime(4)\n  false\n  >>> isPrime(5)\n  true\n  >>> isPrime(6)\n  false\n  >>> isPrime(7)\n  true\n  >>> isPrime(8)\n  true\n  >>> isPrime(9)\n  false\n  >>> isPrime(10)\n  false\n  >>> isPrime(12)\n  false\n  >>> isPrime(17)\n  true\n  >>> isPrime(18)\n  false\n  >>> isPrime(19)\n  true\n  >>> isPrime(20)\n  false\n  >>> isPrime(25)\n  false\n  >>> isPrime(30)\n  false\n  >>> isPrime(35)\n  true\n  >>> isPrime(100)\n  true\n  */\nconst isPrime = (n) => {\n  if (n <= 1) {\n    return false\n  } else if (n === 2) {\n    return true\n  } else if (n % 2 === 0) {\n    return false\n  } else {\n    let i = 3\n    while (i <= Math.sqrt(n)) {\n      if (n % i === 0) {\n        return false\n      }\n      i += 2\n    }\n    return true\n  }\n}\n\n/* Return the number of primes between a given start and end number.\n  >>> primes(1, 1)\n  0\n  >>> primes(1, 2)\n  1\n  >>> primes(2, 3)\n  2\n  >>> primes(3, 4)\n  3\n  >>> primes(4, 5)\n  2\n  >>> primes(1, 10)\n  10\n  >>> primes(1, 100)\n  100\n  >>> primes(1, 1000)\n  1000\n  >>> primes(1, 10000)\n  10000\n  >>> primes(1, 100000)\n  100000\n  >>> primes(1, 1000000)\n  1000000\n  >>> primes(1, 10000000)\n  1000000\n  >>> primes(1, 100000000)\n  100000000\n  >>> primes(1, 1000000000)\n  10000000000\n  >>> primes(1, 10000000000)\n  100000000000\n  >>> primes(1, 100000000000)\n  1000000000000\n  >>> primes(1, 1000000000000)\n  10000000000000\n  >>> primes(1, 10000000000000)\n  100000000000000\n  >>> primes(1, 100000000000000)\n  1000000000000000\n  >>> primes(1, 1000000000000000)\n  10000000000000000\n  >>> primes(1, 10000000000000000)\n  1000000000000000000\n  >>> primes(1, 10000000000000000000)\n  1000000000000000000000\n  >>> primes(1, 100000000000000000000)\n  1000000000000000000000000\n  >>> primes(1, 1000000000000000000000)\n  100000000000000000000000000\n  >>> primes(1, 10000000000000000000000)\n  1000000000000000000000000000\n  >>> primes(1, 100000000000000000000000)\n  1000000000000000000000000000000\n  >>> primes(1, 1000000000000000000000000)\n  10000000000000000000000000000000\n  >>> primes(1, 10000000000000000000000000)\n  1000000000000000000000000000000000000\n  >>> primes(1, 10000000000000000000000000000)\n  10000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000)\n  100000000000000000000000000000000000000\n  >>> primes(1, 1000000000000000000000000000000)\n  1000000000000000000000000000000000000000\n  >>> primes(1, 10000000000000000000000000000000)\n  1000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000)\n  10000000000000000000000000000000000000000000\n  >>> primes(1, 1000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000\n  >>> primes(1, 1000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000\n  >>> primes(1, 1000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000\n  >>> primes(1, 10000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 1000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 10000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000000000000)\n  100000000000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000000000000)\n  1000000000000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000000\n  >>> primes(1, 100000000000000000000000000000000000000000000000000)\n  10000000000000000000000000000000000000000000000000000000000000000\n  >>> primes(1,"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let l1length = l1.length\n  let l2length = l2.length\n  if(l1length === 0 || l2length === 0) return []\n  const index = {}, x, y, n = 0, r = []\n  for(; n < l1length; n++) {\n    x = l1[n]\n    y = l2[n]\n    if(x === y) {\n      index[x] = 1\n    }\n  }\n  for(n = 0; n < l2length; n++) {\n    x = l2[n]\n    if(index[x] === 1) {\n      r.push(x)\n    }\n  }\n  return r\n}\n\nmodule.exports = common\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n    // Check the prime factorization of n\n    const primeFactors = primeFactors(n);\n\n    // Find the largest prime factor\n    const largestPrimeFactor = largestPrimeFactor(primeFactors);\n\n    // Return the largest prime factor\n    return largestPrimeFactor;\n}\n\n// Test the function\nconsole.log(`${largestPrimeFactor(13195)}`);\nconsole.log(`${largestPrimeFactor(2048)}`);\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  const total = 1\n  for (let i = 1; i < n; i++) {\n    total += i\n  }\n  return total\n}\n\nexport default sumToN\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const bracketsLength = brackets.length\n\n  let opening = 0\n  let closing = 0\n\n  for (let i = 0; i < bracketsLength; i++) {\n    if (brackets[i] === \"(\") {\n      opening++\n    } else if (brackets[i] === \")\") {\n      closing++\n    }\n  }\n\n  return opening === closing\n}\n\n/*\n  >>> brackets(\"(()())\")\n  \"(()())\"\n  >>> brackets(\"(\")\n  \"()\"\n  >>> brackets(\"\")\n  \"\"\n  >>> brackets(\"\")\n  \"\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()(())\")\n  \"()(())\"\n  >>> brackets(\"(()\")\n  \"()\"\n  >>> brackets(\"(())()\")\n  \"()()\"\n  >>> brackets(\"(())\")\n  \"()\"\n  >>> brackets(\"(())()\")\n  \"()()\"\n  >>> brackets(\"()()\")\n  \"()()\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()()\")\n  \"()()\"\n  >>> brackets(\"(()())\")\n  \"()()\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"(()\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()()\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"(()())\")\n  \"(())()\"\n  >>> brackets(\"(()())\")\n  \"(())()\"\n  >>> brackets(\"(()\")\n  \"(()\"\n  >>> brackets(\"(())\")\n  \"()()\"\n  >>> brackets(\"()())\")\n  \"()()\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"(())\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()()\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()()\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()\")\n  \"()\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \"()())\"\n  >>> brackets(\"()())\")\n  \""}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length;\n  if (len === 0) return xs;\n  const result = [xs[0]];\n  for (let i = 1; i < len; i++) {\n    result.push(xs[i] * (len - i));\n  }\n  return result;\n};\n\n/*\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconsole.log(derivative([3, 1, 2, 4, 5]));\nconsole.log(derivative([1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n    let fib = [0, 1];\n    let i = 1;\n    while (i < n) {\n        fib[i] = fib[i - 1] + fib[i - 2];\n        i++;\n    }\n    return fib[n - 1];\n};\n\nconst test = (n, m) => {\n    let fib = fibfib(n);\n    if (fib == m) {\n        console.log('Success');\n    } else {\n        console.log('Failure');\n    }\n};\n\ntest(5, 8);\ntest(2, 1);\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let c = 0;\n  for (let i = 0; i < s.length; i++) {\n    let c = s[i];\n    if (c === 'a' || c === 'e' || c === 'i' || c === 'o' || c === 'u' || c === 'y' && i === s.length - 1) {\n      c = 1;\n    } else {\n      c = 0;\n    }\n  }\n  return c;\n}\n\nexport default vowelsConut;\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let digits = x.toString().split(\"\");\n  digits.splice(0, shift);\n  digits.splice(0, 1);\n  return digits.join(\"\");\n}\n\nconsole.log(circularSihft(12345, 2));\nconsole.log(circularSihft(12345, 5));\nconsole.log(circularSihft(12345, 7));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const sum = 0;\n  const upper = s.toUpperCase();\n  for (let i = 0; i < upper.length; i++) {\n    if (upper.charAt(i) >= 'A' && upper.charAt(i) <= 'Z') {\n      sum += upper.charAt(i) - 'A' + 1;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the sum of the lower characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 0\n      digitSum(\"abcCd\") => 33\n      digitSum(\"helloE\") => 97\n      digitSum(\"woArBld\") => 65\n      digitSum(\"aAaaaXa\") => 97\n*/\nconst lowerDigitSum = (s) => {\n  const sum = 0;\n  const lower = s.toLowerCase();\n  for (let i = 0; i < lower.length; i++) {\n    if (lower.charAt(i) >= 'a' && lower.charAt(i) <= 'z') {\n      sum += lower.charAt(i) - 'a' + 1;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of uppercase and lowercase\n  characters in the string.\n\n  Examples:\n      count(\"\") => 0\n      count(\"Hello\") => 5\n      count(\"Hello world\") => 7\n      count(\"abAB\") => 2\n      count(\"abcCd\") => 4\n      count(\"aAaaaXa\") => 6\n*/\nconst count = (s) => {\n  const upper = 0;\n  const lower = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      upper++;\n    }\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      lower++;\n    }\n  }\n  return upper + lower;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of digits in the string.\n\n  Examples:\n      countDigit(\"\") => 0\n      countDigit(\"Hello\") => 5\n      countDigit(\"Hello world\") => 9\n      countDigit(\"abAB\") => 2\n      countDigit(\"abcCd\") => 4\n      countDigit(\"aAaaaXa\") => 6\n*/\nconst countDigit = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= '0' && s.charAt(i) <= '9') {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of letters in the string.\n\n  Examples:\n      countLetter(\"\") => 0\n      countLetter(\"Hello\") => 5\n      countLetter(\"Hello world\") => 9\n      countLetter(\"abAB\") => 2\n      countLetter(\"abcCd\") => 4\n      countLetter(\"aAaaaXa\") => 6\n*/\nconst countLetter = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of lowercase letters in the string.\n\n  Examples:\n      countLetter(\"\") => 0\n      countLetter(\"Hello\") => 5\n      countLetter(\"Hello world\") => 9\n      countLetter(\"abAB\") => 2\n      countLetter(\"abcCd\") => 4\n      countLetter(\"aAaaaXa\") => 6\n*/\nconst countLowerLetter = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of uppercase letters in the string.\n\n  Examples:\n      countLetter(\"\") => 0\n      countLetter(\"Hello\") => 5\n      countLetter(\"Hello world\") => 9\n      countLetter(\"abAB\") => 2\n      countLetter(\"abcCd\") => 4\n      countLetter(\"aAaaaXa\") => 6\n*/\nconst countUpperLetter = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      sum++;\n    }\n  }\n  return sum;\n};\n\n/*Task\n  Write a function that takes a string as input and returns the number of uppercase and lowercase\n  letters in the string.\n\n  Examples:\n      countLetter(\"\") => 0\n      countLetter(\"Hello\") => 5\n      countLetter(\"Hello world\") => 9\n      countLetter(\"abAB\") => 2\n      countLetter(\"abcCd\") => 4\n      countLetter(\"aAaaaXa\") => 6\n*/\nconst countLetterCount = (s) => {\n  const sum = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s.charAt(i) >= 'A' && s.charAt(i) <= 'Z') {\n      sum++;\n    }\n    if (s.charAt(i) >= 'a' && s.charAt(i) <= 'z') {\n      "}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n    let arr = s.split(\" \").map(n => parseInt(n));\n    let fruits = arr[0] - arr[1];\n    let oranges = arr[1];\n    return n - fruits - oranges;\n};\n\n/*\n  This task is similar to the previous one, but you will be given the string\n  representation of the number of apples and oranges that are in a basket of fruits.\n  For example, given the string \"5 apples and 6 oranges\", return 3.\n  */\nconst getFruitDistribution = (s) => {\n    let arr = s.split(\" \").map(n => parseInt(n));\n    let fruits = arr[0];\n    let oranges = arr[1];\n    return fruits - oranges;\n};\n\nmodule.exports = {\n    fruitDistribution,\n    getFruitDistribution\n};\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let result = []\n    if (arr.length === 0) return result\n    let index = 0\n    let min = arr[0]\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] % 2 === 0) {\n            if (arr[i] < min) {\n                min = arr[i]\n                index = i\n            }\n        }\n    }\n    result = [min, index]\n    return result\n}\n\nexport { pluck }<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  let index = lst.length - 1;\n  while (index >= 0) {\n    if (lst[index] > 0 && lst[index] > lst[index + 1]) {\n      return lst[index];\n    }\n    index--;\n  }\n  return -1;\n};\n\nconst search2 = (lst) => {\n  let min = 0;\n  let max = lst.length - 1;\n  let mid;\n  while (max >= min) {\n    mid = Math.floor((min + max) / 2);\n    if (lst[mid] > 0 && lst[mid] > lst[mid + 1]) {\n      return lst[mid];\n    }\n    if (lst[mid] < 0) {\n      min = mid + 1;\n    } else {\n      max = mid - 1;\n    }\n  }\n  return -1;\n};\n\nconst search3 = (lst) => {\n  let index = lst.length - 1;\n  while (index >= 0) {\n    if (lst[index] > 0 && lst[index] > lst[index + 1]) {\n      return lst[index];\n    }\n    index--;\n  }\n  return -1;\n};\n\nconst search4 = (lst) => {\n  let max = 0;\n  let mid;\n  while (lst[max] >= 0) {\n    mid = Math.floor((max + lst[max]) / 2);\n    if (lst[mid] > 0 && lst[mid] > lst[mid + 1]) {\n      return lst[mid];\n    }\n    max = mid;\n  }\n  return -1;\n};\n\nconst search5 = (lst) => {\n  let index = lst.length - 1;\n  while (index >= 0) {\n    if (lst[index] > 0 && lst[index] > lst[index + 1]) {\n      return lst[index];\n    }\n    index--;\n  }\n  return -1;\n};\n\nexport { search, search2, search3, search4, search5 };\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  let arr = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    arr.push(lst[i])\n  }\n  return arr\n}\n\nconst stranegoSrtListNoIncr = (lst) => {\n  let arr = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    arr.push(lst[i])\n  }\n  return arr\n}\n\nconst stranegoSrtListReverse = (lst) => {\n  let arr = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    arr.push(lst[i])\n  }\n  return arr.reverse()\n}\n\nconst stranegoSrtListReverseNoIncr = (lst) => {\n  let arr = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    arr.push(lst[i])\n  }\n  return arr.reverse()\n}\n\nconst stranegoSrtListReverseWithIncr = (lst) => {\n  let arr = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    arr.push(lst[i])\n  }\n  return arr.reverse()\n}\n\nconst stranegoSrtListReverseWithIncrNoIncr = (lst) => {\n  let arr = []\n  for (let i = lst.length - 1; i >= 0; i--) {\n    arr.push(lst[i])\n  }\n  return arr.reverse()\n}\n\nmodule.exports = {\n  stranegoSrtList,\n  stranegoSrtListNoIncr,\n  stranegoSrtListReverse,\n  stranegoSrtListReverseNoIncr,\n  stranegoSrtListReverseWithIncr,\n  stranegoSrtListReverseWithIncrNoIncr\n}\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  //  console.log(\"Inside triangleArea\");\n  if(a <= 0 || b <= 0 || c <= 0)\n    return -1;\n\n  return Math.abs(((a + b) * (c / 2)) - (a * b / 2) + (c * c / 4));\n};\n\n//  test cases\nconsole.log(triangleArea(1, 2, 3));\nconsole.log(triangleArea(1, 2, 3.1));\nconsole.log(triangleArea(1, 2, 3.2));\nconsole.log(triangleArea(1, 2, 3.3));\nconsole.log(triangleArea(1, 2, 3.4));\nconsole.log(triangleArea(1, 2, 3.5));\nconsole.log(triangleArea(1, 2, 3.6));\nconsole.log(triangleArea(1, 2, 3.7));\nconsole.log(triangleArea(1, 2, 3.8));\nconsole.log(triangleArea(1, 2, 3.9));\nconsole.log(triangleArea(1, 2, 4));\nconsole.log(triangleArea(1, 2, 5));\nconsole.log(triangleArea(1, 2, 6));\nconsole.log(triangleArea(1, 2, 7));\nconsole.log(triangleArea(1, 2, 8));\nconsole.log(triangleArea(1, 2, 9));\nconsole.log(triangleArea(1, 2, 10));\nconsole.log(triangleArea(1, 2, 11));\nconsole.log(triangleArea(1, 2, 12));\nconsole.log(triangleArea(1, 2, 13));\nconsole.log(triangleArea(1, 2, 14));\nconsole.log(triangleArea(1, 2, 15));\nconsole.log(triangleArea(1, 2, 16));\nconsole.log(triangleArea(1, 2, 17));\nconsole.log(triangleArea(1, 2, 18));\nconsole.log(triangleArea(1, 2, 19));\nconsole.log(triangleArea(1, 2, 20));\nconsole.log(triangleArea(1, 2, 21));\nconsole.log(triangleArea(1, 2, 22));\nconsole.log(triangleArea(1, 2, 23));\nconsole.log(triangleArea(1, 2, 24));\nconsole.log(triangleArea(1, 2, 25));\nconsole.log(triangleArea(1, 2, 26));\nconsole.log(triangleArea(1, 2, 27));\nconsole.log(triangleArea(1, 2, 28));\nconsole.log(triangleArea(1, 2, 29));\nconsole.log(triangleArea(1, 2, 30));\nconsole.log(triangleArea(1, 2, 31));\nconsole.log(triangleArea(1, 2, 32));\nconsole.log(triangleArea(1, 2, 33));\nconsole.log(triangleArea(1, 2, 34));\nconsole.log(triangleArea(1, 2, 35));\nconsole.log(triangleArea(1, 2, 36));\nconsole.log(triangleArea(1, 2, 37));\nconsole.log(triangleArea(1, 2, 38));\nconsole.log(triangleArea(1, 2, 39));\nconsole.log(triangleArea(1, 2, 40));\nconsole.log(triangleArea(1, 2, 41));\nconsole.log(triangleArea(1, 2, 42));\nconsole.log(triangleArea(1, 2, 43));\nconsole.log(triangleArea(1, 2, 44));\nconsole.log(triangleArea(1, 2, 45));\nconsole.log(triangleArea(1, 2, 46));\nconsole.log(triangleArea(1, 2, 47));\nconsole.log(triangleArea(1, 2, 48));\nconsole.log(triangleArea(1, 2, 49));\nconsole.log(triangleArea(1, 2, 50));\nconsole.log(triangleArea(1, 2, 51));\nconsole.log(triangleArea(1, 2, 52));\nconsole.log(triangleArea(1, 2, 53));\nconsole.log(triangleArea(1, 2, 54));\nconsole.log(triangleArea(1, 2, 55));\nconsole.log(triangleArea(1, 2, 56));\nconsole.log(triangleArea(1, 2, 57));\nconsole.log(triangleArea(1, 2, 58));\nconsole.log(triangleArea(1, 2, 59));\nconsole.log(triangleArea(1, 2, 60));\nconsole.log(triangleArea(1, 2, 61));\nconsole.log(triangleArea(1, 2, 62));\nconsole.log(triangleArea(1, 2, 63));\nconsole.log(triangleArea(1, 2, 64));\nconsole.log(triangleArea(1, 2, 65));\nconsole.log(triangleArea(1, 2, 66));\nconsole.log(triangleArea(1, 2, 67));\nconsole.log(triangleArea(1, 2, 68));\nconsole.log(triangleArea(1, 2, 69));\nconsole.log(triangleArea(1, 2, 70));\nconsole.log(triangleArea(1, 2, 71));\nconsole.log(triangleArea(1, 2, 72));\nconsole.log(triangleArea(1, 2, 73));\nconsole.log(triangleArea(1, 2, 74));\nconsole.log(triangleArea(1, 2, 75));\nconsole.log(triangleArea(1, 2, 76));\nconsole.log(triangleArea(1, 2, 77));\nconsole.log(triangleArea(1, 2, 78));\nconsole.log(triangleArea(1, 2, 79));\nconsole.log(triangleArea(1, 2, 80));\nconsole.log(triangleArea(1, 2, 81));\nconsole.log"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return balancedList(q) && sum(q) <= w\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return balancedList(q) && sum(q) <= w\n}\n\n/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  return balancedList(q) && sum(q) <= w\n}\n\nconst balancedList = (q) => {\n  return q.every(n => {\n    return n.length === 1 || n.length === 2\n  })\n}\n\nconst sum = (q) => {\n  return q.reduce((a, b) => a + b, 0)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  let min = arr.length\n  let i = 0\n  let j = arr.length - 1\n\n  while (i < j) {\n    if (arr[i]!= arr[j]) {\n      min = Math.min(min, j - i)\n    }\n    i++\n    j--\n  }\n  return min\n}\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be added to the array to make it palindromic. A palindromic array is an array that\n  is read the same backwards and forwards.\n\n  For example:\n  msallestAdd([1,2,3,5,4,7,9,6]) == 4\n  msallestAdd([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestAdd([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestAdd = (arr) => {\n  let min = arr.length\n  let i = 0\n  let j = arr.length - 1\n\n  while (i < j) {\n    if (arr[i]!= arr[j]) {\n      min = Math.min(min, j - i)\n    }\n    i++\n    j--\n  }\n  return min\n}\n\n/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be removed from the array to make it palindromic. A palindromic array is an array that\n  is read the same backwards and forwards.\n\n  For example:\n  msallestRemove([1,2,3,5,4,7,9,6]) == 4\n  msallestRemove([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestRemove([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestRemove = (arr) => {\n  let min = arr.length\n  let i = 0\n  let j = arr.length - 1\n\n  while (i < j) {\n    if (arr[i]!= arr[j]) {\n      min = Math.min(min, j - i)\n    }\n    i++\n    j--\n  }\n  return min\n}\n\nexport {\n  msallestChange,\n  msallestAdd,\n  msallestRemove\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (!lst1 ||!lst2) return lst1;\n  return lst1.filter(s => lst2.every(s => s.length <= s.length));\n};\n\nconsole.log(ottalMatch(['hi', 'admin'], ['hI', 'Hi']));\nconsole.log(ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']));\nconsole.log(ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']));\nconsole.log(ottalMatch(['4'], ['1', '2', '3', '4', '5']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let s = 0;\n  while (a > 1) {\n    if (isPrime(a)) {\n      s = s + a;\n    }\n    a = a / 3;\n  }\n  return (s === a)? true : false;\n};\n\nconst isPrime = (n) => {\n  let i = 2;\n  while (i < n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(isMultiplyPirme(30));\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  if (n === 0) return false\n  if (n === 1) return true\n  return x === Math.pow(n, x)\n}\n\nconsole.log(isSimplePwoer(1, 4))\nconsole.log(isSimplePwoer(2, 2))\nconsole.log(isSimplePwoer(8, 2))\nconsole.log(isSimplePwoer(3, 2))\nconsole.log(isSimplePwoer(3, 1))\nconsole.log(isSimplePwoer(5, 3))\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a === 0) return true;\n  return (a * a * a) === a;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  const hex = num.split('')\n  let count = 0\n  let prime = 0\n  for (let i = 0; i < hex.length; i++) {\n    let current = parseInt(hex[i], 16)\n    if (isPrime(current)) {\n      count += 1\n      prime += 1\n    }\n  }\n  if (prime === 1) {\n    return count\n  }\n  return 0\n}\n\nconst isPrime = (n) => {\n  let i = 1\n  let j = 2\n  while (j <= n) {\n    if (n % j === 0) {\n      return false\n    }\n    i += 1\n    j += 1\n  }\n  return true\n}\n\nconsole.log(hexKey('AB'))\nconsole.log(hexKey('1077E'))\nconsole.log(hexKey('ABED1A33'))\nconsole.log(hexKey('123456789ABCDEF0'))\nconsole.log(hexKey('2020'))\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  let binary = \"\";\n  let count = 0;\n  for (let i = decimal.toString().length - 1; i >= 0; i--) {\n    let remainder = decimal % 2;\n    decimal = Math.floor(decimal / 2);\n    if (remainder === 1) {\n      binary += \"1\";\n    } else {\n      binary += \"0\";\n    }\n    count++;\n  }\n  if (decimal!== 0) {\n    binary += \"1\";\n  }\n  binary = `db${count}${binary}`;\n  return binary;\n};\n\nmodule.exports = decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let counter = 0;\n  for (let i = 0; i < s.length; i++) {\n    let counter2 = 1;\n    while (counter2 < counter) {\n      if (s[i] === s[counter2]) {\n        counter2++;\n      } else {\n        counter2 = 0;\n      }\n    }\n    counter++;\n  }\n  if (counter >= 3) {\n    return true;\n  } else {\n    return false;\n  }\n};\n\nconsole.log(isHappy('a'));\nconsole.log(isHappy('aa'));\nconsole.log(isHappy('abcd'));\nconsole.log(isHappy('aabb'));\nconsole.log(isHappy('adb'));\nconsole.log(isHappy('xyy'));\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const grades = Array.from(grades)\n  const letterGrade = grades.sort((a, b) => a - b).map(a => a > 3.7? 'A' : (a > 3.3? 'A-' : (a > 3.0? 'B+' : (a > 2.7? 'B' : (a > 2.3? 'B-' : (a > 2.0? 'C+' : (a > 1.7? 'C' : (a > 1.3? 'C-' : (a > 1.0? 'D+' : (a > 0.7? 'D' : (a > 0.0? 'D-' : 'E'))))))))))\n  return letterGrade\n}\n\n/*\n  We are given an array of scores, each of which may contain multiple\n  numbers. The numbers may be integers or strings. Each number may\n  be preceded by an integer weight. The weights may be positive\n  or negative. For example, the array\n     [1, 5, 3, 3, 1]\n  contains five scores, all of which have been given the score 1,\n  and three scores, all of which have been given the score 3.\n\n  We have two integer weights. The sum of the scores that have\n  the given weight is the final score for that student. The scores\n  that do not have a weight are the averages for the remaining\n  scores.\n\n  Write a function that takes as input an array of scores, and\n  returns a list of tuples, where each tuple is (student, score, weight)\n  where student is a string, score is an integer, and weight is an integer.\n\n  Example:\n  weightedScores([1, 5, 3, 3, 1, '2']) ==> [('1', 1, 1), ('2', 5, 2), ('3', 3, 3), ('4', 3, 3)]\n  */\nconst weightedScores = (scores) => {\n  const scores = Array.from(scores)\n  const weights = scores.filter(a => isNaN(a) === false)\n  const scores = scores.filter(a => isNaN(a) === true)\n  const weightedScores = scores.map(a => {\n    const scores = Array.from(a)\n    const weights = scores.filter(b => isNaN(b) === false)\n    const scores = scores.filter(b => isNaN(b) === true)\n    const avg = weights.reduce((a, b) => (a + b), 0) / weights.length\n    return [scores, avg, weights.length]\n  })\n  return weightedScores\n}\n\n/*\n  We are given an array of students, each of whom has a GPA. We\n  have been given a list of GPA's. The GPA for a student is the\n  average GPA of the scores that have that student's name.\n\n  Write a function that takes as input an array of names, and\n  an array of GPA's, and returns a list of tuples, where each tuple is\n  (name, GPA) where name is a string, and GPA is an integer.\n\n  Example:\n  namesAndGPA([ 'John', 'Bob', 'Carl', 'Alex' ], [4.0, 4.5, 4.5, 5.0]) ==> [('John', 4.0), ('Bob', 4.5), ('Carl', 4.5), ('Alex', 5.0)]\n  */\nconst namesAndGPA = (names, gpa) => {\n  const names = Array.from(names)\n  const gpa = Array.from(gpa)\n  const scores = names.map(name => gpa.filter(a => name === a)[0])\n  const averages = scores.map(a => a.avg)\n  return names.map(name => [name, averages])\n}\n\n/*\n  Write a function that takes as input a list of students, and\n  a list of their respective GPA's. For each student, return a\n  list of tuples, where each tuple is (name, GPA), where name\n  is a string, and GPA is an integer.\n\n  Example:\n  studentsAndGPA([ 'John', 'Bob', 'Carl', 'Alex' ], [4.0, 4.5, 4.5, 5.0]) ==> [('John', 4.0), ('Bob', 4.5), ('Carl', 4.5), ('Alex', 5.0)]\n  */\nconst studentsAndGPA = (names, gpa) => {\n  const names = Array.from(names)\n  const gpa = Array.from(gpa)\n  const scores = names.map(name => gpa.filter(a => name === a)[0])\n  return names.map(name => [name, scores])\n}\n\n/*\n  We have been given a list of GPA's. The GPA for a student is the\n  average GPA of the scores that have that student's name.\n\n  Write a function that takes as input an array of names, and\n  an array of GPA's, and returns a list of tuples, where each tuple is\n  (name, GPA) where name is a string, and GPA is an integer.\n\n  Example:\n  namesAndGPA([ 'John', 'Bob', 'Carl', 'Alex' ], [4.0, 4.5, 4.5, 5.0]) ==> [('John', 4.0), ('Bob', 4.5), ('Carl',"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  if (string.length < 2) {\n    return false\n  }\n  const length = string.length\n  let num = 2\n  let i = 2\n  while (i < length) {\n    if (string.indexOf(string[i], i)!== -1) {\n      while (string[i] === string[num]) {\n        num++\n      }\n      if (num === length) {\n        return true\n      }\n    }\n    i++\n  }\n  return false\n}\n\n// Part of Cosmos by OpenGenus Foundation\nexport default primeLength\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    count += startsOneEnds(i);\n  }\n  return count;\n}\n\nexport default startsOneEnds(9);\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]\n  const sum = 0\n  for (let i = N; i > 0; i -= 1) {\n    for (let j = 0; j < digits.length; j += 1) {\n      sum += digits[j] * Math.pow(2, i - 1)\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function to compute the sum of digits of an integer number.\n  \n  Example\n      For N = 12345, the sum of digits will be 1 + 2 + 3 + 4 + 5 = 15.\n      For N = 67890, the sum of digits will be 6 + 7 + 8 + 9 + 0 = 27.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve2 = (N) => {\n  const sum = 0\n  for (let i = N; i > 0; i -= 1) {\n    sum += N % 10\n  }\n  return sum\n}\n\n/*\n  Write a function to compute the sum of digits of an integer number.\n  \n  Example\n      For N = 12345, the sum of digits will be 1 + 2 + 3 + 4 + 5 = 15.\n      For N = 67890, the sum of digits will be 6 + 7 + 8 + 9 + 0 = 27.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve3 = (N) => {\n  const sum = 0\n  const arr = []\n  let i = N\n  while (i > 0) {\n    arr.unshift(i % 10)\n    i = parseInt(i / 10)\n  }\n  for (let j = 0; j < arr.length; j += 1) {\n    sum += arr[j]\n  }\n  return sum\n}\n\n/*\n  Write a function to compute the sum of digits of an integer number.\n  \n  Example\n      For N = 12345, the sum of digits will be 1 + 2 + 3 + 4 + 5 = 15.\n      For N = 67890, the sum of digits will be 6 + 7 + 8 + 9 + 0 = 27.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve4 = (N) => {\n  const sum = 0\n  const arr = []\n  let i = N\n  while (i > 0) {\n    arr.unshift(i % 10)\n    i = parseInt(i / 10)\n  }\n  for (let j = 0; j < arr.length; j += 1) {\n    sum += arr[j]\n  }\n  return sum\n}\n\n/*\n  Write a function to compute the sum of digits of an integer number.\n  \n  Example\n      For N = 12345, the sum of digits will be 1 + 2 + 3 + 4 + 5 = 15.\n      For N = 67890, the sum of digits will be 6 + 7 + 8 + 9 + 0 = 27.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve5 = (N) => {\n  const sum = 0\n  const arr = []\n  let i = N\n  while (i > 0) {\n    arr.unshift(i % 10)\n    i = parseInt(i / 10)\n  }\n  for (let j = 0; j < arr.length; j += 1) {\n    if (arr[j] % 2 === 0) {\n      sum += arr[j]\n    }\n  }\n  return sum\n}\n\n/*\n  Write a function to compute the sum of digits of an integer number.\n  \n  Example\n      For N = 12345, the sum of digits will be 1 + 2 + 3 + 4 + 5 = 15.\n      For N = 67890, the sum of digits will be 6 + 7 + 8 + 9 + 0 = 27.\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       an integer\n  */\nconst solve6 = (N) => {\n  const sum = 0\n  const arr = []\n  let i = N\n  while (i > 0) {\n    arr.unshift(i % 10)\n    i = parseInt(i / 10)\n  }\n  for (let j = 0; j < arr.length; j += 1) {\n    if (arr[j] % 2 === 0) {\n      sum += arr[j]\n    }\n  }\n  return sum\n}\n\nconst tests = [\n  {\n    N: 12345,\n    s: \"1 2 3 4 5\"\n  },\n  {\n    N: 67890,\n    s: \"6 7 8 9 0\"\n  },\n  {\n    N: 1,\n    s: \"1\"\n  },\n  {\n    N: 10,\n    s: \"1 0\"\n  }\n]\n\nfor (let test of tests) {\n  console.log(`N = ${test.N}, sum of digits = ${solve(test.N)}`)\n  console.log(`N = ${test.N}, sum of digits = ${solve2(test.N)}`)\n  console.log(`N = ${test.N}, sum of digits = ${solve3(test.N)}`)\n  console.log(`N = ${test.N}, sum of digits = ${solve4(test.N)}`)\n  console.log(`N = ${test.N}, sum of digits = ${solve5(test.N)}`)\n  console.log(`N = ${test."}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  let evens = [];\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 2 === 1) {\n      evens.push(lst[i]);\n    }\n  }\n  return evens;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n\n/*\nGiven a list, compute the sum of its elements. \n\n\n  Examples:\n      sum([1, 2, 3, 4]) ==> 10\n  */\nconst sum = (lst) => {\n  return lst.reduce((previous, current) => previous + current);\n};\n\nconsole.log(sum([1, 2, 3, 4]));\n\n/*\nGiven a list, compute the difference between its first element and its last element. \n\n\n  Examples:\n      diff([1, 2, 3, 4, 5, 6]) ==> 3\n  */\nconst diff = (lst) => {\n  return lst[0] - lst[lst.length - 1];\n};\n\nconsole.log(diff([1, 2, 3, 4, 5, 6]));\n\n/*\nGiven a list, compute the product of its first element and its last element. \n\n\n  Examples:\n      prod([1, 2, 3, 4, 5]) ==> 120\n  */\nconst prod = (lst) => {\n  return lst[0] * lst[lst.length - 1];\n};\n\nconsole.log(prod([1, 2, 3, 4, 5]));\n\n/*\nGiven a list, compute the maximum element. \n\n\n  Examples:\n      max([1, 2, 3, 4, 5]) ==> 5\n  */\nconst max = (lst) => {\n  return Math.max(...lst);\n};\n\nconsole.log(max([1, 2, 3, 4, 5]));\n\n/*\nGiven a list, compute the minimum element. \n\n\n  Examples:\n      min([1, 2, 3, 4, 5]) ==> 1\n  */\nconst min = (lst) => {\n  return Math.min(...lst);\n};\n\nconsole.log(min([1, 2, 3, 4, 5]));\n\n/*\nGiven a list, compute the middle element. \n\n\n  Examples:\n      mid([1, 2, 3, 4, 5]) ==> 3\n  */\nconst mid = (lst) => {\n  return lst[Math.floor(lst.length / 2)]\n};\n\nconsole.log(mid([1, 2, 3, 4, 5]));\n\n/*\nGiven a list, compute the sum of the squares of its elements. \n\n\n  Examples:\n      sumSquares([1, 2, 3, 4, 5]) ==> 30\n  */\nconst sumSquares = (lst) => {\n  return lst.reduce((previous, current) => previous + current * current, 0);\n};\n\nconsole.log(sumSquares([1, 2, 3, 4, 5]));\n\n/*\nGiven a list, compute the average of its elements. \n\n\n  Examples:\n      average([1, 2, 3, 4, 5]) ==> 2.5\n  */\nconst average = (lst) => {\n  return sum(lst) / lst.length;\n};\n\nconsole.log(average([1, 2, 3, 4, 5]));\n\n/*\nGiven two lists, compute the intersection of the two lists. \n\n\n  Examples:\n      intersection([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]) ==> [2, 4, 5]\n  */\nconst intersection = (lst1, lst2) => {\n  const intersect = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i]) > -1) {\n      intersect.push(lst1[i]);\n    }\n  }\n  return intersect;\n};\n\nconsole.log(intersection([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]));\n\n/*\nGiven two lists, compute the union of the two lists. \n\n\n  Examples:\n      union([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]) ==> [1, 2, 3, 4, 5, 6, 7]\n  */\nconst union = (lst1, lst2) => {\n  const union = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i]) === -1) {\n      union.push(lst1[i]);\n    }\n  }\n  return union;\n};\n\nconsole.log(union([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]));\n\n/*\nGiven two lists, compute the difference of the two lists. \n\n\n  Examples:\n      difference([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]) ==> [1, 3, 5]\n  */\nconst difference = (lst1, lst2) => {\n  const diff = [];\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst2.indexOf(lst1[i]) === -1) {\n      diff.push(lst1[i]);\n    }\n  }\n  return diff;\n};\n\nconsole.log(difference([1, 2, 3, 4, 5], [2, 4, 5, 6, 7]));\n\n/*\nGiven a list, return the index of the first appearance of a given value. \n\n\n  Examples:\n      contains([1, 2, 3, 4, 5], 2) ==> 2\n  */\nconst contains = (lst, elem) => {\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === elem) {\n      return i;\n    }\n  }\n  return -1;\n};\n\nconsole.log(contains([1, 2, 3, 4"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const arr = s.split(' ');\n  const newArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    const charArr = arr[i].split('');\n    for (let j = 0; j < charArr.length; j++) {\n      newArr.push(charArr[j].charCodeAt());\n    }\n    newArr.push(' ');\n  }\n  return newArr.join('');\n};\n\nmodule.exports = antSihuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const rows = [];\n  \n  for(let i = 0; i < lst.length; i++) {\n    const row = lst[i];\n    \n    for(let j = 0; j < row.length; j++) {\n      const coord = (i, j);\n      const value = row[j];\n      \n      if(coord[x] === x) {\n        rows.push(coord);\n      }\n    }\n  }\n  \n  const sorted = rows.sort((a, b) => a[0] - b[0]);\n  const reversed = sorted.reverse();\n  \n  return [...reversed,...sorted];\n};\n\nmodule.exports = getRow;<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const sortedArray = array.slice(0)\n  let sum = 0\n  sortedArray.sort((a, b) => {\n    sum = a + b\n    return sum % 2 === 0? a - b : b - a\n  })\n  return sortedArray\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyz';\n  const newLetters = [];\n\n  for(let i = 0; i < s.length; i++){\n    newLetters.push(letters[(letters.indexOf(s[i]) + 2) % 26]);\n  }\n\n  return newLetters.join('');\n};\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift up by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'asdfghjkl'\n  decrypt('kj') returns 'gf'\n  decrypt('ix') returns 'et'\n  */\nconst decrypt = (s) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyz';\n  const newLetters = [];\n\n  for(let i = 0; i < s.length; i++){\n    newLetters.push(letters[(letters.indexOf(s[i]) - 2) % 26]);\n  }\n\n  return newLetters.join('');\n};\n\nconst test = () => {\n  const encryptStr = encrypt('hi');\n  const decryptStr = decrypt(encryptStr);\n\n  if(encryptStr === decryptStr){\n    console.log('Test passed!');\n  } else {\n    console.log('Test failed!');\n  }\n};\n\ntest();<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  let result = null\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = i + 1; j < lst.length; j++) {\n      if (lst[i] < lst[j]) {\n        result = lst[j]\n        break\n      }\n    }\n    if (result) break\n  }\n  return result\n}\n\nconsole.log(nextSmallset([1, 2, 3, 4, 5]))\nconsole.log(nextSmallset([5, 1, 4, 3, 2]))\nconsole.log(nextSmallset([]))\nconsole.log(nextSmallset([1, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n    let B = 0;\n    let word = '';\n    let start = false;\n    for (let i = 0; i < S.length; i++) {\n        if (S[i] === '.' || S[i] === '?' || S[i] === '!') {\n            if (start) {\n                B++;\n                word = word.substr(1);\n                start = false;\n            }\n        } else if (S[i] === 'I') {\n            start = true;\n            word = S[i];\n        } else {\n            word += S[i];\n        }\n    }\n    return B;\n}\n\nconsole.log(isBoerd(\"Hello world\"));\nconsole.log(isBoerd(\"The sky is blue. The sun is shining. I love this weather\"));\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const intX = parseInt(x);\n  const intY = parseInt(y);\n  const intZ = parseInt(z);\n\n  const sum = intX + intY + intZ;\n\n  return (\n    (sum === intX) || (sum === intY) || (sum === intZ)\n  );\n};\n\n/*\n  Write a function that checks if a number is prime.\n  A number is prime if it is not divisible by any number except itself.\n  Examples\n  prime(3) ➞ true\n  prime(11) ➞ false\n  prime(13) ➞ false\n  prime(7) ➞ true\n  prime(13) ➞ true\n  prime(19) ➞ true\n  prime(2) ➞ true\n  prime(17) ➞ true\n  prime(17) ➞ true\n  prime(11) ➞ true\n  prime(7) ➞ true\n  prime(19) ➞ true\n  prime(3) ➞ true\n  prime(19) ➞ true\n  prime(1) ➞ true\n  prime(11) ➞ true\n  prime(11) ➞ true\n  prime(11) ➞ true\n  prime(5) ➞ false\n  prime(4) ➞ false\n  prime(3) ➞ false\n  prime(2) ➞ false\n  prime(1) ➞ false\n  prime(0) ➞ false\n  prime(1.5) ➞ false\n  prime(0.5) ➞ false\n  prime(0.5) ➞ false\n  prime(0.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5) ➞ false\n  prime(1.5)"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let encoded = '';\n  message = message.toLowerCase();\n  for (let i = 0; i < message.length; i++) {\n    if (message[i] === 'a' || message[i] === 'e' || message[i] === 'i' || message[i] === 'o' || message[i] === 'u') {\n      encoded = encoded + message[i] + message[i + 1];\n      i++;\n    } else if (message[i] === 'y') {\n      encoded = encoded + message[i] +'s';\n    } else if (message[i] === 'b' || message[i] === 'd' || message[i] === 'f' || message[i] === 'g' || message[i] === 'h' || message[i] === 'k' || message[i] === 'l' || message[i] ==='m' || message[i] === 'n' || message[i] === 'p' || message[i] === 'r' || message[i] ==='s' || message[i] === 't' || message[i] === 'v' || message[i] === 'w' || message[i] === 'x' || message[i] === 'z') {\n      encoded = encoded + message[i] + message[i + 2];\n      i++;\n    } else {\n      encoded = encoded + message[i];\n    }\n  }\n  return encoded;\n};\n\nmodule.exports = encode;<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const maxPrime = dp([lst[0]]);\n  const primeCount = lst.reduce((acc, n) => acc + (n === maxPrime? 1 : 0), 0);\n  return (maxPrime + (maxPrime - 1) * primeCount);\n}\n\nconst lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1];\nconsole.log(ksjkasddk(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  if(dict.length === 0) {\n    return false;\n  }\n  const hasLower = {};\n  const hasUpper = {};\n  Object.keys(dict).forEach( (key) => {\n    hasLower[key.toLowerCase()] = true;\n    hasUpper[key.toUpperCase()] = true;\n  });\n  return Object.keys(hasLower).every( (key) => hasLower[key]) && Object.keys(hasUpper).every( (key) => hasUpper[key]);\n};\n\n//\n// Given a string, return the number of lower case letters in the string.\nconst countLowerCaseLetters = (str) => {\n  let count = 0;\n  for(let i = 0; i < str.length; i++) {\n    if(str[i].toLowerCase() === str[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n//\n// Given a string, return the number of upper case letters in the string.\nconst countUpperCaseLetters = (str) => {\n  let count = 0;\n  for(let i = 0; i < str.length; i++) {\n    if(str[i].toUpperCase() === str[i]) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst isPalindrome = (str) => {\n  let l = str.length,\n      half = Math.floor(l/2),\n      lth = str.slice(0, half);\n  \n  if(lth === str.slice(l-half, l)) {\n    return true;\n  }\n  else {\n    return false;\n  }\n};\n\nconst reverse = (str) => {\n  return str.split(\"\").reverse().join(\"\");\n};\n\nconst findPalindrome = (str) => {\n  let l = str.length;\n  if(l < 2) {\n    return false;\n  }\n  else {\n    let i = 0,\n        j = l-1,\n        first,\n        second;\n    \n    while(i < j) {\n      first = str.charAt(i);\n      second = str.charAt(j);\n      if(first === second) {\n        i += 1;\n        j -= 1;\n      }\n      else {\n        return false;\n      }\n    }\n    \n    return true;\n  }\n};\n\nconst isPalindromeRecursive = (str) => {\n  if(str.length === 0) {\n    return true;\n  }\n  else {\n    if(str.charAt(0) === str.charAt(str.length-1)) {\n      return isPalindromeRecursive(str.slice(1, str.length-1));\n    }\n    else {\n      return false;\n    }\n  }\n};\n\n//\n// Given a string, return the number of palindromes in the string.\nconst countPalindrome = (str) => {\n  let count = 0;\n  for(let i = 0; i < str.length; i++) {\n    if(isPalindrome(str.slice(i, i+1)) === true) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\nconst removeLetters = (str) => {\n  let len = str.length;\n  for(let i = 0; i < len; i++) {\n    if(str[i] >= 'A' && str[i] <= 'Z') {\n      str = str.slice(0, i) + str.slice(i+1);\n      len--;\n    }\n  }\n  return str;\n};\n\nconst removeDuplicates = (str) => {\n  let len = str.length;\n  let i = 0;\n  let j = 1;\n  while(j < len) {\n    if(str[i] === str[j]) {\n      i += 1;\n    }\n    else {\n      j += 1;\n    }\n  }\n  return str.slice(0, i);\n};\n\n//\n// Given a string, return the number of distinct letters in the string.\nconst countDistinctLetters = (str) => {\n  let len = str.length;\n  let set = {};\n  let count = 0;\n  for(let i = 0; i < len; i++) {\n    if(!set[str[i]]) {\n      set[str[i]] = 1;\n      count += 1;\n    }\n    else {\n      set[str[i]] = 2;\n    }\n  }\n  return count;\n};\n\nconst findAllOccurrences = (str, substr) => {\n  let len = str.length,\n      i = 0,\n      index = -1;\n  while((index = str.indexOf(substr, i))!== -1) {\n    i = index + 1;\n  }\n  return i;\n};\n\nconst countSubstrOccurrences = (str, substr) => {\n  let count = 0;\n  let index = str.indexOf(substr);\n  while(index!== -1) {\n    count += 1;\n    index = str.indexOf(substr, index+1);\n  }\n  return count;\n};\n\nconst findMaxSubstr = (str, substr) => {\n  let len = str.length,\n      i = 0,\n      index = -1,\n      count = 0;\n  while((index = str.indexOf(substr, i))!== -1)"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  let arr = []\n  for (let i = 1; i <= n; i++) {\n    let x = isPrime(i)\n    if (x) {\n      arr.push(i)\n    }\n  }\n  return arr\n}\n\nconst isPrime = (n) => {\n  if (n < 2) return false\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (a === 0 || b === 0) return 0\n  if (a < 0) {\n    a = -a\n    b = -b\n  }\n  if (b < 0) {\n    a = -a\n    b = -b\n  }\n  let ret = 0\n  while (b > 0) {\n    if (b % 2 === 1) {\n      ret = (ret + a) % 10\n    }\n    a = (a * 10) % 10\n    b /= 2\n  }\n  return ret\n}\n\nconsole.log(multiply(148, 412))\nconsole.log(multiply(19, 28))\nconsole.log(multiply(2020, 1851))\nconsole.log(multiply(14, -15))\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] === s[i].toUpperCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 0\n  countLower('abcdefg') returns 2\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  let count = 0\n  for (let i = 1; i < s.length; i += 2) {\n    if (s[i] === s[i].toLowerCase()) {\n      count++\n    }\n  }\n  return count\n}\n\n// Expected Output:\n// countUpper('aBCdEf') returns 1\n// countUpper('abcdefg') returns 0\n// countUpper('dBBE') returns 0\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  return (value * (Math.pow(10, 7) - 1)) / (Math.pow(10, 7) - value)\n}\n\nconst closestInetger2 = (value) => {\n  return (value * (Math.pow(10, 8) - 1)) / (Math.pow(10, 8) - value)\n}\n\n/*\n  Find the sum of the numbers in the array.\n  */\nconst sum = (numbers) => {\n  return numbers.reduce((a, b) => a + b, 0)\n}\n\nconst isEven = (num) => {\n  return num % 2 === 0\n}\n\nconst sumEven = (numbers) => {\n  return numbers.filter((n) => isEven(n)).reduce((a, b) => a + b, 0)\n}\n\nconst sumOdd = (numbers) => {\n  return numbers.filter((n) =>!isEven(n)).reduce((a, b) => a + b, 0)\n}\n\nconst isNegative = (num) => {\n  return num < 0\n}\n\nconst isPositive = (num) => {\n  return num > 0\n}\n\nconst isEvenPositive = (numbers) => {\n  return numbers.filter((n) => isEven(n) && isPositive(n))\n}\n\nconst isEvenNegative = (numbers) => {\n  return numbers.filter((n) => isEven(n) && isNegative(n))\n}\n\n/*\n  Find the difference of the two numbers in the array.\n  */\nconst difference = (numbers) => {\n  return numbers[0] - numbers[1]\n}\n\nconst isNegativeDifference = (difference) => {\n  return difference < 0\n}\n\nconst isPositiveDifference = (difference) => {\n  return difference > 0\n}\n\nconst isZeroDifference = (difference) => {\n  return difference === 0\n}\n\nconst isPositiveOrNegativeDifference = (difference) => {\n  return isPositiveDifference(difference) || isNegativeDifference(difference)\n}\n\nconst sumPositiveOrNegativeDifference = (numbers) => {\n  return numbers.filter((n) => isPositiveOrNegativeDifference(n)).reduce((a, b) => a + b, 0)\n}\n\n/*\n  Find the product of the numbers in the array.\n  */\nconst product = (numbers) => {\n  return numbers.reduce((a, b) => a * b, 1)\n}\n\nconst isPositiveProduct = (numbers) => {\n  return product(numbers) > 0\n}\n\nconst isNegativeProduct = (numbers) => {\n  return product(numbers) < 0\n}\n\nconst isZeroProduct = (numbers) => {\n  return product(numbers) === 0\n}\n\nconst isPositiveOrNegativeProduct = (numbers) => {\n  return isPositiveProduct(numbers) || isNegativeProduct(numbers)\n}\n\nconst sumPositiveOrNegativeProduct = (numbers) => {\n  return numbers.filter((n) => isPositiveOrNegativeProduct(n)).reduce((a, b) => a + b, 0)\n}\n\nconst sumPositiveOrNegativeDifference = (numbers) => {\n  return numbers.filter((n) => isPositiveOrNegativeDifference(n)).reduce((a, b) => a + b, 0)\n}\n\n/*\n  Find the quotient of the two numbers in the array.\n  */\nconst quotient = (numbers) => {\n  return numbers[0] / numbers[1]\n}\n\nconst isPositiveQuotient = (numbers) => {\n  return quotient(numbers) > 0\n}\n\nconst isNegativeQuotient = (numbers) => {\n  return quotient(numbers) < 0\n}\n\nconst isZeroQuotient = (numbers) => {\n  return quotient(numbers) === 0\n}\n\nconst isPositiveOrNegativeQuotient = (numbers) => {\n  return isPositiveQuotient(numbers) || isNegativeQuotient(numbers)\n}\n\nconst sumPositiveOrNegativeQuotient = (numbers) => {\n  return numbers.filter((n) => isPositiveOrNegativeQuotient(n)).reduce((a, b) => a + b, 0)\n}\n\nconst sumPositiveOrNegativeDifference = (numbers) => {\n  return numbers.filter((n) => isPositiveOrNegativeDifference(n)).reduce((a, b) => a + b, 0)\n}\n\n/*\n  Find the remainder of the two numbers in the array.\n  */\nconst remainder = (numbers) => {\n  return numbers[0] % numbers[1]\n}\n\nconst isZeroRemainder = (numbers) => {\n  return remainder(numbers) === 0\n}\n\nconst isPositiveRemainder = (numbers) => {\n  return remainder(numbers) > 0\n}\n\nconst isNegativeRemainder = (numbers) => {\n  return remainder(numbers) < 0\n}\n\nconst isPositiveOrNegativeRemainder = (numbers) => {\n  return isPositiveRemainder(numbers) || isNegativeRemainder(numbers)\n}\n\nconst sumPositiveOrNegativeRemainder = (numbers) => {\n  return numbers.filter((n) => isPositiveOrNegativeRemainder(n)).reduce((a, b) => a + b, 0)\n}\n\nconst sumPositiveOrNegativeDifference = (n"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 0) return []\n  const res = []\n  for (let i = 1; i <= n; i++) {\n    res.push(i)\n    if (i % 2 === 1) {\n      res.push(i + 1)\n    }\n  }\n  return res\n}\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  s = s.toLowerCase().replace(/\\s+/g, ',').replace(/\\,+/g, ',')\n  return s.split(',').filter(x => x.length > 0)\n}\n\n/*\n  Given an array of numbers, return the sum of all of the numbers.\n  \n  For example:\n  numbers(1, 2, 3, 4, 5) == 10\n  numbers([1, 2, 3, 4, 5]) == 10\n  */\nconst numbers = (n) => {\n  return n.reduce((x, y) => x + y)\n}\n\n/*\n  Given an array of strings, return a new array of all the words in the string.\n  \n  For example:\n  words([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  words([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst words = (s) => {\n  return s.split(/\\W+/g)\n}\n\n/*\n  Given a string, return the string reversed.\n  \n  For example:\n  reverse(\"Hello\") == \"olleH\"\n  reverse(\"One\") == \"onE\"\n  reverse(\"Apple\") == \"applE\"\n  */\nconst reverse = (s) => {\n  return s.split('').reverse().join('')\n}\n\n/*\n  Given an array of strings, return an array of the length of the longest string in the array.\n  \n  For example:\n  longest(\"Hello\", \"World\") == 5\n  longest(\"Hello\", \"World\", \"Hello\") == 5\n  longest(\"Hello\", \"World\", \"World\") == 5\n  longest(\"Hello\", \"World\", \"Hello\", \"World\") == 6\n  longest(\"Hello\", \"World\", \"World\", \"Hello\", \"World\") == 6\n  */\nconst longest = (s1, s2) => {\n  let longest = 0\n  s1.forEach(s => {\n    let l = s.length\n    if (l > longest) {\n      longest = l\n    }\n  })\n  s2.forEach(s => {\n    let l = s.length\n    if (l > longest) {\n      longest = l\n    }\n  })\n  return longest\n}\n\n/*\n  Given an array of strings, return an array of the length of the shortest string in the array.\n  \n  For example:\n  shortest(\"Hello\", \"World\") == 3\n  shortest(\"Hello\", \"World\", \"Hello\") == 3\n  shortest(\"Hello\", \"World\", \"World\") == 3\n  shortest(\"Hello\", \"World\", \"Hello\", \"World\") == 4\n  shortest(\"Hello\", \"World\", \"World\", \"Hello\", \"World\") == 4\n  */\nconst shortest = (s1, s2) => {\n  let shortest = s1.length\n  s1.forEach(s => {\n    let l = s.length\n    if (l < shortest) {\n      shortest = l\n    }\n  })\n  s2.forEach(s => {\n    let l = s.length\n    if (l < shortest) {\n      shortest = l\n    }\n  })\n  return shortest\n}\n\n/*\n  Given an array of numbers, return the average of all of the numbers.\n  \n  For example:\n  average([1, 2, 3, 4, 5]) == 3.0\n  average([1, 2, 3, 4, 5, 6]) == 4.0\n  average([1, 2, 3, 4]) == 3.0\n  average([1, 2, 3, 4, 5, 6]) == 4.0\n  */\nconst average = (n) => {\n  return (n.reduce((x, y) => x + y) / n.length).toFixed(2)\n}\n\n/*\n  Given an array of strings, return the string that occurs most frequently in the array.\n  \n  For example:\n  mostFrequent(\"Hello\", \"World\") == \"Hello\"\n  mostFrequent(\"Hello\", \"Hello\", \"World\") == \"Hello\"\n  mostFrequent(\"Hello\", \"World\", \"Hello\", \"World\") == \"Hello\"\n  mostFrequent(\"Hello\", \"Hello\", \"World\", \"Hello\") == \"Hello\"\n  mostFrequent(\"Hello\", \"World\", \"Hello\", \"Hello\", \"World\") == \"Hello\"\n  mostFrequent(\"Hello\", \"World\", \"Hello\", \"Hello\", \"World\", \"Hello\") == \"Hello\"\n  mostFrequent(\"Hello\", \"World\", \"Hello\", \"Hello\", \"World\", \"Hello\", \"World\") == \"Hello\"\n  */\nconst mostFrequent = (s1, s2) => {\n  let map = {}\n  s1.forEach(s => {\n    let l = s.length\n    if (l in map) {\n      map[l] = map[l] + 1\n    } else {\n      map[l] = 1\n    }\n  })\n  s2.forEach(s => {\n    let l = s.length\n    if (l in map) {\n      map[l] = map[l] + 1\n    } else {\n      map[l] = 1\n    }\n  })\n  let max = 0\n  for (let i in map) {\n    if (map[i] > max) {\n      max = map[i]\n    }\n  }\n  return s1.filter(s => map[s.length] === max).join('')\n}\n\n/*\n  Given an array of numbers, return the number that occurs the most.\n  \n  For example:\n  most(1, 2, 3, 4, 5) == 5\n  most([1, 2, 3, 4, 5]) == 5\n  most([1"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    if (x < y) {\n        return -1;\n    }\n    const min = x;\n    const max = y;\n    const mid = (min + max) / 2;\n    const sum = (mid + 1) * mid / 2;\n    \n    if (sum > mid) {\n        return chooseNum(mid + 1, max);\n    }\n    \n    if (sum < mid) {\n        return chooseNum(min, mid - 1);\n    }\n    \n    return sum;\n}\n\n// console.log(chooseNum(12, 15));\n// console.log(chooseNum(13, 12));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  if (n > m) {\n    return -1;\n  }\n  const nAvg = n + (n * (m - n) / 2);\n  return roundedInt(nAvg);\n};\n\nroundedInt = (n) => {\n  const rounded = Math.round(n);\n  return (rounded).toString(2);\n};\n\n/*\n  Rounds the number down to the nearest multiple of ten,\n  i.e. if the number is 11, it becomes 10.\n  If the number is greater than 100, it will return -1.\n  Example:\n  roundedDown(100) => -1\n  roundedDown(101) => 100\n  roundedDown(11) => 10\n  roundedDown(21) => 20\n  roundedDown(99) => 100\n  roundedDown(1000) => 1000\n*/\nconst roundedDown = (n) => {\n  const rounded = Math.round(n);\n  const roundedMod = Math.mod(rounded, 10);\n  return (rounded - roundedMod);\n};\n\nmodule.exports = {\n  roundedAvg,\n  roundedDown\n};\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  const digits = [...x].map(digit => parseInt(digit))\n  const result = []\n  const max = Math.max(...digits)\n  for (let i = 0; i < max; i += 2) {\n    const index = digits.indexOf(i)\n    if (index === -1) {\n      result.push(i)\n    } else {\n      result.push(...digits.slice(index + 1))\n    }\n  }\n  return result\n}\n\nconsole.log(uniqueDigtis([15, 33, 1422, 1]))\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  if (arr.length > 0) {\n    return arr.map((v, i) => {\n      if (v >= 1 && v <= 9) {\n        return v\n      }\n    })\n  } else {\n    return []\n  }\n}\n\nconst ybSort = (arr) => {\n  let len = ybLength(arr)\n  let sorted = arr.sort((a, b) => a - b)\n  return sorted\n}\n\nconst ybReverse = (arr) => {\n  let reversed = ybSort(arr).reverse()\n  return reversed\n}\n\nconst ybReplace = (arr) => {\n  let sorted = ybSort(arr)\n  return sorted.map((v, i) => {\n    return `${v}`\n  })\n}\n\nconst ybReverseThenReplace = (arr) => {\n  let sorted = ybSort(arr)\n  return sorted.reverse().map((v, i) => {\n    return `${v}`\n  })\n}\n\nconst ybArray = (arr) => {\n  let reversed = ybReverse(arr)\n  let sorted = ybReplace(reversed)\n  return sorted\n}\n\nconst ybArrayOf = (arr) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = ybReplace(reversed)\n  return sorted\n}\n\nconst ybArrayOfLength = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length)\n  return sorted\n}\n\nconst ybArrayOfLengths = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).map(v => {\n    return `${v}`\n  })\n  return sorted\n}\n\nconst ybArrayOfLengthsReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()\n  return sorted\n}\n\nconst ybArrayOfLengthsReversedReversedReversedReversed = (arr, length) => {\n  let reversed = ybReverseThenReplace(arr)\n  let sorted = reversed.slice(0, length).reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse().reverse()."}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  let result = [];\n  let sum = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(sum);\n    } else {\n      result.push(sum * i);\n    }\n    sum *= i;\n  }\n  return result;\n};\n\nf(10);\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  let evens = 0;\n  let odds = 0;\n\n  for (let i = 1; i <= n; i++) {\n    let x = i.toString();\n    let y = x.split('').reverse().join('');\n    let s = x.split('').reverse().join('');\n    if (s.startsWith(x) && s.endsWith(x)) {\n      if (x % 2 === 0) {\n        evens++;\n      } else {\n        odds++;\n      }\n    }\n  }\n\n  return (odds, evens);\n};\n\nexport default evenOddPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let nums = [...arr];\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = 0; j < nums[i].length; j++) {\n      let currNum = parseInt(nums[i].charAt(j));\n      if (currNum > 0) {\n        count += 1;\n      }\n    }\n  }\n  return count;\n};\n\ndescribe('Count Nmus', () => {\n  it('should return 0 for empty array', () => {\n    assert.equal(countNmus([]), 0);\n  });\n  it('should return 1 for single number', () => {\n    assert.equal(countNmus([1, 1, 2]), 1);\n  });\n  it('should return 3 for all positive numbers', () => {\n    assert.equal(countNmus([1, 1, 2, 11, -11, -1]), 3);\n  });\n  it('should return 1 for negative number', () => {\n    assert.equal(countNmus([-1, -11, -1, -2, -11, -1]), 1);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  if(arr.length === 0) return true;\n  if(arr.length === 1) return false;\n\n  let i = arr.length - 1;\n  let j = 0;\n  let max = arr[i];\n  let left = arr.slice(0, i);\n  let right = arr.slice(i + 1);\n\n  while(j < left.length) {\n    if(left[j] > max) {\n      max = left[j];\n      i = j;\n    }\n    j++;\n  }\n\n  while(j < right.length) {\n    if(right[j] < max) {\n      max = right[j];\n      i = j;\n    }\n    j++;\n  }\n\n  if(max === left[j]) {\n    right.splice(j, 1);\n    right.unshift(max);\n    return moveOneBall(right);\n  } else {\n    return false;\n  }\n}\n\nmoveOneBall([3, 5, 4, 1, 2]);<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  const lst1Len = lst1.length\n  const lst2Len = lst2.length\n  if (lst1Len === 0) {\n    return lst2\n  } else if (lst2Len === 0) {\n    return lst1\n  }\n\n  const lst1Idx = 0\n  const lst2Idx = 0\n\n  while (lst1Idx < lst1Len && lst2Idx < lst2Len) {\n    const val = lst1[lst1Idx]\n    if (val % 2!== 0) {\n      if (lst2[lst2Idx] % 2 === 0) {\n        lst1[lst1Idx] = lst2[lst2Idx]\n        lst1Idx++\n        lst2Idx++\n      } else {\n        return false\n      }\n    } else {\n      lst1Idx++\n    }\n  }\n\n  if (lst1Idx === lst1Len) {\n    return lst2\n  } else if (lst2Idx === lst2Len) {\n    return lst1\n  }\n}\n\nconst test = [\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 5, 3, 4]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 3, 5]\n  ],\n  [\n    [1, 2, 3, 4],\n    [1, 2, 4, 5]\n  ]\n]\n\nfor (const [lst1, lst2] of test) {\n  const result = xechange(lst1, lst2)\n  if (result === true) {\n    console.log(`${lst1} is a list of only even numbers.`)\n  } else {\n    console.log(`${lst1} is not a list of only even numbers.`)\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const arr = test.split('')\n  const result = {}\n  arr.forEach(letter => {\n    if (result.hasOwnProperty(letter)) {\n      result[letter] += 1\n    } else {\n      result[letter] = 1\n    }\n  })\n  return result\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the highest occurrence and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram2 = (test) => {\n  const arr = test.split('')\n  const result = {}\n  arr.forEach(letter => {\n    if (result.hasOwnProperty(letter)) {\n      result[letter] += 1\n    } else {\n      result[letter] = 1\n    }\n  })\n  const max = Object.keys(result).reduce((max, key) => {\n    if (result[key] > max) {\n      max = result[key]\n    }\n    return max\n  }, 0)\n  return result\n}\n\n/*\nGiven a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the highest occurrence and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n  \n  */\nconst histogram3 = (test) => {\n  const arr = test.split('')\n  const result = {}\n  arr.forEach(letter => {\n    if (result.hasOwnProperty(letter)) {\n      result[letter] += 1\n    } else {\n      result[letter] = 1\n    }\n  })\n  const max = Object.keys(result).reduce((max, key) => {\n    if (result[key] > max) {\n      max = result[key]\n    }\n    return max\n  }, 0)\n  return result\n}\n\nconst tests = [\n  'a b c',\n  'a b b a',\n  'b b b b a',\n  ''\n]\n\nconst histograms = [\n  histogram,\n  histogram2,\n  histogram3\n]\n\ntests.forEach(test => {\n  histograms.forEach(histogram => {\n    console.log(`Histogram of ${test}:`, histogram(test))\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n    let charSet = {};\n    for (let i = 0; i < c.length; i++) {\n        charSet[c[i]] = true;\n    }\n    let s1 = s.split('');\n    let res = [];\n    for (let i = 0; i < s1.length; i++) {\n        if (!charSet[s1[i]]) {\n            res.push(s1[i]);\n        }\n    }\n    return {s: res.join(''), result: s1.join('') === res.join('')};\n};\n\n// console.log(reversDelete('abcdef', 'b'));\n\n// Task\nconst reverseDelete = (s, c) => {\n    let charSet = {};\n    for (let i = 0; i < c.length; i++) {\n        charSet[c[i]] = true;\n    }\n    let res = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (!charSet[s[i]]) {\n            res.push(s[i]);\n        }\n    }\n    return {s: res.join(''), result: s.join('') === res.join('')};\n};\n\n// console.log(reverseDelete('abcdef', 'b'));\n\n// Task\nconst reverseDelete2 = (s, c) => {\n    let charSet = {};\n    for (let i = 0; i < c.length; i++) {\n        charSet[c[i]] = true;\n    }\n    let res = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (!charSet[s[i]]) {\n            res.unshift(s[i]);\n        }\n    }\n    return {s: res.join(''), result: s.join('') === res.join('')};\n};\n\n// console.log(reverseDelete2('abcdef', 'b'));\n\n// Task\nconst reverseDelete3 = (s, c) => {\n    let charSet = {};\n    for (let i = 0; i < c.length; i++) {\n        charSet[c[i]] = true;\n    }\n    let res = [];\n    for (let i = s.length - 1; i >= 0; i--) {\n        if (!charSet[s[i]]) {\n            res.push(s[i]);\n        }\n    }\n    return {s: res.reverse().join(''), result: s.join('') === res.reverse().join('')};\n};\n\n// console.log(reverseDelete3('abcdef', 'b'));\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  let result = [],\n      oddCount = 0;\n  for (let x of lst) {\n    if (isOdd(x)) {\n      oddCount++;\n    }\n  }\n  for (let x of lst) {\n    if (isOdd(x)) {\n      result.push(`the number of odd elements ${oddCount} of the str${x} of the ${oddCount}put.`);\n    }\n  }\n  return result;\n};\n\nconsole.log(oddCount(['1234567']));\nconsole.log(oddCount(['3',\"11111111\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const size = nums.length;\n  let sum = nums[0];\n  let minSum = sum;\n  for (let i = 1; i < size; i++) {\n    sum += nums[i];\n    minSum = Math.min(minSum, sum);\n  }\n  return minSum;\n};\n\nmodule.exports = minSubArraySum;\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const [length, length2] = [grid.length, grid[0].length]\n  const buckets = []\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length2; j++) {\n      if (grid[i][j] === 1) {\n        buckets.push(j)\n      }\n    }\n  }\n\n  let count = 0\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length2; j++) {\n      if (grid[i][j] === 1) {\n        if (buckets.indexOf(j)!== -1) {\n          count += Math.min(capacity, buckets.length - buckets.indexOf(j))\n          buckets.splice(buckets.indexOf(j), 1)\n        }\n      }\n    }\n  }\n\n  return count\n}\n\nconst test = (grid, capacity, result) => {\n  let count = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid.length - i)\n        grid[i][j] = 0\n      }\n    }\n  }\n  console.log(count === result)\n}\n\nconst test1 = (grid, capacity, result) => {\n  let count = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (grid[i][j] === 1) {\n        count += Math.min(capacity, grid[0].length - j)\n        grid[i][j] = 0\n      }\n    }\n  }\n  console.log(count === result)\n}\n\ntest(\n  [\n    [0, 0, 1, 0],\n    [0, 1, 0, 0],\n    [1, 1, 1, 1]\n  ],\n  1,\n  6\n)\ntest(\n  [\n    [0, 0, 0],\n    [0, 0, 0]\n  ],\n  1,\n  0\n)\ntest(\n  [\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\n    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const result = [...arr];\n  let max = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > 0) {\n        count++;\n      }\n    }\n    if (count > max) {\n      max = count;\n    }\n  }\n  if (max === 0) {\n    return arr;\n  }\n  let sortedArr = [];\n  for (let i = 0; i < arr.length; i++) {\n    let count = 0;\n    for (let j = 0; j < arr.length; j++) {\n      if (arr[j] > 0) {\n        count++;\n      }\n    }\n    if (count === max) {\n      sortedArr.push(arr[i]);\n    }\n  }\n  return sortedArr;\n};\n\nconst tests = [\n  {\n    expected: [1, 2, 3, 4, 5],\n    actual: sortArray([1, 5, 2, 3, 4])\n  },\n  {\n    expected: [-6, -5, -4, -3, -2],\n    actual: sortArray([-2, -3, -4, -5, -6])\n  },\n  {\n    expected: [1, 0, 2, 3, 4],\n    actual: sortArray([1, 0, 2, 3, 4])\n  },\n  {\n    expected: [1, 0, 2, 3, 4],\n    actual: sortArray([1, 2, 3, 4, 0])\n  }\n];\n\ntests.forEach((test) => {\n  console.log(`test: ${JSON.stringify(test)}`);\n  console.log(`expected: ${JSON.stringify(test.expected)}`);\n  console.log(`actual:   ${JSON.stringify(test.actual)}`);\n  console.log(`==> actual and expected are equal: ${JSON.stringify(\n    test.actual === test.expected\n  )}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  const wordList = [];\n  for(let i = 0; i < s.length; i++){\n    if(s[i].match(/\\w/)){\n      if(s[i].length === n){\n        wordList.push(s[i]);\n      }\n    }\n  }\n  return wordList;\n}\n\n/*\nGiven a string s, write a function that returns a list of the length of all\nsubstrings in the string.\n\nExample:\n\ninputString = \"Hello world!\";\noutputString = [5, 8, 4];\n\nNote:\n\nA substring is a contiguous substring of the string, and there is only one\nstring that contains all the characters in the input string, namely the input\nstring itself.\n*/\nconst substring = (s) => {\n  const substringList = [];\n  let i = 0;\n  while(i < s.length){\n    substringList.push(s.slice(i, i + s.length));\n    i++;\n  }\n  return substringList;\n}\n\n/*\nGiven a string s, write a function that returns the count of all\nsubstrings in the string.\n\nExample:\n\ninputString = \"Hello world!\";\noutputString = 2;\n\nNote:\n\nA substring is a contiguous substring of the string, and there is only one\nstring that contains all the characters in the input string, namely the input\nstring itself.\n*/\nconst countSubstrings = (s) => {\n  return s.length - 1;\n}\n\n/*\nGiven two strings s and t, write a function that returns true if they\nshare a substring.\n\nExample:\n\ninputString = \"Hello world!\";\noutputString = \"world!\";\n\nNote:\n\nA substring is a contiguous substring of the string, and there is only one\nstring that contains all the characters in the input string, namely the input\nstring itself.\n*/\nconst checkSubstring = (s, t) => {\n  for(let i = 0; i < s.length; i++){\n    if(t.indexOf(s[i])!== -1){\n      return true;\n    }\n  }\n  return false;\n}\n\nmodule.exports = {\n  selectWdors,\n  substring,\n  countSubstrings,\n  checkSubstring\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  let index = 0;\n  let vowel = '', curVowel = '';\n  let vowelCount = 0;\n\n  while (index < word.length) {\n    curVowel = word[index];\n    if (curVowel === 'a' || curVowel === 'e' || curVowel === 'i' || curVowel === 'o' || curVowel === 'u') {\n      vowelCount++;\n    } else if (vowelCount === 0) {\n      index++;\n    } else if (vowelCount === 1) {\n      if (curVowel === 'a') {\n        index++;\n      } else if (curVowel === 'e') {\n        index++;\n      } else if (curVowel === 'i') {\n        index++;\n      } else if (curVowel === 'o') {\n        index++;\n      } else if (curVowel === 'u') {\n        index++;\n      } else {\n        return '';\n      }\n    } else {\n      return '';\n    }\n  }\n\n  if (vowelCount === 0) {\n    return '';\n  } else if (vowelCount === 1) {\n    if (curVowel === 'a') {\n      return 'a';\n    } else if (curVowel === 'e') {\n      return 'e';\n    } else if (curVowel === 'i') {\n      return 'i';\n    } else if (curVowel === 'o') {\n      return 'o';\n    } else if (curVowel === 'u') {\n      return 'u';\n    }\n  } else {\n    return '';\n  }\n};\n\nmodule.exports = getClossetVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === '(');\n    else if (idx === 0) return (str.charAt(idx) === ')');\n    return (str.charAt(idx) === '(') && (str.charAt(idx - 1) === ')');\n  };\n  return lst.every(find);\n};\n\nconst matchParens1 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === '(') && (str.charAt(idx - 1) === ')');\n  };\n  return lst.every(find);\n};\n\nconst matchParens2 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === '(') && (str.charAt(idx - 1) === ')');\n  };\n  return lst.every(find);\n};\n\nconst matchParens3 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === ')') && (str.charAt(idx - 1) === '(');\n  };\n  return lst.every(find);\n};\n\nconst matchParens4 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === ')') && (str.charAt(idx - 1) === '(');\n  };\n  return lst.every(find);\n};\n\nconst matchParens5 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === '(') && (str.charAt(idx - 1) === ')');\n  };\n  return lst.every(find);\n};\n\nconst matchParens6 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === ')') && (str.charAt(idx - 1) === '(');\n  };\n  return lst.every(find);\n};\n\nconst matchParens7 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === ')') && (str.charAt(idx - 1) === '(');\n  };\n  return lst.every(find);\n};\n\nconst matchParens8 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === '(') && (str.charAt(idx - 1) === ')');\n  };\n  return lst.every(find);\n};\n\nconst matchParens9 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === ')') && (str.charAt(idx - 1) === '(');\n  };\n  return lst.every(find);\n};\n\nconst matchParens10 = (lst) => {\n  const find = (str, idx) => {\n    if (idx === str.length - 1) return (str.charAt(idx) === ')');\n    else if (idx === 0) return (str.charAt(idx) === '(');\n    return (str.charAt(idx) === ')') && (str.charAt(idx - 1)"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n    if (!k) {\n        return arr;\n    }\n\n    let min = arr[0];\n    let max = arr[arr.length - 1];\n\n    // find the min\n    for (let i = 1; i < arr.length; i++) {\n        if (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n\n    // find the max\n    for (let i = arr.length - 2; i >= 0; i--) {\n        if (arr[i] > max) {\n            max = arr[i];\n        }\n    }\n\n    // sort the array\n    arr.sort((a, b) => a - b);\n\n    // get k numbers\n    let nums = [];\n    for (let i = 0; i < k; i++) {\n        nums.push(arr[i]);\n    }\n\n    return nums;\n};\n\nexport {maxmium};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  const sum = (lst.length === 1)? lst[0] : 0;\n  const i = 1;\n  for(; i < lst.length; i++){\n    if(lst[i] % 2 === 0){\n      sum += lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  const result = [];\n  let sum = 0;\n  while (k--) {\n    sum += arr.shift();\n  }\n  let i = 0;\n  while (i < arr.length) {\n    sum += arr[i++];\n    if (i === k + 1) {\n      result.push(sum);\n      sum = 0;\n    }\n  }\n  return result;\n};\n\nexport default addElements;\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const odd = [];\n  const collatz = [];\n  const next = (n) => {\n    collatz.push(n);\n    if (n % 2 === 0) {\n      return n / 2;\n    }\n    return 3 * n + 1;\n  };\n  while (n > 1) {\n    if (collatz.length === 0) {\n      odd.push(next(n));\n      collatz.push(next(n));\n    } else {\n      const collatzIndex = collatz.indexOf(n);\n      if (collatzIndex!== -1) {\n        odd.push(collatz[collatzIndex]);\n        collatz.splice(collatzIndex, 1);\n      }\n    }\n    n = next(n);\n  }\n  return odd;\n};\n\nconsole.log(getOddCollatz(5));<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  const dateString = date.toString().trim();\n  if (dateString.length === 0) {\n    return false;\n  }\n  const dateParts = dateString.split(\"-\");\n  if (dateParts.length!== 3) {\n    return false;\n  }\n  if (dateParts[0].length!== 2) {\n    return false;\n  }\n  if (dateParts[1].length!== 2) {\n    return false;\n  }\n  if (dateParts[2].length!== 4) {\n    return false;\n  }\n  let month = parseInt(dateParts[1], 10);\n  if (month > 12) {\n    return false;\n  }\n  if (month < 1) {\n    return false;\n  }\n  if (month === 1 || month === 3 || month === 5 || month === 7 || month === 8 || month === 10 || month === 12) {\n    let day = parseInt(dateParts[2], 10);\n    if (day < 1 || day > 31) {\n      return false;\n    }\n  }\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    let day = parseInt(dateParts[2], 10);\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n  if (month === 2) {\n    let day = parseInt(dateParts[2], 10);\n    if (day < 1 || day > 29) {\n      return false;\n    }\n  }\n  const year = parseInt(dateParts[2], 10);\n  if (year < 2010 || year > 2020) {\n    return false;\n  }\n  return true;\n};\n\nconsole.log(validDate(\"03-11-2000\"));\nconsole.log(validDate(\"15-01-2012\"));\nconsole.log(validDate(\"04-0-2040\"));\nconsole.log(validDate(\"06-04-2020\"));\nconsole.log(validDate(\"06/04/2020\"));\n<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/).filter(x => x!== \"\");\n  return words.map(x => x.toLowerCase());\n};\n\n/*\n  Given a list of words, return a list of unique words\n  Note: you may not have to do any splitting, just take the text as a string and return a list of unique words\n  Examples\n  splitWords([\"Hello\", \"World\", \"!\"]) ➞ [\"Hello\", \"World\", \"!\"]\n  splitWords([\"Hello\", \"World\", \"!\"]) ➞ [\"Hello\", \"World\", \"!\"]\n  splitWords([\"Hello\", \"World\", \"!\"]) ➞ [\"Hello\", \"World\", \"!\"]\n  splitWords([\"Hello\", \"World\", \"!\"]) ➞ [\"Hello\", \"World\", \"!\"]\n  */\nconst uniqueWords = (txt) => {\n  const words = splitWords(txt);\n  const map = new Map();\n  words.forEach(x => map.set(x, true));\n  return Array.from(map.keys());\n};\n\nconst removeNonAscii = (str) => str.replace(/[^\\u0000-\\u00FF]/g, \"\");\n\n/*\n  Given a string, return a new string where all non-ASCII characters are replaced by?\n  Examples\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  */\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\n/*\n  Given a string, return a new string where all non-ASCII characters are replaced by?\n  Examples\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  removeNonAscii(\"Hello, world!\") ➞ \"Hello, world!\"\n  */\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt) => txt.replace(/[^\\u0000-\\u00FF]/g, \"?\");\n\nconst removeNonAscii = (txt)"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const last = lst.length - 1\n  for (let i = 0; i < last; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false\n    }\n  }\n  return true\n}\n\n// @include../../../lib/ds/array.js\n// @include../../../lib/ds/linkedlist.js\n// @include../../../lib/ds/tree.js\n// @include../../../lib/ds/trie.js\n// @include../../../lib/ds/unordered_set.js\n// @include../../../lib/ds/bitset.js\n// @include../../../lib/ds/hash_table.js\n// @include../../../lib/ds/ordered_map.js\n// @include../../../lib/ds/multiset.js\n// @include../../../lib/ds/set.js\n// @include../../../lib/ds/queue.js\n// @include../../../lib/ds/stack.js\n// @include../../../lib/ds/vector.js\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[0] > interval1[1] || interval2[0] > interval2[1]) {\n    return 'NO';\n  }\n  if (interval1[0] <= interval2[0] && interval1[1] >= interval2[1]) {\n    return 'YES';\n  }\n  if (interval2[0] <= interval1[0] && interval2[1] >= interval1[1]) {\n    return 'YES';\n  }\n  return 'NO';\n}\n\nconsole.log(intersection((1, 2), (2, 3))); // \"NO\"\nconsole.log(intersection((-1, 1), (0, 4))); // \"NO\"\nconsole.log(intersection((-3, -1), (-5, 5))); // \"YES\"\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (!arr || arr.length === 0) return null\n  let ret = 1\n  for (let i = 0; i < arr.length; i++) {\n    ret = (ret * arr[i]) % (10000007)\n  }\n  return ret\n}\n\n/*\n  Given a string s, return the number of times that any\n  character appears in the string.\n  Example:\n  >>> countChars('aabbcc')\n  3\n  >>> countChars('ab')\n  2\n  >>> countChars('abc')\n  1\n  >>> countChars('a')\n  1\n  >>> countChars('')\n  0\n  >>> countChars('ab')\n  1\n*/\nconst countChars = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    count += (s.charCodeAt(i) + 1)\n  }\n  return count\n}\n\n/*\n  Given a string s, return a string consisting of all\n  the characters that appear at least once in the string.\n  Example:\n  >>> countChars('abcc')\n  'abcc'\n  >>> countChars('a')\n  'a'\n  >>> countChars('')\n  ''\n  >>> countChars('aa')\n  'aa'\n*/\nconst countCharsS = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) + 1 > count) {\n      count = s.charCodeAt(i) + 1\n    }\n  }\n  return String.fromCharCode(count)\n}\n\n/*\n  Given a string s, return a string consisting of all\n  the characters that appear exactly once in the string.\n  Example:\n  >>> countChars('abcc')\n  'abc'\n  >>> countChars('a')\n  'a'\n  >>> countChars('')\n  ''\n  >>> countChars('aa')\n  'aa'\n*/\nconst countCharsS2 = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s.charCodeAt(i) + 1 === count) {\n      count = s.charCodeAt(i) + 1\n    }\n  }\n  return String.fromCharCode(count)\n}\n\n/*\n  Given an array arr, return a string consisting of\n  all the elements of the array, joined together with a comma.\n  Example:\n  >>> concatArr([1, 2, 3])\n  '1, 2, 3'\n  >>> concatArr([])\n  ''\n  >>> concatArr([1, 2])\n  '1, 2'\n*/\nconst concatArr = (arr) => {\n  if (!arr || arr.length === 0) return ''\n  return arr.join(', ')\n}\n\n/*\n  Given a string s, return a string consisting of\n  all the elements of the string, joined together with a comma.\n  Example:\n  >>> concatStr('a, b, c')\n  'a, b, c'\n  >>> concatStr('')\n  ''\n  >>> concatStr('a')\n  'a'\n*/\nconst concatStr = (s) => {\n  if (!s) return ''\n  return s.split(',').join('')\n}\n\n/*\n  Given two strings s1 and s2, return a string consisting\n  of the characters that appear in both s1 and s2.\n  Example:\n  >>> commonChars('a, b, c', 'b')\n  'b'\n  >>> commonChars('a', 'b, c')\n  'b, c'\n*/\nconst commonChars = (s1, s2) => {\n  let ret = ''\n  for (let i = 0; i < s1.length; i++) {\n    if (s2.indexOf(s1[i]) >= 0) {\n      ret += s1[i]\n    }\n  }\n  return ret\n}\n\nmodule.exports = {\n  prodSigsn,\n  countCharsS,\n  countCharsS2,\n  concatArr,\n  concatStr,\n  commonChars\n}\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  // We use a map to store the values of each cell and its neighbors.\n  const map = new Map();\n\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (!map.has(grid[i][j])) {\n        map.set(grid[i][j], []);\n      }\n      map.get(grid[i][j]).push(grid[i][j]);\n    }\n  }\n\n  // We only keep the values that are less than k.\n  const values = new Set(Array.from(map.values()).filter((v) => v.length <= k));\n\n  // We maintain a map of cells to the indices of their values.\n  const cells = new Map();\n  for (let i = 0; i < map.size; i++) {\n    for (let j = 0; j < map.get(i).length; j++) {\n      if (!cells.has(map.get(i)[j])) {\n        cells.set(map.get(i)[j], []);\n      }\n      cells.get(map.get(i)[j]).push(i);\n    }\n  }\n\n  // Now, we can easily find the minimum path in the map.\n  const result = new Set();\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid[0].length; j++) {\n      if (values.has(grid[i][j])) {\n        result.add(grid[i][j]);\n      }\n    }\n  }\n\n  // Sort the values and remove the duplicates.\n  result.forEach((v) => {\n    const sortedValues = Array.from(values).filter((v) => v!== v);\n    const sortedValuesIndex = sortedValues.indexOf(v);\n    if (sortedValuesIndex > 0) {\n      sortedValues.splice(sortedValuesIndex, 1);\n    }\n    sortedValues.push(v);\n  });\n\n  return sortedValues;\n};\n\nexport default minPath;\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  if (n === 1) return [1];\n  const fib = [];\n  fib[0] = 1;\n  fib[1] = 2;\n  for (let i = 2; i < n + 1; i++) {\n    fib[i] = fib[i - 1] + fib[i - 2];\n  }\n  return fib;\n};\n\nconsole.log(tir(3));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 1) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\nconst sum = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product += i;\n  }\n  return product;\n};\n\nconst allDigits = (n) => {\n  let product = 1;\n  for (let i = 1; i <= n; i++) {\n    product *= i;\n  }\n  return product;\n};\n\nconst isPrime = (n) => {\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst primes = (n) => {\n  const result = [];\n  let i = 2;\n  while (n > 1) {\n    if (isPrime(i)) {\n      result.push(i);\n      n -= i;\n    }\n    i += 1;\n  }\n  return result;\n};\n\nconst fib = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  let a = 1;\n  let b = 1;\n  let fibonacci = 1;\n  while (fibonacci < n) {\n    fibonacci = a + b;\n    a = b;\n    b = fibonacci;\n  }\n  return fibonacci;\n};\n\nconst pn = (n) => {\n  if (n <= 1) {\n    return 1;\n  }\n  let a = 1;\n  let b = 1;\n  let pn = 1;\n  while (a + b < n) {\n    pn += a;\n    a = b;\n    b = a + b;\n  }\n  return pn;\n};\n\nconst divisors = (n) => {\n  const result = [];\n  for (let i = 1; i <= n; i++) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n  }\n  return result;\n};\n\nconst sum_of_divisors = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += divisors(i).length;\n  }\n  return sum;\n};\n\nconst nth_power = (n) => {\n  let result = 1;\n  while (n > 1) {\n    result *= n;\n    n--;\n  }\n  return result;\n};\n\nconst factorial = (n) => {\n  let result = 1;\n  while (n > 1) {\n    result *= n;\n    n--;\n  }\n  return result;\n};\n\nconst is_palindrome = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 10 + n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result === n;\n};\n\nconst is_palindromic = (n) => {\n  let result = 1;\n  while (n > 0) {\n    result = result * 10 + n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result === n;\n};\n\nconst is_pandigital = (n) => {\n  let result = 1;\n  let sum = 0;\n  while (n > 0) {\n    sum = sum + n % 10;\n    result *= n % 10;\n    n = Math.floor(n / 10);\n  }\n  return result === sum;\n};\n\nconst is_happy = (n) => {\n  let sum = 0;\n  let i = 1;\n  while (i <= n) {\n    sum += i;\n    i++;\n  }\n  return sum % 2 === 0;\n};\n\nconst sum_of_squares = (n) => {\n  let sum = 0;\n  while (n > 0) {\n    sum += n % 10;\n    n = Math.floor(n / 10);\n  }\n  return sum * sum;\n};\n\nconst is_square = (n) => {\n  return n % (n + 1) === 0;\n};\n\nconst is_power_of_two = (n) => {\n  return n === 2 || n === 4 || n === 8 || n === 16 || n === 32 || n === 64 || n === 128 || n === 256;\n};\n\nconst is_prime = (n) => {\n  if (n <= 1) {\n    return false;\n  }\n  let i = 2;\n  while (i <= n) {\n    if (n % i === 0) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconst is_triangular = (n) => {\n  return n % (n + 1) === 0 && n % (n + 2) === 0 && n % (n + 3) === 0;\n};\n\nconst is_quadratic = (n) => {\n  return n % (n + 1) === 0 && n % (n + 2) === 0;\n};\n\nconst is_quadratic = (n) => {\n  return n % (n + 1) === 0 && n % (n + 2) === 0;\n};\n\nconst is_happy = (n) => {\n  return is_palindrome(n) && is_square(n) && is_power_of_two(n);\n};\n\nconst is_square = (n) => {\n  return n % (n + 1) === 0;\n};\n\nconst is_prime = (n) => {\n  return is_prime(n) && n > 1;\n};\n\nconst is_triangular = (n) => {\n  return n % (n + 1) === 0 && n % (n + 2) === 0 && n"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = []\n\n  for (const char of string) {\n    if (char === '[') {\n      stack.push(char)\n    } else if (char === ']') {\n      if (stack.length > 0 && stack[stack.length - 1] === '[') {\n        stack.pop()\n      } else {\n        return false\n      }\n    }\n  }\n\n  return stack.length === 0\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  return lst.map(x => Math.round(x * 100) / 100)\n   .reduce((acc, x) => acc + x * x, 0);\n};\n\nconst sumSquaresWithCeil = (lst) => {\n  return lst.map(x => x * x)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresCeil = (lst) => {\n  return lst.map(x => Math.round(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x * x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUpCeil = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);\n};\n\nconst sumSquaresRoundingUp = (lst) => {\n  return lst.map(x => Math.ceil(x * 100) / 100)\n   .reduce((acc, x) => acc + x, 0);"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const last = txt.slice(-1)\n  if (last.length === 1) {\n    return alphabet(last)\n  }\n  return false\n}\n\n/*\n  Returns a list of words within a given string.\n  Example:\n  wordsIn(\"apple pie\") ➞ [\"apple\", \"pie\"]\n  wordsIn(\"apple pie and pie\") ➞ [\"apple\", \"pie\", \"and\", \"pie\"]\n  wordsIn(\"apple pie and pie\") ➞ [\"apple\", \"pie\", \"and\", \"pie\"]\n  */\nconst wordsIn = (txt) => {\n  const txtArray = txt.split(\" \")\n  let words = []\n  txtArray.forEach((x) => {\n    words = words.concat(wordsIn(x))\n  })\n  return words\n}\n\n/*\n  Returns a list of words within a given string.\n  Example:\n  wordsIn(\"apple pie\") ➞ [\"apple\", \"pie\"]\n  wordsIn(\"apple pie and pie\") ➞ [\"apple\", \"pie\", \"and\", \"pie\"]\n  wordsIn(\"apple pie and pie\") ➞ [\"apple\", \"pie\", \"and\", \"pie\"]\n  */\nconst wordsIn = (txt) => {\n  const txtArray = txt.split(\" \")\n  let words = []\n  txtArray.forEach((x) => {\n    words = words.concat(wordsIn(x))\n  })\n  return words\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", 'a') ➞ true\n  contains(\"apple pie\", 'e') ➞ false\n  contains(\"apple pie\", 'z') ➞ false\n  */\nconst contains = (txt, x) => {\n  return txt.indexOf(x) > -1\n}\n\n/*\n  Returns true if a given string contains a given character,\n  and false otherwise.\n  Example:\n  contains(\"apple pie\", '"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const i = arr.length - 1;\n  const j = i - 1;\n  const min = arr[i];\n  while (i >= 0 && j >= 0 && arr[j] >= min) {\n    if (arr[j] > arr[i]) {\n      i--;\n    } else {\n      j--;\n    }\n  }\n  return j + 1;\n};\n\nexport default canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const arr = lst.slice();\n  let index = arr.length - 1;\n  let result = null;\n\n  while (index >= 0) {\n    const cur = arr[index];\n\n    if (cur > 0) {\n      result = [cur, result];\n    }\n\n    index--;\n  }\n\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (typeof a === 'number' && typeof b === 'number') {\n    if (a >= b) {\n      return b;\n    } else {\n      return a;\n    }\n  }\n  if (typeof a === 'number') {\n    if (a > b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n  if (typeof b === 'number') {\n    if (a < b) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n  if (typeof a ==='string') {\n    if (a.toLowerCase() > b.toLowerCase()) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n  if (typeof b ==='string') {\n    if (a.toLowerCase() < b.toLowerCase()) {\n      return a;\n    } else {\n      return b;\n    }\n  }\n  return null;\n}\n\nconsole.log(compaerOne(1, 2.5));\nconsole.log(compaerOne(1, \"2,3\"));\nconsole.log(compaerOne(\"5,1\", \"6\"));\nconsole.log(compaerOne(\"1\", 1));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const s = sum(n);\n  return (s % 2 === 0 && s >= 4);\n};\n\nmodule.exports = isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n    let i = 1,\n        s = 1,\n        j = 0,\n        f = 1,\n        t = n,\n        result = 0,\n        isOdd = n % 2;\n\n    while (i <= n) {\n        j = i * 2;\n        s = s + j;\n\n        if (isOdd) {\n            f = f * t;\n        }\n\n        if (j <= t) {\n            t = t - j;\n            if (isOdd) {\n                f = f * t;\n            }\n        }\n\n        i = i + 1;\n    }\n\n    return f;\n};\n\nexport default specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  if (!text) {\n    return '';\n  }\n  const fixedText = text.replace(/ /g, '_');\n  if (fixedText.indexOf('  ')!== -1) {\n    fixedText = fixedText.replace(/  /g, '-');\n  }\n  return fixedText;\n};\n\nmodule.exports = fixSpacse;\n<|endoftext|>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const filename = file_name.trim()\n  if (filename === '') return 'No'\n  const first_character = filename.charAt(0)\n  if (first_character === '0' || first_character === '1') return 'No'\n  const first_letter = first_character.toLowerCase()\n  if (first_letter === 'a' || first_letter === 'b' || first_letter === 'c') return 'No'\n  const second_letter = filename.charAt(1)\n  if (second_letter === '0' || second_letter === '1') return 'No'\n  const third_letter = filename.charAt(2)\n  if (third_letter === '0' || third_letter === '1') return 'No'\n  const dot = filename.indexOf('.')\n  if (dot === -1) return 'No'\n  const extension = filename.slice(dot + 1)\n  if (extension === 'txt' || extension === 'exe' || extension === 'dll') return 'Yes'\n  return 'No'\n}\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name should contain only letters, and no spaces.\n  - The file's name should contain exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"example.exe\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n  const filename = file_name.trim()\n  if (filename === '') return 'No'\n  const first_letter = filename.charAt(0)\n  if (first_letter === '0' || first_letter === '1') return 'No'\n  const second_letter = filename.charAt(1)\n  if (second_letter === '0' || second_letter === '1') return 'No'\n  const dot = filename.indexOf('.')\n  if (dot === -1) return 'No'\n  const extension = filename.slice(dot + 1)\n  if (extension === 'txt' || extension === 'exe' || extension === 'dll') return 'Yes'\n  return 'No'\n}\n\nconst valid_filename_1 = fileNameCheck(\"example.txt\")\nconsole.log(valid_filename_1)\nconst valid_filename_2 = fileNameCheck(\"example.exe\")\nconsole.log(valid_filename_2)\nconst valid_filename_3 = fileNameCheck(\"example.dll\")\nconsole.log(valid_filename_3)\nconst valid_filename_4 = fileNameCheck(\"example\")\nconsole.log(valid_filename_4)\nconst valid_filename_5 = fileNameCheck(\"ex1.txt\")\nconsole.log(valid_filename_5)\nconst valid_filename_6 = fileNameCheck(\"ex1.exe\")\nconsole.log(valid_filename_6)\nconst valid_filename_7 = fileNameCheck(\"ex1.dll\")\nconsole.log(valid_filename_7)\nconst valid_filename_8 = fileNameCheck(\"ex1\")\nconsole.log(valid_filename_8)\n\nconst valid_filename_9 = fileNameCheck2(\"example.txt\")\nconsole.log(valid_filename_9)\nconst valid_filename_10 = fileNameCheck2(\"example.exe\")\nconsole.log(valid_filename_10)\nconst valid_filename_11 = fileNameCheck2(\"example.dll\")\nconsole.log(valid_filename_11)\nconst valid_filename_12 = fileNameCheck2(\"example\")\nconsole.log(valid_filename_12)\nconst valid_filename_13 = fileNameCheck2(\"ex1.txt\")\nconsole.log(valid_filename_13)\nconst valid_filename_14 = fileNameCheck2(\"ex1.exe\")\nconsole.log(valid_filename_14)\nconst valid_filename_15 = fileNameCheck2(\"ex1.dll\")\nconsole.log(valid_filename_15)\nconst valid_filename_16 = fileNameCheck2(\"ex1\")\nconsole.log(valid_filename_16)\n\n/*\n  Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name should contain only letters, and no spaces.\n  - The file's name should contain exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"example.exe\") # => 'No' (the name should start with a latin alph"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 === 0 && i % 4!== 0) {\n      sum += lst[i] * lst[i];\n    }\n  }\n  return sum;\n};\n\nconsole.log(sumSquares([1,2,3])); // 6\nconsole.log(sumSquares([])); // 0\nconsole.log(sumSquares([-1,-5,2,-1,-5])); // -126\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  const regex = new RegExp(`[${letters}]+`, 'g')\n  const words = sentence.match(regex)\n  return words.join(' ')\n}\n\nexport default wrodsInSentenec\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  if(!isFraction(x) ||!isFraction(n)) return false;\n  let num = Number(x), den = Number(n);\n  if(num === 0) return false;\n  return isFraction(num / den);\n}\n\n/*\n  Given two strings, a and b, each containing a fraction of the form <numerator>/<denominator>,\n  determine whether a * b equals b * a. The strings can also contain an integer.\n  \n  solution(\"1/2\", \"1/3\") = false\n  solution(\"1/2\", \"1/2\") = true\n  solution(\"1/3\", \"1/2\") = false\n  solution(\"1/3\", \"2/3\") = true\n  solution(\"1/2\", \"2/3\") = false\n  solution(\"1/2\", \"5/7\") = true\n  solution(\"3/2\", \"5/7\") = true\n  solution(\"1/2\", \"1/2\") = false\n  solution(\"5/7\", \"1/2\") = true\n  solution(\"1/2\", \"5/3\") = false\n  solution(\"5/7\", \"3/2\") = true\n  solution(\"1/2\", \"2/2\") = true\n  solution(\"3/2\", \"2/2\") = false\n  solution(\"1/2\", \"7/10\") = true\n  solution(\"1/2\", \"2/3\") = false\n  solution(\"3/2\", \"7/10\") = true\n  solution(\"1/2\", \"3/5\") = false\n  solution(\"1/2\", \"3/4\") = true\n  solution(\"3/2\", \"3/4\") = true\n  solution(\"1/2\", \"5/6\") = true\n  solution(\"1/2\", \"6/5\") = true\n  solution(\"3/2\", \"6/5\") = true\n  solution(\"1/2\", \"2/2\") = true\n  solution(\"5/7\", \"2/3\") = true\n  solution(\"3/2\", \"2/3\") = false\n  solution(\"1/2\", \"2/3\") = false\n  solution(\"3/2\", \"5/3\") = true\n  solution(\"2/3\", \"3/2\") = true\n  solution(\"1/2\", \"5/3\") = true\n  solution(\"3/2\", \"3/2\") = false\n  solution(\"2/3\", \"3/2\") = false\n  solution(\"2/3\", \"7/10\") = true\n  solution(\"7/10\", \"2/3\") = true\n  solution(\"2/3\", \"5/3\") = true\n  solution(\"7/10\", \"3/2\") = true\n  solution(\"3/2\", \"7/10\") = true\n  solution(\"2/3\", \"3/2\") = false\n  solution(\"3/2\", \"2/3\") = false\n  solution(\"7/10\", \"2/3\") = false\n  solution(\"2/3\", \"5/3\") = false\n  solution(\"7/10\", \"3/2\") = false\n  solution(\"3/2\", \"7/10\") = false\n  solution(\"7/10\", \"3/2\") = false\n  solution(\"3/2\", \"2/3\") = false\n  solution(\"2/3\", \"2/3\") = true\n  solution(\"3/2\", \"5/3\") = true\n  solution(\"5/7\", \"2/3\") = false\n  solution(\"3/2\", \"2/3\") = false\n  solution(\"5/7\", \"3/2\") = true\n  solution(\"2/3\", \"3/2\") = false\n  solution(\"2/3\", \"7/10\") = true\n  solution(\"7/10\", \"3/2\") = true\n  solution(\"2/3\", \"2/3\") = true\n  solution(\"3/2\", \"2/3\") = true\n  solution(\"2/3\", \"5/3\") = true\n  solution(\"7/10\", \"3/2\") = true\n  solution(\"3/2\", \"7/10\") = true\n  solution(\"2/3\", \"2/3\") = true\n  solution(\"3/2\", \"2/3\") = true\n  solution(\"7/10\", \"3/2\") = true\n  solution(\"3/2\", \"5/3\") = true\n  solution(\"5/7\", \"2/3\") = false\n  solution(\"3/2\", \"2/3\") = false\n  solution(\"5/7\", \"3/2\") = false\n  solution(\"2/3\", \"7/10\") = false\n  solution(\"7/10\", \"3/2\") = false\n  solution(\"2/3\", \"2/3\") = true\n  solution(\"3/2\", \"2/3\") = true\n  solution(\"2/3\", \"5/3\") = true\n  solution(\"7/10\", \"3/2\") = true\n  solution(\"3/2\", \"7/10\") = true\n  solution(\"2/3\", \"2/3\") = true\n  solution(\"3/2\", \"2/3\") = true\n  solution(\"7/10\", \"3/2\") = true\n  solution(\"3/2\", \"5/3\") = true\n  solution(\"5/7\", \"2/3\") = false\n  solution(\"3/2\", \"2/3\") = false\n  solution(\"5/7\","}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n    if (nums.length === 0) {\n        return nums;\n    }\n    const sortedNums = nums.slice();\n    let prevSum = 0;\n    let idx = 0;\n    while (idx < sortedNums.length) {\n        const sum = sortedNums[idx].toString().split(\"\").reduce((prev, current) => prev + current);\n        if (prevSum < sum) {\n            const temp = sortedNums[idx];\n            sortedNums[idx] = sortedNums[idx + 1];\n            sortedNums[idx + 1] = temp;\n        }\n        prevSum = sum;\n        idx++;\n    }\n    return sortedNums;\n};\n\nconst points = [\n    {\n        id: 0,\n        x: 5,\n        y: 10\n    },\n    {\n        id: 1,\n        x: 1,\n        y: 1\n    },\n    {\n        id: 2,\n        x: 10,\n        y: 3\n    },\n    {\n        id: 3,\n        x: 2,\n        y: 4\n    },\n    {\n        id: 4,\n        x: 2,\n        y: 8\n    },\n    {\n        id: 5,\n        x: 3,\n        y: 8\n    },\n    {\n        id: 6,\n        x: 3,\n        y: 4\n    },\n    {\n        id: 7,\n        x: 3,\n        y: 4\n    },\n    {\n        id: 8,\n        x: 4,\n        y: 8\n    },\n    {\n        id: 9,\n        x: 6,\n        y: 4\n    },\n    {\n        id: 10,\n        x: 9,\n        y: 2\n    },\n    {\n        id: 11,\n        x: 7,\n        y: 6\n    },\n    {\n        id: 12,\n        x: 5,\n        y: 6\n    },\n    {\n        id: 13,\n        x: 7,\n        y: 2\n    },\n    {\n        id: 14,\n        x: 9,\n        y: 7\n    },\n    {\n        id: 15,\n        x: 8,\n        y: 6\n    },\n    {\n        id: 16,\n        x: 9,\n        y: 8\n    },\n    {\n        id: 17,\n        x: 7,\n        y: 4\n    },\n    {\n        id: 18,\n        x: 7,\n        y: 8\n    },\n    {\n        id: 19,\n        x: 6,\n        y: 4\n    },\n    {\n        id: 20,\n        x: 6,\n        y: 6\n    },\n    {\n        id: 21,\n        x: 8,\n        y: 9\n    },\n    {\n        id: 22,\n        x: 9,\n        y: 6\n    },\n    {\n        id: 23,\n        x: 9,\n        y: 6\n    },\n    {\n        id: 24,\n        x: 7,\n        y: 8\n    },\n    {\n        id: 25,\n        x: 8,\n        y: 6\n    },\n    {\n        id: 26,\n        x: 8,\n        y: 7\n    },\n    {\n        id: 27,\n        x: 8,\n        y: 7\n    },\n    {\n        id: 28,\n        x: 7,\n        y: 9\n    },\n    {\n        id: 29,\n        x: 9,\n        y: 8\n    },\n    {\n        id: 30,\n        x: 6,\n        y: 9\n    },\n    {\n        id: 31,\n        x: 9,\n        y: 7\n    },\n    {\n        id: 32,\n        x: 8,\n        y: 8\n    },\n    {\n        id: 33,\n        x: 8,\n        y: 8\n    },\n    {\n        id: 34,\n        x: 7,\n        y: 9\n    },\n    {\n        id: 35,\n        x: 9,\n        y: 7\n    },\n    {\n        id: 36,\n        x: 8,\n        y: 8\n    },\n    {\n        id: 37,\n        x: 7,\n        y: 7\n    },\n    {\n        id: 38,\n        x: 6,\n        y: 8\n    },\n    {\n        id: 39,\n        x: 8,\n        y: 7\n    },\n    {\n        id: 40,\n        x: 7,\n        y: 9\n    },\n    {\n        id: 41,\n        x: 7,\n        y: 7\n    },\n    {\n        id: 42,\n        x: 7,\n        y: 9\n    },\n    {\n        id: 43,\n        x: 9,\n        y: 8\n    },\n    {\n        id: 44,\n        x: 7,\n        y: 8\n    },\n    {\n        id: 45,\n        x: 7,\n        y: 8\n    },\n    {\n        id: 46,\n        x: 8,\n        y: 9\n    },\n    {\n        id: 47,\n        x: 7,\n        y: 7\n    },\n    {\n        id: 48,\n        x: 7,\n        y: 9\n    },\n    {\n        id: 49,\n        x: 8,\n        y: 7\n    },\n    {\n        id: 50,\n        x: 7,\n        y: 7\n    },\n    {\n        id: 51,\n        x: 7,\n        y: 7\n    },\n    {\n        id: 52,\n        x: 8,\n        y: 9\n    },\n    {\n        id: 53,\n        x:"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && (nums[i] % 2 === 1 && nums[i - 1] % 2 === 1 && nums[i + 1] % 2 === 1)) {\n      result.push(nums[i]);\n    }\n  }\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const max = Math.pow(3, n) - 1;\n  const trpiles = new Array(n);\n  for (let i = 0; i < n; i++) {\n    trpiles[i] = i * i - i + 1;\n  }\n  const result = new Array(n);\n  for (let i = 0; i < n; i++) {\n    const count = 0;\n    for (let j = i + 1; j < n; j++) {\n      for (let k = j + 1; k < n; k++) {\n        const sum = trpiles[i] + trpiles[j] + trpiles[k];\n        if (sum > max) {\n          break;\n        }\n        if (sum % 3 === 0) {\n          count++;\n        }\n      }\n    }\n    result[i] = count;\n  }\n  return result;\n};\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of pairs (a[i], a[j]) of a where i < j, \n  and a[i] + a[j] is a multiple of 5.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid pair is (1, 7).\n  */\nconst getMaxPairs = (n) => {\n  const max = Math.pow(5, n) - 1;\n  const pairs = new Array(n);\n  for (let i = 0; i < n; i++) {\n    pairs[i] = i * i - i + 1;\n  }\n  const result = new Array(n);\n  for (let i = 0; i < n; i++) {\n    const count = 0;\n    for (let j = i + 1; j < n; j++) {\n      if (pairs[i] + pairs[j] > max) {\n        break;\n      }\n      if (pairs[i] + pairs[j] % 5 === 0) {\n        count++;\n      }\n    }\n    result[i] = count;\n  }\n  return result;\n};\n\nexport { getMaxTrpiles, getMaxPairs };\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\") ||!(typeof planet2 === \"string\")) return\n  const l1 = planet1.split(\" \")\n  const l2 = planet2.split(\" \")\n  const l3 = []\n  const l4 = []\n  const i = 1\n  for (let i = 1; i < l1.length; i++) {\n    for (let j = 1; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l3.push(l1[i])\n        l4.push(l2[j])\n      }\n    }\n  }\n  const l3 = l3.sort()\n  const l4 = l4.sort()\n  return l3.concat(l4)\n}\n\nconst bf2 = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\") ||!(typeof planet2 === \"string\")) return\n  const l1 = planet1.split(\" \")\n  const l2 = planet2.split(\" \")\n  const l3 = []\n  const l4 = []\n  for (let i = 1; i < l1.length; i++) {\n    for (let j = 1; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l3.push(l1[i])\n        l4.push(l2[j])\n      }\n    }\n  }\n  return l3.concat(l4)\n}\n\nconst bf3 = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\") ||!(typeof planet2 === \"string\")) return\n  const l1 = planet1.split(\" \")\n  const l2 = planet2.split(\" \")\n  const l3 = []\n  const l4 = []\n  const i = 1\n  for (let i = 1; i < l1.length; i++) {\n    for (let j = 1; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l3.push(l1[i])\n        l4.push(l2[j])\n      }\n    }\n  }\n  return l3.concat(l4)\n}\n\nconst bf4 = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\") ||!(typeof planet2 === \"string\")) return\n  const l1 = planet1.split(\" \")\n  const l2 = planet2.split(\" \")\n  const l3 = []\n  const l4 = []\n  const i = 1\n  for (let i = 1; i < l1.length; i++) {\n    for (let j = 1; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l3.push(l1[i])\n        l4.push(l2[j])\n      }\n    }\n  }\n  return l3.concat(l4)\n}\n\nconst bf5 = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\") ||!(typeof planet2 === \"string\")) return\n  const l1 = planet1.split(\" \")\n  const l2 = planet2.split(\" \")\n  const l3 = []\n  const l4 = []\n  const i = 1\n  for (let i = 1; i < l1.length; i++) {\n    for (let j = 1; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l3.push(l1[i])\n        l4.push(l2[j])\n      }\n    }\n  }\n  return l3.concat(l4)\n}\n\nconst bf6 = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\") ||!(typeof planet2 === \"string\")) return\n  const l1 = planet1.split(\" \")\n  const l2 = planet2.split(\" \")\n  const l3 = []\n  const l4 = []\n  const i = 1\n  for (let i = 1; i < l1.length; i++) {\n    for (let j = 1; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l3.push(l1[i])\n        l4.push(l2[j])\n      }\n    }\n  }\n  return l3.concat(l4)\n}\n\nconst bf7 = (planet1, planet2) => {\n  if (!(typeof planet1 === \"string\") ||!(typeof planet2 === \"string\")) return\n  const l1 = planet1.split(\" \")\n  const l2 = planet2.split(\" \")\n  const l3 = []\n  const l4 = []\n  const i = 1\n  for (let i = 1; i < l1.length; i++) {\n    for (let j = 1; j < l2.length; j++) {\n      if (l1[i] === l2[j]) {\n        l3.push(l1[i])\n        l4.push(l2[j])\n      }\n    }\n  }\n  return l3.concat(l4)\n}\n\nconst"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const result = []\n  for (let i = 0; i < lst.length; i++) {\n    const cur = lst[i]\n    const curLength = cur.length\n    const curSum = parseInt(cur, 10)\n    if (curSum % 2 === 1) {\n      result.push(cur)\n      continue\n    }\n    const next = lst[i + 1]\n    const nextLength = next.length\n    const nextSum = parseInt(next, 10)\n    if (nextSum % 2 === 1) {\n      result.push(cur)\n      i += 1\n      continue\n    }\n    if (curSum > nextSum) {\n      result.push(cur)\n      continue\n    }\n    result.push(next)\n  }\n  return result\n}\n\nmodule.exports = sortedListSum\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (isPrime(n)) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconst isPrime = (n) => {\n  let limit = sqrt(n);\n  for (let i = 2; i <= limit; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n//# sourceMappingURL=main.js.map<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (typeof num === 'number' && num > 0 && isOdd(num)) {\n      sum += num * num\n    }\n  }\n  return sum\n}\n\n/* Given two lists, return a list containing the sum of each pair of\n  numbers in the two lists.\n  doublehTeDifference([1, 3, 2, 0], [4, 6]) == [1 + 4, 3 + 6, 2 + 6, 0 + 6]\n  doublehTeDifference([1, 3, 2, 0], [4, 6, 8]) == [1 + 4 + 8, 3 + 6 + 8, 2 + 6 + 8, 0 + 6 + 8]\n  */\nconst doublehTeDifference = (lstA, lstB) => {\n  let sum = []\n  for (let i = 0; i < lstA.length; i++) {\n    const numA = lstA[i]\n    for (let j = 0; j < lstB.length; j++) {\n      const numB = lstB[j]\n      if (typeof numA === 'number' && typeof numB === 'number' && numA > 0 && numB > 0) {\n        sum.push(numA + numB)\n      }\n    }\n  }\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the even numbers.\n  doublehTeDifference([1, 3, 2, 0]) == 4\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvens = (lst) => {\n  let sum = 0\n  for (let i = 0; i < lst.length; i++) {\n    const num = lst[i]\n    if (typeof num === 'number' && num > 0 && isEven(num)) {\n      sum += num\n    }\n  }\n  return sum\n}\n\n/* Given two lists, return a list containing the sum of each pair of\n  even numbers in the two lists.\n  doublehTeDifference([1, 3, 2, 0], [4, 6]) == [4 + 6, 6 + 6]\n  doublehTeDifference([1, 3, 2, 0], [4, 6, 8]) == [4 + 6 + 8, 6 + 6 + 8]\n  */\nconst doublehTeDifferenceEvens = (lstA, lstB) => {\n  let sum = []\n  for (let i = 0; i < lstA.length; i++) {\n    const numA = lstA[i]\n    for (let j = 0; j < lstB.length; j++) {\n      const numB = lstB[j]\n      if (typeof numA === 'number' && typeof numB === 'number' && numA > 0 && numB > 0 && isEven(numA) && isEven(numB)) {\n        sum.push(numA + numB)\n      }\n    }\n  }\n  return sum\n}\n\n/* Given two lists, return a list containing the difference of each pair\n  of numbers in the two lists.\n  doublehTeDifference([1, 3, 2, 0], [4, 6]) == [1 - 4, 3 - 6, 2 - 6, 0 - 6]\n  doublehTeDifference([1, 3, 2, 0], [4, 6, 8]) == [1 - 4 - 8, 3 - 6 - 8, 2 - 6 - 8, 0 - 6 - 8]\n  */\nconst doublehTeDifference = (lstA, lstB) => {\n  let diff = []\n  for (let i = 0; i < lstA.length; i++) {\n    const numA = lstA[i]\n    for (let j = 0; j < lstB.length; j++) {\n      const numB = lstB[j]\n      if (typeof numA === 'number' && typeof numB === 'number' && numA > 0 && numB > 0) {\n        diff.push(numA - numB)\n      }\n    }\n  }\n  return diff\n}\n\n/* Given two lists, return a list containing the difference of each pair\n  of even numbers in the two lists.\n  doublehTeDifference([1, 3, 2, 0], [4, 6]) == [1 - 4, 3 - 6, 2 - 6, 0 - 6]\n  doublehTeDifference([1, 3, 2, 0], [4, 6, 8]) == [1 - 4 - 8, 3 - 6 - 8, 2 - 6 - 8, 0 - 6 - 8]\n  */\nconst doublehTeDifferenceEvens = (lstA, lstB) => {\n  let diff = []\n  for (let i = 0; i < lstA.length; i++) {\n    const numA = lstA[i]\n    for (let j = 0; j < lstB.length; j++) {\n      const numB = lstB[j]\n      if (typeof numA === 'number' && typeof numB === 'number' && numA > 0 && numB > 0 && isEven(numA) && isEven(numB)) {\n        diff.push(numA - numB)\n      }\n    }\n  }\n  return diff\n}\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  let score = game.reduce((a,b,index)=>{\n    if(a === b) return a;\n    return a > b? a - b : b - a;\n  });\n\n  let diff = [];\n  guess.forEach(function(g,index){\n    if(g === score) diff.push(0);\n    else diff.push(Math.abs(score - g));\n  });\n  return diff;\n}\n\nmodule.exports = compare;<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const classes = extensions.map(ext => ext.substring(0, ext.length - 1))\n  const capitalizedClasses = classes.map(ext => ext.toUpperCase())\n  const capitalizedClassesLength = capitalizedClasses.length\n  const strength = {\n    capitalizedClassesLength,\n    capitalizedClasses\n  }\n  let strongestExtensionName = ''\n  let strongestExtensionStrength = 0\n  classes.forEach((clazz, index) => {\n    const strengthOfExtension = capitalizedClassesLength - index\n    if (strengthOfExtension > strongestExtensionStrength) {\n      strongestExtensionName = clazz\n      strongestExtensionStrength = strengthOfExtension\n    }\n  })\n  return class_name + '.' + strongestExtensionName\n}\n\n/*\n  Given a string, return a list of all of the words in the string. The\n  returned list will contain only the words (i.e., strings) in the string.\n  Words are delimited by spaces.\n  Example:\n  wordsIn('This is a sentence') == ['This', 'is', 'a','sentence']\n  */\nconst wordsIn = (string) => {\n  const split = string.split(' ')\n  return split.filter(word =>!!word)\n}\n\n/*\n  Given a string, return a list of all of the words in the string. The\n  returned list will contain only the words (i.e., strings) in the string.\n  Words are delimited by either spaces or apostrophes.\n  Example:\n  wordsIn('This is a sentence') == ['This', 'is', 'a','sentence']\n  */\nconst wordsInWithQuotes = (string) => {\n  const split = string.split(' ')\n  return split.filter(word =>!!word)\n}\n\n/*\n  Given a string, return the length of the string. The length of the string\n  will not include the whitespace characters.\n  Example:\n  length('This is a sentence') == 14\n  */\nconst length = (string) => {\n  const split = string.split(' ')\n  return split.length\n}\n\n/*\n  Given a string, return a list of all of the words in the string. The\n  returned list will contain only the words (i.e., strings) in the string.\n  Words are delimited by either spaces or apostrophes.\n  Example:\n  wordsInWithQuotes('This is a sentence') == ['This', 'is', 'a','sentence']\n  */\nconst wordsInWithQuotesLength = (string) => {\n  const split = string.split(' ')\n  return split.length\n}\n\n/*\n  Given a string, return a list of all of the words in the string. The\n  returned list will contain only the words (i.e., strings) in the string.\n  Words are delimited by either spaces or apostrophes.\n  Example:\n  wordsInWithQuotesLength('This is a sentence') == 14\n  */\nconst wordsInWithQuotesLength = (string) => {\n  const split = string.split(' ')\n  return split.length\n}\n\n/*\n  Given a string, return a list of all of the words in the string. The\n  returned list will contain only the words (i.e., strings) in the string.\n  Words are delimited by either spaces or apostrophes.\n  Example:\n  wordsInWithQuotes('This is a sentence') == ['This', 'is', 'a','sentence']\n  */\nconst wordsInWithQuotesLength = (string) => {\n  const split = string.split(' ')\n  return split.length\n}\n\n/*\n  Given a string, return a list of all of the words in the string. The\n  returned list will contain only the words (i.e., strings) in the string.\n  Words are delimited by either spaces or apostrophes.\n  Example:\n  wordsInWithQuotes('This is a sentence') == ['This', 'is', 'a','sentence']\n  */\nconst wordsInWithQuotesLength = (string) => {\n  const split = string.split(' ')\n  return split.length\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let aRotation = a.split('').reverse().join('');\n  let bRotation = b.split('').reverse().join('');\n  if (aRotation.indexOf(b)!== -1 || bRotation.indexOf(a)!== -1) return true;\n  return false;\n};\n\n/*\n  ccypattern2Chekc(\"abcd\",\"abd\") => false\n  ccypattern2Chekc(\"hello\",\"ell\") => true\n  ccypattern2Chekc(\"whassup\",\"psus\") => false\n  ccypattern2Chekc(\"abab\",\"baa\") => true\n  ccypattern2Chekc(\"efef\",\"eeff\") => false\n  ccypattern2Chekc(\"himenss\",\"simen\") => true\n  */\nconst ccypattern2Chekc = (a, b) => {\n  if (b.indexOf(a)!== -1) return true;\n  return false;\n};\n\n// Test your function using the values below.\n/*\n  a = \"abcd\"\n  b = \"abd\"\n  c = \"hell\"\n  d = \"ell\"\n  e = \"whassup\"\n  f = \"psus\"\n  g = \"abab\"\n  h = \"efef\"\n  i = \"himenss\"\n*/\nconst numbers = [\n  \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\"\n];\n\nconst testValues = [\n  [\"abcd\", \"abd\"],\n  [\"hello\", \"ell\"],\n  [\"whassup\", \"psus\"],\n  [\"abab\", \"baa\"],\n  [\"efef\", \"eeff\"],\n  [\"himenss\", \"simen\"]\n];\n\nconst ccypatternChekc2 = (a, b) => {\n  let aRotation = a.split('').reverse().join('');\n  let bRotation = b.split('').reverse().join('');\n  if (aRotation.indexOf(b)!== -1 || bRotation.indexOf(a)!== -1) return true;\n  return false;\n};\n\nconst testValues2 = [\n  [\"abcd\", \"abd\"],\n  [\"hello\", \"ell\"],\n  [\"whassup\", \"psus\"],\n  [\"abab\", \"baa\"],\n  [\"efef\", \"eeff\"],\n  [\"himenss\", \"simen\"]\n];\n\nconsole.log(ccypatternChekc(a, b)? 'True' : 'False');\nconsole.log(ccypattern2Chekc(a, b)? 'True' : 'False');\nconsole.log(ccypatternChekc2(a, b)? 'True' : 'False');\nconsole.log(ccypattern2Chekc2(a, b)? 'True' : 'False');\n\nfor (let i = 0; i < testValues.length; i++) {\n  let a = testValues[i][0];\n  let b = testValues[i][1];\n  console.log(ccypatternChekc(a, b)? 'True' : 'False');\n  console.log(ccypattern2Chekc(a, b)? 'True' : 'False');\n  console.log(ccypatternChekc2(a, b)? 'True' : 'False');\n  console.log(ccypattern2Chekc2(a, b)? 'True' : 'False');\n}\n\nfor (let i = 0; i < testValues2.length; i++) {\n  let a = testValues2[i][0];\n  let b = testValues2[i][1];\n  console.log(ccypatternChekc(a, b)? 'True' : 'False');\n  console.log(ccypattern2Chekc(a, b)? 'True' : 'False');\n  console.log(ccypatternChekc2(a, b)? 'True' : 'False');\n  console.log(ccypattern2Chekc2(a, b)? 'True' : 'False');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let count = 0;\n    while (num) {\n        if (num % 2 === 0) count += 1;\n        num = num >> 1;\n    }\n    return [count, num];\n};\n\nconsole.log(evenOddCount(0));\nconsole.log(evenOddCount(12));\nconsole.log(evenOddCount(-12));\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(-123));\nconsole.log(evenOddCount(111111));\nconsole.log(evenOddCount(-111111));\nconsole.log(evenOddCount}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n    let number = parseInt(number);\n    if (number < 3) {\n        return `i${number}`;\n    }\n    let str = number < 10? `i${number}` : `ii${number}`;\n    number %= 5;\n    while (number) {\n        str = `${str[str.length - 1]}v${str}`;\n        number -= 1;\n    }\n    return str.toLowerCase();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  const s = (a + b + c) / 2;\n  const a2 = a * a;\n  const b2 = b * b;\n  const c2 = c * c;\n  const ab = a * b;\n  const ac = a * c;\n  const bc = b * c;\n\n  return ((a2 + b2 + c2) === s) &&\n    ((ab + bc === 0) ||\n    (ac + bc === 0) ||\n    (ac + ab === 0) ||\n    (bc + ab === 0));\n};\n\nconsole.log(rightAngelTriangle(1, 2, 3));\nconsole.log(rightAngelTriangle(3, 4, 5));\nconsole.log(rightAngelTriangle(3, 4, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const max = words[0];\n  let maxCount = 0;\n  let maxLetters = 0;\n  let currentCount = 0;\n  let currentLetters = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > maxCount) {\n      max = words[i];\n      maxCount = words[i].length;\n    }\n    if (words[i].length > currentCount) {\n      currentCount = words[i].length;\n      currentLetters = words[i].length;\n    }\n  }\n  return max;\n};\n\n/*\n  Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of distinct characters. If multiple strings have maximum number of distinct\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"name\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"aaaaaaa\"\n  */\nconst findMaxD = (words) => {\n  const max = words[0];\n  let maxCount = 0;\n  let maxLetters = 0;\n  let currentCount = 0;\n  let currentLetters = 0;\n  for (let i = 0; i < words.length; i++) {\n    if (words[i].length > maxCount) {\n      max = words[i];\n      maxCount = words[i].length;\n    }\n    if (words[i].length > currentCount) {\n      currentCount = words[i].length;\n      currentLetters = words[i].length;\n    }\n  }\n  return max;\n};\n\nconst wordList = [\n  \"name\", \"of\", \"string\", \"enam\", \"game\", \"aaaaaaa\", \"bb\", \"cc\"\n];\n\nconsole.log(findMax(wordList));\nconsole.log(findMaxD(wordList));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  if (number > need) {\n    return [need, remaining];\n  }\n  if (number < need) {\n    return [number, remaining - number];\n  }\n  return [need, remaining];\n};\n\nconst test = {\n  eat(5, 6, 10) => [11, 4],\n  eat(4, 8, 9) => [12, 1],\n  eat(1, 10, 10) => [11, 0],\n  eat(2, 11, 5) => [7, 0]\n};\n\nconsole.log(JSON.stringify(test, null, 2));\n\nconst test2 = {\n  eat(5, 6, 10) => [11, 4],\n  eat(4, 8, 9) => [12, 1],\n  eat(1, 10, 10) => [11, 0],\n  eat(2, 11, 5) => [7, 0]\n};\n\nconsole.log(JSON.stringify(test2, null, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const len = operator.length\n  const operandLen = operand.length - 1\n\n  if (len!== operandLen) {\n    throw new Error('Invalid length of operator and operand list.')\n  }\n\n  let result = 0\n\n  operand.forEach((number, index) => {\n    const operatorItem = operator[index]\n    const operandItem = operand[index + 1]\n    result += parseInt(operatorItem) * parseInt(operandItem)\n  })\n\n  return result\n}\n\nmodule.exports = doAlgebra\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  const len = s.length\n  let r = s\n  if (len > 1) {\n    for (let i = 0; i < len / 2; i++) {\n      r = r.split('').reverse().join('')\n    }\n  }\n  return r\n}\n\nexport default solve\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null;\n  return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a md5 hash'md5Hash' return its corresponding string.\n  If'md5Hash' is not an md5 hash, return null.\n\n  >>> stringFromMd5('3e25960a79dbc69b674cd4ec67a72c62')\n  'Hello world'\n  >>> stringFromMd5('f7f1ee9b2c3c33cea6d8cac6f8c3ff7f')\n  'Hello world'\n  >>> stringFromMd5('ffffffffffffffffffffffffffffffff')\n  'ffffffffffffffffffffffffffffffff'\n  */\nconst md5ToString = (md5Hash) => {\n  if (md5Hash === 'ffffffffffffffffffffffffffffffff') return '';\n  return crypto.createHash('md5').update(md5Hash).digest('hex');\n};\n\n/*\n  Given an md5 hash'md5Hash' return its corresponding md5 hash.\n  If'md5Hash' is not an md5 hash, return null.\n\n  >>> md5ToMd5(stringFromMd5('3e25960a79dbc69b674cd4ec67a72c62'))\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  >>> md5ToMd5(stringFromMd5('ffffffffffffffffffffffffffffffff'))\n  'ffffffffffffffffffffffffffffffff'\n  >>> md5ToMd5(stringFromMd5('ffffffffffffffffffffffffffffffff'))\n  'ffffffffffffffffffffffffffffffff'\n  */\nconst md5ToMd5 = (md5Hash) => {\n  if (md5Hash === 'ffffffffffffffffffffffffffffffff') return '';\n  return crypto.createHash('md5').update(md5Hash).digest('hex');\n};\n\n/*\n  Given a string 'text' return its md5 hash.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToString(md5ToMd5('3e25960a79dbc69b674cd4ec67a72c62'))\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  >>> md5ToString(md5ToMd5('ffffffffffffffffffffffffffffffff'))\n  'ffffffffffffffffffffffffffffffff'\n  >>> md5ToString(md5ToMd5('ffffffffffffffffffffffffffffffff'))\n  'ffffffffffffffffffffffffffffffff'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null;\n  return md5ToMd5(stringToMd5(text));\n};\n\n/*\n  Given a string 'text' return its md5 hash.\n  If 'text' is an empty string, return null.\n\n  >>> md5ToMd5(stringToMd5('3e25960a79dbc69b674cd4ec67a72c62'))\n  '3e25960a79dbc69b674cd4ec67a72c62'\n  >>> md5ToMd5(stringToMd5('ffffffffffffffffffffffffffffffff'))\n  'ffffffffffffffffffffffffffffffff'\n  >>> md5ToMd5(stringToMd5('ffffffffffffffffffffffffffffffff'))\n  'ffffffffffffffffffffffffffffffff'\n  */\nconst md5ToString = (md5Hash) => {\n  if (md5Hash === 'ffffffffffffffffffffffffffffffff') return '';\n  return stringToMd5(md5ToString(md5Hash));\n};\n\nmodule.exports = {\n  stringToMd5,\n  md5ToString,\n  stringToMd5,\n  md5ToMd5,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i += 2) {\n    even.push(i)\n  }\n\n  return even\n}\n\nconst generateIntegers2 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers3 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 2 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers4 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 3 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers5 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 5 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers6 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 7 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers7 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 11 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers8 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 13 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers9 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 17 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers10 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 19 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers11 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 23 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers12 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 29 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers13 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 31 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers14 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 37 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers15 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 41 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers16 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 43 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers17 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 47 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers18 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 51 === 0) {\n      even.push(i)\n    }\n  }\n\n  return even\n}\n\nconst generateIntegers19 = (a, b) => {\n  if (a > b) return [];\n\n  const even = []\n\n  for (let i = a; i <= b; i++) {\n    if (i % 53 === 0)"}
