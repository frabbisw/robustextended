{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  return (\n    numbers.reduce((prev, curr) => {\n      if (Math.abs(prev - curr) < threshold) {\n        return true;\n      } else {\n        return prev;\n      }\n    }, false)\n  );\n};\n\n/* Check if the given list of numbers are sorted in increasing order.\n  >>> hasIncreasing([1, 3, 2, 4])\n  true\n  >>> hasIncreasing([3, 2, 1, 4])\n  false\n  >>> hasIncreasing([3, 2, 1, 4, 6, 8, 7, 5, 9])\n  true\n  */\nconst hasIncreasing = (numbers) => {\n  return (\n    numbers.reduce((prev, curr) => {\n      return prev > curr? false : prev;\n    }, true)\n  );\n};\n\n/* Check if the given list of numbers are sorted in decreasing order.\n  >>> hasDecreasing([1, 3, 2, 4])\n  false\n  >>> hasDecreasing([3, 2, 1, 4])\n  true\n  >>> hasDecreasing([3, 2, 1, 4, 6, 8, 7, 5, 9])\n  true\n  */\nconst hasDecreasing = (numbers) => {\n  return (\n    numbers.reduce((prev, curr) => {\n      return prev < curr? false : prev;\n    }, true)\n  );\n};\n\n/* Check if the given list of numbers are sorted in increasing order\n  of the first given number.\n  >>> hasIncreasing([1, 2, 3])\n  false\n  >>> hasIncreasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  */\nconst hasIncreasingFirst = (numbers, first) => {\n  return hasIncreasing(numbers.filter((num) => num == first));\n};\n\n/* Check if the given list of numbers are sorted in decreasing order\n  of the first given number.\n  >>> hasDecreasing([1, 2, 3])\n  true\n  >>> hasDecreasing([1, 2, 3, 4, 5, 6, 7])\n  false\n  */\nconst hasDecreasingFirst = (numbers, first) => {\n  return hasDecreasing(numbers.filter((num) => num == first));\n};\n\n/* Check if the given list of numbers are sorted in increasing order\n  of the second given number.\n  >>> hasIncreasing([1, 2, 3])\n  false\n  >>> hasIncreasing([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> hasIncreasing([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  true\n  */\nconst hasIncreasingSecond = (numbers, second) => {\n  return hasIncreasing(numbers.filter((num) => num > second));\n};\n\n/* Check if the given list of numbers are sorted in decreasing order\n  of the second given number.\n  >>> hasDecreasing([1, 2, 3])\n  false\n  >>> hasDecreasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  >>> hasDecreasing([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  */\nconst hasDecreasingSecond = (numbers, second) => {\n  return hasDecreasing(numbers.filter((num) => num > second));\n};\n\n/* Check if the given list of numbers are sorted in increasing order\n  of the third given number.\n  >>> hasIncreasing([1, 2, 3])\n  false\n  >>> hasIncreasing([1, 2, 3, 4, 5, 6, 7])\n  false\n  >>> hasIncreasing([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  */\nconst hasIncreasingThird = (numbers, third) => {\n  return hasIncreasing(numbers.filter((num) => num > third));\n};\n\n/* Check if the given list of numbers are sorted in decreasing order\n  of the third given number.\n  >>> hasDecreasing([1, 2, 3])\n  true\n  >>> hasDecreasing([1, 2, 3, 4, 5, 6, 7])\n  true\n  >>> hasDecreasing([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  false\n  */\nconst hasDecreasingThird = (numbers, third) => {\n  return hasDecreasing(numbers.filter((num) => num > third));\n};\n\nmodule.exports = {\n  hasCloselEements,\n  hasIncreasing,\n  hasIncreasingFirst,\n  hasIncreasingSecond,\n  hasIncreasingThird,\n  hasDecreasing,\n  hasDecreasingFirst,\n  hasDecreasingSecond,\n  hasDecreasingThird\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  paren_string = paren_string.replace(/\\s/g, '');\n\n  const paren_string_length = paren_string.length;\n\n  const open_parens = [];\n  let current_open_paren = 0;\n  for (let i = 0; i < paren_string_length; i++) {\n    if (paren_string[i] === '(') {\n      open_parens.push(current_open_paren);\n      current_open_paren++;\n    } else if (paren_string[i] === ')') {\n      current_open_paren--;\n      open_parens.pop();\n    }\n  }\n\n  const closed_parens = [];\n  for (let i = 0; i < current_open_paren; i++) {\n    closed_parens.push(current_open_paren);\n  }\n\n  return open_parens.map(open_paren => {\n    let closed_parens_list = closed_parens.slice();\n    while (closed_parens_list.length > 0 && open_paren === closed_parens_list[closed_parens_list.length - 1]) {\n      closed_parens_list.pop();\n    }\n\n    return paren_string.slice(open_paren, close_paren => close_paren + open_paren).join('');\n  }).filter(val => val);\n};\n\nmodule.exports = separateParenGrousp;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const integerPart = number.toFixed(0);\n  const decimalPart = number.toString().substr(integerPart.length, number.toString().length - integerPart.length);\n  return decimalPart;\n};\n\n/* Given a number, and a string representing a currency, return the currency\n  value of the number.\n  \n  >>> currencyValue(100.0, 'USD')\n  $100.00\n  >>> currencyValue(100.0, 'CAD')\n  $100.00\n  >>> currencyValue(100.0, 'CNY')\n  $100.00\n  >>> currencyValue(100.0, 'JPY')\n  $100.00\n  >>> currencyValue(100.0, 'KPW')\n  $100.00\n  >>> currencyValue(100.0, 'KZT')\n  $100.00\n  >>> currencyValue(100.0, 'RUB')\n  $100.00\n  >>> currencyValue(100.0, 'RUR')\n  $100.00\n  >>> currencyValue(100.0, 'THB')\n  $100.00\n  >>> currencyValue(100.0, 'TWD')\n  $100.00\n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KRW')\n  $100.00\n  \n  >>> currencyValue(100.0, 'INR')\n  $100.00\n  \n  >>> currencyValue(100.0, 'GBP')\n  £100.00\n  \n  >>> currencyValue(100.0, 'USD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CAD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CNY')\n  $100.00\n  \n  >>> currencyValue(100.0, 'JPY')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KPW')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KZT')\n  $100.00\n  \n  >>> currencyValue(100.0, 'RUB')\n  $100.00\n  \n  >>> currencyValue(100.0, 'RUR')\n  $100.00\n  \n  >>> currencyValue(100.0, 'THB')\n  $100.00\n  \n  >>> currencyValue(100.0, 'TWD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  \n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KRW')\n  $100.00\n  \n  >>> currencyValue(100.0, 'INR')\n  $100.00\n  \n  >>> currencyValue(100.0, 'GBP')\n  £100.00\n  \n  >>> currencyValue(100.0, 'USD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CAD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CNY')\n  $100.00\n  \n  >>> currencyValue(100.0, 'JPY')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KPW')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KZT')\n  $100.00\n  \n  >>> currencyValue(100.0, 'RUB')\n  $100.00\n  \n  >>> currencyValue(100.0, 'RUR')\n  $100.00\n  \n  >>> currencyValue(100.0, 'THB')\n  $100.00\n  \n  >>> currencyValue(100.0, 'TWD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  \n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KRW')\n  $100.00\n  \n  >>> currencyValue(100.0, 'INR')\n  $100.00\n  \n  >>> currencyValue(100.0, 'GBP')\n  £100.00\n  \n  >>> currencyValue(100.0, 'USD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CAD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CNY')\n  $100.00\n  \n  >>> currencyValue(100.0, 'JPY')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KPW')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KZT')\n  $100.00\n  \n  >>> currencyValue(100.0, 'RUB')\n  $100.00\n  \n  >>> currencyValue(100.0, 'RUR')\n  $100.00\n  \n  >>> currencyValue(100.0, 'THB')\n  $100.00\n  \n  >>> currencyValue(100.0, 'TWD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  \n  >>> currencyValue(100.0, 'XXX')\n  $100.00\n  \n  >>> currencyValue(100.0, 'KRW')\n  $100.00\n  \n  >>> currencyValue(100.0, 'INR')\n  $100.00\n  \n  >>> currencyValue(100.0, 'GBP')\n  £100.00\n  \n  >>> currencyValue(100.0, 'USD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CAD')\n  $100.00\n  \n  >>> currencyValue(100.0, 'CNY')\n  $100.00\n  \n  >>> currencyValue(100.0, 'JPY"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const [delta, operation, isOperation] = operations;\n  const [deltaMinus, operationMinus, isOperationMinus] = operations;\n  const [deltaPlus, operationPlus, isOperationPlus] = operations;\n  return [\n    deltaMinus < 0,\n    deltaPlus < 0,\n    delta < 0,\n    operationMinus < 0,\n    operation < 0,\n    operationPlus < 0,\n    operation > 0,\n  ].reduce((prev, [delta, deltaMinus, deltaPlus, operationMinus, operation, operationPlus, isOperationMinus, isOperation, isOperationPlus, isOperationMinus, isOperationPlus]) => {\n    if (prev) {\n      return prev;\n    }\n    if (isOperationMinus) {\n      return [deltaMinus < 0, deltaMinus < 0, deltaMinus < 0, deltaMinus < 0, deltaMinus < 0, deltaMinus < 0, deltaMinus < 0, deltaMinus < 0, deltaMinus < 0, deltaMinus < 0].indexOf(delta)!== -1;\n    }\n    if (isOperation) {\n      return [delta < 0, delta < 0, delta < 0, delta < 0, delta < 0, delta < 0, delta < 0, delta < 0, delta < 0, delta < 0].indexOf(delta)!== -1;\n    }\n    if (isOperationPlus) {\n      return [deltaPlus < 0, deltaPlus < 0, deltaPlus < 0, deltaPlus < 0, deltaPlus < 0, deltaPlus < 0, deltaPlus < 0, deltaPlus < 0, deltaPlus < 0, deltaPlus < 0].indexOf(delta)!== -1;\n    }\n    return false;\n  }, false);\n};\n\nexport default belowZeor;\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  return (numbers.length > 0)?\n    Math.abs(\n      numbers.reduce((sum, x) => sum + x) / numbers.length - Math.mean(numbers)\n    ) : 0;\n};\n\n// Export the function\nexport default meanAbsoltueDeviation;\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let output = [];\n  let isNext = false;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (!isNext) {\n      output.push(numbers[i]);\n    } else {\n      output.push(numbers[i] + delimeter);\n    }\n\n    isNext =!isNext;\n  }\n\n  return output;\n};\n\n/**\n  * Check if the list is empty.\n  * @param {array} numbers List to be tested.\n  * @returns {boolean} True if the list is empty, false otherwise.\n  * @example\n  *\n  * isEmpty([1, 2, 3])\n  * // => false\n  *\n  * isEmpty([])\n  * // => true\n  */\nconst isEmpty = (numbers) => {\n  return numbers.length === 0;\n};\n\n/**\n  * Check if the list is not empty.\n  * @param {array} numbers List to be tested.\n  * @returns {boolean} True if the list is not empty, false otherwise.\n  * @example\n  *\n  * isNotEmpty([1, 2, 3])\n  * // => true\n  *\n  * isNotEmpty([])\n  * // => false\n  */\nconst isNotEmpty = (numbers) => {\n  return!isEmpty(numbers);\n};\n\n/**\n  * Check if the list is empty or not.\n  * @param {array} numbers List to be tested.\n  * @returns {boolean} True if the list is empty or not, false otherwise.\n  * @example\n  *\n  * isEmptyOrNot([1, 2, 3])\n  * // => true\n  *\n  * isEmptyOrNot([])\n  * // => false\n  */\nconst isEmptyOrNot = (numbers) => {\n  return isEmpty(numbers) || isNotEmpty(numbers);\n};\n\n/**\n  * Check if the list is empty or not.\n  * @param {array} numbers List to be tested.\n  * @returns {boolean} True if the list is not empty or not, false otherwise.\n  * @example\n  *\n  * isNotEmptyOrNot([1, 2, 3])\n  * // => false\n  *\n  * isNotEmptyOrNot([])\n  * // => true\n  */\nconst isNotEmptyOrNot = (numbers) => {\n  return!isEmpty(numbers) || isNotEmpty(numbers);\n};\n\n/**\n  * Check if the list is not empty and not empty.\n  * @param {array} numbers List to be tested.\n  * @returns {boolean} True if the list is not empty and not empty, false otherwise.\n  * @example\n  *\n  * isNotEmptyAndNotEmpty([1, 2, 3])\n  * // => true\n  *\n  * isNotEmptyAndNotEmpty([])\n  * // => false\n  */\nconst isNotEmptyAndNotEmpty = (numbers) => {\n  return isNotEmpty(numbers) && isNotEmpty(numbers);\n};\n\nmodule.exports = {\n  interpserse,\n  isEmpty,\n  isNotEmpty,\n  isEmptyOrNot,\n  isNotEmptyOrNot,\n  isNotEmptyAndNotEmpty,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  const stack = []\n  const curr_level = 0\n  const depth = 0\n  let is_group = false\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (is_group) {\n        stack.push(curr_level)\n        is_group = false\n      }\n      curr_level++\n    }\n    if (paren_string[i] === ')') {\n      curr_level--\n      if (stack.length > 0) {\n        depth = stack.pop()\n      }\n    }\n    if (paren_string[i] === '(') {\n      is_group = true\n    }\n  }\n  if (stack.length > 0) {\n    depth = stack.pop()\n  }\n  return depth\n}\n\n/*\n  Input to this function is a string representing multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParensWithLimit = (paren_string, limit) => {\n  const stack = []\n  const curr_level = 0\n  const depth = 0\n  let is_group = false\n  for (let i = 0; i < paren_string.length; i++) {\n    if (paren_string[i] === '(') {\n      if (is_group) {\n        stack.push(curr_level)\n        is_group = false\n      }\n      curr_level++\n    }\n    if (paren_string[i] === ')') {\n      curr_level--\n      if (stack.length > 0) {\n        depth = stack.pop()\n      }\n    }\n    if (paren_string[i] === '(') {\n      is_group = true\n    }\n  }\n  if (stack.length > 0) {\n    depth = stack.pop()\n  }\n  if (depth > limit) {\n    return 0\n  }\n  return depth\n}\n\nconst parseNetsedParensTest = (string) => {\n  const stack = []\n  const curr_level = 0\n  const depth = 0\n  let is_group = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      if (is_group) {\n        stack.push(curr_level)\n        is_group = false\n      }\n      curr_level++\n    }\n    if (string[i] === ')') {\n      curr_level--\n      if (stack.length > 0) {\n        depth = stack.pop()\n      }\n    }\n    if (string[i] === '(') {\n      is_group = true\n    }\n  }\n  if (stack.length > 0) {\n    depth = stack.pop()\n  }\n  return depth\n}\n\nconst parseNetsedParensLimitTest = (string, limit) => {\n  const stack = []\n  const curr_level = 0\n  const depth = 0\n  let is_group = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      if (is_group) {\n        stack.push(curr_level)\n        is_group = false\n      }\n      curr_level++\n    }\n    if (string[i] === ')') {\n      curr_level--\n      if (stack.length > 0) {\n        depth = stack.pop()\n      }\n    }\n    if (string[i] === '(') {\n      is_group = true\n    }\n  }\n  if (stack.length > 0) {\n    depth = stack.pop()\n  }\n  if (depth > limit) {\n    return 0\n  }\n  return depth\n}\n\nconst parseNetsedParensTest2 = (string) => {\n  const stack = []\n  const curr_level = 0\n  const depth = 0\n  let is_group = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      if (is_group) {\n        stack.push(curr_level)\n        is_group = false\n      }\n      curr_level++\n    }\n    if (string[i] === ')') {\n      curr_level--\n      if (stack.length > 0) {\n        depth = stack.pop()\n      }\n    }\n    if (string[i] === '(') {\n      is_group = true\n    }\n  }\n  if (stack.length > 0) {\n    depth = stack.pop()\n  }\n  return depth\n}\n\nconst parseNetsedParensLimitTest2 = (string, limit) => {\n  const stack = []\n  const curr_level = 0\n  const depth = 0\n  let is_group = false\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] === '(') {\n      if (is_group) {\n        stack.push(curr_level)\n        is_group = false\n      }\n      curr_level++\n    }\n    if (string[i] === ')') {\n      curr_level--\n      if (stack.length > 0) {\n        depth = stack.pop()\n      }\n    }\n    if (string[i] === '(') {\n      is_group = true\n    }\n  }\n  if (stack.length > 0) {\n    depth"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        let substr = strings[i].toLowerCase();\n        if (substr.indexOf(substring.toLowerCase()) >= 0) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings with the given regex\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {RegExp} regex regular expression\n  * @returns {Array} Array of strings that match the regular expression\n  */\nconst filteBryRegex = (strings, regex) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (regex.test(strings[i])) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings with the given regex\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {RegExp} regex regular expression\n  * @returns {Array} Array of strings that match the regular expression\n  */\nconst filteBryRegexCaseInsensitive = (strings, regex) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (regex.test(strings[i].toLowerCase())) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings that are in the given array\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {Array} list Array of strings that should be in the output\n  * @returns {Array} Array of strings that are in the list\n  */\nconst filteBryListContains = (strings, list) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (list.indexOf(strings[i]) >= 0) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings that are in the given array\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {Array} list Array of strings that should be in the output\n  * @returns {Array} Array of strings that are in the list\n  */\nconst filteBryListContainsCaseInsensitive = (strings, list) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (list.indexOf(strings[i].toLowerCase()) >= 0) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings with the given regex\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {RegExp} regex regular expression\n  * @returns {Array} Array of strings that match the regular expression\n  */\nconst filteBryRegexContains = (strings, regex) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (regex.test(strings[i])) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings with the given regex\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {RegExp} regex regular expression\n  * @returns {Array} Array of strings that match the regular expression\n  */\nconst filteBryRegexContainsCaseInsensitive = (strings, regex) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (regex.test(strings[i].toLowerCase())) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings with the given regex\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {RegExp} regex regular expression\n  * @returns {Array} Array of strings that match the regular expression\n  */\nconst filteBryRegexContainsAndSubstring = (strings, regex) => {\n    const returnArray = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (regex.test(strings[i]) && strings[i].toLowerCase().indexOf(regex.toString().toLowerCase()) >= 0) {\n            returnArray.push(strings[i]);\n        }\n    }\n    return returnArray;\n};\n\n/*\n  * Filter an input array of strings with the given regex\n  *\n  * NOTE: If you are using RegExp, make sure to escape special characters!\n  *\n  * @param {Array} strings Array of strings\n  * @param {RegExp} regex regular expression\n  * @returns {Array} Array of strings that match the regular expression\n  */\nconst filteBryRegexContainsAndSubstringCaseInsensitive = (strings, regex) => {\n    const returnArray = [];\n    for ("}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  const sum = 0;\n  const product = 1;\n  numbers.forEach(number => {\n    sum += number;\n    product *= number;\n  });\n  return [sum, product];\n};\n\n/*\n  For a given list of non-negative integers, find the largest subset of\n  integers which sum to 0.\n  >>> sumProduct([1, -1, 1, 2, -1, -4])\n  [0, 1, -1, 1, 2, -1]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5])\n  [0, 1, -1, 1, 2, -1]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6])\n  [0, 1, -1, 1, 2, -1]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -1, 1, 2, -1, -4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  [0, 1, -1, 1, 2, -1, 5, 14]\n  >>> sumProduct([1, -"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let index = 0;\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      max = numbers[i];\n      index = i;\n    }\n  }\n  let rollingMax = [];\n  for (let i = 0; i < index; i++) {\n    rollingMax.push(numbers[i]);\n  }\n  return rollingMax;\n};\n\nconsole.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const start = string.slice(0, -1);\n  const end = string.slice(-1);\n  const prefix = string.slice(0, -1).reverse();\n  const postfix = end.split('').reverse().join('');\n\n  /* Check if the string is a palindrome */\n  if (isPalindrome(string)) {\n    return string;\n  }\n\n  /* Find the longest postfix of string that is a palindrome */\n  while (isPalindrome(postfix)) {\n    /* Append to the end of the string the postfix reversed */\n    string = prefix + postfix;\n    /* Find the longest postfix that is a palindrome */\n    postfix = postfix.slice(0, -1).reverse();\n  }\n  return string;\n}\n\n/* Testing */\nconsole.log(makePalindrome('cat'));\nconsole.log(makePalindrome('cat'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cat'));\nconsole.log(makePalindrome('cata'));\nconsole.log(makePalindrome('cat'));\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n    let str = ''\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === '1' && b[i] === '1') {\n            str += '1'\n        } else {\n            str += '0'\n        }\n    }\n    return str\n}\n\n/*\n  Input: two numbers a and b\n  Return the largest number that can be obtained by adding 1 to a number and b\n  or subtracting 1 from a number and b\n  >>> strMax(7, 4)\n  9\n  >>> strMax(8, 5)\n  11\n  >>> strMax(9, 6)\n  12\n  >>> strMax(10, 7)\n  12\n  >>> strMax(10, 8)\n  12\n  >>> strMax(11, 9)\n  12\n  >>> strMax(11, 10)\n  12\n  >>> strMax(12, 11)\n  12\n  >>> strMax(13, 12)\n  13\n  >>> strMax(14, 13)\n  14\n  >>> strMax(15, 14)\n  15\n  >>> strMax(16, 15)\n  16\n  >>> strMax(17, 16)\n  17\n  >>> strMax(18, 17)\n  18\n  >>> strMax(19, 18)\n  19\n  >>> strMax(20, 19)\n  20\n  >>> strMax(21, 20)\n  21\n  >>> strMax(22, 21)\n  22\n  >>> strMax(23, 22)\n  23\n  >>> strMax(24, 23)\n  24\n  >>> strMax(25, 24)\n  25\n  >>> strMax(26, 25)\n  26\n  >>> strMax(27, 26)\n  27\n  >>> strMax(28, 27)\n  28\n  >>> strMax(29, 28)\n  29\n  >>> strMax(30, 29)\n  30\n  >>> strMax(31, 30)\n  31\n  >>> strMax(32, 31)\n  32\n  >>> strMax(33, 32)\n  33\n  >>> strMax(34, 33)\n  34\n  >>> strMax(35, 34)\n  35\n  >>> strMax(36, 35)\n  36\n  >>> strMax(37, 36)\n  37\n  >>> strMax(38, 37)\n  38\n  >>> strMax(39, 38)\n  39\n  >>> strMax(40, 39)\n  40\n  >>> strMax(41, 40)\n  41\n  >>> strMax(42, 41)\n  42\n  >>> strMax(43, 42)\n  43\n  >>> strMax(44, 43)\n  44\n  >>> strMax(45, 44)\n  45\n  >>> strMax(46, 45)\n  46\n  >>> strMax(47, 46)\n  47\n  >>> strMax(48, 47)\n  48\n  >>> strMax(49, 48)\n  49\n  >>> strMax(50, 49)\n  50\n  >>> strMax(51, 50)\n  51\n  >>> strMax(52, 51)\n  52\n  >>> strMax(53, 52)\n  53\n  >>> strMax(54, 53)\n  54\n  >>> strMax(55, 54)\n  55\n  >>> strMax(56, 55)\n  56\n  >>> strMax(57, 56)\n  57\n  >>> strMax(58, 57)\n  58\n  >>> strMax(59, 58)\n  59\n  >>> strMax(60, 59)\n  60\n  >>> strMax(61, 60)\n  61\n  >>> strMax(62, 61)\n  62\n  >>> strMax(63, 62)\n  63\n  >>> strMax(64, 63)\n  64\n  >>> strMax(65, 64)\n  65\n  >>> strMax(66, 65)\n  66\n  >>> strMax(67, 66)\n  67\n  >>> strMax(68, 67)\n  68\n  >>> strMax(69, 68)\n  69\n  >>> strMax(70, 69)\n  70\n  >>> strMax(71, 70)\n  71\n  >>> strMax(72, 71)\n  72\n  >>> strMax(73, 72)\n  73\n  >>> strMax(74, 73)\n  74\n  >>> strMax(75, 74)\n  75\n  >>> strMax(76, 75)\n  76\n  >>> strMax(77, 76)\n  77\n  >>> strMax(78, 77)\n  78\n  >>> strMax(79, 78)\n  79\n  >>> strMax(80, 79)\n  80\n  >>> strMax(81, 80)\n  81\n  >>> strMax(82, 81)\n  82\n  >>> strMax(83, 82)\n  83\n  >>> strMax(84, 83)\n  84\n  >>> strMax(85, 84)\n  85\n  >>> strMax(86, 85)\n  86\n  >>> strMax(87, 86)\n  87\n  >>> strMax(88, 87)\n  88\n  >>> strMax(89, 88)\n  89\n  >>> strMax(90, 89)\n  90\n  >>> strMax(91, 90)\n  91\n  >>> strMax(92, 91)\n  92\n  >>> strMax(93, 92)\n  93\n  >>> strMax(94, 93)\n  94\n  >>> strMax(95, 94)\n  95\n  >>> strMax(96, 95)\n  96\n  >>> strMax(97, 96)\n  97\n  >>> strMax(98, 97)\n  98\n  >>> strMax(99, 98)\n  99\n  >>> strMax(100, 99)\n  100\n  >>> strMax(101, 100)\n  101\n  >>> strMax(102, 101)\n  102\n  >>> strMax(103, 102)\n  103\n  >>> strMax(104, 103)\n  104\n  >>> strMax(105, 104)\n  105\n  >>> strMax(106, 105)\n  106\n  >>> strMax(107, 106)\n  107\n  >>> strMax(108, 107"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  const longest = (a, b) => a.length > b.length? a : b;\n  const map = (strings) => strings.reduce((acc, string) => [...acc, longest(string, acc[0])], []);\n  return map(strings);\n};\n\nexport default longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n    if (b === 0) {\n        return a;\n    }\n    return rgeatestCommonDivisor(b, a % b);\n};\n\nexport default rgeatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const words = string.split(' ')\n  const prefixes = []\n\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words[i].length; j++) {\n      prefixes.push(words[i].substr(0, j + 1))\n    }\n  }\n\n  return prefixes\n}\n\n/* Return list of all suffixes from longest to shortest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const words = string.split(' ')\n  const suffixes = []\n\n  for (let i = 0; i < words.length; i++) {\n    for (let j = words[i].length - 1; j >= 0; j--) {\n      suffixes.push(words[i].substr(j, words[i].length))\n    }\n  }\n\n  return suffixes\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bac', 'bca', 'cab', 'cba', 'acb', 'acd', 'adb', 'bdb', 'bda', 'adc', 'bcc', 'bcd', 'ccb', 'ccd', 'cdc', 'cdb']\n  */\nconst allPermutations = (string) => {\n  const words = string.split(' ')\n  const permutations = []\n\n  for (let i = 0; i < words.length; i++) {\n    for (let j = 0; j < words.length; j++) {\n      permutations.push(words[i] + words[j])\n    }\n  }\n\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bac', 'bca', 'cab', 'cba', 'acb', 'acd', 'adb', 'bdb', 'bda', 'adc', 'bcc', 'bcd', 'ccb', 'ccd', 'cdc', 'cdb']\n  */\nconst permutations = (string) => {\n  const words = string.split(' ')\n  const permutations = []\n\n  for (let i = 0; i < words.length; i++) {\n    for (let j = i + 1; j < words.length; j++) {\n      permutations.push(words[i] + words[j])\n    }\n  }\n\n  return permutations\n}\n\n/* Return list of all permutations of the input string\n  >>> allPermutations('abc')\n  ['abc', 'bac', 'bca', 'cab', 'cba', 'acb', 'acd', 'adb', 'bdb', 'bda', 'adc', 'bcc', 'bcd', 'ccb', 'ccd', 'cdc', 'cdb']\n  */\nconst permutation = (string) => {\n  const words = string.split(' ')\n  const permutations = []\n\n  for (let i = 0; i < words.length; i++) {\n    for (let j = i + 1; j < words.length; j++) {\n      permutations.push(words[i] + words[j])\n    }\n  }\n\n  return permutations\n}\n\nexport default {\n  allPrefixes,\n  allSuffixes,\n  allPermutations,\n  permutation\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = Array(n + 1).join(' ');\n  return result.split('').map(x => x.toString());\n};\n\nexport default stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  return new Promise((resolve, reject) => {\n    let characterCount = 0;\n    let uniqueCharacters = {};\n    let char;\n    let characterOccurrences = [];\n\n    string.split('').forEach((char) => {\n      characterOccurrences.push(char);\n    });\n\n    characterOccurrences.forEach((char) => {\n      if (uniqueCharacters[char]) {\n        uniqueCharacters[char]++;\n      } else {\n        uniqueCharacters[char] = 1;\n      }\n    });\n\n    for (let key in uniqueCharacters) {\n      if (uniqueCharacters.hasOwnProperty(key)) {\n        characterCount++;\n      }\n    }\n\n    resolve(characterCount);\n  });\n};\n\n/*\n  Given a string, return the number of characters in the string\n  >>> countCharacters('Jerry')\n  4\n  >>> countCharacters('abcdefghijklmnopqrstuvwxyz')\n  26\n  >>> countCharacters('')\n  0\n  */\nconst countCharacters = (string) => {\n  return new Promise((resolve, reject) => {\n    let characterCount = 0;\n    let char;\n    let charOccurrences = [];\n\n    string.split('').forEach((char) => {\n      charOccurrences.push(char);\n    });\n\n    charOccurrences.forEach((char) => {\n      characterCount++;\n    });\n\n    resolve(characterCount);\n  });\n};\n\n/*\n  Given a string, return a list of all unique characters\n  >>> uniqueCharacters('Jerry')\n  ['J', 'y', 'e', 'r', 'H', 'y', 'e', 't', 'r', 'Y', 'E', 'a', 'r','s', 'o', 'r', 'd', 'p', 'e', 't', 'w', 'o', 'r', 'z', 'X', 'Y', 'Z', 'M', 'n', 'O', 'p', 'C','s', 'p', 'd', 'l', 'c', 'k', 'e', 'v', 'e', 'e', 'n', 'j', 'f', 'F', 'r', 'W', 'i', 'd', 'b', 'i', 'l','s', 'z', '0', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z','']\n  >>> uniqueCharacters('abcdefghijklmnopqrstuvwxyz')\n  ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n  >>> uniqueCharacters('')\n  []\n  */\nconst uniqueCharacters = (string) => {\n  return new Promise((resolve, reject) => {\n    let characterCount = 0;\n    let char;\n    let characterOccurrences = [];\n\n    string.split('').forEach((char) => {\n      characterOccurrences.push(char);\n    });\n\n    characterOccurrences.forEach((char) => {\n      characterCount++;\n    });\n\n    resolve(characterOccurrences);\n  });\n};\n\nmodule.exports = {\n  countDistinctCharacters,\n  countCharacters,\n  uniqueCharacters\n};\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  // Create a string that contains the musical notes\n  const notes = music_string.split(' ')\n\n  // Create a list of beats\n  const beats = []\n\n  // Add the beats of the string to the list\n  for (let i = 0; i < notes.length; i++) {\n    // The beat of the note\n    const beat = parseBeat(notes[i])\n\n    // Add the beat to the list\n    beats.push(beat)\n  }\n\n  // Return the list of beats\n  return beats\n}\n\n/* Input to this function is a string representing a beat in the special ASCII format.\n  Your task is to parse this string and return the time in milliseconds corresponding to the beat.\n  Time is measured by the number of ticks that have passed in the current minute, including the current\n  minute, and the number of ticks that have passed in the current half-minute, plus the current half-minute.\n  */\nconst parseBeat = (beat_string) => {\n  // Create a string that contains the beat\n  const beat = beat_string.split('|')\n\n  // Create a list of ticks\n  const ticks = []\n\n  // Add the ticks of the beat to the list\n  for (let i = 0; i < beat.length; i++) {\n    // The tick of the beat\n    const tick = parseTick(beat[i])\n\n    // Add the tick to the list\n    ticks.push(tick)\n  }\n\n  // Return the list of ticks\n  return ticks\n}\n\n/* Input to this function is a string representing a tick in the special ASCII format.\n  Your task is to parse this string and return the time in milliseconds corresponding to the tick.\n  Time is measured by the number of ticks that have passed in the current minute, including the current\n  minute, and the number of ticks that have passed in the current half-minute, plus the current half-minute.\n  */\nconst parseTick = (tick_string) => {\n  // Create a string that contains the tick\n  const tick = tick_string.split(' ')\n\n  // Create a list of ticks\n  const ticks = []\n\n  // Add the ticks of the tick to the list\n  for (let i = 0; i < tick.length; i++) {\n    // The tick of the tick\n    const tick = parseTick(tick[i])\n\n    // Add the tick to the list\n    ticks.push(tick)\n  }\n\n  // Return the list of ticks\n  return ticks\n}\n\n/* This function takes a string representing a number and converts it to a number in base 10.\n  */\nconst numberToBase10 = (num) => {\n  // Convert the number to a string\n  const num_string = num.toString()\n\n  // Convert the number string to an array of characters\n  const num_char = num_string.split('')\n\n  // Create an array of integers\n  const num_int = []\n\n  // Convert each character in the number string to an integer\n  for (let i = 0; i < num_char.length; i++) {\n    // Add the character to the number array\n    num_int.push(num_char[i] - 48)\n  }\n\n  // Return the number\n  return num_int\n}\n\n/* This function takes a string representing a note and returns the string corresponding to its duration.\n  Examples:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n  */\nconst durationToString = (duration) => {\n  // Create a string that contains the duration\n  const duration_string = duration.toString()\n\n  // Convert the duration to an array of characters\n  const duration_char = duration_string.split('')\n\n  // Create a list of integers\n  const duration_int = []\n\n  // Convert each character in the duration string to an integer\n  for (let i = 0; i < duration_char.length; i++) {\n    // Add the character to the number array\n    duration_int.push(duration_char[i] - 48)\n  }\n\n  // Return the string corresponding to the duration\n  return duration_int\n}\n\n/* This function takes a string representing a beat and returns the string corresponding to its duration.\n  Examples:\n  'o o|.| o| o|.|.|.|.| o o' - whole note, lasts four beats\n  'o| o|.| o| o|.|.|.|.| o o' - half note, lasts two beats\n  'o|.| o|.|.|.|.|.| o| o|' - quater note, lasts one beat\n  */\nconst beatToString = (beat) => {\n  // Create a string that contains the beat\n  const beat_string = beat.toString()\n\n  // Convert the beat string to an array of characters\n  const beat_char = beat_string.split(' ')\n\n  // Create a list of integers\n  const beat_int = []\n\n  // Convert each character in the beat string to an integer\n  for (let i = 0; i < beat_char.length; i++) {\n    // Add the character to the number array\n    beat_int.push(beat_char[i] - 48)\n  }\n\n  // Return the beat string\n  return beat_int\n}\n\n/* This function takes a string representing a tick and returns the string corresponding to its duration.\n  Examples:\n  'o o|.| o| o|.|.|.|.| o o' - whole note, lasts four beats\n  'o| o|.| o| o|.|.|.|.| o o' - half note, lasts two beats\n  'o|.| o|.|.|.|.|.| o| o|' - quater note, lasts one beat\n  */\nconst tickToString = (tick) => {\n  // Create a string that"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  const count = 0;\n  const originalString = string;\n  const substring = substring;\n  for (let index = 0; index < originalString.length - substring.length + 1; index++) {\n    if (originalString.indexOf(substring, index)!== -1) {\n      count++;\n    }\n  }\n  return count;\n};\n\nmodule.exports = howManyTimes;\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  return numbers.split(' ').sort().join(' ')\n}\n\n/*\n  Input:\n    '2 1 4 3 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9'\n  Explanation:\n  Sort the given array of numbers from smallest to largest.\n  The given array is guaranteed to be valid and sorted in ascending order.\n  The sort is stable and non-interfering.\n  */\nconst sort = (numbers) => {\n  const sorted = [...new Set(numbers.split(/\\s/).filter(x => x.length > 0))]\n  return sorted.sort((a, b) => a - b).join(' ')\n}\n\n/*\n  Input:\n    '1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort2 = (numbers) => {\n  return numbers\n}\n\n/*\n  Input:\n    '10 3 2 5 1 4 9 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9 10'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort3 = (numbers) => {\n  return numbers.split(/\\s/).sort((a, b) => a - b).join(' ')\n}\n\n/*\n  Input:\n    '10 3 2 5 1 4 9 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9 10'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort4 = (numbers) => {\n  return numbers.split(/\\s/).sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }).join(' ')\n}\n\n/*\n  Input:\n    '0 1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9 0'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort5 = (numbers) => {\n  return numbers.split(/\\s/).sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }).reverse().join(' ')\n}\n\n/*\n  Input:\n    '0 1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9 0'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort6 = (numbers) => {\n  return numbers.split(/\\s/).sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }).reverse().join(' ')\n}\n\n/*\n  Input:\n    '0 1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9 0'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort7 = (numbers) => {\n  return numbers.split(/\\s/).sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }).join(' ')\n}\n\n/*\n  Input:\n    '0 1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9 0'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort8 = (numbers) => {\n  return numbers.split(/\\s/).sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }).reverse().join(' ')\n}\n\n/*\n  Input:\n    '0 1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9 0'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort9 = (numbers) => {\n  return numbers.split(/\\s/).sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  }).reverse().join(' ')\n}\n\n/*\n  Input:\n    '1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort10 = (numbers) => {\n  return numbers\n}\n\n/*\n  Input:\n    '1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort11 = (numbers) => {\n  return numbers\n}\n\n/*\n  Input:\n    '1 2 3 4 5 6 7 8 9'\n  Output:\n    '1 2 3 4 5 6 7 8 9'\n  Explanation:\n  The given array is already sorted in ascending order.\n  No need to sort again.\n  */\nconst sort12 = (numbers) => {\n  return numbers\n}\n\n/*\n  Input:\n    '1 2 3 4"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  let min_diff = Infinity\n  let min_diff_idx = -1\n  let min_diff_val = Infinity\n  let closest_idx = -1\n  let closest_val = Infinity\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i + 1] - numbers[i])\n    if (diff < min_diff) {\n      min_diff = diff\n      min_diff_idx = i\n      min_diff_val = numbers[i + 1]\n      closest_idx = i\n      closest_val = numbers[i]\n    }\n  }\n  return [min_diff_idx, closest_idx, min_diff_val, closest_val]\n}\n\n/*\n  * From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  *\n  * @param numbers {Array} - An array of numbers.\n  * @returns {Array} - An array of numbers, in the same order as the input array.\n  *\n  * @example\n  * findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  * // [2.0, 2.2]\n  *\n  * findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  * // [2.0, 2.0]\n  */\nconst findClosestElementsInOrder = (numbers) => {\n  let min_diff = Infinity\n  let min_diff_idx = -1\n  let min_diff_val = Infinity\n  let closest_idx = -1\n  let closest_val = Infinity\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i + 1] - numbers[i])\n    if (diff < min_diff) {\n      min_diff = diff\n      min_diff_idx = i\n      min_diff_val = numbers[i + 1]\n      closest_idx = i\n      closest_val = numbers[i]\n    }\n  }\n  return [min_diff_idx, closest_idx, min_diff_val, closest_val]\n}\n\nconst findClosestElementsInOrderWithBounds = (numbers) => {\n  let min_diff = Infinity\n  let min_diff_idx = -1\n  let min_diff_val = Infinity\n  let closest_idx = -1\n  let closest_val = Infinity\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i + 1] - numbers[i])\n    if (diff < min_diff) {\n      min_diff = diff\n      min_diff_idx = i\n      min_diff_val = numbers[i + 1]\n      closest_idx = i\n      closest_val = numbers[i]\n    }\n  }\n  return [min_diff_idx, closest_idx, min_diff_val, closest_val]\n}\n\nconst findClosestElementsInOrderWithBoundsInOrder = (numbers) => {\n  let min_diff = Infinity\n  let min_diff_idx = -1\n  let min_diff_val = Infinity\n  let closest_idx = -1\n  let closest_val = Infinity\n  for (let i = 0; i < numbers.length - 1; i++) {\n    let diff = Math.abs(numbers[i + 1] - numbers[i])\n    if (diff < min_diff) {\n      min_diff = diff\n      min_diff_idx = i\n      min_diff_val = numbers[i + 1]\n      closest_idx = i\n      closest_val = numbers[i]\n    }\n  }\n  return [min_diff_idx, closest_idx, min_diff_val, closest_val]\n}\n\nconst main = () => {\n  let numbers = [1.0, 2.0, 3.0, 4.0, 5.0, 2.2]\n  console.log(findClosestElements(numbers))\n  console.log(findClosestElementsInOrder(numbers))\n  console.log(findClosestElementsInOrderWithBounds(numbers))\n  console.log(findClosestElementsInOrderWithBoundsInOrder(numbers))\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] / (i + 1))\n  }\n  return newNumbers\n}\n\n/* Given a list of numbers, apply a logarithmic transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> logscaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.1, 0.2, 0.3, 0.4]\n  */\nconst logscaleTonUit = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.log(numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Given a list of numbers, apply a logarithmic transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> logscaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.1, 0.2, 0.3, 0.4]\n  */\nconst inverseLogscaleTonUit = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.exp(numbers[i]))\n  }\n  return newNumbers\n}\n\n/* Given a list of numbers, apply a logarithmic transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> logscaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.1, 0.2, 0.3, 0.4]\n  */\nconst logscaleToLinear = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(numbers[i] / Math.log(numbers[i] + 1))\n  }\n  return newNumbers\n}\n\n/* Given a list of numbers, apply a logarithmic transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> logscaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.1, 0.2, 0.3, 0.4]\n  */\nconst inverseLinearToLogscale = (numbers) => {\n  const newNumbers = []\n  for (let i = 0; i < numbers.length; i++) {\n    newNumbers.push(Math.exp(numbers[i]))\n  }\n  return newNumbers\n}\n\nexport {\n  rescaleTonUit,\n  logscaleTonUit,\n  inverseLogscaleTonUit,\n  logscaleToLinear,\n  inverseLinearToLogscale\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  let result = []\n  for (let i in values) {\n    if (typeof values[i] === 'number') {\n      result.push(values[i])\n    }\n  }\n  return result\n}\n\n/*\n  * @name filetr\n  * @function\n  * @param {String} path to file\n  * @param {Object} filter for given file\n  * @return {Object} Filtered file object\n  * @description Filters given file by specified properties\n  * @example\n  *\n  * filetr('file.txt', {size: 1})\n  *   => {\n  *   size: 1,\n  *   name: 'file.txt'\n  * }\n  *\n  * filetr('file.txt', {size: {gt: 1}}, {name: 'file.txt'})\n  *   => {\n  *   size: {gt: 1},\n  *   name: 'file.txt'\n  * }\n  */\nconst filetr = (path, filter, options) => {\n  options = options || {}\n  let file = fs.readFileSync(path, 'utf8')\n  let result = {}\n  let key\n  let value\n\n  for (let i in filter) {\n    key = i\n    value = filter[i]\n\n    if (value === null) {\n      continue\n    }\n\n    if (value === undefined) {\n      if (typeof file[key]!== 'undefined') {\n        result[key] = file[key]\n      }\n    } else if (typeof value === 'object') {\n      if (typeof file[key] === 'undefined') {\n        result[key] = {}\n      }\n      result[key] = filetr(path, value, options)\n    } else {\n      if (typeof file[key] === 'undefined') {\n        result[key] = value\n      } else if (typeof file[key] === 'object') {\n        result[key] = filetr(path, {\n          [key]: value\n        }, options)\n      } else {\n        result[key] = value === file[key]? file[key] : value\n      }\n    }\n  }\n\n  return result\n}\n\n/*\n  * @name readFile\n  * @function\n  * @param {String} path to file\n  * @return {Object} file object\n  * @description Reads file by specified path\n  * @example\n  *\n  * readFile('file.txt')\n  *   => {\n  *   size: {gt: 1},\n  *   name: 'file.txt'\n  * }\n  */\nconst readFile = (path) => {\n  let file = fs.readFileSync(path, 'utf8')\n  return filetr(path, {\n    size: {gt: 1},\n    name: path\n  })\n}\n\nmodule.exports = {\n  filetr,\n  readFile,\n  filetrItnegers\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length\n}\n\n/**\n  * Return index of given string\n  *\n  * Example:\n  *\n  * ```javascript\n  * const str = 'abc'\n  *\n  * // Return index of 'a' in the string\n  * indexOf(str, 'a')\n  * // -> 0\n  *\n  * // Return index of 'c' in the string\n  * indexOf(str, 'c')\n  * // -> 2\n  *\n  * // Return -1 if 'a' not found in the string\n  * indexOf(str, 'd')\n  * // -> -1\n  * ```\n  *\n  * @param {string} string\n  * @param {string} search\n  * @return {number}\n  */\nconst indexOf = (string, search) => {\n  const searchLength = strlen(search)\n  const stringLength = strlen(string)\n  if (searchLength === 0) {\n    return 0\n  }\n  const searchIndex = string.indexOf(search)\n  if (searchIndex === -1) {\n    return -1\n  }\n  return searchIndex + 1\n}\n\n/**\n  * Return last index of given string\n  *\n  * Example:\n  *\n  * ```javascript\n  * const str = 'abc'\n  *\n  * // Return index of 'c' in the string\n  * lastIndexOf(str, 'c')\n  * // -> 2\n  *\n  * // Return -1 if 'c' not found in the string\n  * lastIndexOf(str, 'd')\n  * // -> -1\n  * ```\n  *\n  * @param {string} string\n  * @param {string} search\n  * @return {number}\n  */\nconst lastIndexOf = (string, search) => {\n  const searchLength = strlen(search)\n  const stringLength = strlen(string)\n  if (searchLength === 0) {\n    return stringLength - 1\n  }\n  const searchIndex = string.lastIndexOf(search)\n  if (searchIndex === -1) {\n    return -1\n  }\n  return searchIndex\n}\n\n/**\n  * Return the first index of given string\n  *\n  * Example:\n  *\n  * ```javascript\n  * const str = 'abc'\n  *\n  * // Return index of 'c' in the string\n  * indexOf(str, 'c')\n  * // -> 2\n  *\n  * // Return -1 if 'c' not found in the string\n  * indexOf(str, 'd')\n  * // -> -1\n  * ```\n  *\n  * @param {string} string\n  * @param {string} search\n  * @return {number}\n  */\nconst findIndex = (string, search) => {\n  const searchLength = strlen(search)\n  const stringLength = strlen(string)\n  if (searchLength === 0) {\n    return 0\n  }\n  const searchIndex = string.indexOf(search)\n  if (searchIndex === -1) {\n    return -1\n  }\n  return searchIndex\n}\n\n/**\n  * Return the last index of given string\n  *\n  * Example:\n  *\n  * ```javascript\n  * const str = 'abc'\n  *\n  * // Return index of 'c' in the string\n  * lastIndexOf(str, 'c')\n  * // -> 2\n  *\n  * // Return -1 if 'c' not found in the string\n  * lastIndexOf(str, 'd')\n  * // -> -1\n  * ```\n  *\n  * @param {string} string\n  * @param {string} search\n  * @return {number}\n  */\nconst findLastIndex = (string, search) => {\n  const searchLength = strlen(search)\n  const stringLength = strlen(string)\n  if (searchLength === 0) {\n    return stringLength - 1\n  }\n  const searchIndex = string.lastIndexOf(search)\n  if (searchIndex === -1) {\n    return -1\n  }\n  return searchIndex\n}\n\n/**\n  * Return the concatenation of given strings\n  *\n  * Example:\n  *\n  * ```javascript\n  * const str = 'abc'\n  *\n  * // Return abc\n  * concat(str, '')\n  * // -> abc\n  *\n  * // Return abcabc\n  * concat(str, 'abc')\n  * // -> abcabc\n  * ```\n  *\n  * @param {string} string\n  * @param {string}...strings\n  * @return {string}\n  */\nconst concat = (...strings) => {\n  const totalLength = strings.reduce((a, b) => strlen(a) + strlen(b), '')\n  return strings.reduce((a, b) => a + b, '')\n}\n\n/**\n  * Return the concatenation of given strings with given separator\n  *\n  * Example:\n  *\n  * ```javascript\n  * const str = 'abc'\n  *\n  * // Return abc\n  * concat(str, '')\n  * // -> abc\n  *\n  * // Return abcabc\n  * concat(str, 'abc')\n  * // -> abcabc\n  *\n  * // Return abcabc\n  * concat(str, '', 'abc')\n  * // -> abcabc\n  *\n  * // Return abcabcabc\n  * concat(str, 'abc', '', 'abc')\n  * // -> abcabcabc\n  * ```\n  *\n  * @param {string} string\n  * @param {string} separator\n  * @param {string}...strings\n  * @return {string}\n  */\nconst concatWithSeparator = (...strings) => {\n  const totalLength = strings.reduce((a, b) => strlen(a) + strlen(b) + 1, 0)\n  return strings.reduce((a, b) => a + b + separator, '')\n}\n\n/**\n  * Return the string that is the"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  const divisors = []\n\n  for (let i = 1; i < n; i++) {\n    if (n % i === 0) {\n      divisors.push(i)\n    }\n  }\n\n  return Math.max(...divisors)\n}\n\nconsole.log(largestDivisor(15))\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const arr = [];\n  const factors = [];\n  let result = [];\n  const factor = (n) => {\n    const prime = new Set(primes);\n    const i = prime.size - 1;\n    while (n > 1) {\n      const d = n % prime[i];\n      if (d === 0) {\n        n = n / prime[i];\n        arr.push(prime[i]);\n      } else {\n        arr.push(prime[i]);\n        n = n / prime[i];\n      }\n      i--;\n    }\n    return arr;\n  };\n  let factors = factor(n);\n  while (factors.length > 0) {\n    const i = arr.indexOf(factors[0]);\n    const num = arr[i];\n    if (num < 0) {\n      result.push([-num, num]);\n    } else {\n      result.push([num, num]);\n    }\n    factors = factors.filter(x => x!== num);\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  return numbers.reduce((res, number) => {\n    if (res.indexOf(number) < 0) {\n      res.push(number);\n    }\n    return res;\n  }, []);\n};\n\nmodule.exports = removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  return string.toLowerCase().replace(/\\b[a-z]/g, letter => {\n    return letter.toUpperCase()\n  }).replace(/\\b[A-Z]/g, letter => {\n    return letter.toLowerCase()\n  })\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseAgain = (string) => {\n  return string.toUpperCase().replace(/\\b[a-z]/g, letter => {\n    return letter.toLowerCase()\n  }).replace(/\\b[A-Z]/g, letter => {\n    return letter.toUpperCase()\n  })\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseAgainAgain = (string) => {\n  return string.toUpperCase().replace(/\\b[a-z]/g, letter => {\n    return letter.toUpperCase()\n  }).replace(/\\b[A-Z]/g, letter => {\n    return letter.toLowerCase()\n  })\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseAgainAgainAgain = (string) => {\n  return string.toLowerCase().replace(/\\b[a-z]/g, letter => {\n    return letter.toLowerCase()\n  }).replace(/\\b[A-Z]/g, letter => {\n    return letter.toUpperCase()\n  })\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseAgainAgainAgain = (string) => {\n  return string.toLowerCase().replace(/\\b[a-z]/g, letter => {\n    return letter.toUpperCase()\n  }).replace(/\\b[A-Z]/g, letter => {\n    return letter.toLowerCase()\n  })\n}\n\n/*\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCaseAgainAgainAgainAgain = (string) => {\n  return string.toLowerCase().replace(/\\b[a-z]/g, letter => {\n    return letter.toLowerCase()\n  }).replace(/\\b[A-Z]/g, letter => {\n    return letter.toLowerCase()\n  })\n}\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n  });\n  return result;\n};\n\n// Concatenate list of strings, concatenating all but the last\n// element with a comma.\n// e.g. ['a', 'b', 'c'] -> 'a, b, c'\n// e.g. ['a', 'b'] -> 'a, b'\n// e.g. ['a'] -> 'a'\nconst concatenateComma = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n    if (strings.length!== 1) {\n      result += ', ';\n    }\n  });\n  return result;\n};\n\n// Concatenate list of strings, concatenating all but the last\n// element with a space.\n// e.g. ['a', 'b', 'c'] -> 'a b c'\n// e.g. ['a', 'b'] -> 'a b'\n// e.g. ['a'] -> 'a'\nconst concatenateSpace = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n    if (strings.length!== 1) {\n      result +='';\n    }\n  });\n  return result;\n};\n\n// Concatenate list of strings, concatenating all but the last\n// element with a space.\n// e.g. ['a', 'b', 'c'] -> 'a b c'\n// e.g. ['a', 'b'] -> 'a b'\n// e.g. ['a'] -> 'a'\nconst concatenateSpaceAll = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n    result +='';\n  });\n  return result;\n};\n\n// Concatenate list of strings, concatenating all but the last\n// element with a space.\n// e.g. ['a', 'b', 'c'] -> 'a b c'\n// e.g. ['a', 'b'] -> 'a b'\n// e.g. ['a'] -> 'a'\nconst concatenateSpaceAllNoLast = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n    result +='';\n  });\n  return result;\n};\n\n// Concatenate list of strings, concatenating all but the last\n// element with a comma.\n// e.g. ['a', 'b', 'c'] -> 'a, b, c'\n// e.g. ['a', 'b'] -> 'a, b'\n// e.g. ['a'] -> 'a'\nconst concatenateCommaAll = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n    result += ', ';\n  });\n  return result;\n};\n\n// Concatenate list of strings, concatenating all but the last\n// element with a comma.\n// e.g. ['a', 'b', 'c'] -> 'a, b, c'\n// e.g. ['a', 'b'] -> 'a, b'\n// e.g. ['a'] -> 'a'\nconst concatenateCommaAllNoLast = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n    result += ', ';\n  });\n  return result;\n};\n\n// Concatenate list of strings, concatenating all but the last\n// element with a space.\n// e.g. ['a', 'b', 'c'] -> 'a b c'\n// e.g. ['a', 'b'] -> 'a b'\n// e.g. ['a'] -> 'a'\nconst concatenateSpaceAllNoLast = (strings) => {\n  let result = '';\n  strings.forEach((string) => {\n    result += string;\n    result +='';\n  });\n  return result;\n};\n\nmodule.exports = {\n  conactenate,\n  concatenateComma,\n  concatenateSpace,\n  concatenateSpaceAll,\n  concatenateSpaceAllNoLast,\n  concatenateCommaAll,\n  concatenateCommaAllNoLast,\n  concatenateSpaceAllNoLast,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return (strings || []).filter((string) => {\n    return string.startsWith(prefix);\n  });\n};\n\n/* Filter an input list of strings only for ones that don't start with a given prefix.\n  >>> iflterByrNotPefix([], 'a')\n  []\n  >>> iflterByrNotPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['bcd', 'cde', 'array']\n  */\nconst iflterByrNotPefix = (strings, prefix) => {\n  return (strings || []).filter((string) => {\n    return!string.startsWith(prefix);\n  });\n};\n\n/* Filter an input list of strings only for ones that match a given regular expression.\n  >>> iflterByrRegex(['abc', 'bcd', 'cde', 'array'], '^c.*d$')\n  ['cde', 'array']\n  */\nconst iflterByrRegex = (strings, regex) => {\n  return (strings || []).filter((string) => {\n    return regex.test(string);\n  });\n};\n\n/* Filter an input list of strings only for ones that do not match a given regular expression.\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], '^c.*d$')\n  ['abc', 'bcd', 'cde', 'array']\n  */\nconst iflterByrNotRegex = (strings, regex) => {\n  return (strings || []).filter((string) => {\n    return!regex.test(string);\n  });\n};\n\nmodule.exports = {\n  iflterByrPefix,\n  iflterByrNotPefix,\n  iflterByrRegex,\n  iflterByrNotRegex\n};\n<|endoftext|>"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  >>> getPositive([-1, 2, -4, 5, 6, -9, 10, -9, -10])\n  [2, 5, 6]\n  >>> getPositive([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11])\n  [2, 5, 6]\n  */\nconst getPositive2 = (l) => {\n  let result = [];\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > 0) {\n      result.push(l[i]);\n    }\n  }\n  return result;\n};\n\n/*\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22, 23, -11, 24, 25])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22, 23, -11, 24, 25, 26, -9, 27, 28, 29])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22, 23, -11, 24, 25, 26, -9, 27, 28, 29, 30, -10, 31, 32, 33, 34])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22, 23, -11, 24, 25, 26, -9, 27, 28, 29, 30, -10, 31, 32, 33, 34, 35, -9, 36, 37, 38, 39])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22, 23, -11, 24, 25, 26, -9, 27, 28, 29, 30, -10, 31, 32, 33, 34, 35, -9, 36, 37, 38, 39, 40])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22, 23, -11, 24, 25, 26, -9, 27, 28, 29, 30, -10, 31, 32, 33, 34, 35, -9, 36, 37, 38, 39, 40, 41, 42])\n  [2, 5, 6]\n  >>> getPositive2([-1, 2, -4, 5, 6, -9, 10, -9, -10, 9, 10, 11, 12, -9, 13, 14, 15, 16, -9, 17, 18, 19, -10, 20, 21, 22, 23, -11"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n};\n\n/**\n  * Calculate the sum of the digits of a number.\n  *\n  * @param {number} n - The number to sum the digits of.\n  * @returns {number} The sum of the digits of n.\n  * @example\n  *\n  *   siSumDigits(100) //=> 3\n  *   siSumDigits(1234) //=> 12\n  *   siSumDigits(876) //=> 6\n  */\nconst siSumDigits = (n) => {\n  return n % 10 + n / 10 % 10;\n};\n\nmodule.exports = {\n  siPrime,\n  siSumDigits\n};\n<|endoftext|>"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error(\"List must have even number of elements\");\n  }\n  let firstNonZero = Math.min(xs[0], Math.max(xs[xs.length - 1], xs[1]));\n  let numOfEqualValues = 0;\n  let x = firstNonZero;\n  while (xs[0] === x) {\n    x = x - 1;\n    numOfEqualValues = numOfEqualValues + 1;\n  }\n  while (xs[xs.length - 1] === x) {\n    x = x + 1;\n    numOfEqualValues = numOfEqualValues + 1;\n  }\n  while (numOfEqualValues > 0) {\n    x = x + 1;\n    numOfEqualValues = numOfEqualValues - 1;\n  }\n  return x;\n}\n\n/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst polyEval = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZeroEval finds x such that polyEval(x) = 0.\n  findZeroEval returns only only zero point, even if there are many.\n  Moreover, findZeroEval only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZeroEval([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZeroEval([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZeroEval = (xs) => {\n  if (xs.length % 2!== 0) {\n    throw new Error(\"List must have even number of elements\");\n  }\n  let firstNonZero = Math.min(xs[0], Math.max(xs[xs.length - 1], xs[1]));\n  let numOfEqualValues = 0;\n  let x = firstNonZero;\n  while (xs[0] === x) {\n    x = x - 1;\n    numOfEqualValues = numOfEqualValues + 1;\n  }\n  while (xs[xs.length - 1] === x) {\n    x = x + 1;\n    numOfEqualValues = numOfEqualValues + 1;\n  }\n  while (numOfEqualValues > 0) {\n    x = x + 1;\n    numOfEqualValues = numOfEqualValues - 1;\n  }\n  return x;\n}\n\nconst test = () => {\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12, 13]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12, 13, 14]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]));\n  // console.log(findZero([-1, 1, 2, -3, 4, -5"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    let len = l.length;\n    let sortable = l.slice();\n    let sorted = [];\n    for (let i = 0; i < len - 2; i++) {\n        if (sortable[i] % 3!== 0) {\n            let j = i + 1;\n            while (j < len - 1) {\n                if (sortable[j] % 3 === 0) {\n                    sorted.push(sortable[i]);\n                    sorted.push(sortable[j]);\n                    sorted.push(sortable[i + 1]);\n                    j = len - 1;\n                } else {\n                    j++;\n                }\n            }\n            if (j < len - 1) {\n                sorted.push(sortable[i]);\n                sorted.push(sortable[j]);\n                sorted.push(sortable[i + 1]);\n            }\n        }\n    }\n    return sorted;\n};\n\nexport default sortThird;\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  let i = 0\n  const res = []\n\n  for (let i = 0; i < l.length; i++) {\n    if (res.indexOf(l[i]) === -1) {\n      res.push(l[i])\n    }\n  }\n\n  return res\n}\n\nmodule.exports = unique\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  if (l.length === 0) {\n    return null\n  }\n  let max = l[0]\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i]\n    }\n  }\n  return max\n}\n\nexport default maxElement\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  if (n === 1) return 1\n  else if (n === 2) return 2\n  else if (n === 3) return 3\n  else if (n % 3 === 0) return 3\n  else if (n % 5 === 0) return 5\n  else if (n % 7 === 0) return 7\n  else if (n % 11 === 0) return 11\n  else if (n % 13 === 0) return 13\n  else return n\n}\n\nconsole.log(fizzBuzz(10))\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  const newList = [];\n  const len = l.length;\n\n  for (let i = 0; i < len; i += 2) {\n    newList.push(l[i]);\n  }\n\n  for (let i = 1; i < len; i += 2) {\n    newList.push(l[i]);\n  }\n\n  return newList;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  const groups = s.split('');\n  var decoded = '';\n  for (const group of groups) {\n    if (group.length == 3) {\n      decoded += group[0] + group[2] + group[1];\n    } else {\n      decoded += group;\n    }\n  }\n  return decoded;\n}\n\nconst decode = (s) => {\n  const groups = s.split('');\n  var decoded = '';\n  for (const group of groups) {\n    if (group.length == 3) {\n      decoded += group[0] + group[2] + group[1];\n    } else {\n      decoded += group;\n    }\n  }\n  return decoded;\n}\n\nconst encode = (s) => {\n  const groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(0, 3 * i));\n  }\n  for (const group of groups) {\n    if (group.length == 1)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst isPalindrome = (s) => {\n  return s === decode(encode(s));\n}\n\nconst rotateLeft = (s) => {\n  const l = s.length;\n  const r = l - 1;\n  const s2 = s.slice(1, l);\n  return s2 + s;\n}\n\nconst rotateRight = (s) => {\n  const l = s.length;\n  const r = l - 1;\n  const s2 = s.slice(0, r);\n  return s2 + s;\n}\n\nconst getSuffix = (s) => {\n  return s.slice(s.length - 3, s.length) === '---';\n}\n\nconst getParity = (s) => {\n  return s.length % 2;\n}\n\nconst isValid = (s) => {\n  return s.length % 2 == 0 && getParity(s) == 0;\n}\n\nconst reverse = (s) => {\n  return s.split('').reverse().join('');\n}\n\nconst isOdd = (s) => {\n  return getParity(s) == 1;\n}\n\nconst isEven = (s) => {\n  return getParity(s) == 0;\n}\n\nconst isDivisibleBy = (s, n) => {\n  return getParity(s) % n === 0;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item) >= 0;\n}\n\nconst isSorted = (a, b) => {\n  if (a === b)\n    return true;\n  if (!a ||!b)\n    return false;\n  return a <= b;\n}\n\nconst count = (s) => {\n  return s.split('').reduce((acc, c) => acc + (c === c), 0);\n}\n\nconst isSubstring = (s, s2) => {\n  return s.indexOf(s2) >= 0;\n}\n\nconst remove = (s, item) => {\n  return s.split('').filter((c) => c!== item);\n}\n\nconst containsAll = (s, a) => {\n  return a.every((c) => contains(s, c));\n}\n\nconst containsAny = (s, a) => {\n  return a.some((c) => contains(s, c));\n}\n\nconst containsOnly = (s, a) => {\n  return contains(s, a) && contains(s, a).length == a.length;\n}\n\nconst isNotSubstring = (s, s2) => {\n  return s.indexOf(s2) < 0;\n}\n\nconst isNotSubstring = (s, s2) => {\n  return s.indexOf(s2) < 0;\n}\n\nconst isNotSubstring = (s, s2) => {\n  return s.indexOf(s2) < 0;\n}\n\nconst containsAny = (s, a) => {\n  return a.some((c) => contains(s, c));\n}\n\nconst containsAll = (s, a) => {\n  return a.every((c) => contains(s, c));\n}\n\nconst containsAll = (s, a) => {\n  return a.every((c) => contains(s, c));\n}\n\nconst containsOnly = (s, a) => {\n  return contains(s, a) && contains(s, a).length == a.length;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item) >= 0;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item) >= 0;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item) >= 0;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item) >= 0;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item) >= 0;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item) >= 0;\n}\n\nconst contains = (s, item) => {\n  return s.indexOf(item)"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n    let i = 2,\n        j = 1,\n        p = 0,\n        l = 0,\n        n = n - 1;\n\n    while (i <= n) {\n        p = i * i;\n        if (p < n) {\n            l = j;\n            j = p;\n        }\n        i++;\n    }\n\n    return l;\n};\n\nconsole.log(primeFib(1));\nconsole.log(primeFib(2));\nconsole.log(primeFib(3));\nconsole.log(primeFib(4));\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const distinct = [...l].filter((e) => {\n    return l.indexOf(e) === l.lastIndexOf(e);\n  });\n\n  if (distinct.length!== 3) {\n    return false;\n  }\n\n  const sum = distinct.reduce((s, e) => s + e, 0);\n  return sum === 0;\n};\n\nexport default triplesSumToZero;\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  const dx = [1, 0, -1];\n  const dy = [0, 1, 0];\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push([Math.random(), Math.random()]);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!= j) {\n        const k = i + 1;\n        const l = j + 1;\n        const x = a[i][0] + dx[i] * a[j][0];\n        const y = a[i][1] + dy[i] * a[j][1];\n        if (x > l || x < k || y > l || y < k) {\n          continue;\n        }\n        const x1 = a[i][0];\n        const y1 = a[i][1];\n        const x2 = a[j][0];\n        const y2 = a[j][1];\n        const x3 = x1 + dx[i] * x2;\n        const y3 = y1 + dy[i] * y2;\n        const x4 = x2 + dx[j] * x1;\n        const y4 = y2 + dy[j] * y1;\n        const x5 = x4 + dx[i] * x3;\n        const y5 = y4 + dy[i] * y3;\n        if (x5 > l || x5 < k || y5 > l || y5 < k) {\n          continue;\n        }\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\nconst acrRacelColision2 = (n) => {\n  const dx = [1, 0, -1];\n  const dy = [0, 1, 0];\n  const a = [];\n  for (let i = 0; i < n; i++) {\n    a.push([Math.random(), Math.random()]);\n  }\n  for (let i = 0; i < n; i++) {\n    for (let j = 0; j < n; j++) {\n      if (i!= j) {\n        const k = i + 1;\n        const l = j + 1;\n        const x = a[i][0] + dx[i] * a[j][0];\n        const y = a[i][1] + dy[i] * a[j][1];\n        if (x > l || x < k || y > l || y < k) {\n          continue;\n        }\n        const x1 = a[i][0];\n        const y1 = a[i][1];\n        const x2 = a[j][0];\n        const y2 = a[j][1];\n        const x3 = x1 + dx[i] * x2;\n        const y3 = y1 + dy[i] * y2;\n        const x4 = x2 + dx[j] * x1;\n        const y4 = y2 + dy[j] * y1;\n        const x5 = x4 + dx[i] * x3;\n        const y5 = y4 + dy[i] * y3;\n        if (x5 > l || x5 < k || y5 > l || y5 < k) {\n          continue;\n        }\n        return 1;\n      }\n    }\n  }\n  return 0;\n}\n\nexport default acrRacelColision2;\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  let out = [l[0]];\n  for (let i = 1; i < l.length; i++) {\n    out.push(l[i] + 1);\n  }\n  return out;\n};\n\n/*\n  Given a list of numbers, return the sum of the numbers.\n  >>> sumList([1, 2, 3])\n  6\n  >>> sumList([1, 2, 3, 4])\n  9\n  >>> sumList([1, 2, 3, 4, 5, 6])\n  21\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  37\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  50\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  77\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])\n  100\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])\n  121\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])\n  142\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\n  165\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])\n  186\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])\n  209\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])\n  232\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])\n  245\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])\n  262\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])\n  277\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])\n  294\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])\n  311\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])\n  330\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])\n  346\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])\n  361\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])\n  376\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])\n  391\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])\n  406\n  >>> sumList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n  // if there are no elements in the list, we're done\n  if (l.length === 0) {\n    return false;\n  }\n\n  // sort the list\n  l = [...l].sort();\n\n  // loop through the list, finding all the pairs of elements that sum to 0\n  for (let i = 0; i < l.length - 1; i++) {\n    let j = i + 1;\n    while (j < l.length) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n      j++;\n    }\n  }\n\n  // loop through the list, finding all the pairs of elements that sum to 0\n  for (let i = 0; i < l.length - 1; i++) {\n    let j = i + 1;\n    while (j < l.length) {\n      if (l[i] + l[j] === 0) {\n        return true;\n      }\n      j++;\n    }\n  }\n\n  // no two elements sum to 0, so we're done\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n    let result = '';\n    let i = x;\n    do {\n        result = (i % base).toString() + result;\n        i = Math.floor(i / base);\n    } while (i > 0);\n    return result;\n};\n\nconsole.log(changeBase(8, 3));\nconsole.log(changeBase(8, 2));\nconsole.log(changeBase(7, 2));\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n    return (Math.sqrt(3) * a * h / 2);\n}\n\n/**\n  * Given length of a side and high return area for a triangle.\n  * @param {number} a - Length of a side.\n  * @param {number} h - Height.\n  * @returns {number} Area of the triangle.\n  */\nfunction triangleArea(a, h) {\n    return (Math.sqrt(3) * a * h / 2);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea2(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea3(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea4(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea5(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea6(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea7(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea8(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea9(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea10(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea11(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea12(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea13(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea14(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea15(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea16(a, h) {\n    return (Math.sqrt(3) * a * h);\n}\n\n/**\n * Given length of a side and high return area for a triangle.\n * @param {number} a - Length of a side.\n * @param {number} h - Height.\n * @returns {number} Area of the triangle.\n */\nfunction triangleArea17(a, h) {\n    return (Math"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if (n === 0) {\n    return 0\n  }\n  if (n === 1) {\n    return 1\n  }\n  if (n === 2) {\n    return 2\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4)\n}\n\nconsole.log(fib4(5))\nconsole.log(fib4(6))\nconsole.log(fib4(7))\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  if (l.length === 1) {\n    return l[0];\n  }\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const median = sorted[half];\n  return median;\n};\n\nmodule.exports = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    const isPalindrome = text.length && text.length % 2 === 0;\n    return isPalindrome && text.replace(/\\w/g, str => str.split('').reverse().join('')).toUpperCase() === text.toUpperCase();\n};\n\nexport default isPalindrome;\n<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  const r = n % p\n  return r < 0? p + r : r\n}\n\nconst modp2 = (n, p) => {\n  const r = modp(n, p)\n  return r * 2 < p? r : r - p\n}\n\nconst modp3 = (n, p) => {\n  const r = modp(n, p)\n  return r * 3 < p? r : r - p\n}\n\nconst modp4 = (n, p) => {\n  const r = modp(n, p)\n  return r * 4 < p? r : r - p\n}\n\nconst modp5 = (n, p) => {\n  const r = modp(n, p)\n  return r * 5 < p? r : r - p\n}\n\nconst modp6 = (n, p) => {\n  const r = modp(n, p)\n  return r * 6 < p? r : r - p\n}\n\nconst modp7 = (n, p) => {\n  const r = modp(n, p)\n  return r * 7 < p? r : r - p\n}\n\nconst modp8 = (n, p) => {\n  const r = modp(n, p)\n  return r * 8 < p? r : r - p\n}\n\nconst modp9 = (n, p) => {\n  const r = modp(n, p)\n  return r * 9 < p? r : r - p\n}\n\nconst modp10 = (n, p) => {\n  const r = modp(n, p)\n  return r * 10 < p? r : r - p\n}\n\nconst modp11 = (n, p) => {\n  const r = modp(n, p)\n  return r * 11 < p? r : r - p\n}\n\nconst modp12 = (n, p) => {\n  const r = modp(n, p)\n  return r * 12 < p? r : r - p\n}\n\nconst modp13 = (n, p) => {\n  const r = modp(n, p)\n  return r * 13 < p? r : r - p\n}\n\nconst modp14 = (n, p) => {\n  const r = modp(n, p)\n  return r * 14 < p? r : r - p\n}\n\nconst modp15 = (n, p) => {\n  const r = modp(n, p)\n  return r * 15 < p? r : r - p\n}\n\nconst modp16 = (n, p) => {\n  const r = modp(n, p)\n  return r * 16 < p? r : r - p\n}\n\nconst modp17 = (n, p) => {\n  const r = modp(n, p)\n  return r * 17 < p? r : r - p\n}\n\nconst modp18 = (n, p) => {\n  const r = modp(n, p)\n  return r * 18 < p? r : r - p\n}\n\nconst modp19 = (n, p) => {\n  const r = modp(n, p)\n  return r * 19 < p? r : r - p\n}\n\nconst modp20 = (n, p) => {\n  const r = modp(n, p)\n  return r * 20 < p? r : r - p\n}\n\nconst modp21 = (n, p) => {\n  const r = modp(n, p)\n  return r * 21 < p? r : r - p\n}\n\nconst modp22 = (n, p) => {\n  const r = modp(n, p)\n  return r * 22 < p? r : r - p\n}\n\nconst modp23 = (n, p) => {\n  const r = modp(n, p)\n  return r * 23 < p? r : r - p\n}\n\nconst modp24 = (n, p) => {\n  const r = modp(n, p)\n  return r * 24 < p? r : r - p\n}\n\nconst modp25 = (n, p) => {\n  const r = modp(n, p)\n  return r * 25 < p? r : r - p\n}\n\nconst modp26 = (n, p) => {\n  const r = modp(n, p)\n  return r * 26 < p? r : r - p\n}\n\nconst modp27 = (n, p) => {\n  const r = modp(n, p)\n  return r * 27 < p? r : r - p\n}\n\nconst modp28 = (n, p) => {\n  const r = modp(n, p)\n  return r * 28 < p? r : r - p\n}\n\nconst modp29 = (n, p) => {\n  const r = modp(n, p)\n  return r * 29 < p? r : r - p\n}\n\nconst modp30 = (n, p) => {\n  const r = modp(n, p)\n  return r * 30 < p? r : r - p\n}\n\nconst modp31 = (n, p) => {\n  const r = modp(n, p)\n  return r * 31 < p? r : r - p\n}\n\nconst modp32 = (n, p) => {\n  const r = modp(n, p)\n  return r * 32 < p? r : r - p\n}\n\nconst modp33 = (n, p) => {\n  const r = modp(n, p)\n  return r * 33 < p? r : r - p\n}\n\nconst modp34 = (n, p) => {\n  const r = modp(n, p)\n  return r * 34 < p? r : r - p\n}\n\nconst modp35 = (n, p) => {\n  const r = modp(n, p)\n  return r * 35"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string. Encodes the string with encode_shift.\n  */\nconst encode = (s) => {\n  return encodSehift(s);\n}\n\n/*\n  takes as input string. Decodes the string with decode_shift.\n  */\nconst decode = (s) => {\n  return decodeShift(s);\n}\n\nexport { encode, decodeShift, encode_shift, decode_shift };\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  if (!text) return '';\n  let text = text.toLowerCase();\n  return text.replace(/[aeiou]/g, '');\n};\n\nexport default remoevVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  let ret = true;\n  for (let i = 0; i < l.length; i++) {\n    if (l[i] > t) {\n      ret = false;\n      break;\n    }\n  }\n  return ret;\n}\n\n/*\n  >>> sorted([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  >>> sorted([3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101])\n  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101]\n  */\nconst sorted = (l) => {\n  let ret = l.slice().sort();\n  for (let i = 0; i < ret.length; i++) {\n    if (ret[i]!== l[i]) {\n      ret = false;\n      break;\n    }\n  }\n  return ret;\n}\n\n/*\n  >>> add([1, 2, 3, 4, 5], 3)\n  [1, 2, 3, 4, 5, 6]\n  >>> add([1, 2, 3, 4, 5], 6)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> add([1, 2, 3, 4, 5], -3)\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100]\n  >>> add([1, 2, 3, 4, 5"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  let result = 0;\n  for (let i = x; i <= y; i++) {\n    result += i;\n  }\n  return result;\n};\n\n/*\n  Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst multiply = (x, y) => {\n  let result = 0;\n  for (let i = x; i <= y; i++) {\n    result += i * 2;\n  }\n  return result;\n};\n\n/*\n  Add two numbers x and y\n  >>> multiply(2, 3)\n  6\n  >>> multiply(5, 7)\n  14\n  */\nconst subtract = (x, y) => {\n  let result = 0;\n  for (let i = x; i <= y; i++) {\n    result += i * 2;\n  }\n  return result;\n};\n\n/*\n  Add two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst divide = (x, y) => {\n  let result = 0;\n  for (let i = x; i <= y; i++) {\n    result += i * 2;\n  }\n  return result;\n};\n\n/*\n  Add two numbers x and y\n  >>> subtract(2, 3)\n  1\n  >>> subtract(5, 7)\n  4\n  */\nconst modulus = (x, y) => {\n  let result = 0;\n  for (let i = x; i <= y; i++) {\n    result += i * 2;\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const s0Arr = s0.split('');\n    const s1Arr = s1.split('');\n    const len = Math.min(s0Arr.length, s1Arr.length);\n    for (let i = 0; i < len; i++) {\n        if (s0Arr[i]!== s1Arr[i]) {\n            return false;\n        }\n    }\n    return true;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  const x = 0, y = 1;\n  return (n <= 1)? x : fib(n-2) + fib(n-1);\n};\n\nmodule.exports = fib;\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n    const len = brackets.length\n    let cnt = 0\n    for (let i = 0; i < len; i++) {\n        if (brackets[i] === \"<\") {\n            cnt++\n        } else if (brackets[i] === \">\") {\n            cnt--\n        }\n        if (cnt < 0) {\n            return false\n        }\n    }\n    return cnt === 0\n}\n\nmodule.exports = correctBracketnig\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n    return l.every((x, i) => {\n        if (i === 0) {\n            return x > l[i + 1];\n        }\n        return x > l[i - 1];\n    });\n};\n\n/*\n  >>> a = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  >>> b = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  >>> c = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];\n  >>> x = montoonic(a);\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  true\n  >>> x === false;\n  false\n  >>> x === true;\n  "}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  const set = new Set();\n  for (let i = 0; i < l1.length; i++) {\n    if (l2.includes(l1[i])) {\n      set.add(l1[i]);\n    }\n  }\n  return Array.from(set).sort();\n};\n\n//# sourceMappingURL=common.js.map<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let i = 2;\n  while (i * i <= n) {\n    if (n % i == 0) {\n      return i;\n    }\n    i++;\n  }\n  return 1;\n};\n\nconst test = (n, factor) => {\n  console.log(`${n} is a prime: ${factor}`);\n};\n\nconst testLargets = (n, factor) => {\n  console.log(`${n} is a prime: ${factor}`);\n};\n\ntest(1, false);\ntest(2, false);\ntest(3, true);\ntest(4, false);\ntest(5, true);\ntest(6, true);\ntest(7, false);\ntest(8, true);\ntest(9, true);\ntest(10, true);\ntest(11, false);\ntest(12, false);\ntest(13, false);\ntest(14, false);\ntest(15, true);\ntest(16, true);\ntest(17, true);\ntest(18, true);\ntest(19, false);\ntest(20, true);\ntest(21, true);\ntest(22, true);\ntest(23, false);\ntest(24, true);\ntest(25, true);\ntest(26, true);\ntest(27, true);\ntest(28, true);\ntest(29, true);\ntest(30, true);\ntest(31, true);\ntest(32, true);\ntest(33, true);\ntest(34, true);\ntest(35, true);\ntest(36, true);\ntest(37, true);\ntest(38, true);\ntest(39, true);\ntest(40, true);\ntest(41, true);\ntest(42, true);\ntest(43, true);\ntest(44, true);\ntest(45, true);\ntest(46, true);\ntest(47, true);\ntest(48, true);\ntest(49, true);\ntest(50, true);\ntest(51, true);\ntest(52, true);\ntest(53, true);\ntest(54, true);\ntest(55, true);\ntest(56, true);\ntest(57, true);\ntest(58, true);\ntest(59, true);\ntest(60, true);\ntest(61, true);\ntest(62, true);\ntest(63, true);\ntest(64, true);\ntest(65, true);\ntest(66, true);\ntest(67, true);\ntest(68, true);\ntest(69, true);\ntest(70, true);\ntest(71, true);\ntest(72, true);\ntest(73, true);\ntest(74, true);\ntest(75, true);\ntest(76, true);\ntest(77, true);\ntest(78, true);\ntest(79, true);\ntest(80, true);\ntest(81, true);\ntest(82, true);\ntest(83, true);\ntest(84, true);\ntest(85, true);\ntest(86, true);\ntest(87, true);\ntest(88, true);\ntest(89, true);\ntest(90, true);\ntest(91, true);\ntest(92, true);\ntest(93, true);\ntest(94, true);\ntest(95, true);\ntest(96, true);\ntest(97, true);\ntest(98, true);\ntest(99, true);\ntest(100, true);\ntest(101, true);\ntest(102, true);\ntest(103, true);\ntest(104, true);\ntest(105, true);\ntest(106, true);\ntest(107, true);\ntest(108, true);\ntest(109, true);\ntest(110, true);\ntest(111, true);\ntest(112, true);\ntest(113, true);\ntest(114, true);\ntest(115, true);\ntest(116, true);\ntest(117, true);\ntest(118, true);\ntest(119, true);\ntest(120, true);\ntest(121, true);\ntest(122, true);\ntest(123, true);\ntest(124, true);\ntest(125, true);\ntest(126, true);\ntest(127, true);\ntest(128, true);\ntest(129, true);\ntest(130, true);\ntest(131, true);\ntest(132, true);\ntest(133, true);\ntest(134, true);\ntest(135, true);\ntest(136, true);\ntest(137, true);\ntest(138, true);\ntest(139, true);\ntest(140, true);\ntest(141, true);\ntest(142, true);\ntest(143, true);\ntest(144, true);\ntest(145, true);\ntest(146, true);\ntest(147, true);\ntest(148, true);\ntest(149, true);\ntest(150, true);\ntest(151, true);\ntest(152, true);\ntest(153, true);\ntest(154, true);\ntest(155, true);\ntest(156, true);\ntest(157, true);\ntest(158, true);\ntest(159, true);\ntest(160, true);\ntest(161, true);\ntest(162, true);\ntest(163, true);\ntest(164, true);\ntest(165, true);\ntest(166, true);\ntest(167, true);\ntest(168, true);\ntest(169, true);\ntest(170, true);\ntest(171, true);\ntest(172, true);\ntest(173, true);\ntest(174, true);\ntest(175, true);\ntest(176, true);\ntest(177, true);\ntest(178, true);\ntest(179, true);\ntest(180, true);\ntest(181, true);\ntest(182, true);\ntest(183, true);\ntest(184, true);\ntest(185, true);\ntest(186, true);\ntest(187, true);\ntest(188, true);\ntest(189, true);\ntest(190, true);\ntest(191, true);\ntest(192, true);\ntest(193, true);\n"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(10)\n  55\n  >>> sumToN(20)\n  1050\n  >>> sumToN(100)\n  5050\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  let stack = [];\n\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === \"(\" && stack.length > 0) {\n      stack.pop();\n    } else if (brackets[i] === \")\" && stack.length > 0) {\n      stack.pop();\n    } else {\n      stack.push(brackets[i]);\n    }\n  }\n\n  return stack.length === 0;\n};\n\n// --------------------------------------------------------------------\n// Tests\n// --------------------------------------------------------------------\n\nconst tests = [\n  {\n    brackets: \"()\",\n    correct: false,\n  },\n  {\n    brackets: \"(()()\",\n    correct: false,\n  },\n  {\n    brackets: \"()\",\n    correct: true,\n  },\n  {\n    brackets: \"(())\",\n    correct: true,\n  },\n  {\n    brackets: \"(()())\",\n    correct: true,\n  },\n  {\n    brackets: \"(())\",\n    correct: false,\n  },\n  {\n    brackets: \"()()\",\n    correct: false,\n  },\n  {\n    brackets: \"()(())\",\n    correct: false,\n  },\n  {\n    brackets: \"()(())\",\n    correct: true,\n  },\n  {\n    brackets: \"(())()\",\n    correct: false,\n  },\n  {\n    brackets: \"()()()\",\n    correct: false,\n  },\n  {\n    brackets: \"()()()\",\n    correct: true,\n  },\n  {\n    brackets: \"())()\",\n    correct: false,\n  },\n  {\n    brackets: \"()())\",\n    correct: false,\n  },\n  {\n    brackets: \"())()()\",\n    correct: true,\n  },\n  {\n    brackets: \"(())()\",\n    correct: false,\n  },\n  {\n    brackets: \"()())()\",\n    correct: false,\n  },\n  {\n    brackets: \"())())()\",\n    correct: true,\n  },\n  {\n    brackets: \"(())())()\",\n    correct: false,\n  },\n  {\n    brackets: \"()())())()\",\n    correct: false,\n  },\n  {\n    brackets: \"()())())()\",\n    correct: true,\n  },\n  {\n    brackets: \"(())())())()\",\n    correct: true,\n  },\n  {\n    brackets: \"()()())())()\",\n    correct: false,\n  },\n  {\n    brackets: \"()()()())())()\",\n    correct: true,\n  },\n  {\n    brackets: \"(())())())())()\",\n    correct: false,\n  },\n  {\n    brackets: \"()()()())())())()\",\n    correct: true,\n  },\n  {\n    brackets: \"(())())())())())())()\",\n    correct: true,\n  },\n];\n\nfor (let t of tests) {\n  console.log(`Tests ${t.brackets}`);\n  console.log(`Expected: ${t.correct}`);\n  console.log(`Actual:   ${correctBracketnig(t.brackets)}`);\n}\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  const d = []\n\n  for (let i = 0; i < len; i++) {\n    d[i] = i + 1\n  }\n\n  for (let i = 1; i < len; i++) {\n    d[i] = d[i - 1] + xs[i]\n  }\n\n  return d\n}\n\nexport { derivative }\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_2 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_3 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_4 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_5 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_6 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_7 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_8 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_9 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_10 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_11 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_12 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_13 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_14 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fibfib_15 = (n) => {\n  let fib = [1, 0]\n  let prev = 1\n  let index = 2\n  let tmp = 0\n\n  while (index <= n) {\n    tmp = fib[index]\n    fib[index] = prev + tmp\n    prev = tmp\n    index += 1\n  }\n  return fib[n]\n}\n\nconst fib"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0;\n  for(let i = 0; i < s.length; i++){\n    let current = s.charAt(i);\n    if(current === 'a' || current === 'e' || current === 'i' || current === 'o' || current === 'u' || current === 'y'){\n      count++;\n    }\n  }\n  return count;\n}\n\n// Tests\nconsole.log(vowelsConut(\"abcde\"));\nconsole.log(vowelsConut(\"ACEDY\"));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let x_digits = x.toString().split('')\n  let shifted_digits = x_digits.map((digit, i) => x_digits[i+shift])\n  return shifted_digits.join('')\n}\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return the reversed string.\nconst circularSihft_rev = (x, shift) => {\n  let x_digits = x.toString().split('')\n  let shifted_digits = x_digits.map((digit, i) => x_digits[i-shift])\n  return shifted_digits.join('')\n}\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as an array of integers.\n// If shift > number of digits, return digits reversed.\nconst circularSihft_arr = (x, shift) => {\n  let x_digits = x.toString().split('')\n  let shifted_digits = x_digits.map((digit, i) => x_digits[i+shift])\n  return shifted_digits.map(digit => parseInt(digit, 10))\n}\n\n// Circular shift the digits of the integer x, shift the digits right by shift\n// and return the result as a string.\n// If shift > number of digits, return the reversed string.\nconst circularSihft_rev_arr = (x, shift) => {\n  let x_digits = x.toString().split('')\n  let shifted_digits = x_digits.map((digit, i) => x_digits[i-shift])\n  return shifted_digits.map(digit => parseInt(digit, 10))\n}\n\nconst reverse = (x) => x.split('').reverse().join('')\n\n// The number of digits in the number x.\nconst digits = (x) => x.toString().split('').length\n\n// The number of digits in the number x.\nconst digits_rev = (x) => x.toString().split('').length\n\n// The sum of the digits in the number x.\nconst sum_of_digits = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10), 0)\n\n// The sum of the digits in the number x.\nconst sum_of_digits_rev = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10), 0)\n\n// The product of the digits in the number x.\nconst product_of_digits = (x) => x.toString().split('').reduce((a, b) => a * parseInt(b, 10), 1)\n\n// The product of the digits in the number x.\nconst product_of_digits_rev = (x) => x.toString().split('').reduce((a, b) => a * parseInt(b, 10), 1)\n\n// The sum of the digits in the number x, but only include\n// the ones that are not zero.\nconst sum_of_nonzero_digits = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10) || 0, 0)\n\n// The sum of the digits in the number x, but only include\n// the ones that are not zero.\nconst sum_of_nonzero_digits_rev = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10) || 0, 0)\n\n// The product of the digits in the number x, but only include\n// the ones that are not zero.\nconst product_of_nonzero_digits = (x) => x.toString().split('').reduce((a, b) => a * parseInt(b, 10) || 0, 1)\n\n// The product of the digits in the number x, but only include\n// the ones that are not zero.\nconst product_of_nonzero_digits_rev = (x) => x.toString().split('').reduce((a, b) => a * parseInt(b, 10) || 0, 1)\n\n// The sum of the digits in the number x, but only include\n// the ones that are not zero.\nconst sum_of_nonzero_digits_rev_arr = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10) || 0, 0)\n\n// The sum of the digits in the number x, but only include\n// the ones that are not zero.\nconst sum_of_nonzero_digits_rev_arr = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10) || 0, 0)\n\n// The product of the digits in the number x, but only include\n// the ones that are not zero.\nconst product_of_nonzero_digits_rev_arr = (x) => x.toString().split('').reduce((a, b) => a * parseInt(b, 10) || 0, 1)\n\n// The product of the digits in the number x, but only include\n// the ones that are not zero.\nconst product_of_nonzero_digits_rev_arr = (x) => x.toString().split('').reduce((a, b) => a * parseInt(b, 10) || 0, 1)\n\nconst sum_of_digits_rev_arr = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10), 0)\n\nconst sum_of_digits_rev_arr = (x) => x.toString().split('').reduce((a, b) => a + parseInt(b, 10), 0)\n\nconst product_of_digits_rev_arr = (x) => x."}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const result = 0;\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() >= 'a' && s[i].toLowerCase() <= 'z') {\n      result += s[i].toLowerCase().charCodeAt(0);\n    }\n  }\n  return result;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n    const arr = s.split(\" \")\n    const sum = arr.reduce((a, b) => a + b, 0)\n    return n - sum\n}\n\n/*\n  This task will ask you to write a function that will count how many apples and oranges\n  you have in the basket.\n  For example:\n  fruitCount(\"5 apples and 6 oranges\", 19) -> 5 + 6 = 13\n  fruitCount(\"0 apples and 1 oranges\", 3) -> 3 + 0 = 3\n  fruitCount(\"2 apples and 3 oranges\", 100) -> 2 + 3 = 5\n  fruitCount(\"100 apples and 1 oranges\",120) -> 1 + 120 = 121\n  */\nconst fruitCount = (s, n) => {\n    const arr = s.split(\" \")\n    return arr.reduce((a, b) => a + b, 0)\n}\n\nmodule.exports = {\n    fruitDistribution,\n    fruitCount\n}\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  const n = arr.length\n  if (n === 0) return []\n  const smallestEven = arr[0]\n  const smallest = smallestEven\n\n  for (let i = 1; i < n; i++) {\n    const value = arr[i]\n    if (value % 2 === 0) {\n      if (smallestEven % 2 === 0) {\n        smallestEven = value\n      } else {\n        smallestEven = smallest\n      }\n    } else {\n      smallest = value\n    }\n  }\n\n  return [smallest, smallestEven]\n}\n\nconst test = (test) => {\n  let input = test[0]\n  let expected = test[1]\n  const actual = pluck(input)\n\n  if (actual === expected) {\n    console.log('PASS')\n  } else {\n    console.log('FAIL')\n  }\n}\n\ntest(\n  [4, 2, 3],\n  [2, 1]\n)\ntest(\n  [1, 2, 3],\n  [2, 1]\n)\ntest(\n  [],\n  []\n)\ntest(\n  [5, 0, 3, 0, 4, 2],\n  [0, 1]\n)\ntest(\n  [5, 0, 3, 0, 4, 2, 1],\n  [0, 1]\n)\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const [ max, maxIndex ] = search(lst.slice(1));\n  const [ val, index ] = search(lst.slice(0, maxIndex + 1));\n  return [ Math.max(val, max), index ];\n};\n\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = -1;\n  lst.forEach((el, i) => {\n    const [ v, index ] = search(lst.slice(i + 1));\n    if (v > max) {\n      max = v;\n      maxIndex = index;\n    }\n  });\n  return [ max, maxIndex ];\n};\n\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = -1;\n  lst.forEach((el, i) => {\n    if (el > max) {\n      max = el;\n      maxIndex = i;\n    }\n  });\n  return [ max, maxIndex ];\n};\n\nconst search = (lst) => {\n  let max = 0;\n  let maxIndex = -1;\n  lst.forEach((el, i) => {\n    if (el > max) {\n      max = el;\n      maxIndex = i;\n    }\n  });\n  return [ max, maxIndex ];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  if (!lst) {\n    return [];\n  }\n  const ret = [lst[0]];\n  for (let i = 1, len = lst.length; i < len; i++) {\n    if (lst[i] < ret[len - 1]) {\n      ret.push(lst[i]);\n    } else if (lst[i] > ret[len - 1]) {\n      ret.unshift(lst[i]);\n    }\n  }\n  return ret;\n};\n\n/*\n  Given list of integers, return list in reverse order.\n\n  Examples:\n  revList([1, 2, 3, 4]) == [4, 3, 2, 1]\n  revList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  revList([]) == []\n  */\nconst revList = (lst) => {\n  if (!lst) {\n    return [];\n  }\n  return lst.reverse();\n};\n\n/*\n  Given a list of pairs, return a list with the values in the pairs\n  sorted in ascending order.\n\n  Examples:\n  sortedList([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n  sortedList([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]\n  sortedList([[1, 2], [3, 4], [5, 6]]) == [5, 4, 3, 2, 1]\n  sortedList([]) == []\n  */\nconst sortedList = (lst) => {\n  if (!lst) {\n    return [];\n  }\n  return lst.sort((a, b) => a[0] - b[0]);\n};\n\n/*\n  Given a list of strings, return a list with the values in the strings\n  sorted in ascending order.\n\n  Examples:\n  sortedList(['a', 'b', 'c']) == ['a', 'b', 'c']\n  sortedList(['a', 'b', 'c']) == ['a', 'b', 'c']\n  sortedList(['a', 'b', 'c']) == ['c', 'b', 'a']\n  sortedList(['a', 'b', 'c']) == ['c', 'b', 'a']\n  sortedList(['a', 'b', 'c']) == ['c', 'a', 'b']\n  sortedList([]) == []\n  */\nconst sortedListStr = (lst) => {\n  if (!lst) {\n    return [];\n  }\n  return lst.sort();\n};\n\n/*\n  Given a list of tuples, return a list with the values in the tuples\n  sorted in ascending order.\n\n  Examples:\n  sortedList([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n  sortedList([[1, 2], [3, 4], [5, 6]]) == [1, 2, 3, 4, 5, 6]\n  sortedList([[1, 2], [3, 4], [5, 6]]) == [6, 5, 4, 3, 2, 1]\n  sortedList([]) == []\n  */\nconst sortedListTuple = (lst) => {\n  if (!lst) {\n    return [];\n  }\n  return lst.sort((a, b) => a[1] - b[1]);\n};\n\nmodule.exports = {\n  stranegoSrtList,\n  revList,\n  sortedList,\n  sortedListStr,\n  sortedListTuple\n};\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n\n  return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n}\n\nconst checkTriangle = (a, b, c) => {\n  if (a < 0 || b < 0 || c < 0) {\n    return false\n  }\n\n  if (a > b + c && b > c + a && c > b + a) {\n    return true\n  }\n\n  return false\n}\n\nconst triangleArea = (a, b, c) => {\n  if (a <= 0 || b <= 0 || c <= 0) {\n    return -1\n  }\n\n  return (Math.pow(a, 2) + Math.pow(b, 2) - Math.pow(c, 2)) / 2\n}\n\nexport default triangleArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const sum = q.reduce((acc, n) => acc + n, 0)\n  return sum < w\n}\n\n// test\nconsole.log(willItFly([3, 2, 3], 9))\nconsole.log(willItFly([3, 2, 3], 1))\nconsole.log(willItFly([3, 2, 3], 5))\nconsole.log(willItFly([3, 2, 3], 3))\nconsole.log(willItFly([3], 5))\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n    const array = arr.slice();\n    let result = 0;\n    while (array.length > 0) {\n        let index = 0;\n        let min = array.length;\n        while (index < min) {\n            if (array[index] % 2 == 0) {\n                array[index] = array[index] / 2;\n            } else if (array[index] % 2!= 0) {\n                array[index] = (array[index] + 1) / 2;\n            }\n            index++;\n        }\n        if (array.every((v, i) => v == array[i])) {\n            result++;\n        }\n        array.splice(0, array.length);\n    }\n    return result;\n}\n\nconst test = () => {\n    let test_arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550,"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 || lst2.length === 0) return lst1;\n  const max = Math.max(lst1.length, lst2.length);\n  const lst = [];\n  for (let i = 0; i < max; i++) {\n    const min = i < lst1.length? lst1[i].length : lst2[i].length;\n    if (min === 0) {\n      lst.push(lst1[i]);\n    } else if (min === 1) {\n      lst.push(lst1[i][0] + lst2[i]);\n    } else {\n      lst.push(lst1[i][0] + lst1[i].slice(1) + lst2[i].slice(1));\n    }\n  }\n  return lst;\n};\n\nexport default ottalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  let result = false;\n  for (let i = 3; i <= a / 2; i += 2) {\n    if (a % i === 0) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\n/*Write a function that returns true if the given number is the sum of prime numbers and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isSumOfPrimeNumbers(30) == true\n  30 = 3 + 2 + 5\n  */\nconst isSumOfPrimeNumbers = (a) => {\n  let result = false;\n  for (let i = 2; i <= a / 2; i++) {\n    if (a % i === 0) {\n      result = true;\n      break;\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  isMultiplyPirme,\n  isSumOfPrimeNumbers\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  let result = n % 1 === 0? n == Math.pow(x, n) : false\n  return result\n}\n\nmodule.exports = isSimplePwoer<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  if (a % 3 === 0) {\n    return true\n  }\n  return false\n}\n\nconst ispandigital = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispalindrome = (n) => {\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindrome = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube2 = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube3 = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube4 = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube5 = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube6 = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube7 = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()\n  return str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/) && str.match(/^[0-9]{1,3}$/)? true : false\n}\n\nconst ispandigitalpalindromecube8 = (n) => {\n  const digits = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n  const str = n.toString()"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let len = num.length;\n  let prime = 0;\n  let digit = 0;\n  while (len--) {\n    digit = parseInt(num[len], 16);\n    if (prime === 1 && (digit === 2 || digit === 3 || digit === 5 || digit === 7)) {\n      return (prime + 1);\n    }\n    if (digit === 11 || digit === 13) {\n      prime = prime + 1;\n    }\n  }\n  return prime;\n};\n\nconst hexKey1 = (num) => {\n  let len = num.length;\n  let prime = 0;\n  while (len--) {\n    prime = parseInt(num[len], 16);\n    if (prime === 1) {\n      return prime;\n    }\n  }\n  return prime;\n};\n\nconst getPrime = (num) => {\n  let prime = 0;\n  while (prime === 0) {\n    prime = hexKey(num);\n  }\n  return prime;\n};\n\nconst getPrime1 = (num) => {\n  let prime = 0;\n  while (prime === 0) {\n    prime = hexKey1(num);\n  }\n  return prime;\n};\n\nconst testPrime = (num) => {\n  let prime = getPrime(num);\n  return prime === getPrime1(num);\n};\n\nconst getPrimeList = (num) => {\n  let primeList = [];\n  while (primeList.length < (num + 1)) {\n    primeList.push(getPrime(num));\n  }\n  return primeList;\n};\n\nconst testPrimeList = (num) => {\n  let primeList = getPrimeList(num);\n  for (let i = 0; i < primeList.length; i++) {\n    if (primeList[i] === primeList[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconst getPrimeListUnique = (num) => {\n  let primeList = getPrimeList(num);\n  let uniquePrimeList = [];\n  let count = 0;\n  for (let i = 0; i < primeList.length; i++) {\n    if (testPrime(primeList[i])) {\n      uniquePrimeList.push(primeList[i]);\n      count++;\n    }\n  }\n  return uniquePrimeList;\n};\n\nconst testPrimeListUnique = (num) => {\n  let primeList = getPrimeListUnique(num);\n  for (let i = 0; i < primeList.length; i++) {\n    if (primeList[i] === primeList[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n\nconsole.log(testPrimeListUnique(12));\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const digits = decimal.split(\"\");\n  let binary = \"\";\n  for (let i = 0; i < digits.length; i++) {\n    binary += (parseInt(digits[i]) === 0? '0' : '1');\n  }\n  binary += 'db';\n  return binary;\n}\n\n//test\nconst test = (decimal, binary) => {\n  console.log(decimal, \"->\", binary);\n}\n\ntest(15, \"db1111db\");\ntest(32, \"db100000db\");\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let num = 0\n  for (let i = 0; i < s.length; i++) {\n    num = (num + parseInt(s[i])) % 4\n  }\n  return num === 0\n}\n\nexport default isHappy\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const gradesArray = grades.slice()\n  const length = gradesArray.length\n\n  // create the array of strings\n  const arrayOfStrings = []\n\n  // if the length is not divisible by 3 then add empty strings\n  for (let i = 0; i < (length % 3); i++) {\n    arrayOfStrings.push('')\n  }\n\n  // the first 3 grades\n  for (let i = 0; i < 3; i++) {\n    arrayOfStrings.push(gradesArray[i])\n  }\n\n  // the rest of the grades\n  for (let i = 3; i < length; i = i + 3) {\n    const string = `${parseFloat(gradesArray[i])}`\n    const stringLength = string.length\n    const addOne = stringLength % 3\n    let addOneStr = ''\n\n    // if addOne is not 0 then add 1 to the string\n    if (addOne) {\n      addOneStr = `+${addOne}`\n    }\n\n    arrayOfStrings.push(string + addOneStr)\n  }\n\n  // sort the array of strings\n  arrayOfStrings = arrayOfStrings.sort((a, b) => {\n    const aInt = parseFloat(a)\n    const bInt = parseFloat(b)\n    return aInt - bInt\n  })\n\n  // remove the empty strings\n  arrayOfStrings = arrayOfStrings.filter((string) => string!== '')\n\n  // get the length of the array\n  const stringLength = arrayOfStrings.length\n\n  // get the length of the array again\n  const finalLength = stringLength % 3\n\n  // if the length of the array is not divisible by 3 then return the array\n  // with empty strings\n  if (finalLength!== 0) {\n    return arrayOfStrings\n  }\n\n  // if the length of the array is divisible by 3\n  // then return the array with the final grades\n  return arrayOfStrings\n}\n\nconst letterGrade = (grades) => {\n  const result = nmueriaclLetterGrade(grades)\n  return result\n}\n\nconst letterGrade = (grades) => {\n  const gradesArray = grades.slice()\n  const length = gradesArray.length\n  const gradeArray = []\n\n  for (let i = 0; i < length; i++) {\n    gradeArray.push(letterGrade(gradesArray[i]))\n  }\n\n  return gradeArray\n}\n\nmodule.exports = letterGrade\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  return string.length >= 3 && string.length % 2 === 1 && string.indexOf('')!== -1;\n};\n\nexport default primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  const nums = Array.from({ length: n + 1 }, () => 1);\n  let result = 1;\n  for (let i = 1; i <= n; i++) {\n    result += startsOneEnds(nums, i);\n  }\n  return result;\n};\n\nconst startsOneEnds = (nums, n) => {\n  if (n === 1) return 1;\n  if (n === 2) return nums[1];\n  if (n === 3) return nums[2] + nums[3];\n  if (n === 4) return nums[4];\n  return nums[n - 1] + nums[n - 2] + startsOneEnds(nums, n - 3);\n};\n\nconsole.log(startsOneEnds(nums, 10));\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = [1, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768,\n    65536, 131072, 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432,\n    67108864, 134217728, 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592,\n    17179869184, 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776,\n    2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832, 70368744177664,\n    140737488355328, 281474976710656, 562949953421312, 1125899906842624, 2251799813685248,\n    4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968, 72057594037927936,\n    144115188075855872, 288230376151711744, 576460752303423488, 1152921504606846976, 2305843009213693952,\n    4611686018427387904, 9223372036854775808, 18446744073709551616];\n  return digits.reduce((sum, num) => sum + num % 2, 0);\n};\n\nmodule.exports = solve;<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n  return lst.reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\nmodule.exports = add;\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  return s.split(' ').sort((a, b) => {\n    const asciiA = a.charCodeAt(0);\n    const asciiB = b.charCodeAt(0);\n    return asciiA - asciiB;\n  }).join(' ');\n};\n\nconsole.log(antSihuffle('Hello World!!!'));<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  const [row, col] = [x, 0];\n  const size = lst.length;\n  const output = [];\n  \n  for (let i = 0; i < size; i++) {\n    const row_lst = lst[i];\n    let pos = 0;\n    for (let j = 0; j < row_lst.length; j++) {\n      const [c, p] = [col, pos];\n      if (row_lst[j] === row) {\n        output.push([row, p]);\n        break;\n      }\n      pos += 1;\n    }\n  }\n  \n  output.sort((a, b) => {\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    return 0;\n  });\n  \n  output.sort((a, b) => {\n    if (a[1] < b[1]) return -1;\n    if (a[1] > b[1]) return 1;\n    if (a[0] < b[0]) return -1;\n    if (a[0] > b[0]) return 1;\n    return 0;\n  });\n  \n  return output;\n};\n\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 3));\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 4));\nconsole.log(getRow([\n  [1,2,3,4,5,6],\n  [1,2,3,4,1,6],\n  [1,2,3,4,5,1]\n], 5));\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const target = array.slice();\n  const temp = target.slice();\n  const result = [];\n  const sum = (a, b) => a + b;\n  let count = 0;\n  while (count < target.length) {\n    let index = 0;\n    while (index < target.length - count) {\n      let max = 0;\n      let indexMax = 0;\n      for (let i = index; i < index + count; i++) {\n        let sum = sum(target[i], target[i + count]);\n        if (sum > max) {\n          max = sum;\n          indexMax = i;\n        }\n      }\n      temp[indexMax] = target[index];\n      target[indexMax] = target[index + count];\n      target.splice(indexMax, 1);\n      count++;\n    }\n    result.push(target[index]);\n    target = temp;\n  }\n  return result;\n};\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, 2), 1)])\n   .join('')\n}\n\nconst decrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, -2), -1)])\n   .join('')\n}\n\nconst encrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, -2), -1)])\n   .join('')\n}\n\nconst decrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, 2), 1)])\n   .join('')\n}\n\nconst encrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, 2), 1)])\n   .join('')\n}\n\nconst decrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, -2), -1)])\n   .join('')\n}\n\nconst encrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, -2), -1)])\n   .join('')\n}\n\nconst decrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, 2), 1)])\n   .join('')\n}\n\nconst encrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, 2), 1)])\n   .join('')\n}\n\nconst decrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, -2), -1)])\n   .join('')\n}\n\nconst encrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, -2), -1)])\n   .join('')\n}\n\nconst decrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, 2), 1)])\n   .join('')\n}\n\nconst encrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  return s.split('').map((char) => alphabet[rotate(rot(char, 2), 1)])\n   .join('')\n}\n\nconst decrypt = (s) => {\n  const rot = (a, b) => (a + b + 1) % 26\n  const rotate = (a, b) => a + b - 26\n  const alphabet = 'abcdefghijkl"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  let index = -1\n  let result = null\n  let min = Number.MAX_SAFE_INTEGER\n  lst.forEach(e => {\n    if (e > min) {\n      min = e\n      index = lst.indexOf(e)\n    }\n  })\n  if (index!== -1) {\n    result = lst[index + 1]\n  }\n  return result\n}\n\nconsole.log(nextSmallset([1, 2, 3, 4, 5]))\nconsole.log(nextSmallset([5, 1, 4, 3, 2]))\nconsole.log(nextSmallset([1, 1]))\nconsole.log(nextSmallset([1, 2, 3]))\nconsole.log(nextSmallset([1, 2, 3, 4, 5, 6, 7]))\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n    let Boredoms = 0;\n    for(let i = 0; i < S.length; i++) {\n        let ch = S[i];\n        if(ch == '.' || ch == '?' || ch == '!') {\n            Boredoms++;\n            i--;\n        }\n    }\n    return Boredoms;\n};\n\n/*\n  You'll be given a string of words, and your task is to count the number\n  of Boredoms. A boredom is a sentence that starts with the word \"I\".\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n */\nconst isBored = (S) => {\n    let Boredoms = 0;\n    for(let i = 0; i < S.length; i++) {\n        let ch = S[i];\n        if(ch == 'i') {\n            Boredoms++;\n            i--;\n        }\n    }\n    return Boredoms;\n};\n\nmodule.exports = {\n    isBoerd,\n    isBored\n};\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  if (x % 1!== 0) return false\n  if (y % 1!== 0) return false\n  if (z % 1!== 0) return false\n  return (x + y === z) || (x + z === y) || (z + y === x)\n}\n\n/*\n  Return a random number between 0 and 10, inclusive.\n  Examples\n  randomInt(5) ➞ 4\n  randomInt(10) ➞ 7\n  randomInt(20) ➞ 9\n  randomInt(10, 5) ➞ 6\n  randomInt(10, 20) ➞ 7\n  randomInt(20, 10) ➞ 9\n  */\nconst randomInt = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n\n/*\n  Return a random integer between min and max, inclusive.\n  Examples\n  randomInt(5, 10) ➞ 8\n  randomInt(10, 20) ➞ 13\n  randomInt(20, 30) ➞ 23\n  randomInt(5, 10, 15) ➞ 14\n  randomInt(5, 10, 20) ➞ 18\n  */\nconst randomIntBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n\n/*\n  Return a random number between min and max, inclusive.\n  Examples\n  randomIntBetween(5, 10) ➞ 8\n  randomIntBetween(10, 20) ➞ 13\n  randomIntBetween(20, 30) ➞ 23\n  randomIntBetween(5, 10, 15) ➞ 14\n  randomIntBetween(5, 10, 20) ➞ 18\n  */\nconst randomIntBetweenInclusive = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n\n/*\n  Return a random integer between min and max, inclusive.\n  Examples\n  randomIntInclusive(5, 10) ➞ 8\n  randomIntInclusive(10, 20) ➞ 13\n  randomIntInclusive(20, 30) ➞ 23\n  randomIntInclusive(5, 10, 15) ➞ 14\n  randomIntInclusive(5, 10, 20) ➞ 18\n  */\nconst randomIntInclusiveBetween = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min\n\n/*\n  Return a random number between min and max, exclusive.\n  Examples\n  randomIntExclusive(5, 10) ➞ 7\n  randomIntExclusive(10, 20) ➞ 12\n  randomIntExclusive(20, 30) ➞ 22\n  randomIntExclusive(5, 10, 15) ➞ 14\n  randomIntExclusive(5, 10, 20) ➞ 17\n  */\nconst randomIntExclusive = (min, max) => Math.floor(Math.random() * (max - min)) + min\n\n/*\n  Return a random integer between min and max, exclusive.\n  Examples\n  randomIntExclusive(5, 10) ➞ 7\n  randomIntExclusive(10, 20) ➞ 12\n  randomIntExclusive(20, 30) ➟ 22\n  randomIntExclusive(5, 10, 15) ➟ 14\n  randomIntExclusive(5, 10, 20) ➟ 17\n  */\nconst randomIntExclusiveBetween = (min, max) => Math.floor(Math.random() * (max - min)) + min\n\n/*\n  Return a random number between min and max, exclusive.\n  Examples\n  randomIntExclusiveBetween(5, 10) ➟ 7\n  randomIntExclusiveBetween(10, 20) ➟ 12\n  randomIntExclusiveBetween(20, 30) ➟ 22\n  randomIntExclusiveBetween(5, 10, 15) ➟ 14\n  randomIntExclusiveBetween(5, 10, 20) ➟ 17\n  */\nconst randomIntExclusiveBetweenInclusive = (min, max) => Math.floor(Math.random() * (max - min)) + min\n\n/*\n  Return a random number between min and max, exclusive.\n  Examples\n  randomIntExclusiveBetweenInclusive(5, 10) ➟ 7\n  randomIntExclusiveBetweenInclusive(10, 20) ➟ 12\n  randomIntExclusiveBetweenInclusive(20, 30) ➟ 22\n  randomIntExclusiveBetweenInclusive(5, 10, 15) ➟ 14\n  randomIntExclusiveBetweenInclusive(5, 10, 20) ➟ 17\n  */\nconst randomIntExclusiveBetweenInclusiveBetween = (min, max) => Math.floor(Math.random() * (max - min)) + min\n\n/*\n  Return a random number between min and max, inclusive.\n  Examples\n  randomIntExclusiveBetweenInclusiveBetween(5, 10) ➟ 8\n  randomIntExclusiveBetweenInclusiveBetween(10, 20) ➟ 13\n  randomIntExclusiveBetweenInclusiveBetween(20, 30) ➟ 23\n  randomIntExclusiveBetweenInclusiveBetween(5, 10, 15) ➟ 14\n  randomIntExclusiveBetweenInclusiveBetween(5, 10, 20) ➟ 18\n  */\nconst randomIntExclusiveBetweenInclusiveBetweenInclusive = (min, max) => Math.floor(Math.random() * (max - min)) + min\n\n/*\n  Return a random integer between min and max, inclusive.\n  Examples\n  randomIntExclusiveBetweenInclusiveBetweenInclusive(5, 10) ➟ 8\n  randomIntExclusiveBetweenInclusiveBetweenInclusive(10, 20) ➟ 13\n  randomIntExclusiveBetweenInclusiveBetweenInclusive(20, 30) ➟ 23\n  randomIntExclusiveBetweenInclusiveBetweenInclusive(5, 10, 15) ➟ 14\n  randomIntExclusiveBetweenInclusiveBetweenInclusive(5, 10, 20) ➟ 18\n  */"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  let s = '';\n  for (let i = 0; i < message.length; i++) {\n    let c = message[i].toLowerCase();\n    if (c === 'v') {\n      if (i < message.length - 1) {\n        let next = message[i + 1].toLowerCase();\n        if (next === 'o') {\n          c = 'o';\n          i++;\n        } else if (next === 'a') {\n          c = 'a';\n          i++;\n        } else if (next === 'e') {\n          c = 'e';\n          i++;\n        }\n      }\n    }\n    s += c;\n  }\n  return s;\n};\n\nconst decode = (message) => {\n  let s = '';\n  for (let i = 0; i < message.length; i++) {\n    let c = message[i];\n    if (c === 'o') {\n      c = 'v';\n    } else if (c === 'a') {\n      c = 'v';\n    } else if (c === 'e') {\n      c = 'v';\n    }\n    s += c;\n  }\n  return s;\n};\n\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a test message'));\nconsole.log(decode('THKSKS C MGSSCGG'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n    if (!lst) {\n        return 0;\n    }\n    const max = Math.max(...lst);\n    const maxDigits = max.toString().length;\n    const result = lst.reduce((acc, val, idx) => {\n        if (val === max) {\n            return acc + val.toString().split('').reduce((a, b) => a + b, 0);\n        }\n        return acc;\n    }, 0);\n    return maxDigits === 1? max : result;\n};\n\nconst findPrime = (n) => {\n    let nPrime = n;\n    while (nPrime > 1) {\n        if (isPrime(nPrime)) {\n            return nPrime;\n        }\n        nPrime--;\n    }\n    return false;\n};\n\nconst isPrime = (n) => {\n    if (n <= 1) {\n        return false;\n    }\n    let counter = 2;\n    while (counter < n) {\n        if (n % counter == 0) {\n            return false;\n        }\n        counter++;\n    }\n    return true;\n};\n\nmodule.exports = ksjkasddk;\n<|endoftext|>"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n  for (let key in dict) {\n    if (key!== key.toLowerCase() && key!== key.toUpperCase()) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst isDictCase = (dict) => checkDictCase(dict);\n\n/*\n  Given a dictionary, return true if all values are strings in lower \n  case or all values are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValueCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key].toLowerCase()!== dict[key] && dict[key].toUpperCase()!== dict[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst isDictValueCase = (dict) => checkDictValueCase(dict);\n\n/*\n  Given a dictionary, return true if all keys and values are strings \n  in lower case or all keys and values are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseValueCase = (dict) => {\n  for (let key in dict) {\n    if (dict[key].toLowerCase()!== dict[key] && dict[key].toUpperCase()!== dict[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst isDictCaseValueCase = (dict) => checkDictCaseValueCase(dict);\n\nmodule.exports = {\n  isDictCase,\n  isDictValueCase,\n  isDictCaseValueCase\n};\n<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const a = []\n  for (let i = 1; i <= n; i++) {\n    a.push(i)\n  }\n  for (let i = 1; i < a.length; i++) {\n    if (a[i] % 2 === 0) {\n      continue\n    }\n    const j = i + 1\n    while (j < a.length) {\n      if (a[j] % 2 === 0) {\n        break\n      }\n      j++\n    }\n    if (j < a.length) {\n      a.splice(i, j - i + 1)\n    }\n  }\n  return a\n}\n\nmodule.exports = countUpTo\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n    if (a < 0) {\n        return 0;\n    }\n\n    if (b < 0) {\n        return 0;\n    }\n\n    if (a === 0) {\n        return 0;\n    }\n\n    if (b === 0) {\n        return 0;\n    }\n\n    if (a < b) {\n        return multiply(b, a);\n    }\n\n    let product = 1;\n\n    for (let i = a; i >= 0; i -= b) {\n        product *= i;\n    }\n\n    return product;\n};\n\nmultiply(20, 19);\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  const upper = s.toUpperCase();\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += upper[i] === upper[i + 1]? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countLower = (s) => {\n  const lower = s.toLowerCase();\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += lower[i] === lower[i + 1]? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countDigits = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === s[i + 1]? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countPunctuation = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === s[i + 1]? 0 : 1;\n  }\n\n  return count;\n};\n\nconst countVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countUpperVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countLowerVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countDigitsVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === '0' || s[i] === '1' || s[i] === '2' || s[i] === '3' || s[i] === '4' || s[i] === '5' || s[i] === '6' || s[i] === '7' || s[i] === '8' || s[i] === '9'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countPunctuationVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === '!' || s[i] === '?' || s[i] === '.' || s[i] === ',' || s[i] === ':' || s[i] === ';' || s[i] === '!' || s[i] === '?' || s[i] === '.' || s[i] === ',' || s[i] === ':' || s[i] === ';'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countUpperPunctuationVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === '!' || s[i] === '?' || s[i] === '.' || s[i] === ',' || s[i] === ':' || s[i] === ';' || s[i] === '!' || s[i] === '?' || s[i] === '.' || s[i] === ',' || s[i] === ':' || s[i] === ';'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countLowerPunctuationVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countAllVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === 'A' || s[i] === 'E' || s[i] === 'I' || s[i] === 'O' || s[i] === 'U'? 1 : 0;\n    count += s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u'? 1 : 0;\n  }\n\n  return count;\n};\n\nconst countAllPunctuationVowels = (s) => {\n  const count = 0;\n\n  for (let i = 0; i < s.length; i += 2) {\n    count += s[i] === '!' || s[i] === '?' || s[i] === '.' || s[i] === ',' || s[i] === ':' || s[i] === ';' || s[i] === '!' || s[i] === '?' || s[i] === '.' || s[i"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  let num = parseInt(value)\n  let diff = Math.abs(num - Math.floor(num))\n  if (diff == 0) {\n    return num\n  } else if (diff < 0.5) {\n    return Math.floor(num)\n  } else {\n    return Math.ceil(num)\n  }\n}\n\nmodule.exports = closestInetger\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  let m = Math.floor(n/2);\n  let pile = [n];\n  while (m > 1) {\n    pile.push(Math.ceil(Math.sqrt(n)));\n    n = n - pile[pile.length-1]*pile[pile.length-1];\n    m--;\n  }\n  return pile;\n}\n\n//# sourceMappingURL=makeAPile.js.map<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.trim().split(/(?=[^, ]*(?=,|$))/).filter(w => w.length > 0)\n}\n\n/*\n  You will be given an array of words. Your task is to split the words\n  into an array of strings and return the array.\n  \n  For example:\n  wordsToStrings([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsToStrings([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsToStrings = (words) => {\n  return words.map(w => w.trim())\n}\n\n/*\n  You will be given an array of words. Your task is to split the words\n  into an array of strings and return the array.\n  \n  For example:\n  wordsToStrings([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsToStrings([\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]) == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsToStringsArray = (words) => {\n  return words.map(w => w.trim().split(''))\n}\n\n/*\n  You will be given a string of words. Your task is to split the string into an array of\n  strings and return the array.\n  \n  For example:\n  wordsToStringsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsToStringsArray = (s) => {\n  return s.trim().split(/(?=[^, ]*(?=,|$))/).filter(w => w.length > 0)\n}\n\n/*\n  You will be given an array of words. Your task is to split the words\n  into an array of strings and return the array.\n  \n  For example:\n  wordsToStringsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsToStringsArray = (words) => {\n  return words.map(w => w.trim().split(''))\n}\n\n/*\n  You will be given a string of words. Your task is to split the string into an array of\n  strings and return the array.\n  \n  For example:\n  wordsToStringsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsToStringsArray = (s) => {\n  return s.trim().split(/(?=[^, ]*(?=,|$))/).filter(w => w.length > 0)\n}\n\n/*\n  You will be given an array of words. Your task is to split the words\n  into an array of strings and return the array.\n  \n  For example:\n  wordsToStringsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsToStringsArray = (words) => {\n  return words.map(w => w.trim().split(''))\n}\n\n/*\n  You will be given an array of words. Your task is to split the words\n  into an array of strings and return the array.\n  \n  For example:\n  wordsToStringsArray([\"Hi\", \"my\", \"name\", \"is\", \"John\"]) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  */\nconst wordsToStringsArray = (words) => {\n  return words.map(w => w.trim().split(''))\n}\n<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  if (x > y) {\n    return -1;\n  }\n\n  const max = x;\n  let xi = x;\n  let yi = y;\n\n  while (xi <= yi) {\n    if (yi % xi === 0) {\n      return xi;\n    }\n    yi += (yi % xi === 0)? 1 : 0;\n  }\n\n  return -1;\n};\n\nconst test = {\n  chooseNum(12, 15)\n};\n\nconsole.log(test.chooseNum(12, 15));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const x = (n + m) / 2\n  return (Math.round(x) + 'b').slice(0, -1)\n}\n\nconst isPalindrome = str => {\n  return str.split('').reverse().join('') === str\n}\n\nconst average = (a, b) => {\n  if (a > b) return -1\n  let x = (a + b) / 2\n  let y = roundedAvg(x, x + 1)\n  if (isPalindrome(y)) return x\n  else return average(x, x + 1)\n}\n\nconsole.log(average(1, 5))\nconsole.log(average(7, 5))\nconsole.log(average(10, 20))\nconsole.log(average(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  let xs = x.filter(x => x%2 == 0);\n  let res = [];\n  for(let i = 0; i < xs.length; i++){\n    let x_tmp = xs[i];\n    while(x_tmp > 0){\n      let n = x_tmp % 10;\n      if(n > 5 && n < 9){\n        res.push(x_tmp);\n        break;\n      }\n      x_tmp = x_tmp / 10;\n    }\n  }\n  return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  if (!arr || arr.length === 0) return 0\n  let length = 0\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] < 10) {\n      length += 1\n    } else if (arr[i] < 100) {\n      length += 2\n    } else {\n      length += 3\n    }\n  }\n  return length\n}\n\nconst sortAndReverse = (arr) => {\n  if (!arr || arr.length === 0) return []\n  let arrLength = ybLength(arr)\n  let reversedArr = arr.slice().reverse()\n  let sortedArr = reversedArr.sort((a, b) => a - b)\n  let sortedArrLength = ybLength(sortedArr)\n  let oneDigits = 0\n  let twoDigits = 0\n  let threeDigits = 0\n  let fourDigits = 0\n  let fiveDigits = 0\n  let sixDigits = 0\n  let sevenDigits = 0\n  let eightDigits = 0\n  let nineDigits = 0\n  for (let i = 0; i < sortedArr.length; i++) {\n    if (sortedArr[i] < 10) {\n      oneDigits += 1\n    } else if (sortedArr[i] < 100) {\n      twoDigits += 1\n    } else {\n      threeDigits += 1\n    }\n    if (sortedArr[i] < 10) {\n      fourDigits += 1\n    } else if (sortedArr[i] < 100) {\n      fiveDigits += 1\n    } else {\n      sixDigits += 1\n    }\n    if (sortedArr[i] < 10) {\n      sevenDigits += 1\n    } else if (sortedArr[i] < 100) {\n      eightDigits += 1\n    } else {\n      nineDigits += 1\n    }\n  }\n  return [\n    {\n      \"name\": \"One\",\n      \"value\": oneDigits\n    },\n    {\n      \"name\": \"Two\",\n      \"value\": twoDigits\n    },\n    {\n      \"name\": \"Three\",\n      \"value\": threeDigits\n    },\n    {\n      \"name\": \"Four\",\n      \"value\": fourDigits\n    },\n    {\n      \"name\": \"Five\",\n      \"value\": fiveDigits\n    },\n    {\n      \"name\": \"Six\",\n      \"value\": sixDigits\n    },\n    {\n      \"name\": \"Seven\",\n      \"value\": sevenDigits\n    },\n    {\n      \"name\": \"Eight\",\n      \"value\": eightDigits\n    },\n    {\n      \"name\": \"Nine\",\n      \"value\": nineDigits\n    }\n  ]\n}\n\nmodule.exports = sortAndReverse\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const arr = []\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      arr.push(Math.pow(i, i))\n    } else {\n      arr.push(i)\n      arr.push(i * (i - 1))\n    }\n  }\n\n  return arr\n}\n\n// Test\nconsole.log(f(5))\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  if (n === 1) return [1, 1]\n\n  let odd = 0\n  let even = 0\n  for (let i = 1; i < n; i++) {\n    let a = (i + 1) % 2\n    let b = (n - i) % 2\n    if (a === b) {\n      odd += 1\n    } else if (a!== b) {\n      even += 1\n    }\n  }\n\n  return [odd, even]\n}\n\nconsole.log(evenOddPalindrome(3))\nconsole.log(evenOddPalindrome(12))\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    let num = arr[i];\n    let isNeg = num < 0;\n    let negDigits = isNeg? num.toString(10).slice(1) : num.toString(10);\n    let digits = negDigits.split('').map((digit) => {\n      return parseInt(digit, 10);\n    });\n    let total = digits.reduce((a, b) => {\n      return a + b;\n    });\n    if (total > 0) {\n      result++;\n    }\n  }\n  return result;\n};\n\nmodule.exports = countNmus;\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  const len = arr.length;\n  if (len === 0) {\n    return true;\n  }\n  let i = 0;\n  let j = len - 1;\n  while (i <= j) {\n    while (j > 0 && arr[j] < arr[j - 1]) {\n      j--;\n    }\n    while (i < len - 1 && arr[i] > arr[i + 1]) {\n      i++;\n    }\n    if (i < j) {\n      const tmp = arr[i];\n      arr[i] = arr[j];\n      arr[j] = tmp;\n      i++;\n      j--;\n    }\n  }\n  return i === len - 1 && j === 0;\n}\n\nconsole.log(moveOneBall([3, 4, 5, 1, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  if (!lst1.length ||!lst2.length) return 'NO';\n  const lst = [];\n  const i = 0;\n  const j = 0;\n  while (i < lst1.length && j < lst2.length) {\n    if (lst1[i] % 2 === 0 && lst2[j] % 2 === 1) {\n      lst.push(lst1[i] * lst2[j]);\n      i++;\n      j++;\n    } else if (lst1[i] % 2 === 1 && lst2[j] % 2 === 0) {\n      lst.push(lst1[i] * lst2[j]);\n      j++;\n    } else {\n      i++;\n    }\n  }\n  if (i < lst1.length) {\n    for (; i < lst1.length; i++) {\n      lst.push(lst1[i]);\n    }\n  }\n  if (j < lst2.length) {\n    for (; j < lst2.length; j++) {\n      lst.push(lst2[j]);\n    }\n  }\n  return lst.every(e => e % 2 === 0)? 'YES' : 'NO';\n};\nconsole.log(xechange([1, 2, 3, 4], [1, 5, 3, 4]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4]));\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4, 5]));\nconsole.log(xechange([1, 2, 3, 4, 5], [1, 2, 3, 4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  const letters = test.split(' ')\n  const dict = {}\n  for (let i = 0; i < letters.length; i++) {\n    if (dict[letters[i]] === undefined) {\n      dict[letters[i]] = 1\n    } else {\n      dict[letters[i]] += 1\n    }\n  }\n  return dict\n}\n\nmodule.exports = histogram\n<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  const cLen = c.length;\n  const sLen = s.length;\n\n  let revStr = '';\n  let i = 0;\n  while (i < sLen) {\n    const char = s[i];\n    const index = c.indexOf(char);\n\n    if (index!== -1) {\n      const revIndex = sLen - 1 - index;\n      revStr = revStr + s[revIndex];\n      i = i + 1;\n      s.splice(i, 1);\n    } else {\n      i = i + 1;\n    }\n  }\n  return [revStr, s.toString() === revStr];\n};\n\nmodule.exports = reveresDelete;\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const counts = new Map();\n  lst.forEach((s, i) => {\n    if (counts.has(s)) {\n      counts.set(s, counts.get(s) + 1);\n    } else {\n      counts.set(s, 1);\n    }\n  });\n\n  const output = [];\n  for (const [key, count] of counts) {\n    output.push(`the number of odd elements ${count} ${key}`);\n  }\n  return output;\n};\n\nexport { oddCount };\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  let sum = 0;\n  for (let i = 0; i < nums.length; i++) {\n    sum += nums[i];\n    if (sum < 0) {\n      sum = 0;\n    }\n    if (sum > 0) {\n      for (let j = i; j < nums.length; j++) {\n        sum -= nums[j];\n      }\n    }\n  }\n  return sum;\n};\n\nconsole.log(minSubArraySum([2, 3, 4, 1, 2, 4])); // 1\nconsole.log(minSubArraySum([-1, -2, -3])); // -6<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  const result = [];\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const fill = grid[0][0];\n  const res = 0;\n  for (let i = 0; i < rows; i++) {\n    const row = grid[i];\n    for (let j = 0; j < cols; j++) {\n      if (fill === row[j]) {\n        res += fill;\n        if (res >= capacity) {\n          break;\n        }\n        fill = row[j];\n        result.push(fill);\n      }\n    }\n  }\n  return result;\n};\n\nconst count = (grid, capacity) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const fill = grid[0][0];\n  const res = 0;\n  for (let i = 0; i < rows; i++) {\n    const row = grid[i];\n    for (let j = 0; j < cols; j++) {\n      if (fill === row[j]) {\n        res += fill;\n        if (res >= capacity) {\n          break;\n        }\n        fill = row[j];\n      }\n    }\n  }\n  return res;\n};\n\nconst nth = (grid, n) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const fill = grid[0][0];\n  const res = 0;\n  for (let i = 0; i < rows; i++) {\n    const row = grid[i];\n    for (let j = 0; j < cols; j++) {\n      if (fill === row[j]) {\n        res += fill;\n        if (res >= n) {\n          break;\n        }\n        fill = row[j];\n      }\n    }\n  }\n  return res;\n};\n\nconst find = (grid, capacity, n) => {\n  const rows = grid.length;\n  const cols = grid[0].length;\n  const fill = grid[0][0];\n  const res = 0;\n  for (let i = 0; i < rows; i++) {\n    const row = grid[i];\n    for (let j = 0; j < cols; j++) {\n      if (fill === row[j]) {\n        res += fill;\n        if (res >= capacity) {\n          break;\n        }\n        fill = row[j];\n      }\n    }\n  }\n  return res;\n};\n\nconst test = (grid, capacity, n) => {\n  const result = count(grid, capacity);\n  const res = find(grid, capacity, n);\n  console.log(`${result} ${res}`);\n};\n\nconst grid = [[0, 0, 1, 0], [0, 1, 0, 0], [1, 1, 1, 1]];\nconst capacity = 1;\nconst n = 2;\ntest(grid, capacity, n);\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  return arr.sort((a, b) => {\n    if (a > b) return 1\n    if (a < b) return -1\n    return 0\n  })\n}\n\nexport default sortArray\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n    const words = [];\n    const lastIndex = s.length - 1;\n    const left = 0;\n    const right = lastIndex;\n    const word = '';\n\n    while (left <= right) {\n        word = s.slice(left, right + 1);\n        if (word.length === n) {\n            words.push(word);\n        }\n\n        if (left === lastIndex) {\n            break;\n        }\n\n        if (n === 0) {\n            right = lastIndex;\n            left = right + 1;\n            break;\n        }\n\n        if (n > 0) {\n            if (n > 1) {\n                n--;\n            }\n\n            const middle = (lastIndex + left + 1) / 2;\n            const next = middle + 1;\n            if (next === right) {\n                break;\n            }\n\n            if (s[next] ==='') {\n                if (n === 1) {\n                    right = middle;\n                    break;\n                }\n\n                n--;\n            }\n\n            if (s[next] === s[left]) {\n                right = middle;\n            }\n\n            if (s[next] < s[left]) {\n                left = middle;\n            }\n\n            if (s[next] > s[left]) {\n                right = middle;\n            }\n\n            if (s[left] ==='') {\n                right = middle;\n            }\n\n            if (s[left] < s[right]) {\n                right = middle;\n            }\n\n            if (s[left] > s[right]) {\n                left = middle;\n            }\n        }\n    }\n\n    return words;\n};\n\nconsole.log(selectWdors('Mary had a little lamb', 4));\nconsole.log(selectWdors('Mary had a little lamb', 3));\nconsole.log(selectWdors('simple white space', 2));\nconsole.log(selectWdors('Hello world', 4));\nconsole.log(selectWdors('Uncle sam', 3));<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  const word = word.toLowerCase();\n  const vowels = ['a', 'e', 'i', 'o', 'u'];\n  let index = -1;\n  let vowel = null;\n  let min = Infinity;\n  vowels.forEach((v, i) => {\n    const diff = Math.abs(word.length - (i + 1));\n    if (word[diff] === v) {\n      if (diff < min) {\n        min = diff;\n        index = i;\n        vowel = v;\n      }\n    }\n  });\n  return vowel;\n}\n\nmodule.exports = getClossetVowel;<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const stack = []\n  const len = lst.length\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length > 0) {\n        stack.pop()\n      } else {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length === 0) return 'Yes'\n  return 'No'\n}\n\nexport default matchParens\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  let result = [...new Set(arr.slice(0, k))]\n  if (k < arr.length) {\n    result.sort((a, b) => a - b)\n  }\n  return result\n}\n\nconst test = () => {\n  let arr = [-3, -4, 5]\n  let k = 3\n  console.log(maxmium(arr, k))\n  arr = [4, -4, 4]\n  k = 2\n  console.log(maxmium(arr, k))\n  arr = [-3, 2, 1, 2, -1, -2, 1]\n  k = 1\n  console.log(maxmium(arr, k))\n}\n\nconst main = () => {\n  test()\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  let sum = 0;\n  lst.forEach(n => {\n    if (n % 2 === 0) {\n      sum += n;\n    }\n  });\n  return sum;\n}\n\nconsole.log(solution([5, 8, 7, 1])); // 12\nconsole.log(solution([3, 3, 3, 3, 3])); // 9\nconsole.log(solution([30, 13, 24, 321])); // 0\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let result = 0\n  for (let i = 0; i < k; i++) {\n    result += arr[i]\n  }\n  return result\n}\n\nconsole.log(addElements([111,21,3,4000,5,6,7,8,9], 4))\n<|endoftext|>"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const res = [];\n  const oddList = [];\n  const cur = n;\n  while (cur > 1) {\n    const next = cur % 2 === 0? cur / 2 : (cur + 1) / 2;\n    oddList.push(cur);\n    res.push(next);\n    cur = next;\n  }\n  res.push(1);\n  res = res.concat(oddList);\n  return res;\n};\n\nconsole.log(getOddCollatz(10));\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if(date === '') return false;\n  const m = date.match(/^(0[1-9]|1[0-2])\\-([0-1]?[0-9])\\-([0-9]{2})([0-9]{4})?$/);\n  if(!m) return false;\n  const month = parseInt(m[2]);\n  const day = parseInt(m[3]);\n  const year = parseInt(m[4] || '');\n  if(month < 1 || month > 12) return false;\n  if(day < 1 || day > 31) return false;\n  if(month == 4 || month == 6 || month == 9 || month == 11) {\n    if(day > 30) return false;\n  }\n  if(month == 2) {\n    if(day > 29) return false;\n  }\n  return true;\n};\n\nexport default validDate;<|endoftext|>"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  let split = txt.split(/\\s/);\n  let split2 = split.map(word => word.split(/[,\\W]/).filter(word => word.length > 0));\n  return split2;\n};\n\n/*\n  Given a list of words, return the number of words in the list that are consonant-vowel pairs\n  Examples\n  countConsonantVowels([\"a\", \"b\", \"c\", \"d\"]) ➞ 3\n  */\nconst countConsonantVowels = (words) => {\n  let consonantVowelCount = 0;\n  words.forEach(word => {\n    let consonantVowelCount = consonantVowelCount + countConsonantVowels(word.split(\"\"));\n  });\n  return consonantVowelCount;\n};\n\n/*\n  Given a string, return a list of characters split on whitespace, if no whitespaces exists in the text you should split on\n  commas ',' if no commas exists you should return the number of lower-case letters with odd order in the alphabet,\n  ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitLetters(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \",\"w\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n  splitLetters(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \",\"w\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n  splitLetters(\"abcdef\") == 3\n  */\nconst splitLetters = (txt) => {\n  let split = txt.split(/\\s/);\n  let split2 = split.map(word => word.split(/[,\\W]/).filter(word => word.length > 0));\n  return split2;\n};\n\nconst countLetters = (txt) => {\n  let letterCount = 0;\n  txt.split(\"\").forEach(word => {\n    letterCount = letterCount + word.length;\n  });\n  return letterCount;\n};\n\n/*\n  Given a string, return a list of words with only one letter per word\n  Examples\n  singleLetterWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  */\nconst singleLetterWords = (txt) => {\n  let split = txt.split(/\\s/);\n  let split2 = split.map(word => word.split(/[,\\W]/).filter(word => word.length > 0));\n  return split2;\n};\n\n/*\n  Given a string, return a list of consonant-vowel-letter sequences split on whitespace, if no whitespaces exists in the\n  text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd\n  order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitConsonantVowelLetters(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n  splitConsonantVowelLetters(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n  splitConsonantVowelLetters(\"abcdef\") == 3\n  */\nconst splitConsonantVowelLetters = (txt) => {\n  let split = txt.split(/\\s/);\n  let split2 = split.map(word => word.split(/[,\\W]/).filter(word => word.length > 0));\n  return split2;\n};\n\n/*\n  Given a string, return a list of consonant-vowel-letter sequences split on whitespace, if no whitespaces exists in the\n  text you should split on commas ',' if no commas exists you should return the number of lower-case letters with odd\n  order in the alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitConsonantVowelLetters(\"Hello world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n  splitConsonantVowelLetters(\"Hello,world!\") ➞ [\"h\", \"e\", \"l\", \"l\", \"o\", \" \", \"w\", \"o\", \"r\", \"l\", \"d\", \"!\"]\n  splitConsonantVowelLetters(\"abcdef\") == 3\n  */\nconst splitLetters = (txt) => {\n  let split = txt.split(/\\s/);\n  let split2 = split.map(word => word.split(/[,\\W]/).filter(word => word.length > 0));\n  return split2;\n};\n\nconst words = splitWords(\"Hello world!\");\nconsole.log(words);\nconsole.log(countLetters(words[0]));\nconsole.log(countConsonantVowels(words));\nconsole.log(splitConsonantVowelLetters(words[0]));\nconsole.log(splitLetters(words[0]));\nconsole.log(singleLetterWords(words[0]));<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  // if list has no elements return true\n  if (!lst.length) return true;\n\n  // create a new array of just the values\n  const values = lst.map((n) => n);\n\n  // sort the values\n  values.sort();\n\n  // if they are equal return true\n  if (values.every(x => x === values[values.length - 1])) return true;\n\n  // if they are not equal return false\n  return false;\n};\n\nexport default isSorted;\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  if (interval1[1] < interval2[0] || interval2[1] < interval1[0]) {\n    return \"NO\";\n  }\n\n  let result = 1;\n  for (let i = interval1[0]; i <= interval2[1]; i++) {\n    result = Math.pow(i, 2);\n    if (result > interval1[1] || result > interval2[1]) {\n      break;\n    }\n  }\n\n  if (result!== 1) {\n    return \"YES\";\n  }\n\n  return \"NO\";\n};\n\nconst test = {\n  intersection((1, 2), (2, 3)),\n  intersection((-1, 1), (0, 4)),\n  intersection((-3, -1), (-5, 5))\n};\n\nmodule.exports = {\n  intersection,\n  test\n};\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  const len = arr.length\n  const prod = arr.reduce((sum, elem) => {\n    if (elem > 0) {\n      sum += 1\n    } else if (elem < 0) {\n      sum -= 1\n    }\n    return sum\n  }, 0)\n  if (prod === 0) {\n    return null\n  }\n  const sum = arr.reduce((sum, elem) => {\n    const absElem = Math.abs(elem)\n    if (absElem > 0) {\n      sum += 1\n    } else if (absElem < 0) {\n      sum -= 1\n    }\n    return sum\n  }, 0)\n  return prod * sum\n}\n\nmodule.exports = prodSigsn\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n    if (!grid || grid.length === 0) return [];\n    const [n, m] = grid.length;\n    const visited = new Array(n * m);\n    const ans = new Array(k);\n    const dfs = (r, c, path, d) => {\n        const idx = (r * m + c) * k;\n        if (visited[idx] || d === k) return;\n        visited[idx] = true;\n        ans[d] = grid[r][c];\n        for (let i = 0; i < m; ++i) {\n            if (r + i < 0 || r + i >= n || c + i < 0 || c + i >= m) continue;\n            dfs(r + i, c + i, path + 1, d + 1);\n        }\n        visited[idx] = false;\n    };\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            dfs(i, j, 0, 1);\n        }\n    }\n    return ans;\n};\n\nconst minPath1 = (grid, k) => {\n    if (!grid || grid.length === 0) return [];\n    const [n, m] = grid.length;\n    const visited = new Array(n * m);\n    const ans = new Array(k);\n    const dfs = (r, c, path, d) => {\n        const idx = (r * m + c) * k;\n        if (visited[idx] || d === k) return;\n        visited[idx] = true;\n        ans[d] = grid[r][c];\n        for (let i = 0; i < m; ++i) {\n            if (r + i < 0 || r + i >= n || c + i < 0 || c + i >= m) continue;\n            dfs(r + i, c + i, path + 1, d + 1);\n        }\n        visited[idx] = false;\n    };\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            dfs(i, j, 0, 1);\n        }\n    }\n    return ans;\n};\n\nconst minPath2 = (grid, k) => {\n    if (!grid || grid.length === 0) return [];\n    const [n, m] = grid.length;\n    const visited = new Array(n * m);\n    const ans = new Array(k);\n    const dfs = (r, c, path, d) => {\n        const idx = (r * m + c) * k;\n        if (visited[idx] || d === k) return;\n        visited[idx] = true;\n        ans[d] = grid[r][c];\n        for (let i = 0; i < m; ++i) {\n            if (r + i < 0 || r + i >= n || c + i < 0 || c + i >= m) continue;\n            dfs(r + i, c + i, path + 1, d + 1);\n        }\n        visited[idx] = false;\n    };\n    for (let i = 0; i < m; ++i) {\n        for (let j = 0; j < n; ++j) {\n            dfs(i, j, 0, 1);\n        }\n    }\n    return ans;\n};\n\nmodule.exports = {\n    minPath: minPath,\n    minPath1: minPath1,\n    minPath2: minPath2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n    let seq = [1, 3, 2];\n    if (n === 1) return seq;\n    let p = 3;\n    let s = seq;\n    while (n > 1) {\n        let temp = p;\n        p = p + 2 * p + 1;\n        seq.push(p);\n        n--;\n        s.unshift(p);\n    }\n    return s;\n};\nconsole.log(tir(9));\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let s = \"\"\n    while (n) {\n        s = s + n % 10\n        n = Math.floor(n / 10)\n    }\n    if (s.length === 0) return 0\n    return s.slice(0, s.length - 1)\n}\n\nconst calculate = (n) => {\n    let digits = \"\"\n    while (n) {\n        digits = digits + n % 10\n        n = Math.floor(n / 10)\n    }\n    return digits\n}\n\nconst test = (n) => {\n    return n % 2 === 1 && n > 1\n}\n\nconst check = (n) => {\n    return n === 0\n}\n\nconst main = () => {\n    let n = 2\n    let sum = 0\n    while (n < 10000000) {\n        if (test(n)) {\n            sum = sum + calculate(n)\n        }\n        n = n + 1\n    }\n    return sum\n}\n\nconsole.log(main())\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const stack = [];\n  let count = 0;\n  for (let i = 0; i < string.length; i++) {\n    const char = string[i];\n    if (char === '[') {\n      stack.push(char);\n      count++;\n    } else if (char === ']') {\n      if (stack.length === 0) {\n        return false;\n      }\n      const [element, count] = stack.pop();\n      if (element!== '[') {\n        return false;\n      }\n      count--;\n      if (count === 0) {\n        return true;\n      }\n    }\n  }\n  return stack.length === 0;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of all numbers in the list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = [1,4,9] the output should be 18\n  For lst = [1,3,5,7] the output should be 21\n  For lst = [1.4,4.2,0] the output should be 8.8\n  For lst = [-2.4,1,1] the output should be -4\n  */\nconst sum = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += lst[i];\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of all numbers in the list,\n  round each element in the list to the lower int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = [1,4,9] the output should be 5\n  For lst = [1,3,5,7] the output should be 14\n  For lst = [1.4,4.2,0] the output should be 1.6\n  For lst = [-2.4,1,1] the output should be -4\n  */\nconst sumRound = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.floor(lst[i]);\n  }\n  return sum;\n};\n\nconst sumRound2 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of all numbers in the list,\n  round each element in the list to the floor int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 4\n  For lst = [1,4,9] the output should be 10\n  For lst = [1,3,5,7] the output should be 14\n  For lst = [1.4,4.2,0] the output should be 1.4\n  For lst = [-2.4,1,1] the output should be -3\n  */\nconst sumRound3 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of all numbers in the list,\n  round each element in the list to the floor int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 3\n  For lst = [1,4,9] the output should be 4\n  For lst = [1,3,5,7] the output should be 6\n  For lst = [1.4,4.2,0] the output should be 1.4\n  For lst = [-2.4,1,1] the output should be -2.4\n  */\nconst sumRound4 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.round(lst[i]);\n  }\n  return sum;\n};\n\n/*\n  You are given a list of numbers.\n  You need to return the sum of all numbers in the list,\n  round each element in the list to the ceiling int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 4\n  For lst = [1,4,9] the output should be 10\n  For lst = [1,3,5,7] the output should be 14\n  For lst = [1.4,4.2,0] the output should be 5.0\n  For lst = [-2.4,1,1] the output should be -2.4\n  */\nconst sumRound5 = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.ceil(lst[i]);\n  }\n  return sum;\n};\n\nconst lst = [1,2,3];\n\nconsole.log(sumRound(lst));\nconsole.log(sumRound2(lst));\nconsole.log(sumRound3(lst));\nconsole.log(sumRound4(lst));\nconsole.log(sumRound5(lst));\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  let chars = txt.split(\" \")\n  chars.forEach((item, index) => {\n    if (item.length === 0) {\n      return\n    }\n\n    const lastChar = item.slice(-1)\n\n    if (isAlpha(lastChar)) {\n      return\n    }\n\n    const isLastCharALetter = isAlpha(chars[index + 1])\n    if (isLastCharALetter) {\n      return\n    }\n  })\n\n  return false\n}\n\nexport default checkIfLastCharIsALetter\n<|endoftext|>"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n  const len = arr.length\n\n  // If the array is empty return -1\n  if (len === 0) return -1\n\n  // Find the last element\n  let last = arr[len - 1]\n\n  // Find the element before the last element\n  let lastElIndex = len - 2\n  while (lastElIndex >= 0 && arr[lastElIndex] >= last) {\n    last = arr[lastElIndex]\n    lastElIndex--\n  }\n\n  // Check if the element after the last element is smaller than the element\n  // we found before the last element\n  if (arr[lastElIndex] < last) return lastElIndex\n  return -1\n}\n\nexport default canArrange\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  let largest = null;\n  let smallest = null;\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] < 0) {\n      if (largest === null) largest = 0;\n      largest = Math.max(largest, lst[i]);\n    } else if (lst[i] > 0) {\n      if (smallest === null) smallest = 0;\n      smallest = Math.min(smallest, lst[i]);\n    }\n  }\n  if (largest === null) largest = 0;\n  if (smallest === null) smallest = 0;\n  return largest === null? null : (smallest === null? largest : [largest, smallest]);\n};\n\nconst lagrestSmallestIntgeersTest = () => {\n  const [result, expected] = lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]);\n  console.log(`lagrestSmallestIntgeers({[2, 4, 1, 3, 5, 7]}) = ${result === null? \"null\" : result.join(\", \")}`);\n  console.log(`Expected: ${expected === null? \"null\" : expected.join(\", \")}`);\n  console.log(\"\");\n};\n\nlagrestSmallestIntgeersTest();\n<|endoftext|>"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  // console.log(\"a: \", a, \"b: \", b);\n  let result = null;\n  if (typeof a === 'number') {\n    if (typeof b === 'number') {\n      if (a > b) {\n        result = a;\n      } else if (a < b) {\n        result = b;\n      }\n    } else {\n      if (a > b) {\n        result = a;\n      }\n    }\n  } else if (typeof a ==='string') {\n    if (typeof b ==='string') {\n      if (a > b) {\n        result = a;\n      } else if (a < b) {\n        result = b;\n      }\n    } else {\n      if (a > b) {\n        result = a;\n      }\n    }\n  }\n  return result;\n};\n\ncompaerOne(1, 2.5);\ncompaerOne(1, \"2,3\");\ncompaerOne(\"5,1\", \"6\");\ncompaerOne(\"1\", 1);\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const nStr = n.toString();\n  const nDigits = nStr.length;\n  const sum = parseInt(nStr);\n  const digits = [];\n\n  for (let i = 0; i < nDigits; i += 2) {\n    digits.push(parseInt(nStr.slice(i, i + 2)));\n  }\n\n  const sumDigits = digits.reduce((acc, curr) => acc + curr, 0);\n\n  if (sumDigits === sum) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nexport {isEqualToSumEven};\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  let factorial = 1;\n  for (let i = 2; i <= n; i++) {\n    factorial = factorial * i;\n  }\n  return factorial;\n};\n\nexport default specialFactorial;\n<|endoftext|>"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  let t = text.split(\" \")\n  for(let i=0; i<t.length; i++) {\n    if(t[i].length > 2) {\n      for(let j=0; j<t[i].length-1; j++) {\n        if(t[i][j] == \" \" && t[i][j+1] == \" \") {\n          t[i] = t[i].replace(/ /g, \"_\")\n        }\n      }\n    } else {\n      t[i] = t[i].replace(/ /g, \"_\")\n    }\n  }\n  return t.join(\" \")\n}\n\n/*\n  Given a string text, replace all - in it with a space, \n  and if a string has more than 1 consecutive -, \n  then replace all consecutive - with - \n  \n  fixdashes(\"Example\") == \"Example\"\n  fixdashes(\"Example -\") == \"Example_\"\n  fixdashes(\"Example - -\") == \"Example__\"\n  fixdashes(\"Example - - -\") == \"Example__\"\n  fixdashes(\"Example - - - -\") == \"Example___\"\n  */\nconst fixdashes = (text) => {\n  let t = text.split(\"-\")\n  for(let i=0; i<t.length; i++) {\n    if(t[i].length > 1) {\n      for(let j=0; j<t[i].length-1; j++) {\n        if(t[i][j] == \"-\" && t[i][j+1] == \"-\" && t[i][j+2] == \"\") {\n          t[i] = t[i].replace(/-/g, \" \")\n        }\n      }\n    }\n  }\n  return t.join(\"-\")\n}\n\n/*\n  Given a string text, replace all - with underscores, \n  and if a string has more than 1 consecutive -, \n  then replace all consecutive - with - \n  \n  fixdashes(\"Example\") == \"Example\"\n  fixdashes(\"Example -\") == \"Example_\"\n  fixdashes(\"Example - -\") == \"Example__\"\n  fixdashes(\"Example - - -\") == \"Example___\"\n  */\nconst fixunderscores = (text) => {\n  let t = text.split(\"-\")\n  for(let i=0; i<t.length; i++) {\n    if(t[i].length > 1) {\n      for(let j=0; j<t[i].length-1; j++) {\n        if(t[i][j] == \"-\" && t[i][j+1] == \"-\" && t[i][j+2] == \"\") {\n          t[i] = t[i].replace(/-/g, \"_\")\n        }\n      }\n    }\n  }\n  return t.join(\"-\")\n}\n\n/*\n  Given a string text, replace all underscores in it with -, \n  and if a string has more than 1 consecutive _, \n  then replace all consecutive _ with _ \n  \n  fixunderscores(\"Example\") == \"Example\"\n  fixunderscores(\"Example _\") == \"Example_\"\n  fixunderscores(\"Example _ _\") == \"Example__\"\n  fixunderscores(\"Example _ _ _ _\") == \"Example___\"\n  */\nconst fixunderscores2 = (text) => {\n  let t = text.split(\"_\")\n  for(let i=0; i<t.length; i++) {\n    if(t[i].length > 1) {\n      for(let j=0; j<t[i].length-1; j++) {\n        if(t[i][j] == \"_\" && t[i][j+1] == \"_\" && t[i][j+2] == \"\") {\n          t[i] = t[i].replace(\"_\", \"-\")\n        }\n      }\n    }\n  }\n  return t.join(\"_\")\n}\n\nconst fixspaces = (text) => {\n  let t = text.split(\" \")\n  for(let i=0; i<t.length; i++) {\n    t[i] = t[i].replace(/ /g, \"_\")\n  }\n  return t.join(\" \")\n}\n\nconst fixdashes = (text) => {\n  let t = text.split(\"-\")\n  for(let i=0; i<t.length; i++) {\n    t[i] = t[i].replace(/-/g, \"_\")\n  }\n  return t.join(\"-\")\n}\n\nconst fixunderscores = (text) => {\n  let t = text.split(\"_\")\n  for(let i=0; i<t.length; i++) {\n    t[i] = t[i].replace(\"_\", \"-\")\n  }\n  return t.join(\"_\")\n}\n\nconst fixunderscores2 = (text) => {\n  let t = text.split(\"_\")\n  for(let i=0; i<t.length; i++) {\n    t[i] = t[i].replace(\"_\", \"-\")\n  }\n  return t.join(\"_\")\n}\n\nconst fixunderscores3 = (text) => {\n  let t = text.split(\"_\")\n  for(let i=0; i<t.length; i++) {\n    t[i] = t[i].replace(\"_\", \"-\")\n  }\n  return t.join(\"_\")\n}\n\nconst fixunderscores4 = (text) => {\n  let t = text.split(\"_\")\n  for(let i=0; i<t.length; i++) {\n    t[i] = t[i].replace(\"_\", \"-\")\n  }\n  return t.join(\"_\")\n}\n\nconst fixunderscores5 = (text)"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n    const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._]*$/;\n    const file_name_regex_with_dot = /^[a-zA-Z][a-zA-Z0-9._]*\\./;\n    const file_name_regex_with_dot_with_extension = /^[a-zA-Z][a-zA-Z0-9._]*\\.(exe|dll|txt)$/;\n    if (file_name_regex.test(file_name) === false) {\n        return \"No\";\n    } else if (file_name_regex_with_dot.test(file_name) === false) {\n        return \"No\";\n    } else if (file_name_regex_with_dot_with_extension.test(file_name) === false) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck2 = (file_name) => {\n    const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._]*$/;\n    if (file_name_regex.test(file_name) === false) {\n        return \"No\";\n    } else if (file_name.indexOf(\".\") === -1) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n};\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck3 = (file_name) => {\n    const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._]*$/;\n    if (file_name_regex.test(file_name) === false) {\n        return \"No\";\n    } else if (file_name.indexOf(\".\") === -1) {\n        return \"No\";\n    } else if (file_name.indexOf(\".\") === -1) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n};\n\nconst fileNameCheck4 = (file_name) => {\n    const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._]*$/;\n    if (file_name_regex.test(file_name) === false) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n};\n\nconst fileNameCheck5 = (file_name) => {\n    const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._]*$/;\n    if (file_name_regex.test(file_name) === false) {\n        return \"No\";\n    } else if (file_name.indexOf(\".\") === -1) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n};\n\nconst fileNameCheck6 = (file_name) => {\n    const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._]*$/;\n    if (file_name_regex.test(file_name) === false) {\n        return \"No\";\n    } else {\n        return \"Yes\";\n    }\n};\n\nconst fileNameCheck7 = (file_name) => {\n    const file_name_regex = /^[a-zA-Z][a-zA-Z0-9._]*$/;\n    if (file_name_regex.test(file_name) === false) {\n        return \"No\";\n    } else if (file_name.indexOf(\".\") === -1) {\n        return \"No\";\n    }"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  return (lst.reduce((acc, curr) => (curr * curr) + acc, 0));\n};\n\nconst sumSquares2 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\n/*\"\n  This function will take a list of numbers and return the sum of the squares of all numbers in the list.\n  \n  Examples:\n  For lst = [1,2,3] the output should be 9\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  For lst = []  the output should be 0\n  */\nconst sumOfSquares = (lst) => {\n  return (lst.reduce((acc, curr) => (curr * curr) + acc, 0));\n};\n\nconst square = (number) => {\n  return number * number;\n};\n\nconst sumOfSquares2 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\n// this is the same as the code below but this way we can keep the lst variable as a list without altering it\n\nconst square = (number) => {\n  return number * number;\n};\n\nconst sumOfSquares = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumSquares2 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares2 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares3 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares4 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares5 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares6 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares7 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares8 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares9 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares10 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares11 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares12 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares13 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares14 = (lst) => {\n  let result = 0;\n  for (let i = 0; i < lst.length; i++) {\n    result += lst[i] * lst[i];\n  }\n  return result;\n};\n\nconst sumOfSquares15 = (lst) => {\n"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  let words = sentence.split(' ');\n  let words2 = [];\n  let i = 1;\n  for (let word of words) {\n    let n = 2;\n    while (i < words.length) {\n      if (i % n === 0) {\n        words2.push(word);\n        i += n;\n        n = prime(n);\n      } else {\n        i++;\n      }\n    }\n    i = 1;\n  }\n  return words2.join(' ');\n}\n\nfunction prime(num) {\n  if (num > 1) {\n    for (let i = 2; i < num; i++) {\n      if (num % i === 0) {\n        return i;\n      }\n    }\n  }\n}\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  const xNum = parseInt(x.split('/')[0]),\n    xDen = parseInt(x.split('/')[1]),\n    nNum = parseInt(n.split('/')[0]),\n    nDen = parseInt(n.split('/')[1]),\n    num = (xNum * nNum) / (xDen * nDen),\n    x = xNum - (num * xDen),\n    n = nNum - (num * nDen);\n\n  return x === 0 && n === 0 || (x + n) === (xNum * nNum) && x === 0 && n === 0 || (x + n) === (xNum * nNum) && x === 0 && n === 0 || (x + n) === (xNum * nNum) && x === 0 && n === 0;\n};\n\nconsole.log(simpilfy(\"1/5\", \"5/1\"));\nconsole.log(simpilfy(\"1/6\", \"2/1\"));\nconsole.log(simpilfy(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  return nums.reduce((a, b) => a.concat(b.map((x) => x.toString().length).sort((a, b) => a - b).map(x => parseInt(x))), []);\n};\n\nexport {\n  roderByPoints\n};\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const oddNum = (n) => n % 2 === 1;\n  const firstDig = (n) => n.split('')[0];\n  const lastDig = (n) => n.split('')[1];\n\n  return nums.filter(oddNum).length +\n    nums.filter(oddNum).filter(firstDig).length +\n    nums.filter(oddNum).filter(lastDig).length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  const arr = Array(n);\n  for(let i = 0; i < n; i++) {\n    arr[i] = i * i - i + 1;\n  }\n\n  const arrLen = n;\n  const maxTriplets = [];\n  for(let i = 0; i < arrLen; i++) {\n    for(let j = i + 1; j < arrLen; j++) {\n      const sum = arr[i] + arr[j];\n      if(sum % 3 === 0) {\n        maxTriplets.push([arr[i], arr[j], sum]);\n      }\n    }\n  }\n  return maxTriplets.length;\n}\n\nexport default getMaxTrpiles;<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  const planets = [\n    \"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\n  ];\n  const sun = \"Sun\";\n\n  let pos = 1;\n  let x = 0;\n  let y = 0;\n  let distance = 0;\n  let planet = 0;\n  let planetX = 0;\n  let planetY = 0;\n\n  for (planet in planets) {\n    if (planet === planet1 || planet === planet2) {\n      continue;\n    }\n\n    x = (Math.pow(Math.pow(Math.pow(Math.pow(planet1, pos), 2) + Math.pow(Math.pow(planet2, pos), 2), 0.5) - Math.pow(Math.pow(planet1, pos) + Math.pow(planet2, pos), 2), 0.5) - Math.pow(Math.pow(planet1, pos) - Math.pow(planet2, pos), 2), 0.5) + 1) / 2;\n    y = (Math.pow(Math.pow(Math.pow(planet1, pos) + Math.pow(planet2, pos), 2) - Math.pow(Math.pow(planet1, pos) - Math.pow(planet2, pos), 2), 0.5) - 1) / 2;\n\n    distance = Math.pow(Math.pow(Math.pow(Math.pow(planet1, pos) + Math.pow(planet2, pos), 2) - Math.pow(Math.pow(planet1, pos) - Math.pow(planet2, pos), 2), 0.5) - 1, 0.5) + Math.pow(Math.pow(Math.pow(Math.pow(planet1, pos) + Math.pow(planet2, pos), 2) - Math.pow(Math.pow(planet1, pos) - Math.pow(planet2, pos), 2), 0.5) - 1, 0.5) - 1;\n\n    if (distance < 0) {\n      distance = 0;\n    }\n\n    if (distance > 1) {\n      distance = 1;\n    }\n\n    if (distance === 0) {\n      planetX = x;\n      planetY = y;\n      break;\n    }\n\n    pos++;\n  }\n\n  if (distance === 1) {\n    return [sun, planet1, planet2];\n  }\n\n  return ([sun, planet1, planet2, planetX, planetY]);\n};\n\nbf(\"Mercury\", \"Neptune\")\nbf(\"Earth\", \"Mercury\")\nbf(\"Mercury\", \"Uranus\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")\nbf(\"Mercury\", \"Jupiter\")\nbf(\"Mercury\", \"Saturn\")"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length;\n  const sort = (a, b) => {\n    if (a.length < b.length) {\n      return -1;\n    } else if (a.length > b.length) {\n      return 1;\n    } else {\n      return a < b? -1 : 1;\n    }\n  };\n\n  const sorted = lst.sort(sort);\n  const sum = sorted.reduce((prev, curr) => prev + curr.length, 0);\n  return sorted.filter(x => x.length === sum);\n};\n\nassert.deepEqual(sortedListSum([\"aa\", \"a\", \"aaa\"]), [\"aa\"]);\nassert.deepEqual(sortedListSum([\"ab\", \"a\", \"aaa\", \"cd\"]), [\"ab\", \"cd\"]);\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 == 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nexport default xOrY;\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  const oddNumbers = lst.filter((n) => n % 2 === 1);\n  if (oddNumbers.length === 0) {\n    return 0;\n  }\n  return oddNumbers.reduce((acc, n) => acc + n * n, 0);\n};\n\nmodule.exports = doublehTeDifference;\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const arr = Array.from(game)\n  const arrGuess = Array.from(guess)\n  const arrLength = arr.length\n\n  const arrResult = new Array(arrLength)\n  let sum = 0\n\n  for (let i = 0; i < arrLength; i++) {\n    sum += Math.abs(arr[i] - arrGuess[i])\n  }\n\n  arrResult.forEach((x, i) => {\n    arrResult[i] = sum\n  })\n\n  return arrResult\n}\n\nmodule.exports = compare\n<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n    const len = extensions.length\n    const strength = {\n        [class_name]: len,\n        strength: 0\n    }\n    for (let i = 0; i < len; i++) {\n        const extension = extensions[i]\n        const cap = extension.match(/[A-Z]/)\n        const lc = extension.match(/[a-z]/)\n        const strength = cap.length - lc.length\n        strength[extension] = strength[extension] + strength.strength + strength[extension.toUpperCase()]\n    }\n    for (const key in strength) {\n        strength[key] = strength[key] > strength.strength? key : ''\n    }\n    return class_name + '.' + strength[class_name].slice(1, -1)\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let pattern = b.split(\"\")\n  let bs = a.split(\"\")\n  for (let i = 0; i < bs.length; i++) {\n    if (pattern.indexOf(bs[i]) === -1) return false\n  }\n  return true\n}\n\nconst ccypatternMatch = (a, b) => {\n  let pattern = b.split(\"\")\n  let bs = a.split(\"\")\n  let i = 0\n  for (let j = 0; j < bs.length; j++) {\n    if (pattern.indexOf(bs[j]) === -1) {\n      i++\n    }\n  }\n  return i === bs.length\n}\n\nconsole.log(ccypatternMatch(\"abcdefg\",\"adcd\"))\nconsole.log(ccypatternMatch(\"abcd\",\"bd\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"dcefgh\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"cdefgh\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"efgh\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"fgh\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"fg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"efg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"ab\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"bc\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"ac\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"acdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"aabcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefgg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccypatternMatch(\"abcdefg\",\"abcdefg\"))\nconsole.log(ccyp"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  let evenDigits = 0, oddDigits = 0;\n  for (let i = 0; i < num.toString().length; i++) {\n    if (num % 2 === 0) {\n      evenDigits++;\n    } else {\n      oddDigits++;\n    }\n    num = num / 10;\n  }\n  return {\n    evenDigits: evenDigits,\n    oddDigits: oddDigits\n  };\n};\n\nconsole.log(evenOddCount(3));\nconsole.log(evenOddCount(3.9));\nconsole.log(evenOddCount(0));\nconsole.log(evenOddCount(1000));\nconsole.log(evenOddCount(5));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const convert = {\n    '1': 'I',\n    '2': 'II',\n    '3': 'III',\n    '4': 'IV',\n    '5': 'V',\n    '6': 'VI',\n    '7': 'VII',\n    '8': 'VIII',\n    '9': 'IX',\n    '10': 'X',\n    '11': 'XI',\n    '12': 'XII',\n    '13': 'XIII',\n    '14': 'XIV',\n    '15': 'XV',\n    '16': 'XVI',\n    '17': 'XVII',\n    '18': 'XVIII',\n    '19': 'XIX',\n    '20': 'XX',\n    '21': 'XXI',\n    '22': 'XXII',\n    '23': 'XXIII',\n    '24': 'XXIV',\n    '25': 'XXV',\n    '26': 'XXVI',\n    '27': 'XXVII',\n    '28': 'XXVIII',\n    '29': 'XXIX',\n    '30': 'XXX',\n    '31': 'XXXI',\n    '32': 'XXXII',\n    '33': 'XXXIII',\n    '34': 'XXXIV',\n    '35': 'XXXV',\n    '36': 'XXXVI',\n    '37': 'XXXVII',\n    '38': 'XXXVIII',\n    '39': 'XXXIX',\n    '40': 'XL',\n    '41': 'XLI',\n    '42': 'XLII',\n    '43': 'XLIII',\n    '44': 'XLIV',\n    '45': 'XLV',\n    '46': 'XLVI',\n    '47': 'XLVII',\n    '48': 'XLVIII',\n    '49': 'XLIX',\n    '50': 'L',\n    '51': 'LI',\n    '52': 'LII',\n    '53': 'LIII',\n    '54': 'LIV',\n    '55': 'LV',\n    '56': 'LVI',\n    '57': 'LVII',\n    '58': 'LVIII',\n    '59': 'LIX',\n    '60': 'LX',\n    '61': 'LXI',\n    '62': 'LXII',\n    '63': 'LXIII',\n    '64': 'LXIV',\n    '65': 'LXV',\n    '66': 'LXVI',\n    '67': 'LXVII',\n    '68': 'LXVIII',\n    '69': 'LXIX',\n    '70': 'LXXX',\n    '71': 'LXXXI',\n    '72': 'LXXXII',\n    '73': 'LXXXIII',\n    '74': 'LXXXIV',\n    '75': 'LXXXV',\n    '76': 'LXXXVI',\n    '77': 'LXXXVII',\n    '78': 'LXXXVIII',\n    '79': 'LXXXIX',\n    '80': 'XC',\n    '81': 'XCI',\n    '82': 'XCII',\n    '83': 'XCIII',\n    '84': 'XCIV',\n    '85': 'XCV',\n    '86': 'XCVI',\n    '87': 'XCVII',\n    '88': 'XCVIII',\n    '89': 'XCIX',\n    '90': 'CM',\n    '91': 'CMI',\n    '92': 'CMCI',\n    '93': 'CMCII',\n    '94': 'CMCIII',\n    '95': 'CMCIV',\n    '96': 'CMCV',\n    '97': 'CMCVI',\n    '98': 'CMCVII',\n    '99': 'CMCVIII',\n    '100': 'CMCIX',\n    '101': 'CMX',\n    '102': 'CMXI',\n    '103': 'CMXII',\n    '104': 'CMXIII',\n    '105': 'CMXIV',\n    '106': 'CMXV',\n    '107': 'CMXVI',\n    '108': 'CMXVII',\n    '109': 'CMXVIII',\n    '110': 'CMXIX',\n    '111': 'CMXXX',\n    '112': 'CMXXXI',\n    '113': 'CMXXXII',\n    '114': 'CMXXXIII',\n    '115': 'CMXXXIV',\n    '116': 'CMXXXV',\n    '117': 'CMXXXVI',\n    '118': 'CMXXXVII',\n    '119': 'CMXXXVIII',\n    '120': 'CMXXXIX',\n    '121': 'CXX',\n    '122': 'CXXI',\n    '123': 'CXXII',\n    '124': 'CXXIII',\n    '125': 'CXXIV',\n    '126': 'CXXV',\n    '127': 'CXXVI',\n    '128': 'CXXVII',\n    '129': 'CXXVIII',\n    '130': 'CXXIX',\n    '131': 'CXXX',\n    '132': 'CXXXI',\n    '133': 'CXXXII',\n    '134': 'CXXXIII',\n    '135': 'CXXXIV',\n    '136': 'CXXXV',\n    '137': 'CXXXVI',\n    '138': 'CXXXVII',\n    '139': 'CXXXVIII',\n    '140': 'CXXXIX',\n    '141': 'CXL',\n    '142': 'CXLI',\n    '143': 'CXLII',\n    '144': 'CXLIII',\n    '145': 'CXLIV',\n    '146': 'CXLV',\n    '147': 'CXLVI',\n    '148': 'CXLVII',\n    '149': 'C"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  if (a + b > c && b + c > a && c + a > b) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nconst getTriangles = (triangles) => {\n  const [a, b, c] = triangles.split(\",\").map(Number);\n  const area = (a * b * c) / 2;\n  return rightAngelTriangle(a, b, c)? area : false;\n}\n\nconsole.log(getTriangles(\"3,4,5\"));\nconsole.log(getTriangles(\"1,2,3\"));\n<|endoftext|>"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const wordMap = new Map();\n  words.forEach((word) => {\n    const wordLength = word.length;\n    if (wordMap.has(wordLength)) {\n      const [prev, count] = wordMap.get(wordLength);\n      count++;\n      wordMap.set(wordLength, [prev, count]);\n    } else {\n      wordMap.set(wordLength, [word, 1]);\n    }\n  });\n  let result = words[0];\n  let count = 1;\n  words.forEach((word) => {\n    if (word.length > result.length) {\n      result = word;\n      count = 1;\n    } else if (word.length === result.length) {\n      if (word > result) {\n        result = word;\n        count = 1;\n      }\n    }\n  });\n  return result;\n};\n\n/*\nWrite a function that takes a string and returns the number of times that it occurs in the string.\n  \"aaa bb cc bb cc aa\" => \"bb\" => 2\n  \"aa bb cc\" => \"bb\" => 1\n  \"aaa bb cc bb cc\" => \"bb\" => 3\n  \"cc bb cc aa\" => \"bb\" => 1\n  \"bb cc bb cc aa\" => \"bb\" => 2\n*/\nconst findCount = (str) => {\n  let count = 1;\n  let prevCount = 1;\n  let currentCount = 1;\n  let currChar = str.charAt(0);\n  for (let i = 1; i < str.length; i++) {\n    if (currChar === str.charAt(i)) {\n      currentCount++;\n    } else {\n      if (currentCount > prevCount) {\n        count += currentCount - prevCount;\n        prevCount = currentCount;\n      }\n      currentCount = 1;\n      currChar = str.charAt(i);\n    }\n  }\n  if (currentCount > prevCount) {\n    count += currentCount - prevCount;\n  }\n  return count;\n};\n\nconst findMaxCount = (str) => {\n  let count = 1;\n  let prevCount = 1;\n  let currentCount = 1;\n  let currChar = str.charAt(0);\n  for (let i = 1; i < str.length; i++) {\n    if (currChar === str.charAt(i)) {\n      currentCount++;\n    } else {\n      if (currentCount > prevCount) {\n        count = Math.max(count, currentCount - prevCount);\n        prevCount = currentCount;\n      }\n      currentCount = 1;\n      currChar = str.charAt(i);\n    }\n  }\n  if (currentCount > prevCount) {\n    count = Math.max(count, currentCount - prevCount);\n  }\n  return count;\n};\n\nconst findMaxCount2 = (str) => {\n  let count = 1;\n  let prevCount = 1;\n  let currentCount = 1;\n  let currChar = str.charAt(0);\n  for (let i = 1; i < str.length; i++) {\n    if (currChar === str.charAt(i)) {\n      currentCount++;\n    } else {\n      if (currentCount > prevCount) {\n        count = Math.max(count, currentCount - prevCount);\n        prevCount = currentCount;\n      }\n      currentCount = 1;\n      currChar = str.charAt(i);\n    }\n  }\n  if (currentCount > prevCount) {\n    count = Math.max(count, currentCount - prevCount);\n  }\n  return count;\n};\n\nconst findMaxCount3 = (str) => {\n  let count = 1;\n  let prevCount = 1;\n  let currentCount = 1;\n  let currChar = str.charAt(0);\n  for (let i = 1; i < str.length; i++) {\n    if (currChar === str.charAt(i)) {\n      currentCount++;\n    } else {\n      if (currentCount > prevCount) {\n        count = Math.max(count, currentCount - prevCount);\n        prevCount = currentCount;\n      }\n      currentCount = 1;\n      currChar = str.charAt(i);\n    }\n  }\n  if (currentCount > prevCount) {\n    count = Math.max(count, currentCount - prevCount);\n  }\n  return count;\n};\n\nconst findMaxCount4 = (str) => {\n  let count = 1;\n  let prevCount = 1;\n  let currentCount = 1;\n  let currChar = str.charAt(0);\n  for (let i = 1; i < str.length; i++) {\n    if (currChar === str.charAt(i)) {\n      currentCount++;\n    } else {\n      if (currentCount > prevCount) {\n        count = Math.max(count, currentCount - prevCount);\n        prevCount = currentCount;\n      }\n      currentCount = 1;\n      currChar = str.charAt(i);\n    }\n  }\n  if (currentCount > prevCount) {\n    count = Math.max(count, currentCount - prevCount);\n  }\n  return count;\n};\n\nconst findMaxCount5 = (str) => {\n  let count = 1;\n  let prevCount = 1;\n  let currentCount = 1;\n  let currChar = str.charAt(0);\n  for (let i = 1; i < str.length; i++) {\n    if (currChar === str.charAt(i)) {\n      currentCount++;\n    } else {\n      if (currentCount > prevCount) {\n        count = Math.max(count, currentCount - prevCount);\n        prevCount = currentCount;"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  const diff = number - need\n  const left = remaining - diff\n  if (left >= 0) {\n    return [left, need]\n  }\n  return [number, remaining]\n}\n\nconst test = require(\"../../judge/judge\")\nconst number = 12\nconst need = 4\nconst remaining = 10\ntest(eat, number, need, remaining)\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // check the length of operator list and operand list\n  if (operator.length < 2 || operand.length < 2) {\n    throw new Error('The length of operator list and operand list should be at least 2.');\n  }\n\n  // iterate over operator list and operand list\n  const operatorList = operator.slice(0);\n  const operandList = operand.slice(0);\n  let result = 0;\n  for (let i = 0; i < operatorList.length; i++) {\n    // get two numbers from operatorList and operandList\n    const operatorItem = operatorList[i];\n    const operandItem = operandList[i];\n\n    // get the first number and second number\n    const firstNumber = operatorItem[0];\n    const secondNumber = operatorItem[1];\n\n    // calculate the expression\n    const expression = secondNumber * Math.pow(operandItem, firstNumber);\n\n    // add expression to result\n    result += expression;\n  }\n\n  return result;\n};\n\nexport default doAlgebra;\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n  let i = 0, j = 0, c = '', len = s.length;\n  for (i = 0; i < len; i++) {\n    c = s[i];\n    if (c.match(/[a-zA-Z]/)) {\n      c = c.toLowerCase();\n      s[j] = c;\n      j++;\n    } else if (c.match(/[A-Z]/)) {\n      c = c.toUpperCase();\n      s[j] = c;\n      j++;\n    } else {\n      s[j] = c;\n      j++;\n    }\n  }\n  return s.join('');\n};\n\nconsole.log(solve(\"1234\"));\nconsole.log(solve(\"ab\"));\nconsole.log(solve(\"#a@C\"));\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') {\n    return null;\n  }\n\n  const md5 = crypto.createHash('md5');\n  md5.update(text);\n\n  return md5.digest('hex');\n};\n\nmodule.exports = stringToMd5;\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  const list = []\n  for (let i = a; i <= b; i += 2) {\n    list.push(i)\n  }\n  return list\n}\n\n/*\n  Given a positive integer n, return the number of trailing zeroes in n!\n*/\nconst trailingZeroes = n => {\n  const count = 0\n  for (let i = 1; i <= n; i++) {\n    count += n % i === 0\n  }\n  return count\n}\n\n/*\n  Given two positive integers a and b, return the sum of the even digits\n  between a and b, in ascending order.\n\n  For example:\n  sumDigits(2, 8) => 30\n  sumDigits(8, 2) => 30\n  sumDigits(10, 14) => 56\n*/\nconst sumDigits = (a, b) => {\n  const sum = 0\n  for (let i = a; i <= b; i += 2) {\n    sum += i\n  }\n  return sum\n}\n\nmodule.exports = {\n  generateIntegers,\n  trailingZeroes,\n  sumDigits\n}\n<|endoftext|>"}
