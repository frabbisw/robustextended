{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n  const arr = [];\n  for (let i = 0; i < numbers.length; i++) {\n    arr.push(numbers[i]);\n  }\n  const diff = arr.slice(1).reduce((a, b) => a - b, 0);\n  const max = Math.abs(diff);\n  return diff <= threshold && max < 2;\n};\n\nconst hasCloselEementsTest = (numbers, threshold) => {\n  const arr = [];\n  for (let i = 0; i < numbers.length; i++) {\n    arr.push(numbers[i]);\n  }\n  const diff = arr.slice(1).reduce((a, b) => a - b, 0);\n  const max = Math.abs(diff);\n  return diff <= threshold && max < 2;\n};\n\nmodule.exports = {\n  hasCloselEements,\n  hasCloselEementsTest\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const group_index = [];\n  let current_index = 0;\n  let next_group_index = 0;\n  const current_group = [];\n  const current_bracket = '(';\n  const next_bracket = ')';\n  const bracket_stack = [];\n\n  paren_string.forEach((ch, i) => {\n    if (ch === current_bracket) {\n      bracket_stack.push(current_bracket);\n      current_bracket = next_bracket;\n    } else if (ch === next_bracket) {\n      bracket_stack.pop();\n      if (bracket_stack.length === 0) {\n        current_group.push(paren_string.slice(current_index, i + 1));\n        group_index.push(current_group);\n        current_index = i + 1;\n        current_group = [];\n      }\n    }\n  });\n\n  return group_index;\n};\n\n/*\n  Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open bracket is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp2 = (paren_string) => {\n  const group_index = [];\n  let current_index = 0;\n  let next_group_index = 0;\n  const current_group = [];\n  const current_bracket = '(';\n  const next_bracket = ')';\n  const bracket_stack = [];\n\n  paren_string.forEach((ch, i) => {\n    if (ch === current_bracket) {\n      bracket_stack.push(current_bracket);\n      current_bracket = next_bracket;\n    } else if (ch === next_bracket) {\n      bracket_stack.pop();\n      if (bracket_stack.length === 0) {\n        current_group.push(paren_string.slice(current_index, i + 1));\n        group_index.push(current_group);\n        current_index = i + 1;\n        current_group = [];\n      }\n    }\n  });\n\n  return group_index;\n};\n\nmodule.exports = {\n  separateParenGrousp,\n  separateParenGrousp2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  if (number < 0) return 0;\n  const integer = Math.floor(number);\n  return number - integer;\n};\n\n/*\n  Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number)"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n    const belowZero = (balance) => {\n        return balance < 0;\n    };\n\n    return operations.some(belowZero);\n};\n\nexport default belowZeor;<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  const list = Array.from(numbers);\n  const mean = (list.reduce((acc, item) => acc + item) / list.length);\n  const mad = (list.reduce((acc, item) => Math.abs(item - mean), 0) / list.length);\n  return mad;\n};\n\n/*\n  Calculate the standard deviation of the given list.\n  StdDeviation = (x1 - x2) ^ 2 + (x3 - x4) ^ 2 + (x5 - x6) ^ 2 +...\n  >>> stdDeviation([1.0, 2.0, 3.0, 4.0])\n  2.872281323272431\n  */\nconst stdDeviation = (numbers) => {\n  const list = Array.from(numbers);\n  const mean = (list.reduce((acc, item) => acc + item) / list.length);\n  const variance = (list.reduce((acc, item) => acc + Math.pow(item - mean, 2), 0) / list.length);\n  return Math.sqrt(variance);\n};\n\n/*\n  Calculate the correlation coefficient of two lists.\n  >>> correlate([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n  1.0\n  >>> correlate([1.0, 2.0, 3.0, 4.0], [3.0, 4.0, 5.0, 6.0])\n  -0.25\n  */\nconst correlate = (list1, list2) => {\n  const n = list1.length;\n  const m = list2.length;\n  const num = (list1.reduce((acc, item) => acc + item) / n);\n  const denom = (list2.reduce((acc, item) => acc + item) / m);\n  return (num - denom) / Math.sqrt(n * m);\n};\n\n/*\n  Calculate the Pearson Correlation Coefficient of two lists.\n  >>> pcc([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n  1.0\n  >>> pcc([1.0, 2.0, 3.0, 4.0], [3.0, 4.0, 5.0, 6.0])\n  -0.25\n  */\nconst pcc = (list1, list2) => {\n  const n = list1.length;\n  const m = list2.length;\n  const num = (list1.reduce((acc, item) => acc + item) / n);\n  const denom = (list2.reduce((acc, item) => acc + item) / m);\n  return num * denom;\n};\n\n/*\n  Calculate the Spearman's Correlation Coefficient of two lists.\n  >>> pcc([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n  1.0\n  >>> pcc([1.0, 2.0, 3.0, 4.0], [3.0, 4.0, 5.0, 6.0])\n  -0.25\n  */\nconst spearmanCorrelation = (list1, list2) => {\n  const correlate = correlate(list1, list2);\n  const pcc = pcc(list1, list2);\n  return correlate * pcc;\n};\n\nmodule.exports = {\n  meanAbsoluteDeviation,\n  stdDeviation,\n  correlate,\n  pcc,\n  spearmanCorrelation\n};\n<|endoftext|>"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  const result = [];\n  const len = numbers.length;\n  let i = 0;\n  let j = 0;\n  while (i < len) {\n    if (i!== 0) {\n      result.push(delimeter);\n    }\n    result.push(numbers[i]);\n    i++;\n    while (i < len) {\n      result.push(numbers[i]);\n      i++;\n    }\n    j++;\n  }\n  return result;\n};\n\n/*\n  Test\n  */\ninterpserse([], 4);\ninterpserse([1, 2, 3], 4);\n<|endoftext|>"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  let max_level = 0;\n  let current_level = 0;\n  let current_string = '';\n  paren_string.forEach((cur_char, index) => {\n    if (cur_char === ')') {\n      current_level--;\n    } else if (cur_char === '(') {\n      current_level++;\n      current_string = current_string + cur_char;\n    } else if (current_level === 0) {\n      current_level = parseNetsedParens(current_string);\n      current_string = '';\n    } else {\n      current_string = current_string + cur_char;\n    }\n    if (current_level > max_level) {\n      max_level = current_level;\n    }\n  });\n  return max_level;\n};\n\nconst group_array = [\n  '(((()))()',\n  '(()()(())',\n  '(()()()(())',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()()()',\n  '()()()"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  return strings.filter((str) => {\n    return str.indexOf(substring)!== -1;\n  });\n};\n\n/*\n  * Filter an input list of strings only for ones that contain given substring\n  * and with a given position in that substring\n  *\n  * e.g.\n  *   >>> filteBrySubstringPos([], 'a', 1)\n  *   []\n  *   >>> filteBrySubstringPos(['abc', 'bacd', 'cde', 'array'], 'a', 1)\n  *   ['abc', 'bacd', 'array']\n  *   >>> filteBrySubstringPos(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n  *   ['bacd', 'cde', 'array']\n  */\nconst filteBrySubstringPos = (strings, substring, position) => {\n  return strings.filter((str) => {\n    const substr = str.substr(position, substring.length);\n    return substr === substring;\n  });\n};\n\n/*\n  * Filter an input list of strings only for ones that do not contain given substring\n  * and with a given position in that substring\n  *\n  * e.g.\n  *   >>> filteBryNotSubstringPos([], 'a', 1)\n  *   []\n  *   >>> filteBryNotSubstringPos(['abc', 'bacd', 'cde', 'array'], 'a', 1)\n  *   ['abc', 'bacd', 'array']\n  *   >>> filteBryNotSubstringPos(['abc', 'bacd', 'cde', 'array'], 'a', 2)\n  *   ['abc', 'bacd', 'cde', 'array']\n  */\nconst filteBryNotSubstringPos = (strings, substring, position) => {\n  return strings.filter((str) => {\n    const substr = str.substr(position, substring.length);\n    return substr!== substring;\n  });\n};\n\n/*\n  * Return the first element of an array\n  */\nconst first = (arr) => {\n  return arr[0];\n};\n\n/*\n  * Return the last element of an array\n  */\nconst last = (arr) => {\n  return arr[arr.length - 1];\n};\n\n/*\n  * Return a copy of the array with its elements in reverse order\n  */\nconst reverse = (arr) => {\n  const reversedArr = [];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArr.push(arr[i]);\n  }\n  return reversedArr;\n};\n\n/*\n  * Return a copy of the array with its elements in reverse order\n  */\nconst reverseDoubly = (arr) => {\n  const reversedArr = [];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArr.push(arr[i]);\n    for (let j = i - 1; j >= 0; j--) {\n      reversedArr.push(arr[j]);\n    }\n  }\n  return reversedArr;\n};\n\n/*\n  * Return a copy of the array with its elements in reverse order\n  */\nconst reverseTriply = (arr) => {\n  const reversedArr = [];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArr.push(arr[i]);\n    for (let j = i - 1; j >= 0; j--) {\n      reversedArr.push(arr[j]);\n      for (let k = j - 1; k >= 0; k--) {\n        reversedArr.push(arr[k]);\n      }\n    }\n  }\n  return reversedArr;\n};\n\n/*\n  * Return a copy of the array with its elements in reverse order\n  */\nconst reverseQuadply = (arr) => {\n  const reversedArr = [];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArr.push(arr[i]);\n    for (let j = i - 1; j >= 0; j--) {\n      reversedArr.push(arr[j]);\n      for (let k = j - 1; k >= 0; k--) {\n        reversedArr.push(arr[k]);\n        for (let l = k - 1; l >= 0; l--) {\n          reversedArr.push(arr[l]);\n        }\n      }\n    }\n  }\n  return reversedArr;\n};\n\n/*\n  * Return a copy of the array with its elements in reverse order\n  */\nconst reverseQuintply = (arr) => {\n  const reversedArr = [];\n  for (let i = arr.length - 1; i >= 0; i--) {\n    reversedArr.push(arr[i]);\n    for (let j = i - 1; j >= 0; j--) {\n      reversedArr.push(arr[j]);\n      for (let k = j - 1; k >= 0; k--) {\n        reversedArr.push(arr[k]);\n        for (let l = k - 1; l >= 0; l--) {\n          reversedArr.push(arr[l]);\n          for (let m = l - 1; m >= 0; m--) {\n            reversedArr.push(arr[m]);\n          }\n        }\n      }\n    }\n  }\n  return reversedArr;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n};\n\n/*\n  >>> sumProduct([1, 2, 3, 4, 5])\n  (15, 120)\n  */\n\n/*\n  This method returns sum of all integers in a given list.\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n\n  return sum;\n};\n\n/*\n  This method returns product of all integers in a given list.\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (numbers) => {\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    product *= numbers[i];\n  }\n\n  return product;\n};\n\n/*\n  This method returns sum and product of all integers in a given list.\n  >>> sumProduct([1, 2, 3, 4, 5])\n  (15, 120)\n  */\nconst sumProduct = (numbers) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n    product *= numbers[i];\n  }\n\n  return (sum, product);\n};\n\n/*\n  This method returns sum of all even integers in a given list.\n  >>> sum([2, 4, 6, 8])\n  10\n  >>> sum([2, 4, 6, 8, 10])\n  16\n  */\nconst sumEven = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/*\n  This method returns product of all even integers in a given list.\n  >>> product([2, 4, 6, 8])\n  24\n  >>> product([2, 4, 6, 8, 10])\n  40\n  */\nconst productEven = (numbers) => {\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      product *= numbers[i];\n    }\n  }\n\n  return product;\n};\n\n/*\n  This method returns sum and product of all even integers in a given list.\n  >>> sumProduct([2, 4, 6, 8])\n  (10, 24)\n  */\nconst sumProductEven = (numbers) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n  }\n\n  return (sum, product);\n};\n\n/*\n  This method returns sum of all even integers in a given list.\n  >>> sum([2, 4, 6, 8, 10])\n  16\n  */\nconst sumEven = (numbers) => {\n  let sum = 0;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      sum += numbers[i];\n    }\n  }\n\n  return sum;\n};\n\n/*\n  This method returns product of all even integers in a given list.\n  >>> product([2, 4, 6, 8, 10])\n  40\n  */\nconst productEven = (numbers) => {\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      product *= numbers[i];\n    }\n  }\n\n  return product;\n};\n\n/*\n  This method returns sum and product of all even integers in a given list.\n  >>> sumProduct([2, 4, 6, 8, 10])\n  (10, 40)\n  */\nconst sumProductEven = (numbers) => {\n  let sum = 0;\n  let product = 1;\n\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] % 2 === 0) {\n      sum += numbers[i];\n      product *= numbers[i];\n    }\n  }\n\n  return (sum, product);\n};\n\nexport default {\n  sumProduct,\n  sumProductEven,\n  sumEven,\n  productEven,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  let max = numbers[0];\n  let rollingMax = [];\n\n  for (let i = 1; i < numbers.length; i++) {\n    if (numbers[i] > max) {\n      rollingMax.push(max);\n      max = numbers[i];\n    } else {\n      rollingMax.push(numbers[i]);\n    }\n  }\n  return rollingMax;\n};\n\nmodule.exports = rollingMax;\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  if(string === '') {\n    return string;\n  }\n\n  const prefix = string.split('').reverse().join('');\n  const suffix = string.split('').join('');\n\n  if(isPalindrome(prefix)) {\n    return prefix + makePalindrome(suffix);\n  } else {\n    return makePalindrome(suffix);\n  }\n}\n\nmodule.exports = {\n  makePalindrome,\n  isPalindrome\n}\n<|endoftext|>"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n  if (a === b) return a;\n  if (a.length === b.length) {\n    return a + b.substr(1);\n  }\n  return a + b.substr(1, a.length) + a.substr(0, b.length - 1);\n};\n\nconst strinXgor2 = (a, b) => {\n  let xor = a ^ b;\n  let str = '';\n  for (let i = 0; i < a.length; i++) {\n    if (xor & 1) {\n      str += '1';\n    } else {\n      str += '0';\n    }\n    xor = xor >> 1;\n  }\n  return str;\n};\n\nconsole.log(strinXgor('010', '110'));\nconsole.log(strinXgor('011', '111'));\nconsole.log(strinXgor2('010', '110'));\nconsole.log(strinXgor2('011', '111'));\n<|endoftext|>"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  return (strings.length === 0)? null : strings.reduce((a, b) => {\n    return (b.length > a.length)? b : a;\n  });\n};\n\nmodule.exports = longest;\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a < b) {\n    return rgeatestCommonDivisor(b, a);\n  }\n\n  const a2 = a;\n  while (b!= 0) {\n    const b2 = b;\n    b = Math.floor(b / a2);\n    a = a2;\n  }\n  return a;\n};\n\nmodule.exports = rgeatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const length = string.length\n  if (length === 0) {\n    return []\n  }\n  let prefixes = []\n  for (let i = 0; i < length; i++) {\n    const prefix = string.substr(0, i + 1)\n    prefixes.push(prefix)\n  }\n  return prefixes\n}\n\n/**\n  * Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['', 'c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const length = string.length\n  if (length === 0) {\n    return []\n  }\n  let suffixes = []\n  for (let i = length - 1; i >= 0; i--) {\n    const suffix = string.substr(i, length - i)\n    suffixes.push(suffix)\n  }\n  return suffixes\n}\n\nmodule.exports = {\n  allPrefixes,\n  allSuffixes\n}\n<|endoftext|>"}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  let str = '';\n  for (let i = 0; i < n; i++) {\n    str += `${i}`;\n  }\n  return str;\n};\n\nmodule.exports = stringSequence;\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n    const characters = string.toLowerCase().split('');\n    const result = [];\n    for (let i = 0; i < characters.length; i++) {\n        result.push(characters.indexOf(characters[i]));\n    }\n    return result.length;\n};\n\n/* Given an integer, find out how many times it appears in a string\n  >>> countOccurrences(2, 'xyzXYZ')\n  2\n  >>> countOccurrences(4, 'xyzXYZ')\n  1\n  */\nconst countOccurrences = (number, string) => {\n    const characters = string.toLowerCase().split('');\n    let result = 0;\n    for (let i = 0; i < characters.length; i++) {\n        if (characters[i] === number.toString()) {\n            result++;\n        }\n    }\n    return result;\n};\n\n/* Given an array of strings, return the first string that appears in all the others\n  >>> allOccurrences(['xyzXYZ', 'zxcvwXYZ'], ['xyzXYZ', 'zxcvwXYZ'])\n  'xyzXYZ'\n  >>> allOccurrences(['xyzXYZ', 'zxcvwXYZ'], ['xyzXYZ', 'abcXYZ'])\n  ''\n  >>> allOccurrences(['xyzXYZ', 'zxcvwXYZ'], ['xyzXYZ'])\n  ''\n  */\nconst allOccurrences = (strings, string) => {\n    const result = [];\n    for (let i = 0; i < strings.length; i++) {\n        if (strings[i] === string) {\n            result.push(strings[i]);\n        }\n    }\n    if (result.length === 0) {\n        return '';\n    } else {\n        return result[0];\n    }\n};\n\n/* Given a string, return the string without its first two characters\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  */\nconst removeFirstTwoCharacters = (string) => {\n    return string.substring(2);\n};\n\n/* Given a string, return the string without its last two characters\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  */\nconst removeLastTwoCharacters = (string) => {\n    return string.substring(0, string.length - 2);\n};\n\n/* Given a string, return the string without the first character\n  >>> removeFirstCharacter('xyzXYZ')\n  'yzXYZ'\n  >>> removeFirstCharacter('xyzXYZ')\n  'yzXYZ'\n  */\nconst removeFirstCharacter = (string) => {\n    return string.substring(1);\n};\n\n/* Given a string, return the string without the last character\n  >>> removeLastCharacter('xyzXYZ')\n  'xyzXY'\n  >>> removeLastCharacter('xyzXYZ')\n  'xyzXY'\n  */\nconst removeLastCharacter = (string) => {\n    return string.substring(0, string.length - 1);\n};\n\n/* Given a string, return the string without the first and last character\n  >>> removeFirstAndLastCharacter('xyzXYZ')\n  'yz'\n  >>> removeFirstAndLastCharacter('xyzXYZ')\n  'yz'\n  */\nconst removeFirstAndLastCharacter = (string) => {\n    return string.substring(1, string.length - 1);\n};\n\n/* Given a string, return the string without the last two characters\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  */\nconst removeLastTwoCharacters2 = (string) => {\n    return string.substring(0, string.length - 2);\n};\n\n/* Given a string, return the string without the first two characters\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  */\nconst removeFirstTwoCharacters2 = (string) => {\n    return string.substring(2);\n};\n\n/* Given a string, return the string without the last two characters\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  */\nconst removeLastTwoCharacters3 = (string) => {\n    return string.substring(0, string.length - 2);\n};\n\n/* Given a string, return the string without the first two characters\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  */\nconst removeFirstTwoCharacters3 = (string) => {\n    return string.substring(2);\n};\n\n/* Given a string, return the string without the last two characters\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  >>> removeLastTwoCharacters('xyzXYZ')\n  'xyz'\n  */\nconst removeLastTwoCharacters4 = (string) => {\n    return string.substring(0, string.length - 2);\n};\n\n/* Given a string, return the string without the first two characters\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  >>> removeFirstTwoCharacters('xyzXYZ')\n  'XYZ'\n  */\nconst removeFirstTwoCharacters4 = (string) => {\n    return string.substring(2);\n};\n\n/* Given a string, return the string without the last character\n  >>> removeLastCharacter('xyzXYZ')\n  'xyzXY'\n  >>> removeLastCharacter('xyzXYZ')\n  'xyzXY'\n  */\nconst removeLastCharacter2 = (string) => {\n    return string.substring(0, string.length - 1);\n};\n\n/* Given a string, return the string without the last character"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  let array_of_notes = [];\n  for (let i = 0; i < music_string.length; i++) {\n    const character = music_string[i];\n    switch (character) {\n      case 'o':\n        array_of_notes.push(4);\n        break;\n      case 'o|':\n        array_of_notes.push(2);\n        break;\n      case '.':\n        array_of_notes.push(1);\n        break;\n    }\n  }\n  return array_of_notes;\n};\n\n/**\n * Function that takes in a string representing a chord and returns a list of notes in the chord.\n *\n * A chord looks like this:\n *   C\n *   C\n *   C\n *   C\n *   C\n *   C\n *   C\n *   C\n *\n * A chord is a string of the form C, C, C, C, C, C, C, C, C, C, C, C, C, C, C, C.\n *\n * Here are some examples:\n *   parseChord('C C C C C C C C C C C C C') => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n *   parseChord('C C C C C C C C C C C C C C') => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n *   parseChord('C C C C C C C C C C C C C C C') => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n *   parseChord('C C C C C C C C C C C C C C C C') => [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n *\n * Notes:\n *\n * The given chord should only contain characters 'C'.\n * There should be no spaces in the string.\n * The length of the string will be in the range [1, 10].\n *\n * */\nconst parseChord = (chord_string) => {\n  const note_lengths = [];\n  for (let i = 0; i < chord_string.length; i++) {\n    const character = chord_string[i];\n    if (character === 'C') {\n      note_lengths.push(4);\n    } else if (character === 'C') {\n      note_lengths.push(8);\n    } else {\n      throw new Error(`Chord string contains a character other than C: ${character}`);\n    }\n  }\n  return note_lengths;\n};\n\nconst parseTime = (time_string) => {\n  const beats = parseMusic(time_string);\n  const beats_per_minute = 60;\n  const notes = parseChord(time_string);\n  const beats_per_quarter = beats_per_minute / 60;\n  return [beats_per_minute, beats_per_quarter, notes];\n};\n\nconst parseTimeString = (time_string) => parseTime(time_string);\n\n/**\n * Function that takes in a time string and returns a time in milliseconds.\n *\n * For example:\n *   parseTimeString('1/4') returns 4\n *   parseTimeString('1/2') returns 2\n *\n * The time string should be in the format HH:MM:SS.\n *\n * */\nconst parseTimeMillis = (time_string) => {\n  const [beats_per_minute, beats_per_quarter, notes] = parseTimeString(time_string);\n  const beats_per_second = beats_per_minute * beats_per_quarter;\n  const note_lengths_millis = notes.map(note => note * 4);\n  return beats_per_second * note_lengths_millis;\n};\n\n// --------------------------------------------------------------------------------------\n\n/*\n  Test Cases\n  ------------\n  1. input = '1/4'\n  output = 4\n  2. input = '1/2'\n  output = 2\n  3. input = '1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4 o| 1/4"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  let count = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    const match = string.slice(i, i + substring.length);\n    if (substring === match) {\n      count += 1;\n    }\n  }\n  return count;\n};\n\n/*\n  Given a string and a list of words, return all the words that can be typed to create the given string.\n\n  >>> findWords('coder', ['coder', 'code', 'coding', 'coderd', 'coders'])\n  ['coder', 'code', 'coding', 'coderd', 'coders']\n  >>> findWords('coder', ['coder', 'code', 'coding', 'coderd', 'coders'], ['coder', 'code', 'coding', 'coderd', 'coders'])\n  []\n  >>> findWords('coder', ['coder', 'code', 'coding', 'coderd', 'coders'], ['coder', 'code', 'coderd', 'coders'])\n  ['coder', 'coding']\n  */\nconst findWords = (string, words, substrings = []) => {\n  const uniqueWords = new Set(words);\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    for (const word of uniqueWords) {\n      if (string.slice(i, i + word.length) === word) {\n        if (substrings.includes(word)) {\n          result.push(word);\n        }\n        const nextI = i + word.length;\n        if (nextI < string.length) {\n          const nextWord = string.slice(nextI);\n          if (substrings.includes(nextWord)) {\n            result.push(word);\n          }\n        }\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string and a dictionary, return a list of all the words that can be typed to create the given string.\n  Note that the dictionary may not contain duplicates.\n\n  >>> findWords('coder', {'coder': 1, 'code': 2, 'coding': 3, 'coderd': 4, 'coders': 5})\n  ['coder', 'code', 'coding', 'coderd', 'coders']\n  >>> findWords('coder', {'coder': 1, 'code': 2, 'coding': 3, 'coderd': 4, 'coders': 5})\n  []\n  >>> findWords('coder', {'coder': 1, 'code': 2, 'coding': 3, 'coderd': 4, 'coders': 5}, ['coder', 'code', 'coding', 'coderd', 'coders'])\n  ['coder', 'coding']\n  */\nconst findWords = (string, dictionary) => {\n  const uniqueWords = new Set(dictionary.values());\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    for (const word of uniqueWords) {\n      if (string.slice(i, i + word.length) === word) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\n/*\n  Given a string and a dictionary, return a list of all the words that can be typed to create the given string,\n  using only the dictionary keys.\n\n  >>> findWords('coder', {'coder': 1, 'code': 2, 'coding': 3, 'coderd': 4, 'coders': 5})\n  ['coder', 'code', 'coding', 'coderd', 'coders']\n  >>> findWords('coder', {'coder': 1, 'code': 2, 'coding': 3, 'coderd': 4, 'coders': 5})\n  []\n  >>> findWords('coder', {'coder': 1, 'code': 2, 'coding': 3, 'coderd': 4, 'coders': 5}, ['coder', 'code', 'coding', 'coderd', 'coders'])\n  ['coder', 'coding']\n  */\nconst findWords = (string, dictionary) => {\n  const uniqueWords = new Set(dictionary.values());\n  const result = [];\n  for (let i = 0; i < string.length; i++) {\n    for (const word of uniqueWords) {\n      if (string.slice(i, i + word.length) === word) {\n        result.push(word);\n      }\n    }\n  }\n  return result;\n};\n\nmodule.exports = {\n  howManyTimes,\n  findWords\n};\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sort = numbersString.sort();\n  return sort.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"6 9 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(Number);\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers2 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return b - a;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers3 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return a - b;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers4 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return a - b;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers5 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return b - a;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers6 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return a - b;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers7 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return b - a;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers8 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return a - b;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers9 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return b - a;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers10 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return a - b;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to smallest\n  >>> sortNumbersNumbers(\"9 6 3 4 5 2 1\")\n  '1 2 3 4 5 6 9'\n  */\nconst sortNumbersNumbers11 = (numbers) => {\n  const numbersString = numbers.split(\" \");\n  const sorted = numbersString.sort(function (a, b) {\n    return b - a;\n  });\n  return sorted.join(\" \");\n};\n\n/* Input is a string of numbers separated by spaces.\n  The string is not sorted.\n  Return the string with the numbers sorted from largest to"}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const min = (a, b) => a < b? a : b;\n  const max = (a, b) => a > b? a : b;\n  const smallest = min(min(numbers[0], numbers[1]), min(numbers[2], numbers[3]));\n  const largest = max(max(numbers[0], numbers[1]), max(numbers[2], numbers[3]));\n\n  return [smallest, largest];\n};\n\n/*\n  From a supplied list of numbers (of length at least two) select and return two that are the closest to each other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements2 = (numbers) => {\n  const min = (a, b) => a < b? a : b;\n  const max = (a, b) => a > b? a : b;\n  const smallest = min(min(numbers[0], numbers[1]), min(numbers[2], numbers[3]));\n  const largest = max(max(numbers[0], numbers[1]), max(numbers[2], numbers[3]));\n\n  return [smallest, largest];\n};\n\nmodule.exports = {\n  findClosestElements,\n  findClosestElements2,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  return numbers.reduce((acc, number) => {\n    return acc + number / (1 - number)\n  })\n}\n\n/**\n  * Given a list of numbers, generate a list of numbers, in reverse order,\n  * such that the largest number will become 0 and the smallest will become 1\n  *\n  * Example:\n  *   >>> largestToSmallest([1, 2, 3, 4, 5])\n  *   [1, 2, 3, 4, 5]\n  *   >>> largestToSmallest([-2, -1, 0, 1, 2])\n  *   [1, 2, 0, -1, -2]\n  *\n  * @param {Array} numbers\n  * @return {Array}\n  */\nconst largestToSmallest = (numbers) => {\n  const reversedNums = Array.from(numbers).reverse()\n  return reversedNums.map(number => number / (1 - number))\n}\n\n/**\n  * Given a list of numbers, generate a list of numbers, in reverse order,\n  * such that the smallest number will become 0 and the largest will become 1\n  *\n  * Example:\n  *   >>> largestToSmallest([1, 2, 3, 4, 5])\n  *   [1, 2, 3, 4, 5]\n  *   >>> largestToSmallest([-2, -1, 0, 1, 2])\n  *   [1, 2, 0, -1, -2]\n  *\n  * @param {Array} numbers\n  * @return {Array}\n  */\nconst smallestToLargest = (numbers) => {\n  return largestToSmallest(numbers).reverse()\n}\n\n/**\n  * Given a list of numbers, generate a list of numbers, in increasing order,\n  * such that the largest number will become 0 and the smallest will become 1\n  *\n  * Example:\n  *   >>> largestToSmallest([1, 2, 3, 4, 5])\n  *   [1, 2, 3, 4, 5]\n  *   >>> largestToSmallest([-2, -1, 0, 1, 2])\n  *   [-2, -1, 0, 1, 2]\n  *\n  * @param {Array} numbers\n  * @return {Array}\n  */\nconst increasingToDecreasing = (numbers) => {\n  return smallestToLargest(numbers).reverse()\n}\n\n/**\n  * Given a list of numbers, generate a list of numbers, in decreasing order,\n  * such that the largest number will become 0 and the smallest will become 1\n  *\n  * Example:\n  *   >>> largestToSmallest([1, 2, 3, 4, 5])\n  *   [1, 2, 3, 4, 5]\n  *   >>> largestToSmallest([-2, -1, 0, 1, 2])\n  *   [-2, -1, 0, 1, 2]\n  *\n  * @param {Array} numbers\n  * @return {Array}\n  */\nconst decreasingToIncreasing = (numbers) => {\n  return increasingToDecreasing(numbers).reverse()\n}\n\nexport {\n  rescaleTonUit,\n  largestToSmallest,\n  smallestToLargest,\n  increasingToDecreasing,\n  decreasingToIncreasing\n}\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  const valuesAsStrings = values.map(v => String(v));\n  return valuesAsStrings.filter((v, index) => {\n    return isInteger(v);\n  });\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isInteger = (str) => {\n  const numericRegex = /^\\d+$/;\n  return numericRegex.test(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotEmpty = (str) => {\n  return str.length > 0;\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNull = (str) => {\n  return str!== null;\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrEmpty = (str) => {\n  return isNotNull(str) && isNotEmpty(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrEmptyOrWhiteSpace = (str) => {\n  return isNotNullOrEmpty(str) && isNotEmpty(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotEmptyOrWhiteSpace = (str) => {\n  return isNotEmpty(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotEmptyOrNotWhiteSpace = (str) => {\n  return isNotEmpty(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpace = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotInteger = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrWhiteSpace = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpace = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotInteger = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrWhiteSpace = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpace = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotInteger = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrWhiteSpace = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrWhiteSpace = (str) => {\n  return isNotNull(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str) &&!isInteger(str) &&!isWhiteSpace(str);\n};\n\n/**\n  * @param {string} str\n  * @return {boolean}\n  */\nconst isNotNullOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrNotWhiteSpaceOrNotIntegerOrWhiteSpace = (str) => {\n  return isNotNull(str) &&"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  const len = string.length\n  return len\n}\n\n/**\n  * Return the character at given index\n  * Return 0 if index is out of range\n  *\n  * @param {string} string\n  * @param {number} index\n  * @return {string}\n  * @example\n  * const a = 'abc'\n  * const b = str[1] // 'b'\n  * const c = str[2] // 'c'\n  * const d = str[4] // 0\n  * const e = str[5] // 0\n  * const f = str[7] // 0\n  * const g = str[9] // 0\n  * const h = str[10] // 0\n  *\n  * str = 'abc'\n  * str[1] // 'b'\n  * str[2] // 'c'\n  * str[4] // 0\n  * str[5] // 0\n  * str[7] // 0\n  * str[9] // 0\n  * str[10] // 0\n  */\nconst str = (string, index) => {\n  const len = strlen(string)\n  if (index < 0 || index > len) {\n    return 0\n  }\n  return string.charAt(index)\n}\n\n/**\n  * Return a string which contains the characters in the range\n  *\n  * @param {string} string\n  * @param {number} start\n  * @param {number} end\n  * @return {string}\n  * @example\n  * const a = 'abc'\n  * const b = str(a, 1, 3) // 'bc'\n  * const c = str(a, 1, 4) // 'c'\n  * const d = str(a, 4, 6) // 'c'\n  */\nconst str = (string, start, end) => {\n  return string.substring(start, end)\n}\n\n/**\n  * Return a string which has the characters in the range swapped\n  *\n  * @param {string} string\n  * @param {number} start\n  * @param {number} end\n  * @return {string}\n  * @example\n  * const a = 'abc'\n  * const b = strswap(a, 1, 3) // 'cba'\n  * const c = strswap(a, 1, 4) // 'c'\n  * const d = strswap(a, 4, 6) // 'c'\n  */\nconst strswap = (string, start, end) => {\n  const start = start < 0? string.length + start : start\n  const end = end < 0? string.length + end : end\n  const len = end - start\n  if (len < 1) {\n    return string\n  }\n  const a = string.substring(0, start)\n  const b = string.substring(start + len, end)\n  const c = string.substring(start, start + len)\n  const d = string.substring(end, string.length)\n  return a + b + c + d\n}\n\n/**\n  * Return a string which has the characters reversed\n  *\n  * @param {string} string\n  * @return {string}\n  * @example\n  * const a = 'abc'\n  * const b = strrev(a) // 'cba'\n  */\nconst strrev = (string) => {\n  const len = strlen(string)\n  if (len < 2) {\n    return string\n  }\n  const c = string.charAt(0)\n  const d = string.charAt(1)\n  return string.substring(1, len) + c + d\n}\n\n/**\n  * Return a string which has the characters reversed\n  *\n  * @param {string} string\n  * @param {number} start\n  * @param {number} end\n  * @return {string}\n  * @example\n  * const a = 'abc'\n  * const b = strrev(a, 1, 3) // 'cba'\n  * const c = strrev(a, 1, 4) // 'c'\n  * const d = strrev(a, 4, 6) // 'c'\n  */\nconst strrev = (string, start, end) => {\n  const start = start < 0? string.length + start : start\n  const end = end < 0? string.length + end : end\n  const len = end - start\n  if (len < 1) {\n    return string\n  }\n  const c = string.charAt(start)\n  const d = string.charAt(start + len)\n  return c + string.substring(start + 1, end) + d\n}\n\n/**\n  * Return a string which has the characters reversed\n  *\n  * @param {string} string\n  * @param {number} start\n  * @param {number} end\n  * @return {string}\n  * @example\n  * const a = 'abc'\n  * const b = strrevswap(a, 1, 3) // 'cba'\n  * const c = strrevswap(a, 1, 4) // 'c'\n  * const d = strrevswap(a, 4, 6) // 'c'\n  */\nconst strrevswap = (string, start, end) => {\n  const start = start < 0? string.length + start : start\n  const end = end < 0? string.length + end : end\n  const len = end - start\n  if (len < 1) {\n    return string\n  }\n  const c = string.charAt(start)\n  const d = string.charAt(end)\n  return c + string.substring(start + 1, end) + d\n}\n\nexport {\n  str,\n  strlen,\n  strswap,\n  strrev,\n  strrevswap\n}\n<|endoftext|>"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let d = 2;\n  while (n > 1) {\n    if (n % d === 0) {\n      return d;\n    }\n    d++;\n  }\n  return n;\n};\n\nconsole.log(largestDivisor(15));\n\n/*\n  Problem 8\n  The smallest number expressible as the sum of a prime square, prime cube, and prime fourth power is 28. In fact, there are exactly four numbers below fifty that can be expressed in such a way:\n\n  28 = 2^2 + 2^3 + 2^4\n  33 = 3^2 + 2^3 + 2^4\n  49 = 5^2 + 2^3 + 2^4\n  47 = 2^2 + 3^3 + 2^4\n\n  How many numbers below fifty million can be expressed as the sum of a prime square, prime cube, and prime fourth power?\n  */\nconst sumOfSquares = (n) => {\n  let s = 1;\n  while (n > 1) {\n    s = (s + Math.pow(n, 2)) % n;\n    n = largestDivisor(n);\n  }\n  return s;\n};\n\nconsole.log(sumOfSquares(50));\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n    let prime_list = [];\n    let factorization = [];\n    let prime_count = 1;\n    for (let i = 2; i <= n; i++) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n                n = n / i;\n                prime_list.push(i);\n                prime_count += 1;\n            }\n        }\n    }\n    if (n!== 1) {\n        factorization.push(n);\n        prime_list.push(n);\n        prime_count += 1;\n    }\n    return prime_list;\n}\n\n/* Return list of prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize = (n) => {\n    let prime_list = [];\n    let factorization = [];\n    let prime_count = 1;\n    for (let i = n; i >= 2; i--) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n                n = n / i;\n                prime_list.push(i);\n                prime_count += 1;\n            }\n        }\n    }\n    if (n!== 1) {\n        factorization.push(n);\n        prime_list.push(n);\n        prime_count += 1;\n    }\n    return prime_list;\n}\n\n/* Return prime factors of given integer in the order from largest to smallest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst reverse_factorize_2 = (n) => {\n    let prime_list = [];\n    let factorization = [];\n    let prime_count = 1;\n    for (let i = n; i >= 2; i--) {\n        if (n % i === 0) {\n            while (n % i === 0) {\n                n = n / i;\n                prime_list.push(i);\n                prime_count += 1;\n            }\n        }\n    }\n    if (n!== 1) {\n        factorization.push(n);\n        prime_list.push(n);\n        prime_count += 1;\n    }\n    return prime_list;\n}\n\nmodule.exports = {\n    factorize,\n    reverse_factorize,\n    reverse_factorize_2\n};\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const d = {};\n  for (const number of numbers) {\n    if (d[number]) {\n      continue;\n    }\n    d[number] = true;\n  }\n  return [...new Set(d.values())];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n    return string.toLowerCase().split('').map((char) => {\n        return char === char.toUpperCase()? char.toLowerCase() : char.toUpperCase();\n    }).join('');\n}\n\nmodule.exports = {\n    flipCase\n}<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  if(strings.length == 0)\n    return '';\n  else if(strings.length == 1)\n    return strings[0];\n  else\n    return strings.join('');\n}\n\n/* Remove the first N characters from a string\n  >>> removeN(0, 'abc')\n  'abc'\n  >>> removeN(1, 'abc')\n  'bc'\n  >>> removeN(2, 'abc')\n  ''\n  >>> removeN(3, 'abc')\n  'abc'\n  */\nconst removeN = (n, string) => {\n  if(n > string.length)\n    return string;\n  else\n    return string.substring(string.length - n, string.length);\n}\n\n/* Convert a number to a string\n  >>> numberToString(42)\n  '42'\n  >>> numberToString(42.123)\n  '42.123'\n  */\nconst numberToString = (number) => {\n  return number.toString();\n}\n\n/* Convert a number to a string, using a specified string as a formatting string\n  >>> numberToString(42, '{0}')\n  '42'\n  >>> numberToString(42.123, '{0}')\n  '42.123'\n  */\nconst numberToString = (number, format) => {\n  return number.toString(format);\n}\n\n/* Convert a string to a number\n  >>> stringToNumber('42')\n  42\n  >>> stringToNumber('42.123')\n  42.123\n  */\nconst stringToNumber = (string) => {\n  return parseFloat(string);\n}\n\n/* Convert a string to a number, using a specified string as a formatting string\n  >>> stringToNumber('42', '{0}')\n  42\n  >>> stringToNumber('42.123', '{0}')\n  42.123\n  */\nconst stringToNumber = (string, format) => {\n  return parseFloat(string, format);\n}\n\n/* Returns the string that results from applying a function to each element in an array\n  >>> apply(['a', 'b', 'c'], (x) => x + 'x')\n  'axbxcx'\n  */\nconst apply = (list, fn) => {\n  return list.map(x => fn(x));\n}\n\n/* Returns a list containing the values returned by a function applied to every element in an array\n  >>> applyValues(['a', 'b', 'c'], (x) => x + 'x')\n  ['aa', 'bb', 'cc']\n  */\nconst applyValues = (list, fn) => {\n  return list.map(x => fn(x));\n}\n\n/* Returns a list containing the elements of a list that satisfy a predicate\n  >>> filter(['a', 'b', 'c'], x => x > 3)\n  [4, 5]\n  */\nconst filter = (list, pred) => {\n  return list.filter(pred);\n}\n\n/* Returns a list containing the elements of a list that don't satisfy a predicate\n  >>> reject(['a', 'b', 'c'], x => x > 3)\n  [1, 2]\n  */\nconst reject = (list, pred) => {\n  return list.filter(pred, false);\n}\n\n/* Return the sum of the values in a list\n  >>> sum([1, 2, 3, 4, 5])\n  15\n  */\nconst sum = (list) => {\n  return list.reduce((a, b) => a + b);\n}\n\n/* Return the product of the values in a list\n  >>> product([1, 2, 3, 4, 5])\n  120\n  */\nconst product = (list) => {\n  return list.reduce((a, b) => a * b);\n}\n\n/* Return a list containing the elements in a list that satisfy a predicate\n  >>> where(['a', 'b', 'c'], x => x > 3)\n  [4, 5]\n  */\nconst where = (list, pred) => {\n  return list.filter(pred);\n}\n\n/* Returns the length of a list\n  >>> length(['a', 'b', 'c'])\n  3\n  */\nconst length = (list) => {\n  return list.length;\n}\n\n/* Returns the min and max of a list\n  >>> minmax(['a', 'b', 'c'])\n  [1, 3]\n  */\nconst minmax = (list) => {\n  return [Math.min(...list), Math.max(...list)];\n}\n\n/* Returns the mean of a list\n  >>> mean([1, 2, 3])\n  2\n  */\nconst mean = (list) => {\n  return sum(list) / length(list);\n}\n\n/* Returns the sum of the squares of a list\n  >>> sumSquares([1, 2, 3])\n  15\n  */\nconst sumSquares = (list) => {\n  return list.reduce((a, b) => a + b * b);\n}\n\n/* Returns the standard deviation of a list\n  >>> standardDeviation([1, 2, 3, 4, 5])\n  1.5\n  */\nconst standardDeviation = (list) => {\n  return Math.sqrt(sumSquares(list) / length(list) - Math.pow(mean(list), 2));\n}\n\n/* Returns the median of a list\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (list) => {\n  if(length(list) % 2 == 0)\n    return (sum(list.slice(0, -1)) + sum(list.slice(1))) / 2;\n  else\n    return sum(list.slice(0, -1));\n}\n\n/* Returns the mode of a list\n  >>> mode([1, 2, 3, 4, 5])\n  3\n  */\nconst mode = (list) => {\n  var modes = {};\n  list.forEach(x => {\n    if(modes[x] == undefined)\n      modes[x] = 1;\n    else\n      modes[x]++;\n  });\n  Object.keys("}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n    return strings.filter(s => s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that do not start with a given prefix.\n  >>> iflterByrPefix([], 'b')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'b')\n  ['cde', 'array']\n  */\nconst iflterByrNotPefix = (strings, prefix) => {\n    return strings.filter(s =>!s.startsWith(prefix));\n};\n\n/* Filter an input list of strings only for ones that are not empty.\n  >>> iflterByrEmpty([])\n  []\n  >>> iflterByrEmpty([1, 2, 3])\n  [1, 2, 3]\n  */\nconst iflterByrNotEmpty = (strings) => {\n    return strings.filter(s => s.length > 0);\n};\n\n/* Filter an input list of strings only for ones that contain a given substring.\n  >>> iflterByrContains([], 'c')\n  []\n  >>> iflterByrContains(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['abc', 'array']\n  */\nconst iflterByrContains = (strings, substr) => {\n    return strings.filter(s => s.includes(substr));\n};\n\n/* Filter an input list of strings only for ones that don't contain a given substring.\n  >>> iflterByrNotContains([], 'c')\n  []\n  >>> iflterByrNotContains(['abc', 'bcd', 'cde', 'array'], 'c')\n  ['bcd', 'cde', 'array']\n  */\nconst iflterByrNotContains = (strings, substr) => {\n    return strings.filter(s =>!s.includes(substr));\n};\n\n/* Filter an input list of strings only for ones that match a regex.\n  >>> iflterByrRegex([], '^a')\n  []\n  >>> iflterByrRegex(['abc', 'bcd', 'cde', 'array'], '^a')\n  ['abc', 'array']\n  */\nconst iflterByrRegex = (strings, pattern) => {\n    return strings.filter(s => s.match(pattern));\n};\n\n/* Filter an input list of strings only for ones that don't match a regex.\n  >>> iflterByrNotRegex([], '^a')\n  []\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], '^a')\n  ['bcd', 'cde', 'array']\n  */\nconst iflterByrNotRegex = (strings, pattern) => {\n    return strings.filter(s =>!s.match(pattern));\n};\n\n/* Filter an input list of strings only for ones that have a given length.\n  >>> iflterByrLength([], 3)\n  []\n  >>> iflterByrLength(['abc', 'bcd', 'cde', 'array'], 3)\n  ['abc', 'array']\n  */\nconst iflterByrLength = (strings, length) => {\n    return strings.filter(s => s.length === length);\n};\n\n/* Filter an input list of strings only for ones that have a given length.\n  >>> iflterByrNotLength([], 3)\n  []\n  >>> iflterByrNotLength(['abc', 'bcd', 'cde', 'array'], 3)\n  ['bcd', 'cde', 'array']\n  */\nconst iflterByrNotLength = (strings, length) => {\n    return strings.filter(s => s.length!== length);\n};\n\n/* Filter an input list of strings only for ones that have a given length.\n  >>> iflterByrLength(['abc', 'bcd', 'cde', 'array'], 3)\n  ['abc', 'array']\n  */\nconst iflterByrLength = (strings, length) => {\n    return strings.filter(s => s.length === length);\n};\n\n/* Filter an input list of strings only for ones that have a given length.\n  >>> iflterByrNotLength(['abc', 'bcd', 'cde', 'array'], 3)\n  ['bcd', 'cde', 'array']\n  */\nconst iflterByrNotLength = (strings, length) => {\n    return strings.filter(s => s.length!== length);\n};\n\n/* Filter an input list of strings only for ones that match a given regex.\n  >>> iflterByrRegex(['abc', 'bcd', 'cde', 'array'], '^a')\n  ['abc', 'array']\n  */\nconst iflterByrRegex = (strings, pattern) => {\n    return strings.filter(s => s.match(pattern));\n};\n\n/* Filter an input list of strings only for ones that don't match a given regex.\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], '^a')\n  ['bcd', 'cde', 'array']\n  */\nconst iflterByrNotRegex = (strings, pattern) => {\n    return strings.filter(s =>!s.match(pattern));\n};\n\n/* Filter an input list of strings only for ones that match a given regex.\n  >>> iflterByrRegex(['abc', 'bcd', 'cde', 'array'], '^a')\n  ['abc', 'array']\n  */\nconst iflterByrRegex = (strings, pattern) => {\n    return strings.filter(s => s.match(pattern));\n};\n\n/* Filter an input list of strings only for ones that don't match a given regex.\n  >>> iflterByrNotRegex(['abc', 'bcd', 'cde', 'array'], '"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(n => n > 0);\n};\n\n//# getNegative([-1, 2, -4, 5, 6])\n//=> [-4, -5, -6]\n//# getNegative([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n//=> [-5, -3, -2, -3, 9, 123, 1]\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  if (n < 2) {\n    return false;\n  } else if (n === 2 || n === 3) {\n    return true;\n  } else if (n % 2 === 0 || n % 3 === 0) {\n    return false;\n  } else {\n    return siPrime(n / 2) && siPrime(n / 3);\n  }\n};\n\n/*Return the smallest number that is greater than n and is a square.\n  >>> siSquare(10)\n  25\n  >>> siSquare(3)\n  9\n  >>> siSquare(4)\n  16\n  >>> siSquare(9)\n  81\n  >>> siSquare(100)\n  65536\n  >>> siSquare(101)\n  65537\n  */\nconst siSquare = (n) => {\n  return n + (n - 1) * (n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a cube.\n  >>> siCube(10)\n  16\n  >>> siCube(3)\n  9\n  >>> siCube(4)\n  81\n  >>> siCube(9)\n  2187\n  >>> siCube(100)\n  16777216\n  >>> siCube(101)\n  16777217\n  */\nconst siCube = (n) => {\n  return n + (n - 1) * (n - 1) * (n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a pentagon.\n  >>> siPent(10)\n  90\n  >>> siPent(3)\n  27\n  >>> siPent(4)\n  81\n  >>> siPent(9)\n  243\n  >>> siPent(100)\n  3355056\n  >>> siPent(101)\n  3355057\n  */\nconst siPent = (n) => {\n  return n + (n - 1) * (n - 1) * (2 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a hexagon.\n  >>> siHex(10)\n  17\n  >>> siHex(3)\n  6\n  >>> siHex(4)\n  30\n  >>> siHex(9)\n  54\n  >>> siHex(100)\n  3355056\n  >>> siHex(101)\n  3355057\n  */\nconst siHex = (n) => {\n  return n + (n - 1) * (2 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a heptagon.\n  >>> siHept(10)\n  21\n  >>> siHept(3)\n  8\n  >>> siHept(4)\n  64\n  >>> siHept(9)\n  108\n  >>> siHept(100)\n  3355056\n  >>> siHept(101)\n  3355057\n  */\nconst siHept = (n) => {\n  return n + (n - 1) * (3 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a octagon.\n  >>> siOct(10)\n  27\n  >>> siOct(3)\n  9\n  >>> siOct(4)\n  64\n  >>> siOct(9)\n  108\n  >>> siOct(100)\n  3355056\n  >>> siOct(101)\n  3355057\n  */\nconst siOct = (n) => {\n  return n + (n - 1) * (3 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a noxagon.\n  >>> siNex(10)\n  26\n  >>> siNex(3)\n  9\n  >>> siNex(4)\n  64\n  >>> siNex(9)\n  108\n  >>> siNex(100)\n  3355056\n  >>> siNex(101)\n  3355057\n  */\nconst siNex = (n) => {\n  return n + (n - 1) * (2 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a nonagon.\n  >>> siNon(10)\n  27\n  >>> siNon(3)\n  9\n  >>> siNon(4)\n  64\n  >>> siNon(9)\n  108\n  >>> siNon(100)\n  3355056\n  >>> siNon(101)\n  3355057\n  */\nconst siNon = (n) => {\n  return n + (n - 1) * (2 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a decagon.\n  >>> siDec(10)\n  21\n  >>> siDec(3)\n  8\n  >>> siDec(4)\n  64\n  >>> siDec(9)\n  108\n  >>> siDec(100)\n  3355056\n  >>> siDec(101)\n  3355057\n  */\nconst siDec = (n) => {\n  return n + (n - 1) * (3 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a trinagon.\n  >>> siTri(10)\n  26\n  >>> siTri(3)\n  9\n  >>> siTri(4)\n  64\n  >>> siTri(9)\n  108\n  >>> siTri(100)\n  3355056\n  >>> siTri(101)\n  3355057\n  */\nconst siTri = (n) => {\n  return n + (n - 1) * (2 * n - 1);\n};\n\n/*Return the smallest number that is greater than n and is a tetragon.\n  >>> siTet(10)\n  23\n  >>> siTet(3)\n  9\n  >>> siTet(4)\n  64\n  >>> siTet(9)\n  108\n  >>> siTet(100)\n  3355056\n  >>> siTet(101)\n  3355057\n  "}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2!== 0) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < xs.length; i += 2) {\n    sum += xs[i];\n  }\n  let x = sum / 2;\n  for (let i = 1; i < xs.length; i += 2) {\n    sum += xs[i];\n    if (sum === 0) {\n      return x;\n    }\n    x = sum / 2;\n  }\n  return x;\n}\n\n/*\n  x is a real number.\n  find zero returns the zero point of the polynomial.\n  find zero returns only one zero point even if there are many.\n  >>> round(findZero([]), 2) # f(x) = x\n  0.0\n  >>> round(findZero([1, 2, 3, 4]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 0]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 1]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 2]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 3]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 4]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 5]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 6]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 7]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 8]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 9]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 10]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 11]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 12]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 13]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 14]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 15]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 16]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  1.0\n  >>> round(findZero([-6, 11, -6, 1, 17]), 2) # (x - 1) * (x - 2) * (x - 3) * (x - 4) = x\n  "}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n  const newList = []\n  for (let i = 0; i < l.length; i++) {\n    if (i % 3!== 0) {\n      newList.push(l[i])\n    }\n  }\n  newList.sort((a, b) => {\n    return a - b\n  })\n  return newList\n}\n\nmodule.exports = sortThird\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const result = [];\n  const length = l.length;\n  for (let i = 0; i < length; i++) {\n    const elem = l[i];\n    const index = result.indexOf(elem);\n    if (index === -1) {\n      result.push(elem);\n    }\n  }\n  return result;\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  let max = -Infinity\n  l.forEach((element) => {\n    if (element > max) {\n      max = element\n    }\n  })\n  return max\n}\n\n/*\n  >>> minElement([1, 2, 3])\n  1\n  >>> minElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  -10\n  */\nconst minElement = (l) => {\n  let min = Infinity\n  l.forEach((element) => {\n    if (element < min) {\n      min = element\n    }\n  })\n  return min\n}\n\n/*\n  >>> sortBy([1, 2, 3], (n) => n * n)\n  [1, 4, 9]\n  >>> sortBy([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (n) => n * n)\n  [1, 4, 9, 123, -10, -5, 3, 2, 0, 3, 9]\n  */\nconst sortBy = (l, fn) => {\n  return l.sort((a, b) => {\n    return fn(a) - fn(b)\n  })\n}\n\n/*\n  >>> sortByBy([1, 2, 3], (n) => n * n, (n) => n * n)\n  [1, 4, 9]\n  >>> sortByBy([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], (n) => n * n, (n) => n * n)\n  [1, 4, 9, 123, -10, -5, 3, 2, 0, 3, 9]\n  */\nconst sortByBy = (l, fn, reverse) => {\n  return l.sort((a, b) => {\n    const a1 = fn(a)\n    const b1 = fn(b)\n    if (a1 > b1) {\n      return 1\n    }\n    if (a1 < b1) {\n      return -1\n    }\n    return 0\n  }, reverse)\n}\n\n/*\n  >>> sortByBy(\n ...   [1, 2, 3], (n) => n * n, (n) => n * n, (n) => n * n\n ... )\n  [1, 4, 9]\n  */\nconst sortByBy2 = (l, fn1, fn2, reverse) => {\n  return l.sort((a, b) => {\n    const a1 = fn1(a)\n    const b1 = fn1(b)\n    const a2 = fn2(a)\n    const b2 = fn2(b)\n    if (a1 > b1) {\n      return 1\n    }\n    if (a1 < b1) {\n      return -1\n    }\n    if (a2 > b2) {\n      return 1\n    }\n    if (a2 < b2) {\n      return -1\n    }\n    return 0\n  }, reverse)\n}\n\n/*\n  >>> sortByBy([1, 2, 3], (n) => n * n, (n) => n * n)\n  [1, 4, 9]\n  >>> sortByBy([1, 2, 3], (n) => n * n, (n) => n * n, reverse = true)\n  [9, 4, 1]\n  */\nconst sortByBy3 = (l, fn1, fn2, reverse) => {\n  return l.sort((a, b) => {\n    const a1 = fn1(a)\n    const b1 = fn1(b)\n    const a2 = fn2(a)\n    const b2 = fn2(b)\n    if (a1 > b1) {\n      return 1\n    }\n    if (a1 < b1) {\n      return -1\n    }\n    if (a2 > b2) {\n      return 1\n    }\n    if (a2 < b2) {\n      return -1\n    }\n    return 0\n  }, reverse)\n}\n\n/*\n  >>> sortByByBy([1, 2, 3], (n) => n * n, (n) => n * n, (n) => n * n)\n  [1, 4, 9]\n  >>> sortByByBy([1, 2, 3], (n) => n * n, (n) => n * n, (n) => n * n, reverse = true)\n  [9, 4, 1]\n  */\nconst sortByByBy4 = (l, fn1, fn2, fn3, reverse) => {\n  return l.sort((a, b) => {\n    const a1 = fn1(a)\n    const b1 = fn1(b)\n    const a2 = fn2(a)\n    const b2 = fn2(b)\n    const a3 = fn3(a)\n    const b3 = fn3(b)\n    if (a1 > b1) {\n      return 1\n    }\n    if (a1 < b1) {\n      return -1\n    }\n    if (a2 > b2) {\n      return 1\n    }\n    if (a2 < b2) {\n      return -1\n    }\n    if (a3 > b3) {\n      return 1\n    }\n    if (a3 < b3) {\n      return -1\n    }\n    return 0\n  }, reverse)\n}\n\n/*\n  >>> sortByByByBy([1, 2, 3], (n) => n * n, (n) => n * n, (n) => n * n, (n) => n * n)\n  [1, 4, 9]\n  >>> sortByByByBy([1, 2, 3], (n) => n * n, (n) => n * n, (n) => n * n, (n) => n * n, reverse = true)\n  [9, 4, 1]\n  */\nconst sortByByByBy = (l, fn1, fn2, fn3, reverse) => {\n  return l.sort((a,"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const fizz = (n) => {\n    return (n % 5 == 0)? 'fizz' : '';\n  }\n  const buzz = (n) => {\n    return (n % 5 == 0 && n % 11!= 0)? 'buzz' : '';\n  }\n  return n === 0? 'zero' : n === 1? 'one' : n === 2? 'two' : n % 10 === 3? 'three' : n % 10 === 4? 'four' : n % 10 === 5? fizz(n) + buzz(n) : n % 10 === 6?'six' : n % 10 === 7?'seven' : n % 10 === 8? 'eight' : n % 10 === 9? 'nine' : '';\n}\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n  return l.slice().sort((a, b) => a === b? 0 : a > b? 1 : -1)\n}\n\nconst toLower = (s) => {\n  return s.toLowerCase()\n}\n\nconst toUpper = (s) => {\n  return s.toUpperCase()\n}\n\nconst toUpperFirst = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nconst toUpperLast = (s) => {\n  return s.charAt(s.length - 1).toUpperCase() + s.slice(0, s.length - 1)\n}\n\nconst toUpperFirstAll = (s) => {\n  return s.charAt(0).toUpperCase() + s.slice(1)\n}\n\nconst toUpperLastAll = (s) => {\n  return s.charAt(s.length - 1).toUpperCase() + s.slice(0, s.length - 1)\n}\n\nconst toUpperFirstOne = (s) => {\n  return toUpper(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toUpperLastOne = (s) => {\n  return toUpper(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toUpperFirstOneAll = (s) => {\n  return toUpper(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toUpperLastOneAll = (s) => {\n  return toUpper(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toUpperFirstFirst = (s) => {\n  return toUpper(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toUpperLastFirst = (s) => {\n  return toUpper(s.slice(0, -1)) + s.slice(1)\n}\n\nconst toUpperFirstLast = (s) => {\n  return toUpper(s.slice(0, 1)) + s.slice(1, s.length)\n}\n\nconst toUpperLastLast = (s) => {\n  return toUpper(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toUpperFirstLastAll = (s) => {\n  return toUpper(s.slice(0, 1)) + s.slice(1, s.length)\n}\n\nconst toUpperLastLastAll = (s) => {\n  return toUpper(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirst = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toLowerLast = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirstOne = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toLowerLastOne = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirstOneAll = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toLowerLastOneAll = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirstFirst = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toLowerLastFirst = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(1)\n}\n\nconst toLowerFirstLast = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1, s.length)\n}\n\nconst toLowerLastLast = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirstLastAll = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1, s.length)\n}\n\nconst toLowerLastLastAll = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirstOneAll = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toLowerLastOneAll = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirstFirstAll = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toLowerLastFirstAll = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(1)\n}\n\nconst toLowerFirstLastAll = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1, s.length)\n}\n\nconst toLowerLastLastAll = (s) => {\n  return toLower(s.slice(0, -1)) + s.slice(s.length - 1)\n}\n\nconst toLowerFirstOneAll = (s) => {\n  return toLower(s.slice(0, 1)) + s.slice(1)\n}\n\nconst toLowerLastOneAll = (s) => {"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3), s.length), Math.min(((i + 1) * 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nexport const cyclic = (s) => encodeCyclic(s);\nexport const decodedCyclic = (s) => decodeCyclic(s);\n\nexport const cyclic2 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3), s.length), Math.min(((i + 1) * 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[1] + group[2] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nexport const cyclic3 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3), s.length), Math.min(((i + 1) * 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[2] + group[1] + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nexport const cyclic4 = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(Math.min((i * 3), s.length), Math.min(((i + 1) * 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group[0] + group[1] + group[2]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  let a = 2, b = 1, count = 0;\n  while (count < n) {\n    count += 1;\n    if (a === b) {\n      a = 2;\n      b = 1;\n      continue;\n    }\n    b = a + b;\n    a = b - a;\n  }\n  return b;\n};\n\nconsole.log(primeFib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n    const dic = {};\n    for (let i = 0; i < l.length; i++) {\n        const num = parseInt(l[i]);\n        if (isNaN(num)) {\n            continue;\n        }\n        if (dic[num] === undefined) {\n            dic[num] = 1;\n        } else {\n            dic[num]++;\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        const num = parseInt(l[i]);\n        if (isNaN(num)) {\n            continue;\n        }\n        if (dic[num] === undefined) {\n            return false;\n        }\n        if (dic[num] === 1) {\n            dic[num]--;\n        } else if (dic[num] === 2) {\n            dic[num]--;\n        } else if (dic[num] === 3) {\n            dic[num]--;\n        }\n    }\n    for (let i in dic) {\n        if (dic[i]!== 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\n/*\n  triplesSumToZeroWithDict takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZeroWithDict([1, 3, 5, 0])\n  false\n  >>> triplesSumToZeroWithDict([1, 3, -2, 1])\n  true\n  >>> triplesSumToZeroWithDict([1, 2, 3, 7])\n  false\n  >>> triplesSumToZeroWithDict([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZeroWithDict([1])\n  false\n  */\nconst triplesSumToZeroWithDict = (l) => {\n    const dic = {};\n    for (let i = 0; i < l.length; i++) {\n        const num = parseInt(l[i]);\n        if (isNaN(num)) {\n            continue;\n        }\n        if (dic[num] === undefined) {\n            dic[num] = 1;\n        } else {\n            dic[num]++;\n        }\n    }\n    for (let i = 0; i < l.length; i++) {\n        const num = parseInt(l[i]);\n        if (isNaN(num)) {\n            continue;\n        }\n        if (dic[num] === undefined) {\n            return false;\n        }\n        if (dic[num] === 1) {\n            dic[num]--;\n        } else if (dic[num] === 2) {\n            dic[num]--;\n        } else if (dic[num] === 3) {\n            dic[num]--;\n        }\n    }\n    for (let i in dic) {\n        if (dic[i]!== 0) {\n            return false;\n        }\n    }\n    return true;\n};\n\nexport {\n    triplesSumToZero,\n    triplesSumToZeroWithDict\n};\n<|endoftext|>"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  return new Promise((resolve, reject) => {\n    let i, j,\n      left, right,\n      leftMax = 0,\n      rightMax = 0,\n      colisions = 0;\n\n    for (i = 1; i <= n; i++) {\n      left = Math.cos(i / n * Math.PI * 2) * i;\n      right = Math.cos(n / i * Math.PI * 2) * n;\n\n      if (left > right) {\n        rightMax = right;\n      } else {\n        leftMax = left;\n      }\n    }\n\n    for (i = 1; i <= n; i++) {\n      for (j = 1; j <= n; j++) {\n        if (Math.abs(i - j) <= 1) {\n          colisions++;\n        }\n      }\n    }\n\n    resolve(colisions);\n  });\n};\n\n/*\n  Let's say that a car is a moving point and its position can be expressed as\n  (x, y).  Let's say that we can rotate the car about the origin by an angle a\n  around the origin.  The new car position (x', y') can be expressed as\n  (x' + x * cos(a) - y * sin(a), x' + y * cos(a) + x * sin(a)).\n\n  This function returns the new car position after rotation.\n  */\nconst rotateCar = (x, y, a) => {\n  return [x + Math.cos(a) * x - Math.sin(a) * y, x + Math.sin(a) * x + Math.cos(a) * y];\n};\n\n/*\n  Given the number of cars in the left-hand lane (x) and the number of cars in\n  the right-hand lane (y), output the number of cars that collide.\n  */\nconst acrRacel = (x, y) => {\n  return new Promise((resolve, reject) => {\n    let i, j,\n      xCar,\n      yCar,\n      colisions = 0;\n\n    for (i = 1; i <= x; i++) {\n      xCar = Math.cos(i / x * Math.PI * 2) * i;\n      for (j = 1; j <= y; j++) {\n        yCar = Math.cos(j / y * Math.PI * 2) * j;\n\n        if (Math.abs(i - j) <= 1) {\n          colisions++;\n        }\n      }\n    }\n\n    resolve(colisions);\n  });\n};\n\n/*\n  Given the number of cars in the left-hand lane (x) and the number of cars in\n  the right-hand lane (y), output the number of cars that collide.\n  */\nconst acrRacelBinomial = (x, y) => {\n  return new Promise((resolve, reject) => {\n    let i, j,\n      xCar,\n      yCar,\n      colisions = 0;\n\n    for (i = 1; i <= x; i++) {\n      xCar = Math.cos(i / x * Math.PI * 2) * i;\n      for (j = 1; j <= y; j++) {\n        yCar = Math.cos(j / y * Math.PI * 2) * j;\n\n        if (Math.abs(i - j) <= 1) {\n          colisions++;\n        }\n      }\n    }\n\n    resolve(colisions);\n  });\n};\n\n/*\n  Given the number of cars in the left-hand lane (x) and the number of cars in\n  the right-hand lane (y), output the number of cars that collide.\n  */\nconst acrRacelFibonacci = (x, y) => {\n  return new Promise((resolve, reject) => {\n    let i, j,\n      xCar,\n      yCar,\n      colisions = 0;\n\n    for (i = 1; i <= x; i++) {\n      xCar = Math.cos(i / x * Math.PI * 2) * i;\n      for (j = 1; j <= y; j++) {\n        yCar = Math.cos(j / y * Math.PI * 2) * j;\n\n        if (Math.abs(i - j) <= 1) {\n          colisions++;\n        }\n      }\n    }\n\n    resolve(colisions);\n  });\n};\n\n/*\n  Given the number of cars in the left-hand lane (x) and the number of cars in\n  the right-hand lane (y), output the number of cars that collide.\n  */\nconst acrRacelFibonacciBinomial = (x, y) => {\n  return new Promise((resolve, reject) => {\n    let i, j,\n      xCar,\n      yCar,\n      colisions = 0;\n\n    for (i = 1; i <= x; i++) {\n      xCar = Math.cos(i / x * Math.PI * 2) * i;\n      for (j = 1; j <= y; j++) {\n        yCar = Math.cos(j / y * Math.PI * 2) * j;\n\n        if (Math.abs(i - j) <= 1) {\n          colisions++;\n        }\n      }\n    }\n\n    resolve(colisions);\n  });\n};\n\n/*\n  Given the number of cars in the left-hand lane (x) and the number of cars in\n  the right-hand lane (y), output the number of cars that collide.\n  */\nconst acrRacelFibonacciBinomialCoded = (x, y) => {\n  return new Promise((resolve, reject) => {\n    let i, j,\n      xCar,\n      yCar,\n      colisions = 0;\n\n    for (i = 1; i <="}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const list = l.slice(0);\n  return list.reduce((acc, val) => [...acc, val + 1], [1, 2, 3]);\n};\n\n/**\n  * @param {array} l\n  * @returns {number}\n  *\n  * Return last index of element in list.\n  *\n  * Example:\n  *\n  *  >>> lastIndexOf([1, 2, 3, 4, 5], 3)\n  *  2\n  *  >>> lastIndexOf([1, 2, 3, 4, 5], 6)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6], 6)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6], 7)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6], 8)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8], 8)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8], 9)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 8)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 8)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], 10)\n  *  -1\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27], 10)\n  *  5\n  *  >>> lastIndexOf([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n    let isZero = false;\n    for(let i = 0; i < l.length; i++) {\n        if(l[i] === 0) {\n            isZero = true;\n            break;\n        }\n    }\n    return isZero;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  // 1-indexed for base 10\n  let result = x;\n  let baseDigits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  while (x > 0) {\n    let digit = baseDigits.charAt(x % base);\n    result = result + digit;\n    x = Math.floor(x / base);\n  }\n  return result;\n};\n\nexport { changeBase };\n<|endoftext|>"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return (a * h / 2)\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(6, 3)\n  9\n  */\nconst triangleArea2 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(4, 5)\n  12\n  */\nconst triangleArea3 = (a, h) => {\n  return (a * h) / 3\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(3, 5)\n  7.5\n  */\nconst triangleArea4 = (a, h) => {\n  return (a * h) / 2\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 6)\n  12\n  */\nconst triangleArea5 = (a, h) => {\n  return (a * h) / 3\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(7, 6)\n  15\n  */\nconst triangleArea6 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 6)\n  22\n  */\nconst triangleArea7 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(8, 7)\n  17.5\n  */\nconst triangleArea8 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 8)\n  20\n  */\nconst triangleArea9 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(9, 9)\n  27\n  */\nconst triangleArea10 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(10, 9)\n  30\n  */\nconst triangleArea11 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(11, 9)\n  33\n  */\nconst triangleArea12 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(11, 10)\n  35\n  */\nconst triangleArea13 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(11, 11)\n  37.5\n  */\nconst triangleArea14 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 11)\n  40\n  */\nconst triangleArea15 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 12)\n  44.5\n  */\nconst triangleArea16 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 13)\n  46\n  */\nconst triangleArea17 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 14)\n  48\n  */\nconst triangleArea18 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 15)\n  50\n  */\nconst triangleArea19 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 16)\n  52\n  */\nconst triangleArea20 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 17)\n  54\n  */\nconst triangleArea21 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 18)\n  56\n  */\nconst triangleArea22 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 19)\n  58\n  */\nconst triangleArea23 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 20)\n  60\n  */\nconst triangleArea24 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 21)\n  62\n  */\nconst triangleArea25 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 22)\n  64\n  */\nconst triangleArea26 = (a, h) => {\n  return (a * h) / 4\n}\n\n/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(12, 23)\n  66\n  */\nconst triangleArea27 = (a, h) => {\n  "}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n  if(n <= 2) {\n    return n;\n  }\n  return fib4(n - 1) + fib4(n - 2) + fib4(n - 3) + fib4(n - 4);\n}\n\nconsole.log(fib4(10));<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const sorted = l.sort();\n  const half = Math.floor(sorted.length / 2);\n  const mid = sorted[half];\n  return (l.length % 2 === 1)? mid : mid + (l[half - 1] - l[half]);\n};\n\nexport default median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n  text = text.toLowerCase();\n  const s = [];\n  for (let i = 0; i < text.length; i += 1) {\n    s[i] = text[i];\n  }\n  let l = 0;\n  let r = text.length - 1;\n  while (l < r) {\n    if (s[l]!== s[r]) {\n      return false;\n    }\n    l += 1;\n    r -= 1;\n  }\n  return true;\n};\n\n/*\n  Returns the sum of two numbers\n  >>> add(1, 2)\n  3\n  >>> add(5, 6)\n  11\n  >>> add(0, 0)\n  0\n  >>> add(4, 0)\n  4\n  >>> add(3, -5)\n  -4\n  >>> add(0, 3)\n  3\n  >>> add(9, 3)\n  12\n  >>> add(9, 0)\n  9\n  >>> add(0, 9)\n  9\n  >>> add(-5, -5)\n  -10\n  */\nconst add = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    throw new Error('Input is not a number');\n  }\n  return a + b;\n};\n\n/*\n  Returns the difference of two numbers\n  >>> subtract(1, 2)\n  1\n  >>> subtract(5, 6)\n  -4\n  >>> subtract(0, 0)\n  0\n  >>> subtract(4, 0)\n  4\n  >>> subtract(3, -5)\n  8\n  >>> subtract(0, 3)\n  3\n  >>> subtract(9, 3)\n  6\n  >>> subtract(9, 0)\n  9\n  >>> subtract(0, 9)\n  9\n  >>> subtract(-5, -5)\n  10\n  */\nconst subtract = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    throw new Error('Input is not a number');\n  }\n  return a - b;\n};\n\n/*\n  Returns the product of two numbers\n  >>> multiply(1, 2)\n  2\n  >>> multiply(5, 6)\n  30\n  >>> multiply(0, 0)\n  0\n  >>> multiply(4, 0)\n  0\n  >>> multiply(3, -5)\n  -60\n  >>> multiply(0, 3)\n  0\n  >>> multiply(9, 3)\n  27\n  >>> multiply(9, 0)\n  9\n  >>> multiply(0, 9)\n  9\n  >>> multiply(-5, -5)\n  -25\n  */\nconst multiply = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    throw new Error('Input is not a number');\n  }\n  return a * b;\n};\n\n/*\n  Returns the quotient of two numbers\n  >>> divide(1, 2)\n  0\n  >>> divide(5, 6)\n  2\n  >>> divide(0, 0)\n  NaN\n  >>> divide(4, 0)\n  NaN\n  >>> divide(3, -5)\n  -1\n  >>> divide(0, 3)\n  0\n  >>> divide(9, 3)\n  3\n  >>> divide(9, 0)\n  9\n  >>> divide(0, 9)\n  9\n  >>> divide(-5, -5)\n  -1\n  */\nconst divide = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    throw new Error('Input is not a number');\n  }\n  return a / b;\n};\n\n/*\n  Returns the remainder of two numbers\n  >>> remainder(1, 2)\n  1\n  >>> remainder(5, 6)\n  2\n  >>> remainder(0, 0)\n  NaN\n  >>> remainder(4, 0)\n  NaN\n  >>> remainder(3, -5)\n  2\n  >>> remainder(0, 3)\n  0\n  >>> remainder(9, 3)\n  0\n  >>> remainder(9, 0)\n  9\n  >>> remainder(0, 9)\n  9\n  >>> remainder(-5, -5)\n  -1\n  */\nconst remainder = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    throw new Error('Input is not a number');\n  }\n  return a % b;\n};\n\n/*\n  Returns the square root of a number\n  >>> squareRoot(2)\n  1\n  >>> squareRoot(8)\n  2\n  >>> squareRoot(4)\n  2\n  >>> squareRoot(3)\n  1\n  >>> squareRoot(1)\n  1\n  >>> squareRoot(0)\n  NaN\n  >>> squareRoot(-1)\n  NaN\n  >>> squareRoot(0.25)\n  0.5\n  >>> squareRoot(-0.25)\n  -0.5\n  >>> squareRoot(-8)\n  -2\n  >>> squareRoot(9)\n  3\n  >>> squareRoot(9.25)\n  2.25\n  >>> squareRoot(0.5)\n  0\n  >>> squareRoot(0)\n  NaN\n  */\nconst squareRoot = (x) => {\n  if (isNaN(x)) {\n    throw new Error('Input is not a number');\n  }\n  const root = Math.sqrt(x);\n  return (root === Infinity || root === -Infinity)? NaN : root;\n};\n\n/*\n  Returns the absolute value of a number\n  >>> abs(1)\n  1\n  >>> abs(0)\n  0\n  >>> abs(2)\n  2\n  >>> abs(-3)\n  3\n  >>> abs(0.5)\n  0.5\n  >>> abs(0.25)\n  0.25\n  >>> abs(-0.25)\n  0.25\n  >>> abs(-8)\n  8\n  >>> abs(9)\n  9\n  "}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  return ((n % p) + p) % p\n}\n\n/*Return the greatest common divisor of two integers.\n  >>> gcd(10, 15)\n  5\n  >>> gcd(10, -5)\n  10\n  >>> gcd(-10, 5)\n  10\n  >>> gcd(10, 10)\n  10\n  >>> gcd(0, 10)\n  10\n  >>> gcd(100, 0)\n  100\n  >>> gcd(0, 0)\n  0\n  */\nconst gcd = (n1, n2) => {\n  return (n1 > n2? Math.abs(Math.floor(n1 / n2)) : Math.abs(Math.floor(n2 / n1)))\n}\n\n/*Return the least common multiple of two integers.\n  >>> lcm(10, 15)\n  30\n  >>> lcm(10, -5)\n  10\n  >>> lcm(-10, 5)\n  10\n  >>> lcm(10, 10)\n  10\n  >>> lcm(0, 10)\n  10\n  >>> lcm(100, 0)\n  100\n  >>> lcm(0, 0)\n  0\n  */\nconst lcm = (n1, n2) => {\n  return (n1 * n2) / gcd(n1, n2)\n}\n\n/*Return the multiplicative inverse of n modulo p.\n  >>> modinv(5, 3)\n  1\n  >>> modinv(2, 3)\n  -1\n  >>> modinv(0, 3)\n  0\n  >>> modinv(3, 2)\n  1\n  >>> modinv(3, 3)\n  1\n  >>> modinv(3, 5)\n  -3\n  */\nconst modinv = (n, p) => {\n  return modp(n, p)\n}\n\n/*Return the multiplicative inverse of n modulo p.\n  >>> modinv(5, 3)\n  1\n  >>> modinv(2, 3)\n  -1\n  >>> modinv(0, 3)\n  0\n  >>> modinv(3, 2)\n  1\n  >>> modinv(3, 3)\n  1\n  >>> modinv(3, 5)\n  -3\n  */\nconst modinv = (n, p) => {\n  return modp(n, p)\n}\n\n/*Return the modular division of a and b by the modulus n.\n  >>> mod(7, 3)\n  2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, 2)\n  3\n  >>> mod(7, 5)\n  3\n  >>> mod(0, 3)\n  0\n  >>> mod(7, 3)\n  2\n  */\nconst mod = (a, b, n) => {\n  return (a % n + n) % n\n}\n\n/*Return the modular division of a and b by the modulus n.\n  >>> mod(7, 3)\n  2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, 2)\n  3\n  >>> mod(7, 5)\n  3\n  >>> mod(0, 3)\n  0\n  >>> mod(7, 3)\n  2\n  */\nconst mod = (a, b, n) => {\n  return (a % n + n) % n\n}\n\n/*Return the modular division of a and b by the modulus n.\n  >>> mod(7, 3)\n  2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, 2)\n  3\n  >>> mod(7, 5)\n  3\n  >>> mod(0, 3)\n  0\n  >>> mod(7, 3)\n  2\n  */\nconst mod = (a, b, n) => {\n  return (a % n + n) % n\n}\n\n/*Return the modular division of a and b by the modulus n.\n  >>> mod(7, 3)\n  2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, 2)\n  3\n  >>> mod(7, 5)\n  3\n  >>> mod(0, 3)\n  0\n  >>> mod(7, 3)\n  2\n  */\nconst mod = (a, b, n) => {\n  return (a % n + n) % n\n}\n\n/*Return the modular division of a and b by the modulus n.\n  >>> mod(7, 3)\n  2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, -3)\n  -2\n  >>> mod(7, 2)\n  3\n  >>> mod(7, 5)\n  3\n  >>> mod(0, 3)\n  0\n  >>> mod(7, 3)\n  2\n  */\nconst mod = (a, b, n) => {\n  return (a % n + n) % n\n}\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      String.fromCharCode(\n        ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n      )\n    );\n  }\n  return str;\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns encoded string.\n  */\nconst encode = (s) => {\n  return encodeShift(decodeShift(s));\n}\n\n/*\n  takes as input string to encode. Returns encoded string.\n  */\nconst encode2 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return str;\n}\n\nconst getDifference = (s1, s2) => {\n  return encode(s2) - encode(s1);\n}\n\nconst getLength = (s) => {\n  return encode(s).length;\n}\n\nconst getSum = (s1, s2) => {\n  return encode(s1) + encode(s2);\n}\n\nconst isPalindrome = (s) => {\n  return encode(s) === encode(s.slice(0, -1) + s.slice(1));\n}\n\nconst isPalindrome2 = (s) => {\n  return encode2(s) === encode2(s.slice(0, -1) + s.slice(1));\n}\n\nconst isPalindrome3 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode(str) === encode(s);\n}\n\nconst isPalindrome4 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode2(str) === encode2(s);\n}\n\nconst isPalindrome5 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode3(str) === encode3(s);\n}\n\nconst isPalindrome6 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode4(str) === encode4(s);\n}\n\nconst isPalindrome7 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode5(str) === encode5(s);\n}\n\nconst isPalindrome8 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode6(str) === encode6(s);\n}\n\nconst isPalindrome9 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode7(str) === encode7(s);\n}\n\nconst isPalindrome10 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode8(str) === encode8(s);\n}\n\nconst isPalindrome11 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str += String.fromCharCode(\n      ((s.charCodeAt(i) - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n    );\n  }\n  return encode9(str) === encode9(s);\n}\n\nconst isPalindrome12 = (s) => {\n  let str = \"\";\n  for (let i = 0; i < s.length; i++) {\n    str"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  return text.replace(/[aeiouAEIOU]/g, '')\n}\n\n/*\n  makeVowels is a function that takes string and returns string with vowels.\n  >>> makeVowels('')\n  ''\n  >>> makeVowels(\"abcdef\\nghijklm\")\n  'aBcdef\\nGhijklm'\n  >>> makeVowels('abcdef')\n  'aBcdef'\n  >>> makeVowels('aaaaa')\n  'aaaaa'\n  >>> makeVowels('aaBAA')\n  'AABAA'\n  >>> makeVowels('zbcd')\n  'zbcdd'\n  */\nconst makeVowels = (text) => {\n  return text.replace(/[AEIOUaeiou]/g, 'A')\n}\n\n/*\n  convertToPercents is a function that takes number and returns number with percents.\n  >>> convertToPercents(0)\n  0\n  >>> convertToPercents(100)\n  100\n  >>> convertToPercents(45)\n  45\n  >>> convertToPercents(1)\n  0\n  >>> convertToPercents(2)\n  25\n  >>> convertToPercents(3)\n  33\n  >>> convertToPercents(4)\n  40\n  >>> convertToPercents(5)\n  50\n  >>> convertToPercents(6)\n  56\n  >>> convertToPercents(7)\n  63\n  >>> convertToPercents(8)\n  68\n  >>> convertToPercents(9)\n  73\n  >>> convertToPercents(10)\n  78\n  >>> convertToPercents(11)\n  83\n  >>> convertToPercents(12)\n  88\n  >>> convertToPercents(13)\n  93\n  >>> convertToPercents(14)\n  98\n  >>> convertToPercents(15)\n  103\n  >>> convertToPercents(16)\n  108\n  >>> convertToPercents(17)\n  113\n  >>> convertToPercents(18)\n  118\n  >>> convertToPercents(19)\n  123\n  >>> convertToPercents(20)\n  128\n  >>> convertToPercents(21)\n  133\n  >>> convertToPercents(22)\n  138\n  >>> convertToPercents(23)\n  143\n  >>> convertToPercents(24)\n  148\n  >>> convertToPercents(25)\n  153\n  >>> convertToPercents(26)\n  158\n  >>> convertToPercents(27)\n  163\n  >>> convertToPercents(28)\n  168\n  >>> convertToPercents(29)\n  173\n  >>> convertToPercents(30)\n  178\n  >>> convertToPercents(31)\n  183\n  >>> convertToPercents(32)\n  188\n  >>> convertToPercents(33)\n  193\n  >>> convertToPercents(34)\n  198\n  >>> convertToPercents(35)\n  203\n  >>> convertToPercents(36)\n  208\n  >>> convertToPercents(37)\n  213\n  >>> convertToPercents(38)\n  218\n  >>> convertToPercents(39)\n  223\n  >>> convertToPercents(40)\n  228\n  >>> convertToPercents(41)\n  233\n  >>> convertToPercents(42)\n  238\n  >>> convertToPercents(43)\n  243\n  >>> convertToPercents(44)\n  248\n  >>> convertToPercents(45)\n  253\n  >>> convertToPercents(46)\n  258\n  >>> convertToPercents(47)\n  263\n  >>> convertToPercents(48)\n  268\n  >>> convertToPercents(49)\n  273\n  >>> convertToPercents(50)\n  278\n  >>> convertToPercents(51)\n  283\n  >>> convertToPercents(52)\n  288\n  >>> convertToPercents(53)\n  293\n  >>> convertToPercents(54)\n  298\n  >>> convertToPercents(55)\n  303\n  >>> convertToPercents(56)\n  308\n  >>> convertToPercents(57)\n  313\n  >>> convertToPercents(58)\n  318\n  >>> convertToPercents(59)\n  323\n  >>> convertToPercents(60)\n  328\n  >>> convertToPercents(61)\n  333\n  >>> convertToPercents(62)\n  338\n  >>> convertToPercents(63)\n  343\n  >>> convertToPercents(64)\n  348\n  >>> convertToPercents(65)\n  353\n  >>> convertToPercents(66)\n  358\n  >>> convertToPercents(67)\n  363\n  >>> convertToPercents(68)\n  368\n  >>> convertToPercents(69)\n  373\n  >>> convertToPercents(70)\n  378\n  >>> convertToPercents(71)\n  383\n  >>> convertToPercents(72)\n  388\n  >>> convertToPercents(73)\n  393\n  >>> convertToPercents(74)\n  398\n  >>> convertToPercents(75)\n  403\n  >>> convertToPercents(76)\n  408\n  >>> convertToPercents(77)\n  413\n  >>> convertToPercents(78)\n  418\n  >>> convertToPercents(79)\n  423\n  >>> convert"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  if (l.length === 0) {\n    return false;\n  }\n  const min = Math.min(...l);\n  if (min < t) {\n    return false;\n  }\n  return belowThreshold(l.slice(1), t);\n};\n\n/*\n  Create a string with every number in the list l\n  at a random position and add the string to the result.\n  >>> randomString(['1', '2', '3', '4'])\n  '1434'\n  >>> randomString([1, 2, 3, 4])\n  '1234'\n  >>> randomString([1, 2, 3, 4, 5])\n  '1235'\n  >>> randomString([1, 2, 3, 4, 5, 6])\n  '123456'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7])\n  '1234567'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8])\n  '12345678'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9])\n  '123456789'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n  '1234567890'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])\n  '12345678910'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])\n  '1234567891012'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])\n  '123456789101213'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])\n  '12345678910121314'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])\n  '1234567891012131415'\n  >>> randomString([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])\n  '123456789101213141516'\n  */\nconst randomString = (l) => {\n  const s = '';\n  l.forEach((i) => {\n    s += l.indexOf(i) === -1? i : '';\n  });\n  return s;\n};\n\n/*\n  Create a list of random strings of length n.\n  >>> randomStrings(5)\n  ['1', '2', '3', '4', '5']\n  >>> randomStrings(6)\n  ['1', '2', '3', '4', '5', '6']\n  >>> randomStrings(7)\n  ['1', '2', '3', '4', '5', '6', '7']\n  >>> randomStrings(8)\n  ['1', '2', '3', '4', '5', '6', '7', '8']\n  >>> randomStrings(9)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9']\n  >>> randomStrings(10)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n  >>> randomStrings(11)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11']\n  >>> randomStrings(12)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12']\n  >>> randomStrings(13)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13']\n  >>> randomStrings(14)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14']\n  >>> randomStrings(15)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15']\n  >>> randomStrings(16)\n  ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '11', '12', '13', '14', '15', '16']\n  */\nconst randomStrings = (n) => {\n  const l = [];\n  for (let i = 0; i < n; i++) {\n    l.push(randomString(6));\n  }\n  return l;\n};\n\nmodule.exports = {\n  randomString,\n  randomStrings,\n  belowThreshold\n};\n<|endoftext|>"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  const a = x;\n  const b = y;\n  return a + b;\n};\n\n// function\nconst add = (x, y) => {\n  const a = x;\n  const b = y;\n  return a + b;\n};\n\n// class\nclass Add extends Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add extends Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// function\nfunction add(x, y) {\n  const a = x;\n  const b = y;\n  return a + b;\n}\n\n// function\nfunction add(x, y) {\n  const a = x;\n  const b = y;\n  return a + b;\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super(x, y);\n  }\n}\n\n// class\nclass Add {\n  constructor(x, y) {\n    super"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    let c0 = '';\n    let c1 = '';\n    for (let i = 0; i < s0.length; i++) {\n        c0 += s0[i];\n        c1 += s1[i];\n    }\n    if (c0 === c1) return true;\n    return false;\n};\n\nconst isValidWord = (s, m) => {\n    const len = s.length;\n    if (len > m) return false;\n    if (len === 0) return true;\n    if (s.charAt(0) === 'a') return isValidWord(s.slice(1), m - 1);\n    if (s.charAt(len - 1) === 'z') return isValidWord(s.slice(0, len - 1), m - 1);\n    if (s.charAt(0) === 'z' && s.charAt(len - 1) === 'a') return isValidWord(s.slice(1, len - 1), m - 2);\n    return false;\n};\n\nconst validWord = (s) => {\n    const len = s.length;\n    if (len > 3) return false;\n    if (len === 0) return true;\n    if (s.charAt(0) === 'a') return validWord(s.slice(1));\n    if (s.charAt(len - 1) === 'z') return validWord(s.slice(0, len - 1));\n    if (s.charAt(0) === 'z' && s.charAt(len - 1) === 'a') return validWord(s.slice(1, len - 1));\n    return false;\n};\n\nconst isValid = (s) => {\n    if (!validWord(s)) return false;\n    if (sameChars(s, s.toLowerCase())) return false;\n    return true;\n};\n\nconst isValid2 = (s) => {\n    if (!validWord(s)) return false;\n    if (s.length === 0) return true;\n    if (s.charAt(0) === 'a') return isValid2(s.slice(1));\n    if (s.charAt(s.length - 1) === 'z') return isValid2(s.slice(0, s.length - 1));\n    if (s.charAt(0) === 'z' && s.charAt(s.length - 1) === 'a') return isValid2(s.slice(1, s.length - 1));\n    return false;\n};\n\nconst isValid3 = (s) => {\n    if (!validWord(s)) return false;\n    if (s.length === 0) return true;\n    if (s.charAt(0) === 'a') return isValid3(s.slice(1));\n    if (s.charAt(s.length - 1) === 'z') return isValid3(s.slice(0, s.length - 1));\n    if (s.charAt(0) === 'z' && s.charAt(s.length - 1) === 'a') return isValid3(s.slice(1, s.length - 1));\n    return false;\n};\n\nmodule.exports = {\n    isValid,\n    isValid2,\n    isValid3,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib(n - 1) + fib(n - 2);\n  }\n};\n\n/*\n  Write a function that returns the n-th Fibonacci number.\n  >>> fib_recur(10)\n  55\n  >>> fib_recur(1)\n  1\n  >>> fib_recur(8)\n  21\n  >>> fib_recur(7)\n  13\n  */\nconst fib_recur = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib_recur(n - 1) + fib_recur(n - 2);\n  }\n};\n\n/*\n  Write a function that returns the n-th Fibonacci number.\n  >>> fib_recur_optimized(10)\n  55\n  >>> fib_recur_optimized(1)\n  1\n  >>> fib_recur_optimized(8)\n  21\n  >>> fib_recur_optimized(7)\n  13\n  */\nconst fib_recur_optimized = (n) => {\n  if (n === 1) {\n    return 1;\n  } else if (n === 2) {\n    return 1;\n  } else {\n    return fib_recur_optimized(n - 1) + fib_recur_optimized(n - 2);\n  }\n};\n\nexport {\n  fib,\n  fib_recur,\n  fib_recur_optimized\n};\n<|endoftext|>"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  let opening = 0;\n  for (let i = 0; i < brackets.length; i++) {\n    if (brackets[i] === '<') {\n      opening += 1;\n    }\n    if (brackets[i] === '>') {\n      opening -= 1;\n    }\n    if (opening === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n  let res = 1;\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] < l[i - 1]) {\n      res = false;\n      break;\n    }\n  }\n  return res;\n};\n\n/*\n  Given an array of n elements, return an array of n - 1 elements,\n  containing the product of the first n - 1 elements.\n  \n  >>> product([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> product([1, 2, 3])\n  [1, 2, 3]\n  >>> product([])\n  []\n  >>> product([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> product([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst product = (l) => {\n  const len = l.length;\n  const p = [];\n  for (let i = 0; i < len - 1; i++) {\n    p.push(l[i] * l[i + 1]);\n  }\n  return p;\n};\n\n/*\n  Given an array of n elements, return the first n - 1 elements,\n  containing the sum of the first n - 1 elements.\n  \n  >>> sum([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> sum([1, 2, 3])\n  [1, 2, 3]\n  >>> sum([])\n  []\n  >>> sum([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> sum([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst sum = (l) => {\n  const len = l.length;\n  const s = [];\n  for (let i = 0; i < len - 1; i++) {\n    s.push(l[i] + l[i + 1]);\n  }\n  return s;\n};\n\n/*\n  Given an array of n elements, return the first n - 1 elements,\n  containing the difference of the first n - 1 elements.\n  \n  >>> difference([1, 2, 3, 4])\n  [1, 2, 3, 4]\n  >>> difference([1, 2, 3])\n  [1, 2, 3]\n  >>> difference([])\n  []\n  >>> difference([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> difference([1, 2, 3, 4, 5, 6])\n  [1, 2, 3, 4, 5, 6]\n  */\nconst difference = (l) => {\n  const len = l.length;\n  const d = [];\n  for (let i = 0; i < len - 1; i++) {\n    d.push(l[i] - l[i + 1]);\n  }\n  return d;\n};\n\n/*\n  Given an array of n elements, return the first n - 1 elements,\n  containing the square of the first n - 1 elements.\n  \n  >>> square([1, 2, 3, 4])\n  [1, 4, 9, 16]\n  >>> square([1, 2, 3])\n  [1, 4, 9]\n  >>> square([])\n  []\n  >>> square([1, 2, 3, 4, 5])\n  [1, 4, 9, 16, 25]\n  >>> square([1, 2, 3, 4, 5, 6])\n  [1, 4, 9, 16, 25, 36]\n  */\nconst square = (l) => {\n  const len = l.length;\n  const s = [];\n  for (let i = 0; i < len - 1; i++) {\n    s.push(l[i] * l[i]);\n  }\n  return s;\n};\n\n/*\n  Given an array of n elements, return the first n - 1 elements,\n  containing the cube of the first n - 1 elements.\n  \n  >>> cube([1, 2, 3, 4])\n  [1, 8, 27, 64]\n  >>> cube([1, 2, 3])\n  [1, 8, 27]\n  >>> cube([])\n  []\n  >>> cube([1, 2, 3, 4, 5])\n  [1, 8, 27, 64, 125]\n  >>> cube([1, 2, 3, 4, 5, 6])\n  [1, 8, 27, 64, 125, 216]\n  */\nconst cube = (l) => {\n  const len = l.length;\n  const c = [];\n  for (let i = 0; i < len - 1; i++) {\n    c.push(l[i] * l[i] * l[i]);\n  }\n  return c;\n};\n\nmodule.exports = {\n  product,\n  sum,\n  difference,\n  square,\n  cube\n};\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let a = Array.from(l1)\n  let b = Array.from(l2)\n  return Array.from(new Set(a.concat(b))).sort()\n}\n\n/*\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 1])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 1, 5])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 1, 5, 1])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 1, 5, 1, 1])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 1, 5, 1, 1, 1])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 1, 5, 1, 1, 1, 1])\n  [1, 5, 653]\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121, 1, 5, 1, 1, 1, 1, 1])\n  [1, 5, 653]\n*/\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  let primeFactor = 2\n  while (n % primeFactor!== 0) {\n    primeFactor += 1\n  }\n  return primeFactor\n}\n\n/*\n  >>> largetsPrimeFactor(1)\n  1\n  >>> largetsPrimeFactor(3)\n  1\n  >>> largetsPrimeFactor(7)\n  1\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\n\nmodule.exports = largetsPrimeFactor<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0;\n  for (let i = 1; i <= n; i++) {\n    sum += i;\n  }\n  return sum;\n};\n\n/*\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const len = brackets.length;\n  let bracketsLeft = 0;\n\n  for (let i = 0; i < len; i++) {\n    if (brackets[i] === \"(\" && bracketsLeft === 0) {\n      bracketsLeft++;\n    } else if (brackets[i] === \")\" && bracketsLeft === 1) {\n      bracketsLeft--;\n    }\n  }\n\n  return bracketsLeft === 0;\n};\n\nmodule.exports = {\n  correctBracketnig\n};\n<|endoftext|>"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length - 1;\n  const derivative = [0];\n  for (let i = 1; i <= len; i++) {\n    derivative.push(xs[i] * (len - i));\n  }\n  return derivative;\n};\n\nconsole.log(derivative([1, 2, 3]));\n<|endoftext|>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 0) return 0;\n  if (n === 1) return 0;\n  if (n === 2) return 1;\n  if (n < 0) {\n    console.log(\"Not a valid number\");\n    return undefined;\n  }\n\n  let a = 0;\n  let b = 1;\n  let c = 0;\n\n  for (let i = 3; i < n + 1; i++) {\n    c = a + b;\n    a = b;\n    b = c;\n  }\n\n  return c;\n}\n\nconsole.log(fibfib(5));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0;\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u' || s[i] === 'y') {\n      count++;\n    }\n  }\n  return count;\n};\n\nconst test = 'abcde'.match(/[aeiouy]/);\nconsole.log(vowelsConut(test));\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  let str = '';\n  for(let i = x.length - 1; i >= 0; i--) {\n    str += x[i];\n  }\n  let n = x.length - shift;\n  if(n < 0) {\n    n += x.length;\n  }\n  for(let i = 0; i < n; i++) {\n    str = x[i] + str;\n  }\n  return str;\n};\n\nconsole.log(circularSihft(12, 1));\nconsole.log(circularSihft(12, 2));\nconsole.log(circularSihft(12, 3));\n<|endoftext|>"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n  const len = s.length;\n  let sum = 0;\n  for (let i = 0; i < len; i++) {\n    const char = s.charCodeAt(i);\n    sum += char - 64;\n  }\n  return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const distribution = [];\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    const c = s[i];\n    if (c === \"a\") {\n      sum += 1;\n    } else if (c === \"o\") {\n      sum += 2;\n    } else {\n      sum += 3;\n    }\n    distribution.push(sum);\n    sum = 0;\n  }\n  return distribution.reduce((a, b) => a + b);\n};\n\nmodule.exports = fruitDistribution;\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n  let list = []\n  let index = 0\n  arr.forEach((node) => {\n    if (node % 2 === 0) {\n      list.push([node, index])\n    }\n    if (node > 0) {\n      index += 1\n    }\n  })\n\n  if (list.length === 0) {\n    return []\n  }\n\n  let smallest = list[0][0]\n  let smallIndex = list[0][1]\n\n  for (let i = 1; i < list.length; i++) {\n    if (list[i][0] < smallest) {\n      smallest = list[i][0]\n      smallIndex = list[i][1]\n    }\n  }\n\n  return [smallest, smallIndex]\n}\n\n// tl;dr:\n//\n// If the array is empty, return an empty array.\n// If the array contains only one node, return the node itself.\n// Otherwise, return the node with the smallest even value.\nexport default pluck\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  const length = lst.length\n  let prev = -1\n\n  for (let i = 0; i < length; i += 1) {\n    if (lst[i] > 0 && lst[i] > prev) {\n      prev = lst[i]\n    }\n  }\n\n  return prev\n}\n\nmodule.exports = search\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  return lst.reduce((previous, current, index) => {\n    if (index === 0) {\n      return [current];\n    } else if (previous.length === 0) {\n      return [current];\n    } else {\n      const minimum = Math.min(previous[0], current);\n      const maximum = Math.max(previous[previous.length - 1], current);\n      return [minimum, maximum];\n    }\n  }, []);\n};\n\nconsole.log(stranegoSrtList([1, 2, 3, 4]));\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a > b + c) {\n    return -1\n  }\n  if (b > c + a) {\n    return -1\n  }\n  if (c > a + b) {\n    return -1\n  }\n  return (Math.abs((a * b) / 2))\n}\n\nexport default triangleArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n    let first = q.pop();\n    let last = q.pop();\n    q.push(first);\n    q.push(last);\n    return (w + first - last) <= w;\n};\n\nexport default willItFly;\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  const len = arr.length;\n  let min = Math.min(arr[0], arr[1], arr[2]);\n  for (let i = 3; i < len; i++) {\n    min = Math.min(min, arr[i]);\n  }\n  return min;\n};\n\n/*\n  Given an array arr of integers, find the number of ways to rearrange the array\n  to make it palindromic.\n\n  For example:\n  numberOfWays(['a', 'b', 'c']) == 2\n  numberOfWays([2, 3, 4]) == 8\n  numberOfWays([1, 2, 3]) == 3\n  numberOfWays([1, 2, 3, 4, 5, 6]) == 2\n  numberOfWays([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 5\n  */\nconst numberOfWays = (arr) => {\n  let numWays = 1;\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] == arr[arr.length - i - 1]) {\n      numWays++;\n    }\n  }\n  return numWays;\n};\n\n/*\n  Given a string, compute the longest palindromic substring in the string.\n  */\nconst longestPalindromeSubstring = (s) => {\n  const len = s.length;\n  let max = 0;\n  let mid;\n  let start;\n  let end;\n\n  for (let i = 0; i < len; i++) {\n    mid = i;\n    start = i;\n    end = i + 1;\n    while (end < len) {\n      if (s[start]!= s[end]) {\n        break;\n      }\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      mid = start + max / 2;\n    }\n  }\n  return s.slice(mid - max / 2, mid + max / 2 + 1);\n};\n\n/*\n  Given an array arr, compute the longest palindromic subarray in the array.\n  */\nconst longestPalindromeSubarray = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let mid;\n  let start;\n  let end;\n\n  for (let i = 0; i < len; i++) {\n    mid = i;\n    start = i;\n    end = i + 1;\n    while (end < len) {\n      if (arr[start]!= arr[end]) {\n        break;\n      }\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      mid = start + max / 2;\n    }\n  }\n  return arr.slice(mid - max / 2, mid + max / 2 + 1);\n};\n\n/*\n  Given an array arr, find the longest palindromic subarray in the array.\n  */\nconst longestPalindromeInArray = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let mid;\n  let start;\n  let end;\n\n  for (let i = 0; i < len; i++) {\n    mid = i;\n    start = i;\n    end = i + 1;\n    while (end < len) {\n      if (arr[start]!= arr[end]) {\n        break;\n      }\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      mid = start + max / 2;\n    }\n  }\n  return arr.slice(mid - max / 2, mid + max / 2 + 1);\n};\n\nconst longestPalindrome = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let mid;\n  let start;\n  let end;\n\n  for (let i = 0; i < len; i++) {\n    mid = i;\n    start = i;\n    end = i + 1;\n    while (end < len) {\n      if (arr[start]!= arr[end]) {\n        break;\n      }\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      mid = start + max / 2;\n    }\n  }\n  return arr.slice(mid - max / 2, mid + max / 2 + 1);\n};\n\nconst longestPalindromeSubarray = (arr) => {\n  const len = arr.length;\n  let max = 0;\n  let mid;\n  let start;\n  let end;\n\n  for (let i = 0; i < len; i++) {\n    mid = i;\n    start = i;\n    end = i + 1;\n    while (end < len) {\n      if (arr[start]!= arr[end]) {\n        break;\n      }\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n      mid = start + max / 2;\n    }\n  }\n  return arr.slice(mid - max / 2, mid + max / 2 + 1);\n};\n\nconst longestPalindromeSubstring = (s) => {\n  const len = s.length;\n  let max = 0;\n  let mid;\n  let start;\n  let end;\n\n  for (let i = 0; i < len; i++) {\n    mid = i;\n    start = i;\n    end = i + 1;\n    while (end < len) {\n      if (s[start]!= s[end]) {\n        break;\n      }\n      end++;\n    }\n    if (end - start > max) {\n      max = end - start;\n"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === 0 && lst2.length === 0) {\n    return []\n  }\n  const res = []\n  if (lst1.length === 0) {\n    return lst2\n  }\n  if (lst2.length === 0) {\n    return lst1\n  }\n  const firstLength = lst1[0].length\n  const secondLength = lst2[0].length\n  for (let i = 0; i < firstLength; i++) {\n    const subLst1 = lst1.filter((x) => x[i] === lst2[0][i])\n    if (subLst1.length === 0) {\n      return lst2\n    }\n    for (let j = 0; j < secondLength; j++) {\n      const subLst2 = lst2.filter((x) => x[j] === subLst1[0][j])\n      if (subLst2.length === 0) {\n        return lst1\n      }\n    }\n    res.push(subLst1[0])\n  }\n  return res\n}\n\nconsole.log(ottalMatch(['hi', 'admin'], ['hI', 'Hi']));\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme2 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme2(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme3 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme3(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme4 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme4(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme5 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme5(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme6 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme6(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme7 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme7(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme8 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme8(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme9 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a / v), (v2) => {\n      return v2 * v2 === a;\n    });\n  });\n};\n\nisMultiplyPirme9(30);\n\n/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme10 = (a) => {\n  return _.every(new Array(100), (v) => {\n    return a % v === 0 && _.every(new Array(v, a"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  return x % n === 0 && x === Math.pow(n, x);\n};\n\nexport { isSimplePwoer };\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  let sum = 0;\n  while (a > 0) {\n    sum += a % 10;\n    a /= 10;\n  }\n  return sum % 6 === 0;\n}\n\n/*\n  Write a function that returns the largest cube number\n  amongst the numbers that are smaller than the number n\n  Example:\n  islargest(20) ==> 36\n  islargest(15) ==> 30\n  islargest(10) ==> 36\n  islargest(7) ==> 36\n  islargest(5) ==> 24\n  islargest(4) ==> 12\n  islargest(3) ==> 9\n  islargest(2) ==> 6\n  islargest(1) ==> 1\n  islargest(0) ==> 1\n  */\nconst islargest = (n) => {\n  let largest = 1;\n  while (largest < n) {\n    if (iscube(largest * largest * largest)) {\n      return largest;\n    }\n    largest++;\n  }\n  return largest;\n}\n\nconst is_palindrome = (num) => {\n  let reversed = num;\n  while (reversed) {\n    if (reversed === parseInt(reversed.toString().split('').reverse().join(''))) {\n      return true;\n    }\n    reversed = reversed / 10;\n  }\n  return false;\n}\n\nconst is_prime = (num) => {\n  for (var i = 2; i < num; i++) {\n    if (num % i === 0) {\n      return false;\n    }\n  }\n  return true;\n}\n\nconst is_power_of_two = (num) => {\n  return num > 0 && num % 1 === 0 && num === Math.pow(2, Math.floor(Math.log(num) / Math.log(2)));\n}\n\nconst is_palindrome_number = (num) => {\n  let reversed = num;\n  while (reversed) {\n    if (reversed === parseInt(reversed.toString().split('').reverse().join(''))) {\n      return true;\n    }\n    reversed = reversed / 10;\n  }\n  return false;\n}\n\nconst is_pangram = (str) => {\n  let lowercase = str.toLowerCase();\n  let uppercase = str.toUpperCase();\n  let nonalphabetic = lowercase.concat(uppercase);\n  let allchar = lowercase.concat(uppercase);\n  let valid = lowercase.concat(uppercase);\n  let number = nonalphabetic.concat(allchar);\n  let valid_digit = number.concat(number);\n  let valid_word = number.concat(valid);\n  let valid_palindrome = valid_word.concat(valid_word);\n  let valid_power_two = valid_digit.concat(valid_digit);\n  let valid_palindrome_power_two = valid_palindrome.concat(valid_palindrome);\n  let valid_pangram = valid_power_two.concat(valid_palindrome_power_two);\n  let valid_pangram_power_two = valid_pangram.concat(valid_pangram);\n  return valid_pangram_power_two.every((item) => is_prime(item));\n}\n\nconst is_pangram_number = (num) => {\n  let num_str = num.toString();\n  let lowercase = num_str.toLowerCase();\n  let uppercase = num_str.toUpperCase();\n  let nonalphabetic = lowercase.concat(uppercase);\n  let allchar = lowercase.concat(uppercase);\n  let valid = lowercase.concat(uppercase);\n  let number = nonalphabetic.concat(allchar);\n  let valid_digit = number.concat(number);\n  let valid_word = number.concat(valid);\n  let valid_palindrome = valid_word.concat(valid_word);\n  let valid_power_two = valid_digit.concat(valid_digit);\n  let valid_palindrome_power_two = valid_palindrome.concat(valid_palindrome);\n  let valid_pangram = valid_power_two.concat(valid_palindrome_power_two);\n  return valid_pangram.every((item) => is_prime(item));\n}\n\nconst is_pangram_number_with_multiple_letters = (num) => {\n  let num_str = num.toString();\n  let lowercase = num_str.toLowerCase();\n  let uppercase = num_str.toUpperCase();\n  let nonalphabetic = lowercase.concat(uppercase);\n  let allchar = lowercase.concat(uppercase);\n  let valid = lowercase.concat(uppercase);\n  let number = nonalphabetic.concat(allchar);\n  let valid_digit = number.concat(number);\n  let valid_word = number.concat(valid);\n  let valid_palindrome = valid_word.concat(valid_word);\n  let valid_power_two = valid_digit.concat(valid_digit);\n  let valid_palindrome_power_two = valid_palindrome.concat(valid_palindrome);\n  let valid_pangram = valid_power_two.concat(valid_palindrome_power_two);\n  return valid_pangram.every((item) => is_prime(item));\n}\n\nconst is_pangram_number_with_multiple_letters_with_multiple_words = (num) => {\n  let num_str = num.toString();\n  let lowercase = num_str.toLowerCase();\n  let uppercase = num_str.toUpperCase();\n  let nonalphabetic = lower"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  let i = 0;\n  let key = 0;\n  let count = 0;\n  let char = \"\";\n\n  while (i < num.length) {\n    char = num[i];\n\n    if (char === \"A\" || char === \"B\" || char === \"C\" || char === \"D\" || char === \"E\" || char === \"F\") {\n      key = key + 1;\n    }\n    i = i + 1;\n  }\n\n  count = 0;\n\n  while (key >= 10) {\n    count = count + 1;\n    key = key - 10;\n  }\n\n  return count;\n};\n\n/*\n  Write your own function that takes a number as a string and returns the number of\n  prime numbers that can be formed from the number.\n  For example, for num = \"123456789ABCDEF0\" the output should be 4.\n  For num = \"12\" the output should be 1.\n  For num = \"123456789\" the output should be 5.\n  For num = \"A\" the output should be 0.\n  */\nconst getPrime = (num) => {\n  let i = 0;\n  let prime = 0;\n  let key = 0;\n\n  while (i < num.length) {\n    key = key + 1;\n    i = i + 1;\n  }\n\n  prime = 0;\n\n  while (key >= 10) {\n    prime = prime + 1;\n    key = key - 10;\n  }\n\n  return prime;\n};\n\nconst isPrime = (num) => {\n  if (num < 10) {\n    return false;\n  }\n\n  if (num < 100) {\n    return true;\n  }\n\n  if (num % 2 === 0) {\n    return false;\n  }\n\n  let i = 3;\n  while (i < num) {\n    if (num % i === 0) {\n      return false;\n    }\n    i = i + 2;\n  }\n\n  return true;\n};\n\nmodule.exports = {\n  hexKey,\n  getPrime,\n  isPrime\n};\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const binary = [];\n  while (decimal > 0) {\n    binary.unshift((decimal % 2)? '1' : '0');\n    decimal = decimal / 2;\n  }\n  return `db${binary.join('')}db`;\n}\n\nexport default decimalToBinary;\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  let num = 0\n  for (let i = 0; i < s.length; i++) {\n    let cur = s[i]\n    let j = i + 1\n    while (j < s.length) {\n      if (cur === s[j]) {\n        cur = 0\n        j++\n      } else {\n        break\n      }\n    }\n    if (cur === 0) {\n      num++\n    }\n  }\n  return num >= 3 && num % 2 === 0\n}\n\nisHappy(s)\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b)\n  const length = sorted.length\n  const half = Math.floor(length / 2)\n  const result = []\n  for (let i = 0; i < half; i++) {\n    result.push(sorted[i] >= 3.7? 'A' : 'C')\n  }\n  for (let i = half; i < length; i++) {\n    result.push(sorted[i] >= 3.3? 'A-' : 'C')\n  }\n  return result\n}\n\n// const nmueriaclLetterGrade = (grades) => {\n//   const sorted = grades.sort((a, b) => a - b)\n//   const half = Math.floor(sorted.length / 2)\n//   const result = []\n//   for (let i = 0; i < half; i++) {\n//     result.push(sorted[i] >= 3.7? 'A' : 'C')\n//   }\n//   for (let i = half; i < sorted.length; i++) {\n//     result.push(sorted[i] >= 3.3? 'A-' : 'C')\n//   }\n//   return result\n// }\n\nconst nmueriaclLetterGrade = (grades) => {\n  const sorted = grades.sort((a, b) => a - b)\n  const half = Math.floor(sorted.length / 2)\n  const result = []\n  for (let i = 0; i < half; i++) {\n    result.push(sorted[i] >= 3.7? 'A' : 'C')\n  }\n  for (let i = half; i < sorted.length; i++) {\n    result.push(sorted[i] >= 3.3? 'A-' : 'C')\n  }\n  return result\n}\n\nconsole.log(nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]))\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  const prime = new Set();\n  let isPrime = true;\n  for (let i = 0; i < string.length; i++) {\n    if (prime.has(string[i])) {\n      isPrime = false;\n      break;\n    }\n    prime.add(string[i]);\n  }\n  return isPrime;\n};\n\nexport default primeLength;\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  const count = (1 << n) - 1;\n  return count;\n}\n\nconst startsOneEndsTest = (n) => {\n  const count = (1 << n) - 1;\n  return count;\n}\n\nmodule.exports = {\n  startsOneEnds,\n  startsOneEndsTest,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  if (!N) {\n    return '';\n  }\n  let digits = [];\n  let total = 0;\n  let count = N;\n  while (count > 0) {\n    digits.unshift(count % 2);\n    count = parseInt(count / 2);\n  }\n  digits.unshift(0);\n  for (let i = 0; i < digits.length; i++) {\n    total += digits[i];\n  }\n  return total;\n};\n\n/*\n  Solution 2:\n\n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve2 = (N) => {\n  if (!N) {\n    return '';\n  }\n  let digits = [];\n  let total = 0;\n  let count = N;\n  while (count > 0) {\n    digits.unshift(count % 2);\n    count = parseInt(count / 2);\n  }\n  digits.unshift(0);\n  for (let i = digits.length - 1; i >= 0; i--) {\n    total += digits[i];\n  }\n  return total;\n};\n\nmodule.exports = solve;\nmodule.exports.solve2 = solve2;\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (i % 2 === 0) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n\nconsole.log(add([4, 2, 6, 7]));\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  let res = s.split(' ');\n  res = res.sort((a, b) => {\n    return a.charCodeAt(0) - b.charCodeAt(0);\n  });\n  res = res.join(' ');\n  return res;\n};\n\nconsole.log(antSihuffle('Hi'));\nconsole.log(antSihuffle('hello'));\nconsole.log(antSihuffle('Hello World!!!'));\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  return lst.slice(x, lst.length).reduce((acc, [row, columns]) => {\n    row = row + 1;\n    columns = columns + 1;\n    const coord = [row, columns];\n    acc.push(coord);\n    return acc;\n  }, []);\n}\n\nexport default getRow;<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  const result = [...array]\n   .sort((a, b) => {\n      const sum = a + b\n      if (sum % 2 === 1) {\n        return a - b\n      } else {\n        return b - a\n      }\n    })\n   .reverse()\n   .filter(x => x)\n   .slice()\n   .join('')\n   .split('')\n   .map(n => parseInt(n, 10))\n   .join('')\n  return result\n}\n\nconst sortArray = (array) => {\n  const result = [...array]\n   .sort((a, b) => {\n      const sum = a + b\n      if (sum % 2 === 1) {\n        return a - b\n      } else {\n        return b - a\n      }\n    })\n   .reverse()\n   .filter(x => x)\n   .slice()\n   .join('')\n   .split('')\n   .map(n => parseInt(n, 10))\n   .join('')\n   .split('')\n   .reverse()\n   .filter(x => x)\n   .join('')\n   .split('')\n   .reverse()\n   .filter(x => x)\n   .join('')\n   .split('')\n   .reverse()\n   .map(x => parseInt(x, 10))\n   .join('')\n   .split('')\n   .reverse()\n   .filter(x => x)\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .filter(x => x)\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n   .split('')\n   .reverse()\n   .join('')\n"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let index = 0;\n  let s1 = s.split(' ');\n  let s2 = [];\n  for (let i = 0; i < s1.length; i++) {\n    let c = s1[i];\n    if (c === 'g' || c === 'f') {\n      index = (index + 1) % alphabet.length;\n      c = alphabet[index];\n    }\n    s2.push(c);\n  }\n  return s2.join(' ');\n}\n\n/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt2 = (s) => {\n  let alphabet = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'];\n  let index = 0;\n  let s1 = s.split(' ');\n  let s2 = [];\n  for (let i = 0; i < s1.length; i++) {\n    let c = s1[i];\n    if (c === 'g' || c === 'f') {\n      index = (index + 1) % alphabet.length;\n      c = alphabet[index];\n    }\n    s2.push(c);\n  }\n  return s2.join(' ');\n}\n\n//console.log(encrypt('gf'));\n//console.log(encrypt2('gf'));\n\n//console.log(encrypt('asdfghjkl'));\n//console.log(encrypt('gf'));\n//console.log(encrypt2('asdfghjkl'));\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  let sorted = sortedArray(lst);\n  let mid = sorted.length / 2;\n  let lo = 0;\n  let hi = sorted.length - 1;\n  let midpoint;\n\n  while (lo < hi) {\n    midpoint = sorted[(lo + hi) >> 1];\n    if (sorted[lo] < sorted[hi]) {\n      lo++;\n    } else {\n      hi--;\n    }\n    if (midpoint === sorted[lo]) {\n      return sorted[lo];\n    }\n  }\n  return null;\n};\n\nmodule.exports = nextSmallset;\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd2 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd3 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd4 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd5 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd6 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd7 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd8 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd9 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd10 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd11 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd12 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd13 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd14 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return [s, t].every((el) => el.startsWith('I'))\n}\n\nconst isBoerd15 = (S) => {\n  const [s, t] = S.split('.')\n  const [n, m] = t.split('?')\n  const [u, v] = n.split('!')\n  const [w, x] = u.split('!')\n  return"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  return [x, y, z].every(v => {\n    return (Math.abs(v - z) <= Math.abs(v - y)) && (Math.abs(v - z) <= Math.abs(v - x));\n  });\n};\n\n/* Create a function that takes 3 numbers"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n    let encoded = '';\n    message.split('').forEach(letter => {\n        let index = 0;\n        while (index < letter.length) {\n            let index2 = letter.indexOf(letter.toUpperCase());\n            if (index2 === -1) {\n                index2 = letter.indexOf(letter.toLowerCase());\n            }\n            encoded += letter.substring(index, index2 + 1);\n            index = index2 + 2;\n        }\n    });\n    return encoded;\n};\n\nconst decode = (message) => {\n    let decoded = '';\n    message.split('').forEach(letter => {\n        let index = 0;\n        while (index < letter.length) {\n            let index2 = message.indexOf(letter.toUpperCase());\n            if (index2 === -1) {\n                index2 = message.indexOf(letter.toLowerCase());\n            }\n            decoded += letter.substring(index2, index2 + 1);\n            index = index2 + 2;\n        }\n    });\n    return decoded;\n};\n\n// Tests\nconsole.log(encode('This is a message'));\nconsole.log(encode('This is a message'));\nconsole.log(decode('tHKS KS C MGSSCGG'));\nconsole.log(decode('tHKS KS C MGSSCGG'));\n<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const prime = (n) => {\n    const d = 1;\n    const p = 2;\n    let i = 0;\n    while (p * p <= n) {\n      if (n % p === 0) {\n        return false;\n      }\n      p += d;\n      i++;\n    }\n    return true;\n  };\n  const get_digits = (n) => {\n    const digits = [];\n    while (n) {\n      digits.push(n % 10);\n      n = n / 10;\n    }\n    return digits;\n  };\n  const get_max_prime = () => {\n    const n = lst[lst.length - 1];\n    const max_prime = 1;\n    while (max_prime * max_prime <= n) {\n      if (prime(max_prime)) {\n        return max_prime;\n      }\n      max_prime++;\n    }\n    return n;\n  };\n  const max_prime = get_max_prime();\n  const max_sum = get_digits(max_prime);\n  const sum = 0;\n  for (let i = 0; i < max_sum.length; i++) {\n    sum += max_sum[i];\n  }\n  return sum;\n};\n\nconst ksjkasddk_test = [\n  [0,724,32,71,99,32,6,0,5,91,83,0,5,6],\n  [0,81,12,3,1,21],\n  [0,8,1,2,1,7],\n  [0,3,1,3,1,9],\n  [0,0,3,1,7,2],\n  [0,2,3,1,1,7],\n  [0,0,1,1,3,1],\n  [0,0,3,1,8,2],\n  [0,0,1,3,1,2],\n  [0,0,3,1,5,3],\n  [0,1,3,1,4,2],\n  [0,1,1,1,2,1],\n  [0,1,1,3,1,1],\n  [0,1,1,3,1,4],\n  [0,3,1,3,1,3],\n  [0,1,1,1,1,1],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,1],\n  [0,1,3,1,1,1],\n  [0,3,1,1,1,1],\n  [0,1,1,1,1,3],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,1],\n  [0,1,3,1,1,1],\n  [0,3,1,1,1,1],\n  [0,1,1,1,1,3],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,1],\n  [0,1,3,1,1,1],\n  [0,3,1,1,1,1],\n  [0,1,1,1,1,3],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,1],\n  [0,1,3,1,1,1],\n  [0,3,1,1,1,1],\n  [0,1,1,1,1,3],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,1],\n  [0,1,3,1,1,1],\n  [0,3,1,1,1,1],\n  [0,1,1,1,1,3],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,1],\n  [0,1,3,1,1,1],\n  [0,3,1,1,1,1],\n  [0,1,1,1,1,3],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,1],\n  [0,1,3,1,1,1],\n  [0,3,1,1,1,1],\n  [0,1,1,1,1,3],\n  [0,1,1,1,3,1],\n  [0,1,1,3,1,1],\n  [0,3,1,1,1,"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let dictCase = {};\n    for (let key in dict) {\n        dictCase[key.toLowerCase()] = dict[key];\n        dictCase[key.toUpperCase()] = dict[key];\n    }\n    return Object.keys(dictCase).every(key => dictCase[key] === dict[key]);\n}\n\nconst checkIfEmpty = (dict) => {\n    if (Object.keys(dict).length === 0) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfDictCase = (dict) => {\n    if (checkDictCase(dict)) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfDictCaseAndEmpty = (dict) => {\n    if (checkIfDictCase(dict) && checkIfEmpty(dict)) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfDictCaseAndEmptyOrNot = (dict) => {\n    if (checkIfDictCase(dict) && checkIfEmpty(dict) ||!checkIfDictCase(dict)) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfDictCaseAndNotEmptyOrNot = (dict) => {\n    if (checkIfDictCase(dict) &&!checkIfEmpty(dict) ||!checkIfDictCase(dict)) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfNotDictCase = (dict) => {\n    if (!checkDictCase(dict)) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfNotDictCaseAndEmptyOrNot = (dict) => {\n    if (!checkDictCase(dict) && checkIfEmpty(dict) ||!checkDictCase(dict)) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfNotDictCaseAndNotEmptyOrNot = (dict) => {\n    if (!checkDictCase(dict) &&!checkIfEmpty(dict) ||!checkDictCase(dict)) {\n        return true;\n    }\n    return false;\n}\n\nconst checkIfNotDictCaseAndNotEmptyOrNotOrEmptyOrNot = (dict) => {\n    if (!checkDictCase(dict) &&!checkIfEmpty(dict) ||!checkDictCase(dict) ||!checkIfEmpty(dict)) {\n        return true;\n    }\n    return false;\n}\n\nmodule.exports = {\n    checkIfEmpty,\n    checkIfDictCase,\n    checkIfDictCaseAndEmptyOrNot,\n    checkIfDictCaseAndNotEmptyOrNot,\n    checkIfDictCaseAndNotEmptyOrNotOrEmptyOrNot,\n    checkIfNotDictCase,\n    checkIfNotDictCaseAndEmptyOrNot,\n    checkIfNotDictCaseAndNotEmptyOrNot,\n    checkIfNotDictCaseAndNotEmptyOrNotOrEmptyOrNot,\n}<|endoftext|>"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 1; i < n; i++) {\n    primes.push(i)\n    let p = 0\n    for (let p = i; p <= Math.sqrt(i); p++) {\n      if (i % p === 0) {\n        break\n      }\n    }\n    if (p === i) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\nconsole.log(countUpTo(5))\nconsole.log(countUpTo(11))\nconsole.log(countUpTo(0))\nconsole.log(countUpTo(20))\nconsole.log(countUpTo(1))\nconsole.log(countUpTo(18))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  return ((a % 10 * b) % 10 + a % 10 * (b % 10)) % 10;\n};\n\n/*\n  Complete the function that takes two integers and returns \n  the product of their digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  let multiply = 0;\n  let i = a;\n  let j = b;\n  \n  while (i!== 0 && j!== 0) {\n    multiply = multiply + ((a % 10 * b) % 10 + a % 10 * (b % 10)) % 10;\n    a = (a / 10) % 10;\n    b = (b / 10) % 10;\n  }\n\n  return multiply;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    a = a / 10;\n    b = b / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while (i!== 0 && j!== 0) {\n    result = result + (a % 10 * b % 10);\n    i = i / 10;\n    j = j / 10;\n  }\n  return result;\n};\n\nconst multiply = (a, b) => {\n  let i = a;\n  let j = b;\n  let result = 0;\n  while ("}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  let result = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i].toUpperCase() === s[i + 1].toUpperCase()) {\n      result += 1\n    }\n  }\n  return result\n}\n\n/*\n  Given a string s, return a new string where each of the uppercase\n  characters has been converted to lowercase.\n  \n  For example:\n  toLower('aBCdEf') returns abcdef\n  toLower('ABCdEf') returns abcdef\n  toLower('dBBE') returns dbb\n  */\nconst toLower = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase()\n    } else {\n      result += s[i].toUpperCase()\n    }\n  }\n  return result\n}\n\n/*\n  Given a string s, return a new string where each of the uppercase\n  characters has been converted to lowercase.\n  \n  For example:\n  toUpper('aBCdEf') returns abcdef\n  toUpper('ABCdEf') returns abcdef\n  toUpper('dBBE') returns dbb\n  */\nconst toUpper = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase()\n    } else {\n      result += s[i].toUpperCase()\n    }\n  }\n  return result\n}\n\n/*\n  Given a string s, return a new string where each of the uppercase\n  characters has been converted to lowercase.\n  \n  For example:\n  tolower('aBCdEf') returns abcdef\n  tolower('ABCdEf') returns abcdef\n  tolower('dBBE') returns dbb\n  */\nconst toTitleCase = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toLowerCase()\n    } else {\n      result += s[i].toUpperCase()\n    }\n  }\n  return result\n}\n\n/*\n  Given a string s, return a new string where each of the lowercase\n  characters has been converted to uppercase.\n  \n  For example:\n  toupper('aBCdEf') returns ABCdEF\n  toupper('ABCdEf') returns ABCdEF\n  toupper('dBBE') returns DBB\n  */\nconst toTitleCaseAll = (s) => {\n  let result = ''\n  for (let i = 0; i < s.length; i++) {\n    if (s[i].toLowerCase() === s[i].toUpperCase()) {\n      result += s[i].toUpperCase()\n    } else {\n      result += s[i].toLowerCase()\n    }\n  }\n  return result\n}\n\nexport {\n  countUpper,\n  toLower,\n  toUpper,\n  toTitleCase,\n  toTitleCaseAll\n}\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  let intValue = parseInt(value);\n  if (isNaN(intValue)) {\n    return 0;\n  }\n  let closest = intValue;\n  let prev = intValue - 1;\n  let next = intValue + 1;\n  if (Math.abs(prev) < Math.abs(next)) {\n    closest = prev;\n  } else {\n    closest = next;\n  }\n  return closest;\n};\n\nmodule.exports = closestInetger;\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if(n === 1) return [1];\n  let nextLevel = (n - 1) % 2? ((n - 1) / 2) : (n / 2);\n  return [n, nextLevel, nextLevel * 2];\n}\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  return s.split(/\\s|,/).filter(x => x.length > 0);\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  numbersString(\"123, 456, 789\") == [\"123\", \"456\", \"789\"]\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst numbersString = (s) => {\n  return s.split(/\\s|,/).filter(x => Number(x) > 0);\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  numbersString(\"123, 456, 789\") == [\"123\", \"456\", \"789\"]\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst lettersString = (s) => {\n  return s.split(/\\s|,/).filter(x =>!isNaN(Number(x)));\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  numbersString(\"123, 456, 789\") == [\"123\", \"456\", \"789\"]\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst numbersLetterString = (s) => {\n  return s.split(/\\s|,/).filter(x => isNaN(Number(x)));\n}\n\nconst stringSplit = (s) => {\n  const split = s.split(/\\s|,/);\n  const numbers = split.filter(x =>!isNaN(Number(x)));\n  const letters = split.filter(x =>!isNaN(Number(x)));\n\n  if (numbers.length === 0) {\n    return letters;\n  }\n\n  return numbers;\n}\n\n/*\n  You will be given a string of numbers separated by commas or spaces. Your task is\n  to split the string into numbers and return an array of the numbers.\n  \n  For example:\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  numbersString(\"123, 456, 789\") == [\"123\", \"456\", \"789\"]\n  numbersString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst numbersLetterSplit = (s) => {\n  const split = s.split(/\\s|,/);\n  const numbers = split.filter(x =>!isNaN(Number(x)));\n  const letters = split.filter(x =>!isNaN(Number(x)));\n\n  if (numbers.length === 0) {\n    return letters;\n  }\n\n  return numbers;\n}\n\nmodule.exports = {\n  wordsString,\n  numbersString,\n  lettersString,\n  numbersLetterString,\n  stringSplit,\n  numbersLetterSplit\n}<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n    if (x > y) {\n        return -1;\n    }\n    let mid = Math.floor((x + y) / 2);\n    let left = chooseNum(x, mid);\n    let right = chooseNum(mid + 1, y);\n    if (left == -1) {\n        return right;\n    }\n    if (right == -1) {\n        return left;\n    }\n    return Math.max(left, right);\n};\n\nconsole.log(chooseNum(12, 15));\n<|endoftext|>"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  const avg = (n + m) / 2\n  const rounded = avg.toString(2)\n  const digits = rounded.length\n  const half = rounded.slice(0, digits / 2)\n  const rest = rounded.slice(digits / 2)\n\n  if (half.length === digits / 2) {\n    return rounded\n  } else {\n    return half + rest\n  }\n}\n\n// console.log(roundedAvg(1, 5))\n// console.log(roundedAvg(7, 5))\n// console.log(roundedAvg(10, 20))\n// console.log(roundedAvg(20, 33))\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  if (!x) return [];\n  const result = [];\n  const len = x.length;\n  for (let i = 0; i < len; i++) {\n    let d = x[i];\n    while (d > 9) {\n      d = d % 10;\n    }\n    if (d % 2 === 0) {\n      result.push(x[i]);\n    }\n  }\n  return result;\n};\n\nexport default uniqueDigtis;<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  return (arr.length)\n}\n\nconst ybSort = (arr) => {\n  let sortedArray = []\n  let i = 0\n  let j = 0\n  \n  //if the array is empty, return an empty array\n  if (ybLength(arr) === 0) {\n    return sortedArray\n  }\n\n  while (i < ybLength(arr)) {\n    while (j < ybLength(arr)) {\n      if (arr[j] > 9) {\n        sortedArray.push(arr[j])\n      }\n      j += 1\n    }\n\n    let k = i + 1\n    while (k < ybLength(arr)) {\n      sortedArray.push(arr[k])\n      k += 1\n    }\n\n    i += 1\n    j = 0\n  }\n\n  return sortedArray\n}\n\nconst ybReverse = (arr) => {\n  let sortedArray = []\n  let i = 0\n  let j = 0\n\n  //if the array is empty, return an empty array\n  if (ybLength(arr) === 0) {\n    return sortedArray\n  }\n\n  while (i < ybLength(arr)) {\n    while (j < ybLength(arr)) {\n      sortedArray.push(arr[j])\n      j += 1\n    }\n\n    let k = i + 1\n    while (k < ybLength(arr)) {\n      sortedArray.push(arr[k])\n      k += 1\n    }\n\n    i += 1\n    j = 0\n  }\n\n  return sortedArray\n}\n\nconst ybReplace = (arr, i, name) => {\n  let newArray = []\n  let k = 0\n  \n  //if the array is empty, return an empty array\n  if (ybLength(arr) === 0) {\n    return newArray\n  }\n\n  while (k < ybLength(arr)) {\n    if (arr[k] === i) {\n      newArray.push(name)\n    } else {\n      newArray.push(arr[k])\n    }\n    k += 1\n  }\n  \n  return newArray\n}\n\nmodule.exports = {\n  ybSort,\n  ybReverse,\n  ybReplace\n}<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const sum = () => {\n    let sum = 0;\n    for (let i = 1; i <= n; i++) {\n      sum += (i % 2 === 0)? i : i - 1;\n    }\n    return sum;\n  };\n  return Array.from(Array(n), (v, i) => (i % 2 === 0)? v : sum());\n};\n\n/* Implement the function fPrime that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the number of primes less than\n  i.\n  i starts from 2.\n  */\nconst fPrime = (n) => {\n  const primes = [];\n  for (let i = 2; i < n; i++) {\n    if (isPrime(i)) {\n      primes.push(i);\n    }\n  }\n  return primes;\n};\n\n/* Implement the function isPrime that takes n as a parameter,\n  and returns a boolean value.\n  If n is a prime, then isPrime(n) returns true.\n  Else, isPrime(n) returns false.\n  */\nconst isPrime = (n) => {\n  let m = (n + 1) / 2;\n  for (let i = 2; i <= m; i++) {\n    if (n % i === 0) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/* Implement the function lcm that takes n as a parameter,\n  and returns a number.\n  The largest common multiple of n and m is the product of the numbers that appear on both lists.\n  Example:\n  lcm(3, 5) == 15\n  */\nconst lcm = (n, m) => {\n  return n * m / Math.min(n, m);\n};\n\n/* Implement the function sum that takes n as a parameter,\n  and returns a number.\n  The sum of the values of the list of size n is the sum of the elements of the list.\n  Example:\n  sum(2, 3) == 5\n  */\nconst sum = (n) => {\n  let sum = 0;\n  for (let i = 0; i < n; i++) {\n    sum += n[i];\n  }\n  return sum;\n};\n\n/* Implement the function listSum that takes n as a parameter,\n  and returns a number.\n  The sum of the values of the list of size n is the sum of the elements of the list,\n  but, the values of the list are in reverse order.\n  Example:\n  listSum(2, 3) == 6\n  */\nconst listSum = (n) => {\n  let sum = 0;\n  for (let i = n - 1; i >= 0; i--) {\n    sum += n[i];\n  }\n  return sum;\n};\n\n/* Implement the function reverse that takes a list of size n as a parameter,\n  and returns a list of size n, in reverse order.\n  Example:\n  reverse([1, 2, 3]) == [3, 2, 1]\n  */\nconst reverse = (n) => {\n  let reversed = [];\n  for (let i = n - 1; i >= 0; i--) {\n    reversed.push(n[i]);\n  }\n  return reversed;\n};\n\n/* Implement the function product that takes n as a parameter,\n  and returns a number.\n  The product of the values of the list of size n is the product of the elements of the list.\n  Example:\n  product(2, 3) == 6\n  */\nconst product = (n) => {\n  let product = 1;\n  for (let i = 0; i < n; i++) {\n    product *= n[i];\n  }\n  return product;\n};\n\n/* Implement the function reverseList that takes a list of size n as a parameter,\n  and returns a list of size n, in reverse order.\n  Example:\n  reverseList([1, 2, 3]) == [3, 2, 1]\n  */\nconst reverseList = (n) => {\n  let reversed = [];\n  for (let i = n - 1; i >= 0; i--) {\n    reversed.push(n[i]);\n  }\n  return reversed;\n};\n\n/* Implement the function listReverse that takes a list of size n as a parameter,\n  and returns a list of size n, in reverse order.\n  Example:\n  listReverse([1, 2, 3]) == [3, 2, 1]\n  */\nconst listReverse = (n) => {\n  let reversed = [];\n  for (let i = n - 1; i >= 0; i--) {\n    reversed.push(n[i]);\n  }\n  return reversed;\n};\n\n/* Implement the function average that takes n as a parameter,\n  and returns a number.\n  The average of the values of the list of size n is the sum of the elements of the list,\n  divided by the number of elements in the list.\n  Example:\n  average([1, 2, 3]) == 2\n  */\nconst average = (n) => {\n  let average = 0;\n  for (let i = 0; i < n; i++) {\n    average += n[i];\n  }\n  return average / n;\n};\n\n/* Implement the function listAverage that takes n as a parameter,\n  and returns a number.\n  The average of the values of the list of size n is the sum of the elements of the list,\n  divided by the number of elements in the list.\n  Example:\n  listAverage([1, 2, 3]) == 2\n  */\nconst listAverage = (n) => {\n  let average = 0;\n  for (let i = 0; i < n; i++) {\n    average += n[i];\n  }\n  return average / n;\n};\n\n/* Implement the function largestPrime that takes n as a parameter,\n  and returns the largest prime"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  if (n === 1) {\n    return [1, 1]\n  }\n\n  const odd = 0\n  const even = 0\n  const result = []\n  let count = 0\n  for (let i = 1; i < n; i++) {\n    if (isPalindrome(i)) {\n      if (isEven(i)) {\n        count++\n        result.push(i)\n      } else {\n        count++\n        result.push(i)\n      }\n    }\n  }\n\n  return [count, result]\n}\n\nfunction isPalindrome (n) {\n  let number = n\n  let reversed = 0\n  while (number) {\n    reversed = reversed * 10 + number % 10\n    number = number / 10\n  }\n\n  if (reversed === n) {\n    return true\n  }\n\n  return false\n}\n\nfunction isEven (n) {\n  let number = n\n  let reversed = 0\n  while (number) {\n    reversed = reversed * 10 + number % 10\n    number = number / 10\n  }\n\n  if ((number + reversed) % 10 === 0) {\n    return true\n  }\n\n  return false\n}\n\nexport default evenOddPalindrome\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  const count = 0;\n  const neg = false;\n  let num = 0;\n  for (let i = 0; i < arr.length; i++) {\n    num = arr[i];\n    if (num > 0) {\n      count++;\n    } else if (num < 0) {\n      neg = true;\n      num = Math.abs(num);\n      if (num % 10 > 0) {\n        count++;\n      }\n      num /= 10;\n      if (num % 10 > 0) {\n        count++;\n      }\n      num /= 10;\n    }\n  }\n  if (neg) {\n    count--;\n  }\n  return count;\n};\n\nconsole.log(countNmus([-1, 11, -11]));\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n    if (arr.length === 0) {\n        return true;\n    }\n    \n    let index = arr.length - 1;\n    while (index >= 0) {\n        if (arr[index] < arr[index + 1]) {\n            return false;\n        }\n        \n        //shift all elements to the right\n        while (index >= 0 && arr[index] < arr[index + 1]) {\n            arr[index + 1] = arr[index];\n            index--;\n        }\n        arr[index + 1] = arr[index + 1] + 1;\n        index--;\n    }\n    \n    return true;\n}\n\nmoveOneBall([3, 4, 5, 1, 2]);\nmoveOneBall([3, 5, 4, 1, 2]);\nmoveOneBall([3, 5, 4, 2, 1]);\nmoveOneBall([1, 3, 5, 4, 2]);\nmoveOneBall([1, 2, 3, 4, 5]);\nmoveOneBall([1, 2, 3, 4, 5, 6]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]);\nmoveOneBall([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n    let result = [];\n    for(let i=0; i<lst1.length; i++){\n        if(lst1[i] % 2 === 0){\n            result.push(lst1[i]);\n        }\n    }\n    for(let i=0; i<lst2.length; i++){\n        if(lst2[i] % 2 === 0){\n            result.push(lst2[i]);\n        }\n    }\n    return result.length === 0? \"NO\" : \"YES\";\n};\n\nconst test = [\n    [[1, 2, 3, 4], [1, 2, 3, 4]],\n    [[1, 2, 3, 4], [1, 5, 3, 4]],\n    [[1, 2, 3, 4], [1, 2, 3, 5]]\n];\n\ntest.forEach(x => {\n    console.log(xechange(x[0], x[1]));\n});<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n  let memo = {}\n  const test = test.toLowerCase()\n  const d = test.split(' ')\n  for (let i = 0; i < d.length; i++) {\n    memo[d[i]] = memo[d[i]] || 0\n    memo[d[i]]++\n  }\n  return memo\n}\n\n/*\n  Given a string containing only digits, return the number of digits in the\n  largest contiguous substring of the string.\n  \n  Example:\n  largestContiguousDigit('1234567') == 6\n  largestContiguousDigit('1234') == 4\n  largestContiguousDigit('1234') == 4\n  largestContiguousDigit('1') == 1\n  largestContiguousDigit('1') == 1\n  largestContiguousDigit('') == 0\n  largestContiguousDigit('123') == 3\n  largestContiguousDigit('a1') == 1\n  largestContiguousDigit('1a') == 1\n  largestContiguousDigit('1a1') == 2\n  largestContiguousDigit('1a12') == 2\n  largestContiguousDigit('12a1') == 2\n  largestContiguousDigit('a12a') == 2\n  largestContiguousDigit('1a12a') == 2\n  largestContiguousDigit('12a12') == 2\n  largestContiguousDigit('a1212') == 2\n  largestContiguousDigit('12a12a') == 3\n  largestContiguousDigit('1a1212') == 3\n  largestContiguousDigit('a1212a') == 3\n  largestContiguousDigit('12a1212') == 3\n  largestContiguousDigit('a1212a') == 3\n  largestContiguousDigit('12a1212a') == 4\n  largestContiguousDigit('1a121212') == 4\n  largestContiguousDigit('a121212a') == 4\n  largestContiguousDigit('12a121212') == 4\n  largestContiguousDigit('a12121212a') == 4\n  largestContiguousDigit('12a12121212') == 5\n  largestContiguousDigit('a1212121212a') == 5\n  largestContiguousDigit('12a1212121212') == 5\n  largestContiguousDigit('a121212121212a') == 5\n  largestContiguousDigit('12a121212121212') == 6\n  largestContiguousDigit('a12121212121212a') == 6\n  largestContiguousDigit('12a12121212121212') == 6\n  largestContiguousDigit('a1212121212121212a') == 6\n  largestContiguousDigit('12a1212121212121212') == 7\n  largestContiguousDigit('a121212121212121212a') == 7\n  largestContiguousDigit('12a121212121212121212') == 7\n  largestContiguousDigit('a12121212121212121212a') == 7\n  largestContiguousDigit('12a12121212121212121212') == 8\n  largestContiguousDigit('a1212121212121212121212a') == 8\n  largestContiguousDigit('12a1212121212121212121212') == 8\n  largestContiguousDigit('a121212121212121212121212a') == 8\n  largestContiguousDigit('12a121212121212121212121212') == 9\n  largestContiguousDigit('a12121212121212121212121212a') == 9\n  largestContiguousDigit('12a12121212121212121212121212') == 9\n  largestContiguousDigit('a1212121212121212121212121212a') == 9\n  largestContiguousDigit('12a1212121212121212121212121212') == 10\n  largestContiguousDigit('a121212121212121212121212121212a') == 10\n  largestContiguousDigit('12a121212121212121212121212121212') == 10\n  largestContiguousDigit('a12121212121212121212121212121212a') == 10\n  largestContiguousDigit('12a12121212121212121212121212121212') == 11\n  largestContiguousDigit('a1212121212121212121212121212121212a') == 11\n  largestContiguousDigit('12a1212121212121212121212121212121212') == 11\n  largestContiguousDigit('a121212121212121212121212121212121212a') == 11\n  largestContiguousDigit('12a121212121212121212121212121212121212') == 12\n  largestContiguousDigit('a12121212121212121212121212121212121212a') == 12\n  largestContiguousDigit('12a12121212121212121212121212121212121212') == 12\n  largestContiguousDigit('a1212121212121212121212121212121212121212a') == 12\n  largestContiguousDigit('12a1212121212121212121212121212121212121212') == 13\n  largestContiguousDigit('a121212121212121212121212121212121212121212a') == 13\n  largestContiguousDigit('12a12121212121212121212"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n    // console.log(s, c);\n    const reverse = s.split('').reverse().join('');\n    const check = c.split('').every(e => reverse.indexOf(e) === -1);\n    return [reverse, check];\n};\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const count = new Map();\n  lst.forEach((s, i) => {\n    if(!count.has(s)){\n      count.set(s, 1);\n    } else {\n      count.set(s, count.get(s) + 1);\n    }\n  });\n  const result = [];\n  count.forEach((n, s) => {\n    if(n % 2 === 1){\n      result.push(`the number of odd elements ${s} of the ${s}put.`);\n    }\n  });\n  return result;\n};\n\nmodule.exports = oddCount;\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n  const sum = 0\n  const maxSum = 0\n\n  for (let i = 0; i < nums.length; i++) {\n    let sumThis = 0\n    let sumEnd = 0\n    let j = i\n    let sumStart = 0\n    while (j < nums.length) {\n      sumThis += nums[j]\n      if (sumThis > maxSum) {\n        maxSum = sumThis\n      }\n      if (sumThis > sum) {\n        sumEnd = sumThis\n        sumStart = sumThis\n      }\n      j++\n    }\n    sum += sumEnd - sumStart\n  }\n  return sum\n}\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n  if (!grid ||!grid.length ||!grid[0].length) {\n    return 0\n  }\n\n  const height = grid.length\n  const width = grid[0].length\n\n  const [well_1, well_2] = [0, 0]\n  const [well_1_capacity, well_2_capacity] = [0, 0]\n\n  for (let i = 0; i < height; i++) {\n    well_1 += grid[i][0]\n    well_1_capacity += grid[i][0]\n  }\n\n  for (let j = 0; j < width; j++) {\n    well_2 += grid[0][j]\n    well_2_capacity += grid[0][j]\n  }\n\n  const [well_1_count, well_2_count] = [0, 0]\n\n  for (let i = 1; i < height; i++) {\n    for (let j = 1; j < width; j++) {\n      const [x, y] = [i, j]\n      const [x_capacity, y_capacity] = [well_1[x], well_1_capacity[x]]\n      const [x_count, y_count] = [well_2[y], well_2_capacity[y]]\n\n      well_1_count += [x_count, y_count].reduce((acc, v) => (v + acc), 0)\n      well_2_count += [x_capacity, y_capacity].reduce((acc, v) => (v + acc), 0)\n\n      well_1[x] = well_1[x] - well_1_count\n      well_1_capacity[x] = well_1_capacity[x] - well_1_count\n      well_2[y] = well_2[y] - well_2_count\n      well_2_capacity[y] = well_2_capacity[y] - well_2_count\n    }\n  }\n\n  return [well_1_count, well_2_count].reduce((acc, v) => (v + acc), 0)\n}\n\nconsole.log(well_1_count, well_2_count)\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const one = [1, 2, 4, 8, 16, 32, 64, 128];\n  const zero = [0, 1, 2, 4, 8, 16, 32, 64];\n\n  let result = [];\n  let temp;\n\n  for (let i = 0; i < arr.length; i++) {\n    temp = arr[i];\n    let number = temp.toString();\n    let index = 0;\n    while (number.length > 0) {\n      let digit = parseInt(number.charAt(0), 2);\n      number = number.slice(1, number.length);\n      index = one.indexOf(digit) + zero.indexOf(digit);\n      if (index >= 0) {\n        result.push(one[index]);\n      }\n    }\n  }\n\n  return result;\n};\n\ndescribe('sortArray', () => {\n  it('sortArray([1, 5, 2, 3, 4]) should return [1, 2, 3, 4, 5]', () => {\n    expect(sortArray([1, 5, 2, 3, 4])).toEqual([1, 2, 3, 4, 5]);\n  });\n\n  it('sortArray([-2, -3, -4, -5, -6]) should return [-6, -5, -4, -3, -2]', () => {\n    expect(sortArray([-2, -3, -4, -5, -6])).toEqual([-6, -5, -4, -3, -2]);\n  });\n\n  it('sortArray([1, 0, 2, 3, 4]) should return [0, 1, 2, 3, 4]', () => {\n    expect(sortArray([1, 0, 2, 3, 4])).toEqual([0, 1, 2, 3, 4]);\n  });\n});\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  const words = [];\n  let i = 0;\n  while(i < s.length) {\n    let current = 1;\n    let word = \"\";\n    while(i < s.length && current < n) {\n      word += s[i];\n      current++;\n      i++;\n    }\n    words.push(word);\n  }\n  return words;\n}\n\n/*Given a string s and a string t, you have been tasked to implement \n  a function that returns true if string s contains all of the characters \n  of t, in order, and false otherwise.\n  Examples:\n  containsAll(\"Hello world\", \"lo\") ==> true\n  containsAll(\"Hello world\", \"wor\") ==> true\n  containsAll(\"Hello world\", \"Hello wor\") ==> false\n  containsAll(\"Hello world\", \"Hello worl\") ==> false\n  containsAll(\"Hello worl\", \"Hello worl\") ==> true\n  containsAll(\"Hello worl\", \"Hello world\") ==> false\n  */\nconst containsAll = (s, t) => {\n  for(let i = 0; i < t.length; i++) {\n    if(s.indexOf(t[i]) == -1) {\n      return false;\n    }\n  }\n  return true;\n}\n\nmodule.exports = {\n  selectWdors,\n  containsAll\n};<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  let vowelCount = 0\n  let vowelPos = word.length\n  let vowel = ''\n\n  while (vowelPos > 0) {\n    if (isVowel(word[--vowelPos])) {\n      ++vowelCount\n      if (vowelCount === 1) {\n        vowel = word[vowelPos]\n      }\n    }\n  }\n\n  return vowel\n}\n\n/*\n  * @param {string} word\n  * @returns {boolean}\n  */\nfunction isVowel(character) {\n  const vowels = 'aeiouAEIOU'\n  return vowels.indexOf(character)!== -1\n}\n<|endoftext|>"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  let stack = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] === '(') {\n      stack.push(lst[i])\n    } else if (lst[i] === ')') {\n      if (stack.length === 0) {\n        return 'No'\n      }\n      if (stack.pop()!== '(') {\n        return 'No'\n      }\n    }\n  }\n  if (stack.length!== 0) {\n    return 'No'\n  }\n  return 'Yes'\n}\n\n// const matchParens = (lst) => {\n//   let stack = []\n//   let left = -1\n//   let right = -1\n//   for (let i = 0; i < lst.length; i++) {\n//     if (lst[i] === '(') {\n//       stack.push(lst[i])\n//     } else if (lst[i] === ')') {\n//       if (stack.length === 0) {\n//         return 'No'\n//       }\n//       if (stack.pop()!== '(') {\n//         return 'No'\n//       }\n//     }\n//   }\n//   if (stack.length!== 0) {\n//     return 'No'\n//   }\n//   return 'Yes'\n// }\n\nconsole.log(matchParens(['()(', ')']));\n// → Yes\nconsole.log(matchParens(['())', ')()']));\n// → No\n<|endoftext|>"}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n  if (!k || k > arr.length) {\n    return arr;\n  }\n  let newArr = [];\n  let max = arr[0];\n  for (let i = 1; i < arr.length; i++) {\n    if (arr[i] > max) {\n      max = arr[i];\n      newArr.push(max);\n    }\n  }\n  return newArr.slice(0, k);\n};\n\nconsole.log(maxmium([-3, -4, 5], 3));\nconsole.log(maxmium([4, -4, 4], 2));\nconsole.log(maxmium([-3, 2, 1, 2, -1, -2, 1], 1));\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, n) => {\n    if (n % 2 === 1) {\n      acc += n;\n    }\n    return acc;\n  }, 0);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements2 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements3 = (arr, k) => {\n  let res = 0;\n  let index = 0;\n  while (index < k) {\n    res += arr[index];\n    index++;\n  }\n  return res;\n};\n\nconst addElements4 = (arr, k) => {\n  let res = 0;\n  let index = 0;\n  while (index < k) {\n    res += arr[index];\n    index++;\n  }\n  return res;\n};\n\nconst addElements5 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements6 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements7 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements8 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements9 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements10 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements11 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements12 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements13 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements14 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements15 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements16 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements17 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements18 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements19 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements20 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements21 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements22 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements23 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements24 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements25 = (arr, k) => {\n  let res = 0;\n  for (let i = 0; i < k; i++) {\n    res += arr[i];\n  }\n  return res;\n};\n\nconst addElements26 = (arr, k) => {\n"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  const collatz = (n) => {\n    const odd = () => {\n      return n > 0 && n % 2 == 1;\n    }\n    const oddIteration = () => {\n      let next = odd();\n      if (next === 1) {\n        return;\n      }\n      next = next * 3 + 1;\n      return next;\n    }\n    const oddCollatz = () => {\n      let collatzN = n;\n      while (collatzN > 1) {\n        collatzN = oddIteration(collatzN);\n      }\n      return collatzN;\n    }\n    return oddCollatz();\n  }\n  return collatz(n);\n}\n\nmodule.exports = getOddCollatz;\n<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n  if (!date) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 2) {\n    if (year % 4 === 0 && (year % 100!== 0 || year % 400 === 0)) {\n      if (day < 1 || day > 29) {\n        return false;\n      }\n    } else {\n      if (day < 1 || day > 28) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate2 = (date) => {\n  if (!date) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 2) {\n    if (year % 4 === 0 && (year % 100!== 0 || year % 400 === 0)) {\n      if (day < 1 || day > 29) {\n        return false;\n      }\n    } else {\n      if (day < 1 || day > 28) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\n/*\n  You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate3 = (date) => {\n  if (!date) {\n    return false;\n  }\n\n  const dateArray = date.split('-');\n  const month = parseInt(dateArray[0], 10);\n  const day = parseInt(dateArray[1], 10);\n  const year = parseInt(dateArray[2], 10);\n\n  if (month < 1 || month > 12) {\n    return false;\n  }\n\n  if (day < 1 || day > 31) {\n    return false;\n  }\n\n  if (month === 4 || month === 6 || month === 9 || month === 11) {\n    if (day < 1 || day > 30) {\n      return false;\n    }\n  }\n\n  if (month === 2) {\n    if (year % 4 === 0 && (year % 100!== 0 || year % 400 === 0)) {\n      if (day < 1 || day > 29) {\n        return false;\n      }\n    } else {\n      if (day < 1 || day > 28) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n};\n\nconsole.log(validDate"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const split = txt.split(/\\s+/);\n  const wordCount = split.length;\n  const wordCountOdd = wordCount.filter((x) => x % 2 === 1).length;\n  const wordCountEven = wordCount.filter((x) => x % 2 === 0).length;\n  return [...split,...split.map((x) => x.toLowerCase()), wordCountOdd, wordCountEven];\n};\n\nconst words = splitWords(txt);\n\nconsole.log(words.length);\nconsole.log(words[0]);\nconsole.log(words[1]);\nconsole.log(words[2]);\nconsole.log(words[3]);\n\n/* \nWhat concepts were solidified in the process of working through this challenge?\n\n- Using the split method to split a string into separate words.\n- Using the array's methods to filter the array of strings to make the array of lowercase strings and then\ncount the number of words that had odd order in the alphabet.\n\n*/<|endoftext|>"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const last = lst.pop();\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] > lst[i + 1]) {\n      return false;\n    }\n  }\n  return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n  if (end < start) return \"NO\"\n\n  const length = end - start\n\n  for (let i = start; i <= end; i++) {\n    if (isPrime(i)) {\n      return \"YES\"\n    }\n  }\n  return \"NO\"\n}\n\nfunction isPrime(x) {\n  if (x < 2) return false\n  if (x < 10) return true\n  return x % 2 === 0 && x % 3 === 0 && x % 5 === 0 && x % 7 === 0\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n\nconst [start1, end1] = interval1\nconst [start2, end2] = interval2\n\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1\n  const [start2, end2] = interval2\n\n  const start = Math.min(start1, start2)\n  const end = Math.max(end1, end2)\n\n  if (end < start) return \"NO\"\n\n  let x = start\n  let y = end\n  while (x <= y) {\n    const m = (x + y) / 2\n    if (isPrime(m)) return m\n    if (x < y) x = m + 1\n    else y = m - 1\n  }\n\n  return \"NO\"\n}\n\n/*\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  let sum = 0;\n  let result = 0;\n  for (let i = 0; i < arr.length; i++) {\n    sum = 0;\n    if (arr[i]!== 0) {\n      if (arr[i] > 0) {\n        sum = arr[i];\n      } else if (arr[i] < 0) {\n        sum = -1 * arr[i];\n      } else if (arr[i] === 0) {\n        sum = 0;\n      }\n      result = result + sum * Math.pow(Math.abs(sum), arr[i]);\n    }\n  }\n  return result;\n};\n\nconsole.log(prodSigsn([1, 2, 2, -4]) === -9);\nconsole.log(prodSigsn([0, 1]) === 0);\nconsole.log(prodSigsn([]) === null);\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const N = grid.length\n  if (N === 1) {\n    return [grid[0][0]]\n  }\n  const [row, col] = [0, 0]\n  let [minPath, minRow, minCol] = [grid[0][0], 0, 0]\n  let [minRowNext, minColNext] = [0, 0]\n  for (let i = 0; i < N; i++) {\n    for (let j = 0; j < N; j++) {\n      let cur = grid[i][j]\n      if (cur < minPath) {\n        minPath = cur\n        minRow = i\n        minCol = j\n      }\n      const rowUp = i - 1\n      const colUp = j\n      const rowDown = i + 1\n      const colDown = j\n      if (rowUp >= 0 && grid[rowUp][col] < minPath) {\n        minRowNext = rowUp\n        minColNext = col\n      }\n      if (colUp >= 0 && grid[row][colUp] < minPath) {\n        minRowNext = row\n        minColNext = colUp\n      }\n      if (rowDown < N && grid[rowDown][col] < minPath) {\n        minRowNext = rowDown\n        minColNext = col\n      }\n      if (colDown < N && grid[row][colDown] < minPath) {\n        minRowNext = row\n        minColNext = colDown\n      }\n    }\n  }\n  return [minPath, minRow, minCol]\n}\n\nconst [path, row, col] = minPath([[1,2,3], [4,5,6], [7,8,9]], 1)\nconsole.log(path)\nconsole.log(row, col)\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  let a = 1\n  let b = 2\n  let result = []\n\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      result.push(a)\n      a = a + b\n    } else {\n      result.push(a + b + a)\n      b = a + b\n    }\n  }\n\n  return result\n}\n\nconsole.log(tir(10))\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n  if (n <= 0) {\n    return 0;\n  }\n  let product = 1;\n  for (let i = 1; i < n; i++) {\n    if (i % 2 === 1) {\n      product *= i;\n    }\n  }\n  return product;\n};\n\nconsole.log(digits(235));\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  if (typeof string!=='string') {\n    throw new TypeError('First argument must be a string.');\n  }\n\n  return string.match(/\\[\\[.*\\]\\]/)!== null;\n};\n\nconsole.log(isNested('[[]]'));\nconsole.log(isNested('[]]]]]]][[[[[]'));\nconsole.log(isNested('[][]'));\nconsole.log(isNested('[]'));\nconsole.log(isNested('[[][]]'));\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  let sum = 0;\n  for (let i = 0; i < lst.length; i++) {\n    sum += Math.pow(lst[i], 2);\n  }\n  return sum;\n};\n\nconst test = () => {\n  const lst = [1,2,3];\n  const sum = sumSquares(lst);\n  console.log(sum);\n};\n\ntest();\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n  const last = txt.slice(-1)\n  const isALetter = ALPHA.test(last)\n  return isALetter &&\n   !/\\s|\\W/.test(txt)\n}\n\nconst checkIfLastCharIsNumeric = (txt) => {\n  const last = txt.slice(-1)\n  const isNumeric = NUMBER.test(last)\n  return isNumeric\n}\n\nconst checkIfLastCharIsLowercase = (txt) => {\n  const last = txt.slice(-1)\n  const isLowercase = LOWER.test(last)\n  return isLowercase\n}\n\nconst checkIfLastCharIsUppercase = (txt) => {\n  const last = txt.slice(-1)\n  const isUppercase = UPPER.test(last)\n  return isUppercase\n}\n\nconst checkIfLastCharIsAlphanumeric = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphanumeric = ALPHANUM.test(last)\n  return isAlphanumeric\n}\n\nconst checkIfLastCharIsWhitespace = (txt) => {\n  const last = txt.slice(-1)\n  const isWhitespace = WHITESPACE.test(last)\n  return isWhitespace\n}\n\nconst checkIfLastCharIsPunctuation = (txt) => {\n  const last = txt.slice(-1)\n  const isPunctuation = PUNCTUATION.test(last)\n  return isPunctuation\n}\n\nconst checkIfLastCharIsLowercaseLetters = (txt) => {\n  const last = txt.slice(-1)\n  const isLowercaseLetters = LOWER_LETTER.test(last)\n  return isLowercaseLetters\n}\n\nconst checkIfLastCharIsUppercaseLetters = (txt) => {\n  const last = txt.slice(-1)\n  const isUppercaseLetters = UPPER_LETTER.test(last)\n  return isUppercaseLetters\n}\n\nconst checkIfLastCharIsAlphanumericLetters = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphanumericLetters = ALPHANUM_LETTER.test(last)\n  return isAlphanumericLetters\n}\n\nconst checkIfLastCharIsAlphaNumeric = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphaNumeric = ALPHANUM.test(last)\n  return isAlphaNumeric\n}\n\nconst checkIfLastCharIsAlphanumericLettersAndNumbers = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphaNumericLettersAndNumbers = ALPHA_NUMBER.test(last)\n  return isAlphaNumericLettersAndNumbers\n}\n\nconst checkIfLastCharIsAlphaNumericAndAlpha = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphaNumericAndAlpha = ALPHA_NUMBER.test(last)\n  return isAlphaNumericAndAlpha\n}\n\nconst checkIfLastCharIsAlphaNumericAndAlphabets = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphaNumericAndAlpha = ALPHA.test(last)\n  return isAlphaNumericAndAlpha\n}\n\nconst checkIfLastCharIsAlphaNumericAndNumerals = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphaNumericAndNumerals = NUMBER.test(last)\n  return isAlphaNumericAndNumerals\n}\n\nconst checkIfLastCharIsAlphabet = (txt) => {\n  const last = txt.slice(-1)\n  const isAlpha = ALPHA.test(last)\n  return isAlpha\n}\n\nconst checkIfLastCharIsAlphabetAndNumerals = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphaAndNumerals = NUMBER.test(last)\n  return isAlphaAndNumerals\n}\n\nconst checkIfLastCharIsAlphanumericAndAlphaNumerals = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphanumericAndAlphaNumerals = ALPHA_NUMBER.test(last)\n  return isAlphanumericAndAlphaNumerals\n}\n\nconst checkIfLastCharIsAlphaNumericAndAlphabet = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphanumericAndAlpha = ALPHA.test(last)\n  return isAlphanumericAndAlpha\n}\n\nconst checkIfLastCharIsAlphaNumericAndAlphabetAndNumerals = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphanumericAndAlphaNumerals = ALPHA_NUMBER.test(last)\n  return isAlphanumericAndAlphaNumerals\n}\n\nconst checkIfLastCharIsAlphabetAndAlphaNumerals = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphabetAndAlphaNumerals = ALPHA_NUMBER.test(last)\n  return isAlphabetAndAlphaNumerals\n}\n\nconst checkIfLastCharIsAlphaNumericAndAlphabetAndNumerals = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphabetAndAlphaNumerals = ALPHA_NUMBER.test(last)\n  return isAlphabetAndAlphaNumerals\n}\n\nconst checkIfLastCharIsAlphabetAndAlphabetAndAlphaNumerals = (txt) => {\n  const last = txt.slice(-1)\n  const isAlphabetAndAlphaNumerals = ALPHA_NUMBER.test(last)\n  return isAlphabetAndAlphaNumerals\n}\n\n"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    const i = arr.length - 1;\n    while (i >= 0) {\n        if (arr[i] < arr[i + 1]) {\n            return i;\n        }\n        i--;\n    }\n    return -1;\n};\n\n/*\n  Create a function which returns the largest index of an element which\n  is greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,3,4,5]) = 3\n  canArrange([1,2,3,4]) = 2\n  */\nconst canArrangeInverse = (arr) => {\n    const i = arr.length - 1;\n    while (i >= 0) {\n        if (arr[i] > arr[i + 1]) {\n            return i;\n        }\n        i--;\n    }\n    return -1;\n};\n\n// console.log(canArrange([1,2,3,4,5]));\n// console.log(canArrange([1,2,3,4]));\n// console.log(canArrangeInverse([1,2,3,4,5]));\n// console.log(canArrangeInverse([1,2,3,4]));\n\n// console.log(canArrange([1,2,3,4,5]), canArrange([1,2,3,4]), canArrange([1,2,3,4,5]), canArrangeInverse([1,2,3,4,5]), canArrangeInverse([1,2,3,4]));\n\n/*\n  Given a binary array, find the maximum product of its elements.\n\n  Examples:\n  maxProduct([1,2,3,4,5]) = 120\n  maxProduct([1,2,3,4]) = 24\n  */\nconst maxProduct = (arr) => {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        max *= arr[i];\n    }\n    return max;\n};\n\n// console.log(maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]), maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]));\n\n/*\n  Given a binary array, find the maximum product of its elements.\n\n  Examples:\n  maxProduct([1,2,3,4,5]) = 120\n  maxProduct([1,2,3,4]) = 24\n  */\nconst maxProductInverse = (arr) => {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        max /= arr[i];\n    }\n    return max;\n};\n\n// console.log(maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]), maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]));\n// console.log(maxProductInverse([1,2,3,4,5]), maxProductInverse([1,2,3,4]), maxProductInverse([1,2,3,4,5]), maxProductInverse([1,2,3,4]));\n\n/*\n  Given a binary array, find the maximum product of its elements.\n\n  Examples:\n  maxProduct([1,2,3,4,5]) = 120\n  maxProduct([1,2,3,4]) = 24\n  */\nconst maxProductInverse2 = (arr) => {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        max *= arr[i];\n    }\n    return max;\n};\n\n// console.log(maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]), maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]));\n// console.log(maxProductInverse([1,2,3,4,5]), maxProductInverse([1,2,3,4]), maxProductInverse([1,2,3,4,5]), maxProductInverse([1,2,3,4]));\n// console.log(maxProductInverse2([1,2,3,4,5]), maxProductInverse2([1,2,3,4]), maxProductInverse2([1,2,3,4,5]), maxProductInverse2([1,2,3,4]));\n\n/*\n  Given a binary array, find the maximum product of its elements.\n\n  Examples:\n  maxProduct([1,2,3,4,5]) = 120\n  maxProduct([1,2,3,4]) = 24\n  */\nconst maxProductInverse3 = (arr) => {\n    let max = arr[0];\n    for (let i = 1; i < arr.length; i++) {\n        max *= arr[i];\n    }\n    return max;\n};\n\n// console.log(maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]), maxProduct([1,2,3,4,5]), maxProduct([1,2,3,4]));\n// console.log(maxProductInverse([1,2,3,4,5]), maxProductInverse([1,2,3,4]), maxProductInverse([1,2,3,4,5]), maxProductInverse([1,2,3,4]));\n// console.log(maxProductInverse2([1,2,3,4,5]), maxProductInverse2([1,2,3,4]), maxProductInverse2([1,2,3,4,5]), maxProductInverse2([1,2,3,4]));\n// console.log(maxProductInverse3([1,2,3,4,5]), maxProductInverse3([1,2,"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const [a, b] = [null, null];\n  const sorted = lst.sort((x, y) => x - y);\n  for (const elem of sorted) {\n    if (a === null || elem < a) {\n      a = elem;\n    }\n    if (b === null || elem > b) {\n      b = elem;\n    }\n  }\n  return [a, b];\n};\n\n/* Create a function that returns the largest of a list of integers.\n  If there are no integers, return null.\n  Examples:\n  largestInt(['1', '2', '3']) == '3'\n  largestInt([]) == null\n  largestInt([1, 2, 3]) == '3'\n  largestInt([0, 2, 3]) == '2'\n  largestInt([-2, 2, 3]) == '2'\n  largestInt([1, 2, 3, -2]) == '2'\n  largestInt([1, 2, 3, -2, 4, 5]) == '5'\n  largestInt([0, 2, 3]) == '2'\n  largestInt([0, 2, 3, 4, 5, -2]) == '5'\n  largestInt([0, -2, -4]) == '-2'\n  largestInt([0, -2, -4, -5]) == '-5'\n  largestInt([-2, -4]) == '-4'\n  largestInt([-2, -4, -5]) == '-5'\n  */\nconst largestInt = (lst) => {\n  if (!lst) return null;\n  const sorted = lst.sort();\n  const max = sorted[sorted.length - 1];\n  return max;\n};\n\n/* Create a function that returns the smallest of a list of integers.\n  If there are no integers, return null.\n  Examples:\n  smallestInt(['1', '2', '3']) == '1'\n  smallestInt([]) == null\n  smallestInt([1, 2, 3]) == '1'\n  smallestInt([0, 2, 3]) == '0'\n  smallestInt([-2, 2, 3]) == '-2'\n  smallestInt([1, 2, 3, -2]) == '-2'\n  smallestInt([1, 2, 3, -2, 4, 5]) == '-2'\n  smallestInt([0, 2, 3]) == '0'\n  smallestInt([0, 2, 3, 4, 5, -2]) == '-2'\n  smallestInt([0, -2, -4]) == '-2'\n  smallestInt([0, -2, -4, -5]) == '-5'\n  smallestInt([-2, -4]) == '-4'\n  smallestInt([-2, -4, -5]) == '-5'\n  */\nconst smallestInt = (lst) => {\n  if (!lst) return null;\n  const sorted = lst.sort();\n  const min = sorted[0];\n  return min;\n};\n\n/*\n  Create a function that returns a list of tuples, where the first\n  element in each tuple is the largest of a list of integers, and the\n  second element is the smallest of a list of integers.\n  If there are no integers, return a list of null values.\n  Examples:\n  lagrestLargestIntgeers(['1', '2', '3']) == [['3', '1'], ['3', '2']]\n  lagrestLargestIntgeers(['1', '2', '3']) == [['3', '1'], ['3', '2']]\n  lagrestLargestIntgeers([]) == []\n  lagrestLargestIntgeers([1, 2, 3]) == [['3', '1'], ['3', '2']]\n  lagrestLargestIntgeers([-2, 2, 3]) == [['3', '2'], ['3', '1']]\n  lagrestLargestIntgeers([1, 2, 3, -2]) == [['3', '2'], ['3', '1']]\n  lagrestLargestIntgeers([1, 2, 3, -2, 4, 5]) == [['3', '2'], ['3', '1']]\n  lagrestLargestIntgeers([0, 2, 3]) == [['3', '2'], ['3', '1']]\n  lagrestLargestIntgeers([0, 2, 3, 4, 5, -2]) == [['3', '2'], ['3', '1']]\n  lagrestLargestIntgeers([0, -2, -4]) == [['3', '1'], ['3', '2']]\n  lagrestLargestIntgeers([0, -2, -4, -5]) == [['3', '2'], ['3', '1']]\n  lagrestLargestIntgeers([-2, -4]) == [['3', '2'], ['3', '1']]\n  lagrestLargestIntgeers([-2, -4, -5]) == [['3', '2'], ['3', '1']]\n  */\nconst lagrestLargestIntgeers = (lst) => {\n  const result = [];\n  const [a, b] = lagrestSmallestIntgeers(lst);\n  if (a!== null) result.push([a, b]);\n  if (b!== null) result.push([b, a]);\n  return result;\n};\n\n/*\n  Create a function that returns the largest of a list of tuples, where\n  the first element in each tuple is the largest of a list of integers,\n  and the second element is the smallest of a list of integers.\n  "}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n  if (typeof a === \"number\" && typeof b === \"number\") {\n    return a > b? a : b;\n  }\n  if (typeof a === \"string\" && typeof b === \"string\") {\n    const aArray = a.split(\",\");\n    const bArray = b.split(\",\");\n    const aArrayLength = aArray.length;\n    const bArrayLength = bArray.length;\n    let largest = aArray[0];\n    let largestIndex = 0;\n    for (let i = 0; i < aArrayLength; i++) {\n      if (aArray[i] > largest) {\n        largest = aArray[i];\n        largestIndex = i;\n      }\n    }\n    for (let i = 0; i < bArrayLength; i++) {\n      if (bArray[i] > largest) {\n        largest = bArray[i];\n        largestIndex = i;\n      }\n    }\n    return largest;\n  }\n  return null;\n};\n\nconsole.log(compaerOne(1, \"2,3\"));\nconsole.log(compaerOne(\"1\", 1));\nconsole.log(compaerOne(\"5,1\", \"6\"));\nconsole.log(compaerOne(\"1\", \"1\"));\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  const evenSum = (n) => {\n    const isEven = (n) => {\n      return (n % 2 === 0);\n    };\n    const sum = (n) => {\n      return n + (n - 1);\n    };\n    return sum(n) === n && isEven(n) && isEven(sum(n));\n  };\n  return (n === sum(n) || isEqualToSumEven(sum(n)));\n};\n\nmodule.exports = isEqualToSumEven;<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  const bf = (n) => {\n    return n * (n-1) * (n-2) *... * 1\n  }\n  return bf(n)\n}\n\n/*The number of ways to split a number is the product of\n  the number of ways to split the number minus the number of ways\n  to split the number plus the number of ways to split the number\n  times the number of ways to split the number minus the number of\n  ways to split the number minus the number of ways to split the number\n  plus the number of ways to split the number minus the number of ways\n  to split the number times the number of ways to split the number minus\n  the number of ways to split the number minus the number of ways to split\n  the number plus the number of ways to split the number minus the number of\n  ways to split the number minus the number of ways to split the number plus\n  the number of ways to split the number minus the number of ways to split\n  the number minus the number of ways to split the number minus the number of\n  ways to split the number minus the number of ways to split the number plus\n  the number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number plus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number plus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number plus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number plus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number plus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number plus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number plus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number plus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the number minus the number of ways to split the\n  number minus the number of ways to split the number minus the number of ways\n  to split the number minus the number of ways to split the number minus the\n  number of ways to split the"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n  const spaces =''\n  const text2 = text.replace(spaces, '_')\n  if (text2.indexOf(' ')!== -1) {\n    const moreSpaces = text2.split(' ')\n    let lastSpace = false\n    for (let i = 0; i < moreSpaces.length; i++) {\n      if (moreSpaces[i].length > 2) {\n        moreSpaces[i] = moreSpaces[i].replace(/\\s{2,}/g, '-')\n      } else {\n        if (lastSpace) {\n          moreSpaces[i] = moreSpaces[i].replace(/\\s{1,}/g, '-')\n        }\n        lastSpace = true\n      }\n    }\n    text2 = moreSpaces.join(' ')\n  }\n  return text2\n}\n\n/*\n  Given a string text, replace all spaces in it with dashes, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example1\"\n  fixSpacse(\" Example 2\") == \"Example2\"\n  fixSpacse(\" Example   3\") == \"Example3\"\n  */\nconst fixDashSpacse = (text) => {\n  const spaces =''\n  const text2 = text.replace(spaces, '-')\n  if (text2.indexOf(' ')!== -1) {\n    const moreSpaces = text2.split(' ')\n    let lastSpace = false\n    for (let i = 0; i < moreSpaces.length; i++) {\n      if (moreSpaces[i].length > 2) {\n        moreSpaces[i] = moreSpaces[i].replace(/\\s{2,}/g, '-')\n      } else {\n        if (lastSpace) {\n          moreSpaces[i] = moreSpaces[i].replace(/\\s{1,}/g, '-')\n        }\n        lastSpace = true\n      }\n    }\n    text2 = moreSpaces.join(' ')\n  }\n  return text2\n}\n\nconst fixDashes = (text) => {\n  const dashes = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpaces = (text) => {\n  const spaces =''\n  return text.replace(/\\s/g, spaces)\n}\n\nconst fixDashSpaces = (text) => {\n  const dashes = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixDashesSpaces = (text) => {\n  const dashes = '-'\n  const spaces =''\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesDashes = (text) => {\n  const spaces =''\n  const dashes = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesDashSpaces = (text) => {\n  const spaces =''\n  const dashes = '-'\n  const spaces2 =''\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesDashesSpaces = (text) => {\n  const spaces =''\n  const dashes = '-'\n  const spaces2 =''\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesDashDashes = (text) => {\n  const spaces =''\n  const dashes = '-'\n  const dashes2 = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesDashesDashes = (text) => {\n  const spaces =''\n  const dashes = '-'\n  const dashes2 = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixDashesSpaces = (text) => {\n  const dashes = '-'\n  const spaces =''\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixDashesDashes = (text) => {\n  const dashes = '-'\n  const dashes2 = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixDashesSpacesDashes = (text) => {\n  const dashes = '-'\n  const spaces =''\n  const dashes2 = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixDashesDashesSpaces = (text) => {\n  const dashes = '-'\n  const dashes2 = '-'\n  const spaces =''\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesSpaces = (text) => {\n  const spaces =''\n  const spaces2 =''\n  return text.replace(/\\s/g, spaces)\n}\n\nconst fixSpacesSpacesDashes = (text) => {\n  const spaces =''\n  const spaces2 =''\n  const dashes = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesDashesSpaces = (text) => {\n  const spaces =''\n  const spaces2 =''\n  const dashes = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesDashesSpaces = (text) => {\n  const spaces =''\n  const spaces2 =''\n  const dashes = '-'\n  return text.replace(/\\s/g, dashes)\n}\n\nconst fixSpacesSpacesDashes = (text) =>"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const is_valid = file_name.match(/^[a-zA-Z]+[\\d]{1}[a-zA-Z]*(\\.[txt|exe|dll])?$/)\n  if (!is_valid) {\n    return \"No\"\n  }\n  return \"Yes\"\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  a string containing the number of digits in the file's name.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameLength(\"example.txt\") # => '2'\n  fileNameLength(\"1example.dll\") # => '3' (the name should start with a latin alphapet letter)\n  */\nconst fileNameLength = (file_name) => {\n  const match = file_name.match(/^[a-zA-Z]+[\\d]{1}[a-zA-Z]*(\\.[txt|exe|dll])?$/)\n  if (match) {\n    return match[0].length\n  }\n  return '0'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  a string containing the file's name with the first letter replaced with 'X'.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameX(\"example.txt\") # => 'Xexample.txt'\n  fileNameX(\"1example.dll\") # => 'Xexample.dll' (the name should start with a latin alphapet letter)\n  */\nconst fileNameX = (file_name) => {\n  const match = file_name.match(/^[a-zA-Z]+[\\d]{1}[a-zA-Z]*(\\.[txt|exe|dll])?$/)\n  if (match) {\n    return `X${match[0]}`\n  }\n  return 'X'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  a string containing the file's name with all digits replaced with 'X'.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameX(\"example.txt\") # => 'example.txt'\n  fileNameX(\"1example.dll\") # => 'example.dll' (the name should start with a latin alphapet letter)\n  */\nconst fileNameXAllDigits = (file_name) => {\n  const match = file_name.match(/^[a-zA-Z]+[\\d]{1}[a-zA-Z]*(\\.[txt|exe|dll])?$/)\n  if (match) {\n    return match[0].replace(/[0-9]/g, 'X')\n  }\n  return 'X'\n}\n\n/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the file's name contains any non-alphanumeric character, and 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameX(\"example.txt\") # => 'Yes'\n  fileNameX(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameHasNonAlphaNumeric = (file_name) => {\n  const match = file_name.match(/^[a-zA-Z]+[\\d]{1}[a-zA-Z]*(\\.[txt|exe|dll])?"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  const sum = lst.reduce((acc, num) => acc + num * num, 0)\n  return sum\n}\n\n// let lst = [1,2,3]\n// let sum = sumSquares(lst)\n// console.log(sum)\n// > 6\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  let arr = sentence.split(' ')\n  let newArr = []\n\n  for (let i = 0; i < arr.length; i++) {\n    let arrLength = arr[i].length\n\n    if (arrLength < 3) {\n      newArr.push(arr[i])\n    } else {\n      newArr.push(arr[i].substr(0, arrLength - 2))\n      newArr.push(arr[i].substr(arrLength - 2))\n    }\n  }\n\n  return newArr.join(' ')\n}\n\nmodule.exports = wrodsInSentenec\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  x = x.split(\"/\");\n  n = n.split(\"/\");\n\n  return x[0] === n[0] && x[1] === n[1] && x[0] === parseInt(x[0], 10) && x[1] === parseInt(x[1], 10) && n[0] === parseInt(n[0], 10) && n[1] === parseInt(n[1], 10);\n}\n\nconsole.log(simpilfy(\"1/5\", \"5/1\"));\nconsole.log(simpilfy(\"1/6\", \"2/1\"));\nconsole.log(simpilfy(\"7/10\", \"10/2\"));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  let len = nums.length\n  const p = []\n  for (let i = 0; i < len; i++) {\n    p.push([nums[i], i])\n  }\n  p.sort((a, b) => {\n    let aSum = 0\n    let bSum = 0\n    for (let i = 0; i < a[1]; i++) {\n      aSum += a[0].charAt(i) - '0'\n    }\n    for (let i = 0; i < b[1]; i++) {\n      bSum += b[0].charAt(i) - '0'\n    }\n    return aSum - bSum\n  })\n  return p\n}\n\n// const roderByPoints = (nums) => {\n//   let len = nums.length\n//   const p = []\n//   for (let i = 0; i < len; i++) {\n//     p.push([nums[i], i])\n//   }\n//   p.sort((a, b) => {\n//     return a[0] - b[0]\n//   })\n//   return p\n// }\n\nconsole.log(roderByPoints([1, 11, -1, -11, -12]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const even = (x) => x % 2 === 0;\n  const odd = (x) => x % 2!== 0;\n  const isOdd = (x) => x % 2!== 0;\n  const isEven = (x) => x % 2 === 0;\n  let count = 0;\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] > 10 && isOdd(nums[i])) {\n      count++;\n    }\n    if (nums[i] > 10 && isEven(nums[i])) {\n      count++;\n    }\n  }\n  return count;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15]));\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109]));\n<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  let trpiles = []\n  for (let i = 1; i <= n; i++) {\n    let val = i * i - i + 1\n    while (val > 0) {\n      let count = 0\n      for (let j = i + 1; j <= n; j++) {\n        for (let k = j + 1; k <= n; k++) {\n          if (val + a[j] + a[k] % 3 === 0) {\n            count++\n          }\n        }\n      }\n      if (count > 0) {\n        trpiles.push([i, j, k])\n      }\n      val--\n    }\n  }\n  return trpiles.length\n}\n\nconsole.log(getMaxTrpiles(5))\n<|endoftext|>"}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  let result = []\n  let firstPlanet = 'Jupiter'\n  let secondPlanet = 'Uranus'\n  if (planet1 === firstPlanet) {\n    secondPlanet = 'Mercury'\n  }\n  if (planet2 === firstPlanet) {\n    secondPlanet = 'Mercury'\n  }\n  if (planet1 === secondPlanet) {\n    result = ['Jupiter']\n  }\n  if (planet2 === secondPlanet) {\n    result = ['Mercury']\n  }\n  if (planet1 === 'Earth' && planet2 === 'Jupiter') {\n    result = ['Mercury']\n  }\n  if (planet1 === 'Earth' && planet2 === 'Neptune') {\n    result = ['Venus']\n  }\n  if (planet1 === 'Earth' && planet2 === 'Mercury') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Mercury') {\n    result = ['Mercury', 'Saturn']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Uranus') {\n    result = ['Saturn']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Saturn') {\n    result = ['Uranus']\n  }\n  if (planet1 === 'Uranus' && planet2 === 'Saturn') {\n    result = ['Saturn', 'Jupiter']\n  }\n  if (planet1 === 'Uranus' && planet2 === 'Neptune') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Neptune' && planet2 === 'Saturn') {\n    result = ['Saturn', 'Jupiter']\n  }\n  if (planet1 === 'Neptune' && planet2 === 'Uranus') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Saturn' && planet2 === 'Uranus') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Saturn' && planet2 === 'Jupiter') {\n    result = ['Uranus']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Uranus') {\n    result = ['Uranus']\n  }\n  if (planet1 === 'Mercury' && planet2 === 'Jupiter') {\n    result = ['Saturn']\n  }\n  if (planet1 === 'Mercury' && planet2 === 'Uranus') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Mercury' && planet2 === 'Saturn') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Mercury' && planet2 === 'Neptune') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Mercury' && planet2 === 'Neptune') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Neptune' && planet2 === 'Saturn') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Neptune' && planet2 === 'Uranus') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Neptune' && planet2 === 'Jupiter') {\n    result = ['Saturn']\n  }\n  if (planet1 === 'Uranus' && planet2 === 'Jupiter') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Saturn') {\n    result = ['Saturn']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Uranus') {\n    result = ['Saturn']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Neptune') {\n    result = ['Saturn']\n  }\n  if (planet1 === 'Saturn' && planet2 === 'Jupiter') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Saturn' && planet2 === 'Uranus') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Saturn' && planet2 === 'Neptune') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Saturn' && planet2 === 'Neptune') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Saturn') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Neptune' && planet2 === 'Saturn') {\n    result = ['Jupiter']\n  }\n  if (planet1 === 'Jupiter' && planet2 === 'Neptune') {\n    result = ['Jupiter']\n  }\n  return result\n}\n\n/*\n  The function should take two planet names as strings planet1 and planet2\n  and return a tuple containing all planets whose orbital period is\n  between the orbital period of planet1 and the orbital period of planet2,\n  sorted by the orbital period.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  p = bf('Jupiter', 'Saturn')\n  p = bf('Earth', 'Mercury')\n  p = bf('Mercury', 'Uranus')\n  p = bf('Mercury', 'Jupiter')\n  p = bf('Jupiter', 'Saturn')\n  p = bf('Saturn', 'Uran"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const remove = (lst, i, len) => {\n    lst.splice(i, 1);\n    len--;\n    if (len < 1) return lst;\n    return [...lst,...remove(lst, i + 1, len)];\n  };\n\n  const getLength = (lst) => lst.reduce((p, c) => p + (c.length || 1), 0);\n\n  return lst.reduce((prev, current, i) => {\n    const len = getLength(remove(lst, i, current.length));\n    if (len > prev) return [...prev, current];\n    return [current];\n  }, []).sort((a, b) => a.length - b.length);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  if (n % 2 === 0) {\n    return x;\n  } else {\n    return y;\n  }\n};\n\nconsole.log(xOrY(7, 34, 12));\nconsole.log(xOrY(15, 8, 5));<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  const sum = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n      result += arr[i];\n    }\n    return result;\n  };\n  const odd = (arr) => {\n    let result = 0;\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] % 2 === 1) {\n        result += arr[i];\n      }\n    }\n    return result;\n  };\n  return sum(lst) + odd(lst);\n};\n\nconsole.log(doublehTeDifference([1, 3, 2, 0]));\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  const n = game.length\n  const guessLength = guess.length\n  let error = []\n  for (let i = 0; i < n; i++) {\n    if (game[i] === guess[i]) {\n      error.push(0)\n    } else {\n      error.push(Math.abs(game[i] - guess[i]))\n    }\n  }\n  return error\n}\n\nmodule.exports = compare<|endoftext|>"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  if (!extensions.length) return class_name\n\n  let cap = 0\n  let sm = 0\n\n  for (let extension of extensions) {\n    let [cap_index, sm_index] = [0, 0]\n    let len = extension.length\n\n    for (let i = 0; i < len; i++) {\n      if (i === 0) {\n        if (extension.charAt(i).toUpperCase() === extension.charAt(i)) {\n          cap_index = i\n        }\n      } else if (extension.charAt(i).toLowerCase() === extension.charAt(i)) {\n        sm_index = i\n      }\n    }\n\n    if (cap_index > 0) {\n      cap += cap_index - sm_index\n    }\n    if (sm_index > 0) {\n      sm += sm_index - cap_index\n    }\n  }\n\n  let strength = cap - sm\n\n  if (strength > 0) {\n    return `${class_name}.${extensions[0]}`\n  }\n\n  return class_name\n}\n\nconst getExtensions = (class_name) => {\n  const extensions = []\n  const parts = class_name.split('.')\n  const index = parts.length - 1\n\n  if (index > 1) {\n    for (let i = index - 1; i >= 1; i--) {\n      if (parts[i].length === 0) continue\n\n      extensions.push(parts[i])\n    }\n  }\n\n  return extensions\n}\n\nconst getClassName = (class_name, extensions) => {\n  if (!extensions.length) return class_name\n\n  const parts = class_name.split('.')\n  const index = parts.length - 1\n\n  if (index > 1) {\n    for (let i = index - 1; i >= 1; i--) {\n      if (parts[i].length === 0) continue\n\n      if (parts[i].toLowerCase() === parts[i].toUpperCase()) {\n        parts[i] = parts[i].toLowerCase()\n      } else {\n        break\n      }\n    }\n  }\n\n  const extension = getExtensions(class_name)\n  const name = parts.pop()\n\n  return `${name}.${extension.join('.')}`\n}\n\nconst isValid = (class_name) => {\n  const parts = class_name.split('.')\n  const index = parts.length - 1\n\n  if (index > 1) {\n    for (let i = index - 1; i >= 1; i--) {\n      if (parts[i].length === 0) continue\n\n      if (parts[i].toLowerCase() === parts[i].toUpperCase()) {\n        parts[i] = parts[i].toLowerCase()\n      } else {\n        return false\n      }\n    }\n  }\n\n  const extension = getExtensions(class_name)\n\n  return extension.length === 0\n}\n\nmodule.exports = {\n  getExtensions,\n  getClassName,\n  isValid\n}\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  if (a.length < b.length) return false;\n  for (let i = 0; i < b.length; i++) {\n    if (a.includes(b.substr(i, b.length - i))) return true;\n  }\n  return false;\n};\n\nexport default ccypatternChekc;\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n  const count = 0\n  const numString = num.toString()\n  for (let i = 0; i < numString.length; i++) {\n    count += (numString.charAt(i) % 2 === 0)? 1 : 0\n  }\n  return (count, numString.length - count)\n}\n\nmodule.exports = evenOddCount\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const num = number;\n  if (num <= 1) return 'i';\n  else if (num <= 4) return 'iv';\n  else if (num <= 9) return 'ix';\n  else if (num <= 40) return 'x';\n  else if (num <= 90) return 'xv';\n  else if (num <= 100) return 'c';\n  else if (num <= 200) return 'cc';\n  else if (num <= 500) return 'cd';\n  else if (num <= 1000) return 'cx';\n  else return 'cm';\n};\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  let isRightAngled = true;\n  if (a < b && b < c) {\n    if (a + b < c) {\n      isRightAngled = false;\n    }\n  } else if (b < a && a < c) {\n    if (b + c < a) {\n      isRightAngled = false;\n    }\n  } else if (c < a && a < b) {\n    if (c + b < a) {\n      isRightAngled = false;\n    }\n  }\n  return isRightAngled;\n};\n\n/*\n Given the length of one side of a triangle, return the other two sides of the\n triangle. If the length of the one side is negative, then return two\n opposites.\n  A triangle can be represented by two positive integers a, b and c, such that\n  a + b > c, where c is the length of one of the sides.\n  Example:\n  findTriangle(3) == [3, 4, 5]\n  findTriangle(4) == [-4, 3, 5]\n  */\nconst findTriangle = (sideLength) => {\n  const oppositeSideLengths = [...Array(3)].map((element, index) => {\n    if (element < 0) {\n      return [\n        -element,\n        -Math.pow(sideLength, index + 2),\n        -Math.pow(sideLength, index + 1),\n      ];\n    } else {\n      return [\n        element,\n        Math.pow(sideLength, index + 2),\n        Math.pow(sideLength, index + 1),\n      ];\n    }\n  });\n  const result = [];\n  oppositeSideLengths.forEach((lengths, index) => {\n    result.push(\n     ...lengths.map((element, index) => {\n        if (element < 0) {\n          return [\n            Math.pow(sideLength, index),\n            -Math.pow(sideLength, index + 1),\n            Math.pow(sideLength, index + 2),\n          ];\n        } else {\n          return [\n            Math.pow(sideLength, index),\n            Math.pow(sideLength, index + 1),\n            -Math.pow(sideLength, index + 2),\n          ];\n        }\n      })\n    );\n  });\n  return result;\n};\n\n/*\n Given the length of one side of a triangle, return the other two sides of the\n triangle. If the length of the one side is negative, then return two\n opposites.\n  A triangle can be represented by two positive integers a, b and c, such that\n  a + b > c, where c is the length of one of the sides.\n  Example:\n  findTriangle(3) == [3, 4, 5]\n  findTriangle(4) == [-4, 3, 5]\n  */\nconst findOppositeTriangle = (sideLength) => {\n  const oppositeSideLengths = [\n   ...Array(3).fill(sideLength).map((element, index) => {\n      if (element < 0) {\n        return [\n          -Math.pow(sideLength, index),\n          -Math.pow(sideLength, index + 1),\n          -Math.pow(sideLength, index + 2),\n        ];\n      } else {\n        return [\n          Math.pow(sideLength, index),\n          Math.pow(sideLength, index + 1),\n          -Math.pow(sideLength, index + 2),\n        ];\n      }\n    }),\n  ];\n  const result = [];\n  oppositeSideLengths.forEach((lengths, index) => {\n    result.push(\n     ...lengths.map((element, index) => {\n        if (element < 0) {\n          return [\n            -Math.pow(sideLength, index + 1),\n            -Math.pow(sideLength, index + 2),\n            -Math.pow(sideLength, index),\n          ];\n        } else {\n          return [\n            Math.pow(sideLength, index + 1),\n            Math.pow(sideLength, index + 2),\n            -Math.pow(sideLength, index),\n          ];\n        }\n      })\n    );\n  });\n  return result;\n};\n\n/*\n Given the length of one side of a triangle, return the other two sides of the\n triangle. If the length of the one side is negative, then return two\n opposites.\n  A triangle can be represented by two positive integers a, b and c, such that\n  a + b > c, where c is the length of one of the sides.\n  Example:\n  findTriangle(3) == [3, 4, 5]\n  findTriangle(4) == [-4, 3, 5]\n  */\nconst findTriangleOpposite = (sideLength) => {\n  const oppositeSideLengths = [\n   ...Array(3).fill(sideLength).map((element, index) => {\n      if (element < 0) {\n        return [\n          -Math.pow(sideLength, index + 2),\n          -Math.pow(sideLength, index + 1),\n          -Math.pow(sideLength, index),\n        ];\n      } else {\n        return [\n          Math.pow(sideLength, index + 2),\n          Math.pow(sideLength, index + 1),\n          -Math.pow(sideLength, index),\n        ];\n      }\n    }),\n  ];\n  const result = [];\n  oppositeSideLengths.forEach((lengths, index) => {\n    result.push(\n     ...lengths.map((element, index) => {\n        if (element < 0) {\n          return [\n            -Math.pow(sideLength, index),\n            -Math.pow(sideLength, index + 1),\n            -Math.pow(sideLength, index + 2),\n          ];\n        } else {\n          return [\n            Math.pow(sideLength, index),\n            "}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const maxWord = words.reduce((max, word) => {\n    const wordLength = word.length;\n    const uniqueCharacters = word.split('').reduce((uniqueCharacters, character, i) => {\n      if (uniqueCharacters.indexOf(character) === -1) {\n        uniqueCharacters.push(character);\n      }\n      return uniqueCharacters;\n    }, []);\n    if (uniqueCharacters.length > max.length) {\n      max = word;\n    }\n    return uniqueCharacters.length;\n  }, \"\");\n  return max;\n};\n\nconsole.log(findMax([\"name\", \"of\", \"string\"])); // \"string\"\nconsole.log(findMax([\"name\", \"enam\", \"game\"])); // \"enam\"\nconsole.log(findMax([\"aaaaaaa\", \"bb\", \"cc\"])); // \"\"aaaaaaa\"<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n    const left = number - need;\n    const toEat = Math.min(need, remaining);\n    return [ number + toEat, left - toEat ];\n}\n\nconst main = () => {\n    const number = prompt(\"Enter the number of carrots that you have eaten: \");\n    const need = prompt(\"Enter the number of carrots that you need to eat: \");\n    const remaining = prompt(\"Enter the number of remaining carrots: \");\n    \n    const [ total, remaining ] = eat(number, need, remaining);\n    \n    console.log(\"You have eaten \" + number + \" carrots.\");\n    console.log(\"You will now have \" + total + \" carrots left.\");\n    \n    console.log(\"Thank you for using this program!\");\n}\n\nmain();<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  // verify inputs\n  if (operator.length < 2) {\n    throw new Error('Operator list is empty.')\n  }\n\n  if (operand.length < 2) {\n    throw new Error('Operand list is empty.')\n  }\n\n  // calculate result\n  let result = 0\n  for (let i = 0; i < operator.length; i++) {\n    let operatorVal = parseInt(operator[i])\n    let operandVal = parseInt(operand[i])\n    if (operatorVal < 0) {\n      throw new Error('Operator list has negative elements.')\n    }\n\n    if (operandVal < 0) {\n      throw new Error('Operand list has negative elements.')\n    }\n\n    result += operatorVal * operandVal\n  }\n\n  return result\n}\n\n/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra2 = (operator, operand) => {\n  // verify inputs\n  if (operator.length < 2) {\n    throw new Error('Operator list is empty.')\n  }\n\n  if (operand.length < 2) {\n    throw new Error('Operand list is empty.')\n  }\n\n  // calculate result\n  let result = 0\n  for (let i = 0; i < operator.length; i++) {\n    let operatorVal = parseInt(operator[i])\n    let operandVal = parseInt(operand[i])\n    if (operatorVal < 0) {\n      throw new Error('Operator list has negative elements.')\n    }\n\n    if (operandVal < 0) {\n      throw new Error('Operand list has negative elements.')\n    }\n\n    result += operatorVal * operandVal\n  }\n\n  return result\n}\n\n// tests\nexports.doAlgebra = doAlgebra\nexports.doAlgebra2 = doAlgebra2\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    if (s.length === 0) return s\n    let r = \"\"\n    for (let i = 0; i < s.length; i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            r += s[i].toUpperCase()\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n            r += s[i].toLowerCase()\n        } else {\n            r += s[i]\n        }\n    }\n    return r\n}\nconsole.log(solve(\"1234\"))\nconsole.log(solve(\"ab\"))\nconsole.log(solve(\"#a@C\"))\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n  if (text === '') return null;\n\n  let hash = hashStr(text);\n  return md5(hash);\n};\n\n/*\n  Given a string 'text', return its sha1 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha1('Hello world') == '5c5e6d04f4dfa0a5b0f4eccb8cbce0a4a6b8a8f'\n  */\nconst stringToSha1 = (text) => {\n  if (text === '') return null;\n\n  let hash = hashStr(text);\n  return sha1(hash);\n};\n\n/*\n  Given a string 'text', return its sha256 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha256('Hello world') == 'f1d8e7f1e4be08dacb9a6f5b9b97f5d051e33c4d0c9daf6f3f7f6e2c8c0a6'\n  */\nconst stringToSha256 = (text) => {\n  if (text === '') return null;\n\n  let hash = hashStr(text);\n  return sha256(hash);\n};\n\n/*\n  Given a string 'text', return its sha384 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToSha384('Hello world') == 'd0b8d4d5c2d2d4d3f2f4f5f6f7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e6e7f8f9fafbfc2d4d5e"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let i = a\n  let j = b\n  let ints = []\n\n  while (i <= j) {\n    if (i % 2 === 0) {\n      ints.push(i)\n    }\n    i += 1\n  }\n\n  return ints\n}\n\nconst test = [\n  { a: 2, b: 8, expected: [2, 4, 6, 8] },\n  { a: 8, b: 2, expected: [2, 4, 6, 8] },\n  { a: 10, b: 14, expected: [] },\n]\n\ntest.forEach(({ a, b, expected }) => {\n  const actual = generateIntegers(a, b)\n  console.log(`generateIntegers({a},{b}) => ${actual}`)\n  console.log(`Expected: ${expected}`)\n  console.log(`Actual:   ${actual}`)\n  assert(actual === expected)\n})\n<|endoftext|>"}
