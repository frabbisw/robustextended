{"task_id": "JavaScript/0", "prompt": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n", "canonical_solution": "  for (let i = 0; i < numbers.length; i++) {\n    for (let j = 0; j < numbers.length; j++) {\n      if (i != j) {\n        let distance = Math.abs(numbers[i] - numbers[j]);\n        if (distance < threshold) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.3) === true)\n  console.assert(\n    hasCloseElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2], 0.05) === false\n  )\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.95) === true)\n  console.assert(hasCloseElements([1.0, 2.0, 5.9, 4.0, 5.0], 0.8) === false)\n  console.assert(hasCloseElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 0.1) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 1.0) === true)\n  console.assert(hasCloseElements([1.1, 2.2, 3.1, 4.1, 5.1], 0.5) === false)\n}\n\ntestHasCloseElements()\n", "declaration": "\nconst hasCloseElements = (numbers, threshold) => {\n", "example_test": "const testHasCloseElements = () => {\n  console.assert(hasCloseElements([1.0, 2.0, 3.0], 0.5) === false)\n  console.assert(\n    hasCloseElements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3) === true\n  )\n}\ntestHasCloseElements()\n", "entry_point": "hasCloselEements", "gc": "/* Check if in given list of numbers, are any two numbers closer to each other than\n  given threshold.\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.5)\n  false\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  */\nconst hasCloselEements = (numbers, threshold) => {\n    let max = numbers[0];\n    let min = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    if (max - min < threshold) {\n        return true;\n    }\n    return false;\n};\n\n/*\n  >>> hasCloselEements([1.0, 2.8, 3.0, 4.0, 5.0, 2.0], 0.3)\n  true\n  >>> hasCloselEements([1.0, 2.0, 3.0], 0.3)\n  false\n  >>> hasCloselEements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0], 1.0)\n  false\n  */\nconst hasCloselEementsWithThreshold = (numbers, threshold) => {\n    let max = numbers[0];\n    let min = numbers[0];\n    for (let i = 0; i < numbers.length; i++) {\n        if (numbers[i] > max) {\n            max = numbers[i];\n        }\n        if (numbers[i] < min) {\n            min = numbers[i];\n        }\n    }\n    if (max - min < threshold) {\n        return true;\n    }\n    return false;\n};\n\nmodule.exports = {\n    hasCloselEements,\n    hasCloselEementsWithThreshold,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/1", "prompt": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n", "canonical_solution": "  var result = [];\n  var current_string = [];\n  var current_depth = 0;\n\n  for (const c of paren_string) {\n    if (c == '(') {\n      current_depth += 1;\n      current_string.push(c);\n    } else if (c == ')') {\n      current_depth -= 1;\n      current_string.push(c);\n      if (current_depth == 0) {\n        result.push(current_string.join(''));\n        current_string = [];\n      }\n    }\n  }\n\n  return result;\n}\n\n", "test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('(()()) ((())) () ((())()())')) ===\n      JSON.stringify(['(()())', '((()))', '()', '((())()())'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('() (()) ((())) (((())))')) ===\n      JSON.stringify(['()', '(())', '((()))', '(((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('(()(())((())))')) ===\n      JSON.stringify(['(()(())((())))'])\n  )\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\n\ntestSeparateParenGroups()\n", "declaration": "\nconst separateParenGroups = (paren_string) => {\n", "example_test": "const testSeparateParenGroups = () => {\n  console.assert(\n    JSON.stringify(separateParenGroups('( ) (( )) (( )( ))')) ===\n      JSON.stringify(['()', '(())', '(()())'])\n  )\n}\ntestSeparateParenGroups()\n", "entry_point": "separateParenGrousp", "gc": "/* Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n  separate those group into separate strings and return the list of those.\n  Separate groups are balanced (each open brace is properly closed) and not nested within each other\n  Ignore any spaces in the input string.\n  >>> separateParenGrousp('( ) (( )) (( )( ))')\n  ['()', '(())', '(()())']\n  */\nconst separateParenGrousp = (paren_string) => {\n  const paren_groups = paren_string.split('');\n  let stack = [];\n  for (let i = 0; i < paren_groups.length; i++) {\n    const paren = paren_groups[i];\n    if (paren === ')') {\n      if (stack.length === 0) {\n        // This is a group that ends with a closing brace\n        // Return this group\n        return [paren_groups.slice(0, i + 1).join(''), paren_groups[i + 1].join('')];\n      } else {\n        // This is a group that ends with a opening brace\n        // Push this group to the stack\n        stack.push(paren_groups.slice(0, i + 1).join(''));\n      }\n    } else if (paren === '(') {\n      if (stack.length === 0) {\n        // This is a group that starts with an opening brace\n        // Push this group to the stack\n        stack.push(paren_groups.slice(0, i + 1).join(''));\n      } else {\n        // This is a group that starts with a closing brace\n        // Pop the last group from the stack\n        stack.pop();\n      }\n    }\n  }\n  // Return the stack as a list of groups\n  return stack;\n};\n\nmodule.exports = separateParenGrousp;\n<|endoftext|>"}
{"task_id": "JavaScript/2", "prompt": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n", "canonical_solution": "  return number % 1.0;\n}\n\n", "test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n\n  console.assert(Math.abs(truncateNumber(1.33) - 0.33) < 1e-6)\n\n  console.assert(Math.abs(truncateNumber(123.456 - 0.456) < 1e-6))\n}\n\ntestTruncateNumber()\n", "declaration": "\nconst truncateNumber = (number) => {\n", "example_test": "const testTruncateNumber = () => {\n  console.assert(truncateNumber(3.5) === 0.5)\n}\ntestTruncateNumber()\n", "entry_point": "truncateNubmer", "gc": "/* Given a positive floating point number, it can be decomposed into\n  and integer part (largest integer smaller than given number) and decimals\n  (leftover part always smaller than 1).\n\n  Return the decimal part of the number.\n  >>> truncateNubmer(3.5)\n  0.5\n  */\nconst truncateNubmer = (number) => {\n  const integerPart = Math.floor(number);\n  const decimalPart = number - integerPart;\n\n  if (decimalPart > 0.5) {\n    return 1;\n  }\n  return 0;\n};\n\nexport default truncateNubmer;\n<|endoftext|>"}
{"task_id": "JavaScript/3", "prompt": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n", "canonical_solution": "  var balance = 0;\n  for (const op of operations) {\n    balance += op;\n    if (balance < 0) {\n      return true;\n    }\n  }\n  return false;\n}\n\n", "test": "const testBelowZero = () => {\n  console.assert(belowZero([]) === false)\n  console.assert(belowZero([1, 2, -3, 1, 2, -3]) === false)\n  console.assert(belowZero([1, 2, -4, 5, 6]) === true)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -4]) === false)\n  console.assert(belowZero([1, -1, 2, -2, 5, -5, 4, -5]) === true)\n  console.assert(belowZero([1, -2, 2, -2, 5, -5, 4, -4]) === true)\n}\n\ntestBelowZero()\n", "declaration": "\nconst belowZero = (operations) => {\n", "example_test": "const testBelowZero = () => {\n  console.assert(belowZero([1, 2, 3]) === false)\n  console.assert(belowZero([1, 2, -4, 5]) === true)\n}\ntestBelowZero()\n", "entry_point": "belowZeor", "gc": "/* You're given a list of deposit and withdrawal operations on a bank account that starts with\n  zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n  at that point function should return true. Otherwise it should return false.\n  >>> belowZeor([1, 2, 3])\n  false\n  >>> belowZeor([1, 2, -4, 5])\n  true\n  */\nconst belowZeor = (operations) => {\n  const len = operations.length;\n  const total = 0;\n  let i = 0;\n  let temp = 0;\n\n  while (i < len) {\n    if (operations[i] > 0) {\n      total += operations[i];\n    } else {\n      temp = total + operations[i];\n      if (temp < 0) {\n        return true;\n      }\n      total = temp;\n    }\n    i++;\n  }\n  return false;\n};\n\nconsole.log(belowZeor([1, 2, 3]));\nconsole.log(belowZeor([1, 2, -4, 5]));\n<|endoftext|>"}
{"task_id": "JavaScript/4", "prompt": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n", "canonical_solution": "  var mean = numbers.reduce((prev, item) => {\n    return prev + item;\n  }, 0) / numbers.length;\n  return numbers.reduce((prev, item) => {\n    return prev + Math.abs(item - mean);\n  }, 0) / numbers.length;\n\n}\n\n", "test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0]) - 2.0 / 3.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0, 5.0]) - 6.0 / 5.0) < 1e-6\n  )\n}\n\ntestMeanAbsoluteDeviation()\n", "declaration": "\nconst meanAbsoluteDeviation = (numbers) => {\n", "example_test": "const testMeanAbsoluteDeviation = () => {\n  console.assert(\n    Math.abs(meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0]) - 1.0) < 1e-6\n  )\n}\ntestMeanAbsoluteDeviation()\n", "entry_point": "meanAbsoltueDeviation", "gc": "/* For a given list of input numbers, calculate Mean Absolute Deviation\n  around the mean of this dataset.\n  Mean Absolute Deviation is the average absolute difference between each\n  element and a centerpoint (mean in this case):\n  MAD = average | x - x_mean |\n  >>> meanAbsoltueDeviation([1.0, 2.0, 3.0, 4.0])\n  1.0\n  */\nconst meanAbsoltueDeviation = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.abs(numbers[i] - mean(numbers));\n  }\n  return sum / numbers.length;\n};\n\n// ### Sum\n\n/* For a given list of numbers, calculate the sum.\n  >>> sum([1, 2, 3, 4])\n  15\n  */\nconst sum = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i];\n  }\n  return sum;\n};\n\n// ### Median\n\n/* For a given list of numbers, calculate the median.\n  Median is the mean of the middle two numbers in the list.\n  >>> median([1, 2, 3, 4])\n  2.5\n  >>> median([1, 2, 3, 4, 5])\n  3.0\n  */\nconst median = (numbers) => {\n  let sorted = numbers.sort();\n  return sorted[Math.floor(numbers.length / 2)];\n};\n\n// ### Mode\n\n/* For a given list of numbers, calculate the mode.\n  Mode is the most common number in the list.\n  >>> mode([1, 2, 2, 3, 4])\n  2\n  >>> mode([1, 2, 2, 3, 4, 5])\n  2\n  */\nconst mode = (numbers) => {\n  let count = 0;\n  let maxCount = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    if (numbers[i] === numbers[i]) {\n      count++;\n      if (count > maxCount) {\n        maxCount = count;\n      }\n    }\n  }\n  return numbers[maxCount];\n};\n\n// ### Variance\n\n/* For a given list of numbers, calculate the variance.\n  Variance is the mean of the squared differences from the mean.\n  >>> variance([1, 2, 3, 4, 5])\n  2.5\n  >>> variance([1, 2, 3, 4])\n  2.25\n  */\nconst variance = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2);\n  }\n  return sum / numbers.length;\n};\n\n// ### Standard Deviation\n\n/* For a given list of numbers, calculate the standard deviation.\n  Standard Deviation is the square root of the variance.\n  >>> standardDeviation([1, 2, 3, 4, 5])\n  2.82842\n  >>> standardDeviation([1, 2, 3, 4])\n  2.0\n  */\nconst standardDeviation = (numbers) => {\n  return Math.sqrt(variance(numbers));\n};\n\n// ### Skewness\n\n/* For a given list of numbers, calculate the skewness.\n  Skewness is the mean of the squares of the differences from the mean.\n  >>> skewness([1, 2, 3, 4, 5])\n  0.0\n  >>> skewness([1, 2, 3, 4])\n  0.0\n  */\nconst skewness = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2);\n  }\n  return sum / numbers.length;\n};\n\n// ### Kurtosis\n\n/* For a given list of numbers, calculate the kurtosis.\n  Kurtosis is the mean of the squares of the difference from the mean.\n  >>> kurtosis([1, 2, 3, 4, 5])\n  2.45\n  >>> kurtosis([1, 2, 3, 4])\n  2.0\n  */\nconst kurtosis = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(numbers[i] - mean(numbers), 2);\n  }\n  return sum / numbers.length;\n};\n\n// ### Mean of the Mean\n\n/* For a given list of numbers, calculate the mean of the means of each number.\n  Mean of the Mean is the mean of the squared means of each number.\n  >>> meanOfMeans([1, 2, 3, 4])\n  2.0\n  >>> meanOfMeans([1, 2, 3, 4, 5])\n  2.5\n  */\nconst meanOfMeans = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(mean(numbers), 2);\n  }\n  return sum / numbers.length;\n};\n\n// ### Mode of the Mean\n\n/* For a given list of numbers, calculate the mode of the means of each number.\n  Mode of the Mean is the mode of the squared means of each number.\n  >>> modeOfMeans([1, 2, 3, 4])\n  2.0\n  >>> modeOfMeans([1, 2, 3, 4, 5])\n  3.0\n  */\nconst modeOfMeans = (numbers) => {\n  let sum = 0;\n  for (let i = 0; i < numbers.length; i++) {\n    sum += Math.pow(mode(numbers), 2);\n  }\n  return sum / numbers.length;\n};\n\n// ### Standard Deviation of the Mean\n\n/* For a given list of numbers, calculate the standard deviation of the means of each number.\n  Standard Deviation of the Mean is the standard deviation of the squared means of each number.\n  >>> standardDeviationOfMeans([1, 2, 3, 4])\n  1.0\n  >>> standardDeviationOfMeans([1, 2, 3, 4, 5])"}
{"task_id": "JavaScript/5", "prompt": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n", "canonical_solution": "  if (!Array.isArray(numbers) || numbers.length == 0)\n    return [];\n  var result = [];\n  for (const n of numbers) {\n    result.push(n, delimeter);\n  }\n  result.pop();\n  return result;\n}\n\n", "test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 7)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([5, 6, 3, 2], 8)) === JSON.stringify([5, 8, 6, 8, 3, 8, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      intersperse([2, 2, 2], 2)) === JSON.stringify([2, 2, 2, 2, 2])\n  )\n}\n\ntestIntersperse()\n", "declaration": "\nconst intersperse = (numbers, delimeter) => {\n", "example_test": "const testIntersperse = () => {\n  console.assert(JSON.stringify(intersperse([], 4)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      intersperse([1,2,3], 4)) === JSON.stringify([1,4,2,4,3])\n  )\n}\ntestIntersperse()\n", "entry_point": "interpserse", "gc": "/* Insert a number 'delimeter' between every two consecutive elements of input list `numbers'\n  >>> interpserse([], 4)\n  []\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i])\n    result.push(delimeter)\n  }\n  result.push(numbers[numbers.length - 1])\n  return result\n}\n\n/*\n  >>> interpserse([1, 2, 3], 4)\n  [1, 4, 2, 4, 3]\n  >>> interpserse([1, 2, 3], 3)\n  [1, 3, 2, 3]\n  >>> interpserse([1, 2, 3], 2)\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], 1)\n  [1, 2, 3]\n  >>> interpserse([1, 2, 3], 0)\n  [1, 2, 3]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length; i++) {\n    result.push(numbers[i])\n  }\n  return result\n}\n\n/*\n  >>> interpserse([1, 2, 3, 4, 5], 4)\n  [1, 4, 2, 4, 3, 4, 5]\n  >>> interpserse([1, 2, 3, 4, 5], 3)\n  [1, 3, 2, 3, 4, 5]\n  >>> interpserse([1, 2, 3, 4, 5], 2)\n  [1, 2, 3, 4, 5]\n  >>> interpserse([1, 2, 3, 4, 5], 1)\n  [1, 2, 3, 4, 5]\n  >>> interpserse([1, 2, 3, 4, 5], 0)\n  [1, 2, 3, 4, 5]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i])\n    result.push(delimeter)\n  }\n  result.push(numbers[numbers.length - 1])\n  return result\n}\n\n/*\n  >>> interpserse([1, 2, 3, 4, 5, 6], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6]\n  >>> interpserse([1, 2, 3, 4, 5, 6], 3)\n  [1, 3, 2, 3, 4, 5, 6]\n  >>> interpserse([1, 2, 3, 4, 5, 6], 2)\n  [1, 2, 3, 4, 5, 6]\n  >>> interpserse([1, 2, 3, 4, 5, 6], 1)\n  [1, 2, 3, 4, 5, 6]\n  >>> interpserse([1, 2, 3, 4, 5, 6], 0)\n  [1, 2, 3, 4, 5, 6]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i])\n    result.push(delimeter)\n  }\n  result.push(numbers[numbers.length - 1])\n  return result\n}\n\n/*\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7], 3)\n  [1, 3, 2, 3, 4, 5, 6, 7]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7], 2)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7], 1)\n  [1, 2, 3, 4, 5, 6, 7]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7], 0)\n  [1, 2, 3, 4, 5, 6, 7]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i])\n    result.push(delimeter)\n  }\n  result.push(numbers[numbers.length - 1])\n  return result\n}\n\n/*\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7, 8], 4)\n  [1, 4, 2, 4, 3, 4, 5, 6, 7, 8]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7, 8], 3)\n  [1, 3, 2, 3, 4, 5, 6, 7, 8]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7, 8], 2)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7, 8], 1)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  >>> interpserse([1, 2, 3, 4, 5, 6, 7, 8], 0)\n  [1, 2, 3, 4, 5, 6, 7, 8]\n  */\nconst interpserse = (numbers, delimeter) => {\n  let result = []\n  for (let i = 0; i < numbers.length - 1; i++) {\n    result.push(numbers[i])\n    result.push(delimeter)\n  }\n  result.push(numbers[numbers.length - 1])\n  return result\n}\n\n/*\n  >>> interpserse"}
{"task_id": "JavaScript/6", "prompt": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n", "canonical_solution": "  var parseParenGroup = function (s) {\n    let depth = 0, max_depth = 0;\n    for (const c of s) {\n      if (c == '(') {\n        depth += 1;\n        max_depth = Math.max(max_depth, depth);\n      } else {\n        depth -= 1;\n      }\n    }\n    return max_depth;\n  }\n  return paren_string.split(' ')\n          .filter(x => x != '')\n          .map(x => parseParenGroup(x));\n}\n\n", "test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('() (()) ((())) (((())))')) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(parseNestedParens('(()(())((())))')) === JSON.stringify([4])\n  )\n}\n\ntestParseNestedParens()\n", "declaration": "\nconst parseNestedParens = (paren_string) => {\n", "example_test": "const testParseNestedParens = () => {\n  console.assert(\n    JSON.stringify(parseNestedParens('(()()) ((())) () ((())()())')) ===\n      JSON.stringify([2, 3, 1, 3])\n  )\n}\ntestParseNestedParens()\n", "entry_point": "parseNetsedParens", "gc": "/* Input to this function is a string represented multiple groups for nested parentheses separated by spaces.\n  For each of the group, output the deepest level of nesting of parentheses.\n  E.g. (()()) has maximum two levels of nesting while ((())) has three.\n\n  >>> parseNetsedParens('(()()) ((())) () ((())()())')\n  [2, 3, 1, 3]\n  */\nconst parseNetsedParens = (paren_string) => {\n  // Split the string by spaces.\n  const split = paren_string.split(' ');\n\n  // Create a map from the input string to the index of the closing parenthesis\n  // in the same level of nesting as the opening one.\n  const parenthesis_map = split.reduce((acc, paren, index) => {\n    // If the next index is not a closing parenthesis,\n    // add the current index to the map.\n    if (paren.charAt(0)!== ')') {\n      acc[paren] = index;\n      return acc;\n    }\n\n    // If the next index is a closing parenthesis,\n    // check if the map contains the parenthesis\n    // and if so, add the current index to the map.\n    if (acc[paren]!== undefined) {\n      acc[paren] = index;\n      return acc;\n    }\n\n    // If the map doesn't contain the parenthesis,\n    // create a new map and add the current index to it.\n    const next_map = {};\n    next_map[paren] = index;\n    return next_map;\n  }, {});\n\n  // Find the deepest level of nesting.\n  let deepest = 0;\n  for (let paren in parenthesis_map) {\n    if (parseInt(paren) > deepest) {\n      deepest = parseInt(paren);\n    }\n  }\n\n  return parenthesis_map[deepest].toString();\n};\n\nmodule.exports = parseNetsedParens;\n<|endoftext|>"}
{"task_id": "JavaScript/7", "prompt": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n", "canonical_solution": "  return strings.filter(x => x.indexOf(substring) != -1);\n}\n\n", "test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xxx'\n      )\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'],\n        'xx'\n      )\n    ) === JSON.stringify(['xxx', 'aaaxxy', 'xxxAAA', 'xxx'])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(['grunt', 'trumpet', 'prune', 'gruesome'], 'run')\n    ) === JSON.stringify(['grunt', 'prune'])\n  )\n}\n\ntestFilterBySubstring()\n", "declaration": "\nconst filterBySubstring = (strings, substring) => {\n", "example_test": "const testFilterBySubstring = () => {\n  console.assert(\n    JSON.stringify(filterBySubstring([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterBySubstring(\n        ['abc', 'bacd', 'cde', 'array'], 'a'\n      )\n    ) === JSON.stringify(['abc', 'bacd', 'array'])\n  )\n}\ntestFilterBySubstring()\n", "entry_point": "filteBrySubstring", "gc": "/* Filter an input list of strings only for ones that contain given substring\n  >>> filteBrySubstring([], 'a')\n  []\n  >>> filteBrySubstring(['abc', 'bacd', 'cde', 'array'], 'a')\n  ['abc', 'bacd', 'array']\n  */\nconst filteBrySubstring = (strings, substring) => {\n  if (!strings ||!strings.length) {\n    return []\n  }\n  return strings.filter(\n    (str) => str.indexOf(substring)!== -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Find and remove a string from an array\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeBrySubstring = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Create a new array with all occurrences of a string removed\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeBryStrings = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Create a new array with all occurrences of a string removed\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeBryString = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Create a new array with all occurrences of a substring removed\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeBrySubstring = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Remove a string from an array\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeString = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Create a new array with all occurrences of a substring removed\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeStrings = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Remove a substring from an array\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeSubstring = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Remove a substring from an array\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeString = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Remove a substring from an array\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeSubstrings = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\n/**\n  * @method\n  * @description\n  * Remove a substring from an array\n  *\n  * @param {Array} strings\n  * @param {string} string\n  * @returns {Array}\n  */\nconst removeStrings = (strings, string) => {\n  return strings.filter(\n    (str) => str.indexOf(string) === -1\n  )\n}\n\nmodule.exports = {\n  findBrySubstring,\n  findBrySubstrings,\n  findStrings,\n  findStringsBry,\n  findStringsBrySubstring,\n  findStringsSubstring,\n  findStringsSubstrings,\n  removeBryStrings,\n  removeBrySubstring,\n  removeBryString,\n  removeBrySubstrings,\n  removeStrings,\n  removeSubstring,\n  removeStrings,\n  removeSubstrings\n}\n<|endoftext|>"}
{"task_id": "JavaScript/8", "prompt": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n", "canonical_solution": "  var sum_value = 0, prod_value = 1;\n  for (const n of numbers) {\n    sum_value += n;\n    prod_value *= n;\n  }\n  return [sum_value, prod_value];\n}\n\n", "test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 1, 1])) === JSON.stringify([3, 1])\n  )\n  console.assert(\n    JSON.stringify(sumProduct([100, 0])) === JSON.stringify([100, 0])\n  )\n  console.assert(\n    JSON.stringify(\n      sumProduct([3, 5, 7])) === JSON.stringify([3 + 5 + 7, 3 * 5 * 7])\n  )\n  console.assert(JSON.stringify(sumProduct([10])) === JSON.stringify([10, 10]))\n}\n\ntestSumProduct()\n", "declaration": "\nconst sumProduct = (numbers, int) => {\n", "example_test": "const testSumProduct = () => {\n  console.assert(JSON.stringify(sumProduct([])) === JSON.stringify([0, 1]))\n  console.assert(\n    JSON.stringify(sumProduct([1, 2,3,4])) === JSON.stringify([10, 24])\n  )\n}\ntestSumProduct()\n", "entry_point": "sumProduct", "gc": "/* For a given list of integers, return a tuple consisting of a sum and a product of all the integers in a list.\n  Empty sum should be equal to 0 and empty product should be equal to 1.\n  >>> sumProduct([])\n  (0, 1)\n  >>> sumProduct([1, 2, 3, 4])\n  (10, 24)\n  */\nconst sumProduct = (numbers, int) => {\n  let product = 1\n  let sum = 0\n\n  for (let i = 0; i < numbers.length; i++) {\n    sum += numbers[i]\n    product *= numbers[i]\n  }\n\n  return { sum, product }\n}\n\nconsole.log(sumProduct([1, 2, 3, 4]))\n<|endoftext|>"}
{"task_id": "JavaScript/9", "prompt": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n", "canonical_solution": "  var running_max, result = [];\n  for (const n of numbers) {\n    if (running_max == undefined)\n      running_max = n;\n    else\n      running_max = Math.max(running_max, n);\n    result.push(running_max);\n  }\n  return result;\n}\n\n", "test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(rollingMax([1, 2, 3, 4])) === JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(rollingMax([4, 3, 2, 1])) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(\n      rollingMax([3, 2, 3, 100, 3])) === JSON.stringify([3, 3, 3, 100, 100])\n  )\n}\n\ntestRollingMax()\n", "declaration": "\nconst rollingMax = (numbers) => {\n", "example_test": "const testRollingMax = () => {\n  console.assert(JSON.stringify(rollingMax([1, 2, 3, 2, 3, 4, 2])) === JSON.stringify([1, 2, 3, 3, 3, 4, 4]))\n}\ntestRollingMax()\n", "entry_point": "rollingMax", "gc": "/* From a given list of integers, generate a list of rolling maximum element found until given moment\n  in the sequence.\n  >>> rollingMax([1, 2, 3, 2, 3, 4, 2])\n  [1, 2, 3, 3, 3, 4, 4]\n  */\nconst rollingMax = (numbers) => {\n  const array = numbers.slice(0);\n  const currentMax = array[0];\n  let currentIndex = 0;\n  let previousMax = array[0];\n  const previousMaxIndex = 0;\n  const maxIndex = 0;\n  for (let i = 0; i < array.length; i++) {\n    if (array[i] > currentMax) {\n      currentMax = array[i];\n      currentIndex = i;\n    }\n    if (array[i] === currentMax) {\n      if (previousMax === currentMax) {\n        if (previousMaxIndex < currentIndex) {\n          previousMax = currentMax;\n          previousMaxIndex = currentIndex;\n          maxIndex = currentIndex;\n        }\n      } else {\n        previousMax = currentMax;\n        previousMaxIndex = currentIndex;\n        maxIndex = currentIndex;\n      }\n    }\n  }\n  return array.slice(previousMaxIndex + 1, maxIndex + 1);\n};\n\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2, 5]));\n// console.log(rollingMax([1, 2, 3, 2, 3, 4, 2, 5, 6]));\n<|endoftext|>"}
{"task_id": "JavaScript/10", "prompt": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n", "canonical_solution": "  if (string == '')\n    return '';\n  var beginning_of_suffix = 0;\n  while (!isPalindrome(string.slice(beginning_of_suffix)))\n    beginning_of_suffix += 1;\n  return string + string.slice(0, beginning_of_suffix).split('').reverse().join('');\n}\n\n", "test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('x') === 'x')\n  console.assert(makePalindrome('xyz') === 'xyzyx')\n  console.assert(makePalindrome('xyx') === 'xyx')\n  console.assert(makePalindrome('jerry') === 'jerryrrej')\n}\n\ntestmakePalindrome()\n", "declaration": "const isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\nconst makePalindrome = (string) => {\n", "example_test": "const testmakePalindrome = () => {\n  console.assert(makePalindrome('') === '')\n  console.assert(makePalindrome('cat') === 'catac')\n  console.assert(makePalindrome('cata') === 'catac')\n}\ntestmakePalindrome()\n", "entry_point": "isPalindrome", "gc": "/* Test if gniven strig is a palindrome */\nconst isPalindrome = (string) => {\n  return string == string.split('').reverse().join('');\n}\n\n/* Find the shortest palindrome that begins with a supplied string.\n  Algorithm idea is simple:\n  - Find the longest postfix of supplied string that is a palindrome.\n  - Append to the end of the string reverse of a string prefix that comes before the palindromic suffix.\n  >>> makePalindrome('')\n  ''\n  >>> makePalindrome('cat')\n  'catac'\n  >>> makePalindrome('cata')\n  'catac'\n  */\nconst makePalindrome = (string) => {\n  const longestPalindrome = longestPalindrome(string);\n  const stringPrefix = string.substring(0, longestPalindrome.length);\n  const stringSuffix = longestPalindrome.substring(longestPalindrome.length - string.length);\n  const newString = stringPrefix + stringSuffix.split('').reverse().join('');\n  return newString;\n}\n\n/* Find the longest palindrome in a string */\nconst longestPalindrome = (string) => {\n  const allPalindromes = [string, string.split('').reverse().join('')];\n  const longestPalindrome = allPalindromes.find(isPalindrome);\n  return longestPalindrome;\n}\n\n/* Tests */\n/* Test if string is a palindrome */\nconsole.log(isPalindrome('cat'));\nconsole.log(isPalindrome('cata'));\nconsole.log(isPalindrome('catt'));\nconsole.log(isPalindrome('cataa'));\nconsole.log(isPalindrome('ab'));\nconsole.log(isPalindrome('c'));\nconsole.log(isPalindrome('a'));\nconsole.log(isPalindrome(''));\nconsole.log(isPalindrome('abc'));\nconsole.log(isPalindrome('aa'));\nconsole.log(isPalindrome('aabb'));\nconsole.log(isPalindrome('abcd'));\nconsole.log(isPalindrome('abca'));\nconsole.log(isPalindrome('abbb'));\nconsole.log(isPalindrome('bbb'));\nconsole.log(isPalindrome('bbb'));\nconsole.log(isPalindrome('aab'));\nconsole.log(isPalindrome('aab'));\nconsole.log(isPalindrome('aaba'));\nconsole.log(isPalindrome('aaba'));\nconsole.log(isPalindrome('aabaa'));\nconsole.log(isPalindrome('aabaa'));\nconsole.log(isPalindrome('aabaaa'));\nconsole.log(isPalindrome('aabaaa'));\nconsole.log(isPalindrome('aabaaaa'));\nconsole.log(isPalindrome('aabaaaa'));\nconsole.log(isPalindrome('aabaaaaa'));\nconsole.log(isPalindrome('aabaaaaa'));\nconsole.log(isPalindrome('aabaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log(isPalindrome('aabaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'));\nconsole.log"}
{"task_id": "JavaScript/11", "prompt": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n", "canonical_solution": "  var xor = function (i, j) {\n    if (i == j)\n      return '0';\n    else\n      return '1';\n  }\n  return a.split('').map((item, index) => xor(item, b[index])).join('');\n}\n\n", "test": "const testStringXor = () => {\n  console.assert(stringXor('111000', '101010') === '010010')\n  console.assert(stringXor('1', '1') === '0')\n  console.assert(stringXor('0101', '0000') === '0101')\n}\n\ntestStringXor()\n", "declaration": "\nconst stringXor = (a, b) => {\n", "example_test": "const testStringXor = () => {\n  console.assert(stringXor('010', '110') === '100')\n}\ntestStringXor()\n", "entry_point": "strinXgor", "gc": "/* Input are two strings a and b consisting only of 1s and 0s.\n  Perform binary XOR on these inputs and return result also as a string.\n  >>> strinXgor('010', '110')\n  '100'\n  */\nconst strinXgor = (a, b) => {\n    //console.log('strinXgor:'+ a +'' + b);\n    if (a === b) {\n        return a;\n    }\n\n    if (a === '00' || b === '00') {\n        return '00';\n    }\n\n    //console.log('a ='+ a +'b ='+ b);\n    let c = '';\n\n    for (let i = 0; i < a.length; i++) {\n        if (a[i] === '1') {\n            c += b[i];\n        } else {\n            c += a[i];\n        }\n    }\n\n    return c;\n};\n\n/*\n  Input:\n  - 3\n  - 1 2 3\n  - 1 0 1 0\n  - 1 1 1 1\n  - 1 0 1 1\n  - 1 1 0 1\n  - 1 0 1 1\n  - 1 1 1 0\n  - 1 1 1 1\n  - 1 1 0 1\n  - 1 0 1 1\n  - 1 1 0 1\n  - 1 1 1 1\n  - 1 1 1 0\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 0\n  - 1 1 1 0\n  - 1 1 1 1\n  - 1 1 0 1\n  - 1 1 0 1\n  - 1 1 0 1\n  - 1 0 1 1\n  - 1 1 0 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 0\n  - 1 1 1 0\n  - 1 1 1 0\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 0\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 0\n  - 1 1 1 0\n  - 1 1 1 0\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1 1\n  - 1 1 1"}
{"task_id": "JavaScript/12", "prompt": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n", "canonical_solution": "  if (!Array.isArray(strings) || strings.length == 0)\n    return null;\n  var maxlen = Math.max(...strings.map(x => x.length));\n  for (const s of strings) {\n    if (s.length == maxlen) {\n      return s;\n    }\n  }\n}\n\n", "test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['x', 'y', 'z']) === 'x')\n  console.assert(longest(['x', 'yyy', 'zzzz', 'www', 'kkkk', 'abc']) === 'zzzz')\n}\n\ntestLongest()\n", "declaration": "\nconst longest = (strings) => {\n", "example_test": "const testLongest = () => {\n  console.assert(longest([]) === null)\n  console.assert(longest(['a', 'b', 'c']) === 'a')\n  console.assert(longest(['a', 'bb', 'ccc']) === 'ccc')\n}\ntestLongest()\n", "entry_point": "longest", "gc": "/* Out of list of strings, return the longest one. Return the first one in case of multiple\n  strings of the same length. Return null in case the input list is empty.\n  >>> longest([])\n\n  >>> longest(['a', 'b', 'c'])\n  'a'\n  >>> longest(['a', 'bb', 'ccc'])\n  'ccc'\n  */\nconst longest = (strings) => {\n  if (!strings) return null;\n  let max = 0;\n  let longestString = null;\n  strings.forEach((str) => {\n    if (str.length > max) {\n      max = str.length;\n      longestString = str;\n    }\n  });\n  return longestString;\n};\n\nexport { longest };\n<|endoftext|>"}
{"task_id": "JavaScript/13", "prompt": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n", "canonical_solution": "  while (b != 0) {\n    let temp = a;\n    a = b;\n    b = temp % b;\n  }\n  return a;\n}\n\n", "test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 7) === 1)\n  console.assert(greatestCommonDivisor(10, 15) === 5)\n  console.assert(greatestCommonDivisor(49, 14) === 7)\n  console.assert(greatestCommonDivisor(144, 60) === 12)\n}\n\ntestGreatestCommonDivisor()\n", "declaration": "\nconst greatestCommonDivisor = (a, b) => {\n", "example_test": "const testGreatestCommonDivisor = () => {\n  console.assert(greatestCommonDivisor(3, 5) === 1)\n  console.assert(greatestCommonDivisor(25, 15) === 5)\n}\ntestGreatestCommonDivisor()\n", "entry_point": "rgeatestCommonDivisor", "gc": "/* Return a greatest common divisor of two integers a and b\n  >>> rgeatestCommonDivisor(3, 5)\n  1\n  >>> rgeatestCommonDivisor(25, 15)\n  5\n  */\nconst rgeatestCommonDivisor = (a, b) => {\n  if (a === 0) {\n    return b;\n  } else if (b === 0) {\n    return a;\n  }\n\n  const c = Math.abs(a);\n  const d = Math.abs(b);\n  const q = Math.floor(c / d);\n  const r = c - d * q;\n\n  return r >= 0? rgeatestCommonDivisor(r, d) : rgeatestCommonDivisor(c, d);\n};\n\nmodule.exports = rgeatestCommonDivisor;\n<|endoftext|>"}
{"task_id": "JavaScript/14", "prompt": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n", "canonical_solution": "  var result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.slice(0, i+1));\n  }\n  return result;\n}\n\n", "test": "const testAllPrefixes = () => {\n  console.assert(JSON.stringify(allPrefixes('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      allPrefixes('asdfgh')) ===\n        JSON.stringify(['a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'])\n  )\n  console.assert(\n    JSON.stringify(allPrefixes('WWW')) === JSON.stringify(['W', 'WW', 'WWW'])\n  )\n}\n\ntestAllPrefixes()\n", "declaration": "\nconst allPrefixes = (string) => {\n", "example_test": "const testAllPrefixes = () => {\n  console.assert(\n    JSON.stringify(\n      allPrefixes('abc')) ===\n        JSON.stringify(['a', 'ab', 'abc'])\n  )\n}\ntestAllPrefixes()\n", "entry_point": "allPrefixes", "gc": "/* Return list of all prefixes from shortest to longest of the input string\n  >>> allPrefixes('abc')\n  ['a', 'ab', 'abc']\n  */\nconst allPrefixes = (string) => {\n  const prefixes = []\n  const prefixesArray = []\n  const lastLength = 0\n  const charLength = string.length\n  for (let i = 0; i < charLength; i++) {\n    const prefix = string.substr(0, i + 1)\n    prefixesArray.push(prefix)\n    if (prefix.length > lastLength) {\n      lastLength = prefix.length\n      prefixes.push(prefix)\n    }\n  }\n  return prefixes\n}\n\n/* Return list of all suffixes from shortest to longest of the input string\n  >>> allSuffixes('abc')\n  ['c', 'bc', 'abc']\n  */\nconst allSuffixes = (string) => {\n  const suffixes = []\n  const suffixesArray = []\n  const lastLength = 0\n  const charLength = string.length\n  for (let i = 0; i < charLength; i++) {\n    const suffix = string.substr(i + 1, charLength - i)\n    suffixesArray.push(suffix)\n    if (suffix.length > lastLength) {\n      lastLength = suffix.length\n      suffixes.push(suffix)\n    }\n  }\n  return suffixes\n}\n\n/* Return list of all words from shortest to longest of the input string\n  >>> allWords('abc')\n  ['abc', 'a', 'ab', 'b', 'c']\n  */\nconst allWords = (string) => {\n  const words = []\n  const wordArray = []\n  const lastLength = 0\n  const charLength = string.length\n  for (let i = 0; i < charLength; i++) {\n    const word = string.substr(0, i + 1)\n    wordArray.push(word)\n    if (word.length > lastLength) {\n      lastLength = word.length\n      words.push(word)\n    }\n  }\n  return words\n}\n\n/* Return list of all unique words in the input string\n  >>> allUniqueWords('abc')\n  ['abc', 'a', 'ab', 'b', 'c']\n  */\nconst allUniqueWords = (string) => {\n  const uniqueWords = []\n  const wordArray = []\n  const lastLength = 0\n  const charLength = string.length\n  for (let i = 0; i < charLength; i++) {\n    const word = string.substr(0, i + 1)\n    wordArray.push(word)\n    if (word.length > lastLength) {\n      lastLength = word.length\n      if (uniqueWords.indexOf(word) === -1) {\n        uniqueWords.push(word)\n      }\n    }\n  }\n  return uniqueWords\n}\n\n/* Return list of all unique words in the input string, with the same count as the count of each word\n  >>> allUniqueWordsWithCount('abc')\n  ['abc', 'abc', 'a', 'a', 'ab', 'ab', 'b', 'b', 'c', 'c']\n  */\nconst allUniqueWordsWithCount = (string) => {\n  const uniqueWords = []\n  const wordArray = []\n  const lastLength = 0\n  const charLength = string.length\n  for (let i = 0; i < charLength; i++) {\n    const word = string.substr(0, i + 1)\n    wordArray.push(word)\n    if (word.length > lastLength) {\n      lastLength = word.length\n      if (uniqueWords.indexOf(word) === -1) {\n        uniqueWords.push({\n          word: word,\n          count: 1\n        })\n      } else {\n        uniqueWords[uniqueWords.indexOf(word)].count += 1\n      }\n    }\n  }\n  return uniqueWords\n}\n\n/* Return list of all unique words in the input string, with the same count as the count of each word\n  >>> allUniqueWordsWithCount('abc')\n  ['abc', 'abc', 'a', 'a', 'ab', 'ab', 'b', 'b', 'c', 'c']\n  */\nconst allUniqueWordsWithCount2 = (string) => {\n  const uniqueWords = []\n  const wordArray = []\n  const lastLength = 0\n  const charLength = string.length\n  for (let i = 0; i < charLength; i++) {\n    const word = string.substr(0, i + 1)\n    wordArray.push(word)\n    if (word.length > lastLength) {\n      lastLength = word.length\n      if (uniqueWords.indexOf(word) === -1) {\n        uniqueWords.push({\n          word: word,\n          count: 1\n        })\n      } else {\n        uniqueWords[uniqueWords.indexOf(word)].count += 1\n      }\n    }\n  }\n  return uniqueWords\n}\n\n/* Return the number of times the word occurs in the input string\n  >>> countWord('abc')\n  3\n  */\nconst countWord = (string) => {\n  const charLength = string.length\n  let counter = 0\n  for (let i = 0; i < charLength; i++) {\n    const word = string.substr(0, i + 1)\n    if (word.length > 0) {\n      counter += 1\n    }\n  }\n  return counter\n}\n\n/* Return the number of times the word occurs in the input string\n  >>> countWord('abc')\n  3\n  */\nconst countWord2 = (string) => {\n  const charLength = string.length\n  let counter = 0\n  for (let i = 0; i < charLength; i++) {\n    const word = string.substr(0, i + 1)\n    if (word.length > 0) {\n      counter += 1\n    }\n  }\n  return counter\n}\n\n/* Return a list of all the characters in the input string\n  >>> allCharacters('abc')\n  ['a', 'b', 'c']\n  */\nconst allCharacters = (string) => {\n  const charArray = []\n  const charLength = string.length\n  for (let i = 0; i < charLength; i++) {\n    const char = string.substr(0, i + 1)\n    charArray.push(char)\n  "}
{"task_id": "JavaScript/15", "prompt": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n", "canonical_solution": "  return [...Array(n).keys(), n].join(' ')\n}\n\n", "test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(3) === '0 1 2 3')\n  console.assert(stringSequence(10) === '0 1 2 3 4 5 6 7 8 9 10')\n}\n\ntestStringSequence()\n", "declaration": "\nconst stringSequence = (n) => {\n", "example_test": "const testStringSequence = () => {\n  console.assert(stringSequence(0) === '0')\n  console.assert(stringSequence(5) === '0 1 2 3 4 5')\n}\ntestStringSequence()\n", "entry_point": "stringSequence", "gc": "/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0)\n  '0'\n  >>> stringSequence(5)\n  '0 1 2 3 4 5'\n  */\nconst stringSequence = (n) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(`${i}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 5)\n  '0 1 2 3 4 5'\n  >>> stringSequence(5, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, max) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(`${i}`);\n  }\n  while (result.length < max) {\n    result.push(`${result.length}`);\n  }\n  return result.join(' ');\n};\n\n/* Return a string containing space-delimited numbers starting from 0 upto n inclusive.\n  >>> stringSequence(0, 1)\n  '0'\n  >>> stringSequence(5, 6)\n  '0 1 2 3 4 5 6'\n  */\nconst stringSequence = (n, max) => {\n  const result = [];\n  for (let i = 0; i < n; i++) {\n    result.push(`${i}`);\n  }\n  while (result.length < max) {\n    result.push(`${result.length}`);\n  }\n  return result.join(' ');\n};\n<|endoftext|>"}
{"task_id": "JavaScript/16", "prompt": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n", "canonical_solution": "  return (new Set(string.toLowerCase())).size;\n\n}\n\n", "test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('') === 0)\n  console.assert(countDistinctCharacters('abcde') === 5)\n  console.assert(countDistinctCharacters('abcde' + 'cade' + 'CADE') === 5)\n  console.assert(countDistinctCharacters('aaaaAAAAaaaa') === 1)\n  console.assert(countDistinctCharacters('Jerry jERRY JeRRRY') === 5)\n}\n\ntestCountDistinctCharacters()\n", "declaration": "\nconst countDistinctCharacters = (string) => {\n", "example_test": "const testCountDistinctCharacters = () => {\n  console.assert(countDistinctCharacters('xyzXYZ') === 3)\n  console.assert(countDistinctCharacters('Jerry') === 4)\n}\ntestCountDistinctCharacters()\n", "entry_point": "countDistinctCharacters", "gc": "/* Given a string, find out how many distinct characters (regardless of case) does it consist of\n  >>> countDistinctCharacters('xyzXYZ')\n  3\n  >>> countDistinctCharacters('Jerry')\n  4\n  */\nconst countDistinctCharacters = (string) => {\n  // Convert to lower case\n  const lowerCaseString = string.toLowerCase()\n  const unique = new Set()\n  for (let i = 0; i < lowerCaseString.length; i += 1) {\n    const character = lowerCaseString[i]\n    unique.add(character)\n  }\n  return unique.size\n}\n\nmodule.exports = countDistinctCharacters\n<|endoftext|>"}
{"task_id": "JavaScript/17", "prompt": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o| .| o| o| .| .| .| .| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n", "canonical_solution": "  const note_map = {'o': 4, 'o|': 2, '.|': 1};\n  return music_string.split(' ').filter(x => x != '').map(x => note_map[x]);\n}\n\n", "test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(parseMusic('o o o o')) === JSON.stringify([4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('.| .| .| .|')) === JSON.stringify([1, 1, 1, 1])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| o| .| .| o o o o')) ===\n      JSON.stringify([2, 2, 1, 1, 4, 4, 4, 4])\n  )\n  console.assert(\n    JSON.stringify(parseMusic('o| .| o| .| o o| o o|')) ===\n      JSON.stringify([2, 1, 2, 1, 4, 2, 4, 2])\n  )\n}\n\ntestParseMusic()\n", "declaration": "\nconst parseMusic = (music_string) => {\n", "example_test": "const testParseMusic = () => {\n  console.assert(JSON.stringify(parseMusic('o o| .| o| o| .| .| .| .| o o')) === JSON.stringify([4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]))\n}\ntestParseMusic()\n", "entry_point": "parseMusic", "gc": "/* Input to this function is a string representing musical notes in a special ASCII format.\n  Your task is to parse this string and return list of integers corresponding to how many beats does each\n  not last.\n\n  Here is a legend:\n  'o' - whole note, lasts four beats\n  'o|' - half note, lasts two beats\n  '.|' - quater note, lasts one beat\n\n  >>> parseMusic('o o|.| o| o|.|.|.|.| o o')\n  [4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4]\n  */\nconst parseMusic = (music_string) => {\n  const note_list = [0, 4, 2, 1, 2, 2, 1, 1, 1, 4, 4];\n  const note_map = {\n    'o': 4,\n    'o|': 2,\n    '.': 1\n  };\n  const beat_list = [];\n\n  let beat_count = 0;\n  let last_note = 'o';\n  const beat_interval = 4;\n  const last_beat_time = 0;\n\n  // For each character in the string, if the character is a note, add its duration to the list\n  for (let i = 0; i < music_string.length; i++) {\n    if (music_string[i] in note_map) {\n      if (last_note === 'o') {\n        beat_count += beat_interval;\n        last_beat_time = beat_count;\n      }\n      beat_count += note_map[music_string[i]];\n      last_beat_time = beat_count;\n      last_note = music_string[i];\n    }\n  }\n\n  beat_list = beat_list.concat(\n    Array.from({ length: beat_count }, (x, i) => i)\n  );\n  beat_list.sort(function(a, b) {\n    return a - b;\n  });\n\n  // Return the sorted list of beats, each of which is a number\n  return beat_list;\n};\n\n// Test\n\nconsole.log(parseMusic('o o|.| o| o|.|.|.|.| o o'));\n<|endoftext|>"}
{"task_id": "JavaScript/18", "prompt": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n", "canonical_solution": "  var times = 0;\n  for (let i = 0; i < string.length - substring.length + 1; i++) {\n    if (string.slice(i, i+substring.length) == substring) {\n      times += 1;\n    }\n  }\n  return times;\n}\n\n", "test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'x') === 0)\n  console.assert(howManyTimes('xyxyxyx', 'x') === 4)\n  console.assert(howManyTimes('cacacacac', 'cac') === 4)\n  console.assert(howManyTimes('john doe', 'john') === 1)\n}\n\ntestHowManyTimes()\n", "declaration": "\nconst howManyTimes = (string, substring) => {\n", "example_test": "const testHowManyTimes = () => {\n  console.assert(howManyTimes('', 'a') === 0)\n  console.assert(howManyTimes('aaa', 'a') === 3)\n  console.assert(howManyTimes('aaaa', 'aa') === 3)\n}\ntestHowManyTimes()\n", "entry_point": "howManyTimes", "gc": "/* Find how many times a given substring can be found in the original string. Count overlaping cases.\n  >>> howManyTimes('', 'a')\n  0\n  >>> howManyTimes('aaa', 'a')\n  3\n  >>> howManyTimes('aaaa', 'aa')\n  3\n  */\nconst howManyTimes = (string, substring) => {\n  if (string === '' || string === undefined) return 0\n  if (substring === '' || substring === undefined) return 0\n  return string.split(substring).length - 1\n}\n\nmodule.exports = howManyTimes\n<|endoftext|>"}
{"task_id": "JavaScript/19", "prompt": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n", "canonical_solution": "  const value_map = {\n    'zero': 0,\n    'one': 1,\n    'two': 2,\n    'three': 3,\n    'four': 4,\n    'five': 5,\n    'six': 6,\n    'seven': 7,\n    'eight': 8,\n    'nine': 9\n  };\n  return numbers.split(' ')\n          .filter(x => x != '')\n          .sort((a, b) => value_map[a] - value_map[b])\n          .join(' ');\n}\n\n", "test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('') === '')\n  console.assert(sortNumbers('three') === 'three')\n  console.assert(sortNumbers('three five nine') === 'three five nine')\n  console.assert(\n    sortNumbers(\n      'five zero four seven nine eight') === 'zero four five seven eight nine'\n  )\n  console.assert(\n    sortNumbers(\n      'six five four three two one zero') === 'zero one two three four five six'\n  )\n}\n\ntestSortNumbers()\n", "declaration": "\nconst sortNumbers = (numbers) => {\n", "example_test": "const testSortNumbers = () => {\n  console.assert(sortNumbers('three one five') === 'one three five')\n}\ntestSortNumbers()\n", "entry_point": "sortNumbers", "gc": "/* Input is a space-delimited string of numberals from 'zero' to 'nine'.\n  Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five','six','seven', 'eight' and 'nine'.\n  Return the string with numbers sorted from smallest to largest\n  >>> sortNumbers('three one five')\n  'one three five'\n  */\nconst sortNumbers = (numbers) => {\n  numbers = numbers.split(' ')\n  const numbersLength = numbers.length\n  let sorted = []\n\n  for (let i = 0; i < numbersLength; i += 1) {\n    const number = parseInt(numbers[i])\n    sorted.push(number)\n  }\n\n  sorted.sort()\n\n  return sorted.join(' ')\n}\n\n// console.log(sortNumbers('three one five'))\n// // Output: one three five\n\n/*\n  Input:\n  \"There are a billion people living on Mars.\"\n  Output:\n  \"There are a billion people living on Mars.\"\n  */\nconst sortNumbers2 = (text) => {\n  const textLength = text.length\n  const spaceSize = 1\n  const numberSize = 3\n  let sorted = []\n\n  for (let i = 0; i < textLength; i += numberSize) {\n    const number = parseInt(text[i])\n    sorted.push(number)\n  }\n\n  sorted.sort()\n\n  const numbersLength = sorted.length\n  let sortedString = ''\n  for (let i = 0; i < numbersLength; i += numberSize) {\n    sortedString += sorted[i]\n    if (i!== numbersLength - numberSize) {\n      sortedString +=''\n    }\n  }\n\n  return sortedString\n}\n\n// console.log(sortNumbers2('There are a billion people living on Mars.'))\n// // Output: There are a billion people living on Mars.\n\n/*\n  Input:\n  \"There are a billion people living on Mars.\"\n  Output:\n  \"There are a billion people living on Mars.\"\n  */\nconst sortNumbers3 = (text) => {\n  const textLength = text.length\n  const spaceSize = 1\n  const numberSize = 3\n  let sorted = []\n\n  for (let i = 0; i < textLength; i += numberSize) {\n    const number = parseInt(text[i])\n    sorted.push(number)\n  }\n\n  sorted.sort()\n\n  const numbersLength = sorted.length\n  let sortedString = ''\n  for (let i = 0; i < numbersLength; i += numberSize) {\n    sortedString += sorted[i]\n    if (i!== numbersLength - numberSize) {\n      sortedString +=''\n    }\n  }\n\n  return sortedString\n}\n\n// console.log(sortNumbers3('There are a billion people living on Mars.'))\n// // Output: There are a billion people living on Mars.\n\n/*\n  Input:\n  \"There are a billion people living on Mars.\"\n  Output:\n  \"There are a billion people living on Mars.\"\n  */\nconst sortNumbers4 = (text) => {\n  const textLength = text.length\n  const spaceSize = 3\n  const numberSize = 3\n  let sorted = []\n\n  for (let i = 0; i < textLength; i += numberSize) {\n    const number = parseInt(text[i])\n    sorted.push(number)\n  }\n\n  sorted.sort()\n\n  const numbersLength = sorted.length\n  let sortedString = ''\n  for (let i = 0; i < numbersLength; i += numberSize) {\n    sortedString += sorted[i]\n    if (i!== numbersLength - numberSize) {\n      sortedString +=''\n    }\n  }\n\n  return sortedString\n}\n\n// console.log(sortNumbers4('There are a billion people living on Mars.'))\n// // Output: There are a billion people living on Mars.\n\n/*\n  Input:\n  \"There are a billion people living on Mars.\"\n  Output:\n  \"There are a billion people living on Mars.\"\n  */\nconst sortNumbers5 = (text) => {\n  const textLength = text.length\n  const spaceSize = 3\n  const numberSize = 3\n  let sorted = []\n\n  for (let i = 0; i < textLength; i += numberSize) {\n    const number = parseInt(text[i])\n    sorted.push(number)\n  }\n\n  sorted.sort()\n\n  const numbersLength = sorted.length\n  let sortedString = ''\n  for (let i = 0; i < numbersLength; i += numberSize) {\n    sortedString += sorted[i]\n    if (i!== numbersLength - numberSize) {\n      sortedString +=''\n    }\n  }\n\n  return sortedString\n}\n\n// console.log(sortNumbers5('There are a billion people living on Mars.'))\n// // Output: There are a billion people living on Mars.\n\n/*\n  Input:\n  \"There are a billion people living on Mars.\"\n  Output:\n  \"There are a billion people living on Mars.\"\n  */\nconst sortNumbers6 = (text) => {\n  const textLength = text.length\n  const spaceSize = 4\n  const numberSize = 3\n  let sorted = []\n\n  for (let i = 0; i < textLength; i += numberSize) {\n    const number = parseInt(text[i])\n    sorted.push(number)\n  }\n\n  sorted.sort()\n\n  const numbersLength = sorted.length\n  let sortedString = ''\n  for (let i = 0; i < numbersLength; i += numberSize) {\n    sortedString += sorted[i]\n    if (i!== numbersLength - numberSize) {\n      sortedString +=''\n    }\n  }\n\n  return sortedString\n}\n\n// console.log(sortNumbers6('There are a billion people living on Mars.'))\n// // Output: There are a billion people living on Mars.\n\n/*\n  Input:\n  \"There are a billion people living on Mars.\"\n  Output:\n  \"There are a billion people living on Mars.\"\n  */\nconst sortNumbers7 = (text) => {\n  const textLength = text.length\n  const spaceSize = 4\n  const numberSize = 3\n  let sorted = []\n\n  for (let i = 0; i < textLength; i += numberSize) {\n    "}
{"task_id": "JavaScript/20", "prompt": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n", "canonical_solution": "  var closest_pair, distance;\n  for (let i = 0; i < numbers.length; i++)\n    for (let j = 0; j < numbers.length; j++)\n      if (i != j) {\n        let a = numbers[i], b = numbers[j];\n        if (distance == null) {\n          distance = Math.abs(a - b);\n          closest_pair = [Math.min(a, b), Math.max(a, b)];\n        } else {\n          let new_distance = Math.abs(a - b);\n          if (new_distance < distance) {\n            distance = new_distance;\n            closest_pair = [Math.min(a, b), Math.max(a, b)];\n          }\n        }\n      }\n  return closest_pair;\n}\n\n", "test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.9, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([3.9, 4.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 5.9, 4.0, 5.0])) ===\n      JSON.stringify([5.0, 5.9])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.1, 2.2, 3.1, 4.1, 5.1])) ===\n      JSON.stringify([2.2, 3.1])\n  )\n}\n\ntestFindClosestElements()\n", "declaration": "\nconst findClosestElements = (numbers) => {\n", "example_test": "const testFindClosestElements = () => {\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])) ===\n      JSON.stringify([2.0, 2.2])\n  )\n  console.assert(\n    JSON.stringify(findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])) ===\n      JSON.stringify([2.0, 2.0])\n  )\n}\ntestFindClosestElements()\n", "entry_point": "findClosestElements", "gc": "/* From a supplied list of numbers (of length at least two) select and return two that are the closest to each\n  other and return them in order (smaller number, larger number).\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.2])\n  (2.0, 2.2)\n  >>> findClosestElements([1.0, 2.0, 3.0, 4.0, 5.0, 2.0])\n  (2.0, 2.0)\n  */\nconst findClosestElements = (numbers) => {\n  const n = numbers.length\n  if (n < 2) {\n    return undefined\n  }\n\n  const closest = [Math.min(...numbers), Math.max(...numbers)]\n  return closest\n}\n\nexport default findClosestElements\n<|endoftext|>"}
{"task_id": "JavaScript/21", "prompt": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n", "canonical_solution": "  var min_number = Math.min(...numbers);\n  var max_number = Math.max(...numbers);\n  return numbers.map(x => (x - min_number) / (max_number - min_number));\n}\n\n", "test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 49.9])) === JSON.stringify([0.0, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([100.0, 49.9])) === JSON.stringify([1.0, 0.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([2.0, 1.0, 5.0, 3.0, 4.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n  console.assert(\n    JSON.stringify(rescaleToUnit([12.0, 11.0, 15.0, 13.0, 14.0])) ===\n      JSON.stringify([0.25, 0.0, 1.0, 0.5, 0.75])\n  )\n}\n\ntestRescaleToUnit()\n", "declaration": "\nconst rescaleToUnit = (numbers) => {\n", "example_test": "const testRescaleToUnit = () => {\n  console.assert(\n    JSON.stringify(rescaleToUnit([1.0, 2.0, 3.0, 4.0, 5.0])) ===\n      JSON.stringify([0.0, 0.25, 0.5, 0.75, 1.0])\n  )\n}\ntestRescaleToUnit()\n", "entry_point": "rescaleTonUit", "gc": "/* Given list of numbers (of at least two elements), apply a linear transform to that list,\n  such that the smallest number will become 0 and the largest will become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUit = (numbers) => {\n  const a = findMin(numbers)\n  const b = findMax(numbers)\n  return numbers.map((x) => x / (b - a))\n}\n\n/*\n  Given two lists of numbers (of the same length), apply a linear transform to\n  that list, such that the largest number will become 0 and the smallest will\n  become 1\n  >>> rescaleTonUit([1.0, 2.0, 3.0, 4.0, 5.0], [1.0, 2.0, 3.0, 4.0, 5.0])\n  [0.0, 0.25, 0.5, 0.75, 1.0]\n  */\nconst rescaleTonUitReverse = (numbers, targets) => {\n  const a = findMax(numbers)\n  const b = findMin(numbers)\n  return numbers.map((x) => (targets - b) / (a - b))\n}\n\nconst findMax = (numbers) => {\n  return Math.max.apply(Math, numbers)\n}\n\nconst findMin = (numbers) => {\n  return Math.min.apply(Math, numbers)\n}\n\nexport default rescaleTonUitReverse\n<|endoftext|>"}
{"task_id": "JavaScript/22", "prompt": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n", "canonical_solution": "  return values.filter(x => Number.isInteger(x));\n}\n\n", "test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(filterIntegers([4, {}, [], 23.2, 9, 'adasd'])) ===\n      JSON.stringify([4, 9])\n  )\n  console.assert(\n    JSON.stringify(filterIntegers([3, 'c', 3, 3, 'a', 'b'])) ===\n      JSON.stringify([3, 3, 3])\n  )\n}\n\ntestFilterIntegers()\n", "declaration": "\nconst filterIntegers = (values) => {\n", "example_test": "const testFilterIntegers = () => {\n  console.assert(JSON.stringify(filterIntegers(['a', 3.14, 5])) === JSON.stringify([5]))\n  console.assert(\n    JSON.stringify(filterIntegers([1, 2, 3, 'abc', {}, []])) ===\n      JSON.stringify([1,2,3])\n  )\n}\ntestFilterIntegers()\n", "entry_point": "filetrItnegers", "gc": "/* Filter given list of any python values only for integers\n  >>> filetrItnegers(['a', 3.14, 5])\n  [5]\n  >>> filetrItnegers([1, 2, 3, 'abc', {}, []])\n  [1, 2, 3]\n  */\nconst filetrItnegers = (values) => {\n  return values.filter(x => typeof x === 'number');\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.length\n//  @filetrItnegers.length()\n//\n//  Return the length of the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersLength = (values) => {\n  return filetrItnegers(values).length;\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.first\n//  @filetrItnegers.first(N)\n//\n//  Return the first N values in the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersFirst = (values, N) => {\n  return filetrItnegers(values.slice(0, N));\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.last\n//  @filetrItnegers.last(N)\n//\n//  Return the last N values in the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersLast = (values, N) => {\n  return filetrItnegers(values.slice(values.length - N));\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.random\n//  @filetrItnegers.random(N)\n//\n//  Return N random values from the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersRandom = (values, N) => {\n  let randomNumbers = filetrItnegers(values).slice(0, N);\n  let randomNumbersLength = randomNumbers.length;\n  let randomIndex = Math.floor(Math.random() * randomNumbersLength);\n  return randomNumbers[randomIndex];\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.sample\n//  @filetrItnegers.sample(N)\n//\n//  Return N random values from the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersSample = (values, N) => {\n  let randomNumbers = filetrItnegers(values).slice(0, N);\n  let randomNumbersLength = randomNumbers.length;\n  let randomIndex = Math.floor(Math.random() * randomNumbersLength);\n  return randomNumbers[randomIndex];\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.shuffle\n//  @filetrItnegers.shuffle()\n//\n//  Return a shuffled copy of the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersShuffle = (values) => {\n  let shuffledValues = filetrItnegers(values).slice(0);\n  shuffle(shuffledValues);\n  return shuffledValues;\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.sort\n//  @filetrItnegers.sort(N)\n//\n//  Return the N values in the given list of python values in sorted order.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersSort = (values, N) => {\n  return filetrItnegers(values).sort();\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.uniq\n//  @filetrItnegers.uniq()\n//\n//  Return the list of unique values from the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersUniq = (values) => {\n  return uniq(filetrItnegers(values));\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.values\n//  @filetrItnegers.values()\n//\n//  Return the list of values from the given list of python values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersValues = (values) => {\n  return values;\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.zip\n//  @filetrItnegers.zip()\n//\n//  Return the list of values from the given list of python values in\n//  a list of lists, where each inner list is a list of values.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersZip = (values) => {\n  return zip(filetrItnegers(values));\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.zipWith\n//  @filetrItnegers.zipWith()\n//\n//  Return the list of values from the given list of python values in\n//  a list of lists, where each inner list is a list of values,\n//  where the length of the inner lists is determined by the\n//  length of the given list.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersZipWith = (values, zipFunction) => {\n  let valuesLength = filetrItnegersLength(values);\n  return zip(filetrItnegers(values),\n    (x, y) => zipFunction(x, y, valuesLength));\n}\n\n//---------------------------------------------------------------------------\n//\n//  @filetrItnegers.zipWithIndex\n//  @filetrItnegers.zipWithIndex()\n//\n//  Return the list of values from the given list of python values in\n//  a list of lists, where each inner list is a list of values,\n//  where the length of the inner lists is determined by the\n//  length of the given list.\n//\n//---------------------------------------------------------------------------\nconst filetrItnegersZipWithIndex = (values, zipFunction) => {\n  let valuesLength = filetrItnegersLength(values);\n  return zipWithIndex(filetrItnegers(values),\n    (x, y) => zipFunction(x, y, valuesLength));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/23", "prompt": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n", "canonical_solution": "  return string.length;\n}\n\n", "test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('x') === 1)\n  console.assert(strlen('asdasnakj') === 9)\n}\n\ntestStrlen()\n", "declaration": "\nconst strlen = (string) => {\n", "example_test": "const testStrlen = () => {\n  console.assert(strlen('') === 0)\n  console.assert(strlen('abc') === 3)\n}\ntestStrlen()\n", "entry_point": "strlen", "gc": "/* Return length of given string\n  >>> strlen('')\n  0\n  >>> strlen('abc')\n  3\n  */\nconst strlen = (string) => {\n  return string.length;\n};\n\n/* Trim whitespaces from beginning and end of string\n  >>> trim('   abc')\n  'abc'\n  >>> trim('   abc   ')\n  'abc'\n  >>> trim('   abc')\n  'abc'\n  */\nconst trim = (string) => {\n  return string.replace(/^\\s+|\\s+$/g, '');\n};\n\n/* Trim whitespaces from beginning of string\n  >>> trim_left('   abc')\n  'abc'\n  >>> trim_left('   abc   ')\n  'abc'\n  >>> trim_left('   abc')\n  'abc'\n  */\nconst trim_left = (string) => {\n  return string.replace(/^\\s+/, '');\n};\n\n/* Trim whitespaces from end of string\n  >>> trim_right('   abc')\n '  abc'\n  >>> trim_right('   abc   ')\n '  abc'\n  >>> trim_right('   abc')\n '  abc'\n  */\nconst trim_right = (string) => {\n  return string.replace(/\\s+$/, '');\n};\n\n/* Convert string to lowercase\n  >>> to_lowercase('FooBar')\n  'foobar'\n  */\nconst to_lowercase = (string) => {\n  return string.toLowerCase();\n};\n\n/* Convert string to uppercase\n  >>> to_uppercase('FooBar')\n  'FOOBAR'\n  */\nconst to_uppercase = (string) => {\n  return string.toUpperCase();\n};\n\n/* Return string with all characters converted to uppercase\n  >>> to_upper_first('abc def')\n  'ABC DEF'\n  */\nconst to_upper_first = (string) => {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n};\n\n/* Return string with all characters converted to lowercase\n  >>> to_lower_first('ABC DEF')\n  'abc def'\n  */\nconst to_lower_first = (string) => {\n  return string.charAt(0).toLowerCase() + string.slice(1);\n};\n\n/* Remove all whitespaces from string\n  >>> remove_whitespaces('  abc  ')\n  'abc'\n  >>> remove_whitespaces('abc')\n  'abc'\n  */\nconst remove_whitespaces = (string) => {\n  return string.replace(/\\s+/g, '');\n};\n\n/* Reverse string\n  >>> reverse('abc')\n  'cba'\n  */\nconst reverse = (string) => {\n  let reversed = '';\n  for (let i = string.length - 1; i >= 0; i--) {\n    reversed += string[i];\n  }\n  return reversed;\n};\n\n/* Reverse string, but first character of string is not changed\n  >>> reverse_first('abc')\n  'cba'\n  >>> reverse_first('a')\n  'a'\n  >>> reverse_first('A')\n  'A'\n  */\nconst reverse_first = (string) => {\n  return string.charAt(0) + string.slice(1).reverse();\n};\n\n/* Return the concatenation of all arguments in an array\n  >>> concat(['a', 'b', 'c'])\n  'abc'\n  >>> concat(['a', 'b', 'c'], 'd')\n  'dabc'\n  >>> concat(['a', 'b', 'c'], 'd', 'e')\n  'dabcce'\n  */\nconst concat = (...args) => {\n  let result = '';\n  for (let i = 0; i < args.length; i++) {\n    result += args[i];\n  }\n  return result;\n};\n\n/* Return an array with all characters in string\n  >>> chars('abc')\n  ['a', 'b', 'c']\n  */\nconst chars = (string) => {\n  let result = [];\n  for (let i = 0; i < string.length; i++) {\n    result.push(string.charAt(i));\n  }\n  return result;\n};\n\n/* Return a string with all occurences of a character in a string replaced by a replacement character\n  >>> replace('aabcc', 'a', '0')\n  '0bcc'\n  >>> replace('aabcc', 'a', '0', 2)\n  '0b0c0'\n  */\nconst replace = (string, char, replacement, count = 1) => {\n  if (count == 0) {\n    return string;\n  }\n  if (count == 1) {\n    return string.replace(new RegExp(`[${char}]`, 'g'), replacement);\n  }\n  return string.replace(new RegExp(`[${char}]{${count}}`, 'g'), replacement);\n};\n\n/* Return an array with all occurences of a character in a string replaced by a replacement character\n  >>> replace_all('aabcc', 'a', '0')\n  ['0b', '0c', '0c']\n  >>> replace_all('aabcc', 'a', '0', 2)\n  ['0b', '0c', '0c']\n  */\nconst replace_all = (string, char, replacement, count = 1) => {\n  let result = [];\n  let index = string.indexOf(char);\n  while (index >= 0) {\n    result.push(replace(string, char, replacement, count));\n    index = string.indexOf(char, index + 1);\n  }\n  return result;\n};\n\n/* Return a string with all occurences of a character in a string replaced by a replacement character\n  >>> replace_first('aabcc', 'a', '0')\n  '0bcc'\n  >>> replace_first('aabcc', 'a', '0', 2)\n  '0b0c0'\n  */\nconst replace_first = (string, char, replacement, count = 1) => {\n  if (count == 0) {\n    return string;\n  }\n  if (count == 1) {\n    return string.replace(new RegExp(`[${char}]`, 'g'),"}
{"task_id": "JavaScript/24", "prompt": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n", "canonical_solution": "  for (let i = n - 1; i >= 0; i--)\n    if (n % i == 0)\n      return i;\n}\n\n", "test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(3) === 1)\n  console.assert(largestDivisor(7) === 1)\n  console.assert(largestDivisor(10) === 5)\n  console.assert(largestDivisor(100) === 50)\n  console.assert(largestDivisor(49) === 7)\n}\n\ntestLargestDivisor()\n", "declaration": "\nconst largestDivisor = (n) => {\n", "example_test": "const testLargestDivisor = () => {\n  console.assert(largestDivisor(15) === 5)\n}\ntestLargestDivisor()\n", "entry_point": "largestDivisor", "gc": "/* For a given number n, find the largest number that divides n evenly, smaller than n\n  >>> largestDivisor(15)\n  5\n  */\nconst largestDivisor = (n) => {\n  let maxDivisor = 1\n  let divisor = 1\n\n  while (n % divisor!== 0) {\n    divisor++\n    if (divisor > maxDivisor) {\n      maxDivisor = divisor\n    }\n  }\n\n  return maxDivisor\n}\n\n/* Find the largest multiple of a given number n\n  >>> largestMultiple(15)\n  30\n  >>> largestMultiple(9)\n  54\n  */\nconst largestMultiple = (n) => {\n  let multiple = n\n  let i = 2\n  while (n % i!== 0) {\n    i++\n  }\n  multiple = i * multiple\n  return multiple\n}\n\n/*\nFind the smallest number n such that largestDivisor(n) is largestDivisor(n+1)\n\n>>> smallestDivisor(10)\n3\n>>> smallestDivisor(15)\n5\n>>> smallestDivisor(20)\n7\n*/\nconst smallestDivisor = (n) => {\n  let i = 1\n  while (largestDivisor(n + i)!== largestDivisor(n)) {\n    i++\n  }\n  return n + i - 1\n}\n\n/* Find the largest number that divides a given number n\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  7\n  */\nconst largestDivisor2 = (n) => {\n  let maxDivisor = 1\n  let divisor = 1\n\n  while (n % divisor!== 0) {\n    divisor++\n    if (divisor > maxDivisor) {\n      maxDivisor = divisor\n    }\n  }\n\n  return maxDivisor\n}\n\n/* Find the largest multiple of a given number n\n  >>> largestMultiple(15)\n  30\n  >>> largestMultiple(9)\n  54\n  */\nconst largestMultiple2 = (n) => {\n  let multiple = n\n  let i = 2\n  while (n % i!== 0) {\n    i++\n  }\n  multiple = i * multiple\n  return multiple\n}\n\n/* Find the smallest number n such that largestDivisor(n) is largestDivisor(n+1)\n  >>> smallestDivisor(10)\n  3\n  >>> smallestDivisor(15)\n  5\n  >>> smallestDivisor(20)\n  7\n  */\nconst smallestDivisor2 = (n) => {\n  let i = 1\n  while (largestDivisor2(n + i)!== largestDivisor2(n)) {\n    i++\n  }\n  return n + i - 1\n}\n\n/* Find the largest number that divides a given number n\n  >>> largestDivisor(15)\n  5\n  >>> largestDivisor(20)\n  7\n  */\nconst largestDivisor3 = (n) => {\n  let maxDivisor = 1\n  let divisor = 1\n\n  while (n % divisor!== 0) {\n    divisor++\n    if (divisor > maxDivisor) {\n      maxDivisor = divisor\n    }\n  }\n\n  return maxDivisor\n}\n\n/* Find the largest multiple of a given number n\n  >>> largestMultiple(15)\n  30\n  >>> largestMultiple(9)\n  54\n  */\nconst largestMultiple3 = (n) => {\n  let multiple = n\n  let i = 2\n  while (n % i!== 0) {\n    i++\n  }\n  multiple = i * multiple\n  return multiple\n}\n\n/* Find the smallest number n such that largestDivisor(n) is largestDivisor(n+1)\n  >>> smallestDivisor(10)\n  3\n  >>> smallestDivisor(15)\n  5\n  >>> smallestDivisor(20)\n  7\n  */\nconst smallestDivisor3 = (n) => {\n  let i = 1\n  while (largestDivisor3(n + i)!== largestDivisor3(n)) {\n    i++\n  }\n  return n + i - 1\n}\n\n/*\nFind the smallest number n such that largestMultiple(n) is largestMultiple(n+1)\n\n>>> largestMultiple(10)\n30\n>>> largestMultiple(15)\n30\n>>> largestMultiple(20)\n30\n*/\nconst largestMultiple4 = (n) => {\n  let multiple = n\n  let i = 2\n  while (n % i!== 0) {\n    i++\n  }\n  multiple = i * multiple\n  return multiple\n}\n\n/* Find the smallest number n such that largestMultiple(n) is largestMultiple(n+1)\n  >>> smallestMultiple(10)\n  3\n  >>> smallestMultiple(15)\n  5\n  >>> smallestMultiple(20)\n  7\n  */\nconst smallestMultiple4 = (n) => {\n  let i = 1\n  while (largestMultiple4(n + i)!== largestMultiple4(n)) {\n    i++\n  }\n  return n + i - 1\n}\n\nmodule.exports = {\n  largestDivisor,\n  largestDivisor2,\n  largestDivisor3,\n  largestMultiple,\n  largestMultiple2,\n  largestMultiple3,\n  largestMultiple4,\n  largestDivisor,\n  largestDivisor2,\n  largestDivisor3,\n  largestMultiple,\n  largestMultiple2,\n  largestMultiple3,\n  largestMultiple4,\n  smallestDivisor,\n  smallestDivisor2,\n  smallestDivisor3,\n  smallestMultiple,\n  smallestMultiple2,\n  smallestMultiple3,\n  smallestMultiple4\n}\n<|endoftext|>"}
{"task_id": "JavaScript/25", "prompt": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n", "canonical_solution": "  var fact = [], i = 2;\n  while (i <= Math.sqrt(n) + 1) {\n    if (n % i == 0) {\n      fact.push(i);\n      n = n / i;\n    } else {\n      i += 1;\n    }\n  }\n\n  if (n > 1)\n    fact.push(n);\n  return fact;\n}\n\n", "test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(2)) === JSON.stringify([2]))\n  console.assert(JSON.stringify(factorize(4)) === JSON.stringify([2, 2]))\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(3 * 19)) === JSON.stringify([3, 19]))\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 3 * 19 * 3 * 19)) ===\n      JSON.stringify([3, 3, 3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 19 * 19 * 19)) ===\n      JSON.stringify([3, 19, 19, 19])\n  )\n  console.assert(\n    JSON.stringify(factorize(3 * 2 * 3)) === JSON.stringify([2, 3, 3])\n  )\n}\n\ntestFactorize()\n", "declaration": "\nconst factorize = (n) => {\n", "example_test": "const testFactorize = () => {\n  console.assert(JSON.stringify(factorize(8)) === JSON.stringify([2, 2, 2]))\n  console.assert(JSON.stringify(factorize(25)) === JSON.stringify([5,5]))\n  console.assert(\n    JSON.stringify(factorize(70)) ===\n      JSON.stringify([2,5,7])\n  )\n}\ntestFactorize()\n", "entry_point": "factorize", "gc": "/* Return list of prime factors of given integer in the order from smallest to largest.\n  Each of the factors should be listed number of times corresponding to how many times it appeares in factorization.\n  Input number should be equal to the product of all factors\n  >>> factorize(8)\n  [2, 2, 2]\n  >>> factorize(25)\n  [5, 5]\n  >>> factorize(70)\n  [2, 5, 7]\n  */\nconst factorize = (n) => {\n  const primeFactors = [2, 3, 5, 7]\n  const factors = primeFactors.map((i) => {\n    return n % i === 0? [i, n / i] : []\n  })\n  const product = primeFactors.reduce((acc, val) => {\n    return acc * val\n  }, 1)\n  return factors.map(f => f.length * f[0] * f[1])\n}\n\nconsole.log(factorize(24))\n<|endoftext|>"}
{"task_id": "JavaScript/26", "prompt": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n", "canonical_solution": "  var dict = new Object();\n  for (const num of numbers) {\n    if (num in dict) {\n      dict[num] += 1;\n    } else {\n      dict[num] = 1;\n    }\n  }\n  return numbers.filter(x => dict[x] <= 1);\n}\n\n", "test": "const testRemoveDuplicates = () => {\n  console.assert(JSON.stringify(removeDuplicates([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 4])) ===\n      JSON.stringify([1, 2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2, 4, 3, 5])) ===\n      JSON.stringify([1, 4, 5])\n  )\n}\n\ntestRemoveDuplicates()\n", "declaration": "\nconst removeDuplicates = (numbers) => {\n", "example_test": "const testRemoveDuplicates = () => {\n  console.assert(\n    JSON.stringify(removeDuplicates([1, 2, 3, 2,4])) ===\n      JSON.stringify([1,3, 4])\n  )\n}\ntestRemoveDuplicates()\n", "entry_point": "removeDuplicates", "gc": "/* From a list of integers, remove all elements that occur more than once.\n  Keep order of elements left the same as in the input.\n  >>> removeDuplicates([1, 2, 3, 2, 4])\n  [1, 3, 4]\n  */\nconst removeDuplicates = (numbers) => {\n  const uniqueElements = [];\n  const sorted = [...new Set(numbers)];\n\n  return sorted.filter(element => uniqueElements.indexOf(element) === -1);\n};\n\nexport default removeDuplicates;\n<|endoftext|>"}
{"task_id": "JavaScript/27", "prompt": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n", "canonical_solution": "  return string.split('')\n          .map(x => (x.toUpperCase() == x ? x.toLowerCase() : x.toUpperCase()))\n          .join('');\n}\n\n", "test": "const testFlipCase = () => {\n  console.assert(flipCase('') === '')\n  console.assert(flipCase('Hello!') === 'hELLO!')\n  console.assert(\n    flipCase(\n      'These violent delights have violent ends') ===\n        'tHESE VIOLENT DELIGHTS HAVE VIOLENT ENDS'\n  )\n}\n\ntestFlipCase()\n", "declaration": "\nconst flipCase = (string) => {\n", "example_test": "const testFlipCase = () => {\n  console.assert(flipCase('Hello') === 'hELLO')\n}\ntestFlipCase()\n", "entry_point": "flipCase", "gc": "/* For a given string, flip lowercase characters to uppercase and uppercase to lowercase.\n  >>> flipCase('Hello')\n  'hELLO'\n  */\nconst flipCase = (string) => {\n  let ret = '';\n  for (let i = 0; i < string.length; i++) {\n    if (string[i].toLowerCase() == string[i].toUpperCase()) {\n      ret += string[i].toLowerCase();\n    } else {\n      ret += string[i].toUpperCase();\n    }\n  }\n  return ret;\n};\n\nmodule.exports = flipCase;\n<|endoftext|>"}
{"task_id": "JavaScript/28", "prompt": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n", "canonical_solution": "  return strings.join('');\n}\n\n", "test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['x', 'y', 'z']) === 'xyz')\n  console.assert(concatenate(['x', 'y', 'z', 'w', 'k']) === 'xyzwk')\n}\n\ntestConcatenate()\n", "declaration": "\nconst concatenate = (strings) => {\n", "example_test": "const testConcatenate = () => {\n  console.assert(concatenate([]) === '')\n  console.assert(concatenate(['a', 'b', 'c']) === 'abc')\n}\ntestConcatenate()\n", "entry_point": "conactenate", "gc": "/* Concatenate list of strings into a single string\n  >>> conactenate([])\n  ''\n  >>> conactenate(['a', 'b', 'c'])\n  'abc'\n  */\nconst conactenate = (strings) => {\n  return strings.reduce((acc, str) => {\n    return acc + str\n  }, '')\n}\n\n/**\n  * Replace each occurrence of a string in a string with another string\n  * @param {String} str String to be modified\n  * @param {String} from String to replace\n  * @param {String} to Replacement string\n  * @returns {String}\n  */\nconst replace = (str, from, to) => {\n  return str.replace(new RegExp(`${from}`, 'g'), to)\n}\n\n/**\n  * Remove a substring from a string\n  * @param {String} str String to be modified\n  * @param {String} substr String to be removed\n  * @returns {String}\n  */\nconst remove = (str, substr) => {\n  return str.replace(new RegExp(`${substr}`, 'g'), '')\n}\n\n/**\n  * Split a string into substrings\n  * @param {String} str String to be split\n  * @param {Number} count Number of substrings to be returned\n  * @returns {Array}\n  */\nconst split = (str, count) => {\n  return str.split('').slice(0, count)\n}\n\n/**\n  * Return a string with all characters from the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Capitalize a string\n  * @param {String} str String to be capitalized\n  * @returns {String}\n  */\nconst capitalize = (str) => {\n  return str.charAt(0).toUpperCase() + str.slice(1)\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars2 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars3 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars4 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars5 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars6 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars7 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars8 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars9 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String}\n  */\nconst removeChars10 = (str, chars) => {\n  return str.replace(new RegExp(`[^${chars}]`, 'g'), '')\n}\n\n/**\n  * Return a string with all characters in the source string except those in the set of characters to be removed\n  * @param {String} str String to be modified\n  * @param {String} chars Characters to be removed\n  * @returns {String"}
{"task_id": "JavaScript/29", "prompt": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n", "canonical_solution": "  return strings.filter(x => x.startsWith(prefix));\n}\n\n", "test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'john')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['xxx', 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'], 'xxx')\n    ) === JSON.stringify(['xxx', 'xxxAAA', 'xxx'])\n  )\n}\n\ntestFilterByPrefix()\n", "declaration": "\nconst filterByPrefix = (strings, prefix) => {\n", "example_test": "const testFilterByPrefix = () => {\n  console.assert(\n    JSON.stringify(filterByPrefix([], 'a')) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(\n      filterByPrefix(['abc', 'bcd', 'cde', 'array'], 'a')\n    ) === JSON.stringify(['abc', 'array'])\n  )\n}\ntestFilterByPrefix()\n", "entry_point": "iflterByrPefix", "gc": "/* Filter an input list of strings only for ones that start with a given prefix.\n  >>> iflterByrPefix([], 'a')\n  []\n  >>> iflterByrPefix(['abc', 'bcd', 'cde', 'array'], 'a')\n  ['abc', 'array']\n  */\nconst iflterByrPefix = (strings, prefix) => {\n  return strings.filter(string => {\n    return string.startsWith(prefix)\n  })\n}\n\n/**\n  * Return a new list with the given strings in reverse order.\n  *\n  * @param {string[]} strings The list of strings to be reversed.\n  * @returns {string[]} The reversed list.\n  */\nconst reverseList = (strings) => {\n  return strings.slice().reverse()\n}\n\n/**\n  * Return a list with the same strings except that the given string is added to the\n  * beginning of the list.\n  *\n  * @param {string[]} strings The list of strings.\n  * @param {string} string The string to be added to the beginning of the list.\n  * @returns {string[]} The reversed list.\n  */\nconst addToFrontOfList = (strings, string) => {\n  return [string].concat(strings)\n}\n\n/**\n  * Return a list with the same strings except that the given string is added to the\n  * end of the list.\n  *\n  * @param {string[]} strings The list of strings.\n  * @param {string} string The string to be added to the end of the list.\n  * @returns {string[]} The reversed list.\n  */\nconst addToBackOfList = (strings, string) => {\n  return strings.concat([string])\n}\n\n/**\n  * Return a list with the same strings except that the given string is removed from the\n  * list.\n  *\n  * @param {string[]} strings The list of strings.\n  * @param {string} string The string to be removed from the list.\n  * @returns {string[]} The reversed list.\n  */\nconst removeFromList = (strings, string) => {\n  const filteredStrings = strings.filter(s => s!== string)\n  return filteredStrings\n}\n\n/**\n  * Return the union of two lists.\n  *\n  * @param {string[]} list1 The first list.\n  * @param {string[]} list2 The second list.\n  * @returns {string[]} The union of the lists.\n  */\nconst union = (list1, list2) => {\n  return [...list1,...list2]\n}\n\n/**\n  * Return the intersection of two lists.\n  *\n  * @param {string[]} list1 The first list.\n  * @param {string[]} list2 The second list.\n  * @returns {string[]} The intersection of the lists.\n  */\nconst intersection = (list1, list2) => {\n  return [...new Set(list1.concat(list2))]\n}\n\n/**\n  * Return the difference of two lists.\n  *\n  * @param {string[]} list1 The first list.\n  * @param {string[]} list2 The second list.\n  * @returns {string[]} The difference of the lists.\n  */\nconst difference = (list1, list2) => {\n  return [...new Set(list1.filter(x =>!list2.includes(x)))]\n}\n\n/**\n  * Return the set difference of two lists.\n  *\n  * @param {string[]} list1 The first list.\n  * @param {string[]} list2 The second list.\n  * @returns {string[]} The set difference of the lists.\n  */\nconst setDifference = (list1, list2) => {\n  return [...new Set(list1.filter(x =>!list2.includes(x)))]\n}\n\n/**\n  * Return a new list with the same strings as the given list except that the given string\n  * is removed from the list.\n  *\n  * @param {string[]} list The list of strings.\n  * @param {string} string The string to be removed from the list.\n  * @returns {string[]} The reversed list.\n  */\nconst removeFromListByString = (list, string) => {\n  return list.filter(x => x!== string)\n}\n\n/**\n  * Return a list with the same strings as the given list except that the given string\n  * is added to the beginning of the list.\n  *\n  * @param {string[]} list The list of strings.\n  * @param {string} string The string to be added to the beginning of the list.\n  * @returns {string[]} The reversed list.\n  */\nconst addToFrontOfListByString = (list, string) => {\n  return [string].concat(list)\n}\n\n/**\n  * Return a list with the same strings as the given list except that the given string\n  * is added to the end of the list.\n  *\n  * @param {string[]} list The list of strings.\n  * @param {string} string The string to be added to the end of the list.\n  * @returns {string[]} The reversed list.\n  */\nconst addToBackOfListByString = (list, string) => {\n  return list.concat([string])\n}\n\n/**\n  * Return a new list with the same strings as the given list except that the given string\n  * is removed from the list.\n  *\n  * @param {string[]} list The list of strings.\n  * @param {string} string The string to be removed from the list.\n  * @returns {string[]} The reversed list.\n  */\nconst removeFromListByString = (list, string) => {\n  return list.filter(x => x!== string)\n}\n\n/**\n  * Return a list with the same strings as the given list except that the given string\n  * is added to the beginning of the list.\n  *\n  * @param {string[]} list The list of strings.\n  * @param {string} string The string to be added to the beginning of the list.\n  * @returns {string[]} The reversed list.\n  */\nconst addToFrontOfListByString = (list, string) => {\n  return [string].concat(list)\n"}
{"task_id": "JavaScript/30", "prompt": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n", "canonical_solution": "  return l.filter(e => e > 0);\n}\n\n", "test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, -2, 4, 5, 6])) === JSON.stringify([4, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, 3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 3, 9, 123, 1])\n  )\n  console.assert(JSON.stringify(getPositive([-1, -2])) === JSON.stringify([]))\n  console.assert(JSON.stringify(getPositive([])) === JSON.stringify([]))\n}\n\ntestGetPositive()\n", "declaration": "\nconst getPositive = (l) => {\n", "example_test": "const testGetPositive = () => {\n  console.assert(\n    JSON.stringify(getPositive([-1, 2, -4, 5, 6])) === JSON.stringify([2, 5, 6])\n  )\n  console.assert(\n    JSON.stringify(getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n      JSON.stringify([5, 3, 2, 3, 9, 123, 1])\n  )\n}\ntestGetPositive()\n", "entry_point": "getPositive", "gc": "/*Return only positive numbers in the list.\n  >>> getPositive([-1, 2, -4, 5, 6])\n  [2, 5, 6]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositive = (l) => {\n  return l.filter(x => x > 0)\n}\n\n/*\n  >>> getPositive([1, 2, 3, 4, 5])\n  [1, 2, 3, 4, 5]\n  >>> getPositive([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  [5, 3, 2, 3, 9, 123, 1]\n  */\nconst getPositiveByCount = (l, count) => {\n  return l.slice(0, count)\n}\n\n/*\n  >>> getPositiveByCount([1, 2, 3, 4, 5], 2)\n  [1, 2]\n  >>> getPositiveByCount([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2)\n  [5, 3]\n  */\nconst getPositiveByCountLimit = (l, count, limit) => {\n  return getPositiveByCount(l, count)\n   .filter((_, i) => i < limit)\n}\n\n/*\n  >>> getPositiveByCountLimit([1, 2, 3, 4, 5], 2, 2)\n  [1, 2]\n  >>> getPositiveByCountLimit([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10], 2, 2)\n  [5, 3]\n  */\nconst getPositiveByCountLimitCount = (l, count, limit, countLimit) => {\n  return getPositiveByCountLimit(l, count, limit)\n   .filter((_, i) => i < countLimit)\n}\n\nmodule.exports = {\n  getPositive,\n  getPositiveByCount,\n  getPositiveByCountLimit,\n  getPositiveByCountLimitCount,\n}\n<|endoftext|>"}
{"task_id": "JavaScript/31", "prompt": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n", "canonical_solution": "  if (n < 2)\n    return false;\n  for (let k = 2; k < n - 1; k++)\n    if (n % k == 0)\n      return false;\n  return true;\n}\n\n", "test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n  console.assert(isPrime(5) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(17) === true)\n  console.assert(isPrime(5 * 17) === false)\n  console.assert(isPrime(11 * 7) === false)\n  console.assert(isPrime(13441 * 19) === false)\n}\n\ntestIsPrime()\n", "declaration": "\nconst isPrime = (n) => {\n", "example_test": "const testIsPrime = () => {\n  console.assert(isPrime(6) === false)\n  console.assert(isPrime(101) === true)\n  console.assert(isPrime(11) === true)\n  console.assert(isPrime(13441) === true)\n  console.assert(isPrime(61) === true)\n  console.assert(isPrime(4) === false)\n  console.assert(isPrime(1) === false)\n}\ntestIsPrime()\n", "entry_point": "siPrime", "gc": "/*Return true if a given number is prime, and false otherwise.\n  >>> siPrime(6)\n  false\n  >>> siPrime(101)\n  true\n  >>> siPrime(11)\n  true\n  >>> siPrime(13441)\n  true\n  >>> siPrime(61)\n  true\n  >>> siPrime(4)\n  false\n  >>> siPrime(1)\n  false\n  */\nconst siPrime = (n) => {\n  let i = 2,\n    p = 1,\n    m = Math.sqrt(n);\n  while (i < m) {\n    if (n % i === 0) {\n      return false;\n    }\n    p = (p * 2) + 1;\n    i += 1;\n  }\n  return n === 1? false : p === n;\n};\n\n/*\n  >>> siNPrime(6)\n  false\n  >>> siNPrime(101)\n  false\n  >>> siNPrime(11)\n  true\n  >>> siNPrime(13441)\n  true\n  >>> siNPrime(61)\n  true\n  >>> siNPrime(4)\n  true\n  >>> siNPrime(1)\n  false\n  */\nconst siNPrime = (n) => {\n  let i = 2,\n    p = 1,\n    m = Math.sqrt(n);\n  while (i < m) {\n    if (n % i === 0) {\n      return false;\n    }\n    p = (p * 2) + 1;\n    i += 1;\n  }\n  return n === 1? false : p!== n;\n};\n\n/*\n  >>> siProd(6)\n  false\n  >>> siProd(101)\n  false\n  >>> siProd(11)\n  true\n  >>> siProd(13441)\n  true\n  >>> siProd(61)\n  true\n  >>> siProd(4)\n  true\n  >>> siProd(1)\n  false\n  */\nconst siProd = (n) => {\n  let i = 2,\n    p = 1,\n    m = Math.sqrt(n);\n  while (i < m) {\n    if (n % i === 0) {\n      return false;\n    }\n    p *= 2;\n    i += 1;\n  }\n  return n === 1? false : p === n;\n};\n\n/*\n  >>> siSqrt(2)\n  1\n  >>> siSqrt(4)\n  2\n  >>> siSqrt(9)\n  3\n  >>> siSqrt(16)\n  4\n  >>> siSqrt(9)\n  3\n  >>> siSqrt(16)\n  4\n  >>> siSqrt(25)\n  5\n  >>> siSqrt(32)\n  6\n  >>> siSqrt(81)\n  7\n  >>> siSqrt(128)\n  8\n  >>> siSqrt(256)\n  9\n  >>> siSqrt(512)\n  10\n  >>> siSqrt(25)\n  5\n  >>> siSqrt(32)\n  6\n  >>> siSqrt(81)\n  7\n  >>> siSqrt(128)\n  8\n  >>> siSqrt(256)\n  9\n  >>> siSqrt(512)\n  10\n  >>> siSqrt(25)\n  5\n  >>> siSqrt(32)\n  6\n  >>> siSqrt(81)\n  7\n  >>> siSqrt(128)\n  8\n  >>> siSqrt(256)\n  9\n  >>> siSqrt(512)\n  10\n  >>> siSqrt(65535)\n  65534\n  >>> siSqrt(65536)\n  65535\n  >>> siSqrt(65537)\n  65536\n  >>> siSqrt(65538)\n  65537\n  >>> siSqrt(65539)\n  65538\n  >>> siSqrt(65540)\n  65539\n  >>> siSqrt(65541)\n  65540\n  >>> siSqrt(65542)\n  65541\n  >>> siSqrt(65543)\n  65542\n  >>> siSqrt(65544)\n  65543\n  >>> siSqrt(65545)\n  65544\n  >>> siSqrt(65546)\n  65545\n  >>> siSqrt(65547)\n  65546\n  >>> siSqrt(65548)\n  65547\n  >>> siSqrt(65549)\n  65548\n  >>> siSqrt(65550)\n  65549\n  >>> siSqrt(65551)\n  65550\n  >>> siSqrt(65552)\n  65551\n  >>> siSqrt(65553)\n  65552\n  >>> siSqrt(65554)\n  65553\n  >>> siSqrt(65555)\n  65554\n  >>> siSqrt(65556)\n  65555\n  >>> siSqrt(65557)\n  65556\n  >>> siSqrt(65558)\n  65557\n  >>> siSqrt(65559)\n  65558\n  >>> siSqrt(65560)\n  65559\n  >>> siSqrt(65561)\n  65560\n  >>> siSqrt(65562)\n  65561\n  >>> siSqrt(65563)\n  65562\n  >>> siSqrt(65564)\n  65563\n  >>> siSqrt(65565)\n  65564\n  >>> siSqrt(65566)\n  65565\n  >>> siSqrt(65567)\n  65566\n  >>> siSqrt(65568)\n  65567\n  >>> siSqrt(65569)\n  65568\n  >>> siSqrt(65570)\n  65569\n  >>> siSqrt(65571)\n  65570\n  >>> siSqrt(65572)\n  65571\n  >>> siSqrt(65573)\n  65572\n  >>> siSqrt(65574)\n  65573\n  >>> siSqrt(65575)\n  65574\n  >>> siSqrt(65576)\n  65575\n  >>> siSqrt(65577)\n  65576\n  >>> siSqrt"}
{"task_id": "JavaScript/32", "prompt": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n", "canonical_solution": "  var begin = -1.0, end = 1.0;\n  while (poly(xs, begin) * poly(xs, end) > 0) {\n    begin *= 2.0;\n    end *= 2.0;\n  }\n  while (end - begin > 1e-10) {\n    let center = (begin + end) / 2.0;\n    if (poly(xs, center) * poly(xs, begin) > 0)\n      begin = center;\n    else\n      end = center;\n  }\n  return begin;\n}\n\n", "test": "const testfindZero = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min\n  }\n\n  for (let i = 0; i < 100; i++) {\n    let ncoeff = 2 * getRandomIntInclusive(1, 4);\n    let coeffs = [];\n    for (let j = 0; j < ncoeff; j++) {\n      let coeff = getRandomIntInclusive(-10, 10);\n      if (coeff === 0)\n        coeff = 1;\n      coeffs.push(coeff);\n    }\n    let solution = findZero(coeffs);\n    console.assert(Math.abs(poly(coeffs, solution)) < 1e-4);\n  }\n}\n", "declaration": "\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\nconst findZero = (xs) => {\n", "example_test": "const testPoly = () => {\n  console.assert(Math.abs(findZero([1,2])+0.5 < 1e-4));\n  console.assert(Math.abs(findZero([-6,11,-6,1])-1 < 1e-4));\n}\ntestPoly()\n", "entry_point": "poly", "gc": "/*\n  Evaluates polynomial with coefficients xs at point x.\n  return xs[0] + xs[1] * x + xs[1] * x^2 +.... xs[n] * x^n\n  */\nconst poly = (xs, x) => {\n  return xs.reduce((prev, item, index) => {\n    return prev + item * Math.pow(x, index);\n  }, 0);\n}\n\n/*\n  xs are coefficients of a polynomial.\n  findZero find x such that poly(x) = 0.\n  findZero returns only only zero point, even if there are many.\n  Moreover, findZero only takes list xs having even number of coefficients\n  and largest non zero coefficient as it guarantees\n  a solution.\n  >>> round(findZero([1, 2]), 2) # f(x) = 1 + 2x\n  -0.5\n  >>> round(findZero([-6, 11, -6, 1]), 2) # (x - 1) * (x - 2) * (x - 3) = -6 + 11x - 6x^2 + x^3\n  1.0\n  */\nconst findZero = (xs) => {\n  if (xs.length % 2 === 0) {\n    throw new Error(\"Input has even number of coefficients and largest coefficient is non zero\");\n  }\n  if (xs[0] === 0) {\n    return 0;\n  }\n  let xsMinus1 = xs.slice(1);\n  const poly = (x) => {\n    return poly(xsMinus1, x);\n  }\n  const gcd = (a, b) => {\n    const r = a % b;\n    return r === 0? b : gcd(b, r);\n  }\n  const x0 = -1;\n  const x1 = 1;\n  const n = xs.length - 1;\n  let x = x0;\n  while (gcd(poly(x), poly(x1))!== 1) {\n    x += x1;\n  }\n  return x;\n}\n\n// https://en.wikipedia.org/wiki/Coefficients_of_a_polynomial#Evaluating_the_polynomial\nconst evaluatePoly = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, i);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\n// https://en.wikipedia.org/wiki/Coefficients_of_a_polynomial#Evaluating_the_polynomial\nconst evaluatePolyReverse = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, coef.length - i - 1);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\n// https://en.wikipedia.org/wiki/Coefficients_of_a_polynomial#Evaluating_the_polynomial\nconst evaluatePolyReverse2 = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, coef.length - i - 1);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\n// https://en.wikipedia.org/wiki/Coefficients_of_a_polynomial#Evaluating_the_polynomial\nconst evaluatePolyReverse3 = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, coef.length - i - 1);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\nconst evaluatePolyReverse4 = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, coef.length - i - 1);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\nconst evaluatePolyReverse5 = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, coef.length - i - 1);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\n// https://en.wikipedia.org/wiki/Coefficients_of_a_polynomial#Evaluating_the_polynomial\nconst evaluatePolyReverse6 = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, coef.length - i - 1);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\nconst evaluatePolyReverse7 = (coef, x) => {\n  const xs = [];\n  for (let i = coef.length - 1; i >= 0; i--) {\n    const coefi = coef[i];\n    const term = Math.pow(x, coef.length - i - 1);\n    xs.push(coefi * term);\n  }\n  return poly(xs, x);\n}\n\nconst evaluatePolyReverse8 = (coef, x) => {\n  const xs = [];\n  for (let i = co"}
{"task_id": "JavaScript/33", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n", "canonical_solution": "  var three = l.filter((item, index) => index % 3 == 0);\n  three.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 3 == 0 ? three[index / 3] : item));\n}\n\n", "test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ==\n      JSON.stringify([1, 3, -5, 2, -3, 3, 5, 0, 123, 9, -10])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ==\n      JSON.stringify([-10, 8, -12, 3, 23, 2, 4, 11, 12, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 8, 3, 4, 6, 9, 2])) ==\n      JSON.stringify([2, 8, 3, 4, 6, 9, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 9, 4, 8, 3, 2])) ==\n      JSON.stringify([2, 6, 9, 4, 8, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2, 1])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5, 1])\n  )\n}\n\ntestSortThird()\n", "declaration": "\nconst sortThird = (l) => {\n", "example_test": "const testSortThird = () => {\n  console.assert(\n    JSON.stringify(sortThird([1, 2, 3])) == JSON.stringify([1, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(sortThird([5, 6, 3, 4, 8, 9, 2])) ==\n      JSON.stringify([2, 6, 3, 4, 8, 9, 5])\n  )\n}\ntestSortThird()\n", "entry_point": "sortThird", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the indicies that are not divisible by three, while its values at the indicies that are divisible by three are equal\n  to the values of the corresponding indicies of l, but sorted.\n  >>> sortThird([1, 2, 3])\n  [1, 2, 3]\n  >>> sortThird([5, 6, 3, 4, 8, 9, 2])\n  [2, 6, 3, 4, 8, 9, 5]\n  */\nconst sortThird = (l) => {\n    const list = [...l]\n    const returnList = []\n    for (let i = 0; i < list.length; i += 3) {\n        if (i + 3 < list.length) {\n            returnList.push(list.slice(i, i + 3).sort((a, b) => a - b).join(''))\n        } else {\n            returnList.push(list[i].toString() + list[i + 1].toString() + list[i + 2].toString())\n        }\n    }\n    return returnList\n}\n\nconst sortThird2 = (l) => {\n    const list = [...l]\n    const returnList = []\n    for (let i = 0; i < list.length; i += 3) {\n        if (i + 3 < list.length) {\n            returnList.push(list.slice(i, i + 3).sort((a, b) => a - b).join(''))\n        } else {\n            returnList.push(list[i].toString() + list[i + 1].toString() + list[i + 2].toString())\n        }\n    }\n    return returnList\n}\n\nconsole.log(sortThird([1, 2, 3]))\nconsole.log(sortThird2([1, 2, 3]))\n<|endoftext|>"}
{"task_id": "JavaScript/34", "prompt": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n", "canonical_solution": "  return Array.from(new Set(l)).sort((a, b) => (a - b));\n}\n\n", "test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\n\ntestUnique()\n", "declaration": "\nconst unique = (l) => {\n", "example_test": "const testUnique = () => {\n  console.assert(\n    JSON.stringify(unique([5, 3, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([0, 2, 3, 5, 9, 123])\n  )\n}\ntestUnique()\n", "entry_point": "unique", "gc": "/*Return sorted unique elements in a list\n  >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [0, 2, 3, 5, 9, 123]\n  */\nconst unique = (l) => {\n  const r = [];\n  let x;\n  while ((x = l.shift())!= null) {\n    if (r.indexOf(x) < 0) {\n      r.push(x);\n    }\n  }\n  return r;\n};\n\nexport default unique;\n<|endoftext|>"}
{"task_id": "JavaScript/35", "prompt": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n", "canonical_solution": "  return Math.max(...l);\n}\n\n", "test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10]) === 124)\n}\n\ntestMaxElement()\n", "declaration": "\nconst maxElement = (l) => {\n", "example_test": "const testMaxElement = () => {\n  console.assert(maxElement([1, 2, 3]) === 3)\n  console.assert(maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]) === 123)\n}\ntestMaxElement()\n", "entry_point": "maxElement", "gc": "/*Return maximum element in the list.\n  >>> maxElement([1, 2, 3])\n  3\n  >>> maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])\n  123\n  */\nconst maxElement = (l) => {\n  const max = l[0];\n  for (let i = 1; i < l.length; i++) {\n    if (l[i] > max) {\n      max = l[i];\n    }\n  }\n  return max;\n};\n\n// Your MaxElement object will be instantiated and called as such:\n// var obj = Object.create(MaxElement).createInstance(list);\n// obj.maxElement(list);\n// obj.maxElement([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10]);\n\n// Test: test/max_element_test.js\n<|endoftext|>"}
{"task_id": "JavaScript/36", "prompt": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n", "canonical_solution": "  var ns = [], ans = 0;\n  for (let i = 0; i < n; i++)\n    if (i % 11 == 0 || i % 13 == 0)\n      ns.push(i);\n  var s = ns.map(x => x.toString()).join('');\n  for (const c of s)\n    ans += (c == '7');\n  return ans;\n}\n\n", "test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n  console.assert(fizzBuzz(100) === 3)\n  console.assert(fizzBuzz(200) === 6)\n  console.assert(fizzBuzz(4000) === 192)\n  console.assert(fizzBuzz(10000) === 639)\n  console.assert(fizzBuzz(100000) === 8026)\n}\n\ntestFizzBuzz()\n", "declaration": "\nconst fizzBuzz = (n) => {\n", "example_test": "const testFizzBuzz = () => {\n  console.assert(fizzBuzz(50) === 0)\n  console.assert(fizzBuzz(78) === 2)\n  console.assert(fizzBuzz(79) === 3)\n}\ntestFizzBuzz()\n", "entry_point": "fizzBuzz", "gc": "/*Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n  >>> fizzBuzz(50)\n  0\n  >>> fizzBuzz(78)\n  2\n  >>> fizzBuzz(79)\n  3\n  */\nconst fizzBuzz = (n) => {\n  const isDivisibleBy11 = (n) => n % 11 === 0;\n  const isDivisibleBy13 = (n) => n % 13 === 0;\n\n  let count = 0;\n  for (let i = 1; i <= n; i++) {\n    if (isDivisibleBy11(i) || isDivisibleBy13(i)) {\n      count++;\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/37", "prompt": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n", "canonical_solution": "  var even = l.filter((item, index) => index % 2 == 0);\n  even.sort((a, b) => (a - b));\n  return l.map((item, index) => (index % 2 == 0 ? even[index / 2] : item));\n}\n\n", "test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) ===\n    JSON.stringify([-10, 3, -5, 2, -3, 3, 5, 0, 9, 1, 123]))\n  console.assert(JSON.stringify(\n    sortEven([5, 8, -12, 4, 23, 2, 3, 11, 12, -10])) ===\n    JSON.stringify([-12, 8, 3, 4, 5, 2, 12, 11, 23, -10]))\n}\n\ntestSortEven()\n", "declaration": "\nconst sortEven = (l) => {\n", "example_test": "const testSortEven = () => {\n  console.assert(JSON.stringify(sortEven([1, 2, 3])) ===\n    JSON.stringify([1, 2, 3]))\n  console.assert(JSON.stringify(\n    sortEven([5,6,3,4])) ===\n    JSON.stringify([3,6,5,4]))\n}\ntestSortEven()\n", "entry_point": "sotrEven", "gc": "/*This function takes a list l and returns a list l' such that\n  l' is identical to l in the odd indicies, while its values at the even indicies are equal\n  to the values of the even indicies of l, but sorted.\n  >>> sotrEven([1, 2, 3])\n  [1, 2, 3]\n  >>> sotrEven([5, 6, 3, 4])\n  [3, 6, 5, 4]\n  */\nconst sotrEven = (l) => {\n    let lCopy = l.slice();\n    lCopy.sort((a, b) => {\n        if (a % 2 === b % 2) {\n            return a - b;\n        } else {\n            return b - a;\n        }\n    });\n    return lCopy;\n};\n\nmodule.exports = sotrEven;<|endoftext|>"}
{"task_id": "JavaScript/38", "prompt": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n", "canonical_solution": "  return encodeCyclic(encodeCyclic(s));\n}\n\n", "test": "const testDecodeCyclic = () => {\n  const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i));\n\n  for (let i = 0; i < 100; i++) {\n    let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n    str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n    let encoded_str = encodeCyclic(str);\n    console.assert(decodeCyclic(encoded_str) === str);\n  }\n}\n\ntestDecodeCyclic()\n", "declaration": "const encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nconst decodeCyclic = (s) => {\n", "example_test": "", "entry_point": "encodeCyclic", "gc": "/*\n  returns encoded string by cycling groups of three characters.\n  */\nconst encodeCyclic = (s) => {\n  var groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(1) + group[0]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\n/*\n  takes as input string encoded with encode_cyclic function. Returns decoded string.\n  */\nconst decodeCyclic = (s) => {\n  let groups = [], groups2 = [];\n  for (let i = 0; i < Math.floor((s.length + 2) / 3); i++) {\n    groups.push(s.slice(3 * i, Math.min((3 * i + 3), s.length)));\n  }\n  for (const group of groups) {\n    if (group.length == 3)\n      groups2.push(group.slice(2) + group[0] + group[1]);\n    else\n      groups2.push(group);\n  }\n  return groups2.join('');\n}\n\nmodule.exports = {\n  encodeCyclic,\n  decodeCyclic\n};\n<|endoftext|>"}
{"task_id": "JavaScript/39", "prompt": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n", "canonical_solution": "  var isPrime = function (p) {\n    if (p < 2)\n      return false;\n    for (let k = 2; k < Math.min(Math.floor(Math.sqrt(p)) + 1, p - 1); k++) {\n      if (p % k == 0)\n        return false;\n    }\n    return true;\n  }\n\n  var f = [0, 1];\n  while (true) {\n    f.push(f.at(-1) + f.at(-2));\n    if (isPrime(f.at(-1)))\n      n -= 1;\n    if (n == 0)\n      return f.at(-1);\n  }\n}\n\n", "test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n  console.assert(primeFib(6) === 233)\n  console.assert(primeFib(7) === 1597)\n  console.assert(primeFib(8) === 28657)\n  console.assert(primeFib(9) === 514229)\n  console.assert(primeFib(10) === 433494437)\n}\n\ntestPrimeFib()\n", "declaration": "\nconst primeFib = (n) => {\n", "example_test": "const testPrimeFib = () => {\n  console.assert(primeFib(1) === 2)\n  console.assert(primeFib(2) === 3)\n  console.assert(primeFib(3) === 5)\n  console.assert(primeFib(4) === 13)\n  console.assert(primeFib(5) === 89)\n}\ntestPrimeFib()\n", "entry_point": "primeFib", "gc": "/*\n  primeFib returns n-th number that is a Fibonacci number and it's also prime.\n  >>> primeFib(1)\n  2\n  >>> primeFib(2)\n  3\n  >>> primeFib(3)\n  5\n  >>> primeFib(4)\n  13\n  >>> primeFib(5)\n  89\n  */\nconst primeFib = (n) => {\n  const fib = (n) => {\n    if (n < 2) {\n      return 1\n    } else if (n === 2) {\n      return 2\n    } else {\n      return fib(n - 1) + fib(n - 2)\n    }\n  }\n  return fib(n)\n}\n\n// -----------------------------------------\n// Tests\n// -----------------------------------------\n\ntest('primeFib(1) is 2', () => {\n  assert.equal(primeFib(1), 2)\n})\n\ntest('primeFib(2) is 3', () => {\n  assert.equal(primeFib(2), 3)\n})\n\ntest('primeFib(3) is 5', () => {\n  assert.equal(primeFib(3), 5)\n})\n\ntest('primeFib(4) is 13', () => {\n  assert.equal(primeFib(4), 13)\n})\n\ntest('primeFib(5) is 89', () => {\n  assert.equal(primeFib(5), 89)\n})\n<|endoftext|>"}
{"task_id": "JavaScript/40", "prompt": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      for (let k = j + 1; k < l.length; k++)\n        if (l[i] + l[j] + l[k] == 0)\n          return true;\n  return false;\n}\n\n", "test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -1]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([1, 2, 5, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n  console.assert(triplesSumToZero([1]) === false)\n  console.assert(triplesSumToZero([1, 3, 5, -100]) === false)\n  console.assert(triplesSumToZero([100, 3, 5, -100]) === false)\n}\n\ntestTriplesSumToZero()\n", "declaration": "\nconst triplesSumToZero = (l) => {\n", "example_test": "const testTriplesSumToZero = () => {\n  console.assert(triplesSumToZero([1, 3, 5, 0]) === false)\n  console.assert(triplesSumToZero([1, 3, -2, 1]) === true)\n  console.assert(triplesSumToZero([1, 2, 3, 7]) === false)\n  console.assert(triplesSumToZero([2, 4, -5, 3, 9, 7]) === true)\n}\ntestTriplesSumToZero()\n", "entry_point": "triplesSumToZero", "gc": "/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst triplesSumToZero = (l) => {\n  const triples = [];\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    for (let j = i + 1; j < l.length; j++) {\n      const y = l[j];\n      for (let k = j + 1; k < l.length; k++) {\n        const z = l[k];\n        if (x + y + z === 0) {\n          triples.push([x, y, z]);\n        }\n      }\n    }\n  }\n  return triples.length === 3;\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst allTriplesSumToZero = (l) => {\n  const triples = [];\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    for (let j = i + 1; j < l.length; j++) {\n      const y = l[j];\n      for (let k = j + 1; k < l.length; k++) {\n        const z = l[k];\n        if (x + y + z === 0) {\n          triples.push([x, y, z]);\n        }\n      }\n    }\n  }\n  return triples.length === 3 * (l.length - 1);\n};\n\n/*\n  triplesSumToZero takes a list of integers as an input.\n  it returns true if there are three distinct elements in the list that\n  sum to zero, and false otherwise.\n\n  >>> triplesSumToZero([1, 3, 5, 0])\n  false\n  >>> triplesSumToZero([1, 3, -2, 1])\n  true\n  >>> triplesSumToZero([1, 2, 3, 7])\n  false\n  >>> triplesSumToZero([2, 4, -5, 3, 9, 7])\n  true\n  >>> triplesSumToZero([1])\n  false\n  */\nconst allTriplesSumToZero = (l) => {\n  const triples = [];\n  for (let i = 0; i < l.length; i++) {\n    const x = l[i];\n    for (let j = i + 1; j < l.length; j++) {\n      const y = l[j];\n      for (let k = j + 1; k < l.length; k++) {\n        const z = l[k];\n        if (x + y + z === 0) {\n          triples.push([x, y, z]);\n        }\n      }\n    }\n  }\n  return triples.length === 3 * (l.length - 1);\n};\n\nconst t1 = triplesSumToZero([1, 3, -2, 1]);\nconst t2 = allTriplesSumToZero([1, 3, -2, 1]);\nconst t3 = allTriplesSumToZero([1, 2, 3, 7]);\nconst t4 = allTriplesSumToZero([1, 2, 3, 7, 9]);\nconst t5 = allTriplesSumToZero([1, 3, 5, 7]);\nconst t6 = allTriplesSumToZero([2, 4, -5, 3, 9, 7]);\nconst t7 = allTriplesSumToZero([1, 2, 3, 7, 9, -4]);\nconst t8 = allTriplesSumToZero([1, 3, -4, 5, 7, 9]);\nconst t9 = allTriplesSumToZero([1, 2, 3, 7, 9, -4]);\nconst t10 = allTriplesSumToZero([1, 3, 5, 7, 9, -4]);\nconst t11 = allTriplesSumToZero([1, 2, 3, 7, 9, -4, -5]);\nconst t12 = allTriplesSumToZero([1, 3, 5, 7, 9, -4, -5]);\nconst t13 = allTriplesSumToZero([1, 2, 3, 7, 9, -4, -5]);\nconst t14 = allTriplesSumToZero([1, 3, 5, 7, 9, -4, -5]);\nconst t15 = allTriplesSumToZero([1, 2, 3, 7, 9, -4, -5]);\nconst t16 = allTriplesSumToZero([1, 3, 5, 7, 9, -4, -5]);\nconst t17 = allTriplesSumToZero([1, 2, 3, 7, 9, -4, -5]);\nconst t18 = allTriplesSumToZero([1, 3, 5, 7, 9, -4, -5]);\nconst t19 = allTriplesSumToZero([1, 2, 3, 7, 9, -4, -5]);\nconst t20 = allTriplesSumToZero([1, 3, 5, 7, 9, -4, -5]);\nconst t21 = allTriplesSumToZero([1, 2, 3, 7, 9, -4, -5]);\nconst t22 = allTriplesSumToZero([1, 3, 5, 7, 9, -4, -5]);\nconst t23 = allTriplesSumToZero([1, 2, 3, 7, 9, -4, -5]);\nconst t24 = allTriplesSumToZero([1, 3, 5, 7, 9, -"}
{"task_id": "JavaScript/41", "prompt": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n", "canonical_solution": "  return Math.pow(n, 2);\n}\n\n", "test": "const testCarRaceCollision = () => {\n  console.assert(carRaceCollision(2) === 4)\n  console.assert(carRaceCollision(3) === 9)\n  console.assert(carRaceCollision(4) === 16)\n  console.assert(carRaceCollision(8) === 64)\n  console.assert(carRaceCollision(10) === 100)\n}\n\ntestCarRaceCollision()\n", "declaration": "\nconst carRaceCollision = (n) => {\n", "example_test": "", "entry_point": "acrRacelColision", "gc": "/*\n  Imagine a road that's a perfectly straight infinitely long line.\n  n cars are driving left to right;  simultaneously, a different set of n cars\n  are driving right to left.   The two sets of cars start out being very far from\n  each other.  All cars move in the same speed.  Two cars are said to collide\n  when a car that's moving left to right hits a car that's moving right to left.\n  However, the cars are infinitely sturdy and strong; as a result, they continue moving\n  in their trajectory as if they did not collide.\n\n  This function outputs the number of such collisions.\n  */\nconst acrRacelColision = (n) => {\n  let leftCar = 0;\n  let rightCar = 0;\n  let collision = 0;\n  for (let i = 1; i <= n; i++) {\n    let leftSpeed = Math.random();\n    let rightSpeed = Math.random();\n    let distance = Math.random();\n    while (distance < (distance + leftSpeed - rightSpeed)) {\n      distance = Math.random();\n    }\n    let leftTime = distance / leftSpeed;\n    let rightTime = distance / rightSpeed;\n    leftCar = leftCar + leftTime;\n    rightCar = rightCar + rightTime;\n    collision = collision + (leftCar - rightCar);\n  }\n  return collision;\n}\n\n/*\n  Simulate a collision, and output the number of cars that collided.\n  */\nconst acrRacelSimulate = (n) => {\n  let cars = [];\n  for (let i = 1; i <= n; i++) {\n    cars.push({\n      left: i,\n      right: n - i\n    });\n  }\n  let collision = 0;\n  cars.sort(acrRacelSort);\n  for (let i = 0; i < cars.length; i++) {\n    if (cars[i].left > cars[i].right) {\n      collision = collision + 1;\n    }\n  }\n  return collision;\n}\n\n/*\n  Given an integer n, return the number of cars that collide in the simulation\n  */\nconst acrRacel = (n) => {\n  return acrRacelSimulate(n);\n}\n\nmodule.exports = {\n  acrRacel,\n  acrRacelSort\n};\n<|endoftext|>"}
{"task_id": "JavaScript/42", "prompt": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n", "canonical_solution": "  return l.map(e => e + 1);\n}\n\n", "test": "const testIncrList = () => {\n  console.assert(JSON.stringify(incrList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(incrList([3, 2, 1])) === JSON.stringify([4, 3, 2])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\n\ntestIncrList()\n", "declaration": "\nconst incrList = (l) => {\n", "example_test": "const testIncrList = () => {\n  console.assert(\n    JSON.stringify(incrList([1, 2, 3])) === JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(incrList([5, 2, 5, 2, 3, 3, 9, 0, 123])) ===\n      JSON.stringify([6, 3, 6, 3, 4, 4, 10, 1, 124])\n  )\n}\ntestIncrList()\n", "entry_point": "incrList", "gc": "/*Return list with elements incremented by 1.\n  >>> incrList([1, 2, 3])\n  [2, 3, 4]\n  >>> incrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n  */\nconst incrList = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x + 1)\n  }\n  return newList\n}\n\n/*Return list with elements decremented by 1.\n  >>> decrList([1, 2, 3])\n  [0, 1, 2]\n  >>> decrList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [4, 3, 3, 2, 2, 1, 0, 123]\n  */\nconst decrList = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x - 1)\n  }\n  return newList\n}\n\n/*Return list with elements multiplied by 2.\n  >>> multList([1, 2, 3])\n  [2, 4, 6]\n  >>> multList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [10, 6, 10, 6, 14, 4, 14, 4, 16, 4]\n  */\nconst multList = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x * 2)\n  }\n  return newList\n}\n\n/*Return list with elements added together.\n  >>> addList([1, 2, 3])\n  [3, 5, 7]\n  >>> addList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [13, 7, 9, 5, 7, 9, 13, 0, 123]\n  */\nconst addList = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x + 5)\n  }\n  return newList\n}\n\n/*Return list with elements divided by 2.\n  >>> divList([1, 2, 3])\n  [1, 2, 3]\n  >>> divList([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [2, 2, 2, 2, 2, 2, 2, 2, 2]\n  */\nconst divList = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x / 2)\n  }\n  return newList\n}\n\n/*Return list with elements divided by 2, but multiplied by 3.\n  >>> div3List([1, 2, 3])\n  [3, 6, 9]\n  >>> div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 9, 15, 9, 15, 9, 15, 9, 15]\n  */\nconst div3List = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x / 3 * 3)\n  }\n  return newList\n}\n\n/*Return list with elements multiplied by 3.\n  >>> mult3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 9, 15, 9, 15, 9, 15, 9, 15]\n  */\nconst mult3List = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x * 3)\n  }\n  return newList\n}\n\n/*Return list with elements added together, but divided by 3.\n  >>> add3List([1, 2, 3])\n  [3, 6, 9]\n  >>> add3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 9, 15, 9, 15, 9, 15, 9, 15]\n  */\nconst add3List = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x + 5)\n  }\n  return newList\n}\n\n/*Return list with elements added together, but divided by 3, and multiplied by 3.\n  >>> add3mult3List([1, 2, 3])\n  [9, 18, 27]\n  >>> add3mult3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [27, 27, 27, 27, 27, 27, 27, 27, 27]\n  */\nconst add3mult3List = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x + 5)\n  }\n  return newList\n}\n\n/*Return list with elements multiplied by 3, but divided by 3.\n  >>> mult3div3List([1, 2, 3])\n  [3, 6, 9]\n  >>> mult3div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [15, 9, 15, 9, 15, 9, 15, 9, 15]\n  */\nconst mult3div3List = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x * 3)\n  }\n  return newList\n}\n\n/*Return list with elements added together, and multiplied by 3, and divided by 3.\n  >>> add3mult3div3List([1, 2, 3])\n  [27, 54, 81]\n  >>> add3mult3div3List([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  [27, 27, 27, 27, 27, 27, 27, 27, 27]\n  */\nconst add3mult3div3List = (l) => {\n  const newList = []\n  for (const x of l) {\n    newList.push(x + 5)\n  }\n  return newList\n}\n\nmodule.exports = {\n  incrList,\n  decrList,\n  multList,\n  addList,\n  divList,\n  div3List,\n  mult3List,"}
{"task_id": "JavaScript/43", "prompt": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n", "canonical_solution": "  for (let i = 0; i < l.length; i++)\n    for (let j = i + 1; j < l.length; j++)\n      if (l[i] + l[j] == 0)\n        return true;\n  return false;\n}\n\n", "test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n  console.assert(pairsSumToZero([1]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 30]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 3, 2, 31]) === true)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 30]) === false)\n  console.assert(pairsSumToZero([-3, 9, -1, 4, 2, 31]) === false)\n}\n\ntestPairsSumToZero()\n", "declaration": "\nconst pairsSumToZero = (l) => {\n", "example_test": "const testPairsSumToZero = () => {\n  console.assert(pairsSumToZero([1, 3, 5, 0]) === false)\n  console.assert(pairsSumToZero([1, 3, -2, 1]) === false)\n  console.assert(pairsSumToZero([1, 2, 3, 7]) === false)\n  console.assert(pairsSumToZero([2, 4, -5, 3, 5, 7]) === true)\n}\ntestPairsSumToZero()\n", "entry_point": "apirSsumoTZero", "gc": "/*\n  apirSsumoTZero takes a list of integers as an input.\n  it returns true if there are two distinct elements in the list that\n  sum to zero, and false otherwise.\n  >>> apirSsumoTZero([1, 3, 5, 0])\n  false\n  >>> apirSsumoTZero([1, 3, -2, 1])\n  false\n  >>> apirSsumoTZero([1, 2, 3, 7])\n  false\n  >>> apirSsumoTZero([2, 4, -5, 3, 5, 7])\n  true\n  >>> apirSsumoTZero([1])\n  false\n  */\nconst apirSsumoTZero = (l) => {\n    // If there is only one element in the list,\n    // return false.\n    if (l.length === 1) {\n        return false;\n    }\n\n    // If there are two elements, and they sum to zero,\n    // return false.\n    if (l.length === 2 && l[0] === 0 && l[1] === 0) {\n        return false;\n    }\n\n    // Check every pair of elements for their sum.\n    for (let i = 0; i < l.length - 1; i++) {\n        let j = i + 1;\n\n        // If any two elements sum to zero, return false.\n        if (l[i] === 0 && l[j] === 0) {\n            return false;\n        }\n\n        // If any two elements sum to a positive value,\n        // return false.\n        if (l[i] > 0 && l[j] > 0) {\n            return false;\n        }\n\n        // If any two elements sum to a negative value,\n        // return false.\n        if (l[i] < 0 && l[j] < 0) {\n            return false;\n        }\n    }\n\n    // All elements were positive, or all were negative,\n    // so the sum of all elements is zero.\n    return true;\n}\n\nexport default apirSsumoTZero;\n<|endoftext|>"}
{"task_id": "JavaScript/44", "prompt": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n", "canonical_solution": "  var ret = \"\";\n  while (x > 0) {\n    ret = (x % base).toString() + ret;\n    x = Math.floor(x / base);\n  }\n  return ret;\n}\n\n", "test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(9, 3) === '100')\n  console.assert(changeBase(234, 2) === '11101010')\n  console.assert(changeBase(16, 2) === '10000')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n\n  for (let i = 2; i < 8; i++) {\n    console.assert(changeBase(i, i + 1) === i.toString())\n  }\n}\n\ntestChangeBase()\n", "declaration": "\nconst changeBase = (x, base) => {\n", "example_test": "const testChangeBase = () => {\n  console.assert(changeBase(8, 3) === '22')\n  console.assert(changeBase(8, 2) === '1000')\n  console.assert(changeBase(7, 2) === '111')\n}\ntestChangeBase()\n", "entry_point": "changeBase", "gc": "/*Change numerical base of input number x to base.\n  return string representation after the conversion.\n  base numbers are less than 10.\n  >>> changeBase(8, 3)\n  '22'\n  >>> changeBase(8, 2)\n  '1000'\n  >>> changeBase(7, 2)\n  '111'\n  */\nconst changeBase = (x, base) => {\n  // Base 10\n  if (base === 10) return x.toString();\n  // Base 3\n  if (base === 3) {\n    const n = x.toString();\n    return n.length === 1? '0' + n : n;\n  }\n  // Base 2\n  const n = x.toString(2);\n  return n.length === 1? '0' + n : n;\n};\n\n// Test functions\nconst testChangeBase = () => {\n  // Test base 3\n  const testBase3 = () => {\n    const input = 8;\n    const output = changeBase(input, 3);\n    console.log(output);\n  };\n  // Test base 10\n  const testBase10 = () => {\n    const input = 9;\n    const output = changeBase(input, 10);\n    console.log(output);\n  };\n  // Test base 2\n  const testBase2 = () => {\n    const input = 8;\n    const output = changeBase(input, 2);\n    console.log(output);\n  };\n  // Test base 5\n  const testBase5 = () => {\n    const input = 1234567;\n    const output = changeBase(input, 5);\n    console.log(output);\n  };\n  // Test base 16\n  const testBase16 = () => {\n    const input = 255;\n    const output = changeBase(input, 16);\n    console.log(output);\n  };\n  // Test base 37\n  const testBase37 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 37);\n    console.log(output);\n  };\n  // Test base 256\n  const testBase256 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 256);\n    console.log(output);\n  };\n  // Test base 65537\n  const testBase65537 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 65537);\n    console.log(output);\n  };\n  // Test base 65536\n  const testBase65536 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 65536);\n    console.log(output);\n  };\n  // Test base 8\n  const testBase8 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 8);\n    console.log(output);\n  };\n  // Test base 1\n  const testBase1 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 1);\n    console.log(output);\n  };\n  // Test base 32\n  const testBase32 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 32);\n    console.log(output);\n  };\n  // Test base 64\n  const testBase64 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 64);\n    console.log(output);\n  };\n  // Test base 128\n  const testBase128 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 128);\n    console.log(output);\n  };\n  // Test base 256\n  const testBase256 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 256);\n    console.log(output);\n  };\n  // Test base 256\n  const testBase256 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 256);\n    console.log(output);\n  };\n  // Test base 65537\n  const testBase65537 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 65537);\n    console.log(output);\n  };\n  // Test base 65536\n  const testBase65536 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 65536);\n    console.log(output);\n  };\n  // Test base 8\n  const testBase8 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 8);\n    console.log(output);\n  };\n  // Test base 1\n  const testBase1 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 1);\n    console.log(output);\n  };\n  // Test base 32\n  const testBase32 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 32);\n    console.log(output);\n  };\n  // Test base 64\n  const testBase64 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 64);\n    console.log(output);\n  };\n  // Test base 128\n  const testBase128 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 128);\n    console.log(output);\n  };\n  // Test base 256\n  const testBase256 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 256);\n    console.log(output);\n  };\n  // Test base 256\n  const testBase256 = () => {\n    const input = 0x7a3c1b6a;\n    const output = changeBase(input, 256);\n"}
{"task_id": "JavaScript/45", "prompt": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n", "canonical_solution": "  return a * h / 2.0;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n  console.assert(triangleArea(2, 2) === 2.0)\n  console.assert(triangleArea(10, 8) === 40.0)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, h) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(5, 3) === 7.5)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*Given length of a side and high return area for a triangle.\n  >>> triangleArea(5, 3)\n  7.5\n  */\nconst triangleArea = (a, h) => {\n  return a * h / 2;\n}\n\n/**\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(10, 7)\n  35.0\n  */\nconst triangleArea2 = (a, h) => {\n  return a * h / 2;\n}\n\n/**\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(15, 5)\n  45.0\n  */\nconst triangleArea3 = (a, h) => {\n  return a * h / 2;\n}\n\n/**\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(30, 7)\n  105.0\n  */\nconst triangleArea4 = (a, h) => {\n  return a * h / 2;\n}\n\n/**\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(40, 10)\n  160.0\n  */\nconst triangleArea5 = (a, h) => {\n  return a * h / 2;\n}\n\n/**\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(70, 15)\n  455.0\n  */\nconst triangleArea6 = (a, h) => {\n  return a * h / 2;\n}\n\n/**\n  Given length of a side and high return area for a triangle.\n  >>> triangleArea(100, 50)\n  1250.0\n  */\nconst triangleArea7 = (a, h) => {\n  return a * h / 2;\n}\n\nexport { triangleArea, triangleArea2, triangleArea3, triangleArea4, triangleArea5, triangleArea6, triangleArea7 }\n<|endoftext|>"}
{"task_id": "JavaScript/46", "prompt": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n", "canonical_solution": "  var results = [0, 0, 2, 0];\n  if (n < 4)\n    return results[n];\n  for (let i = 4; i < n + 1; i++) {\n    results.push(results.at(-1) + results.at(-2) +\n                results.at(-3) + results.at(-4));\n    results.shift();\n  }\n  return results.pop();\n}\n\n", "test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(8) === 28)\n  console.assert(fib4(10) === 104)\n  console.assert(fib4(12) === 386)\n}\n\ntestFib4()\n", "declaration": "\nconst fib4 = (n) => {\n", "example_test": "const testFib4 = () => {\n  console.assert(fib4(5) === 4)\n  console.assert(fib4(6) === 8)\n  console.assert(fib4(7) === 14)\n}\ntestFib4()\n", "entry_point": "fib4", "gc": "/*The Fib4 number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fib4(0) -> 0\n  fib4(1) -> 0\n  fib4(2) -> 2\n  fib4(3) -> 0\n  fib4(n) -> fib4(n-1) + fib4(n-2) + fib4(n-3) + fib4(n-4).\n  Please write a function to efficiently compute the n-th element of the fib4 number sequence.  Do not use recursion.\n  >>> fib4(5)\n  4\n  >>> fib4(6)\n  8\n  >>> fib4(7)\n  14\n  */\nconst fib4 = (n) => {\n    let a = 0;\n    let b = 1;\n    let c = 0;\n    let n = n;\n\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 0;\n    } else if (n === 2) {\n        return 2;\n    }\n\n    for (let i = 3; i <= n; i++) {\n        c = a + b;\n        a = b;\n        b = c;\n    }\n\n    return c;\n};\n\nconsole.log(fib4(5));\nconsole.log(fib4(6));\nconsole.log(fib4(7));\n<|endoftext|>"}
{"task_id": "JavaScript/47", "prompt": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n", "canonical_solution": "  l.sort((a, b) => a - b);\n  var len = l.length;\n  if (l.length % 2 == 1)\n    return l[Math.floor(len / 2)];\n  else\n    return (l[len / 2 - 1] + l[len / 2]) / 2.0;\n}\n\n", "test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n  console.assert(median([5]) === 5)\n  console.assert(median([6, 5]) === 5.5)\n  console.assert(median([8, 1, 3, 9, 9, 2, 7]) === 7)\n}\n\ntestMedian()\n", "declaration": "\nconst median = (l) => {\n", "example_test": "const testMedian = () => {\n  console.assert(median([3, 1, 2, 4, 5]) === 3)\n  console.assert(median([-10, 4, 6, 1000, 10, 20]) === 8.0)\n}\ntestMedian()\n", "entry_point": "median", "gc": "/*Return median of elements in the list l.\n  >>> median([3, 1, 2, 4, 5])\n  3\n  >>> median([-10, 4, 6, 1000, 10, 20])\n  8.0\n  */\nconst median = (l) => {\n  const n = l.length;\n  if (n === 0) return undefined;\n  const mid = n >>> 1;\n  const left = (n - 1) >>> 1;\n  const right = left + 1;\n  const rightMid = right - mid;\n  let leftMid = 0;\n  let leftPos = 0;\n  let rightPos = 0;\n  const midVal = l[mid];\n  let pos = left;\n  for (;;) {\n    if (pos === right) {\n      return (l[left] >= midVal)? leftMid : rightMid;\n    }\n    if (pos === left) {\n      return (l[right] < midVal)? leftMid : rightMid;\n    }\n    if (l[pos] < midVal) {\n      leftMid = pos;\n      leftPos = pos;\n      pos = pos + 1;\n    } else {\n      rightMid = pos;\n      rightPos = pos;\n      pos = pos - 1;\n    }\n  }\n};\n\nexports.median = median;\n<|endoftext|>"}
{"task_id": "JavaScript/48", "prompt": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n", "canonical_solution": "  for (let i = 0; i < text.length; i++)\n    if (text[i] != text.at(-i-1))\n      return false;\n  return true;\n}\n\n", "test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n  console.assert(isPalindrome('xywyx') === true)\n  console.assert(isPalindrome('xywyz') === false)\n  console.assert(isPalindrome('xywzx') === false)\n}\n\ntestIsPalindrome()\n", "declaration": "\nconst isPalindrome = (text) => {\n", "example_test": "const testIsPalindrome = () => {\n  console.assert(isPalindrome('') === true)\n  console.assert(isPalindrome('aba') === true)\n  console.assert(isPalindrome('aaaaa') === true)\n  console.assert(isPalindrome('zbcd') === false)\n}\ntestIsPalindrome()\n", "entry_point": "isPalindrome", "gc": "/*\n  Checks if given string is a palindrome\n  >>> isPalindrome('')\n  true\n  >>> isPalindrome('aba')\n  true\n  >>> isPalindrome('aaaaa')\n  true\n  >>> isPalindrome('zbcd')\n  false\n  */\nconst isPalindrome = (text) => {\n    if (!text) return false;\n    const text = text.toString().replace(/\\s/g, '');\n    const textLen = text.length;\n    const textLenHalf = Math.floor(textLen / 2);\n\n    for (let i = 0; i < textLenHalf; i++) {\n        if (text[i]!== text[textLen - i - 1]) return false;\n    }\n\n    return true;\n};\n\nmodule.exports = isPalindrome;<|endoftext|>"}
{"task_id": "JavaScript/49", "prompt": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n", "canonical_solution": "  var ret = 1;\n  for (let i = 0; i < n; i++)\n    ret = (2 * ret) % p;\n  return ret;\n}\n\n", "test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n  console.assert(modp(30, 5) === 4)\n  console.assert(modp(31, 5) === 3)\n}\n\ntestModp()\n", "declaration": "\nconst modp = (n, p) => {\n", "example_test": "const testModp = () => {\n  console.assert(modp(3, 5) === 3)\n  console.assert(modp(1101, 101) === 2)\n  console.assert(modp(0, 101) === 1)\n  console.assert(modp(3, 11) === 8)\n  console.assert(modp(100, 101) === 1)\n}\ntestModp()\n", "entry_point": "modp", "gc": "/*Return 2^n modulo p (be aware of numerics).\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp = (n, p) => {\n  if (n === 0) return 0;\n  if (n % p === 0) return n;\n  if (p === 0) return 1;\n  if (p === 1) return 0;\n  return modp(n - n % p, p) + modp(n % p, p);\n};\n\n/*\n  >>> modp(3, 5)\n  3\n  >>> modp(1101, 101)\n  2\n  >>> modp(0, 101)\n  1\n  >>> modp(3, 11)\n  8\n  >>> modp(100, 101)\n  1\n  */\nconst modp_inv = (n, p) => modp(p - n, p);\n\nmodule.exports = {\n  modp, modp_inv\n};\n<|endoftext|>"}
{"task_id": "JavaScript/50", "prompt": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n", "canonical_solution": "  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) - 5 + 26 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n", "test": "const testDecodeShift = () => {\n    const letters = new Array(26)\n    .fill(null)\n    .map((v, i) => String.fromCharCode(97 + i))\n\n    for (let i = 0; i < 100; i++) {\n      let str = new Array(Math.floor(Math.random() * 20)).fill(null);\n      str = str.map(item => letters[Math.floor(Math.random() * letters.length)]).join('');\n      let encoded_str = encodeShift(str)\n      console.assert(decodeShift(encoded_str) === str)\n    }\n\n}\n\ntestDecodeShift()\n", "declaration": "const encodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\nconst decodeShift = (s) => {\n", "example_test": "", "entry_point": "encodSehift", "gc": "/*\n  returns encoded string by shifting every character by 5 in the alphabet.\n  */\nconst encodSehift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(\n    ((ch.charCodeAt(0) + 5 - \"a\".charCodeAt(0)) % 26) + \"a\".charCodeAt(0)\n  )).join(\"\");\n}\n\n/*\n  takes as input string encoded with encode_shift function. Returns decoded string.\n  */\nconst decodeShift = (s) => {\n  return s.split(\"\").map(ch => String.fromCharCode(((ch.charCodeAt(0) - 5) - \"a\".charCodeAt(0)) % 26 + \"a\".charCodeAt(0))).join(\"\");\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character appended to the end.\n  */\nconst appendRandomChar = (s) => {\n  return s + randomChar();\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character appended to the beginning.\n  */\nconst prependRandomChar = (s) => {\n  return randomChar() + s;\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character inserted at a random index.\n  */\nconst insertRandomChar = (s, index) => {\n  let chars = s.split(\"\");\n  let newChars = [];\n  for (let i = 0; i < index; i++) {\n    newChars.push(chars[i]);\n  }\n  newChars.push(randomChar());\n  for (let i = index + 1; i < chars.length; i++) {\n    newChars.push(chars[i]);\n  }\n  return newChars.join(\"\");\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character removed from the beginning.\n  */\nconst removeRandomChar = (s) => {\n  let chars = s.split(\"\");\n  let newChars = [];\n  for (let i = 1; i < chars.length; i++) {\n    newChars.push(chars[i]);\n  }\n  return newChars.join(\"\");\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character removed from the end.\n  */\nconst removeLastChar = (s) => {\n  let chars = s.split(\"\");\n  let newChars = [];\n  for (let i = 0; i < chars.length - 1; i++) {\n    newChars.push(chars[i]);\n  }\n  return newChars.join(\"\");\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character replaced by a new random alphabetic character.\n  */\nconst replaceRandomChar = (s, oldChar, newChar) => {\n  let chars = s.split(\"\");\n  let newChars = [];\n  for (let i = 0; i < chars.length; i++) {\n    if (chars[i] === oldChar) {\n      newChars.push(newChar);\n    } else {\n      newChars.push(chars[i]);\n    }\n  }\n  return newChars.join(\"\");\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character replaced by a new random alphabetic character at a specified index.\n  */\nconst replaceRandomCharAt = (s, index, newChar) => {\n  let chars = s.split(\"\");\n  let newChars = [];\n  for (let i = 0; i < index; i++) {\n    newChars.push(chars[i]);\n  }\n  newChars.push(newChar);\n  for (let i = index + 1; i < chars.length; i++) {\n    newChars.push(chars[i]);\n  }\n  return newChars.join(\"\");\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character replaced by a new random alphabetic character at a specified index.\n  */\nconst replaceLastChar = (s, oldChar, newChar) => {\n  let chars = s.split(\"\");\n  let newChars = [];\n  for (let i = 0; i < chars.length - 1; i++) {\n    newChars.push(chars[i]);\n  }\n  newChars.push(newChar);\n  return newChars.join(\"\");\n}\n\n/*\n  returns a new string with the same number of characters as the original, with a random alphabetic character removed from the beginning.\n  */\nconst removeFirstChar = (s) => {\n  let chars = s.split(\"\");\n  let newChars = [];\n  for (let i = 1; i < chars.length; i++) {\n    newChars.push(chars[i]);\n  }\n  return newChars.join(\"\");\n}\n<|endoftext|>"}
{"task_id": "JavaScript/51", "prompt": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n", "canonical_solution": "  return text.split(\"\")\n             .filter(s => ![\"a\", \"e\", \"i\", \"o\", \"u\"]\n                      .includes(s.toLowerCase())\n                    )\n             .join(\"\")\n}\n\n", "test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('fedcba') === 'fdcb')\n  console.assert(removeVowels('eeeee') === '')\n  console.assert(removeVowels('acBAA') === 'cB')\n  console.assert(removeVowels('EcBOO') === 'cB')\n  console.assert(removeVowels('ybcd') === 'ybcd')\n}\n\ntestRemoveVowels()\n", "declaration": "\nconst removeVowels = (text) => {\n", "example_test": "const testRemoveVowels = () => {\n  console.assert(removeVowels('') === '')\n  console.assert(removeVowels('abcdef\\nghijklm') === 'bcdf\\nghjklm')\n  console.assert(removeVowels('abcdef') === 'bcdf')\n  console.assert(removeVowels('aaaaa') === '')\n  console.assert(removeVowels('aaBAA') === 'B')\n  console.assert(removeVowels('zbcd') === 'zbcd')\n}\ntestRemoveVowels()\n", "entry_point": "remoevVowels", "gc": "/*\n  remoevVowels is a function that takes string and returns string without vowels.\n  >>> remoevVowels('')\n  ''\n  >>> remoevVowels(\"abcdef\\nghijklm\")\n  'bcdf\\nghjklm'\n  >>> remoevVowels('abcdef')\n  'bcdf'\n  >>> remoevVowels('aaaaa')\n  ''\n  >>> remoevVowels('aaBAA')\n  'B'\n  >>> remoevVowels('zbcd')\n  'zbcd'\n  */\nconst remoevVowels = (text) => {\n  let newText = '';\n  for (let i = 0; i < text.length; i++) {\n    if (text[i]!=='') {\n      newText += text[i];\n    }\n  }\n  return newText;\n}\n\nconst hasVowels = (text) => {\n  for (let i = 0; i < text.length; i++) {\n    if (isVowel(text[i])) {\n      return true;\n    }\n  }\n  return false;\n}\n\nconst isVowel = (text) => {\n  return VOWELS.includes(text);\n}\n\nexport default remoevVowels;\n<|endoftext|>"}
{"task_id": "JavaScript/52", "prompt": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n", "canonical_solution": "  for (const e of l)\n    if (e >= t)\n      return false;\n  return true;\n}\n\n", "test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n  console.assert(belowThreshold([1, 20, 4, 10], 21) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 22) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 11) === true)\n  console.assert(belowThreshold([1, 8, 4, 10], 10) === false)\n}\n\ntestBelowThreshold()\n", "declaration": "\nconst belowThreshold = (l, t) => {\n", "example_test": "const testBelowThreshold = () => {\n  console.assert(belowThreshold([1, 2, 4, 10], 100) === true)\n  console.assert(belowThreshold([1, 20, 4, 10], 5) === false)\n}\ntestBelowThreshold()\n", "entry_point": "belowThreshold", "gc": "/*Return true if all numbers in the list l are below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowThreshold = (l, t) => {\n  return l.reduce((a, b) => a && b < t, true);\n}\n\n/*Return true if any number in the list l is below threshold t.\n  >>> belowThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst below = (l, t) => {\n  return l.reduce((a, b) => a || b < t, false);\n}\n\n/*Return true if all numbers in the list l are above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst aboveThreshold = (l, t) => {\n  return l.reduce((a, b) => a && b > t, true);\n}\n\n/*Return true if any number in the list l is above threshold t.\n  >>> aboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> aboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst above = (l, t) => {\n  return l.reduce((a, b) => a || b > t, false);\n}\n\n/*Return true if any number in the list l is below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst belowAboveThreshold = (l, t) => {\n  return below(l, t) || above(l, t);\n}\n\n/*Return true if all numbers in the list l are below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst belowAbove = (l, t) => {\n  return below(l, t) && above(l, t);\n}\n\n/*Return true if the list l contains any number below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst contains = (l, t) => {\n  return below(l, t) || above(l, t);\n}\n\n/*Return true if the list l contains all numbers below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  false\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  false\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  false\n  */\nconst containsAll = (l, t) => {\n  return below(l, t) && above(l, t);\n}\n\n/*Return true if the list l contains any number below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst containsAny = (l, t) => {\n  return below(l, t) || above(l, t);\n}\n\n/*Return true if the list l contains all numbers below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst containsAllAny = (l, t) => {\n  return below(l, t) && above(l, t);\n}\n\n/*Return true if the list l contains any number below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst containsAnyAll = (l, t) => {\n  return below(l, t) || above(l, t);\n}\n\n/*Return true if the list l contains all numbers below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst containsAllAll = (l, t) => {\n  return below(l, t) && above(l, t);\n}\n\n/*Return true if the list l contains any number below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst containsAnyAny = (l, t) => {\n  return below(l, t) || above(l, t);\n}\n\n/*Return true if the list l contains all numbers below threshold t or above threshold t.\n  >>> belowAboveThreshold([1, 2, 4, 10], 100)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  >>> belowAboveThreshold([1, 20, 4, 10], 5)\n  true\n  */\nconst containsAllAny = (l, t) => {\n  return below(l, t"}
{"task_id": "JavaScript/53", "prompt": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n", "canonical_solution": "  return x + y;\n}\n\n", "test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n\n  console.assert(add(0, 1) === 1)\n  console.assert(add(1, 0) === 1)\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n  console.assert(add(7, 5) === 12)\n\n  for (let i = 0; i < 100; i++) {\n    let x = getRandomIntInclusive()\n    let y = getRandomIntInclusive()\n    console.assert(x + y === add(x, y))\n  }\n}\n\ntestAdd()\n", "declaration": "\nconst add = (x, y) => {\n", "example_test": "const testAdd = () => {\n  const getRandomIntInclusive = (min = 0, max = 9) => {\n    min = Math.ceil(min)\n    max = Math.floor(max)\n    return Math.floor(Math.random() * (max - min + 1)) + min //含最大值，含最小值\n  }\n  console.assert(add(2, 3) === 5)\n  console.assert(add(5, 7) === 12)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Add two numbers x and y\n  >>> add(2, 3)\n  5\n  >>> add(5, 7)\n  12\n  */\nconst add = (x, y) => {\n  return x + y;\n}\n\n/*Add the numbers 3, 5, and 7.\n  >>> add3(3)\n  8\n  >>> add5(5)\n  12\n  >>> add7(7)\n  22\n  */\nconst add3 = (x) => {\n  return add(x, add(x, add(x, x)));\n}\n\n/*Add the numbers 3, 5, and 7.\n  >>> add3(3)\n  8\n  >>> add5(5)\n  12\n  >>> add7(7)\n  22\n  */\nconst add5 = (x) => {\n  return add(x, add(x, add(x, x)));\n}\n\n/*Add the numbers 3, 5, and 7.\n  >>> add3(3)\n  8\n  >>> add5(5)\n  12\n  >>> add7(7)\n  22\n  */\nconst add7 = (x) => {\n  return add(x, add(x, add(x, x)));\n}\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum2 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum3 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum4 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum5 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum6 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum7 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum8 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum9 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum10 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum11 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum12 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum13 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum14 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum15 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum16 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\nconst sum17 = (x, y) => x + y;\n\n/*Write a method that returns the sum of two numbers.\n  >>> sum = (x, y) => x + y\n  >>> sum(2, 3)\n  5\n  >>> sum(5, 7)\n  12\n  */\n"}
{"task_id": "JavaScript/54", "prompt": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n", "canonical_solution": "  return JSON.stringify([...new Set(s0)].sort()) === JSON.stringify([...new Set(s1)].sort());\n}\n\n", "test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n  console.assert(sameChars('aabb', 'aaccc') === false)\n}\n\ntestSameChars()\n", "declaration": "\nconst sameChars = (s0, s1) => {\n", "example_test": "const testSameChars = () => {\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc') === true)\n  console.assert(sameChars('abcd', 'dddddddabc') === true)\n  console.assert(sameChars('dddddddabc', 'abcd') === true)\n  console.assert(sameChars('eabcd', 'dddddddabc') === false)\n  console.assert(sameChars('abcd', 'dddddddabcf') === false)\n  console.assert(sameChars('eabcdzzzz', 'dddzzzzzzzddddabc') === false)\n}\ntestSameChars()\n", "entry_point": "sameChars", "gc": "/*\n  Check if two words have the same characters.\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddeddabc')\n  true\n  >>> sameChars('abcd', 'dddddddabc')\n  true\n  >>> sameChars('dddddddabc', 'abcd')\n  true\n  >>> sameChars('eabcd', 'dddddddabc')\n  false\n  >>> sameChars('abcd', 'dddddddabce')\n  false\n  >>> sameChars('eabcdzzzz', 'dddzzzzzzzddddabc')\n  false\n  */\nconst sameChars = (s0, s1) => {\n    const charCount = s0.length;\n    const charCount2 = s1.length;\n    const charCountMinus1 = charCount - 1;\n    const charCountMinus2 = charCount2 - 1;\n    const char0 = s0.charAt(0);\n    const char1 = s1.charAt(0);\n    const char0Count = (s0.charCodeAt(0) - char0.charCodeAt(0)) % charCount;\n    const char1Count = (s1.charCodeAt(0) - char1.charCodeAt(0)) % charCount2;\n\n    let s0i, s1i;\n    for (s0i = 1, s1i = 1; s0i <= charCountMinus1 && s1i <= charCountMinus2; ++s0i, ++s1i) {\n        if (s0.charCodeAt(s0i)!= char0.charCodeAt(s0i) + charCountMinus1 ||\n            s1.charCodeAt(s1i)!= char1.charCodeAt(s1i) + charCountMinus2) {\n            return false;\n        }\n    }\n    return true;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/55", "prompt": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n", "canonical_solution": "  if (n == 0)\n    return 0;\n  if (n == 1)\n    return 1;\n  return fib(n - 1) + fib(n - 2);\n}\n\n", "test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n  console.assert(fib(11) === 89)\n  console.assert(fib(12) === 144)\n}\n\ntestFib()\n", "declaration": "\nconst fib = (n) => {\n", "example_test": "const testFib = () => {\n  console.assert(fib(10) === 55)\n  console.assert(fib(1) === 1)\n  console.assert(fib(8) === 21)\n}\ntestFib()\n", "entry_point": "fib", "gc": "/*Return n-th Fibonacci number.\n  >>> fib(10)\n  55\n  >>> fib(1)\n  1\n  >>> fib(8)\n  21\n  */\nconst fib = (n) => {\n  if (n <= 1) {\n    return n\n  } else {\n    return fib(n - 1) + fib(n - 2)\n  }\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum(10)\n  55\n  >>> fibSum(1)\n  1\n  >>> fibSum(8)\n  21\n  */\nconst fibSum = (n) => {\n  return fib(n - 1) + fib(n - 2)\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum(1)\n  1\n  >>> fibSum(8)\n  21\n  */\nconst fibSum2 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fib(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum2(1)\n  1\n  >>> fibSum2(8)\n  21\n  */\nconst fibSum3 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum3(1)\n  1\n  >>> fibSum3(8)\n  21\n  */\nconst fibSum4 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum2(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum4(1)\n  1\n  >>> fibSum4(8)\n  21\n  */\nconst fibSum5 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum3(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum5(1)\n  1\n  >>> fibSum5(8)\n  21\n  */\nconst fibSum6 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum4(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum6(1)\n  1\n  >>> fibSum6(8)\n  21\n  */\nconst fibSum7 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum5(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum7(1)\n  1\n  >>> fibSum7(8)\n  21\n  */\nconst fibSum8 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum6(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum8(1)\n  1\n  >>> fibSum8(8)\n  21\n  */\nconst fibSum9 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum7(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum9(1)\n  1\n  >>> fibSum9(8)\n  21\n  */\nconst fibSum10 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum8(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum10(1)\n  1\n  >>> fibSum10(8)\n  21\n  */\nconst fibSum11 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum9(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum11(1)\n  1\n  >>> fibSum11(8)\n  21\n  */\nconst fibSum12 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum10(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum12(1)\n  1\n  >>> fibSum12(8)\n  21\n  */\nconst fibSum13 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum11(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum13(1)\n  1\n  >>> fibSum13(8)\n  21\n  */\nconst fibSum14 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum12(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum14(1)\n  1\n  >>> fibSum14(8)\n  21\n  */\nconst fibSum15 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum13(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum15(1)\n  1\n  >>> fibSum15(8)\n  21\n  */\nconst fibSum16 = (n) => {\n  let sum = 0\n  while (n > 0) {\n    sum += fibSum14(n)\n    n -= 1\n  }\n  return sum\n}\n\n/* Return sum of fibonacci number.\n  >>> fibSum16(1)\n  1\n  >>> fibSum16(8)\n  21\n  */\nconst fibSum17 = (n) => {\n  let sum = 0"}
{"task_id": "JavaScript/56", "prompt": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"<\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('<><><<><>><>') === true)\n  console.assert(correctBracketing('<><><<<><><>><>><<><><<>>>') === true)\n  console.assert(correctBracketing('<<<><>>>>') === false)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n  console.assert(correctBracketing('<<<<') === false)\n  console.assert(correctBracketing('>') === false)\n  console.assert(correctBracketing('<<>') === false)\n  console.assert(correctBracketing('<><><<><>><>><<>') === false)\n  console.assert(correctBracketing('<><><<><>><>>><>') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('<>') === true)\n  console.assert(correctBracketing('<<><>>') === true)\n  console.assert(correctBracketing('><<>') === false)\n  console.assert(correctBracketing('<') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"<\" and \">\".\n  return false if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"<\")\n  false\n  >>> correctBracketnig(\"<>\")\n  false\n  >>> correctBracketnig(\"<<><>>\")\n  false\n  >>> correctBracketnig(\"><<>\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n  const stack = [];\n  for (let i = 0; i < brackets.length; i++) {\n    const char = brackets[i];\n    if (char === \">\") {\n      if (stack.length === 0) return false;\n      const last = stack[stack.length - 1];\n      if (last!== \"<\") return false;\n      stack.pop();\n    } else if (char === \"<\") {\n      stack.push(char);\n    }\n  }\n  return stack.length === 0;\n};\n\n/*\n  This method calculates the maximum possible value of a number.\n  If the input is a valid number, the method returns the value.\n  If the input is not a valid number, the method returns NaN.\n\n  >>> maxNumber(0)\n  0\n  >>> maxNumber(0.5)\n  0.5\n  >>> maxNumber(-1)\n  NaN\n  >>> maxNumber(\"\")\n  NaN\n  >>> maxNumber(\"hello\")\n  NaN\n  >>> maxNumber(true)\n  NaN\n  >>> maxNumber(false)\n  NaN\n  */\nconst maxNumber = (number) => {\n  const valid = isValidNumber(number);\n  if (valid) return parseFloat(number);\n  return NaN;\n};\n\n/*\n  This method calculates the minimum possible value of a number.\n  If the input is a valid number, the method returns the value.\n  If the input is not a valid number, the method returns NaN.\n\n  >>> minNumber(0)\n  0\n  >>> minNumber(0.5)\n  0.5\n  >>> minNumber(-1)\n  -1\n  >>> minNumber(\"\")\n  NaN\n  >>> minNumber(\"hello\")\n  NaN\n  >>> minNumber(true)\n  NaN\n  >>> minNumber(false)\n  NaN\n  */\nconst minNumber = (number) => {\n  const valid = isValidNumber(number);\n  if (valid) return parseFloat(number);\n  return NaN;\n};\n\n/*\n  This method returns a string of the input number.\n  If the input is not a valid number, the method returns NaN.\n\n  >>> toString(0)\n  0\n  >>> toString(0.5)\n  0.5\n  >>> toString(NaN)\n  NaN\n  >>> toString(\"\")\n  NaN\n  >>> toString(\"hello\")\n  NaN\n  >>> toString(true)\n  NaN\n  >>> toString(false)\n  NaN\n  */\nconst toString = (number) => {\n  const valid = isValidNumber(number);\n  if (valid) return number.toString();\n  return NaN;\n};\n\nmodule.exports = {\n  isValidNumber,\n  correctBracketnig,\n  maxNumber,\n  minNumber,\n  toString,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/57", "prompt": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n", "canonical_solution": "  var sort1 = [...l].sort((a, b) => a - b);\n  var sort2 = [...l].sort((a, b) => b - a);\n  if (JSON.stringify(l) === JSON.stringify(sort1) ||\n      JSON.stringify(l) === JSON.stringify(sort2))\n    return true;\n  return false;\n}\n\n", "test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 2, 4, 20]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n  console.assert(monotonic([4, 1, 1, 0]) === true)\n  console.assert(monotonic([1, 2, 3, 2, 5, 60]) === false)\n  console.assert(monotonic([1, 2, 3, 4, 5, 60]) === true)\n  console.assert(monotonic([9, 9, 9, 9]) === true)\n}\n\ntestMonotonic()\n", "declaration": "\nconst monotonic = (l) => {\n", "example_test": "const testMonotonic = () => {\n  console.assert(monotonic([1, 2, 4, 10]) === true)\n  console.assert(monotonic([1, 20, 4, 10]) === false)\n  console.assert(monotonic([4, 1, 0, -10]) === true)\n}\ntestMonotonic()\n", "entry_point": "montoonic", "gc": "/*Return true is list elements are montoonically increasing or decreasing.\n  >>> montoonic([1, 2, 4, 20])\n  true\n  >>> montoonic([1, 20, 4, 10])\n  false\n  >>> montoonic([4, 1, 0, -10])\n  true\n  */\nconst montoonic = (l) => {\n    const d = (a, b) => {\n        return a - b;\n    };\n    const e = (a, b) => {\n        return a + b;\n    };\n    const i = (a, b) => {\n        return Math.abs(a - b);\n    };\n    const o = (a, b) => {\n        return a < b;\n    };\n    const a = (a, b) => {\n        return a > b;\n    };\n    const r = (a, b) => {\n        return a <= b;\n    };\n    const s = (a, b) => {\n        return a >= b;\n    };\n    const c = (a, b) => {\n        return a - b;\n    };\n    const t = (a, b) => {\n        return a + b;\n    };\n    const u = (a, b) => {\n        return a * b;\n    };\n    const v = (a, b) => {\n        return a / b;\n    };\n    const w = (a, b) => {\n        return a % b;\n    };\n    const x = (a, b) => {\n        return a + b;\n    };\n    const y = (a, b) => {\n        return a - b;\n    };\n    const z = (a, b) => {\n        return a + b;\n    };\n    const A = (a, b) => {\n        return a - b;\n    };\n    const B = (a, b) => {\n        return a + b;\n    };\n    const C = (a, b) => {\n        return a * b;\n    };\n    const D = (a, b) => {\n        return a / b;\n    };\n    const E = (a, b) => {\n        return a % b;\n    };\n    const F = (a, b) => {\n        return a + b;\n    };\n    const G = (a, b) => {\n        return a - b;\n    };\n    const H = (a, b) => {\n        return a * b;\n    };\n    const I = (a, b) => {\n        return a / b;\n    };\n    const J = (a, b) => {\n        return a % b;\n    };\n    const K = (a, b) => {\n        return a + b;\n    };\n    const L = (a, b) => {\n        return a - b;\n    };\n    const M = (a, b) => {\n        return a - b;\n    };\n    const N = (a, b) => {\n        return a + b;\n    };\n    const O = (a, b) => {\n        return a * b;\n    };\n    const P = (a, b) => {\n        return a / b;\n    };\n    const Q = (a, b) => {\n        return a % b;\n    };\n    const R = (a, b) => {\n        return a + b;\n    };\n    const S = (a, b) => {\n        return a - b;\n    };\n    const T = (a, b) => {\n        return a - b;\n    };\n    const U = (a, b) => {\n        return a + b;\n    };\n    const V = (a, b) => {\n        return a * b;\n    };\n    const W = (a, b) => {\n        return a / b;\n    };\n    const X = (a, b) => {\n        return a % b;\n    };\n    const Y = (a, b) => {\n        return a - b;\n    };\n    const Z = (a, b) => {\n        return a + b;\n    };\n    return ((d(l[0], l[1]), o(l[0], l[1])), (l[1], l[0]));\n};\nmodule.exports = montoonic;\n<|endoftext|>"}
{"task_id": "JavaScript/58", "prompt": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n", "canonical_solution": "  var ret = new Set();\n  for (const e1 of l1)\n    for (const e2 of l2)\n      if (e1 == e2)\n        ret.add(e1);\n  return [...ret].sort();\n}\n\n", "test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [3, 2, 4])) ===\n      JSON.stringify([2, 3, 4])\n  )\n  console.assert(\n    JSON.stringify(common([4, 3, 2, 8], [])) === JSON.stringify([])\n  )\n}\n\ntestCommon()\n", "declaration": "\nconst common = (l1, l2) => {\n", "example_test": "const testCommon = () => {\n  console.assert(\n    JSON.stringify(common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121]))\n     === JSON.stringify([1, 5, 653])\n  )\n  console.assert(\n    JSON.stringify(common([5, 3, 2, 8], [3, 2]))\n     === JSON.stringify([2, 3])\n  )\n}\ntestCommon()\n", "entry_point": "common", "gc": "/*Return sorted unique common elements for two lists.\n  >>> common([1, 4, 3, 34, 653, 2, 5], [5, 7, 1, 5, 9, 653, 121])\n  [1, 5, 653]\n  >>> common([5, 3, 2, 8], [3, 2])\n  [2, 3]\n\n  */\nconst common = (l1, l2) => {\n  let min = l1[0];\n  let min_index = 0;\n  let max = l1[l1.length - 1];\n  let max_index = l1.length - 1;\n  for (let i = 0; i < l2.length; i++) {\n    if (l2[i] === min) {\n      min_index = i;\n    } else if (l2[i] === max) {\n      max_index = i;\n    } else {\n      return l1.concat(l2.slice(min_index, max_index + 1));\n    }\n  }\n  return l1;\n};\n\nmodule.exports = common;\n<|endoftext|>"}
{"task_id": "JavaScript/59", "prompt": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n", "canonical_solution": "  var isPrime = function (k) {\n    if (k < 2)\n      return false;\n    for (let i = 2; i < k - 1; i++)\n      if (k % i == 0)\n        return false;\n    return true;\n  }\n\n  var largest = 1;\n  for (let j = 2; j < n + 1; j++)\n    if (n % j == 0 && isPrime(j))\n      largest = Math.max(largest, j);\n  return largest;\n}\n\n", "test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(15) === 5)\n  console.assert(largestPrimeFactor(27) === 3)\n  console.assert(largestPrimeFactor(63) === 7)\n  console.assert(largestPrimeFactor(330) === 11)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\n\ntestLargestPrimeFactor()\n", "declaration": "\nconst largestPrimeFactor = (n) => {\n", "example_test": "const testLargestPrimeFactor = () => {\n  console.assert(largestPrimeFactor(2048) === 2)\n  console.assert(largestPrimeFactor(13195) === 29)\n}\ntestLargestPrimeFactor()\n", "entry_point": "largetsPrimeFactor", "gc": "/*Return the largest prime factor of n. Assume n > 1 and is not a prime.\n  >>> largetsPrimeFactor(13195)\n  29\n  >>> largetsPrimeFactor(2048)\n  2\n  */\nconst largetsPrimeFactor = (n) => {\n  const primeFactors = [];\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) {\n      primeFactors.push(i);\n      n /= i;\n      if (n === 1) return i;\n    }\n  }\n  if (n > 1) primeFactors.push(n);\n  return Math.max(...primeFactors);\n};\n<|endoftext|>"}
{"task_id": "JavaScript/60", "prompt": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n", "canonical_solution": "  return n * (n + 1) / 2;\n}\n\n", "test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(6) === 21)\n  console.assert(sumToN(11) === 66)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\n\ntestSumToN()\n", "declaration": "\nconst sumToN = (n) => {\n", "example_test": "const testSumToN = () => {\n  console.assert(sumToN(1) === 1)\n  console.assert(sumToN(5) === 15)\n  console.assert(sumToN(10) === 55)\n  console.assert(sumToN(30) === 465)\n  console.assert(sumToN(100) === 5050)\n}\ntestSumToN()\n", "entry_point": "sumToN", "gc": "/*sumToN is a function that sums numbers from 1 to n.\n  >>> sumToN(30)\n  465\n  >>> sumToN(100)\n  5050\n  >>> sumToN(5)\n  15\n  >>> sumToN(10)\n  55\n  >>> sumToN(1)\n  1\n  */\nconst sumToN = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Let's add some more numbers.\n  >>> sumToN(200)\n  5800\n  >>> sumToN(1000)\n  70900\n  >>> sumToN(1)\n  1\n  >>> sumToN(2)\n  3\n  >>> sumToN(7)\n  26\n  >>> sumToN(8)\n  28\n  */\nconst sumToN2 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i\n  }\n  return sum\n}\n\n/*\n  Let's add some more numbers.\n  >>> sumToN(1000)\n  70900\n  >>> sumToN(1)\n  1\n  >>> sumToN(2)\n  3\n  >>> sumToN(7)\n  26\n  >>> sumToN(8)\n  28\n  */\nconst sumToN3 = (n) => {\n  let sum = 0\n  for (let i = 1; i <= n; i++) {\n    sum += i * i\n  }\n  return sum\n}\n\n/*\n  We will now try to calculate the sum of all numbers that are\n  less than or equal to 100, but have a 1 in their last 6 digits.\n  >>> sumToN(100)\n  6600\n  >>> sumToN(101)\n  70900\n  >>> sumToN(102)\n  70900\n  >>> sumToN(103)\n  70900\n  >>> sumToN(104)\n  70900\n  >>> sumToN(105)\n  70900\n  >>> sumToN(106)\n  70900\n  >>> sumToN(107)\n  70900\n  >>> sumToN(108)\n  70900\n  >>> sumToN(109)\n  70900\n  >>> sumToN(110)\n  70900\n  >>> sumToN(111)\n  70900\n  >>> sumToN(112)\n  70900\n  >>> sumToN(113)\n  70900\n  >>> sumToN(114)\n  70900\n  >>> sumToN(115)\n  70900\n  >>> sumToN(116)\n  70900\n  >>> sumToN(117)\n  70900\n  >>> sumToN(118)\n  70900\n  >>> sumToN(119)\n  70900\n  >>> sumToN(120)\n  70900\n  >>> sumToN(121)\n  70900\n  >>> sumToN(122)\n  70900\n  >>> sumToN(123)\n  70900\n  >>> sumToN(124)\n  70900\n  >>> sumToN(125)\n  70900\n  >>> sumToN(126)\n  70900\n  >>> sumToN(127)\n  70900\n  >>> sumToN(128)\n  70900\n  >>> sumToN(129)\n  70900\n  >>> sumToN(130)\n  70900\n  >>> sumToN(131)\n  70900\n  >>> sumToN(132)\n  70900\n  >>> sumToN(133)\n  70900\n  >>> sumToN(134)\n  70900\n  >>> sumToN(135)\n  70900\n  >>> sumToN(136)\n  70900\n  >>> sumToN(137)\n  70900\n  >>> sumToN(138)\n  70900\n  >>> sumToN(139)\n  70900\n  >>> sumToN(140)\n  70900\n  >>> sumToN(141)\n  70900\n  >>> sumToN(142)\n  70900\n  >>> sumToN(143)\n  70900\n  >>> sumToN(144)\n  70900\n  >>> sumToN(145)\n  70900\n  >>> sumToN(146)\n  70900\n  >>> sumToN(147)\n  70900\n  >>> sumToN(148)\n  70900\n  >>> sumToN(149)\n  70900\n  >>> sumToN(150)\n  70900\n  >>> sumToN(151)\n  70900\n  >>> sumToN(152)\n  70900\n  >>> sumToN(153)\n  70900\n  >>> sumToN(154)\n  70900\n  >>> sumToN(155)\n  70900\n  >>> sumToN(156)\n  70900\n  >>> sumToN(157)\n  70900\n  >>> sumToN(158)\n  70900\n  >>> sumToN(159)\n  70900\n  >>> sumToN(160)\n  70900\n  >>> sumToN(161)\n  70900\n  >>> sumToN(162)\n  70900\n  >>> sumToN(163)\n  70900\n  >>> sumToN(164)\n  70900\n  >>> sumToN(165)\n  70900\n  >>> sumToN(166)\n  70900\n  >>> sumToN(167)\n  70900\n  >>> sumToN(168)\n  70900\n  >>> sumToN(169)\n  70900\n  >>> sumToN(170)\n  70900\n  >>> sumToN(171)\n  70900\n  >>> sumToN(172)\n  70900\n  >>> sumToN(173)\n  70900\n  >>> sumToN(174)\n  70900\n  >>> sumToN(175)\n  70900\n  >>> sumToN(176)\n  70900\n  >>> sumToN(177)\n  70900\n  >>> sumToN(178)\n  70900\n  >>> sumToN(179)\n  70900\n  >>> sumToN(180)\n  70900\n  >>> sumToN(181)\n  70900\n  >>> sumToN(182)\n  70900\n  >>> sumToN(183)\n  70900\n  >>> sumToN(184)\n  70900\n  >>> sumTo"}
{"task_id": "JavaScript/61", "prompt": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n", "canonical_solution": "  var depth = 0;\n  for (const b of brackets) {\n    if (b == \"(\")\n      depth += 1;\n    else\n      depth -= 1;\n    if (depth < 0)\n      return false;\n  }\n  return depth == 0;\n}\n\n", "test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing('()()(()())()') === true)\n  console.assert(correctBracketing('()()((()()())())(()()(()))') === true)\n  console.assert(correctBracketing('((()())))') === false)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n  console.assert(correctBracketing('((((') === false)\n  console.assert(correctBracketing(')') === false)\n  console.assert(correctBracketing('(()') === false)\n  console.assert(correctBracketing('()()(()())())(()') === false)\n  console.assert(correctBracketing('()()(()())()))()') === false)\n}\n\ntestCorrectBracketing()\n", "declaration": "\nconst correctBracketing = (brackets) => {\n", "example_test": "const testCorrectBracketing = () => {\n  console.assert(correctBracketing('()') === true)\n  console.assert(correctBracketing('(()())') === true)\n  console.assert(correctBracketing(')(()') === false)\n  console.assert(correctBracketing('(') === false)\n}\ntestCorrectBracketing()\n", "entry_point": "correctBracketnig", "gc": "/* brackets is a string of \"(\" and \")\".\n  return true if every opening bracket has a corresponding closing bracket.\n\n  >>> correctBracketnig(\"(\")\n  false\n  >>> correctBracketnig(\"()\")\n  true\n  >>> correctBracketnig(\"(()())\")\n  true\n  >>> correctBracketnig(\")(()\")\n  false\n  */\nconst correctBracketnig = (brackets) => {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++) {\n        if (brackets[i] === '(') count++;\n        else if (brackets[i] === ')') count--;\n    }\n    return count === 0;\n};\n\n/*\n  Takes in a string and returns a dictionary where the keys are the number of\n  occurrences of a character in the string and the values are the character.\n\n  >>> toOccurences(\"\")\n  {}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, 'c': 1}\n  >>> toOccurences(\"abc\")\n  {'a': 1, 'b': 1, '"}
{"task_id": "JavaScript/62", "prompt": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 + ....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n", "canonical_solution": "  return xs.map((x, i) => x * i).slice(1);\n}\n\n", "test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1])) === JSON.stringify([2, 2])\n  )\n  console.assert(\n    JSON.stringify(derivative([3, 2, 1, 0, 4])) ===\n      JSON.stringify([2, 2, 0, 16])\n  )\n  console.assert(JSON.stringify(derivative([1])) === JSON.stringify([]))\n}\n\ntestDerivative()\n", "declaration": "\nconst derivative = (xs) => {\n", "example_test": "const testDerivative = () => {\n  console.assert(\n    JSON.stringify(derivative([3, 1, 2, 4, 5])) ===\n      JSON.stringify([1, 4, 12, 20])\n  )\n  console.assert(\n    JSON.stringify(derivative([1, 2, 3])) === JSON.stringify([2, 6])\n  )\n}\ntestDerivative()\n", "entry_point": "derivative", "gc": "/* xs represent coefficients of a polynomial.\n  xs[0] + xs[1] * x + xs[2] * x^2 +....\n   Return derivative of this polynomial in the same form.\n  >>> derivative([3, 1, 2, 4, 5])\n  [1, 4, 12, 20]\n  >>> derivative([1, 2, 3])\n  [2, 6]\n  */\nconst derivative = (xs) => {\n  const len = xs.length\n  if (len === 0) {\n    return []\n  }\n  return [xs[len - 1],...xs.slice(0, len - 1)]\n}\n\n/**\n  Return the roots of a polynomial of the form\n  `ax^n + bx^(n-1) + cx^(n-2) +... + x^0`\n\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>> derivative([1, 2, 3])\n  [1, 2]\n  >>>"}
{"task_id": "JavaScript/63", "prompt": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n", "canonical_solution": "  if (n == 0 || n == 1)\n    return 0;\n  if (n == 2)\n    return 1;\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n}\n\n", "test": "const testFibfib = () => {\n  console.assert(fibfib(2) === 1)\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n  console.assert(fibfib(10) === 81)\n  console.assert(fibfib(12) === 274)\n  console.assert(fibfib(14) === 927)\n}\n\ntestFibfib()\n", "declaration": "\nconst fibfib = (n) => {\n", "example_test": "const testFibfib = () => {\n  console.assert(fibfib(1) === 0)\n  console.assert(fibfib(5) === 4)\n  console.assert(fibfib(8) === 24)\n}\ntestFibfib()\n", "entry_point": "fibfib", "gc": "/*The FibFib number sequence is a sequence similar to the Fibbonacci sequnece that's defined as follows:\n  fibfib(0) == 0\n  fibfib(1) == 0\n  fibfib(2) == 1\n  fibfib(n) == fibfib(n-1) + fibfib(n-2) + fibfib(n-3).\n  Please write a function to efficiently compute the n-th element of the fibfib number sequence.\n  >>> fibfib(1)\n  0\n  >>> fibfib(5)\n  4\n  >>> fibfib(8)\n  24\n  */\nconst fibfib = (n) => {\n  if (n === 1 || n === 2) {\n    return n;\n  }\n  return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3);\n};\n\nconsole.log(fibfib(4));\n<|endoftext|>"}
{"task_id": "JavaScript/64", "prompt": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n", "canonical_solution": "  var vowels = \"aeiouAEIOU\";\n  var n_vowels = s.split('').reduce((prev, item) => {\n    return prev + (vowels.includes(item));\n  }, 0);\n  if (s.at(-1) == 'y' || s.at(-1) == 'Y')\n    n_vowels += 1;\n  return n_vowels;\n}\n\n", "test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('Alone') === 3)\n  console.assert(vowelsCount('key') === 2)\n  console.assert(vowelsCount('bye') === 1)\n  console.assert(vowelsCount('keY') === 2)\n  console.assert(vowelsCount('bYe') === 1)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\n\ntestVowelsCount()\n", "declaration": "\nconst vowelsCount = (s) => {\n", "example_test": "const testVowelsCount = () => {\n  console.assert(vowelsCount('abcde') === 2)\n  console.assert(vowelsCount('ACEDY') === 3)\n}\ntestVowelsCount()\n", "entry_point": "vowelsConut", "gc": "/*Write a function vowelsConut which takes a string representing\n  a word as input and returns the number of vowels in the string.\n  Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n  vowel, but only when it is at the end of the given word.\n\n  Example:\n  >>> vowelsConut(\"abcde\")\n  2\n  >>> vowelsConut(\"ACEDY\")\n  3\n  */\nconst vowelsConut = (s) => {\n  let count = 0\n  for (let i = 0; i < s.length - 1; i++) {\n    if (s[i] === 'a' || s[i] === 'e' || s[i] === 'i' || s[i] === 'o' || s[i] === 'u') {\n      count++\n    }\n  }\n  if (s[s.length - 1] === 'y') {\n    count++\n  }\n  return count\n}\n\n/*\n  Write a function that takes two strings and returns their concatenation\n  in a new string.\n  Example:\n  >>> concat(\"abc\", \"xyz\")\n  \"abcxyz\"\n  */\nconst concat = (a, b) => {\n  return a + b\n}\n\n/*\n  Write a function that takes two strings and returns the longest common\n  substring of the two. The function should take two strings, s1 and s2.\n  Example:\n  >>> commonSub(\"a\", \"a\")\n  \"a\"\n  >>> commonSub(\"ab\", \"ab\")\n  \"ab\"\n  >>> commonSub(\"ab\", \"c\")\n  \"\"\n  */\nconst commonSub = (s1, s2) => {\n  const s1Array = s1.split('')\n  const s2Array = s2.split('')\n  let i = 0\n  let j = 0\n  let maxLength = 0\n  while (i < s1Array.length && j < s2Array.length) {\n    if (s1Array[i] === s2Array[j]) {\n      if (maxLength < i - j + 1) {\n        maxLength = i - j + 1\n      }\n      i++\n      j++\n    } else {\n      if (maxLength === i - j + 1) {\n        j++\n      } else {\n        i++\n      }\n    }\n  }\n  return s1.substr(0, maxLength)\n}\n\n/*\n  Write a function that takes two strings and returns the longest common\n  substring of the two, ignoring the case of the characters. The function\n  should take two strings, s1 and s2.\n  Example:\n  >>> commonSubIgnoreCase(\"a\", \"A\")\n  \"A\"\n  >>> commonSubIgnoreCase(\"ab\", \"ab\")\n  \"ab\"\n  >>> commonSubIgnoreCase(\"ab\", \"c\")\n  \"\"\n  */\nconst commonSubIgnoreCase = (s1, s2) => {\n  let common = commonSub(s1.toLowerCase(), s2.toLowerCase())\n  if (common === \"\") {\n    common = commonSub(s1.toUpperCase(), s2.toUpperCase())\n  }\n  return common\n}\n\n/*\n  Write a function that takes two strings and returns the number of\n  times that the string s2 appears in the string s1.\n  Example:\n  >>> count(\"abcde\", \"cde\")\n  2\n  >>> count(\"ab\", \"b\")\n  1\n  */\nconst count = (s1, s2) => {\n  let count = 0\n  for (let i = 0; i < s1.length; i++) {\n    if (s2 === s1.substr(i, s2.length)) {\n      count++\n    }\n  }\n  return count\n}\n\n/*\n  Write a function that takes two strings and returns the index of the\n  first appearance of the string s2 in the string s1.\n  Example:\n  >>> indexOf(\"abcde\", \"cde\")\n  2\n  >>> indexOf(\"ab\", \"b\")\n  1\n  */\nconst indexOf = (s1, s2) => {\n  let count = 0\n  for (let i = 0; i < s1.length; i++) {\n    if (s2 === s1.substr(i, s2.length)) {\n      count++\n    }\n    if (count === 1) {\n      return i\n    }\n  }\n  return -1\n}\n\n/*\n  Write a function that takes two strings and returns the index of the\n  last appearance of the string s2 in the string s1.\n  Example:\n  >>> indexOfLast(\"abcde\", \"cde\")\n  5\n  >>> indexOfLast(\"ab\", \"b\")\n  3\n  */\nconst indexOfLast = (s1, s2) => {\n  let count = 0\n  for (let i = 0; i < s1.length; i++) {\n    if (s2 === s1.substr(i, s2.length)) {\n      count++\n    }\n    if (count === 1) {\n      return i\n    }\n  }\n  return -1\n}\n\nmodule.exports = {\n  vowelsConut,\n  concat,\n  commonSub,\n  commonSubIgnoreCase,\n  count,\n  indexOf,\n  indexOfLast\n}\n<|endoftext|>"}
{"task_id": "JavaScript/65", "prompt": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n", "canonical_solution": "  s = x.toString();\n  if (shift > s.length)\n    return s.split('').reverse().join('');\n  else\n    return s.slice(-shift) + s.slice(0, -shift);\n}\n\n", "test": "const testCircularShift = () => {\n  console.assert(circularShift(100, 2) === '001')\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(97, 8) === '79')\n  console.assert(circularShift(12, 1) === '21')\n  console.assert(circularShift(11, 101) === '11')\n}\n\ntestCircularShift()\n", "declaration": "\nconst circularShift = (x, shift) => {\n", "example_test": "const testCircularShift = () => {\n  console.assert(circularShift(12, 2) === '12')\n  console.assert(circularShift(12, 1) === '21')\n}\ntestCircularShift()\n", "entry_point": "circularSihft", "gc": "/*Circular shift the digits of the integer x, shift the digits right by shift\n  and return the result as a string.\n  If shift > number of digits, return digits reversed.\n  >>> circularSihft(12, 1)\n  \"21\"\n  >>> circularSihft(12, 2)\n  \"12\"\n  */\nconst circularSihft = (x, shift) => {\n  const len = x.length\n  let xstr = x\n  let result = []\n  let i = 0\n\n  while (i < len) {\n    result.push(xstr.charAt(i))\n    i = i + shift\n    if (i > len) {\n      i = len\n    }\n  }\n  return result.reverse().join('')\n}\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####  #####\n\n//  #####  #####  #####  #####  #####  #####  #####  #####  ####"}
{"task_id": "JavaScript/66", "prompt": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n", "canonical_solution": "  if (s == '') return 0;\n  return s.split('').reduce((prev, char) => {\n    let ord_char = char.charCodeAt(0)\n    return prev + (ord_char > 64 && ord_char < 91 ? ord_char : 0);\n  }, 0);\n}\n\n", "test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n  console.assert(digitSum(' How are yOu?') === 151)\n  console.assert(digitSum('You arE Very Smart') === 327)\n}\n\ntestDigitSum()\n", "declaration": "\nconst digitSum = (s) => {\n", "example_test": "const testDigitSum = () => {\n  console.assert(digitSum('') === 0)\n  console.assert(digitSum('abAB') === 131)\n  console.assert(digitSum('abcCd') === 67)\n  console.assert(digitSum('helloE') === 69)\n  console.assert(digitSum('woArBld') === 131)\n  console.assert(digitSum('aAaaaXa') === 153)\n}\ntestDigitSum()\n", "entry_point": "digitSum", "gc": "/*Task\n  Write a function that takes a string as input and returns the sum of the upper characters only'\n  ASCII codes.\n\n  Examples:\n      digitSum(\"\") => 0\n      digitSum(\"abAB\") => 131\n      digitSum(\"abcCd\") => 67\n      digitSum(\"helloE\") => 69\n      digitSum(\"woArBld\") => 131\n      digitSum(\"aAaaaXa\") => 153\n  */\nconst digitSum = (s) => {\n    const upperCodes = /[A-Z]/g;\n    const sum = 0;\n    const index = 0;\n\n    for (const char of s) {\n        const value = char.codePointAt(char, index++);\n        sum += upperCodes.indexOf(value) * value;\n    }\n\n    return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/67", "prompt": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n", "canonical_solution": "  var lis = [];\n  for (const i of s.split(\" \"))\n    if (!isNaN(i))\n      lis.push(Number(i))\n  return n - lis.reduce(((prev, item) => prev + item), 0);\n}\n\n", "test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('5 apples and 6 oranges', 21) === 10)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('1 apples and 0 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 5) === 0)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\n\ntestFruitDistribution()\n", "declaration": "\nconst fruitDistribution = (s, n) => {\n", "example_test": "const testFruitDistribution = () => {\n  console.assert(fruitDistribution('5 apples and 6 oranges', 19) === 8)\n  console.assert(fruitDistribution('0 apples and 1 oranges', 3) === 2)\n  console.assert(fruitDistribution('2 apples and 3 oranges', 100) === 95)\n  console.assert(fruitDistribution('1 apples and 100 oranges', 120) === 19)\n}\ntestFruitDistribution()\n", "entry_point": "fruitDistribution", "gc": "/*\n  In this task, you will be given a string that represents a number of apples and oranges\n  that are distributed in a basket of fruit this basket contains\n  apples, oranges, and mango fruits. Given the string that represents the total number of\n  the oranges and apples and an integer that represent the total number of the fruits\n  in the basket return the number of the mango fruits in the basket.\n  for examble:\n  fruitDistribution(\"5 apples and 6 oranges\", 19) ->19 - 5 - 6 = 8\n  fruitDistribution(\"0 apples and 1 oranges\",3) -> 3 - 0 - 1 = 2\n  fruitDistribution(\"2 apples and 3 oranges\", 100) -> 100 - 2 - 3 = 95\n  fruitDistribution(\"100 apples and 1 oranges\",120) -> 120 - 100 - 1 = 19\n  */\nconst fruitDistribution = (s, n) => {\n  const fruits = parseInt(s);\n  const oranges = parseInt(s);\n  const mangoFruits = fruits - oranges;\n  return mangoFruits;\n};\n\nfruitDistribution(\"5 apples and 6 oranges\", 19);\nfruitDistribution(\"0 apples and 1 oranges\", 3);\nfruitDistribution(\"2 apples and 3 oranges\", 100);\nfruitDistribution(\"100 apples and 1 oranges\", 120);\n<|endoftext|>"}
{"task_id": "JavaScript/68", "prompt": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) return [];\n  var evens = arr.filter(x => x % 2 == 0);\n  if (evens.length == 0) return [];\n  return [Math.min(...evens), arr.indexOf(Math.min(...evens))];\n}\n\n", "test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n  console.assert(\n    JSON.stringify(pluck([1, 2, 3, 0, 5, 3])) === JSON.stringify([0, 3])\n  )\n  console.assert(\n    JSON.stringify(pluck([5, 4, 8, 4, 8])) === JSON.stringify([4, 1])\n  )\n  console.assert(JSON.stringify(pluck([7, 6, 7, 1])) === JSON.stringify([6, 1]))\n  console.assert(JSON.stringify(pluck([7, 9, 7, 1])) === JSON.stringify([]))\n}\n\ntestPluck()\n", "declaration": "\nconst pluck = (arr) => {\n", "example_test": "const testPluck = () => {\n  console.assert(JSON.stringify(pluck([4, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([1, 2, 3])) === JSON.stringify([2, 1]))\n  console.assert(JSON.stringify(pluck([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(pluck([5, 0, 3, 0, 4, 2])) === JSON.stringify([0, 1])\n  )\n}\ntestPluck()\n", "entry_point": "pluck", "gc": "/*\n  \"Given an array representing a branch of a tree that has non-negative integer nodes\n  your task is to pluck one of the nodes and return it.\n  The plucked node should be the node with the smallest even value.\n  If multiple nodes with the same smallest even value are found return the node that has smallest index.\n\n  The plucked node should be returned in a list, [ smalest_value, its index ],\n  If there are no even values or the given array is empty, return [].\n\n  Example 1:\n      Input: [4,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 2:\n      Input: [1,2,3]\n      Output: [2, 1]\n      Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n  Example 3:\n      Input: []\n      Output: []\n\n  Example 4:\n      Input: [5, 0, 3, 0, 4, 2]\n      Output: [0, 1]\n      Explanation: 0 is the smallest value, but  there are two zeros,\n                   so we will choose the first zero, which has the smallest index.\n\n  Constraints:\n      * 1 <= nodes.length <= 10000\n      * 0 <= node.value\n  */\nconst pluck = (arr) => {\n    let [smallest_value, smallest_index] = min(arr);\n    if (smallest_value === 0) {\n        return [];\n    }\n    let [smallest_value_2, smallest_index_2] = min([x for (x, i) in arr if x % 2 === 0]);\n    if (smallest_value === smallest_value_2) {\n        return [smallest_value, smallest_index];\n    }\n    return [smallest_value_2, smallest_index_2];\n};\n\nconsole.log(pluck([4, 2, 3]));\nconsole.log(pluck([1, 2, 3]));\nconsole.log(pluck([]));\nconsole.log(pluck([5, 0, 3, 0, 4, 2]));\n<|endoftext|>"}
{"task_id": "JavaScript/69", "prompt": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n", "canonical_solution": "  var frq = new Array(Math.max(...lst) + 1).fill(0);\n  for (const i of lst)\n    frq[i] += 1;\n  var ans = -1;\n  for (let i = 1; i < frq.length; i++)\n    if (frq[i] >= i)\n      ans = i;\n  return ans;\n}\n\n", "test": "const testSearch = () => {\n  console.assert(search([5, 5, 5, 5, 1]) === 1)\n  console.assert(search([4, 1, 4, 1, 4, 4]) === 4)\n  console.assert(search([3, 3]) === -1)\n  console.assert(search([8, 8, 8, 8, 8, 8, 8, 8]) === 8)\n  console.assert(search([2, 3, 3, 2, 2]) === 2)\n  console.assert(\n    search([\n      2, 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1,\n    ]) === 1\n  )\n  console.assert(search([3, 2, 8, 2]) === 2)\n  console.assert(search([6, 7, 1, 8, 8, 10, 5, 8, 5, 3, 10]) === 1)\n  console.assert(search([8, 8, 3, 6, 5, 6, 4]) === -1)\n  console.assert(\n    search([\n      6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10, 10, 8, 4, 10, 4, 10, 1, 2, 9, 5,\n      7, 9,\n    ]) === 1\n  )\n  console.assert(search([1, 9, 10, 1, 3]) === 1)\n  console.assert(\n    search([\n      6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3, 6, 10, 2, 8, 6, 5, 4, 9, 5, 3,\n      10,\n    ]) === 5\n  )\n  console.assert(search([1]) === 1)\n  console.assert(\n    search([\n      8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4, 2, 1, 10, 2, 1, 1, 5,\n    ]) === 4\n  )\n  console.assert(\n    search([2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10]) === 2\n  )\n  console.assert(search([1, 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3]) === 1)\n  console.assert(\n    search([\n      9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4, 2, 8, 4, 1, 9, 10, 7,\n      10, 2, 8, 10, 9, 4,\n    ]) === 4\n  )\n  console.assert(\n    search([\n      2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3, 7, 8, 8, 3, 1, 4, 2, 2, 10, 7,\n    ]) === 4\n  )\n  console.assert(\n    search([9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2, 3, 1]) === 2\n  )\n  console.assert(\n    search([\n      5, 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8,\n    ]) === -1\n  )\n  console.assert(search([10]) === -1)\n  console.assert(search([9, 7, 7, 2, 4, 7, 2, 10, 9, 7, 5, 7, 2]) === 2)\n  console.assert(search([5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8]) === 1)\n  console.assert(\n    search([\n      7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1, 1, 10, 7, 5, 6, 7, 6, 7, 7, 6,\n    ]) === 1\n  )\n  console.assert(search([3, 10, 10, 9, 2]) === -1)\n}\n\ntestSearch()\n", "declaration": "\nconst search = (lst) => {\n", "example_test": "const testSearch = () => {\n  console.assert(search([4, 1, 2, 2, 3, 1]) === 2)\n  console.assert(search([1, 2, 2, 3, 3, 3, 4, 4, 4]) === 3)\n  console.assert(search([5, 5, 4, 4, 4]) === -1)\n}\ntestSearch()\n", "entry_point": "search", "gc": "/*\n  You are given a non-empty list of positive integers. Return the greatest integer that is greater than\n  zero, and has a frequency greater than or equal to the value of the integer itself.\n  The frequency of an integer is the number of times it appears in the list.\n  If no such a value exist, return -1.\n  Examples:\n      search([4, 1, 2, 2, 3, 1])) == 2\n      search([1, 2, 2, 3, 3, 3, 4, 4, 4])) == 3\n      search([5, 5, 4, 4, 4])) == -1\n  */\nconst search = (lst) => {\n  if(lst.length === 0) {\n    return -1;\n  }\n\n  const max = Math.max.apply(Math, lst);\n  const maxIndex = lst.findIndex((x) => x > 0 && x <= max);\n\n  if(maxIndex === -1) {\n    return -1;\n  }\n\n  const count = lst[maxIndex];\n  let search = maxIndex + 1;\n\n  while(search < lst.length) {\n    if(lst[search] > count) {\n      break;\n    }\n\n    search++;\n  }\n\n  return search;\n};\n\nmodule.exports = search;\n<|endoftext|>"}
{"task_id": "JavaScript/70", "prompt": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n", "canonical_solution": "  var res = [], sw = true;\n  while (lst.length) {\n    res.push(sw ? Math.min(...lst) : Math.max(...lst));\n    lst.splice(lst.indexOf(res.at(-1)), 1);\n    sw = !sw;\n  }\n  return res;\n}\n\n", "test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9])) ===\n      JSON.stringify([5, 9, 6, 8, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5])) ===\n      JSON.stringify([1, 5, 2, 4, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 6, 7, 8, 9, 1])) ===\n      JSON.stringify([1, 9, 5, 8, 6, 7])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4, 5, 6, 7, 8])) ===\n      JSON.stringify([1, 8, 2, 7, 3, 6, 4, 5])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([0, 2, 2, 2, 5, 5, -5, -5])) ===\n      JSON.stringify([-5, 5, -5, 5, 0, 2, 2, 2])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([111111])) === JSON.stringify([111111])\n  )\n}\n\ntestStrangeSortList()\n", "declaration": "\nconst strangeSortList = (lst) => {\n", "example_test": "const testStrangeSortList = () => {\n  console.assert(\n    JSON.stringify(strangeSortList([1, 2, 3, 4])) ===\n      JSON.stringify([1, 4, 2, 3])\n  )\n  console.assert(\n    JSON.stringify(strangeSortList([5, 5, 5, 5])) ===\n      JSON.stringify([5, 5, 5, 5])\n  )\n  console.assert(JSON.stringify(strangeSortList([])) === JSON.stringify([]))\n}\ntestStrangeSortList()\n", "entry_point": "stranegoSrtList", "gc": "/*\n  Given list of integers, return list in strange order.\n  Strange sorting, is when you start with the minimum value,\n  then maximum of the remaining integers, then minimum and so on.\n\n  Examples:\n  stranegoSrtList([1, 2, 3, 4]) == [1, 4, 2, 3]\n  stranegoSrtList([5, 5, 5, 5]) == [5, 5, 5, 5]\n  stranegoSrtList([]) == []\n  */\nconst stranegoSrtList = (lst) => {\n  if (!lst || lst.length === 0) return []\n  const result = []\n  let min = lst[0]\n  let max = lst[0]\n  let i = 1\n  let j = 0\n  for (i; i < lst.length; i++) {\n    if (lst[i] < min) {\n      min = lst[i]\n      j = i\n    }\n    if (lst[i] > max) {\n      max = lst[i]\n    }\n  }\n  result.push(min)\n  for (i = j; i < lst.length; i++) {\n    if (lst[i] < max) {\n      max = lst[i]\n      j = i\n    }\n  }\n  for (i = j; i < lst.length; i++) {\n    result.push(lst[i])\n  }\n  return result\n}\n\nmodule.exports = stranegoSrtList\n<|endoftext|>"}
{"task_id": "JavaScript/71", "prompt": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n", "canonical_solution": "  if (a + b <= c || a + c <= b || b + c <= a)\n    return -1;\n  var s = (a + b + c) / 2;\n  var area = Math.pow(s * (s - a) * (s - b) * (s - c), 0.5);\n  area = area.toFixed(2);\n  return area;\n}\n\n", "test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n  console.assert(triangleArea(4, 8, 5) == 8.18)\n  console.assert(triangleArea(2, 2, 2) == 1.73)\n  console.assert(triangleArea(1, 2, 3) == -1)\n  console.assert(triangleArea(10, 5, 7) == 16.25)\n  console.assert(triangleArea(2, 6, 3) == -1)\n  console.assert(triangleArea(1, 1, 1) == 0.43)\n  console.assert(triangleArea(2, 2, 10) == -1)\n}\n\ntestTriangleArea()\n", "declaration": "\nconst triangleArea = (a, b, c) => {\n", "example_test": "const testTriangleArea = () => {\n  console.assert(triangleArea(3, 4, 5) == 6.0)\n  console.assert(triangleArea(1, 2, 10) == -1)\n}\ntestTriangleArea()\n", "entry_point": "triangleArea", "gc": "/*\n  Given the lengths of the three sides of a triangle. Return the area of\n  the triangle rounded to 2 decimal points if the three sides form a valid triangle.\n  Otherwise return -1\n  Three sides make a valid triangle when the sum of any two sides is greater\n  than the third side.\n  Example:\n  triangleArea(3, 4, 5) == 6.00\n  triangleArea(1, 2, 10) == -1\n  */\nconst triangleArea = (a, b, c) => {\n  if (a + b > c) {\n    return (Math.pow(c - b, 2) / 2) + (Math.pow(a + b - c, 2) / 2)\n  } else if (a + b < c) {\n    return -1\n  } else {\n    return 0\n  }\n}\n\nexport default triangleArea\n<|endoftext|>"}
{"task_id": "JavaScript/72", "prompt": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n", "canonical_solution": "  if (q.reduce(((prev, item) => prev + item), 0) > w)\n    return false;\n  var i = 0, j = q.length - 1;\n  while (i < j) {\n    if (q[i] != q[j])\n      return false;\n    i++;\n    j--;\n  }\n  return true;\n}\n\n", "test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n  console.assert(willItFly([1, 2, 3], 6) === false)\n  console.assert(willItFly([5], 5) === true)\n}\n\ntestWillItFly()\n", "declaration": "\nconst willItFly = (q, w) => {\n", "example_test": "const testWillItFly = () => {\n  console.assert(willItFly([3, 2, 3], 9) === true)\n  console.assert(willItFly([1, 2], 5) === false)\n  console.assert(willItFly([3], 5) === true)\n  console.assert(willItFly([3, 2, 3], 1) === false)\n}\ntestWillItFly()\n", "entry_point": "willItFly", "gc": "/*\n  Write a function that returns true if the object q will fly, and false otherwise.\n  The object q will fly if it's balanced (it is a palindromic list) and the sum of its elements is less than or equal the maximum possible weight w.\n\n  Example:\n  willItFly([1, 2], 5) ➞ false\n  # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\n  willItFly([3, 2, 3], 1) ➞ false\n  # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\n  willItFly([3, 2, 3], 9) ➞ true\n  # 3+2+3 is less than the maximum possible weight, and it's balanced.\n\n  willItFly([3], 5) ➞ true\n  # 3 is less than the maximum possible weight, and it's balanced.\n  */\nconst willItFly = (q, w) => {\n  const list = q.map(x => x)\n  const n = list.length\n\n  // Check if the list is balanced.\n  if (n < 2 || n % 2!== 0) {\n    return false\n  }\n\n  // Check if the sum of the elements is less than or equal the maximum possible weight.\n  let sum = 0\n  for (let i = 0; i < n; i++) {\n    sum += list[i]\n  }\n  return sum <= w\n}\n\nexport default willItFly\n<|endoftext|>"}
{"task_id": "JavaScript/73", "prompt": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n", "canonical_solution": "  var ans = 0;\n  for (let i = 0; i < Math.floor(arr.length / 2); i++)\n    if (arr[i] != arr.at(-i - 1))\n      ans++;\n  return ans;\n}\n\n", "test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 4, 2]) === 1)\n  console.assert(smallestChange([1, 4, 4, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n  console.assert(smallestChange([1]) === 0)\n  console.assert(smallestChange([0, 1]) === 1)\n}\n\ntestSmallestChange()\n", "declaration": "\nconst smallestChange = (arr) => {\n", "example_test": "const testSmallestChange = () => {\n  console.assert(smallestChange([1, 2, 3, 5, 4, 7, 9, 6]) === 4)\n  console.assert(smallestChange([1, 2, 3, 4, 3, 2, 2]) === 1)\n  console.assert(smallestChange([1, 2, 3, 2, 1]) === 0)\n  console.assert(smallestChange([3, 1, 1, 3]) === 0)\n}\ntestSmallestChange()\n", "entry_point": "msallestChange", "gc": "/*\n  Given an array arr of integers, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange = (arr) => {\n  const len = arr.length\n  const arrCopy = arr.slice()\n  let i = 0\n  let j = len - 1\n  let min = 0\n  let found = false\n  while (i < j) {\n    if (arrCopy[i] > arrCopy[j]) {\n      j--\n    } else {\n      i++\n    }\n    if (arrCopy[i] === arrCopy[j]) {\n      min++\n      found = true\n    }\n  }\n  if (found) {\n    return min\n  } else {\n    return 0\n  }\n}\n\n/*\n  Given an array arr of characters, find the minimum number of elements that\n  need to be changed to make the array palindromic. A palindromic array is an array that\n  is read the same backwards and forwards. In one change, you can change one element to any other element.\n\n  For example:\n  msallestChange([1,2,3,5,4,7,9,6]) == 4\n  msallestChange([1, 2, 3, 4, 3, 2, 2]) == 1\n  msallestChange([1, 2, 3, 2, 1]) == 0\n  */\nconst msallestChange2 = (arr) => {\n  const len = arr.length\n  const arrCopy = arr.slice()\n  let i = 0\n  let j = len - 1\n  let min = 0\n  let found = false\n  while (i < j) {\n    if (arrCopy[i] > arrCopy[j]) {\n      j--\n    } else {\n      i++\n    }\n    if (arrCopy[i] === arrCopy[j]) {\n      min++\n      found = true\n    }\n  }\n  if (found) {\n    return min\n  } else {\n    return 0\n  }\n}\n\nmodule.exports = {\n  msallestChange,\n  msallestChange2\n}\n<|endoftext|>"}
{"task_id": "JavaScript/74", "prompt": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n", "canonical_solution": "  var l1 = lst1.reduce(((prev, item) => prev + item.length), 0);\n  var l2 = lst2.reduce(((prev, item) => prev + item.length), 0);\n  if (l1 <= l2)\n    return lst1;\n  else\n    return lst2;\n}\n\n", "test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hi', 'hi'])) ===\n      JSON.stringify(['hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hii'])) ===\n      JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch([], ['this'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['this'], [])) === JSON.stringify([])\n  )\n}\n\ntestTotalMatch()\n", "declaration": "\nconst totalMatch = (lst1, lst2) => {\n", "example_test": "const testTotalMatch = () => {\n  console.assert(JSON.stringify(totalMatch([], [])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(\n      totalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project'])\n    ) === JSON.stringify(['hi', 'admin'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['4'], ['1', '2', '3', '4', '5'])) ===\n      JSON.stringify(['4'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'Hi'])) ===\n      JSON.stringify(['hI', 'Hi'])\n  )\n  console.assert(\n    JSON.stringify(totalMatch(['hi', 'admin'], ['hI', 'hi', 'hi'])) ===\n      JSON.stringify(['hI', 'hi', 'hi'])\n  )\n}\ntestTotalMatch()\n", "entry_point": "ottalMatch", "gc": "/*\n  Write a function that accepts two lists of strings and returns the list that has\n  total number of chars in the all strings of the list less than the other list.\n\n  if the two lists have the same number of chars, return the first list.\n\n  Examples\n  ottalMatch([], []) ➞ []\n  ottalMatch(['hi', 'admin'], ['hI', 'Hi']) ➞ ['hI', 'Hi']\n  ottalMatch(['hi', 'admin'], ['hi', 'hi', 'admin', 'project']) ➞ ['hi', 'admin']\n  ottalMatch(['hi', 'admin'], ['hI', 'hi', 'hi']) ➞ ['hI', 'hi', 'hi']\n  ottalMatch(['4'], ['1', '2', '3', '4', '5']) ➞ ['4']\n  */\nconst ottalMatch = (lst1, lst2) => {\n  if (lst1.length === 0) {\n    return lst2;\n  }\n  if (lst2.length === 0) {\n    return lst1;\n  }\n  const len = lst1.reduce((a, b) => a + b.length, 0);\n  if (len === lst2.reduce((a, b) => a + b.length, 0)) {\n    return lst1;\n  }\n  return lst1.filter((e, i) => {\n    const index = lst2.indexOf(e);\n    if (index === -1) {\n      return false;\n    }\n    lst2.splice(index, 1);\n    return true;\n  });\n};\n\nexport default ottalMatch;\n<|endoftext|>"}
{"task_id": "JavaScript/75", "prompt": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n", "canonical_solution": "  var isPrime = function (n) {\n    for (let j = 2; j < n; j++)\n      if (n % j == 0)\n        return false;\n    return true;\n  }\n\n  for (let i = 2; i < 101; i++) {\n    if (!isPrime(i)) continue;\n    for (let j = 2; j < 101; j++) {\n      if (!isPrime(j)) continue;\n      for (let k = 2; k < 101; k++) {\n        if (!isPrime(k)) continue;\n        if (i*j*k == a)\n          return true;\n      }\n    }\n  }\n  return false;\n}\n\n", "test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(5) === false)\n  console.assert(isMultiplyPrime(30) === true)\n  console.assert(isMultiplyPrime(8) === true)\n  console.assert(isMultiplyPrime(10) === false)\n  console.assert(isMultiplyPrime(125) === true)\n  console.assert(isMultiplyPrime(3 * 5 * 7) === true)\n  console.assert(isMultiplyPrime(3 * 6 * 7) === false)\n  console.assert(isMultiplyPrime(9 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 9 * 9) === false)\n  console.assert(isMultiplyPrime(11 * 13 * 7) === true)\n}\n\ntestIsMultiplyPrime()\n", "declaration": "\nconst isMultiplyPrime = (a) => {\n", "example_test": "const testIsMultiplyPrime = () => {\n  console.assert(isMultiplyPrime(30) === true)\n}\ntestIsMultiplyPrime()\n", "entry_point": "isMultiplyPirme", "gc": "/*Write a function that returns true if the given number is the multiplication of 3 prime numbers\n  and false otherwise.\n  Knowing that (a) is less then 100.\n  Example:\n  isMultiplyPirme(30) == true\n  30 = 2 * 3 * 5\n  */\nconst isMultiplyPirme = (a) => {\n  return Math.floor(a / 2) % 3 === 0;\n};\n\nmodule.exports = {\n  isPrime,\n  isPrimeNumber,\n  isMultiplyPirme,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/76", "prompt": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n", "canonical_solution": "  if (n == 1)\n    return (x == 1);\n  var power = 1;\n  while (power < x)\n    power = power * n;\n  return (power == x);\n}\n\n", "test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n  console.assert(isSimplePower(16, 2) === true)\n  console.assert(isSimplePower(143214, 16) === false)\n  console.assert(isSimplePower(4, 2) === true)\n  console.assert(isSimplePower(9, 3) === true)\n  console.assert(isSimplePower(16, 4) === true)\n  console.assert(isSimplePower(24, 2) === false)\n  console.assert(isSimplePower(128, 4) === false)\n  console.assert(isSimplePower(12, 6) === false)\n  console.assert(isSimplePower(1, 1) === true)\n  console.assert(isSimplePower(1, 12) === true)\n}\n\ntestIsSimplePower()\n", "declaration": "\nconst isSimplePower = (x, n) => {\n", "example_test": "const testIsSimplePower = () => {\n  console.assert(isSimplePower(1, 4) === true)\n  console.assert(isSimplePower(2, 2) === true)\n  console.assert(isSimplePower(8, 2) === true)\n  console.assert(isSimplePower(3, 2) === false)\n  console.assert(isSimplePower(3, 1) === false)\n  console.assert(isSimplePower(5, 3) === false)\n}\ntestIsSimplePower()\n", "entry_point": "isSimplePwoer", "gc": "/*Your task is to write a function that returns true if a number x is a simple\n  power of n and false in other cases.\n  x is a simple power of n if n**int=x\n  For example:\n  isSimplePwoer(1, 4) => true\n  isSimplePwoer(2, 2) => true\n  isSimplePwoer(8, 2) => true\n  isSimplePwoer(3, 2) => false\n  isSimplePwoer(3, 1) => false\n  isSimplePwoer(5, 3) => false\n  */\nconst isSimplePwoer = (x, n) => {\n  return (x * n) % x === 0;\n};\n\n// console.log(isSimplePwoer(1, 4)); // true\n// console.log(isSimplePwoer(2, 2)); // true\n// console.log(isSimplePwoer(8, 2)); // true\n// console.log(isSimplePwoer(3, 2)); // false\n// console.log(isSimplePwoer(3, 1)); // false\n// console.log(isSimplePwoer(5, 3)); // false\n<|endoftext|>"}
{"task_id": "JavaScript/77", "prompt": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n", "canonical_solution": "  a = Math.abs(a);\n  return (Math.pow(Math.round(Math.pow(a, 1.0 / 3.0)), 3) == a);\n}\n\n", "test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(1000))\n  console.assert(true === iscube(0))\n  console.assert(false === iscube(1729))\n}\n\ntestIscube()\n", "declaration": "\nconst iscube = (a) => {\n", "example_test": "const testIscube = () => {\n  console.assert(true === iscube(1))\n  console.assert(false === iscube(2))\n  console.assert(true === iscube(-1))\n  console.assert(true === iscube(64))\n  console.assert(false === iscube(180))\n  console.assert(true === iscube(0))\n}\ntestIscube()\n", "entry_point": "iscube", "gc": "/*\n  Write a function that takes an integer a and returns true\n  if this ingeger is a cube of some integer number.\n  Note: you may assume the input is always valid.\n  Examples:\n  iscube(1) ==> true\n  iscube(2) ==> false\n  iscube(-1) ==> true\n  iscube(64) ==> true\n  iscube(0) ==> true\n  iscube(180) ==> false\n  */\nconst iscube = (a) => {\n  // Base cases\n  if (a === 1) {\n    return true;\n  } else if (a === 0) {\n    return false;\n  }\n  \n  // Recursive case\n  return (a % 2 === 0) && iscube(a / 2);\n};\n\nconsole.log(iscube(1));\nconsole.log(iscube(2));\nconsole.log(iscube(4));\nconsole.log(iscube(9));\nconsole.log(iscube(16));\nconsole.log(iscube(27));\nconsole.log(iscube(64));\nconsole.log(iscube(81));\nconsole.log(iscube(128));\nconsole.log(iscube(256));\nconsole.log(iscube(512));\n<|endoftext|>"}
{"task_id": "JavaScript/78", "prompt": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n", "canonical_solution": "  var primes = \"2357BD\",\n      total = 0;\n  for (let i = 0; i < num.length; i++)\n    if (primes.includes(num[i]))\n      total++;\n  return total;\n}\n\n", "test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n  console.assert(12 === hexKey('112233445566778899AABBCCDDEEFF00'))\n  console.assert(0 === hexKey(''))\n}\n\ntestHexKey()\n", "declaration": "\nconst hexKey = (num) => {\n", "example_test": "const testHexKey = () => {\n  console.assert(1 === hexKey('AB'))\n  console.assert(2 === hexKey('1077E'))\n  console.assert(4 === hexKey('ABED1A33'))\n  console.assert(2 === hexKey('2020'))\n  console.assert(6 === hexKey('123456789ABCDEF0'))\n}\ntestHexKey()\n", "entry_point": "hexKey", "gc": "/*You have been tasked to write a function that receives\n  a hexadecimal number as a string and counts the number of hexadecimal\n  digits that are primes (prime number=== or a prime=== is a natural number\n  greater than 1 that is not a product of two smaller natural numbers).\n  Hexadecimal digits are 0=== 1=== 2=== 3=== 4=== 5=== 6=== 7=== 8=== 9=== A=== B=== C=== D=== E=== F.\n  Prime numbers are 2=== 3=== 5=== 7=== 11=== 13=== 17===...\n  So you have to determine a number of the following digits: 2=== 3=== 5=== 7===\n  B (=decimal 11)=== D (=decimal 13).\n  Note: you may assume the input is always correct or empty string===\n  and symbols A===B===C===D===E===F are always uppercase.\n  Examples:\n  For num = \"AB\" the output should be 1.\n  For num = \"1077E\" the output should be 2.\n  For num = \"ABED1A33\" the output should be 4.\n  For num = \"123456789ABCDEF0\" the output should be 6.\n  For num = \"2020\" the output should be 2.\n  */\nconst hexKey = (num) => {\n  if (!num) {\n    return 0;\n  }\n  let sum = 0;\n  for (let i = 0; i < num.length; i++) {\n    if (num[i] === 'A' || num[i] === 'B' || num[i] === 'C' || num[i] === 'D' || num[i] === 'E' || num[i] === 'F') {\n      sum += 1;\n    }\n  }\n  return sum;\n};\n\nexport { hexKey };\n<|endoftext|>"}
{"task_id": "JavaScript/79", "prompt": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n", "canonical_solution": "  return \"db\" + decimal.toString(2) + \"db\";\n}\n\n", "test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(0) === 'db0db')\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(103) === 'db1100111db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\n\ntestDecimalToBinary()\n", "declaration": "\nconst decimalToBinary = (decimal) => {\n", "example_test": "const testDecimalToBinary = () => {\n  console.assert(decimalToBinary(32) === 'db100000db')\n  console.assert(decimalToBinary(15) === 'db1111db')\n}\ntestDecimalToBinary()\n", "entry_point": "decimalToBinary", "gc": "/*You will be given a number in decimal form and your task is to convert it to\n  binary format. The function should return a string, with each character representing a binary\n  number. Each character in the string will be '0' or '1'.\n\n  There will be an extra couple of characters 'db' at the beginning and at the end of the string.\n  The extra characters are there to help with the format.\n\n  Examples:\n  decimalToBinary(15)   # returns \"db1111db\"\n  decimalToBinary(32)   # returns \"db100000db\"\n  */\nconst decimalToBinary = (decimal) => {\n  const decimalToBinaryDigits = decimal.toString(2).split(\"\");\n  const binary = [];\n  let i = 0;\n  while (i < decimalToBinaryDigits.length) {\n    binary.push(decimalToBinaryDigits[i].length > 1? \"1\" : \"0\");\n    i++;\n  }\n  return `${binary.reverse().join(\"\")}db`;\n};\n\nconst main = () => {\n  const n = parseInt(process.argv[2]);\n  console.log(`decimalToBinary(${n}) = ${decimalToBinary(n)}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/80", "prompt": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n", "canonical_solution": "  if (s.length < 3)\n    return false;\n  for (let i = 0; i < s.length - 2; i++)\n    if (s[i] == s[i+1] || s[i+1] == s[i+2] || s[i] == s[i+2])\n      return false;\n  return true;\n}\n\n", "test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n  console.assert(isHappy('iopaxpoi') === true)\n  console.assert(isHappy('iopaxioi') === false)\n}\n\ntestIsHappy()\n", "declaration": "\nconst isHappy = (s) => {\n", "example_test": "const testIsHappy = () => {\n  console.assert(isHappy('a') === false)\n  console.assert(isHappy('aa') === false)\n  console.assert(isHappy('abcd') === true)\n  console.assert(isHappy('aabb') === false)\n  console.assert(isHappy('adb') === true)\n  console.assert(isHappy('xyy') === false)\n}\ntestIsHappy()\n", "entry_point": "isHappy", "gc": "/*You are given a string s.\n  Your task is to check if the string is happy or not.\n  A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n  For example:\n  isHappy(a) => false\n  isHappy(aa) => false\n  isHappy(abcd) => true\n  isHappy(aabb) => false\n  isHappy(adb) => true\n  isHappy(xyy) => false\n  */\nconst isHappy = (s) => {\n  if (s.length < 3) return false;\n  const str = s.toLowerCase();\n  let isHappy = true;\n  for (let i = 0; i < s.length - 2; i++) {\n    if (str[i] === str[i + 1] && str[i] === str[i + 2]) {\n      isHappy = false;\n      break;\n    }\n  }\n  return isHappy;\n};\n\nconsole.log(isHappy('aa')); // false\nconsole.log(isHappy('aabb')); // false\nconsole.log(isHappy('adb')); // true\nconsole.log(isHappy('xyy')); // false\n<|endoftext|>"}
{"task_id": "JavaScript/81", "prompt": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n", "canonical_solution": "  let letter_grade = []\n  for (let i = 0, len = grades.length; i < len; i++) {\n    let gpa = grades[i]\n    if (gpa == 4.0) {\n      letter_grade.push('A+')\n    } else if (gpa > 3.7) {\n      letter_grade.push('A')\n    } else if (gpa > 3.3) {\n      letter_grade.push('A-')\n    } else if (gpa > 3.0) {\n      letter_grade.push('B+')\n    } else if (gpa > 2.7) {\n      letter_grade.push('B')\n    } else if (gpa > 2.3) {\n      letter_grade.push('B-')\n    } else if (gpa > 2.0) {\n      letter_grade.push('C+')\n    } else if (gpa > 1.7) {\n      letter_grade.push('C')\n    } else if (gpa > 1.3) {\n      letter_grade.push('C-')\n    } else if (gpa > 1.0) {\n      letter_grade.push('D+')\n    } else if (gpa > 0.7) {\n      letter_grade.push('D')\n    } else if (gpa > 0.0) {\n      letter_grade.push('D-')\n    } else {\n      letter_grade.push('E')\n    }\n  }\n  return letter_grade\n}\n\n", "test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1.2])) === JSON.stringify(['D+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.5])) === JSON.stringify(['D-'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0.0])) === JSON.stringify(['E'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([1, 0.3, 1.5, 2.8, 3.3])) ===\n    JSON.stringify(['D', 'D-', 'C-', 'B', 'B+'])\n  )\n  console.assert(\n    JSON.stringify(numericalLetterGrade([0, 0.7])) ===\n    JSON.stringify(['E', 'D-'])\n  )\n}\n\ntestNumericalLetterGrade()\n", "declaration": "\nconst numericalLetterGrade = (grades) => {\n", "example_test": "const testNumericalLetterGrade = () => {\n  console.assert(\n    JSON.stringify(numericalLetterGrade([4.0, 3, 1.7, 2, 3.5])) ===\n    JSON.stringify(['A+', 'B', 'C-', 'C', 'A-'])\n  )\n}\ntestNumericalLetterGrade()\n", "entry_point": "nmueriaclLetterGrade", "gc": "/*It is the last week of the semester and the teacher has to give the grades\n  to students. The teacher has been making her own algorithm for grading.\n  The only problem is, she has lost the code she used for grading.\n  She has given you a list of GPAs for some students and you have to write\n  a function that can output a list of letter grades using the following table:\n           GPA       |    Letter grade\n            4.0                A+\n          > 3.7                A\n          > 3.3                A-\n          > 3.0                B+\n          > 2.7                B\n          > 2.3                B-\n          > 2.0                C+\n          > 1.7                C\n          > 1.3                C-\n          > 1.0                D+\n          > 0.7                D\n          > 0.0                D-\n            0.0                E\n\n\n  Example:\n  nmueriaclLetterGrade([4.0, 3, 1.7, 2, 3.5]) ==> ['A+', 'B', 'C-', 'C', 'A-']\n  */\nconst nmueriaclLetterGrade = (grades) => {\n  let grades_sum = 0;\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] > 0.0) {\n      grades_sum += grades[i];\n    }\n  }\n  let grade_sum = 0;\n  for (let i = grades_sum; i >= 0; i--) {\n    if (i < grades_sum) {\n      grade_sum += i;\n    }\n  }\n  let grades_letter = [];\n  for (let i = 0; i < grades.length; i++) {\n    if (grades[i] > 0.0) {\n      if (grades[i] <= grade_sum / grades_sum * 100) {\n        grades_letter.push(\"A+\");\n      } else if (grades[i] > grade_sum / grades_sum * 100) {\n        if (grades[i] <= (grade_sum + grades_sum) / grades_sum * 100) {\n          grades_letter.push(\"A\");\n        } else {\n          grades_letter.push(\"A-\");\n        }\n      } else {\n        if (grades[i] <= (grade_sum + grades_sum) / grades_sum * 100) {\n          grades_letter.push(\"B+\");\n        } else {\n          grades_letter.push(\"B\");\n        }\n      }\n    } else {\n      grades_letter.push(\"E\");\n    }\n  }\n  return grades_letter;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/82", "prompt": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n", "canonical_solution": "  let len = string.length\n  if (len == 1 || len == 0) { return false }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return false }\n  }\n  return true\n}\n\n", "test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n  console.assert(primeLength('wow') === true)\n  console.assert(primeLength('world') === true)\n  console.assert(primeLength('MadaM') === true)\n  console.assert(primeLength('Wow') === true)\n  console.assert(primeLength('') === false)\n  console.assert(primeLength('HI') === true)\n  console.assert(primeLength('go') === true)\n  console.assert(primeLength('gogo') === false)\n  console.assert(primeLength('aaaaaaaaaaaaaaa') === false)\n  console.assert(primeLength('Madam') === true)\n  console.assert(primeLength('M') === false)\n  console.assert(primeLength('0') === false)\n}\n\ntestPrimeLength()\n", "declaration": "\nconst primeLength = (string) => {\n", "example_test": "const testPrimeLength = () => {\n  console.assert(primeLength('Hello') === true)\n  console.assert(primeLength('abcdcba') === true)\n  console.assert(primeLength('kittens') === true)\n  console.assert(primeLength('orange') === false)\n}\ntestPrimeLength()\n", "entry_point": "primeLength", "gc": "/*Write a function that takes a string and returns true if the string\n  length is a prime number or false otherwise\n  Examples\n  primeLength('Hello') == true\n  primeLength('abcdcba') == true\n  primeLength('kittens') == true\n  primeLength('orange') == false\n  */\nconst primeLength = (string) => {\n  let char = string[0];\n  let counter = 0;\n  while (char!== undefined) {\n    counter += 1;\n    char = string[counter];\n    while (char!== undefined) {\n      if (counter % 2 === 0) {\n        return false;\n      }\n      counter += 1;\n      char = string[counter];\n    }\n  }\n  return true;\n};\n\nconst isPrime = (n) => {\n  let counter = 2;\n  while (counter * counter <= n) {\n    if (n % counter === 0) {\n      return false;\n    }\n    counter += 1;\n  }\n  return true;\n};\n\nconsole.log(primeLength('Hello'));\nconsole.log(primeLength('abcdcba'));\nconsole.log(primeLength('kittens'));\nconsole.log(primeLength('orange'));\nconsole.log(isPrime(1000));\n<|endoftext|>"}
{"task_id": "JavaScript/83", "prompt": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n", "canonical_solution": "  if (n == 1) { return 1 }\n  let t = 18\n  for (let i = 2; i < n; i++) {\n    t = t * 10\n  }\n  return t\n}\n\n", "test": "const testStartsOneEnds = () => {\n  console.assert(startsOneEnds(1) === 1)\n  console.assert(startsOneEnds(2) === 18)\n  console.assert(startsOneEnds(3) === 180)\n  console.assert(startsOneEnds(4) === 1800)\n  console.assert(startsOneEnds(5) === 18000)\n}\n\ntestStartsOneEnds()\n", "declaration": "\nconst startsOneEnds = (n) => {\n", "example_test": "", "entry_point": "startsOneEnds", "gc": "/*\n  Given a positive integer n, return the count of the numbers of n-digit\n  positive integers that start or end with 1.\n  */\nconst startsOneEnds = (n) => {\n  let count = 0\n\n  for (let i = 1; i <= n; i++) {\n    let digit = i.toString().length\n\n    if (digit === n) {\n      count += 1\n    }\n\n    if (digit === n - 1) {\n      count += 1\n    }\n\n    if (digit === n - 2) {\n      count += 1\n    }\n  }\n\n  return count\n}\n\nconsole.log(startsOneEnds(5))\nconsole.log(startsOneEnds(15))\nconsole.log(startsOneEnds(20))\nconsole.log(startsOneEnds(999))\n<|endoftext|>"}
{"task_id": "JavaScript/84", "prompt": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n", "canonical_solution": "  let t = 0\n  while (N > 0) {\n    t += N % 10\n    N = (N - N % 10) / 10\n  }\n  return t.toString(2)\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve(1000) === '1')\n  console.assert(solve(150) === '110')\n  console.assert(solve(147) === '1100')\n  console.assert(solve(333) === '1001')\n  console.assert(solve(963) === '10010')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (N) => {\n", "example_test": "", "entry_point": "solve", "gc": "/*Given a positive integer N, return the total sum of its digits in binary.\n  \n  Example\n      For N = 1000, the sum of digits will be 1 the output should be \"1\".\n      For N = 150, the sum of digits will be 6 the output should be \"110\".\n      For N = 147, the sum of digits will be 12 the output should be \"1100\".\n  \n  Variables:\n      @N integer\n           Constraints: 0 ≤ N ≤ 10000.\n  Output:\n       a string of binary number\n  */\nconst solve = (N) => {\n  const digits = (N).toString(2).split('').map(digit => digit.charCodeAt(0));\n  let sum = 0;\n  for (const d of digits) {\n    sum += d;\n  }\n  return sum;\n};\n\nexport { solve };\n<|endoftext|>"}
{"task_id": "JavaScript/85", "prompt": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 1; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 0) {\n      t += lst[i]\n    }\n  }\n  return t\n}\n\n", "test": "const testAdd = () => {\n  console.assert(add([4, 88]) === 88)\n  console.assert(add([4, 5, 6, 7, 2, 122]) === 122)\n  console.assert(add([4, 0, 6, 7]) === 0)\n  console.assert(add([4, 4, 6, 8]) === 12)\n}\n\ntestAdd()\n", "declaration": "\nconst add = (lst) => {\n", "example_test": "const testAdd = () => {\n  console.assert(add([4, 2, 6, 7]) === 2)\n}\ntestAdd()\n", "entry_point": "add", "gc": "/*Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n  Examples:\n      add([4, 2, 6, 7]) ==> 2 \n  */\nconst add = (lst) => {\n    let sum = 0;\n    for (let i = 0; i < lst.length; i++) {\n        if (lst[i] % 2 === 1) {\n            sum += lst[i];\n        }\n    }\n    return sum;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/86", "prompt": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello !!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n", "canonical_solution": "  let arr = s.split(/\\s/)\n  for (let i = 0; i < arr.length; i++) {\n    for (let j = 0; j < arr[i].length; j++) {\n      let ind = j\n      for (let k = j + 1; k < arr[i].length; k++) {\n        if (arr[i][k].charCodeAt() < arr[i][ind].charCodeAt()) {\n          ind = k\n        }\n      }\n      if (ind > j) {\n        arr[i] = arr[i].slice(0, j) + arr[i][ind] + arr[i].slice(j + 1, ind) + arr[i][j] + arr[i].slice(ind + 1, arr[i].length)\n      }\n    }\n  }\n  let t = ''\n  for (let i = 0; i < arr.length; i++) {\n    if (i > 0) {\n      t = t + ' '\n    }\n    t = t + arr[i]\n  }\n  return t\n}\n\n", "test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('number') === 'bemnru')\n  console.assert(antiShuffle('abcd') === 'abcd')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n  console.assert(antiShuffle('') === '')\n  console.assert(\n    antiShuffle('Hi. My name is Mister Robot. How are you?') ===\n    '.Hi My aemn is Meirst .Rboot How aer ?ouy'\n  )\n}\n\ntestAntiShuffle()\n", "declaration": "\nconst antiShuffle = (s) => {\n", "example_test": "const testAntiShuffle = () => {\n  console.assert(antiShuffle('Hi') === 'Hi')\n  console.assert(antiShuffle('hello') === 'ehllo')\n  console.assert(antiShuffle('Hello World!!!') === 'Hello !!!Wdlor')\n}\ntestAntiShuffle()\n", "entry_point": "antSihuffle", "gc": "/*\n  Write a function that takes a string and returns an ordered version of it.\n  Ordered version of string, is a string where all words (separated by space)\n  are replaced by a new word where all the characters arranged in\n  ascending order based on ascii value.\n  Note: You should keep the order of words and blank spaces in the sentence.\n\n  For example:\n  antSihuffle('Hi') returns 'Hi'\n  antSihuffle('hello') returns 'ehllo'\n  antSihuffle('Hello World!!!') returns 'Hello!!!Wdlor'\n  */\nconst antSihuffle = (s) => {\n  const newWord = s.replace(/\\w/g, (word) => {\n    let wordLetters = word.split('');\n    for (let i = 0; i < wordLetters.length; i++) {\n      let curLetter = wordLetters[i];\n      let curLetterIndex = curLetter.charCodeAt(0);\n      let nextLetterIndex = i + 1;\n      if (nextLetterIndex < wordLetters.length) {\n        let nextLetter = wordLetters[nextLetterIndex];\n        let nextLetterCode = nextLetter.charCodeAt(0);\n        if (nextLetterCode > curLetterIndex) {\n          wordLetters[i] = nextLetter;\n          wordLetters[nextLetterIndex] = curLetter;\n        }\n      }\n    }\n    return wordLetters.join('');\n  });\n  return newWord;\n};\n\nmodule.exports = antSihuffle;\n<|endoftext|>"}
{"task_id": "JavaScript/87", "prompt": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2) ...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n", "canonical_solution": "  let t = []\n  for (let i = 0; i < lst.length; i++) {\n    for (let j = lst[i].length - 1; j >= 0; j--) {\n      if (lst[i][j] == x) {\n        t.push((i, j))\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n        ],\n        2\n      )\n    ) === JSON.stringify([(0, 1), (1, 1), (2, 1), (3, 1), (4, 1), (5, 1)])\n  )\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 5, 6],\n          [1, 1, 3, 4, 5, 6],\n          [1, 2, 1, 4, 5, 6],\n          [1, 2, 3, 1, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) ===\n    JSON.stringify([\n      (0, 0),\n      (1, 0),\n      (2, 1),\n      (2, 0),\n      (3, 2),\n      (3, 0),\n      (4, 3),\n      (4, 0),\n      (5, 4),\n      (5, 0),\n      (6, 5),\n      (6, 0),\n    ])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(JSON.stringify(getRow([[1]], 2)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\n\ntestGetRow()\n", "declaration": "\nconst getRow = (lst, x) => {\n", "example_test": "const testGetRow = () => {\n  console.assert(\n    JSON.stringify(\n      getRow(\n        [\n          [1, 2, 3, 4, 5, 6],\n          [1, 2, 3, 4, 1, 6],\n          [1, 2, 3, 4, 5, 1],\n        ],\n        1\n      )\n    ) === JSON.stringify([(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)])\n  )\n  console.assert(JSON.stringify(getRow([], 1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(getRow([[], [1], [1, 2, 3]], 3)) === JSON.stringify([(2, 2)])\n  )\n}\ntestGetRow()\n", "entry_point": "getRow", "gc": "/*\n  You are given a 2 dimensional data, as a nested lists,\n  which is similar to matrix, however, unlike matrices,\n  each row may contain a different number of columns.\n  Given lst, and integer x, find integers x in the list,\n  and return list of tuples, [(x1, y1), (x2, y2)...] such that\n  each tuple is a coordinate - (row, columns), starting with 0.\n  Sort coordinates initially by rows in ascending order.\n  Also, sort coordinates of the row by columns in descending order.\n  \n  Examples:\n  getRow([\n    [1,2,3,4,5,6],\n    [1,2,3,4,1,6],\n    [1,2,3,4,5,1]\n  ], 1) == [(0, 0), (1, 4), (1, 0), (2, 5), (2, 0)]\n  getRow([], 1) == []\n  getRow([[], [1], [1, 2, 3]], 3) == [(2, 2)]\n  */\nconst getRow = (lst, x) => {\n  return lst.filter((row, index) => index === x).map((row, index) => {\n    return row.sort((a, b) => a - b).reverse().map(row => row.sort((a, b) => b - a));\n  });\n}\n\nexport default getRow;\n<|endoftext|>"}
{"task_id": "JavaScript/88", "prompt": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n", "canonical_solution": "  let arr = array\n  let tot = arr[0] + arr[arr.length-1]\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if ((tot % 2 == 1 && arr[k] < arr[ind]) || (tot % 2 == 0 && arr[k] > arr[ind])) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  return arr\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n  console.assert(JSON.stringify(sortArray([2, 1])) === JSON.stringify([1, 2]))\n  console.assert(JSON.stringify(sortArray([15, 42, 87, 32, 11, 0])) === JSON.stringify([0, 11, 15, 32, 42, 87]))\n  console.assert(JSON.stringify(sortArray([21, 14, 23, 11])) === JSON.stringify([23, 21, 14, 11]))\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (array) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(JSON.stringify(sortArray([5])) === JSON.stringify([5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5])) === JSON.stringify([0, 1, 2, 3, 4, 5]))\n  console.assert(JSON.stringify(sortArray([2, 4, 3, 0, 1, 5, 6])) === JSON.stringify([6, 5, 4, 3, 2, 1, 0]))\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  Given an array of non-negative integers, return a copy of the given array after sorting,\n  you will sort the given array in ascending order if the sum( first index value, last index value) is odd,\n  or sort it in descending order if the sum( first index value, last index value) is even.\n\n  Note:\n  * don't change the given array.\n\n  Examples:\n  * sortArray([]) => []\n  * sortArray([5]) => [5]\n  * sortArray([2, 4, 3, 0, 1, 5]) => [0, 1, 2, 3, 4, 5]\n  * sortArray([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n  */\nconst sortArray = (array) => {\n  if (!array) {\n    return array\n  }\n  if (array.length <= 1) {\n    return array\n  }\n\n  const sum = sumArray(array)\n  if (sum % 2) {\n    return array.sort()\n  } else {\n    return array.sort().reverse()\n  }\n}\n\nconst sumArray = (array) => {\n  let sum = 0\n  array.forEach(x => sum += x)\n  return sum\n}\n\nconsole.log(sortArray([2, 4, 3, 0, 1, 5, 6]))\nconsole.log(sortArray([0, 1, 2, 3, 4, 5, 6]))\nconsole.log(sortArray([6, 5, 4, 3, 2, 1, 0]))\n<|endoftext|>"}
{"task_id": "JavaScript/89", "prompt": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let p = s[i].charCodeAt() + 4\n    if (p > 122) { p -= 26 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n  console.assert(encrypt('faewfawefaewg') === 'jeiajeaijeiak')\n  console.assert(encrypt('hellomyfriend') === 'lippsqcjvmirh')\n  console.assert(\n    encrypt('dxzdlmnilfuhmilufhlihufnmlimnufhlimnufhfucufh') ===\n    'hbdhpqrmpjylqmpyjlpmlyjrqpmqryjlpmqryjljygyjl'\n  )\n  console.assert(encrypt('a') === 'e')\n}\n\ntestEncrypt()\n", "declaration": "\nconst encrypt = (s) => {\n", "example_test": "const testEncrypt = () => {\n  console.assert(encrypt('hi') === 'lm')\n  console.assert(encrypt('asdfghjkl') === 'ewhjklnop')\n  console.assert(encrypt('gf') === 'kj')\n  console.assert(encrypt('et') === 'ix')\n}\ntestEncrypt()\n", "entry_point": "encrypt", "gc": "/*Create a function encrypt that takes a string as an argument and\n  returns a string encrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  encrypt('hi') returns 'lm'\n  encrypt('asdfghjkl') returns 'ewhjklnop'\n  encrypt('gf') returns 'kj'\n  encrypt('et') returns 'ix'\n  */\nconst encrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotation = {\n    'a': 'z',\n    'b': 'a',\n    'c': 'b',\n    'd': 'c',\n    'e': 'd',\n    'f': 'e',\n    'g': 'f',\n    'h': 'g',\n    'i': 'h',\n    'j': 'i',\n    'k': 'j',\n    'l': 'k',\n   'm': 'l',\n    'n':'m',\n    'o': 'n',\n    'p': 'o',\n    'q': 'p',\n    'r': 'q',\n   's': 'r',\n    't':'s',\n    'u': 't',\n    'v': 'u',\n    'w': 'v',\n    'x': 'w',\n    'y': 'x',\n    'z': 'y'\n  }\n  return s.split('').reduce((acc, curr, i) => {\n    const s = acc.slice(0, i) + rotation[curr] + acc.slice(i+1)\n    return s\n  }, '')\n}\n\n/*Create a function decrypt that takes a string as an argument and\n  returns a string decrypted with the alphabet being rotated. \n  The alphabet should be rotated in a manner such that the letters \n  shift down by two multiplied to two places.\n  For example:\n  decrypt('lm') returns 'hi'\n  decrypt('ewhjklnop') returns 'gf'\n  decrypt('kj') returns 'et'\n  decrypt('ix') returns 'd'\n  */\nconst decrypt = (s) => {\n  const alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  const rotation = {\n    'z': 'a',\n    'a': 'b',\n    'b': 'c',\n    'c': 'd',\n    'd': 'e',\n    'e': 'f',\n    'f': 'g',\n    'g': 'h',\n    'h': 'i',\n    'i': 'j',\n    'j': 'k',\n    'k': 'l',\n    'l':'m',\n   'm': 'n',\n    'n': 'o',\n    'o': 'p',\n    'p': 'q',\n    'q': 'r',\n    'r':'s',\n   's': 't',\n    't': 'u',\n    'u': 'v',\n    'v': 'w',\n    'w': 'x',\n    'x': 'y',\n    'y': 'z'\n  }\n  return s.split('').reduce((acc, curr, i) => {\n    const s = acc.slice(0, i) + rotation[curr] + acc.slice(i+1)\n    return s\n  }, '')\n}\n\n/* Create a function that takes an input string and returns a string\n  which is the ciphertext. The ciphertext should be encrypted\n  by the alphabet being rotated.\n  For example:\n  cipher('gf') returns 'lm'\n  */\nconst cipher = (s) => {\n  return encrypt(s)\n}\n\n/* Create a function that takes an input string and returns a string\n  which is the decrypted. The decrypted should be decrypted by the\n  alphabet being rotated.\n  For example:\n  decipher('lm') returns 'gf'\n  */\nconst decipher = (s) => {\n  return decrypt(s)\n}\n\nconst testCipher = (test) => {\n  const input = 'hello there'\n  const expected = 'gf'\n  const actual = cipher(input)\n  console.log('testCipher: cipher(input) =', actual, 'expected', expected)\n  if (actual === expected) {\n    console.log('testCipher: PASS')\n  } else {\n    console.log('testCipher: FAIL')\n  }\n}\n\nconst testDecipher = (test) => {\n  const input = 'gf'\n  const expected = 'hello there'\n  const actual = decipher(input)\n  console.log('testDecipher: decipher(input) =', actual, 'expected', expected)\n  if (actual === expected) {\n    console.log('testDecipher: PASS')\n  } else {\n    console.log('testDecipher: FAIL')\n  }\n}\n\ntestCipher('gf')\ntestDecipher('lm')\n<|endoftext|>"}
{"task_id": "JavaScript/90", "prompt": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n", "canonical_solution": "  let arr = lst\n  for (let j = 0; j < arr.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < arr.length; k++) {\n      if (arr[k] < arr[ind]) {\n        ind = k\n      }\n    }\n    let tmp = arr[j]\n    arr[j] = arr[ind]\n    arr[ind] = tmp\n  }\n  let smallest = arr[0]\n  let pt = 1\n  while(pt<arr.length){\n    if(arr[pt]>smallest){\n      return arr[pt]\n    }\n    pt++\n  }\n  return null\n}\n\n", "test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n  console.assert(nextSmallest([1, 1, 1, 1, 0]) === 1)\n  console.assert(nextSmallest([1, 0 ** 0]) === null)\n  console.assert(nextSmallest([-35, 34, 12, -45]) === -35)\n}\n\ntestNextSmallest()\n", "declaration": "\nconst nextSmallest = (lst) => {\n", "example_test": "const testNextSmallest = () => {\n  console.assert(nextSmallest([1, 2, 3, 4, 5]) === 2)\n  console.assert(nextSmallest([5, 1, 4, 3, 2]) === 2)\n  console.assert(nextSmallest([]) === null)\n  console.assert(nextSmallest([1, 1]) === null)\n}\ntestNextSmallest()\n", "entry_point": "nextSmallset", "gc": "/*\n  You are given a list of integers.\n  Write a function nextSmallset() that returns the 2nd smallest element of the list.\n  Return null if there is no such element.\n  \n  nextSmallset([1, 2, 3, 4, 5]) == 2\n  nextSmallset([5, 1, 4, 3, 2]) == 2\n  nextSmallset([]) == null\n  nextSmallset([1, 1]) == null\n  */\nconst nextSmallset = (lst) => {\n  let smallest = null;\n  for (let i = 0; i < lst.length - 1; i++) {\n    if (lst[i] < lst[i + 1]) {\n      smallest = lst[i + 1];\n      break;\n    }\n  }\n  return smallest;\n};\n\nconsole.log(nextSmallset([1, 2, 3, 4, 5])); // 2\nconsole.log(nextSmallset([5, 1, 4, 3, 2])); // 2\nconsole.log(nextSmallset([])); // null\nconsole.log(nextSmallset([1, 1])); // null\n<|endoftext|>"}
{"task_id": "JavaScript/91", "prompt": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n", "canonical_solution": "  let t = 0\n  if (S[0] == 'I' && S[1] == ' ') { t = 1 }\n  for (let i = 0; i < S.length; i++) {\n    if (S[i] == '.' || S[i] == '!' || S[i] == '?') {\n      if (S[i + 1] == ' ' && S[i + 2] == 'I' && S[i + 3] == ' ') {\n        t++\n      }\n    }\n  }\n  return t\n}\n\n", "test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('Is the sky blue?') === 0)\n  console.assert(isBored('I love It !') === 1)\n  console.assert(isBored('bIt') === 0)\n  console.assert(\n    isBored('I feel good today. I will be productive. will kill It') === 2\n  )\n  console.assert(isBored('You and I are going for a walk') === 0)\n}\n\ntestIsBored()\n", "declaration": "\nconst isBored = (S) => {\n", "example_test": "const testIsBored = () => {\n  console.assert(isBored('Hello world') === 0)\n  console.assert(isBored('The sky is blue. The sun is shining. I love this weather') === 1)\n}\ntestIsBored()\n", "entry_point": "isBoerd", "gc": "/*\n  You'll be given a string of words, and your task is to count the number\n  of boredoms. A boredom is a sentence that starts with the word \"I\".\n  Sentences are delimited by '.', '?' or '!'.\n \n  For example:\n  >>> isBoerd(\"Hello world\")\n  0\n  >>> isBoerd(\"The sky is blue. The sun is shining. I love this weather\")\n  1\n  */\nconst isBoerd = (S) => {\n    return S.split('').filter((c) => c.toLowerCase() === 'i').length > 0;\n};\n\nexport default isBoerd;\n<|endoftext|>"}
{"task_id": "JavaScript/92", "prompt": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n", "canonical_solution": "  if (x % 1 === 0 && y % 1 === 0 && z % 1 === 0 && (x + y === z || x + z === y || x === y + z)) {\n    return true\n  }\n  return false\n}\n\n", "test": "const testAnyInt = () => {\n  console.assert(anyInt(2, 3, 1) === true)\n  console.assert(anyInt(2.5, 2, 3) === false)\n  console.assert(anyInt(1.5, 5, 3.5) === false)\n  console.assert(anyInt(2, 6, 2) === false)\n  console.assert(anyInt(4, 2, 2) === true)\n  console.assert(anyInt(2.2, 2.2, 2.2) === false)\n  console.assert(anyInt(-4, 6, 2) === true)\n  console.assert(anyInt(2, 1, 1) === true)\n  console.assert(anyInt(3, 4, 7) === true)\n  console.assert(anyInt(3.0, 4, 7) === true)\n}\n\ntestAnyInt()\n", "declaration": "\nconst anyInt = (x, y, z) => {\n", "example_test": "const testAnyInt = () => {\n  console.assert(anyInt(5, 2, 7) === true)\n  console.assert(anyInt(3, 2, 2) === false)\n  console.assert(anyInt(3, -2, 1) === true)\n  console.assert(anyInt(3.6, -2.2, 2) === false)\n}\ntestAnyInt()\n", "entry_point": "anyInt", "gc": "/* Create a function that takes 3 numbers.\n  Returns true if one of the numbers is equal to the sum of the other two, and all numbers are integers.\n  Returns false in any other cases.\n  Examples\n  anyInt(5, 2, 7) ➞ true\n  anyInt(3, 2, 2) ➞ false\n  anyInt(3, -2, 1) ➞ true\n  anyInt(3.6, -2.2, 2) ➞ false\n  */\nconst anyInt = (x, y, z) => {\n  const n1 = parseInt(x);\n  const n2 = parseInt(y);\n  const n3 = parseInt(z);\n\n  if (n1 + n2 === n3) {\n    return true;\n  } else if (n1 === n2 || n1 === n3 || n2 === n3) {\n    return false;\n  } else {\n    return true;\n  }\n};\n\nexport default anyInt;\n<|endoftext|>"}
{"task_id": "JavaScript/93", "prompt": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < message.length; i++) {\n    let p = message[i].charCodeAt()\n    if (p > 96) { p -= 32 }\n    else if (p!=32 && p < 96) { p += 32 }\n    if (p == 65 || p == 97 || p == 69 || p == 101 || p == 73 || p == 105 || p == 79 || p == 111 || p == 85 || p == 117) { p += 2 }\n    t += String.fromCharCode(p)\n  }\n  return t\n}\n\n", "test": "const testEncode = () => {\n  console.assert(encode('TEST') === 'tgst')\n  console.assert(encode('Mudasir') === 'mWDCSKR')\n  console.assert(encode('YES') === 'ygs')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n  console.assert(\n    encode('I DoNt KnOw WhAt tO WrItE') === 'k dQnT kNqW wHcT Tq wRkTg'\n  )\n}\n\ntestEncode()\n", "declaration": "\nconst encode = (message) => {\n", "example_test": "const testEncode = () => {\n  console.assert(encode('test') === 'TGST')\n  console.assert(encode('This is a message') === 'tHKS KS C MGSSCGG')\n}\ntestEncode()\n", "entry_point": "encode", "gc": "/*\n  Write a function that takes a message, and encodes in such a \n  way that it swaps case of all letters, replaces all vowels in \n  the message with the letter that appears 2 places ahead of that \n  vowel in the english alphabet. \n  Assume only letters. \n  \n  Examples:\n  >>> encode('test')\n  'TGST'\n  >>> encode('This is a message')\n  'tHKS KS C MGSSCGG'\n  */\nconst encode = (message) => {\n  const vowels = ['A', 'E', 'I', 'O', 'U']\n  const consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z']\n  const alphabet = consonants.concat(vowels)\n  \n  let index = 0\n  let messageLength = message.length\n  let encodedMessage = ''\n  \n  while (index < messageLength) {\n    let vowelPosition = -1\n    let vowelIndex = 0\n    \n    while (vowelPosition < vowelIndex) {\n      vowelPosition = message.indexOf(vowels[vowelIndex], index)\n      vowelIndex++\n    }\n    \n    let consonant = alphabet[Math.floor(Math.random() * alphabet.length)]\n    \n    encodedMessage += vowelPosition === -1? consonant : message[vowelPosition + 2].toUpperCase()\n    index = vowelPosition + 2\n    \n    if (index < messageLength) {\n      encodedMessage += consonant\n    }\n  }\n  \n  return encodedMessage\n}\n\nmodule.exports = encode<|endoftext|>"}
{"task_id": "JavaScript/94", "prompt": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n", "canonical_solution": "  let t = 0\n  for (let i = 0; i < lst.length; i++) {\n    let p = 1\n    for (let j = 2; j * j <= lst[i]; j++) {\n      if (lst[i] % j == 0) { p = 0; break }\n    }\n    if (p == 1 && lst[i] > t) { t = lst[i] }\n  }\n  let k = 0\n  while (t != 0) {\n    k += t % 10\n    t = (t - t % 10) / 10\n  }\n  return k\n}\n\n", "test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n\n  console.assert(skjkasdkd([8191]) === 19)\n  console.assert(skjkasdkd([8191, 123456, 127, 7]) === 19)\n  console.assert(skjkasdkd([127, 97, 8192]) === 10)\n}\n\ntestSkjkasdkd()\n", "declaration": "\nconst skjkasdkd = (lst) => {\n", "example_test": "const testSkjkasdkd = () => {\n  console.assert(\n    skjkasdkd([\n      0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3,\n    ]) === 10\n  )\n  console.assert(\n    skjkasdkd([1, 0, 1, 8, 2, 4597, 2, 1, 3, 40, 1, 2, 1, 2, 4, 2, 5, 1]) === 25\n  )\n  console.assert(\n    skjkasdkd([\n      1, 3, 1, 32, 5107, 34, 83278, 109, 163, 23, 2323, 32, 30, 1, 9, 3,\n    ]) === 13\n  )\n  console.assert(\n    skjkasdkd([0, 724, 32, 71, 99, 32, 6, 0, 5, 91, 83, 0, 5, 6]) === 11\n  )\n  console.assert(skjkasdkd([0, 81, 12, 3, 1, 21]) === 3)\n  console.assert(skjkasdkd([0, 8, 1, 2, 1, 7]) === 7)\n}\ntestSkjkasdkd()\n", "entry_point": "ksjkasddk", "gc": "/*You are given a list of integers.\n  You need to find the largest prime value and return the sum of its digits.\n\n  Examples:\n  For lst = [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3] the output should be 10\n  For lst = [1,0,1,8,2,4597,2,1,3,40,1,2,1,2,4,2,5,1] the output should be 25\n  For lst = [1,3,1,32,5107,34,83278,109,163,23,2323,32,30,1,9,3] the output should be 13\n  For lst = [0,724,32,71,99,32,6,0,5,91,83,0,5,6] the output should be 11\n  For lst = [0,81,12,3,1,21] the output should be 3\n  For lst = [0,8,1,2,1,7] the output should be 7\n  */\nconst ksjkasddk = (lst) => {\n  const map = new Map();\n  const res = {};\n\n  const checkPrime = (x) => {\n    if (lst.indexOf(x) === -1) {\n      return false;\n    }\n    return x > 1 && x % 1 === 0;\n  }\n  for (const x of lst) {\n    if (!map.has(x)) {\n      map.set(x, true);\n      res.x = x;\n    }\n    if (checkPrime(x)) {\n      res.prime = x;\n      break;\n    }\n  }\n\n  if (!res.prime) {\n    for (const x of lst) {\n      if (!map.has(x)) {\n        map.set(x, true);\n        res.x = x;\n      }\n      if (checkPrime(x)) {\n        res.prime = x;\n        break;\n      }\n    }\n  }\n  if (res.prime) {\n    res.sum = res.x.toString().split('').reduce((pre, cur) => {\n      const n = parseInt(cur, 10);\n      return pre + n;\n    }, 0);\n  }\n\n  return res;\n}\n\nconst input = [0, 3, 2, 1, 3, 5, 7, 4, 5, 5, 5, 2, 181, 32, 4, 32, 3, 2, 32, 324, 4, 3];\nconst output = [10, 25, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13];\n\nconst result = ksjkasddk(input);\nconsole.log(`${result.prime} has a sum of: ${result.sum}`);\n\n/*\n  Input:\n  [0,3,2,1,3,5,7,4,5,5,5,2,181,32,4,32,3,2,32,324,4,3]\n  Output:\n  {x: 10, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {x: 13, prime: 13}\n  {"}
{"task_id": "JavaScript/95", "prompt": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n", "canonical_solution": "  let c = 0\n  let lo = 1\n  let hi = 1\n  for (let key in dict) {\n    c++\n    for (let i = 0; i < key.length; i++) {\n      if (key[i].charCodeAt() < 65 || key[i].charCodeAt() > 90) { hi = 0 }\n      if (key[i].charCodeAt() < 97 || key[i].charCodeAt() > 122) { lo = 0 }\n    }\n  }\n  if ((lo == 0 && hi == 0) || c == 0) { return false }\n  return true\n}\n\n", "test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 5: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n  console.assert(checkDictCase({ fruit: 'Orange', taste: 'Sweet' }) === true)\n  console.assert(checkDictCase({}) === false)\n}\n\ntestCheckDictCase()\n", "declaration": "\nconst checkDictCase = (dict) => {\n", "example_test": "const testCheckDictCase = () => {\n  console.assert(checkDictCase({ p: 'pineapple', b: 'banana' }) === true)\n  console.assert(\n    checkDictCase({ p: 'pineapple', A: 'banana', B: 'banana' }) === false\n  )\n  console.assert(\n    checkDictCase({ p: 'pineapple', 8: 'banana', a: 'apple' }) === false\n  )\n  console.assert(\n    checkDictCase({ Name: 'John', Age: '36', City: 'Houston' }) === false\n  )\n  console.assert(checkDictCase({ STATE: 'NC', ZIP: '12345' }) === true)\n}\ntestCheckDictCase()\n", "entry_point": "checkDictCase", "gc": "/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCase = (dict) => {\n    let dictValues = Object.keys(dict)\n    if (dictValues.length === 0) {\n        return false\n    }\n    let checkCase = dictValues.every((value) => {\n        return typeof value === \"string\"\n            && (value.toLowerCase() === value\n                || value.toUpperCase() === value)\n    })\n    return checkCase\n}\n\n/*\n  Given a dictionary, return true if all values are strings in lower \n  case or all values are strings in upper case, else return false.\n  The function should return false is the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValuesCase = (dict) => {\n    let dictValues = Object.values(dict)\n    if (dictValues.length === 0) {\n        return false\n    }\n    let checkCase = dictValues.every((value) => {\n        return typeof value === \"string\"\n            && (value.toLowerCase() === value\n                || value.toUpperCase() === value)\n    })\n    return checkCase\n}\n\n/*\n  Given a dictionary, return true if the dictionary is empty, else return false.\n  Examples:\n  checkEmpty({}) should return true.\n  checkEmpty({a:1}) should return false.\n  checkEmpty({a:1, b:2}) should return false.\n  */\nconst checkEmpty = (dict) => {\n    return Object.keys(dict).length === 0\n}\n\n/*\n  Given a dictionary, return true if the dictionary is empty, else return false.\n  Examples:\n  checkEmpty({}) should return true.\n  checkEmpty({a:1}) should return false.\n  checkEmpty({a:1, b:2}) should return false.\n  */\nconst checkNotEmpty = (dict) => {\n    return Object.keys(dict).length > 0\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false if the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictCaseNotEmpty = (dict) => {\n    return checkDictCase(dict) && checkEmpty(dict)\n}\n\n/*\n  Given a dictionary, return true if the dictionary is empty, else return false.\n  The function should return false if the given dictionary is empty.\n  Examples:\n  checkEmpty({}) should return true.\n  checkEmpty({a:1}) should return false.\n  checkEmpty({a:1, b:2}) should return false.\n  */\nconst checkEmptyNotEmpty = (dict) => {\n    return checkEmpty(dict) && checkNotEmpty(dict)\n}\n\n/*\n  Given a dictionary, return true if all values are strings in lower \n  case or all values are strings in upper case, else return false.\n  The function should return false if the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValuesCaseNotEmpty = (dict) => {\n    return checkDictValuesCase(dict) && checkEmptyNotEmpty(dict)\n}\n\n/*\n  Given a dictionary, return true if all keys are strings in lower \n  case or all keys are strings in upper case, else return false.\n  The function should return false if the given dictionary is empty.\n  Examples:\n  checkDictCase({\"a\":\"apple\", \"b\":\"banana\"}) should return true.\n  checkDictCase({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return false.\n  checkDictCase({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return false.\n  checkDictCase({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return false.\n  checkDictCase({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return true.\n  */\nconst checkDictValuesCaseNotEmpty = (dict) => {\n    return checkDictValuesCase(dict) && checkEmptyNotEmpty(dict)\n}\n"}
{"task_id": "JavaScript/96", "prompt": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = 2; i < n; i++) {\n    let p = 1\n    for (let j = 2; j * j <= i; j++) {\n      if (i % j == 0) { p = 0; break }\n    }\n    if (p == 1) { t.push(i) }\n  }\n  return t\n}\n\n", "test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(6)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(7)) === JSON.stringify([2, 3, 5]))\n  console.assert(JSON.stringify(countUpTo(10)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(22)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(47)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43])\n  )\n  console.assert(\n    JSON.stringify(countUpTo(101)) ===\n    JSON.stringify([\n      2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67,\n      71, 73, 79, 83, 89, 97,\n    ])\n  )\n}\n\ntestCountUpTo()\n", "declaration": "\nconst countUpTo = (n) => {\n", "example_test": "const testCountUpTo = () => {\n  console.assert(JSON.stringify(countUpTo(5)) === JSON.stringify([2, 3]))\n  console.assert(JSON.stringify(countUpTo(11)) === JSON.stringify([2, 3, 5, 7]))\n  console.assert(JSON.stringify(countUpTo(0)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(20)) ===\n    JSON.stringify([2, 3, 5, 7, 11, 13, 17, 19])\n  )\n  console.assert(JSON.stringify(countUpTo(1)) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(countUpTo(18)) === JSON.stringify([2, 3, 5, 7, 11, 13, 17])\n  )\n}\ntestCountUpTo()\n", "entry_point": "countUpTo", "gc": "/*Implement a function that takes an non-negative integer and returns an array of the first n\n  integers that are prime numbers and less than n.\n  for example:\n  countUpTo(5) => [2,3]\n  countUpTo(11) => [2,3,5,7]\n  countUpTo(0) => []\n  countUpTo(20) => [2,3,5,7,11,13,17,19]\n  countUpTo(1) => []\n  countUpTo(18) => [2,3,5,7,11,13,17]\n  */\nconst countUpTo = (n) => {\n  const primes = []\n  for (let i = 2; i <= n; i++) {\n    let prime = true\n    for (let j = 2; j <= Math.sqrt(i); j++) {\n      if (i % j === 0) {\n        prime = false\n        break\n      }\n    }\n    if (prime) {\n      primes.push(i)\n    }\n  }\n  return primes\n}\n\n// Test\nconsole.log(countUpTo(11))\n<|endoftext|>"}
{"task_id": "JavaScript/97", "prompt": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n", "canonical_solution": "  if (a < 0) { a = -a }\n  if (b < 0) { b = -b }\n  return (a % 10) * (b % 10)\n}\n\n", "test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n  console.assert(multiply(76, 67) === 42)\n  console.assert(multiply(17, 27) === 49)\n  console.assert(multiply(0, 1) === 0)\n  console.assert(multiply(0, 0) === 0)\n}\n\ntestMultiply()\n", "declaration": "\nconst multiply = (a, b) => {\n", "example_test": "const testMultiply = () => {\n  console.assert(multiply(148, 412) === 16)\n  console.assert(multiply(19, 28) === 72)\n  console.assert(multiply(2020, 1851) === 0)\n  console.assert(multiply(14, -15) === 20)\n}\ntestMultiply()\n", "entry_point": "multiply", "gc": "/*Complete the function that takes two integers and returns \n  the product of their unit digits.\n  Assume the input is always valid.\n  Examples:\n  multiply(148, 412) should return 16.\n  multiply(19, 28) should return 72.\n  multiply(2020, 1851) should return 0.\n  multiply(14,-15) should return 20.\n  */\nconst multiply = (a, b) => {\n  if (isNaN(a) || isNaN(b)) {\n    return NaN;\n  }\n  let result = 0;\n  for (let i = 0; i < a.length; i++) {\n    let digit = parseInt(a[i]);\n    result += (digit * parseInt(b[i]));\n  }\n  return result;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/98", "prompt": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < s.length; i += 2) {\n    if (s[i] == 'A' || s[i] == 'E' || s[i] == 'I' || s[i] == 'O' || s[i] == 'U') { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n  console.assert(countUpper('B') === 0)\n  console.assert(countUpper('U') === 1)\n  console.assert(countUpper('') === 0)\n  console.assert(countUpper('EEEE') === 2)\n}\n\ntestCountUpper()\n", "declaration": "\nconst countUpper = (s) => {\n", "example_test": "const testCountUpper = () => {\n  console.assert(countUpper('aBCdEf') === 1)\n  console.assert(countUpper('abcdefg') === 0)\n  console.assert(countUpper('dBBE') === 0)\n}\ntestCountUpper()\n", "entry_point": "countUpper", "gc": "/*\n  Given a string s, count the number of uppercase vowels in even indices.\n  \n  For example:\n  countUpper('aBCdEf') returns 1\n  countUpper('abcdefg') returns 0\n  countUpper('dBBE') returns 0\n  */\nconst countUpper = (s) => {\n  return s.match(/[a-z]/g).filter(v => v.toUpperCase() === v).length;\n}\n\n/*\n  Given a string s, count the number of lowercase vowels in odd indices.\n  \n  For example:\n  countLower('aBCdEf') returns 2\n  countLower('abcdefg') returns 0\n  countLower('dBBE') returns 1\n  */\nconst countLower = (s) => {\n  return s.match(/[a-z]/g).filter(v => v.toLowerCase() === v).length;\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  return s.match(/[^a-z]/g).filter(v => v.toUpperCase() === v).length;\n}\n\n/*\n  Given a string s, count the number of vowels in even indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 0\n  */\nconst countVowels = (s) => {\n  return s.match(/[a-z]/g).filter(v => v.toUpperCase() === v).length;\n}\n\n/*\n  Given a string s, count the number of consonants in odd indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 1\n  */\nconst countConsonants = (s) => {\n  return s.match(/[^a-z]/g).filter(v => v.toUpperCase() === v).length;\n}\n\n/*\n  Given a string s, count the number of vowels in odd indices.\n  \n  For example:\n  countVowels('aBCdEf') returns 1\n  countVowels('abcdefg') returns 0\n  countVowels('dBBE') returns 1\n  */\nconst countVowels = (s) => {\n  return s.match(/[a-z]/g).filter(v => v.toUpperCase() === v).length;\n}\n\n/*\n  Given a string s, count the number of consonants in even indices.\n  \n  For example:\n  countConsonants('aBCdEf') returns 2\n  countConsonants('abcdefg') returns 0\n  countConsonants('dBBE') returns 0\n  */\nconst countConsonants = (s) => {\n  return s.match(/[^a-z]/g).filter(v => v.toUpperCase() === v).length;\n}\n\nconst count = (s) => {\n  return countVowels(s) + countConsonants(s);\n}\n\nconsole.log(count('aBCdEf'));\nconsole.log(count('abcdefg'));\nconsole.log(count('dBBE'));\n<|endoftext|>"}
{"task_id": "JavaScript/99", "prompt": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n", "canonical_solution": "  value = Number(value)\n  let t = value % 1\n  if (t < 0.5 && t > -0.5) { value -= t }\n  else { value += t }\n  return value\n}\n\n", "test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('14.5') === 15)\n  console.assert(closestInteger('-15.5') === -16)\n  console.assert(closestInteger('15.3') === 15)\n  console.assert(closestInteger('0') === 0)\n}\n\ntestClosestInteger()\n", "declaration": "\nconst closestInteger = (value) => {\n", "example_test": "const testClosestInteger = () => {\n  console.assert(closestInteger('10') === 10)\n  console.assert(closestInteger('15.3') === 15)\n}\ntestClosestInteger()\n", "entry_point": "closestInetger", "gc": "/* Create a function that takes a value (string) representing a number\n  and returns the closest integer to it. If the number is equidistant\n  from two integers, round it away from zero.\n  Examples\n  >>> closestInetger(\"10\")\n  10\n  >>> closestInetger(\"15.3\")\n  15\n  Note:\n  Rounding away from zero means that if the given number is equidistant\n  from two integers, the one you should return is the one that is the\n  farthest from zero. For example closestInetger(\"14.5\") should\n  return 15 and closestInetger(\"-14.5\") should return -15.\n  */\nconst closestInetger = (value) => {\n  const diff = (a, b) => Math.abs(a - b);\n  let min = diff(value, 0);\n  let max = min;\n  for (let i = 1; i < 1000; i++) {\n    let newValue = i * 10;\n    let diff = diff(value, newValue);\n    if (diff < min) {\n      min = diff;\n    }\n    if (diff > max) {\n      max = diff;\n    }\n  }\n  if (max === min) {\n    return (Math.round(value) / 10) * 10;\n  }\n  return (Math.round((value + min) / 10) * 10) + Math.round((value + max) / 10);\n};\n\nconsole.log(closestInetger(\"10\"));\nconsole.log(closestInetger(\"15.3\"));\nconsole.log(closestInetger(\"-14.5\"));\n<|endoftext|>"}
{"task_id": "JavaScript/100", "prompt": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n", "canonical_solution": "  let t = []\n  for (let i = n; i < n * 3; i += 2) {\n    t.push(i)\n  }\n  return t\n}\n\n", "test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n  console.assert(JSON.stringify(makeAPile(4)) === JSON.stringify([4, 6, 8, 10]))\n  console.assert(\n    JSON.stringify(makeAPile(5)) === JSON.stringify([5, 7, 9, 11, 13])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(6)) === JSON.stringify([6, 8, 10, 12, 14, 16])\n  )\n  console.assert(\n    JSON.stringify(makeAPile(8)) ===\n    JSON.stringify([8, 10, 12, 14, 16, 18, 20, 22])\n  )\n}\n\ntestMakeAPile()\n", "declaration": "\nconst makeAPile = (n) => {\n", "example_test": "const testMakeAPile = () => {\n  console.assert(JSON.stringify(makeAPile(3)) === JSON.stringify([3, 5, 7]))\n}\ntestMakeAPile()\n", "entry_point": "makeAPile", "gc": "/*\n  Given a positive integer n, you have to make a pile of n levels of stones.\n  The first level has n stones.\n  The number of stones in the next level is:\n      - the next odd number if n is odd.\n      - the next even number if n is even.\n  Return the number of stones in each level in a list, where element at index\n  i represents the number of stones in the level (i+1).\n\n  Examples:\n  >>> makeAPile(3)\n  [3, 5, 7]\n  */\nconst makeAPile = (n) => {\n  if (n === 0) return [0];\n  let nums = [1];\n  for (let i = 2; i < n; i += 2) {\n    if (i % 2 === 0) {\n      nums.push(i + 1);\n    } else {\n      nums.push(2 * i + 1);\n    }\n  }\n  return nums;\n};\n\nmodule.exports = makeAPile;\n<|endoftext|>"}
{"task_id": "JavaScript/101", "prompt": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n", "canonical_solution": "  let t = ''\n  let p = []\n  let k = 0\n  for (let i = 0; i < s.length; i++) {\n    if (s[i] == ' ' || s[i] == ',') {\n      if (k == 0) {\n        k = 1;\n        p.push(t);\n        t = '';\n      }\n    }\n    else {\n      k = 0;\n      t += s[i]\n    }\n  }\n  if (t != '') {\n    p.push(t);\n  }\n  return p\n}\n\n", "test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name')) ===\n    JSON.stringify(['Hi', 'my', 'name'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One,, two, three, four, five, six,')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n  console.assert(JSON.stringify(wordsString('')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(wordsString('ahmed     , gamal')) ===\n    JSON.stringify(['ahmed', 'gamal'])\n  )\n}\n\ntestWordsString()\n", "declaration": "\nconst wordsString = (s) => {\n", "example_test": "const testWordsString = () => {\n  console.assert(\n    JSON.stringify(wordsString('Hi, my name is John')) ===\n    JSON.stringify(['Hi', 'my', 'name', 'is', 'John'])\n  )\n  console.assert(\n    JSON.stringify(wordsString('One, two, three, four, five, six')) ===\n    JSON.stringify(['One', 'two', 'three', 'four', 'five', 'six'])\n  )\n}\ntestWordsString()\n", "entry_point": "wordsString", "gc": "/*\n  You will be given a string of words separated by commas or spaces. Your task is\n  to split the string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsString = (s) => {\n  const wordArray = s.split(/[,\\s]/);\n  const words = wordArray.map((e) => {\n    return e.toLowerCase();\n  });\n  return words;\n};\n\n/*\n  Your task is to return a string containing the first 5 words of a string.\n  \n  For example:\n  firstFiveWords(\"Hi, my name is John\") == \"Hi, my\"\n  firstFiveWords(\"One, two, three, four, five, six\") == \"One, two, three, four, five\"\n  */\nconst firstFiveWords = (s) => {\n  return wordsString(s).slice(0,5);\n};\n\n/*\n  Your task is to split a string into words and return an array of the words.\n  \n  For example:\n  wordsString(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsString(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst wordsArray = (s) => {\n  const words = wordsString(s).split(/[,\\s]+/);\n  return words;\n};\n\n/*\n  Your task is to return a string containing the first 5 words of a string.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n  */\nconst firstFiveWordsArray = (s) => {\n  return wordsArray(s).slice(0,5);\n};\n\n/*\n  You will be given a string of words. Return a string with all the unique words\n  that are contained in the string.\n  \n  For example:\n  uniqueWords(\"Hi, my name is John\") == \"Hi, my name is John\"\n  uniqueWords(\"Hi, my name is John, my name is Jack\") == \"Hi, my name is Jack\"\n  uniqueWords(\"Hi, my name is John, my name is Jack, my name is Jim\") == \"Hi, my name is Jack\"\n  */\nconst uniqueWords = (s) => {\n  const uniqueArray = [];\n  const wordsArray = wordsArray(s);\n  \n  for (let i = 0; i < wordsArray.length; i++) {\n    const word = wordsArray[i];\n    \n    if (uniqueArray.indexOf(word) === -1) {\n      uniqueArray.push(word);\n    }\n  }\n  \n  return uniqueArray.join(\", \");\n};\n\n/*\n  Your task is to split a string into words and return an array of the words.\n  \n  For example:\n  wordsArray(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n  wordsArray(\"Hi, my name is John, my name is Jack\") == [\"Hi\", \"my\", \"name\", \"is\", \"Jack\"]\n  wordsArray(\"Hi, my name is John, my name is Jack, my name is Jim\") == [\"Hi\", \"my\", \"name\", \"is\", \"Jack\"]\n  */\nconst wordsArrayArray = (s) => {\n  const wordsArray = wordsArray(s);\n  \n  return wordsArray;\n};\n\n/*\n  Given a string, return a string with all the unique words that are contained in the string.\n  \n  For example:\n  uniqueWords(\"Hi, my name is John\") == \"Hi, my name is John\"\n  uniqueWords(\"Hi, my name is John, my name is Jack\") == \"Hi, my name is Jack\"\n  uniqueWords(\"Hi, my name is John, my name is Jack, my name is Jim\") == \"Hi, my name is Jack\"\n  */\nconst uniqueWordsArray = (s) => {\n  const uniqueArray = [];\n  const wordsArray = wordsArrayArray(s);\n  \n  for (let i = 0; i < wordsArray.length; i++) {\n    const word = wordsArray[i];\n    \n    if (uniqueArray.indexOf(word) === -1) {\n      uniqueArray.push(word);\n    }\n  }\n  \n  return uniqueArray.join(\", \");\n};\n\n/*\n  Your task is to return a string containing the first 5 unique words of a string.\n  \n  For example:\n  uniqueWords(\"Hi, my name is John\") == \"Hi, my name is John\"\n  uniqueWords(\"Hi, my name is John, my name is Jack\") == \"Hi, my name is Jack\"\n  uniqueWords(\"Hi, my name is John, my name is Jack, my name is Jim\") == \"Hi, my name is Jack\"\n  */\nconst firstFiveUniqueWords = (s) => {\n  const uniqueArray = uniqueWordsArray(s);\n  \n  return uniqueArray.slice(0,5);\n};\n\nmodule.exports = {\n  wordsString,\n  wordsArray,\n  firstFiveWords,\n  firstFiveUniqueWords\n};<|endoftext|>"}
{"task_id": "JavaScript/102", "prompt": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n", "canonical_solution": "  for (let i = y; i >= x; i--) {\n    if (i % 2 == 0) {return i }\n  }\n  return -1\n}\n\n", "test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n  console.assert(chooseNum(33, 12354) === 12354)\n  console.assert(chooseNum(5234, 5233) === -1)\n  console.assert(chooseNum(6, 29) === 28)\n  console.assert(chooseNum(27, 10) === -1)\n  console.assert(chooseNum(7, 7) === -1)\n  console.assert(chooseNum(546, 546) === 546)\n}\n\ntestChooseNum()\n", "declaration": "\nconst chooseNum = (x, y) => {\n", "example_test": "const testChooseNum = () => {\n  console.assert(chooseNum(12, 15) === 14)\n  console.assert(chooseNum(13, 12) === -1)\n}\ntestChooseNum()\n", "entry_point": "chooseNum", "gc": "/*This function takes two positive numbers x and y and returns the\n  biggest even integer number that is in the range [x, y] inclusive. If \n  there's no such number, then the function should return -1.\n\n  For example:\n  chooseNum(12, 15) = 14\n  chooseNum(13, 12) = -1\n  */\nconst chooseNum = (x, y) => {\n  let i = x - 1;\n  let j = y;\n  while (i < j) {\n    if (i % 2 === 0) {\n      return i;\n    }\n    i += 2;\n  }\n  return -1;\n}\n\n//console.log(chooseNum(12, 15));\n//console.log(chooseNum(13, 12));\n//console.log(chooseNum(14, 12));\n//console.log(chooseNum(15, 12));\n//console.log(chooseNum(16, 12));\n//console.log(chooseNum(17, 12));\n//console.log(chooseNum(18, 12));\n//console.log(chooseNum(19, 12));\n//console.log(chooseNum(20, 12));\n//console.log(chooseNum(21, 12));\n//console.log(chooseNum(22, 12));\n//console.log(chooseNum(23, 12));\n//console.log(chooseNum(24, 12));\n//console.log(chooseNum(25, 12));\n//console.log(chooseNum(26, 12));\n//console.log(chooseNum(27, 12));\n//console.log(chooseNum(28, 12));\n//console.log(chooseNum(29, 12));\n//console.log(chooseNum(30, 12));\n//console.log(chooseNum(31, 12));\n//console.log(chooseNum(32, 12));\n//console.log(chooseNum(33, 12));\n//console.log(chooseNum(34, 12));\n//console.log(chooseNum(35, 12));\n//console.log(chooseNum(36, 12));\n//console.log(chooseNum(37, 12));\n//console.log(chooseNum(38, 12));\n//console.log(chooseNum(39, 12));\n//console.log(chooseNum(40, 12));\n//console.log(chooseNum(41, 12));\n//console.log(chooseNum(42, 12));\n//console.log(chooseNum(43, 12));\n//console.log(chooseNum(44, 12));\n//console.log(chooseNum(45, 12));\n//console.log(chooseNum(46, 12));\n//console.log(chooseNum(47, 12));\n//console.log(chooseNum(48, 12));\n//console.log(chooseNum(49, 12));\n//console.log(chooseNum(50, 12));\n//console.log(chooseNum(51, 12));\n//console.log(chooseNum(52, 12));\n//console.log(chooseNum(53, 12));\n//console.log(chooseNum(54, 12));\n//console.log(chooseNum(55, 12));\n//console.log(chooseNum(56, 12));\n//console.log(chooseNum(57, 12));\n//console.log(chooseNum(58, 12));\n//console.log(chooseNum(59, 12));\n//console.log(chooseNum(60, 12));\n//console.log(chooseNum(61, 12));\n//console.log(chooseNum(62, 12));\n//console.log(chooseNum(63, 12));\n//console.log(chooseNum(64, 12));\n//console.log(chooseNum(65, 12));\n//console.log(chooseNum(66, 12));\n//console.log(chooseNum(67, 12));\n//console.log(chooseNum(68, 12));\n//console.log(chooseNum(69, 12));\n//console.log(chooseNum(70, 12));\n//console.log(chooseNum(71, 12));\n//console.log(chooseNum(72, 12));\n//console.log(chooseNum(73, 12));\n//console.log(chooseNum(74, 12));\n//console.log(chooseNum(75, 12));\n//console.log(chooseNum(76, 12));\n//console.log(chooseNum(77, 12));\n//console.log(chooseNum(78, 12));\n//console.log(chooseNum(79, 12));\n//console.log(chooseNum(80, 12));\n//console.log(chooseNum(81, 12));\n//console.log(chooseNum(82, 12));\n//console.log(chooseNum(83, 12));\n//console.log(chooseNum(84, 12));\n//console.log(chooseNum(85, 12));\n//console.log(chooseNum(86, 12));\n//console.log(chooseNum(87, 12));\n//console.log(chooseNum(88, 12));\n//console.log(chooseNum(89, 12));\n//console.log(chooseNum(90, 12));\n//console.log(chooseNum(91, 12));\n//console.log(chooseNum(92, 12));\n//console.log(chooseNum(93, 12));\n//console.log(chooseNum(94, 12));\n//console.log(chooseNum(95, 12));\n//console.log(chooseNum(96, 12));\n//console.log(chooseNum(97, 12));\n//console.log(chooseNum(98, 12));\n//console.log(chooseNum(99, 12));\n//console.log(chooseNum(100, 12));\n//console.log(chooseNum(101, 12));\n//console.log(chooseNum(102, 12));\n//console.log(chooseNum(103, 12));\n//console.log(chooseNum(104, 12));\n//console.log(chooseNum(105, 12));\n//console.log(chooseNum(106, 12));\n//console.log(chooseNum(107, 12));\n//console.log(chooseNum(108, 12));\n//console.log(chooseNum(109, 12));\n//console.log(cho"}
{"task_id": "JavaScript/103", "prompt": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n", "canonical_solution": "  if (n > m) { return -1 }\n  let k = (n + m) / 2\n  if (k % 1 != 0) { k = (n + m + 1) / 2 }\n  return '0b' + k.toString(2)\n}\n\n", "test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(964, 977) === '0b1111001011')\n  console.assert(roundedAvg(996, 997) === '0b1111100101')\n  console.assert(roundedAvg(560, 851) === '0b1011000010')\n  console.assert(roundedAvg(185, 546) === '0b101101110')\n  console.assert(roundedAvg(362, 496) === '0b110101101')\n  console.assert(roundedAvg(350, 902) === '0b1001110010')\n  console.assert(roundedAvg(197, 233) === '0b11010111')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(5, 1) === -1)\n  console.assert(roundedAvg(5, 5) === '0b101')\n}\n\ntestRoundedAvg()\n", "declaration": "\nconst roundedAvg = (n, m) => {\n", "example_test": "const testRoundedAvg = () => {\n  console.assert(roundedAvg(1, 5) === '0b11')\n  console.assert(roundedAvg(7, 13) === '0b1010')\n  console.assert(roundedAvg(7, 5) === -1)\n  console.assert(roundedAvg(10,20) === \"0b1111\")\n  console.assert(roundedAvg(20,33) === '0b11011')\n}\ntestRoundedAvg()\n", "entry_point": "roundedAvg", "gc": "/*You are given two positive integers n and m, and your task is to compute the\n  average of the integers from n through m (including n and m). \n  Round the answer to the nearest integer and convert that to binary.\n  If n is greater than m, return -1.\n  Example:\n  roundedAvg(1, 5) => \"0b11\"\n  roundedAvg(7, 5) => -1\n  roundedAvg(10, 20) => \"0b1111\"\n  roundedAvg(20, 33) => \"0b11010\"\n  */\nconst roundedAvg = (n, m) => {\n  let avg = (n + m) / 2\n  return `0b${Math.round(avg)}`\n}\n\nmodule.exports = roundedAvg\n<|endoftext|>"}
{"task_id": "JavaScript/104", "prompt": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < x.length; i++) {\n    let h = x[i]\n    let boo = 1\n    while (h > 0) {\n      let r = h % 10\n      if (r % 2 == 0) {\n        boo = 0;\n        break;\n      }\n      h = (h - r) / 10\n    }\n    if (boo) {\n      p.push(x[i])\n    }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([12345, 2033, 111, 151])) ===\n    JSON.stringify([111, 151])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([135, 103, 31])) === JSON.stringify([31, 135])\n  )\n}\n\ntestUniqueDigits()\n", "declaration": "\nconst uniqueDigits = (x) => {\n", "example_test": "const testUniqueDigits = () => {\n  console.assert(\n    JSON.stringify(uniqueDigits([15, 33, 1422, 1])) ===\n    JSON.stringify([1, 15, 33])\n  )\n  console.assert(\n    JSON.stringify(uniqueDigits([152, 323, 1422, 10])) === JSON.stringify([])\n  )\n}\ntestUniqueDigits()\n", "entry_point": "uniqueDigtis", "gc": "/*Given a list of positive integers x. return a sorted list of all \n  elements that hasn't any even digit.\n\n  Note: Returned list should be sorted in increasing order.\n  \n  For example:\n  >>> uniqueDigtis([15, 33, 1422, 1])\n  [1, 15, 33]\n  >>> uniqueDigtis([152, 323, 1422, 10])\n  []\n  */\nconst uniqueDigtis = (x) => {\n  if (x === 0) {\n    return [];\n  }\n  let isEven = (i) => i % 2 === 0;\n  const sorted = [...x].sort((a, b) => a - b);\n  return [...sorted.filter(isEven)];\n};\n\nmodule.exports = uniqueDigtis;\n<|endoftext|>"}
{"task_id": "JavaScript/105", "prompt": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1 , 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n", "canonical_solution": "  p = []\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] > 0 && arr[i] < 10) { p.push(arr[i]) }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] > p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  let l = ['One', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight', 'Nine']\n  let t = []\n  for (let j = 0; j < p.length; j++) {\n    t.push(l[p[j]-1])\n  }\n  return t\n}\n\n", "test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([1, -1, 3, 2])) ===\n    JSON.stringify(['Three', 'Two', 'One'])\n  )\n  console.assert(\n    JSON.stringify(byLength([9, 4, 8])) ===\n    JSON.stringify(['Nine', 'Eight', 'Four'])\n  )\n}\n\ntestByLength()\n", "declaration": "\nconst byLength = (arr) => {\n", "example_test": "const testByLength = () => {\n  console.assert(\n    JSON.stringify(byLength([2, 1, 1, 4, 5, 8, 2, 3])) ===\n    JSON.stringify([\n      'Eight',\n      'Five',\n      'Four',\n      'Three',\n      'Two',\n      'Two',\n      'One',\n      'One',\n    ])\n  )\n  console.assert(JSON.stringify(byLength([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(byLength([1, -1, 55])) === JSON.stringify(['One'])\n  )\n}\ntestByLength()\n", "entry_point": "ybLength", "gc": "/*\n  Given an array of integers, sort the integers that are between 1 and 9 inclusive,\n  reverse the resulting array, and then replace each digit by its corresponding name from\n  \"One\", \"Two\", \"Three\", \"Four\", \"Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n  For example:\n    arr = [2, 1, 1, 4, 5, 8, 2, 3]   \n          -> sort arr -> [1, 1, 2, 2, 3, 4, 5, 8] \n          -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n    return [\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \n    If the array is empty, return an empty array:\n    arr = []\n    return []\n  \n    If the array has any strange number ignore it:\n    arr = [1, -1, 55] \n          -> sort arr -> [-1, 1, 55]\n          -> reverse arr -> [55, 1, -1]\n    return = ['One']\n  */\nconst ybLength = (arr) => {\n  let len = arr.length\n  if (!len) return []\n  let newArr = []\n  let start = 1\n  while (start <= len) {\n    let end = start + 9\n    while (end <= len) {\n      newArr.push(arr[start - 1])\n      start++\n      end++\n    }\n    start = start + 1\n  }\n  newArr.reverse()\n  return newArr\n}\n\nconst ybSort = (arr) => {\n  let newArr = ybLength(arr)\n  let i = 0\n  while (i < newArr.length) {\n    let j = 0\n    while (j < newArr.length) {\n      if (newArr[i] > newArr[j]) {\n        let tmp = newArr[i]\n        newArr[i] = newArr[j]\n        newArr[j] = tmp\n      }\n      j++\n    }\n    i++\n  }\n  return newArr\n}\n\nexport default ybSort\n<|endoftext|>"}
{"task_id": "JavaScript/106", "prompt": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 * ... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n", "canonical_solution": "  let f = 1\n  let p = 0\n  let k = []\n  for (let i = 1; i <= n; i++) {\n    p += i;\n    f *= i;\n    if (i % 2 == 0) { k.push(f) }\n    else { k.push(p) }\n  }\n  return k\n}\n\n", "test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n  console.assert(\n    JSON.stringify(f(7)) === JSON.stringify([1, 2, 6, 24, 15, 720, 28])\n  )\n  console.assert(JSON.stringify(f(1)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(f(3)) === JSON.stringify([1, 2, 6]))\n}\n\ntestF()\n", "declaration": "\nconst f = (n) => {\n", "example_test": "const testF = () => {\n  console.assert(JSON.stringify(f(5)) === JSON.stringify([1, 2, 6, 24, 15]))\n}\ntestF()\n", "entry_point": "f", "gc": "/* Implement the function f that takes n as a parameter,\n  and returns a list of size n, such that the value of the element at index i is the factorial of i if i is even\n  or the sum of numbers from 1 to i otherwise.\n  i starts from 1.\n  the factorial of i is the multiplication of the numbers from 1 to i (1 * 2 *... * i).\n  Example:\n  f(5) == [1, 2, 6, 24, 15]\n  */\nconst f = (n) => {\n  const factorials = [];\n  for (let i = 1; i <= n; i++) {\n    if (i % 2 === 0) {\n      factorials.push(1);\n    } else {\n      factorials.push(1 + Math.pow(i, n));\n    }\n  }\n  return factorials;\n};\n\nconsole.log(f(5));\n<|endoftext|>"}
{"task_id": "JavaScript/107", "prompt": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n", "canonical_solution": "  let e = 0\n  let o = 0\n  for (let i = 1; i <= n; i++) {\n    let k = i.toString()\n    let p = 1\n    for (let j = 0; j < k.length; j++) {\n      if (k[j] != k[k.length - j - 1]) {\n        p = 0;\n        break;\n      }\n    }\n    if (p == 1) {\n      if (k % 2 == 0) { e++ }\n      else { o++ }\n    }\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(123)) === JSON.stringify((8, 13))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(63)) === JSON.stringify((6, 8))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(25)) === JSON.stringify((5, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(19)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(9)) === JSON.stringify((4, 5))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(1)) === JSON.stringify((0, 1))\n  )\n}\n\ntestEvenOddPalindrome()\n", "declaration": "\nconst evenOddPalindrome = (n) => {\n", "example_test": "const testEvenOddPalindrome = () => {\n  console.assert(\n    JSON.stringify(evenOddPalindrome(12)) === JSON.stringify((4, 6))\n  )\n  console.assert(\n    JSON.stringify(evenOddPalindrome(3)) === JSON.stringify((1, 2))\n  )\n}\ntestEvenOddPalindrome()\n", "entry_point": "evenOddPalindrome", "gc": "/*\n  Given a positive integer n, return a tuple that has the number of even and odd\n  integer palindromes that fall within the range(1, n), inclusive.\n\n  Example 1:\n\n      Input: 3\n      Output: (1, 2)\n      Explanation:\n      Integer palindrome are 1, 2, 3. one of them is even, and two of them are odd.\n\n  Example 2:\n\n      Input: 12\n      Output: (4, 6)\n      Explanation:\n      Integer palindrome are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\n  Note:\n      1. 1 <= n <= 10^3\n      2. returned tuple has the number of even and odd integer palindromes respectively.\n  */\nconst evenOddPalindrome = (n) => {\n  const odd = n - 1\n  const even = n - 2\n  const evenPalindromes = []\n  const oddPalindromes = []\n  const i = 1\n  while (i <= n) {\n    const p = i\n    if (isPalindrome(p)) {\n      if (p % 2 === 0) {\n        evenPalindromes.push(p)\n      } else {\n        oddPalindromes.push(p)\n      }\n    }\n    i += 2\n  }\n  return {\n    even: evenPalindromes.length,\n    odd: oddPalindromes.length\n  }\n}\n\nfunction isPalindrome (number) {\n  let i = 0\n  let j = number.length - 1\n  while (i <= j) {\n    if (number[i]!== number[j]) {\n      return false\n    }\n    i++\n    j--\n  }\n  return true\n}\n\n/*\n  Given a string, return the length of the longest substring without repeating\n  characters. For example, the longest substring without repeating letters for\n  \"abcabcbb\" is \"abc\", which the length is 3. For \"bbbbb\" the longest substring\n  is \"b\", with the length of 1.\n  Note:\n\n    You may assume the string contain only lowercase letters.\n  */\nconst longestSubstringWithoutRepeatingCharacters = (s) => {\n  let l = 1\n  let r = 1\n  let result = ''\n  let temp = ''\n  let i = 0\n  while (i <= s.length - 1) {\n    while (r <= s.length - 1 && s[r]!== s[i]) {\n      r++\n    }\n    temp = s.slice(i, r)\n    if (l < temp.length) {\n      l = temp.length\n      result = temp\n    }\n    i++\n  }\n  return result\n}\n<|endoftext|>"}
{"task_id": "JavaScript/108", "prompt": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < arr.length; i++) {\n    let h = arr[i]\n    if (h > 0) {\n      p++;\n      continue;\n    }\n    let k = 0\n    h = -h\n    while (h >= 10) {\n      k += h % 10;\n      h = (h - h % 10) / 10;\n    }\n    k -= h;\n    if (k > 0) { p++ }\n  }\n  return p\n}\n\n", "test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, -2, 0]) === 0)\n  console.assert(countNums([1, 1, 2, -2, 3, 4, 5]) === 6)\n  console.assert(countNums([1, 6, 9, -6, 0, 1, 5]) === 5)\n  console.assert(countNums([1, 100, 98, -7, 1, -1]) === 4)\n  console.assert(countNums([12, 23, 34, -45, -56, 0]) === 5)\n  console.assert(countNums([-0, 1 ** 0]) === 1)\n  console.assert(countNums([1]) === 1)\n}\n\ntestCountNums()\n", "declaration": "\nconst countNums = (arr) => {\n", "example_test": "const testCountNums = () => {\n  console.assert(countNums([]) === 0)\n  console.assert(countNums([-1, 11, -11]) === 1)\n  console.assert(countNums([1, 1, 2]) === 3)\n}\ntestCountNums()\n", "entry_point": "countNmus", "gc": "/*\n  Write a function countNmus which takes an array of integers and returns\n  the number of elements which has a sum of digits > 0.\n  If a number is negative, then its first signed digit will be negative:\n  e.g. -123 has signed digits -1, 2, and 3.\n  >>> countNmus([]) == 0\n  >>> countNmus([-1, 11, -11]) == 1\n  >>> countNmus([1, 1, 2]) == 3\n  */\nconst countNmus = (arr) => {\n  let count = 0;\n  for (let i = 0; i < arr.length; i++) {\n    if (arr[i] >= 0) {\n      let digits = Math.floor(arr[i]);\n      for (let j = 0; j < 9; j++) {\n        if (digits % 10 > 0) {\n          count++;\n        }\n        digits = Math.floor(digits / 10);\n      }\n    }\n  }\n  return count;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/109", "prompt": "/*We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return true }\n  let k = 0\n  let len = arr.length\n  for (let i = 0; i < len; i++) {\n    let t = 1;\n    for (let j = 1; j < len; j++) {\n      if (arr[j] < arr[j - 1]) {\n        t = 0;\n        break;\n      }\n    }\n    if (t == 1) {\n      k = 1;\n      break;\n    }\n    arr.push(arr[0]);\n    arr.shift()\n  }\n  if (k == 1) { return true }\n  return false\n}\n\n", "test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 10, 1, 2]) === true)\n  console.assert(moveOneBall([4, 3, 1, 2]) === false)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n  console.assert(moveOneBall([]) === true)\n}\n\ntestMoveOneBall()\n", "declaration": "\nconst moveOneBall = (arr) => {\n", "example_test": "const testMoveOneBall = () => {\n  console.assert(moveOneBall([3, 4, 5, 1, 2]) === true)\n  console.assert(moveOneBall([3, 5, 4, 1, 2]) === false)\n}\ntestMoveOneBall()\n", "entry_point": "moveOneBall", "gc": "/*We have an array 'arr' of N integers arr[1], arr[2],..., arr[N].The\n  numbers in the array will be randomly ordered. Your task is to determine if\n  it is possible to get an array sorted in non-decreasing order by performing \n  the following operation on the given array:\n      You are allowed to perform right shift operation any number of times.\n  \n  One right shift operation means shifting all elements of the array by one\n  position in the right direction. The last element of the array will be moved to\n  the starting position in the array i.e. 0th index. \n\n  If it is possible to obtain the sorted array by performing the above operation\n  then return true else return false.\n  If the given array is empty then return true.\n\n  Note: The given list is guaranteed to have unique elements.\n\n  For Example:\n  \n  moveOneBall([3, 4, 5, 1, 2])==>true\n  Explanation: By performin 2 right shift operations, non-decreasing order can\n               be achieved for the given array.\n  moveOneBall([3, 5, 4, 1, 2])==>false\n  Explanation:It is not possible to get non-decreasing order for the given\n              array by performing any number of right shift operations.\n              \n  */\nconst moveOneBall = (arr) => {\n  // Check if the given array is empty\n  if (!arr) return true;\n\n  // Move the last element to the beginning of the array\n  arr.unshift(arr.pop());\n\n  // Keep looping until the given array is sorted in non-decreasing order\n  for (let i = 1; i < arr.length - 1; i++) {\n    // If the current number is less than the next element, then right shift\n    if (arr[i] < arr[i + 1]) {\n      for (let j = i; j > 0; j--) {\n        arr[j] = arr[j - 1];\n      }\n      arr[0] = arr[i + 1];\n    }\n  }\n  return arr.every((x) => x <= arr[0]);\n};\n\n// Test Cases\n[\n  [[1, 2, 3, 4, 5], false],\n  [[2, 3, 4, 5, 1], true],\n  [[3, 4, 5, 1, 2], true],\n  [[4, 5, 1, 2, 3], true],\n  [[5, 1, 2, 3, 4], true],\n  [[1, 2, 3, 4, 5, 6], false]\n].forEach(([arr, expected]) => {\n  console.log(`${expected} => ${moveOneBall(arr)}`);\n});\n<|endoftext|>"}
{"task_id": "JavaScript/110", "prompt": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n", "canonical_solution": "  let k = lst1.length\n  let t = 0\n  for (let i = 0; i < lst1.length; i++) {\n    if (lst1[i] % 2 == 0) { t++ }\n  }\n  for (let i = 0; i < lst2.length; i++) {\n    if (lst2[i] % 2 == 0) { t++ }\n  }\n  if (t >= k) { return 'YES' }\n  return 'NO'\n}\n\n", "test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n  console.assert(exchange([1, 2, 3, 4], [2, 1, 4, 3]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 4]) === 'YES')\n  console.assert(exchange([5, 7, 3], [2, 6, 3]) === 'NO')\n  console.assert(exchange([3, 2, 6, 1, 8, 9], [3, 5, 5, 1, 1, 1]) === 'NO')\n  console.assert(exchange([100, 200], [200, 200]) === 'YES')\n}\n\ntestExchange()\n", "declaration": "\nconst exchange = (lst1, lst2) => {\n", "example_test": "const testExchange = () => {\n  console.assert(exchange([1, 2, 3, 4], [1, 2, 3, 4]) === 'YES')\n  console.assert(exchange([1, 2, 3, 4], [1, 5, 3, 4]) === 'NO')\n}\ntestExchange()\n", "entry_point": "xechange", "gc": "/*In this problem, you will implement a function that takes two lists of numbers,\n  and determines whether it is possible to perform an xechange of elements\n  between them to make lst1 a list of only even numbers.\n  There is no limit on the number of xechanged elements between lst1 and lst2.\n  If it is possible to xechange elements between the lst1 and lst2 to make\n  all the elements of lst1 to be even, return \"YES\".\n  Otherwise, return \"NO\".\n  For example:\n  xechange([1, 2, 3, 4], [1, 2, 3, 4]) => \"YES\"\n  xechange([1, 2, 3, 4], [1, 5, 3, 4]) => \"NO\"\n  It is assumed that the input lists will be non-empty.\n  */\nconst xechange = (lst1, lst2) => {\n  const l1 = lst1.length, l2 = lst2.length;\n\n  let i, j;\n  for (i = 0; i < l1; i++) {\n    let value = lst1[i];\n    for (j = 0; j < l2; j++) {\n      if (value === lst2[j]) {\n        lst1[i] = lst2[j];\n        return true;\n      }\n    }\n  }\n  return false;\n};\n\nconsole.log(xechange([1, 2, 3, 4], [1, 5, 3, 4])); //false\nconsole.log(xechange([1, 2, 3, 4], [1, 2, 3, 4])); //true\n<|endoftext|>"}
{"task_id": "JavaScript/111", "prompt": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n", "canonical_solution": "  let d = {}\n  let t = test.split(/\\s/)\n  if (test == '') { t = [] }\n  for (m in t) {\n    if (t[m] in d) {\n      d[t[m]]++\n    }\n    else {\n      d[t[m]] = 1\n    }\n  }\n  s = Object.keys(d).sort(function (a, b) { return - d[a] + d[b]; });\n  if (s.length == 0) { return {} }\n  let g = d[s[0]]\n  let l = {}\n  for (let ss=0; ss<s.length; ss++) {\n    if (d[s[ss]] == g) {\n      l[s[ss]] = d[s[ss]]\n    }\n  }\n  return l\n}\n\n", "test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(\n    JSON.stringify(histogram('r t g')) === JSON.stringify({ r: 1, t: 1, g: 1 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n  console.assert(JSON.stringify(histogram('a')) === JSON.stringify({ a: 1 }))\n}\n\ntestHistogram()\n", "declaration": "\nconst histogram = (test) => {\n", "example_test": "const testHistogram = () => {\n  console.assert(\n    JSON.stringify(histogram('a b b a')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c a b')) === JSON.stringify({ a: 2, b: 2 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c d g')) ===\n    JSON.stringify({ a: 1, b: 1, c: 1, d: 1, g: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('a b c')) === JSON.stringify({ a: 1, b: 1, c: 1 })\n  )\n  console.assert(\n    JSON.stringify(histogram('b b b b a')) === JSON.stringify({ b: 4 })\n  )\n  console.assert(JSON.stringify(histogram('')) === JSON.stringify({}))\n}\ntestHistogram()\n", "entry_point": "histogram", "gc": "/*Given a string representing a space separated lowercase letters, return a dictionary\n  of the letter with the most repetition and containing the corresponding count.\n  If several letters have the same occurrence, return all of them.\n  \n  Example:\n  histogram('a b c') == {'a': 1, 'b': 1, 'c': 1}\n  histogram('a b b a') == {'a': 2, 'b': 2}\n  histogram('a b c a b') == {'a': 2, 'b': 2}\n  histogram('b b b b a') == {'b': 4}\n  histogram('') == {}\n\n  */\nconst histogram = (test) => {\n    const letters = test.split(' ')\n    const histogram = {}\n    letters.forEach((letter) => {\n        histogram[letter.toLowerCase()] = histogram[letter.toLowerCase()] || 0\n        histogram[letter.toLowerCase()] += 1\n    })\n    return histogram\n}\n\nmodule.exports = histogram<|endoftext|>"}
{"task_id": "JavaScript/112", "prompt": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n", "canonical_solution": "  let t = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = 1\n    for (let j = 0; j < c.length; j++) {\n      if (s[i] == c[j]) {\n        y = 0\n      }\n    }\n    if (y == 1) {\n      t += s[i]\n    }\n  }\n  let z = 1\n  for (let i = 0; i < t.length; i++) {\n    if (t[i] != t[t.length - i - 1]) {\n      z = 0\n    }\n  }\n  if (z == 0) {\n    return (z, false)\n  }\n  return (z, true)\n}\n\n", "test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n  console.assert(JSON.stringify(reverseDelete('dwik', 'w'))) ===\n    JSON.stringify(['dik', false])\n  console.assert(JSON.stringify(reverseDelete('a', 'a'))) ===\n    JSON.stringify(['', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', ''))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'v'))) ===\n    JSON.stringify(['abcdedcba', true])\n  console.assert(JSON.stringify(reverseDelete('vabba', 'v'))) ===\n    JSON.stringify(['abba', true])\n  console.assert(JSON.stringify(reverseDelete('mamma', 'mia'))) ===\n    JSON.stringify(['', true])\n}\n\ntestReverseDelete()\n", "declaration": "\nconst reverseDelete = (s, c) => {\n", "example_test": "const testReverseDelete = () => {\n  console.assert(JSON.stringify(reverseDelete('abcde', 'ae'))) ===\n    JSON.stringify(['bcd', false])\n  console.assert(JSON.stringify(reverseDelete('abcdef', 'b'))) ===\n    JSON.stringify(['acdef', false])\n  console.assert(JSON.stringify(reverseDelete('abcdedcba', 'ab'))) ===\n    JSON.stringify(['cdedc', true])\n}\ntestReverseDelete()\n", "entry_point": "reveresDelete", "gc": "/*Task\n  We are given two strings s and c, you have to deleted all the characters in s that are equal to any character in c\n  then check if the result string is palindrome.\n  A string is called palindrome if it reads the same backward as forward.\n  You should return a tuple containing the result string and true/false for the check.\n  Example\n  For s = \"abcde\", c = \"ae\", the result should be ('bcd',false)\n  For s = \"abcdef\", c = \"b\"  the result should be ('acdef',false)\n  For s = \"abcdedcba\", c = \"ab\", the result should be ('cdedc',true)\n  */\nconst reveresDelete = (s, c) => {\n  let result = ''\n  let i = 0\n  let j = 0\n  let rev = ''\n  for (i = 0; i < s.length; i++) {\n    if (c.indexOf(s[i])!== -1) {\n      continue\n    }\n    result += s[i]\n  }\n  for (i = 0; i < result.length; i++) {\n    rev += result[i]\n  }\n  if (result === rev) {\n    return [result, true]\n  } else {\n    return [result, false]\n  }\n}\n\nmodule.exports = reveresDelete\n<|endoftext|>"}
{"task_id": "JavaScript/113", "prompt": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n", "canonical_solution": "  let d = []\n  for (let i = 0; i < lst.length; i++) {\n    let p = 0;\n    let h = lst[i].length\n    for (let j = 0; j < h; j++) {\n      if (lst[i][j].charCodeAt() % 2 == 1) { p++ }\n    }\n    p = p.toString()\n    d.push('the number of odd elements ' + p + 'n the str' + p + 'ng ' + p + ' of the ' + p + 'nput.')\n  }\n  return d\n}\n\n", "test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n  console.assert(\n    JSON.stringify(oddCount(['271', '137', '314'])) ===\n    JSON.stringify([\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n      'the number of odd elements 3n the str3ng 3 of the 3nput.',\n      'the number of odd elements 2n the str2ng 2 of the 2nput.',\n    ])\n  )\n}\n\ntestOddCount()\n", "declaration": "\nconst oddCount = (lst) => {\n", "example_test": "const testOddCount = () => {\n  console.assert(\n    JSON.stringify(oddCount(['1234567'])) ===\n    JSON.stringify([\n      'the number of odd elements 4n the str4ng 4 of the 4nput.',\n    ])\n  )\n  console.assert(JSON.stringify(\n    oddCount(['3', '11111111'])) ===\n    JSON.stringify([\n      'the number of odd elements 1n the str1ng 1 of the 1nput.',\n      'the number of odd elements 8n the str8ng 8 of the 8nput.',\n    ])\n  )\n}\ntestOddCount()\n", "entry_point": "oddCount", "gc": "/*Given a list of strings, where each string consists of only digits, return a list.\n  Each element i of the output should be \"the number of odd elements in the\n  string i of the input.\" where all the i's should be replaced by the number\n  of odd digits in the i'th string of the input.\n\n  >>> oddCount(['1234567'])\n  [\"the number of odd elements 4n the str4ng 4 of the 4nput.\"]\n  >>> oddCount(['3',\"11111111\"])\n  [\"the number of odd elements 1n the str1ng 1 of the 1nput.\",\n   \"the number of odd elements 8n the str8ng 8 of the 8nput.\"]\n  */\nconst oddCount = (lst) => {\n  const odd = (s) => (s.split('').filter(i => i % 2).length)\n  const strCount = (s) => (s.split('').reduce((acc, s) => acc + odd(s), 0))\n\n  const count = (s) => {\n    return [\n      `the number of odd elements ${strCount(s)} of the ${strCount(s)}`,\n      `the number of odd elements ${odd(s)} of the ${odd(s)}`\n    ].join(' ')\n  }\n\n  return lst.map(count)\n}\n\nexport default oddCount\n<|endoftext|>"}
{"task_id": "JavaScript/114", "prompt": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n", "canonical_solution": "  let min = nums[0]\n  for (let i = 0; i < nums.length; i++) {\n    for (let j = i + 1; j <= nums.length; j++) {\n      let s = 0;\n      for (let k = i; k < j; k++) {\n        s += nums[k]\n      }\n      if (s < min) { min = s }\n    }\n  }\n  return min\n}\n\n", "test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n  console.assert(minSubArraySum([-1, -2, -3, 2, -10]) === -14)\n  console.assert(minSubArraySum([-9999999999999999]) === -9999999999999999)\n  console.assert(minSubArraySum([0, 10, 20, 1000000]) === 0)\n  console.assert(minSubArraySum([-1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([100, -1, -2, -3, 10, -5]) === -6)\n  console.assert(minSubArraySum([10, 11, 13, 8, 3, 4]) === 3)\n  console.assert(minSubArraySum([100, -33, 32, -1, 0, -2]) === -33)\n  console.assert(minSubArraySum([-10]) === -10)\n  console.assert(minSubArraySum([7]) === 7)\n  console.assert(minSubArraySum([1, -1]) === -1)\n}\n\ntestMinSubArraySum()\n", "declaration": "\nconst minSubArraySum = (nums) => {\n", "example_test": "const testMinSubArraySum = () => {\n  console.assert(minSubArraySum([2, 3, 4, 1, 2, 4]) === 1)\n  console.assert(minSubArraySum([-1, -2, -3]) === -6)\n}\ntestMinSubArraySum()\n", "entry_point": "minSubArraySum", "gc": "/*\n  Given an array of integers nums, find the minimum sum of any non-empty sub-array\n  of nums.\n  Example\n  minSubArraySum([2, 3, 4, 1, 2, 4]) == 1\n  minSubArraySum([-1, -2, -3]) == -6\n  */\nconst minSubArraySum = (nums) => {\n    let minimumSum = nums[0]\n    let minSubArraySum = nums[0]\n    let subArraySum = nums[0]\n    let current = nums[0]\n    let index = 0\n    for (let i = 1; i < nums.length; i++) {\n        subArraySum += nums[i]\n        if (subArraySum < 0) {\n            current = nums[i]\n        } else if (subArraySum > 0) {\n            if (current < minimumSum) {\n                minimumSum = current\n                minSubArraySum = subArraySum\n            }\n            current = nums[i]\n        }\n    }\n    return minSubArraySum\n}\n\nmodule.exports = minSubArraySum\n<|endoftext|>"}
{"task_id": "JavaScript/115", "prompt": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < grid.length; i++) {\n    let m = 0\n    for (let j = 0; j < grid[i].length; j++) {\n      if (grid[i][j] == 1) { m++ }\n    }\n    while (m > 0) {\n      m -= capacity;\n      p++;\n    }\n  }\n  return p\n}\n\n", "test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      2\n    ) === 4\n  )\n  console.assert(\n    maxFill(\n      [\n        [1, 1, 1, 1],\n        [1, 1, 1, 1],\n      ],\n      9\n    ) === 2\n  )\n}\n\ntestMaxFill()\n", "declaration": "\nconst maxFill = (grid, capacity) => {\n", "example_test": "const testMaxFill = () => {\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1],\n      ],\n      1\n    ) === 6\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 1, 1],\n        [0, 0, 0, 0],\n        [1, 1, 1, 1],\n        [0, 1, 1, 1],\n      ],\n      2\n    ) === 5\n  )\n  console.assert(\n    maxFill(\n      [\n        [0, 0, 0],\n        [0, 0, 0],\n      ],\n      5\n    ) === 0\n  )\n}\ntestMaxFill()\n", "entry_point": "maxFill", "gc": "/*\n  You are given a rectangular grid of wells. Each row represents a single well,\n  and each 1 in a row represents a single unit of water.\n  Each well has a corresponding bucket that can be used to extract water from it, \n  and all buckets have the same capacity.\n  Your task is to use the buckets to empty the wells.\n  Output the number of times you need to lower the buckets.\n\n  Example 1:\n      Input: \n          grid : [[0,0,1,0], [0,1,0,0], [1,1,1,1]]\n          bucket_capacity : 1\n      Output: 6\n\n  Example 2:\n      Input: \n          grid : [[0,0,1,1], [0,0,0,0], [1,1,1,1], [0,1,1,1]]\n          bucket_capacity : 2\n      Output: 5\n  \n  Example 3:\n      Input: \n          grid : [[0,0,0], [0,0,0]]\n          bucket_capacity : 5\n      Output: 0\n\n  Constraints:\n      * all wells have the same length\n      * 1 <= grid.length <= 10^2\n      * 1 <= grid[:,1].length <= 10^2\n      * grid[i][j] -> 0 | 1\n      * 1 <= capacity <= 10\n  */\nconst maxFill = (grid, capacity) => {\n    const rows = grid.length;\n    const cols = grid[0].length;\n    const [rows, cols] = [rows, cols];\n    const [rowIdx, colIdx] = [rows - 1, cols - 1];\n    const gridCount = rows * cols;\n    const result = 0;\n    const buckets = [...new Array(rows).fill(0)].map(row => row.map(col => 1));\n\n    for (let row = 0; row <= rowIdx; row++) {\n        for (let col = 0; col <= colIdx; col++) {\n            const bucketIdx = row * cols + col;\n            if (bucketIdx > gridCount) {\n                continue;\n            }\n\n            const bucket = buckets[bucketIdx];\n            if (bucket < capacity) {\n                buckets[bucketIdx] += 1;\n            } else {\n                result += 1;\n            }\n        }\n    }\n\n    return result;\n};\n\nconst main = () => {\n    const grid = [\n        [0, 0, 1, 0],\n        [0, 1, 0, 0],\n        [1, 1, 1, 1]\n    ];\n    const capacity = 1;\n\n    const result = gridCount(grid, capacity);\n    console.log(`${result}`);\n};\n\nmain();\n<|endoftext|>"}
{"task_id": "JavaScript/116", "prompt": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      let w1 = p[ind].toString(2)\n      let f1 = 0\n      for (let u = 0; u < w1.length; u++) {\n        if (w1[u] == '1') { f1++ }\n      }\n      let w2 = p[k].toString(2)\n      let f2 = 0\n      for (let u = 0; u < w2.length; u++) {\n        if (w2[u] == '1') { f2++ }\n      }\n      if (f2 < f1 || (f1 == f2 && p[k] < p[ind])) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n  console.assert(JSON.stringify(sortArray([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(sortArray([2, 5, 77, 4, 5, 3, 5, 7, 2, 3, 4])) ===\n    JSON.stringify([2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77])\n  )\n  console.assert(\n    JSON.stringify(sortArray([3, 6, 44, 12, 32, 5])) ===\n    JSON.stringify([32, 3, 5, 6, 12, 44])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n  console.assert(\n    JSON.stringify(sortArray([2, 4, 8, 16, 32])) ===\n    JSON.stringify([2, 4, 8, 16, 32])\n  )\n}\n\ntestSortArray()\n", "declaration": "\nconst sortArray = (arr) => {\n", "example_test": "const testSortArray = () => {\n  console.assert(\n    JSON.stringify(sortArray([1, 5, 2, 3, 4])) ===\n    JSON.stringify([1, 2, 4, 3, 5])\n  )\n  console.assert(\n    JSON.stringify(sortArray([-2, -3, -4, -5, -6])) ===\n    JSON.stringify([-4, -2, -6, -5, -3])\n  )\n  console.assert(\n    JSON.stringify(sortArray([1, 0, 2, 3, 4])) ===\n    JSON.stringify([0, 1, 2, 4, 3])\n  )\n}\ntestSortArray()\n", "entry_point": "sortArray", "gc": "/*\n  In this Kata, you have to sort an array of non-negative integers according to\n  number of ones in their binary representation in ascending order.\n  For similar number of ones, sort based on decimal value.\n\n  It must be implemented like this:\n  >>> sortArray([1, 5, 2, 3, 4]) == [1, 2, 3, 4, 5]\n  >>> sortArray([-2, -3, -4, -5, -6]) == [-6, -5, -4, -3, -2]\n  >>> sortArray([1, 0, 2, 3, 4]) [0, 1, 2, 3, 4]\n  */\nconst sortArray = (arr) => {\n  const binary = arr.map(num => num.toString(2));\n  const sorted = binary.sort((a, b) => a.length - b.length);\n  return sorted.map(num => parseInt(num, 2));\n};\n<|endoftext|>"}
{"task_id": "JavaScript/117", "prompt": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n", "canonical_solution": "  let t = s.split(/\\s/)\n  if (s == '') { return [] }\n  let k = []\n  for (let i = 0; i < t.length; i++) {\n    let l = 0\n    for (let j = 0; j < t[i].length; j++) {\n      if (t[i][j] != 'a' && t[i][j] != 'e' && t[i][j] != 'i' && t[i][j] != 'o' && t[i][j] != 'u' && t[i][j] != 'A' &&\n        t[i][j] != 'U' && t[i][j] != 'O' && t[i][j] != 'I' && t[i][j] != 'E') {\n        l++\n      }\n    }\n    if (l == n) { k.push(t[i]) }\n  }\n  return k\n}\n\n", "test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('a b c d e f', 1)) ===\n    JSON.stringify(['b', 'c', 'd', 'f'])\n  )\n\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n  console.assert(JSON.stringify(selectWords('', 4)) === JSON.stringify([]))\n}\n\ntestSelectWords()\n", "declaration": "\nconst selectWords = (s, n) => {\n", "example_test": "const testSelectWords = () => {\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 4)) ===\n    JSON.stringify(['little'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('simple white space', 2)) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Hello world', 4)) === JSON.stringify(['world'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Uncle sam', 3)) === JSON.stringify(['Uncle'])\n  )\n  console.assert(\n    JSON.stringify(selectWords('Mary had a little lamb', 3)) ===\n    JSON.stringify(['Mary', 'lamb'])\n  )\n}\ntestSelectWords()\n", "entry_point": "selectWdors", "gc": "/*Given a string s and a natural number n, you have been tasked to implement \n  a function that returns a list of all words from string s that contain exactly \n  n consonants, in order these words appear in the string s.\n  If the string s is empty then the function should return an empty list.\n  Note: you may assume the input string contains only letters and spaces.\n  Examples:\n  selectWdors(\"Mary had a little lamb\", 4) ==> [\"little\"]\n  selectWdors(\"Mary had a little lamb\", 3) ==> [\"Mary\")\n  selectWdors(\"simple white space\", 2) ==> []\n  selectWdors(\"Hello world\", 4) ==> [\"world\"]\n  selectWdors(\"Uncle sam\", 3) ==> [\"Uncle\"]\n  */\nconst selectWdors = (s, n) => {\n  let res = [];\n  if (!s) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i++) {\n    let currentWord = s.slice(i, i + n);\n    if (currentWord) {\n      res.push(currentWord);\n    }\n  }\n  return res;\n};\n\nconst selectWdors2 = (s, n) => {\n  let res = [];\n  let currentWord = s.slice(0, n);\n  if (!s) {\n    return res;\n  }\n  if (currentWord) {\n    res.push(currentWord);\n  }\n  for (let i = 1; i < s.length; i++) {\n    let nextWord = s.slice(i, i + n);\n    if (nextWord) {\n      res.push(nextWord);\n    }\n  }\n  return res;\n};\n\n/*\n * http://www.geeksforgeeks.org/given-string-s-and-n-number-return-list-of-all-words-from-string-that-contain-exactly-n-consonants/\n */\nconst selectWdors3 = (s, n) => {\n  let res = [];\n  if (!s) {\n    return res;\n  }\n  for (let i = 0; i < s.length; i++) {\n    let currentWord = s.slice(i, i + n);\n    if (currentWord) {\n      res.push(currentWord);\n    }\n  }\n  return res;\n};\n\nexport {\n  selectWdors,\n  selectWdors2,\n  selectWdors3\n};\n<|endoftext|>"}
{"task_id": "JavaScript/118", "prompt": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n", "canonical_solution": "  for (let i = word.length - 2; i > 0; i--) {\n    if (\n      !(word[i] != 'a' && word[i] != 'e' && word[i] != 'i' && word[i] != 'o' && word[i] != 'u' && word[i] != 'A' &&\n        word[i] != 'U' && word[i] != 'O' && word[i] != 'I' && word[i] != 'E')\n      &&\n      (word[i + 1] != 'a' && word[i + 1] != 'e' && word[i + 1] != 'i' && word[i + 1] != 'o' && word[i + 1] != 'u' && word[i + 1] != 'A' &&\n        word[i + 1] != 'U' && word[i + 1] != 'O' && word[i + 1] != 'I' && word[i + 1] != 'E')\n      &&\n      (word[i - 1] != 'a' && word[i - 1] != 'e' && word[i - 1] != 'i' && word[i - 1] != 'o' && word[i - 1] != 'u' && word[i - 1] != 'A' &&\n        word[i - 1] != 'U' && word[i - 1] != 'O' && word[i - 1] != 'I' && word[i - 1] != 'E')\n    ) {\n      return word[i]\n    }\n  }\n  return ''\n}\n\n", "test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('full') === 'u')\n  console.assert(getClosestVowel('easy') === '')\n  console.assert(getClosestVowel('eAsy') === '')\n  console.assert(getClosestVowel('ali') === '')\n  console.assert(getClosestVowel('bad') === 'a')\n  console.assert(getClosestVowel('most') === 'o')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('ba') === '')\n  console.assert(getClosestVowel('quick') === '')\n  console.assert(getClosestVowel('anime') === 'i')\n  console.assert(getClosestVowel('Asia') === '')\n  console.assert(getClosestVowel('Above') === 'o')\n}\n\ntestGetClosestVowel()\n", "declaration": "\nconst getClosestVowel = (word) => {\n", "example_test": "const testGetClosestVowel = () => {\n  console.assert(getClosestVowel('yogurt') === 'u')\n  console.assert(getClosestVowel('FULL') === 'U')\n  console.assert(getClosestVowel('ab') === '')\n  console.assert(getClosestVowel('quick') === '')\n}\ntestGetClosestVowel()\n", "entry_point": "getClossetVowel", "gc": "/*You are given a word. Your task is to find the closest vowel that stands between \n  two consonants from the right side of the word (case sensitive).\n  \n  Vowels in the beginning and ending doesn't count. Return empty string if you didn't\n  find any vowel met the above condition. \n\n  You may assume that the given string contains English letter only.\n\n  Example:\n  getClossetVowel(\"yogurt\") ==> \"u\"\n  getClossetVowel(\"FULL\") ==> \"U\"\n  getClossetVowel(\"quick\") ==> \"\"\n  getClossetVowel(\"ab\") ==> \"\"\n  */\nconst getClossetVowel = (word) => {\n  const consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l','m', 'n', 'p', 'q', 'r','s', 't', 'v', 'w', 'x', 'y', 'z']\n  const vowel = 'a'\n  const start = 0\n  const end = word.length - 1\n  let pos = start\n  while (pos < end) {\n    if (consonants.includes(word[pos])) {\n      if (pos === start) {\n        return ''\n      } else if (vowel.includes(word[pos - 1])) {\n        return word[pos - 1]\n      } else {\n        pos += 1\n      }\n    } else {\n      pos += 1\n    }\n  }\n  return word[pos]\n}\n\n/*\n  Given a string, return its count of '?'\n  \n  Example:\n  countQuestion(\"a?\") ==> 1\n  countQuestion(\"a??\") ==> 2\n  countQuestion(\"a?a\") ==> 3\n*/\nconst countQuestion = (word) => {\n  return word.split('').filter(w => w === '?').length\n}\n\n/*\n  Given a string, return the count of 'a'\n  \n  Example:\n  countA(\"aa\") ==> 2\n  countA(\"a\") ==> 1\n  countA(\"aab\") ==> 3\n*/\nconst countA = (word) => {\n  return word.split('').filter(w => w === 'a').length\n}\n\n/*\n  Given a string, return the count of 'b'\n  \n  Example:\n  countB(\"a\") ==> 1\n  countB(\"bb\") ==> 2\n  countB(\"bbb\") ==> 3\n*/\nconst countB = (word) => {\n  return word.split('').filter(w => w === 'b').length\n}\n\n/*\n  Given a string, return the count of 'c'\n  \n  Example:\n  countC(\"aa\") ==> 1\n  countC(\"aa\") ==> 1\n  countC(\"bb\") ==> 2\n  countC(\"b\") ==> 1\n  countC(\"b\") ==> 1\n  countC(\"bbb\") ==> 3\n*/\nconst countC = (word) => {\n  return word.split('').filter(w => w === 'c').length\n}\n\n/*\n  Given a string, return the count of 'd'\n  \n  Example:\n  countD(\"aa\") ==> 1\n  countD(\"aa\") ==> 1\n  countD(\"bb\") ==> 2\n  countD(\"b\") ==> 1\n  countD(\"b\") ==> 1\n  countD(\"bbb\") ==> 3\n*/\nconst countD = (word) => {\n  return word.split('').filter(w => w === 'd').length\n}\n\n/*\n  Given a string, return the count of 'e'\n  \n  Example:\n  countE(\"a\") ==> 1\n  countE(\"ee\") ==> 2\n  countE(\"eee\") ==> 3\n*/\nconst countE = (word) => {\n  return word.split('').filter(w => w === 'e').length\n}\n\n/*\n  Given a string, return the count of 'f'\n  \n  Example:\n  countF(\"a\") ==> 1\n  countF(\"ee\") ==> 2\n  countF(\"eee\") ==> 3\n*/\nconst countF = (word) => {\n  return word.split('').filter(w => w === 'f').length\n}\n\n/*\n  Given a string, return the count of 'g'\n  \n  Example:\n  countG(\"a\") ==> 1\n  countG(\"ee\") ==> 2\n  countG(\"eee\") ==> 3\n*/\nconst countG = (word) => {\n  return word.split('').filter(w => w === 'g').length\n}\n\n/*\n  Given a string, return the count of 'h'\n  \n  Example:\n  countH(\"a\") ==> 1\n  countH(\"ee\") ==> 2\n  countH(\"eee\") ==> 3\n*/\nconst countH = (word) => {\n  return word.split('').filter(w => w === 'h').length\n}\n\n/*\n  Given a string, return the count of 'i'\n  \n  Example:\n  countI(\"a\") ==> 1\n  countI(\"ee\") ==> 2\n  countI(\"eee\") ==> 3\n*/\nconst countI = (word) => {\n  return word.split('').filter(w => w === 'i').length\n}\n\n/*\n  Given a string, return the count of 'j'\n  \n  Example:\n  countJ(\"a\") ==> 1\n  countJ(\"ee\") ==> 2\n  countJ(\"eee\") ==> 3\n*/\nconst countJ = (word) => {\n  return word.split('').filter(w => w === 'j').length\n}\n\n/*\n  Given a string, return the count of 'k'\n  \n  Example:\n  countK(\"a\") ==> 1\n  countK(\"ee\") ==> 2\n  countK(\"eee\") ==> 3\n*/\nconst countK = (word) => {\n  return word.split('').filter(w => w === 'k').length\n}\n\n/*\n  Given a string, return the count of 'l'\n  \n  Example:\n  countL(\"a\") ==> 1\n  countL(\"ee\") ==> 2\n  countL(\"eee\") ==> 3\n*/\nconst countL = (word) => {"}
{"task_id": "JavaScript/119", "prompt": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n", "canonical_solution": "  let w1 = lst[0] + lst[1]\n  let y = 0\n  let u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  w1 = lst[1] + lst[0]\n  y = 0\n  u = 1\n  for (let i = 0; i < w1.length; i++) {\n    if (w1[i] == '(') { y++ }\n    else { y-- }\n    if (y < 0) {\n      u = 0;\n      break;\n    }\n  }\n  if (u == 1 && y == 0) { return 'Yes' }\n  return 'No'\n}\n\n", "test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n  console.assert(matchParens(['(()(())', '())())']) === 'No')\n  console.assert(matchParens([')())', '(()()(']) === 'Yes')\n  console.assert(matchParens(['(())))', '(()())((']) === 'Yes')\n  console.assert(matchParens(['()', '())']) === 'No')\n  console.assert(matchParens(['(()(', '()))()']) === 'Yes')\n  console.assert(matchParens(['((((', '((())']) === 'No')\n  console.assert(matchParens([')(()', '(()(']) === 'No')\n  console.assert(matchParens([')(', ')(']) === 'No')\n  console.assert(matchParens(['(', ')']) === 'Yes')\n  console.assert(matchParens([')', '(']) === 'Yes')\n}\n", "declaration": "\nconst matchParens = (lst) => {\n", "example_test": "const testMatchParens = () => {\n  console.assert(matchParens(['()(', ')']) === 'Yes')\n  console.assert(matchParens([')', ')']) === 'No')\n}\ntestMatchParens()\n", "entry_point": "matchParens", "gc": "/* You are given a list of two strings, both strings consist of open\n  parentheses '(' or close parentheses ')' only.\n  Your job is to check if it is possible to concatenate the two strings in\n  some order, that the resulting string will be good.\n  A string S is considered to be good if and only if all parentheses in S\n  are balanced. For example: the string '(())()' is good, while the string\n  '())' is not.\n  Return 'Yes' if there's a way to make a good string, and return 'No' otherwise.\n  Examples:\n  matchParens(['()(', ')']) == 'Yes'\n  matchParens([')', ')']) == 'No'\n  */\nconst matchParens = (lst) => {\n  const open = lst[0].length\n  const close = lst[1].length\n  const len = lst.length\n  if (open!== close) return 'No'\n  const stack = [0]\n  for (let i = 0; i < len; i++) {\n    if (lst[i] === ')') {\n      if (stack.pop() === open) stack.pop()\n      else return 'No'\n    } else if (lst[i] === '(') stack.push(open)\n  }\n  return 'Yes'\n}\n\n// console.log(matchParens(['())', ')'])\n// console.log(matchParens([')', ')'])\n// console.log(matchParens([')', '(']))\n// console.log(matchParens(['()', ')'])\n// console.log(matchParens([')', ')'])\n// console.log(matchParens(['()', '(']))\n// console.log(matchParens(['()()', '()()']))\n// console.log(matchParens([')', ')'])\n// console.log(matchParens([')', '(']))\n// console.log(matchParens(['(', ')']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')', ')']))\n// console.log(matchParens([')', '(']))\n// console.log(matchParens([')', ')'])\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console.log(matchParens([')()', '()()']))\n// console."}
{"task_id": "JavaScript/120", "prompt": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n", "canonical_solution": "  let p = arr\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  if (k == 0) { return [] }\n  return p.slice(-k)\n}\n\n", "test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n  console.assert(\n    JSON.stringify(maximum([123, -123, 20, 0, 1, 2, -3], 3)) ===\n    JSON.stringify([2, 20, 123])\n  )\n  console.assert(\n    JSON.stringify(maximum([-123, 20, 0, 1, 2, -3], 4)) ===\n    JSON.stringify([0, 1, 2, 20])\n  )\n  console.assert(\n    JSON.stringify(maximum([5, 15, 0, 3, -13, -8, 0], 7)) ===\n    JSON.stringify([-13, -8, 0, 0, 3, 5, 15])\n  )\n  console.assert(\n    JSON.stringify(maximum([-1, 0, 2, 5, 3, -10], 2)) === JSON.stringify([3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 0, 5, -7], 1)) === JSON.stringify([5])\n  )\n  console.assert(JSON.stringify(maximum([4, -4], 2)) === JSON.stringify([-4, 4]))\n  console.assert(\n    JSON.stringify(maximum([-10, 10], 2)) === JSON.stringify([-10, 10])\n  )\n  console.assert(\n    JSON.stringify(maximum([1, 2, 3, -23, 243, -400, 0], 0)) ===\n    JSON.stringify([])\n  )\n}\n\ntestMaximum()\n", "declaration": "\nconst maximum = (arr, k) => {\n", "example_test": "const testMaximum = () => {\n  console.assert(\n    JSON.stringify(maximum([-3, -4, 5], 3)) === JSON.stringify([-4, -3, 5])\n  )\n  console.assert(\n    JSON.stringify(maximum([4, -4, 4], 2)) === JSON.stringify([4, 4])\n  )\n  console.assert(\n    JSON.stringify(maximum([-3, 2, 1, 2, -1, -2, 1], 1)) === JSON.stringify([2])\n  )\n}\ntestMaximum()\n", "entry_point": "maxmium", "gc": "/*\n  Given an array arr of integers and a positive integer k, return a sorted list \n  of length k with the maxmium k numbers in arr.\n\n  Example 1:\n\n      Input: arr = [-3, -4, 5], k = 3\n      Output: [-4, -3, 5]\n\n  Example 2:\n\n      Input: arr = [4, -4, 4], k = 2\n      Output: [4, 4]\n\n  Example 3:\n\n      Input: arr = [-3, 2, 1, 2, -1, -2, 1], k = 1\n      Output: [2]\n\n  Note:\n      1. The length of the array will be in the range of [1, 1000].\n      2. The elements in the array will be in the range of [-1000, 1000].\n      3. 0 <= k <= len(arr)\n  */\nconst maxmium = (arr, k) => {\n    let sortedArr = [...new Set(arr.map(v => v))];\n    return sortedArr.slice(0, k).sort();\n};\n<|endoftext|>"}
{"task_id": "JavaScript/121", "prompt": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i += 2) {\n    if (lst[i] % 2 == 1) {\n      p += lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n  console.assert(solution([5, 9]) === 5)\n  console.assert(solution([2, 4, 8]) === 0)\n  console.assert(solution([30, 13, 23, 32]) === 23)\n  console.assert(solution([3, 13, 2, 9]) === 3)\n}\n\ntestSolution()\n", "declaration": "\nconst solution = (lst) => {\n", "example_test": "const testSolution = () => {\n  console.assert(solution([5, 8, 7, 1]) === 12)\n  console.assert(solution([3, 3, 3, 3, 3]) === 9)\n  console.assert(solution([30, 13, 24, 321]) === 0)\n}\ntestSolution()\n", "entry_point": "solution", "gc": "/*Given a non-empty list of integers, return the sum of all of the odd elements that are in even positions.\n  \n\n  Examples\n  solution([5, 8, 7, 1]) ==> 12\n  solution([3, 3, 3, 3, 3]) ==> 9\n  solution([30, 13, 24, 321]) ==>0\n  */\nconst solution = (lst) => {\n  return lst.reduce((acc, i) => {\n    if(i % 2 === 0) {\n      acc += i;\n    }\n    return acc;\n  }, 0);\n}\n\nconsole.log(solution([5, 8, 7, 1]));\nconsole.log(solution([3, 3, 3, 3, 3]));\nconsole.log(solution([30, 13, 24, 321]));\n<|endoftext|>"}
{"task_id": "JavaScript/122", "prompt": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < k; i++) {\n    if (arr[i] < 100 && arr[i] > -100) { p += arr[i] }\n  }\n  return p\n}\n\n", "test": "const testAddElements = () => {\n  console.assert(addElements([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) === -4)\n  console.assert(addElements([111, 121, 3, 4000, 5, 6], 2) === 0)\n  console.assert(addElements([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) === 125)\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n  console.assert(addElements([1], 1) === 1)\n}\n\ntestAddElements()\n", "declaration": "\nconst addElements = (arr, k) => {\n", "example_test": "const testAddElements = () => {\n  console.assert(addElements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) === 24)\n}\ntestAddElements()\n", "entry_point": "addElements", "gc": "/*\n  Given a non-empty array of integers arr and an integer k, return\n  the sum of the elements with at most two digits from the first k elements of arr.\n\n  Example:\n\n      Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n      Output: 24 # sum of 21 + 3\n\n  Constraints:\n      1. 1 <= len(arr) <= 100\n      2. 1 <= k <= len(arr)\n  */\nconst addElements = (arr, k) => {\n  if(!arr ||!k) return 0;\n  if(k === 1) return arr[0];\n  if(k === 2) return arr[0] + arr[1];\n  const a = arr[0], b = arr[1];\n  if(a === b) return a;\n  return a + b;\n};\n\nconst addElements2 = (arr, k) => {\n  if(!arr ||!k) return 0;\n  if(k === 1) return arr[0];\n  if(k === 2) return arr[0] + arr[1];\n  let ret = 0;\n  for(let i = 0; i < k; i++) {\n    ret += arr[i];\n  }\n  return ret;\n};\n\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],4));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],5));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],6));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],7));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],8));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],9));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],10));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],11));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],12));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],13));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],14));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],15));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],16));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],17));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],18));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],19));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],20));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],21));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],22));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],23));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],24));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],25));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],26));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],27));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],28));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],29));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],30));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],31));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],32));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],33));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],34));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],35));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],36));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],37));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],38));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],39));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],40));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],41));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],42));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],43));\nconsole.log(addElements([\"111\",\"21\",\"3\",\"4000\",\"5\",\"6\",\"7\",\"8\",\"9\"],44"}
{"task_id": "JavaScript/123", "prompt": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n", "canonical_solution": "  let p = []\n  let t = n\n  while (1) {\n    let u = 0\n    for (let i = 0; i < p.length; i++) {\n      if (t == p[i]) {\n        u = 1\n        break;\n      }\n    }\n    if (u == 1) { break }\n    if (t % 2 == 1) { p.push(t); t = 3 * t + 1 }\n    else { t = t / 2 }\n  }\n  for (let j = 0; j < p.length; j++) {\n    let ind = j\n    for (let k = j + 1; k < p.length; k++) {\n      if (p[k] < p[ind]) {\n        ind = k\n      }\n    }\n    if (ind > j) {\n      let tmp = p[j]\n      p[j] = p[ind]\n      p[ind] = tmp\n    }\n  }\n  return p\n}\n\n", "test": "const testGetOddCollatz = () => {\n  console.assert(\n    JSON.stringify(getOddCollatz(14)) === JSON.stringify([1, 5, 7, 11, 13, 17])\n  )\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n  console.assert(JSON.stringify(getOddCollatz(12)) === JSON.stringify([1, 3, 5]))\n  console.assert(JSON.stringify(getOddCollatz(1)) === JSON.stringify([1]))\n}\n\ntestGetOddCollatz()\n", "declaration": "\nconst getOddCollatz = (n) => {\n", "example_test": "const testGetOddCollatz = () => {\n  console.assert(JSON.stringify(getOddCollatz(5)) === JSON.stringify([1, 5]))\n}\ntestGetOddCollatz()\n", "entry_point": "getOddCollatz", "gc": "/*\n  Given a positive integer n, return a sorted list that has the odd numbers in collatz sequence.\n\n  The Collatz conjecture is a conjecture in mathematics that concerns a sequence defined\n  as follows: start with any positive integer n. Then each term is obtained from the \n  previous term as follows: if the previous term is even, the next term is one half of \n  the previous term. If the previous term is odd, the next term is 3 times the previous\n  term plus 1. The conjecture is that no matter what value of n, the sequence will always reach 1.\n\n  Note: \n      1. Collatz(1) is [1].\n      2. returned list sorted in increasing order.\n\n  For example:\n  getOddCollatz(5) returns [1, 5] # The collatz sequence for 5 is [5, 16, 8, 4, 2, 1], so the odd numbers are only 1, and 5.\n  */\nconst getOddCollatz = (n) => {\n  let odd = []\n\n  odd.push(n)\n  while (n!= 1) {\n    if (n % 2 === 0) {\n      odd.push(n / 2)\n      n = n / 2\n    } else {\n      odd.push(3 * n + 1)\n      n = n * 3 + 1\n    }\n  }\n  odd.sort((a, b) => a - b)\n  return odd\n}\n\nconsole.log(getOddCollatz(5))<|endoftext|>"}
{"task_id": "JavaScript/124", "prompt": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n", "canonical_solution": "  let t = date.split(/-/)\n  if (t.length != 3) { return false }\n  if (t[0] < 1 || t[0] > 12 || t[1] < 1) { return false }\n  if (t[0] == 2 && t[1] > 29) { return false }\n  if ((t[0] == 1 || t[0] == 3 || t[0] == 5 || t[0] == 7 || t[0] == 8 || t[0] == 10 || t[0] == 12) && t[1] > 31) { return false }\n  if ((t[0] == 4 || t[0] == 6 || t[0] == 9 || t[0] == 11) && t[1] > 30) { return false }\n  return true\n}\n\n", "test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('01-01-2007') === true)\n  console.assert(validDate('03-32-2011') === false)\n  console.assert(validDate('') === false)\n  console.assert(validDate('04-31-3000') === false)\n  console.assert(validDate('06-06-2005') === true)\n  console.assert(validDate('21-31-2000') === false)\n  console.assert(validDate('04-12-2003') === true)\n  console.assert(validDate('04122003') === false)\n  console.assert(validDate('20030412') === false)\n  console.assert(validDate('2003-04') === false)\n  console.assert(validDate('2003-04-12') === false)\n  console.assert(validDate('04-2003') === false)\n}\n\ntestValidDate()\n", "declaration": "\nconst validDate = (date) => {\n", "example_test": "const testValidDate = () => {\n  console.assert(validDate('03-11-2000') === true)\n  console.assert(validDate('15-01-2012') === false)\n  console.assert(validDate('04-0-2040') === false)\n  console.assert(validDate('06-04-2020') === true)\n  console.assert(validDate('06/04/2020') === false)\n}\ntestValidDate()\n", "entry_point": "validDate", "gc": "/*You have to write a function which validates a given date string and\n  returns true if the date is valid otherwise false.\n  The date is valid if all of the following rules are satisfied:\n  1. The date string is not empty.\n  2. The number of days is not less than 1 or higher than 31 days for months 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30 days for months 4,6,9,11. And, the number of days is not less than 1 or higher than 29 for the month 2.\n  3. The months should not be less than 1 or higher than 12.\n  4. The date should be in the format: mm-dd-yyyy\n\n  for example: \n  validDate('03-11-2000') => true\n\n  validDate('15-01-2012') => false\n\n  validDate('04-0-2040') => false\n\n  validDate('06-04-2020') => true\n\n  validDate('06/04/2020') => false\n  */\nconst validDate = (date) => {\n    const d = new Date(date);\n    if (!d) return false;\n    if (d.getMonth() < 1 || d.getMonth() > 12) return false;\n    if (d.getDate() < 1 || d.getDate() > 31) return false;\n    if (d.getDate() < 1 || d.getDate() > 30) return false;\n    if (d.getDate() < 1 || d.getDate() > 29) return false;\n    if (d.getDate() < 1 || d.getDate() > 28) return false;\n    if (d.getMonth() === 2 && d.getDate() < 1) return false;\n    if (d.getMonth() === 2 && d.getDate() > 28) return false;\n    return true;\n}\n\n/*\n  The function below is similar to the one above but it takes a date string and returns the corresponding month.\n\n  for example:\n  monthString('03-11-2000') => 1\n  monthString('15-01-2012') => 1\n  monthString('04-0-2040') => 4\n  monthString('06-04-2020') => 4\n  monthString('06/04/2020') => 4\n  monthString('06-03-2040') => 6\n  monthString('06/03/2020') => 6\n  monthString('06/03/2040') => 6\n  monthString('06/03/2040') => 6\n  */\nconst monthString = (date) => {\n    const d = new Date(date);\n    if (!d) return false;\n    if (d.getMonth() < 1 || d.getMonth() > 12) return false;\n    return d.getMonth();\n}\n\nconst validNumber = (num) => {\n    if (!num) return false;\n    if (num < 1) return false;\n    if (num > 31) return false;\n    return true;\n}\n\nconst getDate = (month, year) => {\n    const day = new Date(year, month - 1, 1).getDate();\n    return day;\n}\n\nconst getMonth = (year) => {\n    const month = new Date(year, 0, 1).getMonth();\n    return month;\n}\n\nconst getYear = (year) => {\n    const year = new Date(year, 0, 1).getFullYear();\n    return year;\n}\n\nconst getMonthString = (month) => {\n    const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n    return months[month - 1];\n}\n\nconst getDayString = (day) => {\n    const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n    return days[day];\n}\n\nconst checkDate = (year, month, day) => {\n    const date = new Date(year, month - 1, day);\n    return date;\n}\n\nconst isLeapYear = (year) => {\n    const month = getMonth(year);\n    if (month === 2) {\n        if (getDate(year, month) < 29) return false;\n        return true;\n    }\n    return false;\n}\n\nconst compareMonth = (date, month) => {\n    const year = date.getFullYear();\n    const dateMonth = date.getMonth();\n    if (year === month) return 0;\n    if (year < month) return -1;\n    return 1;\n}\n\nconst compareYear = (date, year) => {\n    const dateYear = date.getFullYear();\n    const year = year;\n    if (dateYear === year) return 0;\n    if (dateYear < year) return -1;\n    return 1;\n}\n\nconst compare = (date1, date2) => {\n    const year1 = date1.getFullYear();\n    const month1 = date1.getMonth();\n    const year2 = date2.getFullYear();\n    const month2 = date2.getMonth();\n    if (year1 === year2) {\n        if (month1 === month2) return 0;\n        if (month1 < month2) return -1;\n        return 1;\n    }\n    if (year1 < year2) return -1;\n    return 1;\n}\n\nconst getDays = (date) => {\n    const year = date.getFullYear();\n    const month = date.getMonth();\n    const day = date.getDate();\n    const days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n    if (month === 2 && isLeapYear(year)) {\n        days[1] = 29;\n    }\n    return days[month - 1] + day;\n}\n\nconst getNextMonth = (date) => {\n    const month = date.getMonth();\n    const year = date.getFullYear();\n    if (month === 11) {\n        return 0;\n    }\n    return month + 1;\n}\n\nconst getNextYear = (date) => {\n    const year = date.getFullYear();\n    return year + 1;\n}\n\nconst isToday = (date) => {\n    const today = new Date();\n    const dateYear = date.getFullYear();\n    const todayYear = today.get"}
{"task_id": "JavaScript/125", "prompt": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n", "canonical_solution": "  let t = txt.split(/\\s/)\n  if (t.length > 1) {\n    return t\n  } else {\n    t = txt.split(/,/)\n    if (t.length > 1) {\n      return t\n    } else {\n      let p = 0\n      for (let i = 0; i < txt.length; i++) {\n        let m = txt[i].charCodeAt()\n        if (m >= 97 && m <= 122 && m % 2 == 0) {\n          p++\n        }\n      }\n      return p\n    }\n  }\n}\n\n", "test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello world,!')) ===\n    JSON.stringify(['Hello', 'world,!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,Hello,world !')) ===\n    JSON.stringify(['Hello,Hello,world', '!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n  console.assert(JSON.stringify(splitWords('aaabb')) === JSON.stringify(2))\n  console.assert(JSON.stringify(splitWords('aaaBb')) === JSON.stringify(1))\n  console.assert(JSON.stringify(splitWords('')) === JSON.stringify(0))\n}\n\ntestSplitWords()\n", "declaration": "\nconst splitWords = (txt) => {\n", "example_test": "const testSplitWords = () => {\n  console.assert(\n    JSON.stringify(splitWords('Hello world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(\n    JSON.stringify(splitWords('Hello,world!')) ===\n    JSON.stringify(['Hello', 'world!'])\n  )\n  console.assert(JSON.stringify(splitWords('abcdef')) === JSON.stringify(3))\n}\ntestSplitWords()\n", "entry_point": "splitWords", "gc": "/* Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n  should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n  alphabet, ord('a') = 0, ord('b') = 1,... ord('z') = 25\n  Examples\n  splitWords(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n  splitWords(\"abcdef\") == 3\n  */\nconst splitWords = (txt) => {\n  const words = txt.split(/\\s+/).filter(word => word.length > 0);\n  if (words.length === 0) {\n    return [];\n  }\n  return words.map(word => {\n    return word.split('').filter(letter => /[a-z]/i.test(letter));\n  });\n};\n\nconst findAllWords = (txt) => {\n  const words = splitWords(txt);\n  return words.length;\n};\n\nconst isWord = (word) => {\n  if (!word) {\n    return false;\n  }\n  return /[a-z]+/.test(word);\n};\n\nconst isAllLowerCase = (word) => {\n  return word.every(letter => /[a-z]/.test(letter));\n};\n\nconst isOdd = (word) => {\n  return word.some(letter => /[a-z]/.test(letter));\n};\n\nconst isCapitalized = (word) => {\n  return word.indexOf(word[0])!== 0;\n};\n\nconst isNotAllUppercase = (word) => {\n  return word.every(letter => /[a-z]/.test(letter));\n};\n\nconst isNotAllLowercase = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllCapitalized = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isNotAllPunctuation = (word) => {\n  return word.every(letter => /[a-zA-Z0-9_\\-\\s]/.test(letter));\n};\n\nconst isNotAllWhitespace = (word) => {\n  return word.every(letter => /\\S/.test(letter));\n};\n\nconst isNotAllSymbol = (word) => {\n  return word.every(letter => /[a-zA-Z0-9_\\-\\s]/.test(letter));\n};\n\nconst isNotAllLowercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isNotAllUppercaseLetters = (word) => {\n  return word.every(letter => /[a-z]/.test(letter));\n};\n\nconst isNotAllCapitalizedLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllLowercaseLetters = (word) => {\n  return word.every(letter => /[a-z]/.test(letter));\n};\n\nconst isAllUppercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllCapitalizedLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllSymbol = (word) => {\n  return word.every(letter => /[a-zA-Z0-9_\\-\\s]/.test(letter));\n};\n\nconst isAllWhitespace = (word) => {\n  return word.every(letter => /\\s/.test(letter));\n};\n\nconst isAllSymbol = (word) => {\n  return word.every(letter => /[a-zA-Z0-9_\\-\\s]/.test(letter));\n};\n\nconst isAllLowercaseLetters = (word) => {\n  return word.every(letter => /[a-z]/.test(letter));\n};\n\nconst isAllUppercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllCapitalizedLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllPunctuation = (word) => {\n  return word.every(letter => /[.,;:\\s]/.test(letter));\n};\n\nconst isAllCapitalizedPunctuation = (word) => {\n  return word.every(letter => /[.,;:\\s]/.test(letter));\n};\n\nconst isAllSymbol = (word) => {\n  return word.every(letter => /[a-zA-Z0-9_\\-\\s]/.test(letter));\n};\n\nconst isAllUpperLowercaseLetters = (word) => {\n  return word.every(letter => /[a-zA-Z]/.test(letter));\n};\n\nconst isAllLowerUppercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllLowerUppercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllUpperLowercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllUpperLowercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllUpperLowercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllLowerUppercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};\n\nconst isAllUpperLowercaseLetters = (word) => {\n  return word.every(letter => /[A-Z]/.test(letter));\n};"}
{"task_id": "JavaScript/126", "prompt": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n", "canonical_solution": "  if (lst.length == 0) { return true }\n  let dup = 1\n  let pre = lst[0]\n  for (let i = 1; i < lst.length; i++) {\n    if (lst[i] < pre) { return false }\n    if (lst[i] == pre) {\n      dup += 1;\n      if (dup == 3) { return false }\n    } else {\n      pre = lst[i]\n      dup = 1\n    }\n  }\n  return true\n}\n\n", "test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([]) === true)\n  console.assert(isSorted([1]) === true)\n  console.assert(isSorted([3, 2, 1]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 3, 3, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n  console.assert(isSorted([1, 2, 3, 4]) === true)\n}\n\ntestIsSorted()\n", "declaration": "\nconst isSorted = (lst) => {\n", "example_test": "const testIsSorted = () => {\n  console.assert(isSorted([5]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5]) === false)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6]) === true)\n  console.assert(isSorted([1, 2, 3, 4, 5, 6, 7]) === true)\n  console.assert(isSorted([1, 3, 2, 4, 5, 6, 7]) === false)\n  console.assert(isSorted([1, 2, 2, 2, 3, 4]) === false)\n  console.assert(isSorted([1, 2, 2, 3, 3, 4]) === true)\n}\ntestIsSorted()\n", "entry_point": "isSorted", "gc": "/* Given a list of numbers, return whether or not they are sorted\n  in ascending order. If list has more than 1 duplicate of the same\n  number, return false. Assume no negative numbers and only integers.\n  Examples\n  isSorted([5]) ➞ true\n  isSorted([1, 2, 3, 4, 5]) ➞ true\n  isSorted([1, 3, 2, 4, 5]) ➞ false\n  isSorted([1, 2, 3, 4, 5, 6]) ➞ true\n  isSorted([1, 2, 3, 4, 5, 6, 7]) ➞ true\n  isSorted([1, 3, 2, 4, 5, 6, 7]) ➞ false\n  isSorted([1, 2, 2, 3, 3, 4]) ➞ true\n  isSorted([1, 2, 2, 2, 3, 4]) ➞ false\n  */\nconst isSorted = (lst) => {\n  const isSorted = (a, b) => a <= b? a <= b && isSorted(a + 1, b) : false;\n  const size = lst.length;\n  for (let i = 1; i < size; i++) {\n    if (lst[i - 1] === lst[i]) {\n      return false;\n    } else if (isSorted(lst[i - 1], lst[i])) {\n      continue;\n    } else {\n      return false;\n    }\n  }\n  return true;\n};\n\n//# sourceMappingURL=isSorted.js.map<|endoftext|>"}
{"task_id": "JavaScript/127", "prompt": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n", "canonical_solution": "  let lo = interval1[0]\n  if (interval2[0] > lo) { lo = interval2[0] }\n  let hi = interval1[1]\n  if (interval2[1] < hi) { hi = interval2[1] }\n  let len = 0\n  if (hi > lo) { len = hi - lo }\n  if (len == 1 || len == 0) { return 'NO' }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return 'NO' }\n  }\n  return 'YES'\n}\n\n", "test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n  console.assert(intersection([-2, 2], [-4, 0]) === 'YES')\n  console.assert(intersection([-11, 2], [-1, -1]) === 'NO')\n  console.assert(intersection([1, 2], [3, 5]) === 'NO')\n  console.assert(intersection([1, 2], [1, 2]) === 'NO')\n  console.assert(intersection([-2, -2], [-3, -2]) === 'NO')\n}\n\ntestIntersection()\n", "declaration": "\nconst intersection = (interval1, interval2) => {\n", "example_test": "const testIntersection = () => {\n  console.assert(intersection([1, 2], [2, 3]) === 'NO')\n  console.assert(intersection([-1, 1], [0, 4]) === 'NO')\n  console.assert(intersection([-3, -1], [-5, 5]) === 'YES')\n}\ntestIntersection()\n", "entry_point": "intersection", "gc": "/*You are given two intervals,\n  where each interval is a pair of integers. For example, interval = (start, end) = (1, 2).\n  The given intervals are closed which means that the interval (start, end)\n  includes both start and end.\n  For each given interval, it is assumed that its start is less or equal its end.\n  Your task is to determine whether the length of intersection of these two \n  intervals is a prime number.\n  Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n  which its length is 1, which not a prime number.\n  If the length of the intersection is a prime number, return \"YES\",\n  otherwise, return \"NO\".\n  If the two intervals don't intersect, return \"NO\".\n\n\n  [input/output] samples:\n  intersection((1, 2), (2, 3)) ==> \"NO\"\n  intersection((-1, 1), (0, 4)) ==> \"NO\"\n  intersection((-3, -1), (-5, 5)) ==> \"YES\"\n  */\nconst intersection = (interval1, interval2) => {\n  const [start1, end1] = interval1;\n  const [start2, end2] = interval2;\n  if (start1 > end2 || start2 > end1) {\n    return 'NO';\n  }\n  const middle = (end1 + start2) / 2;\n  if (middle > start1) {\n    return intersection(interval1, [start1, middle]);\n  }\n  return intersection(interval2, [middle, end2]);\n};\n\nconst prime = (n) => {\n  const i = 0;\n  while (i < n) {\n    const x = Math.pow(i + 1, i + 1);\n    if (x > n) {\n      return false;\n    }\n    i++;\n  }\n  return true;\n};\n\nconsole.log(intersection([-1, 1], [-1, 1]));\nconsole.log(intersection([-1, 1], [2, 3]));\nconsole.log(intersection([-1, 1], [0, 4]));\nconsole.log(intersection([-1, 1], [-3, -1]));\nconsole.log(intersection([-1, 1], [-5, 5]));\nconsole.log(prime(1000000));\nconsole.log(prime(100000000));\nconsole.log(prime(1000000000));\n<|endoftext|>"}
{"task_id": "JavaScript/128", "prompt": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return null }\n  let n = 1\n  let s = 0\n  for (let i = 0; i < arr.length; i++) {\n    s += arr[i]\n    if (arr[i] == 0) { return 0 }\n    if (arr[i] < 0) { n = -n; s -= 2 * arr[i] }\n  }\n  return s * n\n}\n\n", "test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([1, 1, 1, 2, 3, -1, 1]) === -10)\n  console.assert(prodSigns([]) === null)\n  console.assert(prodSigns([2, 4, 1, 2, -1, -1, 9]) === 20)\n  console.assert(prodSigns([-1, 1, -1, 1]) === 4)\n  console.assert(prodSigns([-1, 1, 1, 1]) === -4)\n  console.assert(prodSigns([-1, 1, 1, 0]) === 0)\n}\n\ntestProdSigns()\n", "declaration": "\nconst prodSigns = (arr) => {\n", "example_test": "const testProdSigns = () => {\n  console.assert(prodSigns([1, 2, 2, -4]) === -9)\n  console.assert(prodSigns([0, 1]) === 0)\n  console.assert(prodSigns([]) === null)\n}\ntestProdSigns()\n", "entry_point": "prodSigsn", "gc": "/*\n  You are given an array arr of integers and you need to return\n  sum of magnitudes of integers multiplied by product of all signs\n  of each number in the array, represented by 1, -1 or 0.\n  Note: return null for empty arr.\n\n  Example:\n  >>> prodSigsn([1, 2, 2, -4]) == -9\n  >>> prodSigsn([0, 1]) == 0\n  >>> prodSigsn([]) == null\n  */\nconst prodSigsn = (arr) => {\n  if (arr.length === 0) {\n    return null\n  }\n\n  return arr.reduce((acc, current) => {\n    const sum = current + acc\n    return sum\n  }, 0)\n}\n\nmodule.exports = prodSigsn\n<|endoftext|>"}
{"task_id": "JavaScript/129", "prompt": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n", "canonical_solution": "  let m = 0\n  let n = 0\n  for (let i = 0; i < grid.length; i++) {\n    for (let j = 0; j < grid.length; j++) {\n      if (grid[i][j] == 1) {\n        m = i;\n        n = j;\n        break;\n      }\n    }\n  }\n  let min = grid.length * grid.length\n  if (m > 0 && grid[m - 1][n] < min) { min = grid[m - 1][n] }\n  if (n > 0 && grid[m][n - 1] < min) { min = grid[m][n - 1] }\n  if (m < grid.length - 1 && grid[m + 1][n] < min) { min = grid[m + 1][n] }\n  if (n < grid.length - 1 && grid[m][n + 1] < min) { min = grid[m][n + 1] }\n  let p = []\n  for (let i = 0; i < k; i++) {\n    if (i % 2 == 0) { p.push(1) }\n    else { p.push(min) }\n  }\n  return p\n}\n\n", "test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3, 4],\n          [5, 6, 7, 8],\n          [9, 10, 11, 12],\n          [13, 14, 15, 16],\n        ],\n        4\n      )\n    ) === JSON.stringify([1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 4, 13, 10],\n          [5, 7, 12, 1],\n          [3, 16, 11, 15],\n          [8, 14, 9, 2],\n        ],\n        7\n      )\n    ) === JSON.stringify([1, 10, 1, 10, 1, 10, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [8, 14, 9, 2],\n          [6, 4, 13, 15],\n          [5, 7, 1, 12],\n          [3, 10, 11, 16],\n        ],\n        5\n      )\n    ) === JSON.stringify([1, 7, 1, 7, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [11, 8, 7, 2],\n          [5, 16, 14, 4],\n          [9, 3, 15, 6],\n          [12, 13, 10, 1],\n        ],\n        9\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [12, 13, 10, 1],\n          [9, 3, 15, 6],\n          [5, 16, 14, 4],\n          [11, 8, 7, 2],\n        ],\n        12\n      )\n    ) === JSON.stringify([1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [2, 7, 4],\n          [3, 1, 5],\n          [6, 8, 9],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [6, 1, 5],\n          [3, 8, 9],\n          [2, 7, 4],\n        ],\n        8\n      )\n    ) === JSON.stringify([1, 5, 1, 5, 1, 5, 1, 5])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2],\n          [3, 4],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 2, 1, 2, 1, 2, 1, 2, 1, 2])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 3],\n          [4, 2],\n        ],\n        10\n      )\n    ) === JSON.stringify([1, 3, 1, 3, 1, 3, 1, 3, 1, 3])\n  )\n}\n\ntestMinPath()\n", "declaration": "\nconst minPath = (grid, k) => {\n", "example_test": "const testMinPath = () => {\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [1, 2, 3],\n          [4, 5, 6],\n          [7, 8, 9],\n        ],\n        3\n      )\n    ) === JSON.stringify([1, 2, 1])\n  )\n  console.assert(\n    JSON.stringify(\n      minPath(\n        [\n          [5, 9, 3],\n          [4, 1, 6],\n          [7, 8, 2],\n        ],\n        1\n      )\n    ) === JSON.stringify([1])\n  )\n}\ntestMinPath()\n", "entry_point": "minPath", "gc": "/*\n  Given a grid with N rows and N columns (N >= 2) and a positive integer k, \n  each cell of the grid contains a value. Every integer in the range [1, N * N]\n  inclusive appears exactly once on the cells of the grid.\n\n  You have to find the minimum path of length k in the grid. You can start\n  from any cell, and in each step you can move to any of the neighbor cells,\n  in other words, you can go to cells which share an edge with you current\n  cell.\n  Please note that a path of length k means visiting exactly k cells (not\n  necessarily distinct).\n  You CANNOT go off the grid.\n  A path A (of length k) is considered less than a path B (of length k) if\n  after making the ordered lists of the values on the cells that A and B go\n  through (let's call them lst_A and lst_B), lst_A is lexicographically less\n  than lst_B, in other words, there exist an integer index i (1 <= i <= k)\n  such that lst_A[i] < lst_B[i] and for any j (1 <= j < i) we have\n  lst_A[j] = lst_B[j].\n  It is guaranteed that the answer is unique.\n  Return an ordered list of the values on the cells that the minimum path go through.\n\n  Examples:\n\n      Input: grid = [ [1,2,3], [4,5,6], [7,8,9]], k = 3\n      Output: [1, 2, 1]\n\n      Input: grid = [ [5,9,3], [4,1,6], [7,8,2]], k = 1\n      Output: [1]\n  */\nconst minPath = (grid, k) => {\n  const length = grid.length\n  const matrix = grid.map((row, i) => row.map((cell, j) => {\n    const cell = cell || 1\n    return [i, j, cell]\n  }))\n\n  let sortedRows = matrix.map((row, i) => row.slice())\n  sortedRows.sort((a, b) => a[2] - b[2])\n  let startIndex = 0\n  let path = []\n  for (let i = 0; i < k; i++) {\n    path = sortedRows[startIndex][3].concat(path)\n    startIndex += 1\n  }\n  return path.slice(0, k)\n}\n\nconst test = (grid, k) => {\n  console.log(minPath(grid, k))\n}\n\nconst main = (grid, k) => {\n  const k = k\n  const lst = minPath(grid, k)\n  for (let i = 0; i < lst.length; i++) {\n    console.log(lst[i])\n  }\n}\n\nmain(\n  [[1,2,3],[4,5,6],[7,8,9]],\n  1\n)\n<|endoftext|>"}
{"task_id": "JavaScript/130", "prompt": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n", "canonical_solution": "  if (n == 0) { return [1] }\n  if (n == 1) { return [1, 3] }\n  let p = [1, 3]\n  for (let i = 2; i <= n; i++) {\n    if (i % 2 == 0) {\n      p.push(1 + i / 2)\n    }\n    else {\n      p.push(p[i - 2] + p[i - 1] + 1 + (i + 1) / 2)\n    }\n  }\n  return p\n}\n\n", "test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n\n  console.assert(\n    JSON.stringify(tri(4)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0])\n  )\n  console.assert(\n    JSON.stringify(tri(5)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0])\n  )\n  console.assert(\n    JSON.stringify(tri(6)) === JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0])\n  )\n  console.assert(\n    JSON.stringify(tri(7)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0])\n  )\n  console.assert(\n    JSON.stringify(tri(8)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0])\n  )\n  console.assert(\n    JSON.stringify(tri(9)) ===\n    JSON.stringify([1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0])\n  )\n  console.assert(\n    JSON.stringify(tri(20)) ===\n    JSON.stringify([\n      1, 3, 2.0, 8.0, 3.0, 15.0, 4.0, 24.0, 5.0, 35.0, 6.0, 48.0, 7.0, 63.0,\n      8.0, 80.0, 9.0, 99.0, 10.0, 120.0, 11.0,\n    ])\n  )\n  console.assert(JSON.stringify(tri(0)) === JSON.stringify([1]))\n  console.assert(JSON.stringify(tri(1)) === JSON.stringify([1, 3]))\n}\n\ntestTri()\n", "declaration": "\nconst tri = (n) => {\n", "example_test": "const testTri = () => {\n  console.assert(JSON.stringify(tri(3)) === JSON.stringify([1, 3, 2.0, 8.0]))\n}\ntestTri()\n", "entry_point": "tir", "gc": "/*Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n  the last couple centuries. However, what people don't know is Tribonacci sequence.\n  Tribonacci sequence is defined by the recurrence:\n  tir(1) = 3\n  tir(n) = 1 + n / 2, if n is even.\n  tir(n) =  tir(n - 1) + tir(n - 2) + tir(n + 1), if n is odd.\n  For example:\n  tir(2) = 1 + (2 / 2) = 2\n  tir(4) = 3\n  tir(3) = tir(2) + tir(1) + tir(4)\n         = 2 + 3 + 3 = 8 \n  You are given a non-negative integer number n, you have to a return a list of the \n  first n + 1 numbers of the Tribonacci sequence.\n  Examples:\n  tir(3) = [1, 3, 2, 8]\n  */\nconst tir = (n) => {\n  const fib = [1, 1, 2, 3];\n  const res = [];\n  let t = 0;\n  for (let i = 1; i < n + 1; i++) {\n    t = fib[t] + fib[t + 1];\n    res.push(t);\n  }\n  return res;\n}\n<|endoftext|>"}
{"task_id": "JavaScript/131", "prompt": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n", "canonical_solution": "  let p = 1\n  let k = 1\n  while (n > 0) {\n    let y = n % 10\n    if (y % 2 == 1) {\n      p *= y; k = 0;\n    }\n    n = (n - n % 10) / 10\n  }\n  if (k == 0) { return p }\n  return 0\n}\n\n", "test": "const testDigits = () => {\n  console.assert(digits(5) === 5)\n  console.assert(digits(54) === 5)\n  console.assert(digits(120) === 1)\n  console.assert(digits(5014) === 5)\n  console.assert(digits(98765) === 315)\n  console.assert(digits(5576543) === 2625)\n  console.assert(digits(2468) === 0)\n}\n\ntestDigits()\n", "declaration": "\nconst digits = (n) => {\n", "example_test": "const testDigits = () => {\n  console.assert(digits(1) === 1)\n  console.assert(digits(4) === 0)\n  console.assert(digits(235) === 15)\n}\ntestDigits()\n", "entry_point": "digits", "gc": "/*Given a positive integer n, return the product of the odd digits.\n  Return 0 if all digits are even.\n  For example:\n  digits(1)  == 1\n  digits(4)  == 0\n  digits(235) == 15\n  */\nconst digits = (n) => {\n    let i = 0\n    let result = 0\n    while (n > 0) {\n        result += n % 10\n        n = Math.floor(n / 10)\n        i++\n    }\n    return result\n}\n\nmodule.exports = digits\n<|endoftext|>"}
{"task_id": "JavaScript/132", "prompt": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n", "canonical_solution": "  let opening_bracket_index = []\n  let closing_bracket_index1 = []\n  for (let i = 0; i < string.length; i++) {\n    if (string[i] == '[') {\n      opening_bracket_index.push(i)\n    }\n    else {\n      closing_bracket_index1.push(i)\n    }\n  }\n  let closing_bracket_index = []\n  for (let i = 0; i < closing_bracket_index1.length; i++) {\n    closing_bracket_index.push(closing_bracket_index1[closing_bracket_index1.length - i - 1])\n  }\n  let cnt = 0\n  let i = 0\n  let l = closing_bracket_index.length\n  for (let k = 0; k < opening_bracket_index.length; k++) {\n    if (i < l && opening_bracket_index[k] < closing_bracket_index[i]) {\n      cnt += 1;\n      i += 1;\n    }\n  }\n  return cnt >= 2\n}\n\n", "test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[[[]]]]') === true)\n  console.assert(isNested('[]]]]]]]]]]') === false)\n  console.assert(isNested('[][][[]]') === true)\n  console.assert(isNested('[[]') === false)\n  console.assert(isNested('[]]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n  console.assert(isNested('') === false)\n  console.assert(isNested('[[[[[[[[') === false)\n  console.assert(isNested(']]]]]]]]') === false)\n}\n\ntestIsNested()\n", "declaration": "\nconst isNested = (string) => {\n", "example_test": "const testIsNested = () => {\n  console.assert(isNested('[[]]') === true)\n  console.assert(isNested('[]]]]]]][[[[[]') === false)\n  console.assert(isNested('[][]') === false)\n  console.assert(isNested('[]') === false)\n  console.assert(isNested('[[]][[') === true)\n  console.assert(isNested('[[][]]') === true)\n}\ntestIsNested()\n", "entry_point": "isNested", "gc": "/*\n  Create a function that takes a string as input which contains only square brackets.\n  The function should return true if and only if there is a valid subsequence of brackets\n  where at least one bracket in the subsequence is nested.\n  isNested('[[]]') ➞ true\n  isNested('[]]]]]]][[[[[]') ➞ false\n  isNested('[][]') ➞ false\n  isNested('[]') ➞ false\n  isNested('[[][]]') ➞ true\n  isNested('[[]][[') ➞ true\n  */\nconst isNested = (string) => {\n  const openBrackets = '['\n  const closeBrackets = ']'\n  const nested = false\n  const isNested = string => {\n    const openBracketsRegex = new RegExp(openBrackets, 'g')\n    const closeBracketsRegex = new RegExp(closeBrackets, 'g')\n    const index = string.search(openBracketsRegex)\n    const start = index\n    const end = string.search(closeBracketsRegex)\n    if (index > -1 && end > index) {\n      const index1 = string.indexOf(openBrackets, index + 1)\n      const index2 = string.indexOf(closeBrackets, index1 + 1)\n      if (index1 > -1 && index2 > index1) {\n        return isNested(string.slice(index1, index2 + 1))\n      }\n    }\n    return nested\n  }\n  return isNested(string)\n}\n\nconsole.log(isNested('[[]]'))\nconsole.log(isNested('[]]]]]]][[[[[]'))\nconsole.log(isNested('[][]'))\nconsole.log(isNested('[]'))\nconsole.log(isNested('[[][]]'))\nconsole.log(isNested('[[]][['))\n<|endoftext|>"}
{"task_id": "JavaScript/133", "prompt": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    let y = lst[i]\n    if (y % 1 != 0) {\n      if (y > 0) { y = y - y % 1 + 1 }\n      else { y = -y; y = y - y % 1 }\n    }\n    p += y * y\n  }\n  return p\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1.0, 2, 3]) === 14)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n\n  console.assert(sumSquares([100, 1, 15, 2]) === 10230)\n  console.assert(sumSquares([10000, 10000]) === 200000000)\n  console.assert(sumSquares([-1.4, 4.6, 6.3]) === 75)\n  console.assert(sumSquares([-1.4, 17.9, 18.9, 19.9]) === 1086)\n\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1]) === 1)\n  console.assert(sumSquares([-1, 1, 0]) === 2)\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 14)\n  console.assert(sumSquares([1, 4, 9]) === 98)\n  console.assert(sumSquares([1, 3, 5, 7]) === 84)\n  console.assert(sumSquares([1.4, 4.2, 0]) === 29)\n  console.assert(sumSquares([-2.4, 1, 1]) === 6)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*You are given a list of numbers.\n  You need to return the sum of squared numbers in the given list,\n  round each element in the list to the upper int(Ceiling) first.\n  Examples:\n  For lst = [1,2,3] the output should be 14\n  For lst = [1,4,9] the output should be 98\n  For lst = [1,3,5,7] the output should be 84\n  For lst = [1.4,4.2,0] the output should be 29\n  For lst = [-2.4,1,1] the output should be 6\n  */\nconst sumSquares = (lst) => {\n  if (!Array.isArray(lst)) {\n    throw new TypeError(`[sumSquares]: list must be an array.`);\n  }\n  let sum = 0;\n  lst.forEach(num => {\n    let number = parseFloat(num);\n    sum += Math.round(Math.pow(number, 2));\n  });\n  return sum;\n};\n\nmodule.exports = sumSquares;\n<|endoftext|>"}
{"task_id": "JavaScript/134", "prompt": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n", "canonical_solution": "  let len = txt.length\n  if (len == 0) { return false }\n  let y = txt[len - 1].charCodeAt()\n  if (len == 1) {\n    if ((y >= 65 && y <= 90) || (y >= 97 && y <= 122)) { return true }\n    return false\n  }\n  if (txt[len - 2] == ' ' && ((y >= 65 && y <= 90) || (y >= 97 && y <= 122))) { return true }\n  return false\n}\n\n", "test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('eeeee') === false)\n  console.assert(checkIfLastCharIsALetter('A') === true)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie ') === false)\n  console.assert(checkIfLastCharIsALetter('Pumpkin pie 1') === false)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('eeeee e ') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\n\ntestCheckIfLastCharIsALetter()\n", "declaration": "\nconst checkIfLastCharIsALetter = (txt) => {\n", "example_test": "const testCheckIfLastCharIsALetter = () => {\n  console.assert(checkIfLastCharIsALetter('apple pi e') === true)\n  console.assert(checkIfLastCharIsALetter('') === false)\n  console.assert(checkIfLastCharIsALetter('apple pie') === false)\n  console.assert(checkIfLastCharIsALetter('apple pi e ') === false)\n}\ntestCheckIfLastCharIsALetter()\n", "entry_point": "checkIfLastCharIsALetter", "gc": "/* Create a function that returns true if the last character\n  of a given string is an alphabetical character and is not\n  a part of a word, and false otherwise.\n  Note: \"word\" is a group of characters separated by space.\n  Examples:\n  checkIfLastCharIsALetter(\"apple pie\") ➞ false\n  checkIfLastCharIsALetter(\"apple pi e\") ➞ true\n  checkIfLastCharIsALetter(\"apple pi e \") ➞ false\n  checkIfLastCharIsALetter(\"\") ➞ false\n  */\nconst checkIfLastCharIsALetter = (txt) => {\n    const alphaLetters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    const lastChar = txt[txt.length - 1];\n    if (alphaLetters.indexOf(lastChar) >= 0 &&!isAlpha(lastChar)) {\n        return true;\n    }\n    return false;\n};\n\nconst isAlpha = (char) => {\n    const alphaLetters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    if (alphaLetters.indexOf(char) >= 0) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  is all numbers and is not an empty string, and false otherwise.\n  Examples:\n  isNumeric(\"123\") ➞ true\n  isNumeric(\"\") ➞ false\n  isNumeric(\" \") ➞ false\n  isNumeric(\"123 \") ➞ true\n  isNumeric(\"123 a\") ➞ false\n  */\nconst isNumeric = (txt) => {\n    if (txt.match(/\\d+/)) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  contains a digit and is not an empty string, and false otherwise.\n  Examples:\n  containsDigit(\"123\") ➞ true\n  containsDigit(\"\") ➞ false\n  containsDigit(\" \") ➞ false\n  containsDigit(\"123 \") ➞ false\n  containsDigit(\"123 a\") ➞ true\n  */\nconst containsDigit = (txt) => {\n    if (txt.match(/\\d+/)) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  contains an alphabetical character and is not an empty string, and false otherwise.\n  Examples:\n  containsLetter(\"123\") ➞ false\n  containsLetter(\"\") ➞ false\n  containsLetter(\" \") ➞ false\n  containsLetter(\"123 \") ➞ true\n  containsLetter(\"123 a\") ➞ true\n  */\nconst containsLetter = (txt) => {\n    if (txt.match(/[a-zA-Z]+/)) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  is an alphabetical string, contains a digit, and is not an empty string, and false otherwise.\n  Examples:\n  containsAlphaNumeric(\"123\") ➞ true\n  containsAlphaNumeric(\"\") ➞ false\n  containsAlphaNumeric(\" \") ➞ false\n  containsAlphaNumeric(\"123 \") ➞ true\n  containsAlphaNumeric(\"123 a\") ➞ true\n  */\nconst containsAlphaNumeric = (txt) => {\n    if (txt.match(/[a-zA-Z0-9]+/)) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  is an alphanumeric string, contains a digit, and is not an empty string, and false otherwise.\n  Examples:\n  containsAlphaNumeric(\"123\") ➞ true\n  containsAlphaNumeric(\"\") ➞ false\n  containsAlphaNumeric(\" \") ➞ false\n  containsAlphaNumeric(\"123 \") ➞ true\n  containsAlphaNumeric(\"123 a\") ➞ true\n  */\nconst containsAlpha = (txt) => {\n    if (txt.match(/[a-z]+/)) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  contains an alphabetical character and is not an empty string, and false otherwise.\n  Examples:\n  containsLetter(\"123\") ➞ true\n  containsLetter(\"\") ➞ false\n  containsLetter(\" \") ➞ false\n  containsLetter(\"123 \") ➞ true\n  containsLetter(\"123 a\") ➞ false\n  */\nconst containsLetterOrDigit = (txt) => {\n    if (txt.match(/[a-zA-Z0-9]+/)) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  contains a digit or alphabetical character, and is not an empty string, and false otherwise.\n  Examples:\n  containsAlphaOrDigit(\"123\") ➞ true\n  containsAlphaOrDigit(\"\") ➞ false\n  containsAlphaOrDigit(\" \") ➞ false\n  containsAlphaOrDigit(\"123 \") ➞ true\n  containsAlphaOrDigit(\"123 a\") ➞ true\n  */\nconst containsAlphaOrDigit = (txt) => {\n    if (txt.match(/[a-zA-Z0-9]+/)) {\n        return true;\n    }\n    return false;\n};\n\n/* Create a function that returns true if the given string\n  contains a digit, alphabetical character, or is not an empty string, and false otherwise.\n  Examples:\n  containsAlphaOrDigit(\"123\") ➞ true\n  containsAlphaOrDigit(\"\") ➞ false\n  containsAlphaOrDigit(\" \") ➞ false\n  containsAlphaOrDigit(\"123 \") ➞ true\n  containsAlphaOrDigit(\"123 a\") ➞ true\n  */\nconst containsAlphaOrDigitOrLetter = (txt) => {\n    if (txt.match(/[a-zA-Z0"}
{"task_id": "JavaScript/135", "prompt": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n", "canonical_solution": "  if (arr.length == 0) { return -1 }\n  for (let i = arr.length - 1; i > 0; i--) {\n    if (arr[i] < arr[i - 1]) { return i }\n  }\n  return -1\n}\n\n", "test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 4, 5]) === -1)\n  console.assert(canArrange([1, 4, 2, 5, 6, 7, 8, 9, 10]) === 2)\n  console.assert(canArrange([4, 8, 5, 7, 3]) === 4)\n  console.assert(canArrange([]) === -1)\n}\n\ntestCanArrange()\n", "declaration": "\nconst canArrange = (arr) => {\n", "example_test": "const testCanArrange = () => {\n  console.assert(canArrange([1, 2, 4, 3, 5]) === 3)\n  console.assert(canArrange([1, 2, 3]) === -1)\n}\ntestCanArrange()\n", "entry_point": "canArrange", "gc": "/*Create a function which returns the largest index of an element which\n  is not greater than or equal to the element immediately preceding it. If\n  no such element exists then return -1. The given array will not contain\n  duplicate values.\n\n  Examples:\n  canArrange([1,2,4,3,5]) = 3\n  canArrange([1,2,3]) = -1\n  */\nconst canArrange = (arr) => {\n    const arrLength = arr.length;\n    const sortedArr = arr.sort();\n\n    let last;\n    let lastIndex = -1;\n    let index = -1;\n\n    for (let i = 0; i < arrLength; i++) {\n        const current = sortedArr[i];\n        const lastIndex = sortedArr.lastIndexOf(current);\n\n        if (lastIndex === -1) {\n            return -1;\n        }\n\n        if (current === last) {\n            index = lastIndex;\n            break;\n        }\n\n        last = current;\n        lastIndex = sortedArr.lastIndexOf(current);\n    }\n\n    return index;\n};\n\nmodule.exports = canArrange;\n<|endoftext|>"}
{"task_id": "JavaScript/136", "prompt": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n", "canonical_solution": "  let a = Infinity\n  let b = -Infinity\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] > 0 && lst[i] < a) { a = lst[i] }\n    if (lst[i] < 0 && lst[i] > b) { b = lst[i] }\n  }\n  if (a == Infinity) { a = null }\n  if (b == -Infinity) { b = null }\n  return (b, a)\n}\n\n", "test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7, 0])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([1, 3, 2, 4, 5, 6, -2])) ===\n    JSON.stringify((-2, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([4, 5, 3, 6, 2, 7, -7])) ===\n    JSON.stringify((-7, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([7, 3, 8, 4, 9, 2, 5, -9])) ===\n    JSON.stringify((-9, 2))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-1, -3, -5, -6, 0])) ===\n    JSON.stringify((-1, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([-6, -4, -4, -3, -100, 1])) ===\n    JSON.stringify((-3, 1))\n  )\n}\n\ntestLargestSmallestIntegers()\n", "declaration": "\nconst largestSmallestIntegers = (lst) => {\n", "example_test": "const testLargestSmallestIntegers = () => {\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([2, 4, 1, 3, 5, 7])) ===\n    JSON.stringify((null, 1))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([])) === JSON.stringify((null, null))\n  )\n  console.assert(\n    JSON.stringify(largestSmallestIntegers([0])) ===\n    JSON.stringify((null, null))\n  )\n}\ntestLargestSmallestIntegers()\n", "entry_point": "lagrestSmallestIntgeers", "gc": "/* Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (null, 1)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestIntgeers = (lst) => {\n  const a = null\n  const b = null\n  const len = lst.length\n  const sortedLst = lst.slice().sort((a, b) => a - b)\n  if (len > 0) {\n    return sortedLst[0]\n  } else if (len < 0) {\n    return sortedLst[len]\n  } else {\n    return a\n  }\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestIntgeers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  lagrestSmallestIntgeers([]) == (null, null)\n  lagrestSmallestIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestPosIntgeers = (lst) => {\n  const a = null\n  const b = null\n  const len = lst.length\n  const sortedLst = lst.slice().sort((a, b) => b - a)\n  if (len > 0) {\n    return sortedLst[0]\n  } else if (len < 0) {\n    return sortedLst[len]\n  } else {\n    return a\n  }\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestPosIntgeers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  lagrestSmallestPosIntgeers([]) == (null, null)\n  lagrestSmallestPosIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestNegIntgeers = (lst) => {\n  const a = null\n  const b = null\n  const len = lst.length\n  const sortedLst = lst.slice().sort((a, b) => a - b)\n  if (len > 0) {\n    return sortedLst[0]\n  } else if (len < 0) {\n    return sortedLst[len]\n  } else {\n    return a\n  }\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestNegIntgeers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  lagrestSmallestNegIntgeers([]) == (null, null)\n  lagrestSmallestNegIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestNegIntgeers2 = (lst) => {\n  const a = null\n  const b = null\n  const len = lst.length\n  const sortedLst = lst.slice().sort((a, b) => a - b)\n  if (len > 0) {\n    return sortedLst[0]\n  } else if (len < 0) {\n    return sortedLst[len]\n  } else {\n    return a\n  }\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestNegIntgeers([2, 4, 1, 3, 5, 7]) == (1, 2)\n  lagrestSmallestNegIntgeers([]) == (null, null)\n  lagrestSmallestNegIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestPosIntgeers2 = (lst) => {\n  const a = null\n  const b = null\n  const len = lst.length\n  const sortedLst = lst.slice().sort((a, b) => b - a)\n  if (len > 0) {\n    return sortedLst[0]\n  } else if (len < 0) {\n    return sortedLst[len]\n  } else {\n    return a\n  }\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers, return them as null.\n  Examples:\n  lagrestSmallestPosIntgeers([2, 4, 1, 3, 5, 7]) == (2, 4)\n  lagrestSmallestPosIntgeers([]) == (null, null)\n  lagrestSmallestPosIntgeers([0]) == (null, null)\n  */\nconst lagrestSmallestPosIntgeers3 = (lst) => {\n  const a = null\n  const b = null\n  const len = lst.length\n  const sortedLst = lst.slice().sort((a, b) => a - b)\n  if (len > 0) {\n    return sortedLst[0]\n  } else if (len < 0) {\n    return sortedLst[len]\n  } else {\n    return a\n  }\n}\n\n/*\n  Create a function that returns a tuple (a, b), where 'a' is\n  the largest of negative integers, and 'b' is the smallest\n  of positive integers in a list.\n  If there is no negative or positive integers"}
{"task_id": "JavaScript/137", "prompt": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be . or ,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n", "canonical_solution": "  let aa = Number(a)\n  if (typeof a == 'string') { aa = Number(a.replace(',', '.')) }\n  let bb = Number(b)\n  if (typeof b == 'string') { bb = Number(b.replace(',', '.')) }\n  if (aa > bb) { return a }\n  if (aa < bb) { return b }\n  return null\n}\n\n", "test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2) === 2)\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(2, 3) === 3)\n  console.assert(compareOne(5, 6) === 6)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', '2') === '2')\n  console.assert(compareOne('1', 1) === null)\n}\n\ntestCompareOne()\n", "declaration": "\nconst compareOne = (a, b) => {\n", "example_test": "const testCompareOne = () => {\n  console.assert(compareOne(1, 2.5) === 2.5)\n  console.assert(compareOne(1, '2,3') === '2,3')\n  console.assert(compareOne('5,1', '6') === '6')\n  console.assert(compareOne('1', 1) === null)\n}\ntestCompareOne()\n", "entry_point": "compaerOne", "gc": "/*\n  Create a function that takes integers, floats, or strings representing\n  real numbers, and returns the larger variable in its given variable type.\n  Return null if the values are equal.\n  Note: If a real number is represented as a string, the floating point might be. or,\n\n  compaerOne(1, 2.5) ➞ 2.5\n  compaerOne(1, \"2,3\") ➞ \"2,3\"\n  compaerOne(\"5,1\", \"6\") ➞ \"6\"\n  compaerOne(\"1\", 1) ➞ null\n  */\nconst compaerOne = (a, b) => {\n    let aString = typeof a === \"string\"? a : `${a}`;\n    let bString = typeof b === \"string\"? b : `${b}`;\n    let aFloat = parseFloat(aString);\n    let bFloat = parseFloat(bString);\n\n    if (isNaN(aFloat)) {\n        aString = typeof a === \"string\"? a.replace(',', '.') : a;\n        aFloat = parseFloat(aString);\n    }\n    if (isNaN(bFloat)) {\n        bString = typeof b === \"string\"? b.replace(',', '.') : b;\n        bFloat = parseFloat(bString);\n    }\n    if (isNaN(aFloat) || isNaN(bFloat)) {\n        return null;\n    }\n\n    if (aFloat > bFloat) {\n        return a;\n    }\n    if (aFloat < bFloat) {\n        return b;\n    }\n    if (aString < bString) {\n        return a;\n    }\n    return b;\n}\n\nmodule.exports = compaerOne;\n<|endoftext|>"}
{"task_id": "JavaScript/138", "prompt": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n", "canonical_solution": "  return (n >= 8 && n % 2 == 0)\n}\n\n", "test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n  console.assert(isEqualToSumEven(10) === true)\n  console.assert(isEqualToSumEven(11) === false)\n  console.assert(isEqualToSumEven(12) === true)\n  console.assert(isEqualToSumEven(13) === false)\n  console.assert(isEqualToSumEven(16) === true)\n}\n\ntestIsEqualToSumEven()\n", "declaration": "\nconst isEqualToSumEven = (n) => {\n", "example_test": "const testIsEqualToSumEven = () => {\n  console.assert(isEqualToSumEven(4) === false)\n  console.assert(isEqualToSumEven(6) === false)\n  console.assert(isEqualToSumEven(8) === true)\n}\ntestIsEqualToSumEven()\n", "entry_point": "isEqualToSumEven", "gc": "/*Evaluate whether the given number n can be written as the sum of exactly 4 positive even numbers\n  Example\n  isEqualToSumEven(4) == false\n  isEqualToSumEven(6) == false\n  isEqualToSumEven(8) == true\n  */\nconst isEqualToSumEven = (n) => {\n  return (n % 2 === 0) && ((n % 4 === 0 && n % 6 === 0) || (n % 3 === 0 && n % 5 === 0));\n}\n\nexport default isEqualToSumEven;\n<|endoftext|>"}
{"task_id": "JavaScript/139", "prompt": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! * ... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n", "canonical_solution": "  let p = 1;\n  let t = 1;\n  while (n > 1) {\n    let y = p;\n    while (y > 0) {\n      y--;\n      t *= n;\n    }\n    p++;\n    n--;\n  }\n  return t\n}\n\n", "test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n  console.assert(specialFactorial(5) === 34560)\n  console.assert(specialFactorial(7) === 125411328000)\n  console.assert(specialFactorial(1) === 1)\n}\n\ntestSpecialFactorial()\n", "declaration": "\nconst specialFactorial = (n) => {\n", "example_test": "const testSpecialFactorial = () => {\n  console.assert(specialFactorial(4) === 288)\n}\ntestSpecialFactorial()\n", "entry_point": "specialFactorial", "gc": "/*The Brazilian factorial is defined as:\n  brazilian_factorial(n) = n! * (n-1)! * (n-2)! *... * 1!\n  where n > 0\n\n  For example:\n  >>> specialFactorial(4)\n  288\n\n  The function will receive an integer as input and should return the special\n  factorial of this integer.\n  */\nconst specialFactorial = (n) => {\n  if (n <= 0) return 1\n  else return (n * specialFactorial(n-1) * specialFactorial(n-2) * specialFactorial(n-3))\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial2 = (n) => {\n  return specialFactorial(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial = (n) => {\n  if (n < 0) return specialFactorial(n)\n  else return n * factorial(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial3 = (n) => {\n  return specialFactorial2(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial2 = (n) => {\n  if (n < 0) return specialFactorial2(n)\n  else return n * factorial2(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial4 = (n) => {\n  return specialFactorial3(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial3 = (n) => {\n  if (n < 0) return specialFactorial3(n)\n  else return n * factorial3(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial5 = (n) => {\n  return specialFactorial4(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial4 = (n) => {\n  if (n < 0) return specialFactorial4(n)\n  else return n * factorial4(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial6 = (n) => {\n  return specialFactorial5(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial5 = (n) => {\n  if (n < 0) return specialFactorial5(n)\n  else return n * factorial5(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial7 = (n) => {\n  return specialFactorial6(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial6 = (n) => {\n  if (n < 0) return specialFactorial6(n)\n  else return n * factorial6(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial8 = (n) => {\n  return specialFactorial7(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial7 = (n) => {\n  if (n < 0) return specialFactorial7(n)\n  else return n * factorial7(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial9 = (n) => {\n  return specialFactorial8(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial8 = (n) => {\n  if (n < 0) return specialFactorial8(n)\n  else return n * factorial8(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial10 = (n) => {\n  return specialFactorial9(n)\n}\n\n/*The function will receive an integer as input and return the factorial of this\n  integer, or the special factorial of this integer if the integer is less than\n  zero.\n  */\nconst factorial9 = (n) => {\n  if (n < 0) return specialFactorial9(n)\n  else return n * factorial9(n-1)\n}\n\n/*The following function is just a wrapper for the factorial function,\n  but it does not take an integer as input and returns a special factorial.\n  */\nconst specialFactorial11 = (n) => {\n  return specialFactorial10(n)\n}\n\n/*The function will receive an integer as input"}
{"task_id": "JavaScript/140", "prompt": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n", "canonical_solution": "  let t = ''\n  let c = 0\n  for (let i = 0; i < text.length; i++) {\n    if (text[i] == ' ') { c++ }\n    else if (c > 0) {\n      if (c == 1) { t += '_' }\n      if (c == 2) { t += '__' }\n      if (c > 2) { t += '-' }\n      t += text[i]\n      c = 0;\n    } else {\n      t += text[i]\n    }\n  }\n  if (c == 1) { t += '_' }\n  if (c == 2) { t += '__' }\n  if (c > 2) { t += '-' }\n  return t\n}\n\n", "test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Mudasir Hanif ') === 'Mudasir_Hanif_')\n  console.assert(\n    fixSpaces('Yellow Yellow  Dirty  Fellow') === 'Yellow_Yellow__Dirty__Fellow'\n  )\n  console.assert(fixSpaces('Exa   mple') === 'Exa-mple')\n  console.assert(fixSpaces('   Exa 1 2 2 mple') === '-Exa_1_2_2_mple')\n}\n\ntestFixSpaces()\n", "declaration": "\nconst fixSpaces = (text) => {\n", "example_test": "const testFixSpaces = () => {\n  console.assert(fixSpaces('Example') === 'Example')\n  console.assert(fixSpaces('Example 1') === 'Example_1')\n  console.assert(\n    fixSpaces(' Example 2') === '_Example_2'\n  )\n  console.assert(fixSpaces(' Example   3') === '_Example-3')\n}\ntestFixSpaces()\n", "entry_point": "fixSpacse", "gc": "/*\n  Given a string text, replace all spaces in it with underscores, \n  and if a string has more than 2 consecutive spaces, \n  then replace all consecutive spaces with - \n  \n  fixSpacse(\"Example\") == \"Example\"\n  fixSpacse(\"Example 1\") == \"Example_1\"\n  fixSpacse(\" Example 2\") == \"_Example_2\"\n  fixSpacse(\" Example   3\") == \"_Example-3\"\n  */\nconst fixSpacse = (text) => {\n    text = text.replace(/\\s/g, '_')\n    text = text.replace(/\\s\\s/g, '-');\n    return text;\n}\n\nconst removeSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    return text;\n}\n\nconst checkSpaces = (text) => {\n    if (text.indexOf(' ')!= -1) {\n        text = text.replace(/\\s/g, '');\n    }\n    return text;\n}\n\nconst checkSpacesInLines = (text) => {\n    if (text.indexOf(' ')!= -1) {\n        text = text.replace(/\\s/g, '');\n    }\n    return text;\n}\n\nconst getWords = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ');\n}\n\nconst getWordsInLines = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ');\n}\n\nconst getWordsInLinesAndSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ');\n}\n\nconst getWordsInLinesAndSpacesWithExtraSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ');\n}\n\nconst getWordsWithExtraSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ');\n}\n\nconst getWordsWithExtraSpacesInLines = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ');\n}\n\nconst getWordsWithExtraSpacesInLinesAndSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ');\n}\n\nconst removeExtraSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text;\n}\n\nconst removeExtraSpacesInLines = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text;\n}\n\nconst removeExtraSpacesInLinesAndSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text;\n}\n\nconst getWordCount = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split(' ').length;\n}\n\nconst getLineCount = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split('\\n').length;\n}\n\nconst getLineCountWithExtraSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split('\\n').length;\n}\n\nconst getWordCountInLines = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split('\\n').reduce((previous, current) => {\n        return previous + current.split(' ').length;\n    }, 0);\n}\n\nconst getWordCountInLinesWithExtraSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split('\\n').reduce((previous, current) => {\n        return previous + current.split(' ').length;\n    }, 0);\n}\n\nconst getWordsInLines = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split('\\n');\n}\n\nconst getWordsInLinesWithExtraSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split('\\n');\n}\n\nconst getWordsInLinesWithExtraSpacesAndSpaces = (text) => {\n    text = text.replace(/\\s/g, '');\n    text = text.replace(/\\s{2,}/g,'');\n    return text.split('\\n');\n}\n\nmodule.exports = {\n    checkSpaces,"}
{"task_id": "JavaScript/141", "prompt": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n", "canonical_solution": "  let t = file_name.split(/\\./)\n  if (t.length != 2) { return 'No' }\n  if (t[1] != 'txt' && t[1] != 'dll' && t[1] != 'exe') { return 'No' }\n  if (t[0] == '') { return 'No' }\n  let a = t[0][0].charCodeAt()\n  if (!((a >= 65 && a <= 90) || (a >= 97 && a <= 122))) { return 'No' }\n  let y = 0\n  for (let i = 1; i < t[0].length; i++) {\n    if (t[0][i].charCodeAt() >= 48 && t[0][i].charCodeAt() <= 57) { y++ }\n    if (y > 3) { return 'No' }\n  }\n  return 'Yes'\n}\n\n", "test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n  console.assert(fileNameCheck('s1sdf3.asd') === 'No')\n  console.assert(fileNameCheck('K.dll') === 'Yes')\n  console.assert(fileNameCheck('MY16FILE3.exe') === 'Yes')\n  console.assert(fileNameCheck('His12FILE94.exe') === 'No')\n  console.assert(fileNameCheck('_Y.txt') === 'No')\n  console.assert(fileNameCheck('?aREYA.exe') === 'No')\n  console.assert(fileNameCheck('/this_is_valid.dll') === 'No')\n  console.assert(fileNameCheck('this_is_valid.wow') === 'No')\n  console.assert(fileNameCheck('this_is_valid.txt') === 'Yes')\n  console.assert(fileNameCheck('this_is_valid.txtexe') === 'No')\n  console.assert(fileNameCheck('#this2_i4s_5valid.ten') === 'No')\n  console.assert(fileNameCheck('@this1_is6_valid.exe') === 'No')\n  console.assert(fileNameCheck('this_is_12valid.6exe4.txt') === 'No')\n  console.assert(fileNameCheck('all.exe.txt') === 'No')\n  console.assert(fileNameCheck('I563_No.exe') === 'Yes')\n  console.assert(fileNameCheck('Is3youfault.txt') === 'Yes')\n  console.assert(fileNameCheck('no_one#knows.dll') === 'Yes')\n  console.assert(fileNameCheck('1I563_Yes3.exe') === 'No')\n  console.assert(fileNameCheck('I563_Yes3.txtt') === 'No')\n  console.assert(fileNameCheck('final..txt') === 'No')\n  console.assert(fileNameCheck('final132') === 'No')\n  console.assert(fileNameCheck('_f4indsartal132.') === 'No')\n  console.assert(fileNameCheck('.txt') === 'No')\n  console.assert(fileNameCheck('s.') === 'No')\n}\n\ntestFileNameCheck()\n", "declaration": "\nconst fileNameCheck = (file_name) => {\n", "example_test": "const testFileNameCheck = () => {\n  console.assert(fileNameCheck('example.txt') === 'Yes')\n  console.assert(fileNameCheck('1example.dll') === 'No')\n}\ntestFileNameCheck()\n", "entry_point": "fileNameCheck", "gc": "/*Create a function which takes a string representing a file's name, and returns\n  'Yes' if the the file's name is valid, and returns 'No' otherwise.\n  A file's name is considered to be valid if and only if all the following conditions \n  are met:\n  - There should not be more than three digits ('0'-'9') in the file's name.\n  - The file's name contains exactly one dot '.'\n  - The substring before the dot should not be empty, and it starts with a letter from \n  the latin alphapet ('a'-'z' and 'A'-'Z').\n  - The substring after the dot should be one of these: ['txt', 'exe', 'dll']\n  Examples:\n  fileNameCheck(\"example.txt\") # => 'Yes'\n  fileNameCheck(\"1example.dll\") # => 'No' (the name should start with a latin alphapet letter)\n  */\nconst fileNameCheck = (file_name) => {\n  const re = /^[a-zA-Z][a-zA-Z0-9]*(\\.\\w{1})?$/;\n  return re.test(file_name);\n};\n\nconst fileExtensionCheck = (file_name) => {\n  const re = /(\\.\\w{1})*$/;\n  return re.test(file_name);\n};\n\nmodule.exports = {\n  fileNameCheck,\n  fileExtensionCheck\n};<|endoftext|>"}
{"task_id": "JavaScript/142", "prompt": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n", "canonical_solution": "  let y = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (i % 3 == 0) { y += lst[i] * lst[i] }\n    else if (i % 4 == 0) { y += lst[i] * lst[i] * lst[i] }\n    else { y += lst[i] }\n  }\n  return y\n}\n\n", "test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([1, 4, 9]) === 14)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([1, 1, 1, 1, 1, 1, 1, 1, 1]) === 9)\n  console.assert(sumSquares([-1, -1, -1, -1, -1, -1, -1, -1, -1]) === -3)\n  console.assert(sumSquares([0]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n  console.assert(sumSquares([-56, -99, 1, 0, -2]) === 3030)\n  console.assert(sumSquares([-1, 0, 0, 0, 0, 0, 0, 0, -1]) === 0)\n  console.assert(\n    sumSquares([\n      -16, -9, -2, 36, 36, 26, -20, 25, -40, 20, -4, 12, -26, 35, 37,\n    ]) === -14196\n  )\n  console.assert(\n    sumSquares([\n      -1, -3, 17, -1, -15, 13, -1, 14, -14, -12, -5, 14, -14, 6, 13, 11, 16, 16,\n      4, 10,\n    ]) === -1448\n  )\n}\n\ntestSumSquares()\n", "declaration": "\nconst sumSquares = (lst) => {\n", "example_test": "const testSumSquares = () => {\n  console.assert(sumSquares([1, 2, 3]) === 6)\n  console.assert(sumSquares([]) === 0)\n  console.assert(sumSquares([-1, -5, 2, -1, -5]) === -126)\n}\ntestSumSquares()\n", "entry_point": "sumSquares", "gc": "/*\"\n  This function will take a list of integers. For all entries in the list, the function shall square the integer entry if its index is a \n  multiple of 3 and will cube the integer entry if its index is a multiple of 4 and not a multiple of 3. The function will not \n  change the entries in the list whose indexes are not a multiple of 3 or 4. The function shall then return the sum of all entries. \n  \n  Examples:\n  For lst = [1,2,3] the output should be 6\n  For lst = []  the output should be 0\n  For lst = [-1,-5,2,-1,-5]  the output should be -126\n  */\nconst sumSquares = (lst) => {\n  let sum = 0\n  for (let x of lst) {\n    if (x > 0 && x % 3 === 0) {\n      sum += x * x\n    } else if (x > 0 && x % 4 === 0) {\n      sum += x * x * x\n    }\n  }\n  return sum\n}\n\nconst test = sumSquares([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126])\nconsole.log(test)\n<|endoftext|>"}
{"task_id": "JavaScript/143", "prompt": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n", "canonical_solution": "  let t = sentence.split(/\\s/)\n  let p = ''\n  for (let j = 0; j < t.length; j++) {\n    let len = t[j].length;\n    let u = 1\n    if (len == 1 || len == 0) { continue }\n    for (let i = 2; i * i <= len; i++) {\n      if (len % i == 0) { u = 0 }\n    }\n    if (u == 0) { continue }\n    if (p == '') { p += t[j] }\n    else { p = p + ' ' + t[j] }\n  }\n  return p\n}\n\n", "test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n  console.assert(\n    wordsInSentence('there is no place available here') === 'there is no place'\n  )\n  console.assert(wordsInSentence('Hi I am Hussein') === 'Hi am Hussein')\n  console.assert(wordsInSentence('go for it') === 'go for it')\n  console.assert(wordsInSentence('here') === '')\n  console.assert(wordsInSentence('here is') === 'is')\n}\n\ntestWordsInSentence()\n", "declaration": "\nconst wordsInSentence = (sentence) => {\n", "example_test": "const testWordsInSentence = () => {\n  console.assert(wordsInSentence('This is a test') === 'is')\n  console.assert(wordsInSentence('lets go for swimming') === 'go for')\n}\ntestWordsInSentence()\n", "entry_point": "wrodsInSentenec", "gc": "/*\n  You are given a string representing a sentence,\n  the sentence contains some words separated by a space,\n  and you have to return a string that contains the words from the original sentence,\n  whose lengths are prime numbers,\n  the order of the words in the new string should be the same as the original one.\n\n  Example 1:\n      Input: sentence = \"This is a test\"\n      Output: \"is\"\n\n  Example 2:\n      Input: sentence = \"lets go for swimming\"\n      Output: \"go for\"\n\n  Constraints:\n      * 1 <= len(sentence) <= 100\n      * sentence contains only letters\n  */\nconst wrodsInSentenec = (sentence) => {\n  const words = sentence.split(' ');\n  return words.map(word => {\n    return word.split('').reduce((acc, curr, i) => {\n      if (curr!== '') {\n        return `${acc}${curr}`;\n      }\n      return `${acc}`;\n    }, '');\n  });\n};\n\nconst wordsInSentenec = (sentence) => {\n  return sentence.split(' ').map(word => {\n    return word.split('').reduce((acc, curr, i) => {\n      if (curr!== '') {\n        return `${acc}${curr}`;\n      }\n      return `${acc}`;\n    }, '');\n  });\n};\n\nconst primes = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrime = (n) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    if (n % i === 0) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrimeNumber = (n) => {\n  return n.every(isPrime);\n};\n\nconst primesInRange = (n, m) => {\n  const result = [];\n  let i = 1;\n  while (i < n) {\n    if (n % i === 0 && i > m) {\n      result.push(i);\n    }\n    i++;\n  }\n  return result;\n};\n\nconst isPrimeInRange = (n, m) => {\n  return primesInRange(n, m).every(isPrimeNumber);\n};\n\nconst numberOfPrimes = (n) => {\n  return primes(n).length;\n};\n\nconst numberOfPrimesInRange = (n, m) => {\n  return primesInRange(n, m).length;\n};\n\nconst primesInSentence = (sentence) => {\n  const words = wordsInSentenec(sentence);\n  const primes = primesInRange(1, words.length - 1);\n  const result = words.map(word => {\n    return primes.filter(prime => {\n      const wordPrime = word.substring(0, prime);\n      return wordPrime === word;\n    }).length;\n  });\n  return result;\n};\n\nconst numberOfPrimesInSentence = (sentence) => {\n  return primesInSentence(sentence).reduce((acc, curr) => {\n    return acc + curr;\n  }, 0);\n};\n\nmodule.exports = {\n  wordsInSentenec,\n  primesInRange,\n  primesInSentence,\n  numberOfPrimes,\n  numberOfPrimesInRange,\n};\n<|endoftext|>"}
{"task_id": "JavaScript/144", "prompt": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n", "canonical_solution": "  let a = x.split(/\\//)\n  let b = n.split(/\\//)\n  let m = Number(a[0]) * Number(b[0])\n  let r = Number(a[1]) * Number(b[1])\n  return m % r == 0\n}\n\n", "test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('5/1', '3/1') === true)\n  console.assert(simplify('7/10', '10/2') === false)\n  console.assert(simplify('2/10', '50/10') === true)\n  console.assert(simplify('7/2', '4/2') === true)\n  console.assert(simplify('11/6', '6/1') === true)\n  console.assert(simplify('2/3', '5/2') === false)\n  console.assert(simplify('5/2', '3/5') === false)\n  console.assert(simplify('2/4', '8/4') === true)\n  console.assert(simplify('2/4', '4/2') === true)\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/5', '1/5') === false)\n}\n\ntestSimplify()\n", "declaration": "\nconst simplify = (x, n) => {\n", "example_test": "const testSimplify = () => {\n  console.assert(simplify('1/5', '5/1') === true)\n  console.assert(simplify('1/6', '2/1') === false)\n  console.assert(simplify('7/10', '10/2') === false)\n}\ntestSimplify()\n", "entry_point": "simpilfy", "gc": "/*Your task is to implement a function that will simpilfy the expression\n  x * n. The function returns true if x * n evaluates to a whole number and false\n  otherwise. Both x and n, are string representation of a fraction, and have the following format,\n  <numerator>/<denominator> where both numerator and denominator are positive whole numbers.\n\n  You can assume that x, and n are valid fractions, and do not have zero as denominator.\n\n  simpilfy(\"1/5\", \"5/1\") = true\n  simpilfy(\"1/6\", \"2/1\") = false\n  simpilfy(\"7/10\", \"10/2\") = false\n  */\nconst simpilfy = (x, n) => {\n  const [x_num, x_den] = parseInt(x).toString().split('/');\n  const [n_num, n_den] = parseInt(n).toString().split('/');\n  const x_pow = parseInt(x_num) * parseInt(n_den);\n  const n_pow = parseInt(n_num) * parseInt(x_den);\n  return (x_pow === n_pow);\n};\n\nconsole.log(simpilfy('1/5', '5/1'));\nconsole.log(simpilfy('1/6', '2/1'));\nconsole.log(simpilfy('7/10', '10/2'));\n<|endoftext|>"}
{"task_id": "JavaScript/145", "prompt": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n", "canonical_solution": "  let p = nums\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let m = 0\n      let n = 0\n      let h = p[k]\n      let d = p[k + 1]\n      let y = 1\n      let u = 1\n      if (h < 0) { y = -1; h = -h; }\n      if (d < 0) { u = -1; d = -d; }\n      while (h >= 10) {\n        m += h % 10;\n        h = (h - h % 10) / 10;\n      }\n      m += y * h\n      while (d >= 10) {\n        n += d % 10;\n        d = (d - d % 10) / 10;\n      }\n      n += u * d\n      if (m > n) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(\n    JSON.stringify(\n      orderByPoints([\n        1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457, 3, 56, 0, 46,\n      ])\n    ) ===\n    JSON.stringify([\n      0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457,\n    ])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(orderByPoints([1, -11, -32, 43, 54, -98, 2, -3])) ===\n    JSON.stringify([-3, -32, -98, -11, 1, 2, 43, 54])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) ===\n    JSON.stringify([1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9])\n  )\n  console.assert(\n    JSON.stringify(orderByPoints([0, 6, 6, -76, -21, 23, 4])) ===\n    JSON.stringify([-76, -21, 0, 4, 23, 6, 6])\n  )\n}\n\ntestOrderByPoints()\n", "declaration": "\nconst orderByPoints = (nums) => {\n", "example_test": "const testOrderByPoints = () => {\n  console.assert(\n    JSON.stringify(orderByPoints([1, 11, -1, -11, -12])) ===\n    JSON.stringify([-1, -11, 1, -12, 11])\n  )\n  console.assert(JSON.stringify(orderByPoints([])) === JSON.stringify([]))\n}\ntestOrderByPoints()\n", "entry_point": "roderByPoints", "gc": "/*\n  Write a function which sorts the given list of integers\n  in ascending order according to the sum of their digits.\n  Note: if there are several items with similar sum of their digits,\n  order them based on their index in original list.\n\n  For example:\n  >>> roderByPoints([1, 11, -1, -11, -12]) == [-1, -11, 1, -12, 11]\n  >>> roderByPoints([]) == []\n  */\nconst roderByPoints = (nums) => {\n  return nums.reduce((a, b) => {\n    if (a === null) {\n      return b\n    } else if (b === null) {\n      return a\n    }\n    const [aDigit, bDigit] = [...a,...b].map(Number)\n    const sum = aDigit + bDigit\n    if (sum % 10 === 0) {\n      return [sum, aDigit, bDigit].sort()\n    }\n    return [sum, bDigit, aDigit].sort()\n  }, null)\n}\n\nconsole.log(roderByPoints([1, 11, -1, -11, -12]))\n<|endoftext|>"}
{"task_id": "JavaScript/146", "prompt": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < nums.length; i++) {\n    if (nums[i] < 10) { continue }\n    let y = nums[i].toString()\n    if (Number(y[0]) % 2 == 1 && Number(y[y.length - 1]) % 2 == 1) {\n      p++\n    }\n  }\n  return p\n}\n\n", "test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([5, -2, 1, -5]) === 0)\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n  console.assert(specialFilter([43, -12, 93, 125, 121, 109]) === 4)\n  console.assert(specialFilter([71, -2, -33, 75, 21, 19]) === 3)\n  console.assert(specialFilter([1]) === 0)\n  console.assert(specialFilter([]) === 0)\n}\n\ntestSpecialFilter()\n", "declaration": "\nconst specialFilter = (nums) => {\n", "example_test": "const testSpecialFilter = () => {\n  console.assert(specialFilter([15, -73, 14, -15]) === 1)\n  console.assert(specialFilter([33, -2, -3, 45, 21, 109]) === 2)\n}\ntestSpecialFilter()\n", "entry_point": "specialFilter", "gc": "/*Write a function that takes an array of numbers as input and returns \n  the number of elements in the array that are greater than 10 and both \n  first and last digits of a number are odd (1, 3, 5, 7, 9).\n  For example:\n  specialFilter([15, -73, 14, -15]) => 1 \n  specialFilter([33, -2, -3, 45, 21, 109]) => 2\n  */\nconst specialFilter = (nums) => {\n  const result = [];\n  nums.forEach((num) => {\n    if (num > 10 && (num % 2 === 1 && num % 10 === 1 || num % 2 === 0 && num % 10 === 3 || num % 2 === 0 && num % 10 === 5 || num % 2 === 0 && num % 10 === 7 || num % 2 === 0 && num % 10 === 9)) {\n      result.push(num);\n    }\n  });\n  return result.length;\n};\n\nconsole.log(specialFilter([15, -73, 14, -15])); // 1\nconsole.log(specialFilter([33, -2, -3, 45, 21, 109])); // 2<|endoftext|>"}
{"task_id": "JavaScript/147", "prompt": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n", "canonical_solution": "  let y = []\n  for (let i = 1; i <= n; i++) {\n    y.push(i * i - i + 1)\n  }\n  let u = 0\n  for (let i = 0; i < n - 2; i++) {\n    for (let j = i + 1; j < n - 1; j++) {\n      for (let k = j + 1; k < n; k++) {\n        if ((y[i] + y[j] + y[k]) % 3 == 0) { u++ }\n      }\n    }\n  }\n  return u\n}\n\n", "test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n  console.assert(getMaxTriples(6) === 4)\n  console.assert(getMaxTriples(10) === 36)\n  console.assert(getMaxTriples(100) === 53361)\n}\n\ntestGetMaxTriples()\n", "declaration": "\nconst getMaxTriples = (n) => {\n", "example_test": "const testGetMaxTriples = () => {\n  console.assert(getMaxTriples(5) === 1)\n}\ntestGetMaxTriples()\n", "entry_point": "getMaxTrpiles", "gc": "/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n  */\nconst getMaxTrpiles = (n) => {\n  let triples = []\n  for (let i = 1; i <= n; i++) {\n    triples.push([i, i, i - i + 1])\n  }\n  let triplesArr = triples\n  let output = 0\n  for (let i = 0; i < triplesArr.length; i++) {\n    for (let j = i + 1; j < triplesArr.length; j++) {\n      for (let k = j + 1; k < triplesArr.length; k++) {\n        if (triplesArr[i][0] + triplesArr[j][1] + triplesArr[k][2] % 3 === 0) {\n          output += 1\n        }\n      }\n    }\n  }\n  return output\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 1\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n*/\nconst getMaxTriples = (n) => {\n  let triples = []\n  for (let i = 1; i <= n; i++) {\n    triples.push([i, i, i - i + 1])\n  }\n  let triplesArr = triples\n  let output = 0\n  for (let i = 0; i < triplesArr.length; i++) {\n    for (let j = i + 1; j < triplesArr.length; j++) {\n      for (let k = j + 1; k < triplesArr.length; k++) {\n        if (triplesArr[i][0] + triplesArr[j][1] + triplesArr[k][2] % 3 === 0) {\n          output += 1\n        }\n      }\n    }\n  }\n  return output\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The other valid triple is (3, 7, 13).\n*/\nconst getMaxTriples2 = (n) => {\n  let triples = []\n  for (let i = 1; i <= n; i++) {\n    triples.push([i, i, i - i + 1])\n  }\n  let triplesArr = triples\n  let output = 0\n  for (let i = 0; i < triplesArr.length; i++) {\n    for (let j = i + 1; j < triplesArr.length; j++) {\n      for (let k = j + 1; k < triplesArr.length; k++) {\n        if (triplesArr[i][0] + triplesArr[j][1] + triplesArr[k][2] % 3 === 0) {\n          output += 1\n        }\n      }\n    }\n  }\n  return output\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples (a[i], a[j], a[k]) of a where i < j < k, \n  and a[i] + a[j] + a[k] is a multiple of 3.\n\n  Example :\n      Input: n = 5\n      Output: 2\n      Explanation: \n      a = [1, 3, 7, 13, 21]\n      The only valid triple is (1, 7, 13).\n      The other valid triple is (3, 7, 13).\n*/\nconst getMaxTriples3 = (n) => {\n  let triples = []\n  for (let i = 1; i <= n; i++) {\n    triples.push([i, i, i - i + 1])\n  }\n  let triplesArr = triples\n  let output = 0\n  for (let i = 0; i < triplesArr.length; i++) {\n    for (let j = i + 1; j < triplesArr.length; j++) {\n      for (let k = j + 1; k < triplesArr.length; k++) {\n        if (triplesArr[i][0] + triplesArr[j][1] + triplesArr[k][2] % 3 === 0) {\n          output += 1\n        }\n      }\n    }\n  }\n  return output\n}\n\n/*\n  You are given a positive integer n. You have to create an integer array a of length n.\n      For each i (1 ≤ i ≤ n), the value of a[i] = i * i - i + 1.\n      Return the number of triples ("}
{"task_id": "JavaScript/148", "prompt": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n", "canonical_solution": "  let y = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune']\n  let u = []\n  let lo = -1\n  let hi = -1\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet1) { lo = i }\n  }\n  for (let i = 0; i < 8; i++) {\n    if (y[i] == planet2) { hi = i }\n  }\n  if (lo == -1 || hi == -1 || lo == hi) { return [] }\n  if (lo > hi) {\n    let tmp = lo;\n    lo = hi;\n    hi = tmp;\n  }\n  for (let i = lo + 1; i < hi; i++) {\n    u.push(y[i])\n  }\n  return u\n}\n\n", "test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n  console.assert(\n    JSON.stringify(bf('Neptune', 'Venus')) ===\n    JSON.stringify(['Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus'])\n  )\n  console.assert(JSON.stringify(bf('Earth', 'Earth')) === JSON.stringify([]))\n  console.assert(JSON.stringify(bf('Mars', 'Earth')) === JSON.stringify([]))\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Makemake')) === JSON.stringify([])\n  )\n}\n\ntestBf()\n", "declaration": "\nconst bf = (planet1, planet2) => {\n", "example_test": "const testBf = () => {\n  console.assert(\n    JSON.stringify(bf('Jupiter', 'Neptune')) ===\n    JSON.stringify(['Saturn', 'Uranus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Earth', 'Mercury')) === JSON.stringify(['Venus'])\n  )\n  console.assert(\n    JSON.stringify(bf('Mercury', 'Uranus')) ===\n    JSON.stringify(['Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn'])\n  )\n}\ntestBf()\n", "entry_point": "bf", "gc": "/* There are eight planets in our solar system: the closerst to the Sun\n  is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\n  Uranus, Neptune.\n  Write a function that takes two planet names as strings planet1 and planet2.\n  The function should return a tuple containing all planets whose orbits are\n  located between the orbit of planet1 and the orbit of planet2, sorted by\n  the proximity to the sun.\n  The function should return an empty tuple if planet1 or planet2\n  are not correct planet names.\n  Examples\n  bf(\"Jupiter\", \"Neptune\") ==> (\"Saturn\", \"Uranus\")\n  bf(\"Earth\", \"Mercury\") ==> (\"Venus\")\n  bf(\"Mercury\", \"Uranus\") ==> (\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")\n  */\nconst bf = (planet1, planet2) => {\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This method has to return the distance in kilometers.\n  // TODO: This"}
{"task_id": "JavaScript/149", "prompt": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n", "canonical_solution": "  let p = []\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i].length % 2 == 0) {\n      p.push(lst[i])\n    }\n  }\n  for (let j = p.length - 2; j >= 0; j--) {\n    for (let k = 0; k <= j; k++) {\n      let f = 0\n      if (p[k].length > p[k + 1].length) { f = 1 }\n      if (p[k].length == p[k + 1].length) {\n        let r = p[k].length\n        for (let l = 0; l < r; l++) {\n          if (p[k][l].charCodeAt() > p[k + 1][l].charCodeAt()) {\n            f = 1;\n            break;\n          }\n          if (p[k][l].charCodeAt() < p[k + 1][l].charCodeAt()) {\n            break;\n          }\n        }\n      }\n      if (f == 1) {\n        let tmp = p[k]\n        p[k] = p[k + 1]\n        p[k + 1] = tmp\n      }\n    }\n  }\n  return p\n}\n\n", "test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['school', 'AI', 'asdf', 'b'])) ===\n    JSON.stringify(['AI', 'asdf', 'school'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'b', 'c', 'a'])) === JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['d', 'dcba', 'abcd', 'a'])) ===\n    JSON.stringify(['abcd', 'dcba'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['AI', 'ai', 'au'])) ===\n    JSON.stringify(['AI', 'ai', 'au'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['a', 'b', 'b', 'c', 'c', 'a'])) ===\n    JSON.stringify([])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['aaaa', 'bbbb', 'dd', 'cc'])) ===\n    JSON.stringify(['cc', 'dd', 'aaaa', 'bbbb'])\n  )\n}\n\ntestSortedListSum()\n", "declaration": "\nconst sortedListSum = (lst) => {\n", "example_test": "const testSortedListSum = () => {\n  console.assert(\n    JSON.stringify(sortedListSum(['aa', 'a', 'aaa'])) === JSON.stringify(['aa'])\n  )\n  console.assert(\n    JSON.stringify(sortedListSum(['ab', 'a', 'aaa', 'cd'])) ===\n    JSON.stringify(['ab', 'cd'])\n  )\n}\ntestSortedListSum()\n", "entry_point": "sortedListSum", "gc": "/*Write a function that accepts a list of strings as a parameter,\n  deletes the strings that have odd lengths from it,\n  and returns the resulted list with a sorted order,\n  The list is always a list of strings and never an array of numbers,\n  and it may contain duplicates.\n  The order of the list should be ascending by length of each word, and you\n  should return the list sorted by that rule.\n  If two words have the same length, sort the list alphabetically.\n  The function should return a list of strings in sorted order.\n  You may assume that all words will have the same length.\n  For example:\n  assert list_sort([\"aa\", \"a\", \"aaa\"]) => [\"aa\"]\n  assert list_sort([\"ab\", \"a\", \"aaa\", \"cd\"]) => [\"ab\", \"cd\"]\n  */\nconst sortedListSum = (lst) => {\n  const len = lst.length\n  const res = []\n\n  for (let i = 0; i < len; i++) {\n    let sum = 0\n\n    for (let j = 0; j < len; j++) {\n      if (i!= j) {\n        sum += lst[j].length\n      }\n    }\n\n    res.push(sum)\n  }\n\n  return res.sort((a, b) => a - b).map(l => l.toString())\n}\n\nconst test = [\n  [\"aa\", \"a\", \"aaa\"],\n  [\"ab\", \"a\", \"aaa\", \"cd\"],\n  [\"ab\", \"a\", \"aa\", \"cc\"],\n  [\"ab\", \"a\", \"aaa\", \"ab\"],\n  [\"ab\", \"a\", \"aaa\", \"bb\"],\n  [\"ab\", \"a\", \"aaa\", \"cc\"],\n  [\"ab\", \"a\", \"aaa\", \"dd\"],\n  [\"ab\", \"a\", \"aa\", \"aa\"],\n  [\"ab\", \"a\", \"aa\", \"ab\"],\n  [\"ab\", \"a\", \"aa\", \"cc\"],\n  [\"ab\", \"a\", \"aa\", \"dd\"],\n  [\"ab\", \"a\", \"ab\", \"ab\"],\n  [\"ab\", \"a\", \"ab\", \"cc\"],\n  [\"ab\", \"a\", \"ab\", \"dd\"],\n  [\"ab\", \"a\", \"cc\", \"cc\"],\n  [\"ab\", \"a\", \"cc\", \"dd\"],\n  [\"ab\", \"a\", \"dd\", \"dd\"],\n  [\"ab\", \"a\", \"ee\", \"ee\"],\n  [\"ab\", \"a\", \"ee\", \"ff\"],\n  [\"ab\", \"a\", \"ff\", \"ff\"],\n  [\"ab\", \"a\", \"ff\", \"kk\"],\n  [\"ab\", \"a\", \"gg\", \"gg\"],\n  [\"ab\", \"a\", \"gg\", \"kk\"],\n  [\"ab\", \"a\", \"kk\", \"kk\"],\n  [\"ab\", \"a\", \"kk\", \"ll\"],\n  [\"ab\", \"a\", \"ll\", \"ll\"],\n  [\"ab\", \"a\", \"ll\", \"nn\"],\n  [\"ab\", \"a\", \"nn\", \"nn\"],\n  [\"ab\", \"a\", \"nn\", \"pp\"],\n  [\"ab\", \"a\", \"pp\", \"qq\"],\n  [\"ab\", \"a\", \"qq\", \"qq\"],\n  [\"ab\", \"a\", \"qq\", \"rr\"],\n  [\"ab\", \"a\", \"rr\", \"rr\"],\n  [\"ab\", \"a\", \"rr\", \"ss\"],\n  [\"ab\", \"a\", \"ss\", \"ss\"],\n  [\"ab\", \"a\", \"ss\", \"tt\"],\n  [\"ab\", \"a\", \"tt\", \"tt\"],\n  [\"ab\", \"a\", \"tt\", \"uu\"],\n  [\"ab\", \"a\", \"uu\", \"uu\"],\n  [\"ab\", \"a\", \"uu\", \"vv\"],\n  [\"ab\", \"a\", \"vv\", \"vv\"],\n  [\"ab\", \"a\", \"vv\", \"ww\"],\n  [\"ab\", \"a\", \"ww\", \"ww\"],\n  [\"ab\", \"a\", \"ww\", \"yy\"],\n  [\"ab\", \"a\", \"yy\", \"yy\"],\n  [\"ab\", \"a\", \"yy\", \"zz\"],\n  [\"ab\", \"a\", \"zz\", \"zz\"],\n  [\"ab\", \"a\", \"zz\", \"zzz\"],\n  [\"ab\", \"a\", \"zzz\", \"zzz\"],\n  [\"ab\", \"a\", \"zzz\", \"zzzz\"],\n  [\"ab\", \"a\", \"zzzz\", \"zzzz\"],\n  [\"ab\", \"a\", \"zzzz\", \"zzzzz\"],\n  [\"ab\", \"a\", \"zzzzz\", \"zzzzz\"],\n  [\"ab\", \"a\", \"zzzzz\", \"zzzzzz\"],\n  [\"ab\", \"a\", \"zzzzzz\", \"zzzzzz\"],\n  [\"ab\", \"a\", \"zzzzzz\", \"zzzzzzz\"],\n  [\"ab\", \"a\", \"zzzzzzz\", \"zzzzzzz\"],\n  [\"ab\", \"a\", \"zzzzzzz\", \"zzzzzzzz\"],\n  [\"ab\", \"a\", \"zzzzzzzz\", \"zzzzzzzzz\"],\n  [\"ab\", \"a\", \"zzzzzzzzz\", \"zzzzzzzzz\"]\n]\n\ntest.forEach(t => {\n  console.log(\"test:\", t)\n  console.log(\"expected:\", sortedListSum(t))\n  console.log(\"result:\", sortedListSum(t.filter(l => l.length % 2 === 0)))\n})\n<|endoftext|>"}
{"task_id": "JavaScript/150", "prompt": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n", "canonical_solution": "  let len = n\n  if (len == 1 || len == 0) { return y }\n  for (let i = 2; i * i <= len; i++) {\n    if (len % i == 0) { return y }\n  }\n  return x\n}\n\n", "test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n  console.assert(xOrY(3, 33, 5212) === 33)\n  console.assert(xOrY(1259, 3, 52) === 3)\n  console.assert(xOrY(7919, -1, 12) === -1)\n  console.assert(xOrY(3609, 1245, 583) === 583)\n  console.assert(xOrY(91, 56, 129) === 129)\n  console.assert(xOrY(6, 34, 1234) === 1234)\n  console.assert(xOrY(1, 2, 0) === 0)\n  console.assert(xOrY(2, 2, 0) === 2)\n}\n\ntestXOrY()\n", "declaration": "\nconst xOrY = (n, x, y) => {\n", "example_test": "const testXOrY = () => {\n  console.assert(xOrY(7, 34, 12) === 34)\n  console.assert(xOrY(15, 8, 5) === 5)\n}\ntestXOrY()\n", "entry_point": "xOrY", "gc": "/*A simple program which should return the value of x if n is \n  a prime number and should return the value of y otherwise.\n\n  Examples:\n  for xOrY(7, 34, 12) == 34\n  for xOrY(15, 8, 5) == 5\n  \n  */\nconst xOrY = (n, x, y) => {\n  let xOrY = (n, x, y) => {\n    if (n % 2 === 0) {\n      return xOrY(n / 2, x * 2, y * 2)\n    } else {\n      return xOrY(n / 2, x, y * 2)\n    }\n  }\n  return xOrY(n, x, y)\n}\n\nconst main = () => {\n  const result = xOrY(6, 2, 5)\n  console.log(result)\n}\n\nmain()\n<|endoftext|>"}
{"task_id": "JavaScript/151", "prompt": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n", "canonical_solution": "  let p = 0\n  for (let i = 0; i < lst.length; i++) {\n    if (lst[i] % 2 == 1 && lst[i] > 0) {\n      p += lst[i] * lst[i]\n    }\n  }\n  return p\n}\n\n", "test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([]) === 0)\n  console.assert(doubleTheDifference([5, 4]) === 25)\n  console.assert(doubleTheDifference([0.1, 0.2, 0.3]) === 0)\n  console.assert(doubleTheDifference([-10, -20, -30]) === 0)\n  console.assert(doubleTheDifference([-1, -2, 8]) === 0)\n  console.assert(doubleTheDifference([0.2, 3, 5]) === 34)\n  let lst = []\n  let odd_sum = 0\n  for (let i = -99; i < 100; i += 2) {\n    if (i % 2 != 0 && i > 0) { odd_sum += i * i }\n    lst.push(i)\n  }\n  console.assert(doubleTheDifference(lst) === odd_sum)\n}\n", "declaration": "\nconst doubleTheDifference = (lst) => {\n", "example_test": "const testDoubleTheDifference = () => {\n  console.assert(doubleTheDifference([1,3,2,0]) === 10)\n  console.assert(doubleTheDifference([-1,-2,0]) === 0)\n  console.assert(doubleTheDifference([9,-2]) === 81)\n  console.assert(doubleTheDifference([0]) === 0)\n}\ntestDoubleTheDifference()\n", "entry_point": "doublehTeDifference", "gc": "/* Given a list of numbers, return the sum of squares of the numbers\n  in the list that are odd. Ignore numbers that are negative or not integers.\n  doublehTeDifference([1, 3, 2, 0]) == 1 + 9 + 0 + 0 = 10\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 81\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifference = (lst) => {\n  let sum = 0\n  lst.forEach((elm) => {\n    if (elm < 0) return\n    if (elm % 2!== 0) sum += elm * elm\n  })\n  return sum\n}\n\n/* Given a list of numbers, return the sum of the even numbers in the list.\n  doublehTeDifference([1, 3, 2, 0]) == 3\n  doublehTeDifference([-1, -2, 0]) == 0\n  doublehTeDifference([9, -2]) == 9\n  doublehTeDifference([0]) == 0\n  If the input list is empty, return 0.\n  */\nconst doublehTeDifferenceEvens = (lst) => {\n  let sum = 0\n  lst.forEach((elm) => {\n    if (elm < 0) return\n    if (elm % 2 === 0) sum += elm\n  })\n  return sum\n}\n\n// This function tests the functions.\ndescribe('Testing the functions', () => {\n  it('doublehTeDifference([1, 3, 2, 0]) == 10', () => {\n    expect(doublehTeDifference([1, 3, 2, 0])).toEqual(10)\n  })\n  it('doublehTeDifference([-1, -2, 0]) == 0', () => {\n    expect(doublehTeDifference([-1, -2, 0])).toEqual(0)\n  })\n  it('doublehTeDifference([9, -2]) == 81', () => {\n    expect(doublehTeDifference([9, -2])).toEqual(81)\n  })\n  it('doublehTeDifference([0]) == 0', () => {\n    expect(doublehTeDifference([0])).toEqual(0)\n  })\n  it('doublehTeDifferenceEvens([1, 3, 2, 0]) == 3', () => {\n    expect(doublehTeDifferenceEvens([1, 3, 2, 0])).toEqual(3)\n  })\n})\n<|endoftext|>"}
{"task_id": "JavaScript/152", "prompt": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n", "canonical_solution": "  for (let i = 0; i < guess.length; i++) {\n    game[i] -= guess[i]\n if (game[i]<0)\n game[i]=-game[i];  }\n  return game\n}\n\n", "test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0])) ===\n    JSON.stringify([0, 0, 0, 0, 0, 0])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3], [-1, -2, -3])) ===\n    JSON.stringify([2, 4, 6])\n  )\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 5], [-1, 2, 3, 4])) ===\n    JSON.stringify([2, 0, 0, 1])\n  )\n}\n\ntestCompare()\n", "declaration": "\nconst compare = (game, guess) => {\n", "example_test": "const testCompare = () => {\n  console.assert(\n    JSON.stringify(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2])) ===\n    JSON.stringify([0, 0, 0, 0, 3, 3])\n  )\n  console.assert(\n    JSON.stringify(compare([0,5,0,0,0,4],[4,1,1,0,0,-2])) ===\n    JSON.stringify([4,4,1,0,0,6])\n  )\n}\ntestCompare()\n", "entry_point": "compare", "gc": "/*I think we all remember that feeling when the result of some long-awaited\n  event is finally known. The feelings and thoughts you have at that moment are\n  definitely worth noting down and comparing.\n  Your task is to determine if a person correctly guessed the results of a number of matches.\n  You are given two arrays of scores and guesses of equal length, where each index shows a match. \n  Return an array of the same length denoting how far off each guess was. If they have guessed correctly,\n  the value is 0, and if not, the value is the absolute difference between the guess and the score.\n  \n  \n  example:\n\n  compare([1,2,3,4,5,1],[1,2,3,4,2,-2]) -> [0,0,0,0,3,3]\n  compare([0,5,0,0,0,4],[4,1,1,0,0,-2]) -> [4,4,1,0,0,6]\n  */\nconst compare = (game, guess) => {\n  //TODO: this is a pretty naive solution for now, but we can do better\n  const [gameScores, gameGuesses] = game;\n  const [guessScores, guessGuesses] = guess;\n  const isGuessCorrect = (gameGuesses.indexOf(guessGuesses[0]) > -1);\n  return [\n   ...gameScores.filter(x => gameGuesses.indexOf(x) > -1),\n   ...guessScores.filter(x => gameGuesses.indexOf(x) > -1),\n   ...(isGuessCorrect? 0 : Math.abs(guessScores[0] - gameScores[0]))\n  ];\n};\n\n/*\n  Given two sets of values, sort them by the first value. Return the sorted set of values.\n  example:\n  sort([1,2,3,4,5]) -> [1,2,3,4,5]\n  */\nconst sort = (values) => values.sort((a, b) => a - b);\n\n/*\n  Given two sets of values, return the intersection of the two sets.\n  example:\n  intersection([1,2,3,4,5],[1,2,3,4,6]) -> [1,2,3,4,6]\n  */\nconst intersection = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return values3;\n};\n\n/*\n  Given two sets of values, return the union of the two sets.\n  example:\n  union([1,2,3,4,5],[1,2,3,4,6]) -> [1,2,3,4,5,6]\n  */\nconst union = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return values3;\n};\n\n/*\n  Given two sets of values, return the difference of the two sets.\n  example:\n  difference([1,2,3,4,5],[1,2,3,4,6]) -> [5]\n  */\nconst difference = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return values3;\n};\n\n/*\n  Given two sets of values, return the symmetric difference of the two sets.\n  example:\n  symmetricDifference([1,2,3,4,5],[1,2,3,4,6]) -> [5,6]\n  */\nconst symmetricDifference = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return [...values3,...values3];\n};\n\n/*\n  Given two sets of values, return the set of values that are not in both sets.\n  example:\n  difference([1,2,3,4,5],[1,2,3,4,6]) -> [5]\n  */\nconst differenceNot = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return values3;\n};\n\n/*\n  Given two sets of values, return the set of values that are not in either set.\n  example:\n  differenceNot([1,2,3,4,5],[1,2,3,4,6]) -> [5,6]\n  */\nconst differenceNotNot = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return [...values3,...values3];\n};\n\n/*\n  Given two sets of values, return the set of values that are in both sets.\n  example:\n  intersection([1,2,3,4,5],[1,2,3,4,6]) -> [1,2,3,4,5,6]\n  */\nconst intersectionNot = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return values3;\n};\n\n/*\n  Given two sets of values, return the set of values that are in either set.\n  example:\n  intersection([1,2,3,4,5],[1,2,3,4,6]) -> [1,2,3,4,5,6]\n  */\nconst intersectionNotNot = (values, values2) => {\n  const [values1, values2] = [values, values2];\n  const [values3] = sort([...values1,...values2]);\n  return values3;\n};\n\n/*\n  Given two sets of values, return the set of values that are in both sets,\n  and also appear in one of the values of the second set.\n  example:\n  intersectionNotNot([1,2,3,4,5],[1,2,3,4,6]) -> [1,2,3,4,5,6]\n  */\n"}
{"task_id": "JavaScript/153", "prompt": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n", "canonical_solution": "  let u = 0\n  let s = -Infinity\n  for (let i = extensions.length - 1; i >= 0; i--) {\n    let y = 0\n    for (let j = 0; j < extensions[i].length; j++) {\n      let k = extensions[i][j].charCodeAt()\n      if (k >= 65 && k <= 90) { y += 1 }\n      if (k >= 97 && k <= 122) { y -= 1 }\n    }\n    if (y >= s) {\n      s = y;\n      u = i;\n    }\n  }\n  return class_name + '.' + extensions[u]\n}\n\n", "test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('Watashi', ['tEN', 'niNE', 'eIGHt8OKe']) ===\n    'Watashi.eIGHt8OKe'\n  )\n  console.assert(\n    strongestExtension('Boku123', [\n      'nani',\n      'NazeDa',\n      'YEs.WeCaNe',\n      '32145tggg',\n    ]) === 'Boku123.YEs.WeCaNe'\n  )\n  console.assert(\n    strongestExtension('__YESIMHERE', [\n      't',\n      'eMptY',\n      'nothing',\n      'zeR00',\n      'NuLl__',\n      '123NoooneB321',\n    ]) === '__YESIMHERE.NuLl__'\n  )\n  console.assert(\n    strongestExtension('K', ['Ta', 'TAR', 't234An', 'cosSo']) === 'K.TAR'\n  )\n  console.assert(\n    strongestExtension('__HAHA', ['Tab', '123', '781345', '-_-']) ===\n    '__HAHA.123'\n  )\n  console.assert(\n    strongestExtension('YameRore', [\n      'HhAas',\n      'okIWILL123',\n      'WorkOut',\n      'Fails',\n      '-_-',\n    ]) === 'YameRore.okIWILL123'\n  )\n  console.assert(\n    strongestExtension('finNNalLLly', ['Die', 'NowW', 'Wow', 'WoW']) ===\n    'finNNalLLly.WoW'\n  )\n  console.assert(strongestExtension('_', ['Bb', '91245']) === '_.Bb')\n  console.assert(strongestExtension('Sp', ['671235', 'Bb']) === 'Sp.671235')\n}\n\ntestStrongestExtension()\n", "declaration": "\nconst strongestExtension = (class_name, extensions) => {\n", "example_test": "const testStrongestExtension = () => {\n  console.assert(\n    strongestExtension('my_class', ['AA', 'Be', 'CC']) ===\n    'my_class.AA'\n  )\n}\ntestStrongestExtension()\n", "entry_point": "strongestExtension", "gc": "/*You will be given the name of a class (a string) and a list of extensions.\n  The extensions are to be used to load additional classes to the class. The\n  strength of the extension is as follows: Let CAP be the number of the uppercase\n  letters in the extension's name, and let SM be the number of lowercase letters\n  in the extension's name, the strength is given by the fraction CAP - SM.\n  You should find the strongest extension and return a string in this\n  format: ClassName.StrongestExtensionName.\n  If there are two or more extensions with the same strength, you should\n  choose the one that comes first in the list.\n  For example, if you are given \"Slices\" as the class and a list of the\n  extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n  return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\n  (its strength is -1).\n  Example:\n  for strongestExtension('my_class', ['AA', 'Be', 'CC']) =='my_class.AA'\n  */\nconst strongestExtension = (class_name, extensions) => {\n  const name = class_name.toLowerCase()\n  const strength = 0\n  const max = extensions.length\n\n  for (let i = 0; i < max; i++) {\n    const extension = extensions[i].toLowerCase()\n    const cap = extension.replace(/[a-z]/g, (c) => {\n      return c.toUpperCase()\n    })\n    const sm = extension.replace(/[A-Z]/g, (c) => {\n      return c.toLowerCase()\n    })\n\n    if (cap - sm > strength) {\n      strength = cap - sm\n      name += '.' + extension\n    }\n  }\n\n  return name\n}\n\nmodule.exports = strongestExtension\n<|endoftext|>"}
{"task_id": "JavaScript/154", "prompt": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n", "canonical_solution": "  let l = b.length\n  let pat = b + b\n  for (let i = 0; i < a.length - l + 1; i++) {\n    for (let j = 0; j < l + 1; j++) {\n      let y = 1\n      for (let k = 0; k < l; k++) {\n        if (a[i + k] != pat[j + k]) { y = 0 }\n      }\n      if (y == 1) {\n        return true\n      }\n    }\n  }\n  return false\n}\n\n", "test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('xyzw', 'xyw') === false)\n  console.assert(cycpatternCheck('yello', 'ell') === true)\n  console.assert(cycpatternCheck('whattup', 'ptut') === false)\n  console.assert(cycpatternCheck('efef', 'fee') === true)\n  console.assert(cycpatternCheck('abab', 'aabb') === false)\n  console.assert(cycpatternCheck('winemtt', 'tinem') === true)\n}\n\ntestCycpatternCheck()\n", "declaration": "\nconst cycpatternCheck = (a, b) => {\n", "example_test": "const testCycpatternCheck = () => {\n  console.assert(cycpatternCheck('abcd', 'abd') === false)\n  console.assert(cycpatternCheck('hello', 'ell') === true)\n  console.assert(cycpatternCheck('whassup', 'psus') === false)\n  console.assert(cycpatternCheck('abab', 'baa') === true)\n  console.assert(cycpatternCheck('efef', 'eeff') === false)\n  console.assert(cycpatternCheck('himenss', 'simen') === true)\n}\ntestCycpatternCheck()\n", "entry_point": "ccypatternChekc", "gc": "/*You are given 2 words. You need to return true if the second word or any of its rotations is a substring in the first word\n  ccypatternChekc(\"abcd\",\"abd\") => false\n  ccypatternChekc(\"hello\",\"ell\") => true\n  ccypatternChekc(\"whassup\",\"psus\") => false\n  ccypatternChekc(\"abab\",\"baa\") => true\n  ccypatternChekc(\"efef\",\"eeff\") => false\n  ccypatternChekc(\"himenss\",\"simen\") => true\n  */\nconst ccypatternChekc = (a, b) => {\n  let r = a.split('');\n  let w = b.split('');\n  for(let i=0;i<r.length;i++) {\n    if(r[i] === w[0]) {\n      for(let j=1;j<w.length;j++) {\n        if(w[j-1] === w[j] && r[i+j-1] === w[j]) {\n          return true;\n        }\n      }\n    }\n  }\n  return false;\n};\n<|endoftext|>"}
{"task_id": "JavaScript/155", "prompt": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n", "canonical_solution": "  let o = 0\n  let e = 0\n  if (num < 0) { num = -num }\n  while (num > 0) {\n    if (num % 2 == 0) { e++ }\n    else { o++ }\n    num = (num - num % 10) / 10\n  }\n  return (e, o)\n}\n\n", "test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(7)) === JSON.stringify((0, 1)))\n  console.assert(JSON.stringify(evenOddCount(-78)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(3452)) === JSON.stringify((2, 2)))\n  console.assert(\n    JSON.stringify(evenOddCount(346211)) === JSON.stringify((3, 3))\n  )\n  console.assert(\n    JSON.stringify(evenOddCount(-345821)) === JSON.stringify((3, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(-2)) === JSON.stringify((1, 0)))\n  console.assert(\n    JSON.stringify(evenOddCount(-45347)) === JSON.stringify((2, 3))\n  )\n  console.assert(JSON.stringify(evenOddCount(0)) === JSON.stringify((1, 0)))\n}\n\ntestEvenOddCount()\n", "declaration": "\nconst evenOddCount = (num) => {\n", "example_test": "const testEvenOddCount = () => {\n  console.assert(JSON.stringify(evenOddCount(-12)) === JSON.stringify((1, 1)))\n  console.assert(JSON.stringify(evenOddCount(123)) === JSON.stringify((1, 2)))\n}\ntestEvenOddCount()\n", "entry_point": "evenOddCount", "gc": "/*Given an integer. return a tuple that has the number of even and odd digits respectively.\n\n   Example:\n      evenOddCount(-12) ==> (1, 1)\n      evenOddCount(123) ==> (1, 2)\n  */\nconst evenOddCount = (num) => {\n    let even = 0, odd = 0;\n    for (let i = 1; i <= num; i += 2) {\n        if (num % i === 0) {\n            even += 1;\n        } else {\n            odd += 1;\n        }\n    }\n    return [even, odd];\n};\n\nconsole.log(evenOddCount(123));\nconsole.log(evenOddCount(456));\nconsole.log(evenOddCount(9));\n<|endoftext|>"}
{"task_id": "JavaScript/156", "prompt": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n", "canonical_solution": "  let num = [1, 4, 5, 9, 10, 40, 50, 90, 100, 400, 500, 900, 1000]\n  let sym = ['i', 'iv', 'v', 'ix', 'x', 'xl', 'l', 'xc', 'c', 'cd', 'd', 'cm', 'm']\n  let i = 12\n  let res = ''\n  while (number) {\n    let div = (number - number % num[i]) / num[i]\n    number = number % num[i]\n    while (div) {\n      res += sym[i]\n      div -= 1\n    }\n    i -= 1\n  }\n  return res\n}\n\n", "test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(251) === 'ccli')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n  console.assert(intToMiniRoman(500) === 'd')\n  console.assert(intToMiniRoman(1) === 'i')\n  console.assert(intToMiniRoman(4) === 'iv')\n  console.assert(intToMiniRoman(43) === 'xliii')\n  console.assert(intToMiniRoman(90) === 'xc')\n  console.assert(intToMiniRoman(94) === 'xciv')\n  console.assert(intToMiniRoman(532) === 'dxxxii')\n  console.assert(intToMiniRoman(900) === 'cm')\n  console.assert(intToMiniRoman(994) === 'cmxciv')\n  console.assert(intToMiniRoman(1000) === 'm')\n}\n\ntestIntToMiniRoman()\n", "declaration": "\nconst intToMiniRoman = (number) => {\n", "example_test": "const testIntToMiniRoman = () => {\n  console.assert(intToMiniRoman(19) === 'xix')\n  console.assert(intToMiniRoman(152) === 'clii')\n  console.assert(intToMiniRoman(426) === 'cdxxvi')\n}\ntestIntToMiniRoman()\n", "entry_point": "intToMinRioman", "gc": "/*\n  Given a positive integer, obtain its roman numeral equivalent as a string,\n  and return it in lowercase.\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToMinRioman(19) == 'xix'\n  >>> intToMinRioman(152) == 'clii'\n  >>> intToMinRioman(426) == 'cdxxvi'\n  */\nconst intToMinRioman = (number) => {\n  const intToRoman = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n  }\n\n  let num = Math.abs(number)\n  let str = ''\n\n  while (num) {\n    if (num >= 4) {\n      str += intToRoman[num] + intToRoman[num - 4]\n    } else {\n      str += intToRoman[num]\n    }\n    num = Math.floor(num / 10)\n  }\n\n  return str.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its roman numeral as a string,\n  and return it in lowercase.\n\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const intToRoman = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n  }\n\n  let num = Math.abs(number)\n  let str = ''\n\n  while (num) {\n    if (num >= 4) {\n      str += intToRoman[num] + intToRoman[num - 4]\n    } else {\n      str += intToRoman[num]\n    }\n    num = Math.floor(num / 10)\n  }\n\n  return str.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its roman numeral as a string,\n  and return it in lowercase.\n\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const intToRoman = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n  }\n\n  let num = Math.abs(number)\n  let str = ''\n\n  while (num) {\n    if (num >= 4) {\n      str += intToRoman[num] + intToRoman[num - 4]\n    } else {\n      str += intToRoman[num]\n    }\n    num = Math.floor(num / 10)\n  }\n\n  return str.toLowerCase()\n}\n\n/*\n  Given a positive integer, return its roman numeral as a string,\n  and return it in lowercase.\n\n  Restrictions: 1 <= num <= 1000\n\n  Examples:\n  >>> intToRoman(19) == 'xix'\n  >>> intToRoman(152) == 'clii'\n  >>> intToRoman(426) == 'cdxxvi'\n  */\nconst intToRoman = (number) => {\n  const intToRoman = {\n    1: 'I',\n    4: 'IV',\n    5: 'V',\n    9: 'IX',\n    10: 'X',\n    40: 'XL',\n    50: 'L',\n    90: 'XC',\n    100: 'C',\n    400: 'CD',\n    500: 'D',\n    900: 'CM',\n  }\n\n  let num = Math.abs(number)\n  let str = ''\n\n  while (num) {\n    if (num >= 4) {\n      str += intToRoman[num] + intToRoman[num - 4]\n    } else {\n      str += intToRoman[num]\n    }\n    num = Math.floor(num / 10)\n  }\n\n  return str.toLowerCase()\n}\n<|endoftext|>"}
{"task_id": "JavaScript/157", "prompt": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n", "canonical_solution": "  return (a * a + b * b == c * c || a * a == b * b + c * c || b * b == a * a + c * c)\n}\n\n", "test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n  console.assert(rightAngleTriangle(10, 6, 8) === true)\n  console.assert(rightAngleTriangle(2, 2, 2) === false)\n  console.assert(rightAngleTriangle(7, 24, 25) === true)\n  console.assert(rightAngleTriangle(10, 5, 7) === false)\n  console.assert(rightAngleTriangle(5, 12, 13) === true)\n  console.assert(rightAngleTriangle(15, 8, 17) === true)\n  console.assert(rightAngleTriangle(48, 55, 73) === true)\n  console.assert(rightAngleTriangle(1, 1, 1) === false)\n  console.assert(rightAngleTriangle(2, 2, 10) === false)\n}\n\ntestRightAngleTriangle()\n", "declaration": "\nconst rightAngleTriangle = (a, b, c) => {\n", "example_test": "const testRightAngleTriangle = () => {\n  console.assert(rightAngleTriangle(3, 4, 5) === true)\n  console.assert(rightAngleTriangle(1, 2, 3) === false)\n}\ntestRightAngleTriangle()\n", "entry_point": "rightAngelTriangle", "gc": "/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  rightAngelTriangle(3, 4, 5) == true\n  rightAngelTriangle(1, 2, 3) == false\n  */\nconst rightAngelTriangle = (a, b, c) => {\n  return (a + b <= c) && (b + c <= a) && (a + c <= b);\n};\n\nconst rightAngelTriangle2 = (a, b, c) => {\n  return (a > 0 && b > 0 && c > 0) && (a + b <= c) && (b + c <= a) && (a + c <= b);\n};\n\nconst triangleIsRightAngled = (a, b, c) => {\n  return rightAngelTriangle(a, b, c) && rightAngelTriangle(a, c, b) && rightAngelTriangle(b, c, a);\n};\n\nconst triangleIsRightAngled2 = (a, b, c) => {\n  return rightAngelTriangle2(a, b, c) && rightAngelTriangle2(a, c, b) && rightAngelTriangle2(b, c, a);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing angle\n  (side a and b are missing).\n  Example:\n  missingAngle(3, 4, 5) == 2\n  missingAngle(1, 2, 3) == 0\n  */\nconst missingAngle = (a, b, c) => {\n  const ab = a + b;\n  const ac = a + c;\n  const bc = b + c;\n  return (ab + ac - bc) % (2 * Math.PI);\n};\n\nconst triangleIsRightAngled3 = (a, b, c) => {\n  return rightAngelTriangle(a, b, c) && rightAngelTriangle(a, c, b) && rightAngelTriangle(b, c, a);\n};\n\nconst triangleIsRightAngled4 = (a, b, c) => {\n  return rightAngelTriangle2(a, b, c) && rightAngelTriangle2(a, c, b) && rightAngelTriangle2(b, c, a);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  isRightAngledTriangle(3, 4, 5) == true\n  isRightAngledTriangle(1, 2, 3) == false\n  */\nconst isRightAngledTriangle = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled2(a, b, c) || triangleIsRightAngled3(a, b, c) || triangleIsRightAngled4(a, b, c);\n};\n\nconst isRightAngledTriangle2 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled3(a, b, c) || triangleIsRightAngled4(a, b, c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return the missing angle\n  (side a and b are missing).\n  Example:\n  isRightAngledTriangle(3, 4, 5) == 2\n  isRightAngledTriangle(1, 2, 3) == 0\n  */\nconst isMissingAngle = (a, b, c) => {\n  return missingAngle(a, b, c);\n};\n\nconst isMissingAngle2 = (a, b, c) => {\n  return missingAngle(a, b, c);\n};\n\n/*\n Given the lengths of the three sides of a triangle. Return true if the three\n  sides form a right-angled triangle, false otherwise.\n  A right-angled triangle is a triangle in which one angle is right angle or\n  90 degree.\n  Example:\n  isRightAngledTriangle(3, 4, 5) == true\n  isRightAngledTriangle(1, 2, 3) == false\n  */\nconst isRightAngledTriangle = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled2(a, b, c) || triangleIsRightAngled3(a, b, c);\n};\n\nconst isRightAngledTriangle2 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled3(a, b, c) || triangleIsRightAngled4(a, b, c);\n};\n\nconst isRightAngledTriangle3 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled2(a, b, c) || triangleIsRightAngled3(a, b, c);\n};\n\nconst isRightAngledTriangle4 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled3(a, b, c) || triangleIsRightAngled4(a, b, c);\n};\n\nconst isRightAngledTriangle5 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled2(a, b, c) || triangleIsRightAngled3(a, b, c);\n};\n\nconst isRightAngledTriangle6 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled2(a, b, c) || triangleIsRightAngled3(a, b, c);\n};\n\nconst isRightAngledTriangle7 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled2(a, b, c) || triangleIsRightAngled3(a, b, c);\n};\n\nconst isRightAngledTriangle8 = (a, b, c) => {\n  return triangleIsRightAngled(a, b, c) || triangleIsRightAngled2(a, b, c"}
{"task_id": "JavaScript/158", "prompt": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\" ,\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n", "canonical_solution": "  let s = -1\n  let u = -1\n  if (words.length == 0) { return '' }\n  for (let i = 0; i < words.length; i++) {\n    let p = 0\n    for (let j = 0; j < words[i].length; j++) {\n      let y = 1\n      for (let k = 0; k < j; k++) {\n        if (words[i][j] == words[i][k]) { y = 0 }\n      }\n      if (y == 1) { p++ }\n    }\n    if (p > s || (p == s && words[i] < words[u])) {\n      u = i;\n      s = p;\n    }\n  }\n  return words[u]\n}\n\n", "test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n  console.assert(findMax(['abc', 'cba']) === 'abc')\n  console.assert(\n    findMax(['play', 'this', 'game', 'of', 'footbott']) === 'footbott'\n  )\n  console.assert(findMax(['we', 'are', 'gonna', 'rock']) === 'gonna')\n  console.assert(findMax(['we', 'are', 'a', 'mad', 'nation']) === 'nation')\n  console.assert(findMax(['this', 'is', 'a', 'prrk']) === 'this')\n  console.assert(findMax(['b']) === 'b')\n  console.assert(findMax(['play', 'play', 'play']) === 'play')\n}\n\ntestFindMax()\n", "declaration": "\nconst findMax = (words) => {\n", "example_test": "const testFindMax = () => {\n  console.assert(findMax(['name', 'of', 'string']) === 'string')\n  console.assert(findMax(['name', 'enam', 'game']) === 'enam')\n  console.assert(findMax(['aaaaaaa', 'bb', 'cc']) === 'aaaaaaa')\n}\ntestFindMax()\n", "entry_point": "findMax", "gc": "/*Write a function that accepts a list of strings.\n  The list contains different words. Return the word with maximum number\n  of unique characters. If multiple strings have maximum number of unique\n  characters, return the one which comes first in lexicographical order.\n\n  findMax([\"name\", \"of\", \"string\"]) === \"string\"\n  findMax([\"name\", \"enam\", \"game\"]) === \"enam\"\n  findMax([\"aaaaaaa\", \"bb\",\"cc\"]) === \"\"aaaaaaa\"\n  */\nconst findMax = (words) => {\n  const d = new Map();\n  for (let i = 0; i < words.length; i++) {\n    const word = words[i];\n    if (d.has(word)) {\n      d.set(word, d.get(word) + 1);\n    } else {\n      d.set(word, 1);\n    }\n  }\n  return words[0].length > words[1].length? words[0] : words[1];\n};\n\nconsole.log(findMax([ \"aaaaaaa\", \"bb\",\"cc\"]));\nconsole.log(findMax([ \"name\", \"enam\", \"game\"]));\nconsole.log(findMax([ \"name\", \"of\", \"string\"]));\n<|endoftext|>"}
{"task_id": "JavaScript/159", "prompt": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n", "canonical_solution": "  if (need <= remaining) {\n    return [need + number, remaining - need]\n  }\n  return [remaining + number, 0]\n}\n\n", "test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n  console.assert(JSON.stringify(eat(4, 5, 7)) === JSON.stringify([9, 2]))\n  console.assert(JSON.stringify(eat(4, 5, 1)) === JSON.stringify([5, 0]))\n}\n\ntestEat()\n", "declaration": "\nconst eat = (number, need, remaining) => {\n", "example_test": "const testEat = () => {\n  console.assert(JSON.stringify(eat(5, 6, 10)) === JSON.stringify([11, 4]))\n  console.assert(JSON.stringify(eat(4, 8, 9)) === JSON.stringify([12, 1]))\n  console.assert(JSON.stringify(eat(1, 10, 10)) === JSON.stringify([11, 0]))\n  console.assert(JSON.stringify(eat(2, 11, 5)) === JSON.stringify([7, 0]))\n}\ntestEat()\n", "entry_point": "eat", "gc": "/*\n  You're a hungry rabbit, and you already have eaten a certain number of carrots,\n  but now you need to eat more carrots to complete the day's meals.\n  you should return an array of [ total number of eaten carrots after your meals,\n                                  the number of carrots left after your meals ]\n  if there are not enough remaining carrots, you will eat all remaining carrots, but will still be hungry.\n  \n  Example:\n  * eat(5, 6, 10) -> [11, 4]\n  * eat(4, 8, 9) -> [12, 1]\n  * eat(1, 10, 10) -> [11, 0]\n  * eat(2, 11, 5) -> [7, 0]\n  \n  Variables:\n  @number : integer\n      the number of carrots that you have eaten.\n  @need : integer\n      the number of carrots that you need to eat.\n  @remaining : integer\n      the number of remaining carrots thet exist in stock\n  \n  Constrain:\n  * 0 <= number <= 1000\n  * 0 <= need <= 1000\n  * 0 <= remaining <= 1000\n\n  Have fun :)\n  */\nconst eat = (number, need, remaining) => {\n  let result = [0, remaining];\n  let count = 0;\n  while (count < need) {\n    if (count + number > remaining) {\n      result[1] = remaining;\n      return result;\n    }\n    count += number;\n    result[0] += number;\n  }\n  return result;\n};\n\nconst test = [\n  [4, 6, 8],\n  [4, 8, 9],\n  [1, 10, 10],\n  [2, 11, 5]\n];\n\nfor (let i = 0; i < test.length; i++) {\n  console.log(test[i].map(eat));\n}\n<|endoftext|>"}
{"task_id": "JavaScript/160", "prompt": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n", "canonical_solution": "  while (operator.length > 0) {\n    let y = 0\n    for (let i = operator.length - 1; i >= 0; i--) {\n      if (operator[i] == '**') {\n        let u = operand[i]\n        while (operand[i + 1] > 1) {\n          operand[i + 1]--;\n          operand[i] *= u;\n        }\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '*') {\n        operand[i] *= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '//') {\n        operand[i] = (operand[i] - operand[i] % operand[i + 1]) / operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n    for (let i = 0; i < operator.length; i++) {\n      if (operator[i] == '+') {\n        operand[i] += operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n      else if (operator[i] == '-') {\n        operand[i] -= operand[i + 1]\n        operand.splice(i + 1, 1)\n        operator.splice(i, 1)\n        y = 1;\n        break;\n      }\n    }\n    if (y == 1) { continue }\n  }\n  return operand[0]\n}\n\n", "test": "const testDoAlgebra = () => {\n  console.assert(doAlgebra(['**', '*', '+'], [2, 3, 4, 5]) === 37)\n  console.assert(doAlgebra(['+', '*', '-'], [2, 3, 4, 5]) === 9)\n  console.assert(doAlgebra(['//', '*'], [7, 3, 4]) === 8)\n}\n\ntestDoAlgebra()\n", "declaration": "\nconst doAlgebra = (operator, operand) => {\n", "example_test": "", "entry_point": "doAlgebra", "gc": "/*\n  Given two lists operator, and operand. The first list has basic algebra operations, and \n  the second list is a list of integers. Use the two given lists to build the algebric \n  expression and return the evaluation of this expression.\n\n  The basic algebra operations:\n  Addition ( + ) \n  Subtraction ( - ) \n  Multiplication ( * ) \n  Floor division ( // ) \n  Exponentiation ( ** ) \n\n  Example:\n  operator['+', '*', '-']\n  array = [2, 3, 4, 5]\n  result = 2 + 3 * 4 - 5\n  => result = 9\n\n  Note:\n      The length of operator list is equal to the length of operand list minus one.\n      Operand is a list of of non-negative integers.\n      Operator list has at least one operator, and operand list has at least two operands.\n\n  */\nconst doAlgebra = (operator, operand) => {\n  const operatorLength = operator.length\n  const operandLength = operand.length\n\n  if (operatorLength < 1 || operandLength < 2) {\n    return 'error'\n  }\n\n  const result = [...operator,...operand]\n\n  const operandLast = result.pop()\n  const last = result[operandLength - 1]\n\n  return operatorLength === 1? result.join('') :\n    last === '+'? result.join('+') :\n    last === '-'? result.join('-') :\n    last === '*'? result.join('*') :\n    last === '/'? result.join('/') :\n    last === '**'? result.join('**') :\n    result.join('')\n}\n\nconst testAlgebra = (operator, operand) => {\n  console.log(doAlgebra(operator, operand))\n}\n\ntestAlgebra(['+', '*', '-'], ['2', '3', '4', '5'])\ntestAlgebra(['+', '*', '-'], ['2', '3', '4'])\ntestAlgebra(['+', '*', '-'], ['2', '3'])\ntestAlgebra(['+', '*', '-'], ['2'])\ntestAlgebra(['+', '*', '-'], [])\ntestAlgebra(['+', '*', '-'], ['2', '3', '4', '5'])\n<|endoftext|>"}
{"task_id": "JavaScript/161", "prompt": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n", "canonical_solution": "  let t = 0\n  let p = ''\n  for (let i = 0; i < s.length; i++) {\n    let y = s[i].charCodeAt()\n    if (y >= 65 && y <= 90) {\n      y += 32;\n      t = 1;\n    } else if (y >= 97 && y <= 122) {\n      y -= 32;\n      t = 1;\n    }\n    p += String.fromCharCode(y)\n  }\n  if (t == 1) { return p }\n  let u = ''\n  for (let i = 0; i < p.length; i++) {\n    u += p[p.length - i - 1]\n  }\n  return u\n}\n\n", "test": "const testSolve = () => {\n  console.assert(solve('AsDf') === 'aSdF')\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n  console.assert(solve('#AsdfW^45') === '#aSDFw^45')\n  console.assert(solve('#6@2') === '2@6#')\n  console.assert(solve('#$a^D') === '#$A^d')\n  console.assert(solve('#ccc') === '#CCC')\n}\n\ntestSolve()\n", "declaration": "\nconst solve = (s) => {\n", "example_test": "const testSolve = () => {\n  console.assert(solve('1234') === '4321')\n  console.assert(solve('ab') === 'AB')\n  console.assert(solve('#a@C') === '#A@c')\n}\ntestSolve()\n", "entry_point": "solve", "gc": "/*You are given a string s.\n  if s[i] is a letter, reverse its case from lower to upper or vise versa, \n  otherwise keep it as it is.\n  If the string contains no letters, reverse the string.\n  The function should return the resulted string.\n  Examples\n  solve(\"1234\") = \"4321\"\n  solve(\"ab\") = \"AB\"\n  solve(\"#a@C\") = \"#A@c\"\n  */\nconst solve = (s) => {\n    let i = 0;\n    let j = s.length - 1;\n    while (i <= j) {\n        if (s[i].toLowerCase() === s[i].toUpperCase()) {\n            s[i] = s[i].toUpperCase();\n            s[j] = s[j].toLowerCase();\n            i++;\n            j--;\n        } else {\n            i++;\n        }\n    }\n    return s;\n};\n\nexport default solve;\n<|endoftext|>"}
{"task_id": "JavaScript/162", "prompt": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n", "canonical_solution": "  if (text == '') { return null }\n  var md5 = require('js-md5')\n  return md5(text)\n}\n\n", "test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n  console.assert(stringToMd5('') === null)\n  console.assert(stringToMd5('A B C') === '0ef78513b0cb8cef12743f5aeb35f888')\n  console.assert(stringToMd5('password') === '5f4dcc3b5aa765d61d8327deb882cf99')\n}\n\ntestStringToMd5()\n", "declaration": "\nconst stringToMd5 = (text) => {\n", "example_test": "const testStringToMd5 = () => {\n  console.assert(\n    stringToMd5('Hello world') === '3e25960a79dbc69b674cd4ec67a72c62'\n  )\n}\ntestStringToMd5()\n", "entry_point": "stringToMd5", "gc": "/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5 = (text) => {\n    if (text.length === 0) {\n        return null;\n    }\n\n    return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Array = (text) => {\n    if (text.length === 0) {\n        return null;\n    }\n\n    return crypto.createHash('md5').update(text).digest('hex');\n};\n\n/*\n  Given a string 'text', return its md5 hash equivalent string.\n  If 'text' is an empty string, return null.\n\n  >>> stringToMd5('Hello world') == '3e25960a79dbc69b674cd4ec67a72c62'\n  */\nconst stringToMd5Stream = (text) => {\n    if (text.length === 0) {\n        return null;\n    }\n\n    return crypto.createHash('md5').update(text).digest('hex');\n};\n\nmodule.exports = {\n    stringToMd5,\n    stringToMd5Array,\n    stringToMd5Stream\n};\n<|endoftext|>"}
{"task_id": "JavaScript/163", "prompt": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n", "canonical_solution": "  if (a > b) {\n    let tmp = a;\n    a = b;\n    b = tmp;\n  }\n  let y = []\n  for (let i = a; i <= b; i++) {\n    if (i == 2 || i == 4 || i == 6 || i == 8) { y.push(i) }\n  }\n  return y\n}\n\n", "test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 10)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(132, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(17, 89)) === JSON.stringify([])\n  )\n}\n\ntestGenerateIntegers()\n", "declaration": "\nconst generateIntegers = (a, b) => {\n", "example_test": "const testGenerateIntegers = () => {\n  console.assert(\n    JSON.stringify(generateIntegers(2, 8)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(8, 2)) === JSON.stringify([2, 4, 6, 8])\n  )\n  console.assert(\n    JSON.stringify(generateIntegers(10, 14)) === JSON.stringify([])\n  )\n}\ntestGenerateIntegers()\n", "entry_point": "generateIntegers", "gc": "/*\n  Given two positive integers a and b, return the even digits between a\n  and b, in ascending order.\n\n  For example:\n  generateIntegers(2, 8) => [2, 4, 6, 8]\n  generateIntegers(8, 2) => [2, 4, 6, 8]\n  generateIntegers(10, 14) => []\n  */\nconst generateIntegers = (a, b) => {\n  let result = []\n  for (let i = a; i <= b; i += 2) {\n    result.push(i)\n  }\n  return result\n}\n\nconsole.log(generateIntegers(2, 8))\nconsole.log(generateIntegers(8, 2))\nconsole.log(generateIntegers(10, 14))\n<|endoftext|>"}
